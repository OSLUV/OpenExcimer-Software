
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a24  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08009ae0  08009ae0  0000aae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d64  08009d64  0000b0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d64  08009d64  0000ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d6c  08009d6c  0000b0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d6c  08009d6c  0000ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08009d74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  200000a4  08009e18  0000b0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08009e18  0000b598  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171c1  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e5  00000000  00000000  0002228d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00025378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b962  00000000  00000000  000267a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018706  00000000  00000000  00042102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b1557  00000000  00000000  0005a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010bd5f  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000fa9  00000000  00000000  0010bda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ecc  00000000  00000000  0010cd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00111c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a4 	.word	0x200000a4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009ac8 	.word	0x08009ac8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a8 	.word	0x200000a8
 8000100:	08009ac8 	.word	0x08009ac8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_UART_RxCpltCallback>:
//
//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a2f      	ldr	r2, [pc, #188]	@ (800070c <HAL_UART_RxCpltCallback+0xcc>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d157      	bne.n	8000702 <HAL_UART_RxCpltCallback+0xc2>

		if (uart_rx_byte == '\n' || uart_rx_byte == '\r')  // End of input
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <HAL_UART_RxCpltCallback+0xd0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b0a      	cmp	r3, #10
 8000658:	d003      	beq.n	8000662 <HAL_UART_RxCpltCallback+0x22>
 800065a:	4b2d      	ldr	r3, [pc, #180]	@ (8000710 <HAL_UART_RxCpltCallback+0xd0>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b0d      	cmp	r3, #13
 8000660:	d13a      	bne.n	80006d8 <HAL_UART_RxCpltCallback+0x98>
		{
			uart_rx_buffer[uart_index] = '\0';
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <HAL_UART_RxCpltCallback+0xd4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	001a      	movs	r2, r3
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <HAL_UART_RxCpltCallback+0xd8>)
 800066a:	2100      	movs	r1, #0
 800066c:	5499      	strb	r1, [r3, r2]

			// Convert string to integer
			value = atoi(uart_rx_buffer);
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <HAL_UART_RxCpltCallback+0xd8>)
 8000670:	0018      	movs	r0, r3
 8000672:	f008 fcdd 	bl	8009030 <atoi>
 8000676:	0002      	movs	r2, r0
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <HAL_UART_RxCpltCallback+0xdc>)
 800067a:	601a      	str	r2, [r3, #0]

			if (value <= 10)
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <HAL_UART_RxCpltCallback+0xdc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b0a      	cmp	r3, #10
 8000682:	dc25      	bgt.n	80006d0 <HAL_UART_RxCpltCallback+0x90>
			{
				if (value < 1)
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <HAL_UART_RxCpltCallback+0xdc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dc06      	bgt.n	800069a <HAL_UART_RxCpltCallback+0x5a>
				{
					uartEnableFlag = 0; // turn off if zero
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <HAL_UART_RxCpltCallback+0xe0>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
					powerLevel = 1; // clip lowest value
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <HAL_UART_RxCpltCallback+0xe4>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e007      	b.n	80006aa <HAL_UART_RxCpltCallback+0x6a>
				}
				else {
					uartEnableFlag = 1; // turn on for all other valuesw
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <HAL_UART_RxCpltCallback+0xe0>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
					powerLevel = (uint8_t)value;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <HAL_UART_RxCpltCallback+0xdc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <HAL_UART_RxCpltCallback+0xe4>)
 80006a8:	701a      	strb	r2, [r3, #0]

				}
				snprintf(msg, sizeof(msg), "Set: %d\r\n", powerLevel);
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <HAL_UART_RxCpltCallback+0xe4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <HAL_UART_RxCpltCallback+0xe8>)
 80006b0:	481e      	ldr	r0, [pc, #120]	@ (800072c <HAL_UART_RxCpltCallback+0xec>)
 80006b2:	211e      	movs	r1, #30
 80006b4:	f008 fd58 	bl	8009168 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006b8:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <HAL_UART_RxCpltCallback+0xec>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fd22 	bl	8000104 <strlen>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	4918      	ldr	r1, [pc, #96]	@ (800072c <HAL_UART_RxCpltCallback+0xec>)
 80006ca:	4819      	ldr	r0, [pc, #100]	@ (8000730 <HAL_UART_RxCpltCallback+0xf0>)
 80006cc:	f006 fbd0 	bl	8006e70 <HAL_UART_Transmit>
			else
			{
				// do nothing
			}

			uart_index = 0;
 80006d0:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <HAL_UART_RxCpltCallback+0xd4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e00e      	b.n	80006f6 <HAL_UART_RxCpltCallback+0xb6>
		}
		else
		{


			if (uart_index < RX_BUFFER_SIZE - 1)
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <HAL_UART_RxCpltCallback+0xd4>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d80a      	bhi.n	80006f6 <HAL_UART_RxCpltCallback+0xb6>
			{
				uart_rx_buffer[uart_index++] = uart_rx_byte;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_UART_RxCpltCallback+0xd4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	b2d1      	uxtb	r1, r2
 80006e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <HAL_UART_RxCpltCallback+0xd4>)
 80006ea:	7011      	strb	r1, [r2, #0]
 80006ec:	001a      	movs	r2, r3
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <HAL_UART_RxCpltCallback+0xd0>)
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <HAL_UART_RxCpltCallback+0xd8>)
 80006f4:	5499      	strb	r1, [r3, r2]
			}
		}

		HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 80006f6:	4906      	ldr	r1, [pc, #24]	@ (8000710 <HAL_UART_RxCpltCallback+0xd0>)
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <HAL_UART_RxCpltCallback+0xf0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f006 fc5b 	bl	8006fb8 <HAL_UART_Receive_IT>
	}
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	40004400 	.word	0x40004400
 8000710:	20000417 	.word	0x20000417
 8000714:	20000416 	.word	0x20000416
 8000718:	2000040c 	.word	0x2000040c
 800071c:	20000438 	.word	0x20000438
 8000720:	2000000c 	.word	0x2000000c
 8000724:	2000000d 	.word	0x2000000d
 8000728:	08009ae0 	.word	0x08009ae0
 800072c:	20000418 	.word	0x20000418
 8000730:	20000378 	.word	0x20000378

08000734 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800073a:	f001 fc4b 	bl	8001fd4 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f001 fcce 	bl	80020e0 <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000744:	f000 fa7c 	bl	8000c40 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 8000748:	2064      	movs	r0, #100	@ 0x64
 800074a:	f001 fcc9 	bl	80020e0 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800074e:	f000 fedd 	bl	800150c <MX_GPIO_Init>
	MX_DMA_Init();
 8000752:	f000 fec5 	bl	80014e0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000756:	f000 faff 	bl	8000d58 <MX_ADC1_Init>
	MX_COMP2_Init();
 800075a:	f000 fbc1 	bl	8000ee0 <MX_COMP2_Init>
	MX_DAC1_Init();
 800075e:	f000 fbef 	bl	8000f40 <MX_DAC1_Init>
	MX_TIM1_Init();
 8000762:	f000 fc31 	bl	8000fc8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000766:	f000 fcf3 	bl	8001150 <MX_TIM2_Init>
	MX_TIM3_Init();
 800076a:	f000 fd51 	bl	8001210 <MX_TIM3_Init>
	MX_TIM16_Init();
 800076e:	f000 fe19 	bl	80013a4 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8000772:	f000 fe67 	bl	8001444 <MX_USART2_UART_Init>
	MX_TIM6_Init();
 8000776:	f000 fddb 	bl	8001330 <MX_TIM6_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800077a:	f000 fabf 	bl	8000cfc <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// synchronous timing interrupts
	TIM6->ARR = 1000;
 800077e:	4bd9      	ldr	r3, [pc, #868]	@ (8000ae4 <main+0x3b0>)
 8000780:	22fa      	movs	r2, #250	@ 0xfa
 8000782:	0092      	lsls	r2, r2, #2
 8000784:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 8000786:	4bd8      	ldr	r3, [pc, #864]	@ (8000ae8 <main+0x3b4>)
 8000788:	0018      	movs	r0, r3
 800078a:	f004 fe0f 	bl	80053ac <HAL_TIM_Base_Start_IT>

	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 800078e:	4bd7      	ldr	r3, [pc, #860]	@ (8000aec <main+0x3b8>)
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	4bd6      	ldr	r3, [pc, #856]	@ (8000aec <main+0x3b8>)
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	430a      	orrs	r2, r1
 8000798:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 800079a:	4bd4      	ldr	r3, [pc, #848]	@ (8000aec <main+0x3b8>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4bd3      	ldr	r3, [pc, #844]	@ (8000aec <main+0x3b8>)
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 80007a6:	4bd2      	ldr	r3, [pc, #840]	@ (8000af0 <main+0x3bc>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f004 feb2 	bl	8005514 <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 80007b0:	4bcf      	ldr	r3, [pc, #828]	@ (8000af0 <main+0x3bc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007b6:	4bce      	ldr	r3, [pc, #824]	@ (8000af0 <main+0x3bc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2180      	movs	r1, #128	@ 0x80
 80007bc:	0209      	lsls	r1, r1, #8
 80007be:	430a      	orrs	r2, r1
 80007c0:	645a      	str	r2, [r3, #68]	@ 0x44

	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 80007c2:	4bcc      	ldr	r3, [pc, #816]	@ (8000af4 <main+0x3c0>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 ffdd 	bl	8003786 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 80007cc:	4bca      	ldr	r3, [pc, #808]	@ (8000af8 <main+0x3c4>)
 80007ce:	48c9      	ldr	r0, [pc, #804]	@ (8000af4 <main+0x3c0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	f003 f88a 	bl	80038ec <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 80007d8:	4bc8      	ldr	r3, [pc, #800]	@ (8000afc <main+0x3c8>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fe80 	bl	80034e0 <HAL_COMP_Start>

	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_DMA, numberADCchannels); // start ADC with DMA, 6 channels
 80007e0:	4bc7      	ldr	r3, [pc, #796]	@ (8000b00 <main+0x3cc>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	001a      	movs	r2, r3
 80007e8:	49c6      	ldr	r1, [pc, #792]	@ (8000b04 <main+0x3d0>)
 80007ea:	4bc7      	ldr	r3, [pc, #796]	@ (8000b08 <main+0x3d4>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 ff97 	bl	8002720 <HAL_ADC_Start_DMA>
	 * 4 = Ch9: Lamp Intensity
	 * 5 = Ch10: Isense_In
	 */


	HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 80007f2:	49c6      	ldr	r1, [pc, #792]	@ (8000b0c <main+0x3d8>)
 80007f4:	4bc6      	ldr	r3, [pc, #792]	@ (8000b10 <main+0x3dc>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f006 fbdd 	bl	8006fb8 <HAL_UART_Receive_IT>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

	// blink LED
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000804:	2380      	movs	r3, #128	@ 0x80
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	4ac2      	ldr	r2, [pc, #776]	@ (8000b14 <main+0x3e0>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f003 fe91 	bl	8004534 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000812:	23fa      	movs	r3, #250	@ 0xfa
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fc62 	bl	80020e0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	4abc      	ldr	r2, [pc, #752]	@ (8000b14 <main+0x3e0>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f003 fe85 	bl	8004534 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800082a:	23fa      	movs	r3, #250	@ 0xfa
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fc56 	bl	80020e0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	4ab6      	ldr	r2, [pc, #728]	@ (8000b14 <main+0x3e0>)
 800083a:	0019      	movs	r1, r3
 800083c:	0010      	movs	r0, r2
 800083e:	f003 fe79 	bl	8004534 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000842:	23fa      	movs	r3, #250	@ 0xfa
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	0018      	movs	r0, r3
 8000848:	f001 fc4a 	bl	80020e0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4ab0      	ldr	r2, [pc, #704]	@ (8000b14 <main+0x3e0>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f003 fe6d 	bl	8004534 <HAL_GPIO_TogglePin>

		/* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request && enableUART) {
 800085a:	4baf      	ldr	r3, [pc, #700]	@ (8000b18 <main+0x3e4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
			//sendInt16UART();
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 800085e:	4baf      	ldr	r3, [pc, #700]	@ (8000b1c <main+0x3e8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d100      	bne.n	800086a <main+0x136>
 8000868:	e06b      	b.n	8000942 <main+0x20e>
			tim6_irq_request = 0;
 800086a:	4bac      	ldr	r3, [pc, #688]	@ (8000b1c <main+0x3e8>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) && uartEnableFlag; //pull low for enabling
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4aaa      	ldr	r2, [pc, #680]	@ (8000b20 <main+0x3ec>)
 8000876:	0019      	movs	r1, r3
 8000878:	0010      	movs	r0, r2
 800087a:	f003 fe21 	bl	80044c0 <HAL_GPIO_ReadPin>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d105      	bne.n	800088e <main+0x15a>
 8000882:	4ba8      	ldr	r3, [pc, #672]	@ (8000b24 <main+0x3f0>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <main+0x15a>
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <main+0x15c>
 800088e:	2300      	movs	r3, #0
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4ba5      	ldr	r3, [pc, #660]	@ (8000b28 <main+0x3f4>)
 8000894:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 8000896:	4ba4      	ldr	r3, [pc, #656]	@ (8000b28 <main+0x3f4>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d009      	beq.n	80008b4 <main+0x180>
 80008a0:	4ba2      	ldr	r3, [pc, #648]	@ (8000b2c <main+0x3f8>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <main+0x180>
				ignitionCounter++;
 80008a8:	4ba1      	ldr	r3, [pc, #644]	@ (8000b30 <main+0x3fc>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b9f      	ldr	r3, [pc, #636]	@ (8000b30 <main+0x3fc>)
 80008b2:	801a      	strh	r2, [r3, #0]
			}

			// checked in all states

			// check power level
			dutyMax = operationPoints[powerLevel-1][0];
 80008b4:	4b9f      	ldr	r3, [pc, #636]	@ (8000b34 <main+0x400>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	4b9f      	ldr	r3, [pc, #636]	@ (8000b38 <main+0x404>)
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	5ad2      	ldrh	r2, [r2, r3]
 80008c0:	4b9e      	ldr	r3, [pc, #632]	@ (8000b3c <main+0x408>)
 80008c2:	801a      	strh	r2, [r3, #0]
			operationFrequency = operationPoints[powerLevel-1][1];
 80008c4:	4b9b      	ldr	r3, [pc, #620]	@ (8000b34 <main+0x400>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	4a9b      	ldr	r2, [pc, #620]	@ (8000b38 <main+0x404>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	3302      	adds	r3, #2
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	4b9a      	ldr	r3, [pc, #616]	@ (8000b40 <main+0x40c>)
 80008d6:	801a      	strh	r2, [r3, #0]

			// check lamp voltage

			// check supply voltage
			if ((adc_24V < upper_24Vsupply) && (adc_24V > lower_24Vsupply)) {
 80008d8:	4b9a      	ldr	r3, [pc, #616]	@ (8000b44 <main+0x410>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b9a      	ldr	r3, [pc, #616]	@ (8000b48 <main+0x414>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d20b      	bcs.n	8000900 <main+0x1cc>
 80008e8:	4b96      	ldr	r3, [pc, #600]	@ (8000b44 <main+0x410>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b97      	ldr	r3, [pc, #604]	@ (8000b4c <main+0x418>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d903      	bls.n	8000900 <main+0x1cc>
				supplyOKFlag = 1;
 80008f8:	4b95      	ldr	r3, [pc, #596]	@ (8000b50 <main+0x41c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e002      	b.n	8000906 <main+0x1d2>
			}
			else {
				supplyOKFlag = 0;
 8000900:	4b93      	ldr	r3, [pc, #588]	@ (8000b50 <main+0x41c>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > upper_tempMOSFET) {
 8000906:	4b93      	ldr	r3, [pc, #588]	@ (8000b54 <main+0x420>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b92      	ldr	r3, [pc, #584]	@ (8000b58 <main+0x424>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	429a      	cmp	r2, r3
 8000914:	d903      	bls.n	800091e <main+0x1ea>
				OT_flag = 1;
 8000916:	4b91      	ldr	r3, [pc, #580]	@ (8000b5c <main+0x428>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e002      	b.n	8000924 <main+0x1f0>
			}
			else {
				OT_flag = 0;
 800091e:	4b8f      	ldr	r3, [pc, #572]	@ (8000b5c <main+0x428>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > upper_iIn) {
 8000924:	4b8e      	ldr	r3, [pc, #568]	@ (8000b60 <main+0x42c>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b8e      	ldr	r3, [pc, #568]	@ (8000b64 <main+0x430>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	429a      	cmp	r2, r3
 8000932:	d903      	bls.n	800093c <main+0x208>
				OCPinFlag = 1;
 8000934:	4b8c      	ldr	r3, [pc, #560]	@ (8000b68 <main+0x434>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e002      	b.n	8000942 <main+0x20e>
			}
			else {
				OCPinFlag = 0;
 800093c:	4b8a      	ldr	r3, [pc, #552]	@ (8000b68 <main+0x434>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]


		}

		// ------------ ASM -----------------------
		switch (state) {
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b04      	cmp	r3, #4
 8000948:	d900      	bls.n	800094c <main+0x218>
 800094a:	e786      	b.n	800085a <main+0x126>
 800094c:	009a      	lsls	r2, r3, #2
 800094e:	4b87      	ldr	r3, [pc, #540]	@ (8000b6c <main+0x438>)
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 8000956:	4b75      	ldr	r3, [pc, #468]	@ (8000b2c <main+0x3f8>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 800095c:	4b74      	ldr	r3, [pc, #464]	@ (8000b30 <main+0x3fc>)
 800095e:	2200      	movs	r2, #0
 8000960:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	486b      	ldr	r0, [pc, #428]	@ (8000b14 <main+0x3e0>)
 8000968:	2200      	movs	r2, #0
 800096a:	0019      	movs	r1, r3
 800096c:	f003 fdc5 	bl	80044fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 8000970:	4b6b      	ldr	r3, [pc, #428]	@ (8000b20 <main+0x3ec>)
 8000972:	2200      	movs	r2, #0
 8000974:	2140      	movs	r1, #64	@ 0x40
 8000976:	0018      	movs	r0, r3
 8000978:	f003 fdbf 	bl	80044fa <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800097c:	4b5c      	ldr	r3, [pc, #368]	@ (8000af0 <main+0x3bc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2200      	movs	r2, #0
 8000982:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->ARR=ignFrequency; //50 kHz
 8000984:	4b7a      	ldr	r3, [pc, #488]	@ (8000b70 <main+0x43c>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b58      	ldr	r3, [pc, #352]	@ (8000aec <main+0x3b8>)
 800098c:	62da      	str	r2, [r3, #44]	@ 0x2c

			// exit conditions
			if (errorFlag) {
 800098e:	4b79      	ldr	r3, [pc, #484]	@ (8000b74 <main+0x440>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <main+0x26a>
				state = ERROR_state;
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	2204      	movs	r2, #4
 800099c:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag  && supplyOKFlag ) {
 800099e:	4b62      	ldr	r3, [pc, #392]	@ (8000b28 <main+0x3f4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d100      	bne.n	80009aa <main+0x276>
 80009a8:	e12f      	b.n	8000c0a <main+0x4d6>
 80009aa:	4b69      	ldr	r3, [pc, #420]	@ (8000b50 <main+0x41c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d100      	bne.n	80009b6 <main+0x282>
 80009b4:	e129      	b.n	8000c0a <main+0x4d6>
				state = IGNITE;
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	2202      	movs	r2, #2
 80009ba:	701a      	strb	r2, [r3, #0]
			}
			break;
 80009bc:	e125      	b.n	8000c0a <main+0x4d6>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 80009be:	4b6e      	ldr	r3, [pc, #440]	@ (8000b78 <main+0x444>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b6e      	ldr	r3, [pc, #440]	@ (8000b7c <main+0x448>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d903      	bls.n	80009d2 <main+0x29e>
				state = ERROR_state;
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	2204      	movs	r2, #4
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e03d      	b.n	8000a4e <main+0x31a>
			}
			else if (!ignitionFlag) {
 80009d2:	4b56      	ldr	r3, [pc, #344]	@ (8000b2c <main+0x3f8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d139      	bne.n	8000a4e <main+0x31a>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 80009da:	4b55      	ldr	r3, [pc, #340]	@ (8000b30 <main+0x3fc>)
 80009dc:	881a      	ldrh	r2, [r3, #0]
 80009de:	4b68      	ldr	r3, [pc, #416]	@ (8000b80 <main+0x44c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d22a      	bcs.n	8000a3c <main+0x308>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	484a      	ldr	r0, [pc, #296]	@ (8000b14 <main+0x3e0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	0019      	movs	r1, r3
 80009f0:	f003 fd83 	bl	80044fa <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 80009f4:	4b63      	ldr	r3, [pc, #396]	@ (8000b84 <main+0x450>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <main+0x3bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM1->ARR = ignFrequency;
 8000a00:	4b5b      	ldr	r3, [pc, #364]	@ (8000b70 <main+0x43c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <main+0x3b8>)
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 8000a0a:	4b45      	ldr	r3, [pc, #276]	@ (8000b20 <main+0x3ec>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2140      	movs	r1, #64	@ 0x40
 8000a10:	0018      	movs	r0, r3
 8000a12:	f003 fd72 	bl	80044fa <HAL_GPIO_WritePin>
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && ignitionCounter > 1000) { // minimum ignition time 1000 ms
					if ( ignitionCounter > 1000) { // minimum ignition time 1000 ms
 8000a16:	4b46      	ldr	r3, [pc, #280]	@ (8000b30 <main+0x3fc>)
 8000a18:	881a      	ldrh	r2, [r3, #0]
 8000a1a:	23fa      	movs	r3, #250	@ 0xfa
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d915      	bls.n	8000a4e <main+0x31a>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000a22:	4b3f      	ldr	r3, [pc, #252]	@ (8000b20 <main+0x3ec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	@ 0x40
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f003 fd66 	bl	80044fa <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <main+0x3f8>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
						state = RUN;
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e008      	b.n	8000a4e <main+0x31a>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 8000a3c:	4b50      	ldr	r3, [pc, #320]	@ (8000b80 <main+0x44c>)
 8000a3e:	881a      	ldrh	r2, [r3, #0]
 8000a40:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <main+0x3fc>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d802      	bhi.n	8000a4e <main+0x31a>
					state = IGN_FAIL;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 8000a4e:	4b36      	ldr	r3, [pc, #216]	@ (8000b28 <main+0x3f4>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d000      	beq.n	8000a5a <main+0x326>
 8000a58:	e0d9      	b.n	8000c0e <main+0x4da>
				state = INIT;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000a60:	e0d5      	b.n	8000c0e <main+0x4da>
		case IGN_FAIL:
			ignitionFlag = 0;
 8000a62:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <main+0x3f8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000a68:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <main+0x3ec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2140      	movs	r1, #64	@ 0x40
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f003 fd43 	bl	80044fa <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <main+0x3bc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	4a24      	ldr	r2, [pc, #144]	@ (8000b14 <main+0x3e0>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f003 fd55 	bl	8004534 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000a8a:	2064      	movs	r0, #100	@ 0x64
 8000a8c:	f001 fb28 	bl	80020e0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <main+0x3e0>)
 8000a96:	0019      	movs	r1, r3
 8000a98:	0010      	movs	r0, r2
 8000a9a:	f003 fd4b 	bl	8004534 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f001 fb1e 	bl	80020e0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b14 <main+0x3e0>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f003 fd41 	bl	8004534 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000ab2:	2064      	movs	r0, #100	@ 0x64
 8000ab4:	f001 fb14 	bl	80020e0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <main+0x3e0>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f003 fd37 	bl	8004534 <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000ac6:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <main+0x454>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fb08 	bl	80020e0 <HAL_Delay>
			failedIgnitionCounter++;
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <main+0x444>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <main+0x444>)
 8000ada:	701a      	strb	r2, [r3, #0]
			state = INIT;
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
			break;
 8000ae2:	e097      	b.n	8000c14 <main+0x4e0>
 8000ae4:	40001000 	.word	0x40001000
 8000ae8:	200002e0 	.word	0x200002e0
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	200001fc 	.word	0x200001fc
 8000af4:	200001e8 	.word	0x200001e8
 8000af8:	00000fff 	.word	0x00000fff
 8000afc:	200001b8 	.word	0x200001b8
 8000b00:	20000000 	.word	0x20000000
 8000b04:	200000c8 	.word	0x200000c8
 8000b08:	200000f8 	.word	0x200000f8
 8000b0c:	20000417 	.word	0x20000417
 8000b10:	20000378 	.word	0x20000378
 8000b14:	50000800 	.word	0x50000800
 8000b18:	200000c6 	.word	0x200000c6
 8000b1c:	200000c5 	.word	0x200000c5
 8000b20:	50000400 	.word	0x50000400
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	200000c0 	.word	0x200000c0
 8000b2c:	2000043e 	.word	0x2000043e
 8000b30:	2000043c 	.word	0x2000043c
 8000b34:	2000000d 	.word	0x2000000d
 8000b38:	20000010 	.word	0x20000010
 8000b3c:	20000006 	.word	0x20000006
 8000b40:	2000000a 	.word	0x2000000a
 8000b44:	200000ec 	.word	0x200000ec
 8000b48:	2000003e 	.word	0x2000003e
 8000b4c:	20000040 	.word	0x20000040
 8000b50:	200000c1 	.word	0x200000c1
 8000b54:	200000ee 	.word	0x200000ee
 8000b58:	20000042 	.word	0x20000042
 8000b5c:	200000c3 	.word	0x200000c3
 8000b60:	200000f6 	.word	0x200000f6
 8000b64:	20000044 	.word	0x20000044
 8000b68:	200000c4 	.word	0x200000c4
 8000b6c:	08009aec 	.word	0x08009aec
 8000b70:	20000008 	.word	0x20000008
 8000b74:	200000c2 	.word	0x200000c2
 8000b78:	2000043f 	.word	0x2000043f
 8000b7c:	2000003c 	.word	0x2000003c
 8000b80:	20000038 	.word	0x20000038
 8000b84:	20000004 	.word	0x20000004
 8000b88:	2000003a 	.word	0x2000003a


		case RUN:
			// RUN code
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	4821      	ldr	r0, [pc, #132]	@ (8000c18 <main+0x4e4>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	0019      	movs	r1, r3
 8000b96:	f003 fcb0 	bl	80044fa <HAL_GPIO_WritePin>
			TIM1->ARR=operationFrequency;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <main+0x4e8>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <main+0x4ec>)
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMax); // max. duty cycle limiting
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <main+0x4f0>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <main+0x4f4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <main+0x4f8>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	481e      	ldr	r0, [pc, #120]	@ (8000c30 <main+0x4fc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f002 fe96 	bl	80038ec <HAL_DAC_SetValue>

			// exit conditions

			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <main+0x500>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <main+0x4a0>
 8000bca:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <main+0x504>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <main+0x4a6>
				state = INIT;
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
			}

			/*if (OT_flag || errorFlag || (adc_uSenseLamp>adc_uSenseLampOpenCircuit)) {
				state = ERROR_state;
			}*/
			if (OT_flag ) {
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <main+0x508>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d016      	beq.n	8000c12 <main+0x4de>
				state = ERROR_state;
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000bea:	e012      	b.n	8000c12 <main+0x4de>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <main+0x4f4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	635a      	str	r2, [r3, #52]	@ 0x34


			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <main+0x4e4>)
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	f003 fc99 	bl	8004534 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000c02:	20c8      	movs	r0, #200	@ 0xc8
 8000c04:	f001 fa6c 	bl	80020e0 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000c08:	e004      	b.n	8000c14 <main+0x4e0>
			break;
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	e625      	b.n	800085a <main+0x126>
			break;
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	e623      	b.n	800085a <main+0x126>
			break;
 8000c12:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request && enableUART) {
 8000c14:	e621      	b.n	800085a <main+0x126>
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	50000800 	.word	0x50000800
 8000c1c:	2000000a 	.word	0x2000000a
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	20000006 	.word	0x20000006
 8000c28:	200001fc 	.word	0x200001fc
 8000c2c:	20000002 	.word	0x20000002
 8000c30:	200001e8 	.word	0x200001e8
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	200000c1 	.word	0x200000c1
 8000c3c:	200000c3 	.word	0x200000c3

08000c40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b093      	sub	sp, #76	@ 0x4c
 8000c44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	2410      	movs	r4, #16
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	2338      	movs	r3, #56	@ 0x38
 8000c4e:	001a      	movs	r2, r3
 8000c50:	2100      	movs	r1, #0
 8000c52:	f008 fabf 	bl	80091d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c56:	003b      	movs	r3, r7
 8000c58:	0018      	movs	r0, r3
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f008 fab8 	bl	80091d4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 fc7f 	bl	800456c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2202      	movs	r2, #2
 8000c72:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	0052      	lsls	r2, r2, #1
 8000c7a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2240      	movs	r2, #64	@ 0x40
 8000c88:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2202      	movs	r2, #2
 8000c94:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	22e0      	movs	r2, #224	@ 0xe0
 8000ca6:	0312      	lsls	r2, r2, #12
 8000ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	22e0      	movs	r2, #224	@ 0xe0
 8000cae:	0512      	lsls	r2, r2, #20
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2280      	movs	r2, #128	@ 0x80
 8000cb6:	0592      	lsls	r2, r2, #22
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f003 fca1 	bl	8004604 <HAL_RCC_OscConfig>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000cc6:	f000 fccb 	bl	8001660 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	003b      	movs	r3, r7
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f003 ffa6 	bl	8004c38 <HAL_RCC_ClockConfig>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000cf0:	f000 fcb6 	bl	8001660 <Error_Handler>
	}
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b013      	add	sp, #76	@ 0x4c
 8000cfa:	bd90      	pop	{r4, r7, pc}

08000cfc <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	/* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2011      	movs	r0, #17
 8000d06:	f002 fce9 	bl	80036dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000d0a:	2011      	movs	r0, #17
 8000d0c:	f002 fcfb 	bl	8003706 <HAL_NVIC_EnableIRQ>
	/* ADC1_COMP_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	200c      	movs	r0, #12
 8000d16:	f002 fce1 	bl	80036dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000d1a:	200c      	movs	r0, #12
 8000d1c:	f002 fcf3 	bl	8003706 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2009      	movs	r0, #9
 8000d26:	f002 fcd9 	bl	80036dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d2a:	2009      	movs	r0, #9
 8000d2c:	f002 fceb 	bl	8003706 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2010      	movs	r0, #16
 8000d36:	f002 fcd1 	bl	80036dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d3a:	2010      	movs	r0, #16
 8000d3c:	f002 fce3 	bl	8003706 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	201c      	movs	r0, #28
 8000d46:	f002 fcc9 	bl	80036dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4a:	201c      	movs	r0, #28
 8000d4c:	f002 fcdb 	bl	8003706 <HAL_NVIC_EnableIRQ>
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	0018      	movs	r0, r3
 8000d62:	230c      	movs	r3, #12
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f008 fa34 	bl	80091d4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000d6c:	4b55      	ldr	r3, [pc, #340]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d6e:	4a56      	ldr	r2, [pc, #344]	@ (8000ec8 <MX_ADC1_Init+0x170>)
 8000d70:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000d72:	4b54      	ldr	r3, [pc, #336]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d74:	22a0      	movs	r2, #160	@ 0xa0
 8000d76:	0352      	lsls	r2, r2, #13
 8000d78:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b52      	ldr	r3, [pc, #328]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b50      	ldr	r3, [pc, #320]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d86:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	0392      	lsls	r2, r2, #14
 8000d8c:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d94:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000da0:	4b48      	ldr	r3, [pc, #288]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 6;
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000da8:	2206      	movs	r2, #6
 8000daa:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000dac:	4b45      	ldr	r3, [pc, #276]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000dae:	22a8      	movs	r2, #168	@ 0xa8
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000db4:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000db6:	2280      	movs	r2, #128	@ 0x80
 8000db8:	00d2      	lsls	r2, r2, #3
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dbc:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000dbe:	222c      	movs	r2, #44	@ 0x2c
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000dca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000dcc:	2206      	movs	r2, #6
 8000dce:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000dd2:	2206      	movs	r2, #6
 8000dd4:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000dd8:	223c      	movs	r2, #60	@ 0x3c
 8000dda:	2100      	movs	r1, #0
 8000ddc:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000dde:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de4:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 faf2 	bl	80023d0 <HAL_ADC_Init>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x9c>
	{
		Error_Handler();
 8000df0:	f000 fc36 	bl	8001660 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3a      	adds	r2, r7, #4
 8000e08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 fe4d 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 8000e16:	f000 fc23 	bl	8001660 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ecc <MX_ADC1_Init+0x174>)
 8000e1e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2204      	movs	r2, #4
 8000e24:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e26:	1d3a      	adds	r2, r7, #4
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fe3d 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8000e36:	f000 fc13 	bl	8001660 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4a24      	ldr	r2, [pc, #144]	@ (8000ed0 <MX_ADC1_Init+0x178>)
 8000e3e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2208      	movs	r2, #8
 8000e44:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	1d3a      	adds	r2, r7, #4
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fe2d 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0x102>
	{
		Error_Handler();
 8000e56:	f000 fc03 	bl	8001660 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <MX_ADC1_Init+0x17c>)
 8000e5e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	220c      	movs	r2, #12
 8000e64:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3a      	adds	r2, r7, #4
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 fe1d 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 8000e76:	f000 fbf3 	bl	8001660 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ed8 <MX_ADC1_Init+0x180>)
 8000e7e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2210      	movs	r2, #16
 8000e84:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e86:	1d3a      	adds	r2, r7, #4
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 fe0d 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x142>
	{
		Error_Handler();
 8000e96:	f000 fbe3 	bl	8001660 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000edc <MX_ADC1_Init+0x184>)
 8000e9e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2214      	movs	r2, #20
 8000ea4:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	1d3a      	adds	r2, r7, #4
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_ADC1_Init+0x16c>)
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 fdfd 	bl	8002aac <HAL_ADC_ConfigChannel>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x162>
	{
		Error_Handler();
 8000eb6:	f000 fbd3 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	200000f8 	.word	0x200000f8
 8000ec8:	40012400 	.word	0x40012400
 8000ecc:	04000002 	.word	0x04000002
 8000ed0:	0c000008 	.word	0x0c000008
 8000ed4:	20000100 	.word	0x20000100
 8000ed8:	24000200 	.word	0x24000200
 8000edc:	28000400 	.word	0x28000400

08000ee0 <MX_COMP2_Init>:
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	/* USER CODE END COMP2_Init 0 */

	/* USER CODE BEGIN COMP2_Init 1 */

	/* USER CODE END COMP2_Init 1 */
	hcomp2.Instance = COMP2;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000ee6:	4a15      	ldr	r2, [pc, #84]	@ (8000f3c <MX_COMP2_Init+0x5c>)
 8000ee8:	601a      	str	r2, [r3, #0]
	hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
	hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000ef2:	2240      	movs	r2, #64	@ 0x40
 8000ef4:	615a      	str	r2, [r3, #20]
	hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
	hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
	hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
	hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <MX_COMP2_Init+0x58>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 f97a 	bl	800321c <HAL_COMP_Init>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_COMP2_Init+0x50>
	{
		Error_Handler();
 8000f2c:	f000 fb98 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN COMP2_Init 2 */

	/* USER CODE END COMP2_Init 2 */

}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	200001b8 	.word	0x200001b8
 8000f3c:	40010204 	.word	0x40010204

08000f40 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2324      	movs	r3, #36	@ 0x24
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f008 f940 	bl	80091d4 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_DAC1_Init+0x80>)
 8000f56:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <MX_DAC1_Init+0x84>)
 8000f58:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_DAC1_Init+0x80>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f002 fbef 	bl	8003740 <HAL_DAC_Init>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d001      	beq.n	8000f6a <MX_DAC1_Init+0x2a>
	{
		Error_Handler();
 8000f66:	f000 fb7b 	bl	8001660 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2201      	movs	r2, #1
 8000f80:	60da      	str	r2, [r3, #12]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <MX_DAC1_Init+0x80>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f002 fcdc 	bl	800394c <HAL_DAC_ConfigChannel>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_DAC1_Init+0x5c>
	{
		Error_Handler();
 8000f98:	f000 fb62 	bl	8001660 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fa2:	1d39      	adds	r1, r7, #4
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_DAC1_Init+0x80>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f002 fccf 	bl	800394c <HAL_DAC_ConfigChannel>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_DAC1_Init+0x76>
	{
		Error_Handler();
 8000fb2:	f000 fb55 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b00a      	add	sp, #40	@ 0x28
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	200001e8 	.word	0x200001e8
 8000fc4:	40007400 	.word	0x40007400

08000fc8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09c      	sub	sp, #112	@ 0x70
 8000fcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 8000fce:	235c      	movs	r3, #92	@ 0x5c
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2314      	movs	r3, #20
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f008 f8fb 	bl	80091d4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	2350      	movs	r3, #80	@ 0x50
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f008 f8f3 	bl	80091d4 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	2334      	movs	r3, #52	@ 0x34
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	231c      	movs	r3, #28
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f008 f8eb 	bl	80091d4 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffe:	003b      	movs	r3, r7
 8001000:	0018      	movs	r0, r3
 8001002:	2334      	movs	r3, #52	@ 0x34
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f008 f8e4 	bl	80091d4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800100c:	4b4e      	ldr	r3, [pc, #312]	@ (8001148 <MX_TIM1_Init+0x180>)
 800100e:	4a4f      	ldr	r2, [pc, #316]	@ (800114c <MX_TIM1_Init+0x184>)
 8001010:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001012:	4b4d      	ldr	r3, [pc, #308]	@ (8001148 <MX_TIM1_Init+0x180>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b4b      	ldr	r3, [pc, #300]	@ (8001148 <MX_TIM1_Init+0x180>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 320;
 800101e:	4b4a      	ldr	r3, [pc, #296]	@ (8001148 <MX_TIM1_Init+0x180>)
 8001020:	22a0      	movs	r2, #160	@ 0xa0
 8001022:	0052      	lsls	r2, r2, #1
 8001024:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_TIM1_Init+0x180>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800102c:	4b46      	ldr	r3, [pc, #280]	@ (8001148 <MX_TIM1_Init+0x180>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001032:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <MX_TIM1_Init+0x180>)
 8001034:	2280      	movs	r2, #128	@ 0x80
 8001036:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <MX_TIM1_Init+0x180>)
 800103a:	0018      	movs	r0, r3
 800103c:	f004 fa12 	bl	8005464 <HAL_TIM_PWM_Init>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x80>
	{
		Error_Handler();
 8001044:	f000 fb0c 	bl	8001660 <Error_Handler>
	}
	sClearInputConfig.ClearInputState = ENABLE;
 8001048:	215c      	movs	r1, #92	@ 0x5c
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
	sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_COMP2;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 8001056:	1879      	adds	r1, r7, r1
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <MX_TIM1_Init+0x180>)
 800105a:	2200      	movs	r2, #0
 800105c:	0018      	movs	r0, r3
 800105e:	f004 fe47 	bl	8005cf0 <HAL_TIM_ConfigOCrefClear>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0xa2>
	{
		Error_Handler();
 8001066:	f000 fafb 	bl	8001660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2150      	movs	r1, #80	@ 0x50
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107e:	187a      	adds	r2, r7, r1
 8001080:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <MX_TIM1_Init+0x180>)
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f005 fd7b 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800108e:	f000 fae7 	bl	8001660 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2134      	movs	r1, #52	@ 0x34
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2260      	movs	r2, #96	@ 0x60
 8001098:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010be:	1879      	adds	r1, r7, r1
 80010c0:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <MX_TIM1_Init+0x180>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f004 fd13 	bl	8005af0 <HAL_TIM_PWM_ConfigChannel>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x10a>
	{
		Error_Handler();
 80010ce:	f000 fac7 	bl	8001660 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d2:	003b      	movs	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d8:	003b      	movs	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010de:	003b      	movs	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010e4:	003b      	movs	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ea:	003b      	movs	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f0:	003b      	movs	r3, r7
 80010f2:	2280      	movs	r2, #128	@ 0x80
 80010f4:	0192      	lsls	r2, r2, #6
 80010f6:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80010f8:	003b      	movs	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010fe:	003b      	movs	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001104:	003b      	movs	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800110a:	003b      	movs	r3, r7
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	0492      	lsls	r2, r2, #18
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001112:	003b      	movs	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001118:	003b      	movs	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111e:	003b      	movs	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001124:	003a      	movs	r2, r7
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_TIM1_Init+0x180>)
 8001128:	0011      	movs	r1, r2
 800112a:	0018      	movs	r0, r3
 800112c:	f005 fd96 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x170>
	{
		Error_Handler();
 8001134:	f000 fa94 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <MX_TIM1_Init+0x180>)
 800113a:	0018      	movs	r0, r3
 800113c:	f000 fd12 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b01c      	add	sp, #112	@ 0x70
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001fc 	.word	0x200001fc
 800114c:	40012c00 	.word	0x40012c00

08001150 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	231c      	movs	r3, #28
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	0018      	movs	r0, r3
 800115c:	230c      	movs	r3, #12
 800115e:	001a      	movs	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	f008 f837 	bl	80091d4 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	003b      	movs	r3, r7
 8001168:	0018      	movs	r0, r3
 800116a:	231c      	movs	r3, #28
 800116c:	001a      	movs	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	f008 f830 	bl	80091d4 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <MX_TIM2_Init+0xbc>)
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	05d2      	lsls	r2, r2, #23
 800117a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <MX_TIM2_Init+0xbc>)
 800117e:	2210      	movs	r2, #16
 8001180:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_TIM2_Init+0xbc>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <MX_TIM2_Init+0xbc>)
 800118a:	22fa      	movs	r2, #250	@ 0xfa
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_TIM2_Init+0xbc>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <MX_TIM2_Init+0xbc>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_TIM2_Init+0xbc>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f004 f960 	bl	8005464 <HAL_TIM_PWM_Init>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 80011a8:	f000 fa5a 	bl	8001660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	211c      	movs	r1, #28
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ba:	187a      	adds	r2, r7, r1
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_TIM2_Init+0xbc>)
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f005 fcdd 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 80011ca:	f000 fa49 	bl	8001660 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ce:	003b      	movs	r3, r7
 80011d0:	2260      	movs	r2, #96	@ 0x60
 80011d2:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 500;
 80011d4:	003b      	movs	r3, r7
 80011d6:	22fa      	movs	r2, #250	@ 0xfa
 80011d8:	0052      	lsls	r2, r2, #1
 80011da:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011dc:	003b      	movs	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	003b      	movs	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e8:	0039      	movs	r1, r7
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_TIM2_Init+0xbc>)
 80011ec:	2208      	movs	r2, #8
 80011ee:	0018      	movs	r0, r3
 80011f0:	f004 fc7e 	bl	8005af0 <HAL_TIM_PWM_ConfigChannel>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 80011f8:	f000 fa32 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <MX_TIM2_Init+0xbc>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fcb0 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b00a      	add	sp, #40	@ 0x28
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000248 	.word	0x20000248

08001210 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001216:	231c      	movs	r3, #28
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	0018      	movs	r0, r3
 800121c:	2314      	movs	r3, #20
 800121e:	001a      	movs	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f007 ffd7 	bl	80091d4 <memset>
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001226:	230c      	movs	r3, #12
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	0018      	movs	r0, r3
 800122c:	2310      	movs	r3, #16
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f007 ffcf 	bl	80091d4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	003b      	movs	r3, r7
 8001238:	0018      	movs	r0, r3
 800123a:	230c      	movs	r3, #12
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f007 ffc8 	bl	80091d4 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001244:	4b37      	ldr	r3, [pc, #220]	@ (8001324 <MX_TIM3_Init+0x114>)
 8001246:	4a38      	ldr	r2, [pc, #224]	@ (8001328 <MX_TIM3_Init+0x118>)
 8001248:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800124a:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <MX_TIM3_Init+0x114>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <MX_TIM3_Init+0x114>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001256:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <MX_TIM3_Init+0x114>)
 8001258:	4a34      	ldr	r2, [pc, #208]	@ (800132c <MX_TIM3_Init+0x11c>)
 800125a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <MX_TIM3_Init+0x114>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <MX_TIM3_Init+0x114>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <MX_TIM3_Init+0x114>)
 800126a:	0018      	movs	r0, r3
 800126c:	f004 fa3c 	bl	80056e8 <HAL_TIM_IC_Init>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001274:	f000 f9f4 	bl	8001660 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001278:	211c      	movs	r1, #28
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2204      	movs	r2, #4
 800127e:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2260      	movs	r2, #96	@ 0x60
 8001284:	605a      	str	r2, [r3, #4]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
	sSlaveConfig.TriggerFilter = 0;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001298:	187a      	adds	r2, r7, r1
 800129a:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <MX_TIM3_Init+0x114>)
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f004 fe50 	bl	8005f44 <HAL_TIM_SlaveConfigSynchro>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 80012a8:	f000 f9da 	bl	8001660 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012ac:	210c      	movs	r1, #12
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2202      	movs	r2, #2
 80012b2:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2202      	movs	r2, #2
 80012b8:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012c6:	1879      	adds	r1, r7, r1
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_TIM3_Init+0x114>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	0018      	movs	r0, r3
 80012ce:	f004 fb6b 	bl	80059a8 <HAL_TIM_IC_ConfigChannel>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0xca>
	{
		Error_Handler();
 80012d6:	f000 f9c3 	bl	8001660 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012da:	210c      	movs	r1, #12
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2201      	movs	r2, #1
 80012e6:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012e8:	1879      	adds	r1, r7, r1
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_TIM3_Init+0x114>)
 80012ec:	2204      	movs	r2, #4
 80012ee:	0018      	movs	r0, r3
 80012f0:	f004 fb5a 	bl	80059a8 <HAL_TIM_IC_ConfigChannel>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 80012f8:	f000 f9b2 	bl	8001660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	003b      	movs	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	003b      	movs	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001308:	003a      	movs	r2, r7
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_TIM3_Init+0x114>)
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f005 fc36 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d001      	beq.n	800131c <MX_TIM3_Init+0x10c>
	{
		Error_Handler();
 8001318:	f000 f9a2 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b00c      	add	sp, #48	@ 0x30
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000294 	.word	0x20000294
 8001328:	40000400 	.word	0x40000400
 800132c:	0000ffff 	.word	0x0000ffff

08001330 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	0018      	movs	r0, r3
 800133a:	230c      	movs	r3, #12
 800133c:	001a      	movs	r2, r3
 800133e:	2100      	movs	r1, #0
 8001340:	f007 ff48 	bl	80091d4 <memset>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_TIM6_Init+0x6c>)
 8001346:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <MX_TIM6_Init+0x70>)
 8001348:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_TIM6_Init+0x6c>)
 800134c:	2210      	movs	r2, #16
 800134e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_TIM6_Init+0x6c>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_TIM6_Init+0x6c>)
 8001358:	22fa      	movs	r2, #250	@ 0xfa
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_TIM6_Init+0x6c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <MX_TIM6_Init+0x6c>)
 8001366:	0018      	movs	r0, r3
 8001368:	f003 ffc8 	bl	80052fc <HAL_TIM_Base_Init>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM6_Init+0x44>
	{
		Error_Handler();
 8001370:	f000 f976 	bl	8001660 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001380:	1d3a      	adds	r2, r7, #4
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_TIM6_Init+0x6c>)
 8001384:	0011      	movs	r1, r2
 8001386:	0018      	movs	r0, r3
 8001388:	f005 fbfa 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM6_Init+0x64>
	{
		Error_Handler();
 8001390:	f000 f966 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b004      	add	sp, #16
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002e0 	.word	0x200002e0
 80013a0:	40001000 	.word	0x40001000

080013a4 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_IC_InitTypeDef sConfigIC = {0};
 80013aa:	003b      	movs	r3, r7
 80013ac:	0018      	movs	r0, r3
 80013ae:	2310      	movs	r3, #16
 80013b0:	001a      	movs	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	f007 ff0e 	bl	80091d4 <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013ba:	4a20      	ldr	r2, [pc, #128]	@ (800143c <MX_TIM16_Init+0x98>)
 80013bc:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 0;
 80013be:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <MX_TIM16_Init+0x9c>)
 80013ce:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f003 ff89 	bl	80052fc <HAL_TIM_Base_Init>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM16_Init+0x4e>
	{
		Error_Handler();
 80013ee:	f000 f937 	bl	8001660 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_TIM16_Init+0x94>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f004 f977 	bl	80056e8 <HAL_TIM_IC_Init>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM16_Init+0x5e>
	{
		Error_Handler();
 80013fe:	f000 f92f 	bl	8001660 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001402:	003b      	movs	r3, r7
 8001404:	220a      	movs	r2, #10
 8001406:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001408:	003b      	movs	r3, r7
 800140a:	2201      	movs	r2, #1
 800140c:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800140e:	003b      	movs	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8001414:	003b      	movs	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800141a:	0039      	movs	r1, r7
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_TIM16_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	0018      	movs	r0, r3
 8001422:	f004 fac1 	bl	80059a8 <HAL_TIM_IC_ConfigChannel>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_TIM16_Init+0x8a>
	{
		Error_Handler();
 800142a:	f000 f919 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	2000032c 	.word	0x2000032c
 800143c:	40014400 	.word	0x40014400
 8001440:	0000ffff 	.word	0x0000ffff

08001444 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001448:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 800144a:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <MX_USART2_UART_Init+0x98>)
 800144c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001450:	22e1      	movs	r2, #225	@ 0xe1
 8001452:	0252      	lsls	r2, r2, #9
 8001454:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 800148e:	0018      	movs	r0, r3
 8001490:	f005 fc98 	bl	8006dc4 <HAL_UART_Init>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001498:	f000 f8e2 	bl	8001660 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 800149e:	2100      	movs	r1, #0
 80014a0:	0018      	movs	r0, r3
 80014a2:	f007 fce5 	bl	8008e70 <HAL_UARTEx_SetTxFifoThreshold>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 80014aa:	f000 f8d9 	bl	8001660 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	0018      	movs	r0, r3
 80014b4:	f007 fd1c 	bl	8008ef0 <HAL_UARTEx_SetRxFifoThreshold>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80014bc:	f000 f8d0 	bl	8001660 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <MX_USART2_UART_Init+0x94>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f007 fc9a 	bl	8008dfc <HAL_UARTEx_DisableFifoMode>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80014cc:	f000 f8c8 	bl	8001660 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	20000378 	.word	0x20000378
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_DMA_Init+0x28>)
 80014e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <MX_DMA_Init+0x28>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <MX_DMA_Init+0x28>)
 80014f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

}
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	40021000 	.word	0x40021000

0800150c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	240c      	movs	r4, #12
 8001514:	193b      	adds	r3, r7, r4
 8001516:	0018      	movs	r0, r3
 8001518:	2314      	movs	r3, #20
 800151a:	001a      	movs	r2, r3
 800151c:	2100      	movs	r1, #0
 800151e:	f007 fe59 	bl	80091d4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b4c      	ldr	r3, [pc, #304]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001526:	4b4b      	ldr	r3, [pc, #300]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001528:	2102      	movs	r1, #2
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	@ 0x34
 800152e:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b46      	ldr	r3, [pc, #280]	@ (8001654 <MX_GPIO_Init+0x148>)
 800153c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153e:	4b45      	ldr	r3, [pc, #276]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001540:	2104      	movs	r1, #4
 8001542:	430a      	orrs	r2, r1
 8001544:	635a      	str	r2, [r3, #52]	@ 0x34
 8001546:	4b43      	ldr	r3, [pc, #268]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b40      	ldr	r3, [pc, #256]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001556:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001558:	2101      	movs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
 800155e:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <MX_GPIO_Init+0x148>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001562:	2201      	movs	r2, #1
 8001564:	4013      	ands	r3, r2
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	483a      	ldr	r0, [pc, #232]	@ (8001658 <MX_GPIO_Init+0x14c>)
 8001570:	2200      	movs	r2, #0
 8001572:	0019      	movs	r1, r3
 8001574:	f002 ffc1 	bl	80044fa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 8001578:	23a0      	movs	r3, #160	@ 0xa0
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	2200      	movs	r2, #0
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	0018      	movs	r0, r3
 8001582:	f002 ffba 	bl	80044fa <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 8001586:	4b35      	ldr	r3, [pc, #212]	@ (800165c <MX_GPIO_Init+0x150>)
 8001588:	2200      	movs	r2, #0
 800158a:	2140      	movs	r1, #64	@ 0x40
 800158c:	0018      	movs	r0, r3
 800158e:	f002 ffb4 	bl	80044fa <HAL_GPIO_WritePin>

	/*Configure GPIO pin : MCU_Remote_Pin */
	GPIO_InitStruct.Pin = MCU_Remote_Pin;
 8001592:	193b      	adds	r3, r7, r4
 8001594:	2280      	movs	r2, #128	@ 0x80
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	193b      	adds	r3, r7, r4
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	2201      	movs	r2, #1
 80015a4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 80015a6:	193b      	adds	r3, r7, r4
 80015a8:	4a2c      	ldr	r2, [pc, #176]	@ (800165c <MX_GPIO_Init+0x150>)
 80015aa:	0019      	movs	r1, r3
 80015ac:	0010      	movs	r0, r2
 80015ae:	f002 fe23 	bl	80041f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80015b2:	0021      	movs	r1, r4
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2280      	movs	r2, #128	@ 0x80
 80015b8:	0212      	lsls	r2, r2, #8
 80015ba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	000c      	movs	r4, r1
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2201      	movs	r2, #1
 80015c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <MX_GPIO_Init+0x14c>)
 80015d4:	0019      	movs	r1, r3
 80015d6:	0010      	movs	r0, r2
 80015d8:	f002 fe0e 	bl	80041f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Status_Pin */
	GPIO_InitStruct.Pin = Status_Pin;
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	2201      	movs	r2, #1
 80015e6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	193b      	adds	r3, r7, r4
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 80015f4:	193a      	adds	r2, r7, r4
 80015f6:	23a0      	movs	r3, #160	@ 0xa0
 80015f8:	05db      	lsls	r3, r3, #23
 80015fa:	0011      	movs	r1, r2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f002 fdfb 	bl	80041f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
	GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	193b      	adds	r3, r7, r4
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001616:	193a      	adds	r2, r7, r4
 8001618:	23a0      	movs	r3, #160	@ 0xa0
 800161a:	05db      	lsls	r3, r3, #23
 800161c:	0011      	movs	r1, r2
 800161e:	0018      	movs	r0, r3
 8001620:	f002 fdea 	bl	80041f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : UV_LED_Pin */
	GPIO_InitStruct.Pin = UV_LED_Pin;
 8001624:	0021      	movs	r1, r4
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2240      	movs	r2, #64	@ 0x40
 800162a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2201      	movs	r2, #1
 8001630:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 800163e:	187b      	adds	r3, r7, r1
 8001640:	4a06      	ldr	r2, [pc, #24]	@ (800165c <MX_GPIO_Init+0x150>)
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f002 fdd7 	bl	80041f8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b009      	add	sp, #36	@ 0x24
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	40021000 	.word	0x40021000
 8001658:	50000800 	.word	0x50000800
 800165c:	50000400 	.word	0x50000400

08001660 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <Error_Handler+0x24>)
 800166e:	0019      	movs	r1, r3
 8001670:	0010      	movs	r0, r2
 8001672:	f002 ff5f 	bl	8004534 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001676:	23fa      	movs	r3, #250	@ 0xfa
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	0018      	movs	r0, r3
 800167c:	f000 fd30 	bl	80020e0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	e7f1      	b.n	8001668 <Error_Handler+0x8>
 8001684:	50000800 	.word	0x50000800

08001688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_MspInit+0x44>)
 8001690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_MspInit+0x44>)
 8001694:	2101      	movs	r1, #1
 8001696:	430a      	orrs	r2, r1
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <HAL_MspInit+0x44>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	2201      	movs	r2, #1
 80016a0:	4013      	ands	r3, r2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_MspInit+0x44>)
 80016a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_MspInit+0x44>)
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	430a      	orrs	r2, r1
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_MspInit+0x44>)
 80016b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	055b      	lsls	r3, r3, #21
 80016bc:	4013      	ands	r3, r2
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b099      	sub	sp, #100	@ 0x64
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	234c      	movs	r3, #76	@ 0x4c
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	0018      	movs	r0, r3
 80016de:	2314      	movs	r3, #20
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f007 fd76 	bl	80091d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	2418      	movs	r4, #24
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	0018      	movs	r0, r3
 80016ee:	2334      	movs	r3, #52	@ 0x34
 80016f0:	001a      	movs	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	f007 fd6e 	bl	80091d4 <memset>
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a44      	ldr	r2, [pc, #272]	@ (8001810 <HAL_ADC_MspInit+0x140>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d000      	beq.n	8001704 <HAL_ADC_MspInit+0x34>
 8001702:	e080      	b.n	8001806 <HAL_ADC_MspInit+0x136>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001704:	193b      	adds	r3, r7, r4
 8001706:	2280      	movs	r2, #128	@ 0x80
 8001708:	01d2      	lsls	r2, r2, #7
 800170a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	05d2      	lsls	r2, r2, #23
 8001712:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	193b      	adds	r3, r7, r4
 8001716:	0018      	movs	r0, r3
 8001718:	f003 fc38 	bl	8004f8c <HAL_RCCEx_PeriphCLKConfig>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001720:	f7ff ff9e 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001724:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 8001726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0349      	lsls	r1, r1, #13
 800172e:	430a      	orrs	r2, r1
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
 8001732:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 8001734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	035b      	lsls	r3, r3, #13
 800173a:	4013      	ands	r3, r2
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 8001742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 8001746:	2101      	movs	r1, #1
 8001748:	430a      	orrs	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	@ 0x34
 800174c:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 800174e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 800175a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 800175e:	2102      	movs	r1, #2
 8001760:	430a      	orrs	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	@ 0x34
 8001764:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_ADC_MspInit+0x144>)
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 8001770:	244c      	movs	r4, #76	@ 0x4c
 8001772:	193b      	adds	r3, r7, r4
 8001774:	220b      	movs	r2, #11
 8001776:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	2203      	movs	r2, #3
 800177c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	193a      	adds	r2, r7, r4
 8001786:	23a0      	movs	r3, #160	@ 0xa0
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f002 fd33 	bl	80041f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 8001792:	193b      	adds	r3, r7, r4
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001798:	193b      	adds	r3, r7, r4
 800179a:	2203      	movs	r2, #3
 800179c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <HAL_ADC_MspInit+0x148>)
 80017a8:	0019      	movs	r1, r3
 80017aa:	0010      	movs	r0, r2
 80017ac:	f002 fd24 	bl	80041f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_ADC_MspInit+0x150>)
 80017b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017b6:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017b8:	2205      	movs	r2, #5
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017ca:	2280      	movs	r2, #128	@ 0x80
 80017cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	0052      	lsls	r2, r2, #1
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	00d2      	lsls	r2, r2, #3
 80017dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017e0:	2220      	movs	r2, #32
 80017e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f002 f9e5 	bl	8003bbc <HAL_DMA_Init>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80017f6:	f7ff ff33 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 80017fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_ADC_MspInit+0x14c>)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b019      	add	sp, #100	@ 0x64
 800180c:	bd90      	pop	{r4, r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	40012400 	.word	0x40012400
 8001814:	40021000 	.word	0x40021000
 8001818:	50000400 	.word	0x50000400
 800181c:	2000015c 	.word	0x2000015c
 8001820:	40020008 	.word	0x40020008

08001824 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	240c      	movs	r4, #12
 800182e:	193b      	adds	r3, r7, r4
 8001830:	0018      	movs	r0, r3
 8001832:	2314      	movs	r3, #20
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f007 fccc 	bl	80091d4 <memset>
  if(hcomp->Instance==COMP2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a10      	ldr	r2, [pc, #64]	@ (8001884 <HAL_COMP_MspInit+0x60>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11a      	bne.n	800187c <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_COMP_MspInit+0x64>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_COMP_MspInit+0x64>)
 800184c:	2102      	movs	r1, #2
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <HAL_COMP_MspInit+0x64>)
 8001854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 800185e:	193b      	adds	r3, r7, r4
 8001860:	2210      	movs	r2, #16
 8001862:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	2203      	movs	r2, #3
 8001868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 8001870:	193b      	adds	r3, r7, r4
 8001872:	4a06      	ldr	r2, [pc, #24]	@ (800188c <HAL_COMP_MspInit+0x68>)
 8001874:	0019      	movs	r1, r3
 8001876:	0010      	movs	r0, r2
 8001878:	f002 fcbe 	bl	80041f8 <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b009      	add	sp, #36	@ 0x24
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	40010204 	.word	0x40010204
 8001888:	40021000 	.word	0x40021000
 800188c:	50000400 	.word	0x50000400

08001890 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08b      	sub	sp, #44	@ 0x2c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	2414      	movs	r4, #20
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f007 fc96 	bl	80091d4 <memset>
  if(hdac->Instance==DAC1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <HAL_DAC_MspInit+0x80>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d129      	bne.n	8001906 <HAL_DAC_MspInit+0x76>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <HAL_DAC_MspInit+0x84>)
 80018b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_DAC_MspInit+0x84>)
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	0589      	lsls	r1, r1, #22
 80018bc:	430a      	orrs	r2, r1
 80018be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_DAC_MspInit+0x84>)
 80018c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	059b      	lsls	r3, r3, #22
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_DAC_MspInit+0x84>)
 80018d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <HAL_DAC_MspInit+0x84>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_DAC_MspInit+0x84>)
 80018dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018de:	2201      	movs	r2, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Ilevel_DAC_Pin|DAC2_Pin;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	2230      	movs	r2, #48	@ 0x30
 80018ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2203      	movs	r2, #3
 80018f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	193a      	adds	r2, r7, r4
 80018fa:	23a0      	movs	r3, #160	@ 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f002 fc79 	bl	80041f8 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b00b      	add	sp, #44	@ 0x2c
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40007400 	.word	0x40007400
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b099      	sub	sp, #100	@ 0x64
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	234c      	movs	r3, #76	@ 0x4c
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	0018      	movs	r0, r3
 8001926:	2314      	movs	r3, #20
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f007 fc52 	bl	80091d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001930:	2418      	movs	r4, #24
 8001932:	193b      	adds	r3, r7, r4
 8001934:	0018      	movs	r0, r3
 8001936:	2334      	movs	r3, #52	@ 0x34
 8001938:	001a      	movs	r2, r3
 800193a:	2100      	movs	r1, #0
 800193c:	f007 fc4a 	bl	80091d4 <memset>
  if(htim_pwm->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2c      	ldr	r2, [pc, #176]	@ (80019f8 <HAL_TIM_PWM_MspInit+0xe0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d140      	bne.n	80019cc <HAL_TIM_PWM_MspInit+0xb4>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800194a:	193b      	adds	r3, r7, r4
 800194c:	2280      	movs	r2, #128	@ 0x80
 800194e:	0392      	lsls	r2, r2, #14
 8001950:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001952:	193b      	adds	r3, r7, r4
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	193b      	adds	r3, r7, r4
 800195a:	0018      	movs	r0, r3
 800195c:	f003 fb16 	bl	8004f8c <HAL_RCCEx_PeriphCLKConfig>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 8001964:	f7ff fe7c 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 800196a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800196c:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 800196e:	2180      	movs	r1, #128	@ 0x80
 8001970:	0109      	lsls	r1, r1, #4
 8001972:	430a      	orrs	r2, r1
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 8001978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800197a:	2380      	movs	r3, #128	@ 0x80
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4013      	ands	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 8001986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001988:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 8001992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800199c:	214c      	movs	r1, #76	@ 0x4c
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2240      	movs	r2, #64	@ 0x40
 80019a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2212      	movs	r2, #18
 80019a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2201      	movs	r2, #1
 80019ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2202      	movs	r2, #2
 80019ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	187a      	adds	r2, r7, r1
 80019be:	23a0      	movs	r3, #160	@ 0xa0
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f002 fc17 	bl	80041f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ca:	e011      	b.n	80019f0 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	05db      	lsls	r3, r3, #23
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10b      	bne.n	80019f0 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 80019da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_TIM_PWM_MspInit+0xe4>)
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b019      	add	sp, #100	@ 0x64
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b08b      	sub	sp, #44	@ 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	2414      	movs	r4, #20
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2314      	movs	r3, #20
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f007 fbde 	bl	80091d4 <memset>
  if(htim_ic->Instance==TIM3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a88 <HAL_TIM_IC_MspInit+0x88>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12d      	bne.n	8001a7e <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <HAL_TIM_IC_MspInit+0x8c>)
 8001a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_TIM_IC_MspInit+0x8c>)
 8001a28:	2102      	movs	r1, #2
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a2e:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <HAL_TIM_IC_MspInit+0x8c>)
 8001a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a32:	2202      	movs	r2, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_TIM_IC_MspInit+0x8c>)
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a3e:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <HAL_TIM_IC_MspInit+0x8c>)
 8001a40:	2102      	movs	r1, #2
 8001a42:	430a      	orrs	r2, r1
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_TIM_IC_MspInit+0x8c>)
 8001a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_Mask_Pin;
 8001a52:	0021      	movs	r1, r4
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2220      	movs	r2, #32
 8001a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2201      	movs	r2, #1
 8001a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_Mask_GPIO_Port, &GPIO_InitStruct);
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <HAL_TIM_IC_MspInit+0x90>)
 8001a76:	0019      	movs	r1, r3
 8001a78:	0010      	movs	r0, r2
 8001a7a:	f002 fbbd 	bl	80041f8 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b00b      	add	sp, #44	@ 0x2c
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	50000400 	.word	0x50000400

08001a94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	2314      	movs	r3, #20
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	2314      	movs	r3, #20
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	f007 fb94 	bl	80091d4 <memset>
  if(htim_base->Instance==TIM6)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a28      	ldr	r2, [pc, #160]	@ (8001b54 <HAL_TIM_Base_MspInit+0xc0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ab6:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aba:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001abc:	2110      	movs	r1, #16
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ace:	e03d      	b.n	8001b4c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM16)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a21      	ldr	r2, [pc, #132]	@ (8001b5c <HAL_TIM_Base_MspInit+0xc8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d138      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	0289      	lsls	r1, r1, #10
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001afc:	2102      	movs	r1, #2
 8001afe:	430a      	orrs	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_TIM_Base_MspInit+0xc4>)
 8001b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b0e:	2114      	movs	r1, #20
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	0052      	lsls	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_TIM_Base_MspInit+0xcc>)
 8001b34:	0019      	movs	r1, r3
 8001b36:	0010      	movs	r0, r2
 8001b38:	f002 fb5e 	bl	80041f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2015      	movs	r0, #21
 8001b42:	f001 fdcb 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b46:	2015      	movs	r0, #21
 8001b48:	f001 fddd 	bl	8003706 <HAL_NVIC_EnableIRQ>
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b00a      	add	sp, #40	@ 0x28
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40001000 	.word	0x40001000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40014400 	.word	0x40014400
 8001b60:	50000400 	.word	0x50000400

08001b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b08b      	sub	sp, #44	@ 0x2c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	2414      	movs	r4, #20
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	0018      	movs	r0, r3
 8001b72:	2314      	movs	r3, #20
 8001b74:	001a      	movs	r2, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	f007 fb2c 	bl	80091d4 <memset>
  if(htim->Instance==TIM1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a29      	ldr	r2, [pc, #164]	@ (8001c28 <HAL_TIM_MspPostInit+0xc4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d124      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_TIM_MspPostInit+0xc8>)
 8001b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_TIM_MspPostInit+0xc8>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_TIM_MspPostInit+0xc8>)
 8001b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	0052      	lsls	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	0021      	movs	r1, r4
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2202      	movs	r2, #2
 8001bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	187a      	adds	r2, r7, r1
 8001bc2:	23a0      	movs	r3, #160	@ 0xa0
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f002 fb15 	bl	80041f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bce:	e027      	b.n	8001c20 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	05db      	lsls	r3, r3, #23
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d121      	bne.n	8001c20 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_TIM_MspPostInit+0xc8>)
 8001bde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_TIM_MspPostInit+0xc8>)
 8001be2:	2104      	movs	r1, #4
 8001be4:	430a      	orrs	r2, r1
 8001be6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_TIM_MspPostInit+0xc8>)
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	2204      	movs	r2, #4
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001bf4:	2114      	movs	r1, #20
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2240      	movs	r2, #64	@ 0x40
 8001bfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2202      	movs	r2, #2
 8001c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2202      	movs	r2, #2
 8001c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_TIM_MspPostInit+0xcc>)
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	f002 faec 	bl	80041f8 <HAL_GPIO_Init>
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b00b      	add	sp, #44	@ 0x2c
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	40012c00 	.word	0x40012c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	50000800 	.word	0x50000800

08001c34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b097      	sub	sp, #92	@ 0x5c
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	2344      	movs	r3, #68	@ 0x44
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	0018      	movs	r0, r3
 8001c42:	2314      	movs	r3, #20
 8001c44:	001a      	movs	r2, r3
 8001c46:	2100      	movs	r1, #0
 8001c48:	f007 fac4 	bl	80091d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4c:	2410      	movs	r4, #16
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	0018      	movs	r0, r3
 8001c52:	2334      	movs	r3, #52	@ 0x34
 8001c54:	001a      	movs	r2, r3
 8001c56:	2100      	movs	r1, #0
 8001c58:	f007 fabc 	bl	80091d4 <memset>
  if(huart->Instance==USART2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <HAL_UART_MspInit+0xb8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d13e      	bne.n	8001ce4 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	2202      	movs	r2, #2
 8001c6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	0018      	movs	r0, r3
 8001c76:	f003 f989 	bl	8004f8c <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c7e:	f7ff fcef 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_UART_MspInit+0xbc>)
 8001c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_UART_MspInit+0xbc>)
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0289      	lsls	r1, r1, #10
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_UART_MspInit+0xbc>)
 8001c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	029b      	lsls	r3, r3, #10
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_UART_MspInit+0xbc>)
 8001ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_UART_MspInit+0xbc>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_UART_MspInit+0xbc>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001cb6:	2144      	movs	r1, #68	@ 0x44
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf4 <HAL_UART_MspInit+0xc0>)
 8001cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	187a      	adds	r2, r7, r1
 8001cd8:	23a0      	movs	r3, #160	@ 0xa0
 8001cda:	05db      	lsls	r3, r3, #23
 8001cdc:	0011      	movs	r1, r2
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f002 fa8a 	bl	80041f8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b017      	add	sp, #92	@ 0x5c
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	00008004 	.word	0x00008004

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cfc:	46c0      	nop			@ (mov r8, r8)
 8001cfe:	e7fd      	b.n	8001cfc <NMI_Handler+0x4>

08001d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	e7fd      	b.n	8001d04 <HardFault_Handler+0x4>

08001d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 f9c2 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <DMA1_Channel1_IRQHandler+0xe0>)
 8001d32:	0018      	movs	r0, r3
 8001d34:	f002 f91e 	bl	8003f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
  for (iADCchannels = 0; iADCchannels < numberADCchannels; iADCchannels++) {
 8001d38:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e03d      	b.n	8001dbc <DMA1_Channel1_IRQHandler+0x90>
	  currentMeasurement = adc_DMA[iADCchannels]>>2; // divide current measurement value by 4
 8001d40:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	001a      	movs	r2, r3
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <DMA1_Channel1_IRQHandler+0xe8>)
 8001d48:	0052      	lsls	r2, r2, #1
 8001d4a:	5ad3      	ldrh	r3, [r2, r3]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <DMA1_Channel1_IRQHandler+0xec>)
 8001d54:	801a      	strh	r2, [r3, #0]
	  weightedOldValue = (adc_buffer[iADCchannels][0]*3)>>2; // multiply with 3/4
 8001d56:	4b2e      	ldr	r3, [pc, #184]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	5ad3      	ldrh	r3, [r2, r3]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	001a      	movs	r2, r3
 8001d66:	0013      	movs	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	109b      	asrs	r3, r3, #2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <DMA1_Channel1_IRQHandler+0xf4>)
 8001d72:	801a      	strh	r2, [r3, #0]
	  adc_buffer[iADCchannels][1] = currentMeasurement + weightedOldValue; // new averaged value
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <DMA1_Channel1_IRQHandler+0xec>)
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <DMA1_Channel1_IRQHandler+0xf4>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	4924      	ldr	r1, [pc, #144]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001d7e:	7809      	ldrb	r1, [r1, #0]
 8001d80:	0008      	movs	r0, r1
 8001d82:	18d3      	adds	r3, r2, r3
 8001d84:	b299      	uxth	r1, r3
 8001d86:	4a25      	ldr	r2, [pc, #148]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001d88:	0083      	lsls	r3, r0, #2
 8001d8a:	18d3      	adds	r3, r2, r3
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	1c0a      	adds	r2, r1, #0
 8001d90:	801a      	strh	r2, [r3, #0]
	  adc_buffer[iADCchannels][0] = adc_buffer[iADCchannels][1]; // transfer value from current to old
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	0019      	movs	r1, r3
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001da0:	008b      	lsls	r3, r1, #2
 8001da2:	18d3      	adds	r3, r2, r3
 8001da4:	3302      	adds	r3, #2
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001dac:	0082      	lsls	r2, r0, #2
 8001dae:	52d1      	strh	r1, [r2, r3]
  for (iADCchannels = 0; iADCchannels < numberADCchannels; iADCchannels++) {
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <DMA1_Channel1_IRQHandler+0xe4>)
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <DMA1_Channel1_IRQHandler+0xf8>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3ba      	bcc.n	8001d40 <DMA1_Channel1_IRQHandler+0x14>
  }

	adc_24V = adc_buffer[0][1]; // 4095 = 36.3 V
 8001dca:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001dcc:	885b      	ldrh	r3, [r3, #2]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <DMA1_Channel1_IRQHandler+0xfc>)
 8001dd2:	801a      	strh	r2, [r3, #0]
	adc_tempMOSFET = adc_buffer[1][1]; // 2482 = 2V = 90°C
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001dd6:	88db      	ldrh	r3, [r3, #6]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <DMA1_Channel1_IRQHandler+0x100>)
 8001ddc:	801a      	strh	r2, [r3, #0]
	adc_uSenseLamp = adc_buffer[2][1];
 8001dde:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001de0:	895b      	ldrh	r3, [r3, #10]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <DMA1_Channel1_IRQHandler+0x104>)
 8001de6:	801a      	strh	r2, [r3, #0]
	adc_iSenseLamp = adc_buffer[3][1];
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001dea:	89db      	ldrh	r3, [r3, #14]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <DMA1_Channel1_IRQHandler+0x108>)
 8001df0:	801a      	strh	r2, [r3, #0]
	adc_lampIntensity = adc_buffer[4][1];
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001df4:	8a5b      	ldrh	r3, [r3, #18]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <DMA1_Channel1_IRQHandler+0x10c>)
 8001dfa:	801a      	strh	r2, [r3, #0]
	adc_iSenseIn = adc_buffer[5][1]; // 2707 = 24V,  4095 = 0.825 A
 8001dfc:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <DMA1_Channel1_IRQHandler+0xf0>)
 8001dfe:	8adb      	ldrh	r3, [r3, #22]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <DMA1_Channel1_IRQHandler+0x110>)
 8001e04:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000015c 	.word	0x2000015c
 8001e10:	20000442 	.word	0x20000442
 8001e14:	200000c8 	.word	0x200000c8
 8001e18:	20000444 	.word	0x20000444
 8001e1c:	200000d4 	.word	0x200000d4
 8001e20:	20000446 	.word	0x20000446
 8001e24:	20000000 	.word	0x20000000
 8001e28:	200000ec 	.word	0x200000ec
 8001e2c:	200000ee 	.word	0x200000ee
 8001e30:	200000f0 	.word	0x200000f0
 8001e34:	200000f2 	.word	0x200000f2
 8001e38:	200000f4 	.word	0x200000f4
 8001e3c:	200000f6 	.word	0x200000f6

08001e40 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <ADC1_COMP_IRQHandler+0x14>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 fcf8 	bl	800283c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001e4c:	46c0      	nop			@ (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	200000f8 	.word	0x200000f8

08001e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <TIM3_IRQHandler+0x14>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f003 fc9a 	bl	8005798 <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 8001e64:	46c0      	nop			@ (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	20000294 	.word	0x20000294

08001e70 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f003 fc8e 	bl	8005798 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f001 fcd8 	bl	8003834 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	23fa      	movs	r3, #250	@ 0xfa
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d206      	bcs.n	8001ea4 <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001ea0:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001ea2:	e00b      	b.n	8001ebc <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	23fa      	movs	r3, #250	@ 0xfa
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d305      	bcc.n	8001ebc <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	200002e0 	.word	0x200002e0
 8001ec8:	200001e8 	.word	0x200001e8
 8001ecc:	200000c5 	.word	0x200000c5
 8001ed0:	20000440 	.word	0x20000440
 8001ed4:	200000c6 	.word	0x200000c6

08001ed8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <TIM16_IRQHandler+0x14>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f003 fc5a 	bl	8005798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	2000032c 	.word	0x2000032c

08001ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <USART2_IRQHandler+0x14>)
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f005 f8bc 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 8001efc:	46c0      	nop			@ (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	20000378 	.word	0x20000378

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	18d3      	adds	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f007 f954 	bl	80091e4 <__errno>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	425b      	negs	r3, r3
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	18d2      	adds	r2, r2, r3
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <_sbrk+0x64>)
 8001f58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b006      	add	sp, #24
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20009000 	.word	0x20009000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000448 	.word	0x20000448
 8001f70:	20000598 	.word	0x20000598

08001f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	46c0      	nop			@ (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f80:	480d      	ldr	r0, [pc, #52]	@ (8001fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f84:	f7ff fff6 	bl	8001f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopForever+0xe>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopForever+0x16>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fae:	f007 f91f 	bl	80091f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fb2:	f7fe fbbf 	bl	8000734 <main>

08001fb6 <LoopForever>:

LoopForever:
  b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   r0, =_estack
 8001fb8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001fc4:	08009d74 	.word	0x08009d74
  ldr r2, =_sbss
 8001fc8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001fcc:	20000598 	.word	0x20000598

08001fd0 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <CEC_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_Init+0x3c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Init+0x3c>)
 8001fe6:	2180      	movs	r1, #128	@ 0x80
 8001fe8:	0049      	lsls	r1, r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fee:	2003      	movs	r0, #3
 8001ff0:	f000 f810 	bl	8002014 <HAL_InitTick>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e001      	b.n	8002004 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fb42 	bl	8001688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	781b      	ldrb	r3, [r3, #0]
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800201c:	230f      	movs	r3, #15
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002024:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_InitTick+0x88>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d02b      	beq.n	8002084 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800202c:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_InitTick+0x8c>)
 800202e:	681c      	ldr	r4, [r3, #0]
 8002030:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_InitTick+0x88>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	0019      	movs	r1, r3
 8002036:	23fa      	movs	r3, #250	@ 0xfa
 8002038:	0098      	lsls	r0, r3, #2
 800203a:	f7fe f875 	bl	8000128 <__udivsi3>
 800203e:	0003      	movs	r3, r0
 8002040:	0019      	movs	r1, r3
 8002042:	0020      	movs	r0, r4
 8002044:	f7fe f870 	bl	8000128 <__udivsi3>
 8002048:	0003      	movs	r3, r0
 800204a:	0018      	movs	r0, r3
 800204c:	f001 fb6b 	bl	8003726 <HAL_SYSTICK_Config>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d112      	bne.n	800207a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d80a      	bhi.n	8002070 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	2301      	movs	r3, #1
 800205e:	425b      	negs	r3, r3
 8002060:	2200      	movs	r2, #0
 8002062:	0018      	movs	r0, r3
 8002064:	f001 fb3a 	bl	80036dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_InitTick+0x90>)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e00d      	b.n	800208c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002070:	230f      	movs	r3, #15
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e008      	b.n	800208c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207a:	230f      	movs	r3, #15
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e003      	b.n	800208c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800208c:	230f      	movs	r3, #15
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	781b      	ldrb	r3, [r3, #0]
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b005      	add	sp, #20
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	20000050 	.word	0x20000050
 80020a0:	20000048 	.word	0x20000048
 80020a4:	2000004c 	.word	0x2000004c

080020a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_IncTick+0x1c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	001a      	movs	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_IncTick+0x20>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	18d2      	adds	r2, r2, r3
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_IncTick+0x20>)
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	20000050 	.word	0x20000050
 80020c8:	2000044c 	.word	0x2000044c

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b02      	ldr	r3, [pc, #8]	@ (80020dc <HAL_GetTick+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	2000044c 	.word	0x2000044c

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fff0 	bl	80020cc <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	001a      	movs	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	189b      	adds	r3, r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	f7ff ffe0 	bl	80020cc <HAL_GetTick>
 800210c:	0002      	movs	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	46c0      	nop			@ (mov r8, r8)
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b004      	add	sp, #16
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	20000050 	.word	0x20000050

08002128 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002138:	401a      	ands	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b002      	add	sp, #8
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	fe3fffff 	.word	0xfe3fffff

08002150 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	23e0      	movs	r3, #224	@ 0xe0
 800215e:	045b      	lsls	r3, r3, #17
 8002160:	4013      	ands	r3, r2
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}

0800216a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	2104      	movs	r1, #4
 800217e:	400a      	ands	r2, r1
 8002180:	2107      	movs	r1, #7
 8002182:	4091      	lsls	r1, r2
 8002184:	000a      	movs	r2, r1
 8002186:	43d2      	mvns	r2, r2
 8002188:	401a      	ands	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2104      	movs	r1, #4
 800218e:	400b      	ands	r3, r1
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4099      	lsls	r1, r3
 8002194:	000b      	movs	r3, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b004      	add	sp, #16
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	2104      	movs	r1, #4
 80021b6:	400a      	ands	r2, r1
 80021b8:	2107      	movs	r1, #7
 80021ba:	4091      	lsls	r1, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2104      	movs	r1, #4
 80021c4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021c6:	40da      	lsrs	r2, r3
 80021c8:	0013      	movs	r3, r2
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	23c0      	movs	r3, #192	@ 0xc0
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d101      	bne.n	80021ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	211f      	movs	r1, #31
 8002208:	400a      	ands	r2, r1
 800220a:	210f      	movs	r1, #15
 800220c:	4091      	lsls	r1, r2
 800220e:	000a      	movs	r2, r1
 8002210:	43d2      	mvns	r2, r2
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0e9b      	lsrs	r3, r3, #26
 8002218:	210f      	movs	r1, #15
 800221a:	4019      	ands	r1, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	201f      	movs	r0, #31
 8002220:	4003      	ands	r3, r0
 8002222:	4099      	lsls	r1, r3
 8002224:	000b      	movs	r3, r1
 8002226:	431a      	orrs	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800222c:	46c0      	nop			@ (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}

08002234 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	035b      	lsls	r3, r3, #13
 8002246:	0b5b      	lsrs	r3, r3, #13
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}

08002256 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	0352      	lsls	r2, r2, #13
 8002268:	0b52      	lsrs	r2, r2, #13
 800226a:	43d2      	mvns	r2, r2
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}

0800227a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2203      	movs	r2, #3
 8002288:	4013      	ands	r3, r2
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	0212      	lsls	r2, r2, #8
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	401a      	ands	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	400b      	ands	r3, r1
 80022b4:	4904      	ldr	r1, [pc, #16]	@ (80022c8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80022b6:	400b      	ands	r3, r1
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	07ffff00 	.word	0x07ffff00

080022cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80022da:	4013      	ands	r3, r2
 80022dc:	2280      	movs	r2, #128	@ 0x80
 80022de:	0552      	lsls	r2, r2, #21
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	6fffffe8 	.word	0x6fffffe8

080022f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	055b      	lsls	r3, r3, #21
 8002304:	401a      	ands	r2, r3
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	055b      	lsls	r3, r3, #21
 800230a:	429a      	cmp	r2, r3
 800230c:	d101      	bne.n	8002312 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a04      	ldr	r2, [pc, #16]	@ (800233c <LL_ADC_Enable+0x20>)
 800232a:	4013      	ands	r3, r2
 800232c:	2201      	movs	r2, #1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002334:	46c0      	nop			@ (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}
 800233c:	7fffffe8 	.word	0x7fffffe8

08002340 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <LL_ADC_Disable+0x20>)
 800234e:	4013      	ands	r3, r2
 8002350:	2202      	movs	r2, #2
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	7fffffe8 	.word	0x7fffffe8

08002364 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <LL_ADC_IsEnabled+0x18>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <LL_ADC_IsEnabled+0x1a>
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <LL_ADC_REG_StartConversion+0x20>)
 8002396:	4013      	ands	r3, r2
 8002398:	2204      	movs	r2, #4
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	7fffffe8 	.word	0x7fffffe8

080023ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d101      	bne.n	80023c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b002      	add	sp, #8
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	231f      	movs	r3, #31
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e17f      	b.n	80026f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff f965 	bl	80016d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2254      	movs	r2, #84	@ 0x54
 8002410:	2100      	movs	r1, #0
 8002412:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff ff6b 	bl	80022f4 <LL_ADC_IsInternalRegulatorEnabled>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d115      	bne.n	800244e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0018      	movs	r0, r3
 8002428:	f7ff ff50 	bl	80022cc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800242c:	4bb4      	ldr	r3, [pc, #720]	@ (8002700 <HAL_ADC_Init+0x330>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	49b4      	ldr	r1, [pc, #720]	@ (8002704 <HAL_ADC_Init+0x334>)
 8002432:	0018      	movs	r0, r3
 8002434:	f7fd fe78 	bl	8000128 <__udivsi3>
 8002438:	0003      	movs	r3, r0
 800243a:	3301      	adds	r3, #1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002440:	e002      	b.n	8002448 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3b01      	subs	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f9      	bne.n	8002442 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff ff4e 	bl	80022f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d10f      	bne.n	800247c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	2210      	movs	r2, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	2201      	movs	r2, #1
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ff93 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 8002486:	0003      	movs	r3, r0
 8002488:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	2210      	movs	r2, #16
 8002490:	4013      	ands	r3, r2
 8002492:	d000      	beq.n	8002496 <HAL_ADC_Init+0xc6>
 8002494:	e122      	b.n	80026dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d000      	beq.n	800249e <HAL_ADC_Init+0xce>
 800249c:	e11e      	b.n	80026dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	4a99      	ldr	r2, [pc, #612]	@ (8002708 <HAL_ADC_Init+0x338>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	2202      	movs	r2, #2
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff ff56 	bl	8002364 <LL_ADC_IsEnabled>
 80024b8:	1e03      	subs	r3, r0, #0
 80024ba:	d000      	beq.n	80024be <HAL_ADC_Init+0xee>
 80024bc:	e0ad      	b.n	800261a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e1b      	ldrb	r3, [r3, #24]
 80024c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80024c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7e5b      	ldrb	r3, [r3, #25]
 80024ce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7e9b      	ldrb	r3, [r3, #26]
 80024d6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_ADC_Init+0x118>
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	015b      	lsls	r3, r3, #5
 80024e6:	e000      	b.n	80024ea <HAL_ADC_Init+0x11a>
 80024e8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024ea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024f0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da04      	bge.n	8002504 <HAL_ADC_Init+0x134>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	e001      	b.n	8002508 <HAL_ADC_Init+0x138>
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002508:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	212c      	movs	r1, #44	@ 0x2c
 800250e:	5c5b      	ldrb	r3, [r3, r1]
 8002510:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002512:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d115      	bne.n	8002550 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e9b      	ldrb	r3, [r3, #26]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2280      	movs	r2, #128	@ 0x80
 8002530:	0252      	lsls	r2, r2, #9
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e00b      	b.n	8002550 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	2220      	movs	r2, #32
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	2201      	movs	r2, #1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800255c:	23e0      	movs	r3, #224	@ 0xe0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002566:	4313      	orrs	r3, r2
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a65      	ldr	r2, [pc, #404]	@ (800270c <HAL_ADC_Init+0x33c>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0f9b      	lsrs	r3, r3, #30
 800258a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002590:	4313      	orrs	r3, r2
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	223c      	movs	r2, #60	@ 0x3c
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d111      	bne.n	80025c6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0f9b      	lsrs	r3, r3, #30
 80025a8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025ae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80025b4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80025ba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	2201      	movs	r2, #1
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a50      	ldr	r2, [pc, #320]	@ (8002710 <HAL_ADC_Init+0x340>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	430a      	orrs	r2, r1
 80025da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	23c0      	movs	r3, #192	@ 0xc0
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d018      	beq.n	800261a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	05db      	lsls	r3, r3, #23
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d012      	beq.n	800261a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d00c      	beq.n	800261a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002600:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_ADC_Init+0x344>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a44      	ldr	r2, [pc, #272]	@ (8002718 <HAL_ADC_Init+0x348>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	23f0      	movs	r3, #240	@ 0xf0
 8002610:	039b      	lsls	r3, r3, #14
 8002612:	401a      	ands	r2, r3
 8002614:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <HAL_ADC_Init+0x344>)
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002622:	001a      	movs	r2, r3
 8002624:	2100      	movs	r1, #0
 8002626:	f7ff fda0 	bl	800216a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002632:	493a      	ldr	r1, [pc, #232]	@ (800271c <HAL_ADC_Init+0x34c>)
 8002634:	001a      	movs	r2, r3
 8002636:	f7ff fd98 	bl	800216a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2110      	movs	r1, #16
 800264e:	4249      	negs	r1, r1
 8002650:	430a      	orrs	r2, r1
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
 8002654:	e018      	b.n	8002688 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	039b      	lsls	r3, r3, #14
 800265e:	429a      	cmp	r2, r3
 8002660:	d112      	bne.n	8002688 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	3b01      	subs	r3, #1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	221c      	movs	r2, #28
 8002672:	4013      	ands	r3, r2
 8002674:	2210      	movs	r2, #16
 8002676:	4252      	negs	r2, r2
 8002678:	409a      	lsls	r2, r3
 800267a:	0011      	movs	r1, r2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2100      	movs	r1, #0
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fd88 	bl	80021a4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002694:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800269a:	429a      	cmp	r2, r3
 800269c:	d10b      	bne.n	80026b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	2203      	movs	r2, #3
 80026aa:	4393      	bics	r3, r2
 80026ac:	2201      	movs	r2, #1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026b4:	e01c      	b.n	80026f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	2212      	movs	r2, #18
 80026bc:	4393      	bics	r3, r2
 80026be:	2210      	movs	r2, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2201      	movs	r2, #1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80026d2:	231f      	movs	r3, #31
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026da:	e009      	b.n	80026f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	2210      	movs	r2, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026e8:	231f      	movs	r3, #31
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80026f0:	231f      	movs	r3, #31
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	781b      	ldrb	r3, [r3, #0]
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b008      	add	sp, #32
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000048 	.word	0x20000048
 8002704:	00030d40 	.word	0x00030d40
 8002708:	fffffefd 	.word	0xfffffefd
 800270c:	ffde0201 	.word	0xffde0201
 8002710:	1ffffc02 	.word	0x1ffffc02
 8002714:	40012708 	.word	0x40012708
 8002718:	ffc3ffff 	.word	0xffc3ffff
 800271c:	07ffff04 	.word	0x07ffff04

08002720 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff fe3b 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d16c      	bne.n	8002814 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2254      	movs	r2, #84	@ 0x54
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ADC_Start_DMA+0x28>
 8002744:	2302      	movs	r3, #2
 8002746:	e06c      	b.n	8002822 <HAL_ADC_Start_DMA+0x102>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2254      	movs	r2, #84	@ 0x54
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d113      	bne.n	8002784 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff fdff 	bl	8002364 <LL_ADC_IsEnabled>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d004      	beq.n	8002774 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0018      	movs	r0, r3
 8002770:	f7ff fde6 	bl	8002340 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002784:	2517      	movs	r5, #23
 8002786:	197c      	adds	r4, r7, r5
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fb66 	bl	8002e5c <ADC_Enable>
 8002790:	0003      	movs	r3, r0
 8002792:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002794:	002c      	movs	r4, r5
 8002796:	193b      	adds	r3, r7, r4
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d13e      	bne.n	800281c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a2:	4a22      	ldr	r2, [pc, #136]	@ (800282c <HAL_ADC_Start_DMA+0x10c>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	2280      	movs	r2, #128	@ 0x80
 80027a8:	0052      	lsls	r2, r2, #1
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <HAL_ADC_Start_DMA+0x110>)
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002834 <HAL_ADC_Start_DMA+0x114>)
 80027c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002838 <HAL_ADC_Start_DMA+0x118>)
 80027cc:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	221c      	movs	r2, #28
 80027d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2254      	movs	r2, #84	@ 0x54
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2110      	movs	r1, #16
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3340      	adds	r3, #64	@ 0x40
 80027f8:	0019      	movs	r1, r3
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	193c      	adds	r4, r7, r4
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f001 fa66 	bl	8003cd0 <HAL_DMA_Start_IT>
 8002804:	0003      	movs	r3, r0
 8002806:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff fdbb 	bl	8002388 <LL_ADC_REG_StartConversion>
 8002812:	e003      	b.n	800281c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002814:	2317      	movs	r3, #23
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800281c:	2317      	movs	r3, #23
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bdb0      	pop	{r4, r5, r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	fffff0fe 	.word	0xfffff0fe
 8002830:	08002f69 	.word	0x08002f69
 8002834:	08003031 	.word	0x08003031
 8002838:	0800304f 	.word	0x0800304f

0800283c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d017      	beq.n	8002890 <HAL_ADC_IRQHandler+0x54>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	2210      	movs	r2, #16
 800286e:	4013      	ands	r3, r2
 8002870:	d106      	bne.n	8002880 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fc0e 	bl	80030a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2202      	movs	r2, #2
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2204      	movs	r2, #4
 8002894:	4013      	ands	r3, r2
 8002896:	d003      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x64>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2204      	movs	r2, #4
 800289c:	4013      	ands	r3, r2
 800289e:	d107      	bne.n	80028b0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2208      	movs	r2, #8
 80028a4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028a6:	d04d      	beq.n	8002944 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2208      	movs	r2, #8
 80028ac:	4013      	ands	r3, r2
 80028ae:	d049      	beq.n	8002944 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	d106      	bne.n	80028c8 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	2280      	movs	r2, #128	@ 0x80
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff fc80 	bl	80021d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d02e      	beq.n	8002934 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e9b      	ldrb	r3, [r3, #26]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d12a      	bne.n	8002934 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2208      	movs	r2, #8
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d123      	bne.n	8002934 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff fd5b 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d110      	bne.n	800291c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	210c      	movs	r1, #12
 8002906:	438a      	bics	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	4a56      	ldr	r2, [pc, #344]	@ (8002a68 <HAL_ADC_IRQHandler+0x22c>)
 8002910:	4013      	ands	r3, r2
 8002912:	2201      	movs	r2, #1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	659a      	str	r2, [r3, #88]	@ 0x58
 800291a:	e00b      	b.n	8002934 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	2220      	movs	r2, #32
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	2201      	movs	r2, #1
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 f898 	bl	8002a6c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	220c      	movs	r2, #12
 8002942:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2280      	movs	r2, #128	@ 0x80
 8002948:	4013      	ands	r3, r2
 800294a:	d012      	beq.n	8002972 <HAL_ADC_IRQHandler+0x136>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	4013      	ands	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	0252      	lsls	r2, r2, #9
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f891 	bl	8002a8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d014      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x16a>
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4013      	ands	r3, r2
 8002984:	d00f      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	2280      	movs	r2, #128	@ 0x80
 800298c:	0292      	lsls	r2, r2, #10
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fb74 	bl	8003084 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2280      	movs	r2, #128	@ 0x80
 80029a2:	0052      	lsls	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d014      	beq.n	80029da <HAL_ADC_IRQHandler+0x19e>
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d00f      	beq.n	80029da <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	02d2      	lsls	r2, r2, #11
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fb62 	bl	8003094 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2280      	movs	r2, #128	@ 0x80
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2210      	movs	r2, #16
 80029de:	4013      	ands	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x1fe>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2210      	movs	r2, #16
 80029e6:	4013      	ands	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	e008      	b.n	8002a0a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff fc3c 	bl	800227a <LL_ADC_REG_GetDMATransfer>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002a06:	2301      	movs	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d110      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	2280      	movs	r2, #128	@ 0x80
 8002a16:	00d2      	lsls	r2, r2, #3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	2202      	movs	r2, #2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f835 	bl	8002a9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2210      	movs	r2, #16
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	019b      	lsls	r3, r3, #6
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00d      	beq.n	8002a60 <HAL_ADC_IRQHandler+0x224>
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d008      	beq.n	8002a60 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 fb2f 	bl	80030b4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2280      	movs	r2, #128	@ 0x80
 8002a5c:	0192      	lsls	r2, r2, #6
 8002a5e:	601a      	str	r2, [r3, #0]
  }
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	fffffefe 	.word	0xfffffefe

08002a6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab6:	2317      	movs	r3, #23
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2254      	movs	r2, #84	@ 0x54
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x24>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e1c0      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x3a6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2254      	movs	r2, #84	@ 0x54
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff fc65 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d000      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x3c>
 8002ae6:	e1a3      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d100      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x46>
 8002af0:	e143      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b02:	4ac1      	ldr	r2, [pc, #772]	@ (8002e08 <HAL_ADC_ConfigChannel+0x35c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d108      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0019      	movs	r1, r3
 8002b12:	0010      	movs	r0, r2
 8002b14:	f7ff fb8e 	bl	8002234 <LL_ADC_REG_SetSequencerChAdd>
 8002b18:	e0c9      	b.n	8002cae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	211f      	movs	r1, #31
 8002b24:	400b      	ands	r3, r1
 8002b26:	210f      	movs	r1, #15
 8002b28:	4099      	lsls	r1, r3
 8002b2a:	000b      	movs	r3, r1
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	035b      	lsls	r3, r3, #13
 8002b38:	0b5b      	lsrs	r3, r3, #13
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x9c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	221f      	movs	r2, #31
 8002b44:	4013      	ands	r3, r2
 8002b46:	e098      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d000      	beq.n	8002b54 <HAL_ADC_ConfigChannel+0xa8>
 8002b52:	e091      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x1cc>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d000      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0xb4>
 8002b5e:	e089      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x1c8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2204      	movs	r2, #4
 8002b66:	4013      	ands	r3, r2
 8002b68:	d000      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0xc0>
 8002b6a:	e081      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x1c4>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4013      	ands	r3, r2
 8002b74:	d000      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0xcc>
 8002b76:	e079      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x1c0>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0xd8>
 8002b82:	e071      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1bc>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d000      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0xe4>
 8002b8e:	e069      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x1b8>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	d000      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0xf0>
 8002b9a:	e061      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x1b4>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2280      	movs	r2, #128	@ 0x80
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d000      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0xfc>
 8002ba6:	e059      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x1b0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d151      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1ac>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d149      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1a8>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d141      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1a4>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d139      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1a0>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	015b      	lsls	r3, r3, #5
 8002be0:	4013      	ands	r3, r2
 8002be2:	d131      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x19c>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	019b      	lsls	r3, r3, #6
 8002bec:	4013      	ands	r3, r2
 8002bee:	d129      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x198>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d121      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x194>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4013      	ands	r3, r2
 8002c06:	d119      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x190>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	4013      	ands	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x18c>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	029b      	lsls	r3, r3, #10
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x188>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	02db      	lsls	r3, r3, #11
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d001      	beq.n	8002c30 <HAL_ADC_ConfigChannel+0x184>
 8002c2c:	2312      	movs	r3, #18
 8002c2e:	e024      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c30:	2300      	movs	r3, #0
 8002c32:	e022      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c34:	2311      	movs	r3, #17
 8002c36:	e020      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	e01e      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	e01c      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c40:	230e      	movs	r3, #14
 8002c42:	e01a      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c44:	230d      	movs	r3, #13
 8002c46:	e018      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c48:	230c      	movs	r3, #12
 8002c4a:	e016      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c4c:	230b      	movs	r3, #11
 8002c4e:	e014      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c50:	230a      	movs	r3, #10
 8002c52:	e012      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c54:	2309      	movs	r3, #9
 8002c56:	e010      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c58:	2308      	movs	r3, #8
 8002c5a:	e00e      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	e00c      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c60:	2306      	movs	r3, #6
 8002c62:	e00a      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c64:	2305      	movs	r3, #5
 8002c66:	e008      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	e006      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e004      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e002      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	6852      	ldr	r2, [r2, #4]
 8002c7e:	201f      	movs	r0, #31
 8002c80:	4002      	ands	r2, r0
 8002c82:	4093      	lsls	r3, r2
 8002c84:	000a      	movs	r2, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d808      	bhi.n	8002cae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	001a      	movs	r2, r3
 8002caa:	f7ff faa3 	bl	80021f4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	001a      	movs	r2, r3
 8002cbc:	f7ff faea 	bl	8002294 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db00      	blt.n	8002cca <HAL_ADC_ConfigChannel+0x21e>
 8002cc8:	e0bc      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cca:	4b50      	ldr	r3, [pc, #320]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff fa3f 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a4d      	ldr	r2, [pc, #308]	@ (8002e10 <HAL_ADC_ConfigChannel+0x364>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d122      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	2380      	movs	r3, #128	@ 0x80
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ce8:	d11d      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2280      	movs	r2, #128	@ 0x80
 8002cee:	0412      	lsls	r2, r2, #16
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4a46      	ldr	r2, [pc, #280]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	0010      	movs	r0, r2
 8002cf8:	f7ff fa16 	bl	8002128 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cfc:	4b45      	ldr	r3, [pc, #276]	@ (8002e14 <HAL_ADC_ConfigChannel+0x368>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4945      	ldr	r1, [pc, #276]	@ (8002e18 <HAL_ADC_ConfigChannel+0x36c>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7fd fa10 	bl	8000128 <__udivsi3>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	0013      	movs	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	189b      	adds	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d16:	e002      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f9      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d24:	e08e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e1c <HAL_ADC_ConfigChannel+0x370>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10e      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	045b      	lsls	r3, r3, #17
 8002d36:	4013      	ands	r3, r2
 8002d38:	d109      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2280      	movs	r2, #128	@ 0x80
 8002d3e:	0452      	lsls	r2, r2, #17
 8002d40:	4313      	orrs	r3, r2
 8002d42:	4a32      	ldr	r2, [pc, #200]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002d44:	0019      	movs	r1, r3
 8002d46:	0010      	movs	r0, r2
 8002d48:	f7ff f9ee 	bl	8002128 <LL_ADC_SetCommonPathInternalCh>
 8002d4c:	e07a      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a33      	ldr	r2, [pc, #204]	@ (8002e20 <HAL_ADC_ConfigChannel+0x374>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d000      	beq.n	8002d5a <HAL_ADC_ConfigChannel+0x2ae>
 8002d58:	e074      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	03db      	lsls	r3, r3, #15
 8002d60:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d62:	d000      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x2ba>
 8002d64:	e06e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2280      	movs	r2, #128	@ 0x80
 8002d6a:	03d2      	lsls	r2, r2, #15
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	4a27      	ldr	r2, [pc, #156]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002d70:	0019      	movs	r1, r3
 8002d72:	0010      	movs	r0, r2
 8002d74:	f7ff f9d8 	bl	8002128 <LL_ADC_SetCommonPathInternalCh>
 8002d78:	e064      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d004      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e08 <HAL_ADC_ConfigChannel+0x35c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0019      	movs	r1, r3
 8002d9a:	0010      	movs	r0, r2
 8002d9c:	f7ff fa5b 	bl	8002256 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da4d      	bge.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002da8:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7ff f9d0 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8002db0:	0003      	movs	r3, r0
 8002db2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <HAL_ADC_ConfigChannel+0x364>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_ADC_ConfigChannel+0x378>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	4a11      	ldr	r2, [pc, #68]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	0010      	movs	r0, r2
 8002dca:	f7ff f9ad 	bl	8002128 <LL_ADC_SetCommonPathInternalCh>
 8002dce:	e039      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a11      	ldr	r2, [pc, #68]	@ (8002e1c <HAL_ADC_ConfigChannel+0x370>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4a12      	ldr	r2, [pc, #72]	@ (8002e28 <HAL_ADC_ConfigChannel+0x37c>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002de2:	0019      	movs	r1, r3
 8002de4:	0010      	movs	r0, r2
 8002de6:	f7ff f99f 	bl	8002128 <LL_ADC_SetCommonPathInternalCh>
 8002dea:	e02b      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e20 <HAL_ADC_ConfigChannel+0x374>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d126      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4a0c      	ldr	r2, [pc, #48]	@ (8002e2c <HAL_ADC_ConfigChannel+0x380>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	4a03      	ldr	r2, [pc, #12]	@ (8002e0c <HAL_ADC_ConfigChannel+0x360>)
 8002dfe:	0019      	movs	r1, r3
 8002e00:	0010      	movs	r0, r2
 8002e02:	f7ff f991 	bl	8002128 <LL_ADC_SetCommonPathInternalCh>
 8002e06:	e01d      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x398>
 8002e08:	80000004 	.word	0x80000004
 8002e0c:	40012708 	.word	0x40012708
 8002e10:	b0001000 	.word	0xb0001000
 8002e14:	20000048 	.word	0x20000048
 8002e18:	00030d40 	.word	0x00030d40
 8002e1c:	b8004000 	.word	0xb8004000
 8002e20:	b4002000 	.word	0xb4002000
 8002e24:	ff7fffff 	.word	0xff7fffff
 8002e28:	feffffff 	.word	0xfeffffff
 8002e2c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	2220      	movs	r2, #32
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e3c:	2317      	movs	r3, #23
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2254      	movs	r2, #84	@ 0x54
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e4c:	2317      	movs	r3, #23
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	781b      	ldrb	r3, [r3, #0]
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b006      	add	sp, #24
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)

08002e5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff fa79 	bl	8002364 <LL_ADC_IsEnabled>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d000      	beq.n	8002e78 <ADC_Enable+0x1c>
 8002e76:	e069      	b.n	8002f4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4a36      	ldr	r2, [pc, #216]	@ (8002f58 <ADC_Enable+0xfc>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	d00d      	beq.n	8002ea0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e88:	2210      	movs	r2, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	2201      	movs	r2, #1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e056      	b.n	8002f4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff fa39 	bl	800231c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002f5c <ADC_Enable+0x100>)
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7ff f94f 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d00f      	beq.n	8002edc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ebc:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <ADC_Enable+0x104>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4928      	ldr	r1, [pc, #160]	@ (8002f64 <ADC_Enable+0x108>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fd f930 	bl	8000128 <__udivsi3>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002ecc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ece:	e002      	b.n	8002ed6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f9      	bne.n	8002ed0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7e5b      	ldrb	r3, [r3, #25]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d033      	beq.n	8002f4c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f8f2 	bl	80020cc <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eec:	e027      	b.n	8002f3e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff fa36 	bl	8002364 <LL_ADC_IsEnabled>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d104      	bne.n	8002f06 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff fa0b 	bl	800231c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f06:	f7ff f8e1 	bl	80020cc <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d914      	bls.n	8002f3e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d00d      	beq.n	8002f3e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	2210      	movs	r2, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	2201      	movs	r2, #1
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e007      	b.n	8002f4e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d1d0      	bne.n	8002eee <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	80000017 	.word	0x80000017
 8002f5c:	40012708 	.word	0x40012708
 8002f60:	20000048 	.word	0x20000048
 8002f64:	00030d40 	.word	0x00030d40

08002f68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	2250      	movs	r2, #80	@ 0x50
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d141      	bne.n	8003004 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	2280      	movs	r2, #128	@ 0x80
 8002f86:	0092      	lsls	r2, r2, #2
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7ff f91d 	bl	80021d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d02e      	beq.n	8002ffa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	7e9b      	ldrb	r3, [r3, #26]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d12a      	bne.n	8002ffa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2208      	movs	r2, #8
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d123      	bne.n	8002ffa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7ff f9f8 	bl	80023ac <LL_ADC_REG_IsConversionOngoing>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d110      	bne.n	8002fe2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	210c      	movs	r1, #12
 8002fcc:	438a      	bics	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	4a15      	ldr	r2, [pc, #84]	@ (800302c <ADC_DMAConvCplt+0xc4>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2201      	movs	r2, #1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fe0:	e00b      	b.n	8002ffa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7ff fd35 	bl	8002a6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003002:	e00f      	b.n	8003024 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	2210      	movs	r2, #16
 800300a:	4013      	ands	r3, r2
 800300c:	d004      	beq.n	8003018 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fd43 	bl	8002a9c <HAL_ADC_ErrorCallback>
}
 8003016:	e005      	b.n	8003024 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	0010      	movs	r0, r2
 8003022:	4798      	blx	r3
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	fffffefe 	.word	0xfffffefe

08003030 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff fd1b 	bl	8002a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}

0800304e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	2240      	movs	r2, #64	@ 0x40
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2204      	movs	r2, #4
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff fd10 	bl	8002a9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80030cc:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	58d2      	ldr	r2, [r2, r3]
 80030d2:	4904      	ldr	r1, [pc, #16]	@ (80030e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	508b      	str	r3, [r1, r2]
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021800 	.word	0x40021800

080030e8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80030f0:	4a06      	ldr	r2, [pc, #24]	@ (800310c <LL_EXTI_DisableIT_0_31+0x24>)
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	58d3      	ldr	r3, [r2, r3]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	43d2      	mvns	r2, r2
 80030fa:	4904      	ldr	r1, [pc, #16]	@ (800310c <LL_EXTI_DisableIT_0_31+0x24>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	2280      	movs	r2, #128	@ 0x80
 8003100:	508b      	str	r3, [r1, r2]
}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	40021800 	.word	0x40021800

08003110 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003118:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <LL_EXTI_EnableEvent_0_31+0x20>)
 800311a:	2384      	movs	r3, #132	@ 0x84
 800311c:	58d2      	ldr	r2, [r2, r3]
 800311e:	4904      	ldr	r1, [pc, #16]	@ (8003130 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4313      	orrs	r3, r2
 8003124:	2284      	movs	r2, #132	@ 0x84
 8003126:	508b      	str	r3, [r1, r2]

}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021800 	.word	0x40021800

08003134 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800313c:	4a06      	ldr	r2, [pc, #24]	@ (8003158 <LL_EXTI_DisableEvent_0_31+0x24>)
 800313e:	2384      	movs	r3, #132	@ 0x84
 8003140:	58d3      	ldr	r3, [r2, r3]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	43d2      	mvns	r2, r2
 8003146:	4904      	ldr	r1, [pc, #16]	@ (8003158 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003148:	4013      	ands	r3, r2
 800314a:	2284      	movs	r2, #132	@ 0x84
 800314c:	508b      	str	r3, [r1, r2]
}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	40021800 	.word	0x40021800

0800315c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021800 	.word	0x40021800

0800317c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	43d9      	mvns	r1, r3
 800318c:	4b03      	ldr	r3, [pc, #12]	@ (800319c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800318e:	400a      	ands	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b002      	add	sp, #8
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	40021800 	.word	0x40021800

080031a0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031a8:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021800 	.word	0x40021800

080031c0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	4b03      	ldr	r3, [pc, #12]	@ (80031e0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031d2:	400a      	ands	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	40021800 	.word	0x40021800

080031e4 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80031ec:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	40021800 	.word	0x40021800

08003200 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003208:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	40021800 	.word	0x40021800

0800321c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	211f      	movs	r1, #31
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e13d      	b.n	80034ba <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0fdb      	lsrs	r3, r3, #31
 8003246:	07da      	lsls	r2, r3, #31
 8003248:	2380      	movs	r3, #128	@ 0x80
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	429a      	cmp	r2, r3
 800324e:	d104      	bne.n	800325a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003250:	231f      	movs	r3, #31
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e12f      	b.n	80034ba <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2229      	movs	r2, #41	@ 0x29
 800325e:	5c9b      	ldrb	r3, [r3, r2]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2228      	movs	r2, #40	@ 0x28
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f7fe fad4 	bl	8001824 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2230      	movs	r2, #48	@ 0x30
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a85      	ldr	r2, [pc, #532]	@ (80034c8 <HAL_COMP_Init+0x2ac>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10d      	bne.n	80032ea <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80032ce:	4b7f      	ldr	r3, [pc, #508]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b7e      	ldr	r3, [pc, #504]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80032d4:	497e      	ldr	r1, [pc, #504]	@ (80034d0 <HAL_COMP_Init+0x2b4>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80032da:	4b7c      	ldr	r3, [pc, #496]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	4b7b      	ldr	r3, [pc, #492]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	0109      	lsls	r1, r1, #4
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e01f      	b.n	800332a <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	23c0      	movs	r3, #192	@ 0xc0
 80032f0:	015b      	lsls	r3, r3, #5
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10d      	bne.n	8003312 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80032f6:	4b75      	ldr	r3, [pc, #468]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b74      	ldr	r3, [pc, #464]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	0109      	lsls	r1, r1, #4
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003304:	4b71      	ldr	r3, [pc, #452]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4b70      	ldr	r3, [pc, #448]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 800330a:	4971      	ldr	r1, [pc, #452]	@ (80034d0 <HAL_COMP_Init+0x2b4>)
 800330c:	400a      	ands	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	e00b      	b.n	800332a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003312:	4b6e      	ldr	r3, [pc, #440]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b6d      	ldr	r3, [pc, #436]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003318:	496d      	ldr	r1, [pc, #436]	@ (80034d0 <HAL_COMP_Init+0x2b4>)
 800331a:	400a      	ands	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800331e:	4b6b      	ldr	r3, [pc, #428]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4b6a      	ldr	r3, [pc, #424]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003324:	496a      	ldr	r1, [pc, #424]	@ (80034d0 <HAL_COMP_Init+0x2b4>)
 8003326:	400a      	ands	r2, r1
 8003328:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	22a0      	movs	r2, #160	@ 0xa0
 8003330:	01d2      	lsls	r2, r2, #7
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <HAL_COMP_Init+0x14a>
 8003336:	22a0      	movs	r2, #160	@ 0xa0
 8003338:	01d2      	lsls	r2, r2, #7
 800333a:	4293      	cmp	r3, r2
 800333c:	d830      	bhi.n	80033a0 <HAL_COMP_Init+0x184>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d01f      	beq.n	8003382 <HAL_COMP_Init+0x166>
 8003342:	2280      	movs	r2, #128	@ 0x80
 8003344:	01d2      	lsls	r2, r2, #7
 8003346:	4293      	cmp	r3, r2
 8003348:	d12a      	bne.n	80033a0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800334a:	4b60      	ldr	r3, [pc, #384]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b5f      	ldr	r3, [pc, #380]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	01c9      	lsls	r1, r1, #7
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003358:	4b5c      	ldr	r3, [pc, #368]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 800335e:	495d      	ldr	r1, [pc, #372]	@ (80034d4 <HAL_COMP_Init+0x2b8>)
 8003360:	400a      	ands	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
        break;
 8003364:	e029      	b.n	80033ba <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003366:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b58      	ldr	r3, [pc, #352]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 800336c:	4959      	ldr	r1, [pc, #356]	@ (80034d4 <HAL_COMP_Init+0x2b8>)
 800336e:	400a      	ands	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003372:	4b56      	ldr	r3, [pc, #344]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b55      	ldr	r3, [pc, #340]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	01c9      	lsls	r1, r1, #7
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
        break;
 8003380:	e01b      	b.n	80033ba <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003382:	4b52      	ldr	r3, [pc, #328]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003388:	2180      	movs	r1, #128	@ 0x80
 800338a:	01c9      	lsls	r1, r1, #7
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003390:	4b4e      	ldr	r3, [pc, #312]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4b4d      	ldr	r3, [pc, #308]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 8003396:	2180      	movs	r1, #128	@ 0x80
 8003398:	01c9      	lsls	r1, r1, #7
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
        break;
 800339e:	e00c      	b.n	80033ba <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033a0:	4b4a      	ldr	r3, [pc, #296]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b49      	ldr	r3, [pc, #292]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80033a6:	494b      	ldr	r1, [pc, #300]	@ (80034d4 <HAL_COMP_Init+0x2b8>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033ac:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4b46      	ldr	r3, [pc, #280]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80033b2:	4948      	ldr	r1, [pc, #288]	@ (80034d4 <HAL_COMP_Init+0x2b8>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
        break;
 80033b8:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2230      	movs	r2, #48	@ 0x30
 80033c2:	4013      	ands	r3, r2
 80033c4:	d016      	beq.n	80033f4 <HAL_COMP_Init+0x1d8>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d113      	bne.n	80033f4 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033cc:	4b42      	ldr	r3, [pc, #264]	@ (80034d8 <HAL_COMP_Init+0x2bc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4942      	ldr	r1, [pc, #264]	@ (80034dc <HAL_COMP_Init+0x2c0>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fc fea8 	bl	8000128 <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	0013      	movs	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	189b      	adds	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80033e6:	e002      	b.n	80033ee <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f9      	bne.n	80033e8 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a34      	ldr	r2, [pc, #208]	@ (80034cc <HAL_COMP_Init+0x2b0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d102      	bne.n	8003404 <HAL_COMP_Init+0x1e8>
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	e001      	b.n	8003408 <HAL_COMP_Init+0x1ec>
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	02db      	lsls	r3, r3, #11
 8003408:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2203      	movs	r2, #3
 8003410:	4013      	ands	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	2210      	movs	r2, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff fe9b 	bl	800315c <LL_EXTI_EnableRisingTrig_0_31>
 8003426:	e003      	b.n	8003430 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff fea6 	bl	800317c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2220      	movs	r2, #32
 8003436:	4013      	ands	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff feaf 	bl	80031a0 <LL_EXTI_EnableFallingTrig_0_31>
 8003442:	e003      	b.n	800344c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff feba 	bl	80031c0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	0018      	movs	r0, r3
 8003450:	f7ff fed6 	bl	8003200 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fec4 	bl	80031e4 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff fe51 	bl	8003110 <LL_EXTI_EnableEvent_0_31>
 800346e:	e003      	b.n	8003478 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fe5e 	bl	8003134 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	2201      	movs	r2, #1
 800347e:	4013      	ands	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fe1d 	bl	80030c4 <LL_EXTI_EnableIT_0_31>
 800348a:	e00c      	b.n	80034a6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff fe2a 	bl	80030e8 <LL_EXTI_DisableIT_0_31>
 8003494:	e007      	b.n	80034a6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff fe4b 	bl	8003134 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff fe21 	bl	80030e8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2229      	movs	r2, #41	@ 0x29
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2229      	movs	r2, #41	@ 0x29
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80034ba:	231f      	movs	r3, #31
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	781b      	ldrb	r3, [r3, #0]
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b008      	add	sp, #32
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	fe00740f 	.word	0xfe00740f
 80034cc:	40010200 	.word	0x40010200
 80034d0:	fffff7ff 	.word	0xfffff7ff
 80034d4:	ffffbfff 	.word	0xffffbfff
 80034d8:	20000048 	.word	0x20000048
 80034dc:	00030d40 	.word	0x00030d40

080034e0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	210f      	movs	r1, #15
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e035      	b.n	800356e <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0fdb      	lsrs	r3, r3, #31
 800350a:	07da      	lsls	r2, r3, #31
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	061b      	lsls	r3, r3, #24
 8003510:	429a      	cmp	r2, r3
 8003512:	d104      	bne.n	800351e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003514:	230f      	movs	r3, #15
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e027      	b.n	800356e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2229      	movs	r2, #41	@ 0x29
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d11d      	bne.n	8003566 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2229      	movs	r2, #41	@ 0x29
 800353e:	2102      	movs	r1, #2
 8003540:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003542:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <HAL_COMP_Start+0x9c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	490e      	ldr	r1, [pc, #56]	@ (8003580 <HAL_COMP_Start+0xa0>)
 8003548:	0018      	movs	r0, r3
 800354a:	f7fc fded 	bl	8000128 <__udivsi3>
 800354e:	0003      	movs	r3, r0
 8003550:	3301      	adds	r3, #1
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003556:	e002      	b.n	800355e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	3b01      	subs	r3, #1
 800355c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f9      	bne.n	8003558 <HAL_COMP_Start+0x78>
 8003564:	e003      	b.n	800356e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003566:	230f      	movs	r3, #15
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800356e:	230f      	movs	r3, #15
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000048 	.word	0x20000048
 8003580:	00030d40 	.word	0x00030d40

08003584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	0002      	movs	r2, r0
 800358c:	1dfb      	adds	r3, r7, #7
 800358e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003590:	1dfb      	adds	r3, r7, #7
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b7f      	cmp	r3, #127	@ 0x7f
 8003596:	d809      	bhi.n	80035ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	001a      	movs	r2, r3
 800359e:	231f      	movs	r3, #31
 80035a0:	401a      	ands	r2, r3
 80035a2:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <__NVIC_EnableIRQ+0x30>)
 80035a4:	2101      	movs	r1, #1
 80035a6:	4091      	lsls	r1, r2
 80035a8:	000a      	movs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	e000e100 	.word	0xe000e100

080035b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	0002      	movs	r2, r0
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80035cc:	d828      	bhi.n	8003620 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035ce:	4a2f      	ldr	r2, [pc, #188]	@ (800368c <__NVIC_SetPriority+0xd4>)
 80035d0:	1dfb      	adds	r3, r7, #7
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	33c0      	adds	r3, #192	@ 0xc0
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	589b      	ldr	r3, [r3, r2]
 80035de:	1dfa      	adds	r2, r7, #7
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	0011      	movs	r1, r2
 80035e4:	2203      	movs	r2, #3
 80035e6:	400a      	ands	r2, r1
 80035e8:	00d2      	lsls	r2, r2, #3
 80035ea:	21ff      	movs	r1, #255	@ 0xff
 80035ec:	4091      	lsls	r1, r2
 80035ee:	000a      	movs	r2, r1
 80035f0:	43d2      	mvns	r2, r2
 80035f2:	401a      	ands	r2, r3
 80035f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	22ff      	movs	r2, #255	@ 0xff
 80035fc:	401a      	ands	r2, r3
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	0018      	movs	r0, r3
 8003604:	2303      	movs	r3, #3
 8003606:	4003      	ands	r3, r0
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800360c:	481f      	ldr	r0, [pc, #124]	@ (800368c <__NVIC_SetPriority+0xd4>)
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b25b      	sxtb	r3, r3
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	430a      	orrs	r2, r1
 8003618:	33c0      	adds	r3, #192	@ 0xc0
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800361e:	e031      	b.n	8003684 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003620:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <__NVIC_SetPriority+0xd8>)
 8003622:	1dfb      	adds	r3, r7, #7
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	0019      	movs	r1, r3
 8003628:	230f      	movs	r3, #15
 800362a:	400b      	ands	r3, r1
 800362c:	3b08      	subs	r3, #8
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3306      	adds	r3, #6
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	3304      	adds	r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1dfa      	adds	r2, r7, #7
 800363c:	7812      	ldrb	r2, [r2, #0]
 800363e:	0011      	movs	r1, r2
 8003640:	2203      	movs	r2, #3
 8003642:	400a      	ands	r2, r1
 8003644:	00d2      	lsls	r2, r2, #3
 8003646:	21ff      	movs	r1, #255	@ 0xff
 8003648:	4091      	lsls	r1, r2
 800364a:	000a      	movs	r2, r1
 800364c:	43d2      	mvns	r2, r2
 800364e:	401a      	ands	r2, r3
 8003650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	22ff      	movs	r2, #255	@ 0xff
 8003658:	401a      	ands	r2, r3
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	0018      	movs	r0, r3
 8003660:	2303      	movs	r3, #3
 8003662:	4003      	ands	r3, r0
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003668:	4809      	ldr	r0, [pc, #36]	@ (8003690 <__NVIC_SetPriority+0xd8>)
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	001c      	movs	r4, r3
 8003670:	230f      	movs	r3, #15
 8003672:	4023      	ands	r3, r4
 8003674:	3b08      	subs	r3, #8
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	430a      	orrs	r2, r1
 800367a:	3306      	adds	r3, #6
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	18c3      	adds	r3, r0, r3
 8003680:	3304      	adds	r3, #4
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b003      	add	sp, #12
 800368a:	bd90      	pop	{r4, r7, pc}
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	045b      	lsls	r3, r3, #17
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d301      	bcc.n	80036ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a8:	2301      	movs	r3, #1
 80036aa:	e010      	b.n	80036ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ac:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <SysTick_Config+0x44>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	3a01      	subs	r2, #1
 80036b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b4:	2301      	movs	r3, #1
 80036b6:	425b      	negs	r3, r3
 80036b8:	2103      	movs	r1, #3
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7ff ff7c 	bl	80035b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <SysTick_Config+0x44>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c6:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <SysTick_Config+0x44>)
 80036c8:	2207      	movs	r2, #7
 80036ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	e000e010 	.word	0xe000e010

080036dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	210f      	movs	r1, #15
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ff5d 	bl	80035b8 <__NVIC_SetPriority>
}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	0002      	movs	r2, r0
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ff33 	bl	8003584 <__NVIC_EnableIRQ>
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff ffaf 	bl	8003694 <SysTick_Config>
 8003736:	0003      	movs	r3, r0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e015      	b.n	800377e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	791b      	ldrb	r3, [r3, #4]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7fe f893 	bl	8001890 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e047      	b.n	800382a <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	795b      	ldrb	r3, [r3, #5]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_DAC_Start+0x20>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e041      	b.n	800382a <HAL_DAC_Start+0xa4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	4013      	ands	r3, r2
 80037be:	2201      	movs	r2, #1
 80037c0:	409a      	lsls	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10f      	bne.n	80037f0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	223e      	movs	r2, #62	@ 0x3e
 80037d8:	4013      	ands	r3, r2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d11e      	bne.n	800381c <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	e015      	b.n	800381c <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	23f8      	movs	r3, #248	@ 0xf8
 80037f8:	039b      	lsls	r3, r3, #14
 80037fa:	401a      	ands	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2110      	movs	r1, #16
 8003800:	400b      	ands	r3, r1
 8003802:	2102      	movs	r1, #2
 8003804:	4099      	lsls	r1, r3
 8003806:	000b      	movs	r3, r1
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2102      	movs	r1, #2
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	4013      	ands	r3, r2
 8003854:	d01e      	beq.n	8003894 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	019b      	lsls	r3, r3, #6
 800385c:	4013      	ands	r3, r2
 800385e:	d019      	beq.n	8003894 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2201      	movs	r2, #1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2280      	movs	r2, #128	@ 0x80
 8003878:	0192      	lsls	r2, r2, #6
 800387a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4917      	ldr	r1, [pc, #92]	@ (80038e4 <HAL_DAC_IRQHandler+0xb0>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f853 	bl	800393a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	059b      	lsls	r3, r3, #22
 800389a:	4013      	ands	r3, r2
 800389c:	d01e      	beq.n	80038dc <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	059b      	lsls	r3, r3, #22
 80038a4:	4013      	ands	r3, r2
 80038a6:	d019      	beq.n	80038dc <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2202      	movs	r2, #2
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2280      	movs	r2, #128	@ 0x80
 80038c0:	0592      	lsls	r2, r2, #22
 80038c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4906      	ldr	r1, [pc, #24]	@ (80038e8 <HAL_DAC_IRQHandler+0xb4>)
 80038d0:	400a      	ands	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 f968 	bl	8003bac <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b004      	add	sp, #16
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	ffffefff 	.word	0xffffefff
 80038e8:	efffffff 	.word	0xefffffff

080038ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e014      	b.n	8003932 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	3308      	adds	r3, #8
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e004      	b.n	800392a <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	18d3      	adds	r3, r2, r3
 8003926:	3314      	adds	r3, #20
 8003928:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b006      	add	sp, #24
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	231f      	movs	r3, #31
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_DAC_ConfigChannel+0x20>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e115      	b.n	8003b9c <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	795b      	ldrb	r3, [r3, #5]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_DAC_ConfigChannel+0x30>
 8003978:	2302      	movs	r3, #2
 800397a:	e10f      	b.n	8003b9c <HAL_DAC_ConfigChannel+0x250>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d000      	beq.n	8003992 <HAL_DAC_ConfigChannel+0x46>
 8003990:	e07a      	b.n	8003a88 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003992:	f7fe fb9b 	bl	80020cc <HAL_GetTick>
 8003996:	0003      	movs	r3, r0
 8003998:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d13d      	bne.n	8003a1c <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039a0:	e018      	b.n	80039d4 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039a2:	f7fe fb93 	bl	80020cc <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d911      	bls.n	80039d4 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00a      	beq.n	80039d4 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2208      	movs	r2, #8
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2203      	movs	r2, #3
 80039ce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0e3      	b.n	8003b9c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	4013      	ands	r3, r2
 80039e0:	d1df      	bne.n	80039a2 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	6992      	ldr	r2, [r2, #24]
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80039ec:	e020      	b.n	8003a30 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ee:	f7fe fb6d 	bl	80020cc <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d90f      	bls.n	8003a1c <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	da0a      	bge.n	8003a1c <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2203      	movs	r2, #3
 8003a16:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e0bf      	b.n	8003b9c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dbe3      	blt.n	80039ee <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	6992      	ldr	r2, [r2, #24]
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	2110      	movs	r1, #16
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	4959      	ldr	r1, [pc, #356]	@ (8003ba4 <HAL_DAC_ConfigChannel+0x258>)
 8003a3e:	4091      	lsls	r1, r2
 8003a40:	000a      	movs	r2, r1
 8003a42:	43d2      	mvns	r2, r2
 8003a44:	401a      	ands	r2, r3
 8003a46:	0011      	movs	r1, r2
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2010      	movs	r0, #16
 8003a50:	4003      	ands	r3, r0
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	2110      	movs	r1, #16
 8003a66:	400a      	ands	r2, r1
 8003a68:	21ff      	movs	r1, #255	@ 0xff
 8003a6a:	4091      	lsls	r1, r2
 8003a6c:	000a      	movs	r2, r1
 8003a6e:	43d2      	mvns	r2, r2
 8003a70:	401a      	ands	r2, r3
 8003a72:	0011      	movs	r1, r2
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2010      	movs	r0, #16
 8003a7c:	4003      	ands	r3, r0
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d11d      	bne.n	8003acc <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	221f      	movs	r2, #31
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	409a      	lsls	r2, r3
 8003abc:	0013      	movs	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2210      	movs	r2, #16
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2207      	movs	r2, #7
 8003adc:	409a      	lsls	r2, r3
 8003ade:	0013      	movs	r3, r2
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2210      	movs	r2, #16
 8003afe:	4013      	ands	r3, r2
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	400b      	ands	r3, r1
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	01c9      	lsls	r1, r1, #7
 8003b24:	4099      	lsls	r1, r3
 8003b26:	000b      	movs	r3, r1
 8003b28:	43d9      	mvns	r1, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	400a      	ands	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4013      	ands	r3, r2
 8003b40:	4a19      	ldr	r2, [pc, #100]	@ (8003ba8 <HAL_DAC_ConfigChannel+0x25c>)
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	43da      	mvns	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2210      	movs	r2, #16
 8003b58:	4013      	ands	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2110      	movs	r1, #16
 8003b78:	400b      	ands	r3, r1
 8003b7a:	21c0      	movs	r1, #192	@ 0xc0
 8003b7c:	4099      	lsls	r1, r3
 8003b7e:	000b      	movs	r3, r1
 8003b80:	43d9      	mvns	r1, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	400a      	ands	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b96:	231f      	movs	r3, #31
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	781b      	ldrb	r3, [r3, #0]
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b008      	add	sp, #32
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	000003ff 	.word	0x000003ff
 8003ba8:	00000ffe 	.word	0x00000ffe

08003bac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e077      	b.n	8003cbe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8003cc8 <HAL_DMA_Init+0x10c>)
 8003bd4:	4694      	mov	ip, r2
 8003bd6:	4463      	add	r3, ip
 8003bd8:	2114      	movs	r1, #20
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fc faa4 	bl	8000128 <__udivsi3>
 8003be0:	0003      	movs	r3, r0
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2225      	movs	r2, #37	@ 0x25
 8003bec:	2102      	movs	r1, #2
 8003bee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4934      	ldr	r1, [pc, #208]	@ (8003ccc <HAL_DMA_Init+0x110>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 fa8d 	bl	8004158 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	2380      	movs	r3, #128	@ 0x80
 8003c44:	01db      	lsls	r3, r3, #7
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d102      	bne.n	8003c50 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c58:	213f      	movs	r1, #63	@ 0x3f
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c66:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d011      	beq.n	8003c94 <HAL_DMA_Init+0xd8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d80d      	bhi.n	8003c94 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fa98 	bl	80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	e008      	b.n	8003ca6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2225      	movs	r2, #37	@ 0x25
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	@ 0x24
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b002      	add	sp, #8
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	bffdfff8 	.word	0xbffdfff8
 8003ccc:	ffff800f 	.word	0xffff800f

08003cd0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2317      	movs	r3, #23
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2224      	movs	r2, #36	@ 0x24
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Start_IT+0x24>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e06f      	b.n	8003dd4 <HAL_DMA_Start_IT+0x104>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2224      	movs	r2, #36	@ 0x24
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2225      	movs	r2, #37	@ 0x25
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d157      	bne.n	8003db8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2225      	movs	r2, #37	@ 0x25
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	438a      	bics	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f9d3 	bl	80040d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	210e      	movs	r1, #14
 8003d46:	430a      	orrs	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e00f      	b.n	8003d6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2104      	movs	r1, #4
 8003d58:	438a      	bics	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	210a      	movs	r1, #10
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	025b      	lsls	r3, r3, #9
 8003d76:	4013      	ands	r3, r2
 8003d78:	d008      	beq.n	8003d8c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	2180      	movs	r1, #128	@ 0x80
 8003da0:	0049      	lsls	r1, r1, #1
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e00a      	b.n	8003dce <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2280      	movs	r2, #128	@ 0x80
 8003dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2224      	movs	r2, #36	@ 0x24
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003dc6:	2317      	movs	r3, #23
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003dce:	2317      	movs	r3, #23
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	781b      	ldrb	r3, [r3, #0]
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b006      	add	sp, #24
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e050      	b.n	8003e90 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2225      	movs	r2, #37	@ 0x25
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d008      	beq.n	8003e0c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	@ 0x24
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e041      	b.n	8003e90 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	210e      	movs	r1, #14
 8003e18:	438a      	bics	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	491c      	ldr	r1, [pc, #112]	@ (8003e98 <HAL_DMA_Abort+0xbc>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003e3c:	4b17      	ldr	r3, [pc, #92]	@ (8003e9c <HAL_DMA_Abort+0xc0>)
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	221c      	movs	r2, #28
 8003e46:	4013      	ands	r3, r2
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <HAL_DMA_Abort+0xc0>)
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6e:	490a      	ldr	r1, [pc, #40]	@ (8003e98 <HAL_DMA_Abort+0xbc>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2225      	movs	r2, #37	@ 0x25
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2224      	movs	r2, #36	@ 0x24
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	fffffeff 	.word	0xfffffeff
 8003e9c:	40020000 	.word	0x40020000

08003ea0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea8:	210f      	movs	r1, #15
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2225      	movs	r2, #37	@ 0x25
 8003eb4:	5c9b      	ldrb	r3, [r3, r2]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d006      	beq.n	8003eca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e049      	b.n	8003f5e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	210e      	movs	r1, #14
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	438a      	bics	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	491d      	ldr	r1, [pc, #116]	@ (8003f6c <HAL_DMA_Abort_IT+0xcc>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003efa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <HAL_DMA_Abort_IT+0xd0>)
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	221c      	movs	r2, #28
 8003f04:	4013      	ands	r3, r2
 8003f06:	2201      	movs	r2, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <HAL_DMA_Abort_IT+0xd0>)
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	490f      	ldr	r1, [pc, #60]	@ (8003f6c <HAL_DMA_Abort_IT+0xcc>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003f3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2225      	movs	r2, #37	@ 0x25
 8003f40:	2101      	movs	r1, #1
 8003f42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	@ 0x24
 8003f48:	2100      	movs	r1, #0
 8003f4a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	0010      	movs	r0, r2
 8003f5c:	4798      	blx	r3
    }
  }
  return status;
 8003f5e:	230f      	movs	r3, #15
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	fffffeff 	.word	0xfffffeff
 8003f70:	40020000 	.word	0x40020000

08003f74 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003f7c:	4b55      	ldr	r3, [pc, #340]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	221c      	movs	r2, #28
 8003f90:	4013      	ands	r3, r2
 8003f92:	2204      	movs	r2, #4
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d027      	beq.n	8003fee <HAL_DMA_IRQHandler+0x7a>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d023      	beq.n	8003fee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2220      	movs	r2, #32
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003fc2:	4b44      	ldr	r3, [pc, #272]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	221c      	movs	r2, #28
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2204      	movs	r2, #4
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	4b40      	ldr	r3, [pc, #256]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d100      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x6e>
 8003fe0:	e073      	b.n	80040ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	0010      	movs	r0, r2
 8003fea:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003fec:	e06d      	b.n	80040ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	221c      	movs	r2, #28
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	d02e      	beq.n	8004060 <HAL_DMA_IRQHandler+0xec>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d02a      	beq.n	8004060 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2220      	movs	r2, #32
 8004012:	4013      	ands	r3, r2
 8004014:	d10b      	bne.n	800402e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	210a      	movs	r1, #10
 8004022:	438a      	bics	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2225      	movs	r2, #37	@ 0x25
 800402a:	2101      	movs	r1, #1
 800402c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800402e:	4b29      	ldr	r3, [pc, #164]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	221c      	movs	r2, #28
 8004038:	4013      	ands	r3, r2
 800403a:	2202      	movs	r2, #2
 800403c:	409a      	lsls	r2, r3
 800403e:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	@ 0x24
 8004048:	2100      	movs	r1, #0
 800404a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d03a      	beq.n	80040ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	0010      	movs	r0, r2
 800405c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800405e:	e034      	b.n	80040ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	221c      	movs	r2, #28
 8004066:	4013      	ands	r3, r2
 8004068:	2208      	movs	r2, #8
 800406a:	409a      	lsls	r2, r3
 800406c:	0013      	movs	r3, r2
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4013      	ands	r3, r2
 8004072:	d02b      	beq.n	80040cc <HAL_DMA_IRQHandler+0x158>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2208      	movs	r2, #8
 8004078:	4013      	ands	r3, r2
 800407a:	d027      	beq.n	80040cc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	210e      	movs	r1, #14
 8004088:	438a      	bics	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	221c      	movs	r2, #28
 8004096:	4013      	ands	r3, r2
 8004098:	2201      	movs	r2, #1
 800409a:	409a      	lsls	r2, r3
 800409c:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <HAL_DMA_IRQHandler+0x160>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2225      	movs	r2, #37	@ 0x25
 80040ac:	2101      	movs	r1, #1
 80040ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	@ 0x24
 80040b4:	2100      	movs	r1, #0
 80040b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	0010      	movs	r0, r2
 80040c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	46c0      	nop			@ (mov r8, r8)
}
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40020000 	.word	0x40020000

080040d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004100:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004102:	4b14      	ldr	r3, [pc, #80]	@ (8004154 <DMA_SetConfig+0x7c>)
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	221c      	movs	r2, #28
 800410c:	4013      	ands	r3, r2
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <DMA_SetConfig+0x7c>)
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d108      	bne.n	800413a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004138:	e007      	b.n	800414a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	40020000 	.word	0x40020000

08004158 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	4a10      	ldr	r2, [pc, #64]	@ (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004168:	4694      	mov	ip, r2
 800416a:	4463      	add	r3, ip
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	001a      	movs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	001a      	movs	r2, r3
 800417a:	23ff      	movs	r3, #255	@ 0xff
 800417c:	4013      	ands	r3, r2
 800417e:	3b08      	subs	r3, #8
 8004180:	2114      	movs	r1, #20
 8004182:	0018      	movs	r0, r3
 8004184:	f7fb ffd0 	bl	8000128 <__udivsi3>
 8004188:	0003      	movs	r3, r0
 800418a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a07      	ldr	r2, [pc, #28]	@ (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004190:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	221f      	movs	r2, #31
 8004196:	4013      	ands	r3, r2
 8004198:	2201      	movs	r2, #1
 800419a:	409a      	lsls	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b004      	add	sp, #16
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	10008200 	.word	0x10008200
 80041ac:	40020880 	.word	0x40020880

080041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	223f      	movs	r2, #63	@ 0x3f
 80041be:	4013      	ands	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	@ (80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041c6:	4694      	mov	ip, r2
 80041c8:	4463      	add	r3, ip
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	001a      	movs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a07      	ldr	r2, [pc, #28]	@ (80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3b01      	subs	r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	4013      	ands	r3, r2
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	1000823f 	.word	0x1000823f
 80041f4:	40020940 	.word	0x40020940

080041f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004206:	e147      	b.n	8004498 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4091      	lsls	r1, r2
 8004212:	000a      	movs	r2, r1
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d100      	bne.n	8004220 <HAL_GPIO_Init+0x28>
 800421e:	e138      	b.n	8004492 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
 8004228:	2b01      	cmp	r3, #1
 800422a:	d005      	beq.n	8004238 <HAL_GPIO_Init+0x40>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	4013      	ands	r3, r2
 8004234:	2b02      	cmp	r3, #2
 8004236:	d130      	bne.n	800429a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2203      	movs	r2, #3
 8004244:	409a      	lsls	r2, r3
 8004246:	0013      	movs	r3, r2
 8004248:	43da      	mvns	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	0013      	movs	r3, r2
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800426e:	2201      	movs	r2, #1
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	409a      	lsls	r2, r3
 8004274:	0013      	movs	r3, r2
 8004276:	43da      	mvns	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	2201      	movs	r2, #1
 8004286:	401a      	ands	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	409a      	lsls	r2, r3
 800428c:	0013      	movs	r3, r2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d017      	beq.n	80042d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	409a      	lsls	r2, r3
 80042b4:	0013      	movs	r3, r2
 80042b6:	43da      	mvns	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	0013      	movs	r3, r2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2203      	movs	r2, #3
 80042dc:	4013      	ands	r3, r2
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d123      	bne.n	800432a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	08da      	lsrs	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3208      	adds	r2, #8
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	58d3      	ldr	r3, [r2, r3]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2207      	movs	r2, #7
 80042f4:	4013      	ands	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	220f      	movs	r2, #15
 80042fa:	409a      	lsls	r2, r3
 80042fc:	0013      	movs	r3, r2
 80042fe:	43da      	mvns	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2107      	movs	r1, #7
 800430e:	400b      	ands	r3, r1
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	409a      	lsls	r2, r3
 8004314:	0013      	movs	r3, r2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	6939      	ldr	r1, [r7, #16]
 8004328:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	409a      	lsls	r2, r3
 8004338:	0013      	movs	r3, r2
 800433a:	43da      	mvns	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2203      	movs	r2, #3
 8004348:	401a      	ands	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	0013      	movs	r3, r2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	23c0      	movs	r3, #192	@ 0xc0
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	4013      	ands	r3, r2
 8004368:	d100      	bne.n	800436c <HAL_GPIO_Init+0x174>
 800436a:	e092      	b.n	8004492 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800436c:	4a50      	ldr	r2, [pc, #320]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	3318      	adds	r3, #24
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	589b      	ldr	r3, [r3, r2]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2203      	movs	r2, #3
 800437e:	4013      	ands	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	220f      	movs	r2, #15
 8004384:	409a      	lsls	r2, r3
 8004386:	0013      	movs	r3, r2
 8004388:	43da      	mvns	r2, r3
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	23a0      	movs	r3, #160	@ 0xa0
 8004394:	05db      	lsls	r3, r3, #23
 8004396:	429a      	cmp	r2, r3
 8004398:	d013      	beq.n	80043c2 <HAL_GPIO_Init+0x1ca>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a45      	ldr	r2, [pc, #276]	@ (80044b4 <HAL_GPIO_Init+0x2bc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00d      	beq.n	80043be <HAL_GPIO_Init+0x1c6>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a44      	ldr	r2, [pc, #272]	@ (80044b8 <HAL_GPIO_Init+0x2c0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <HAL_GPIO_Init+0x1c2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a43      	ldr	r2, [pc, #268]	@ (80044bc <HAL_GPIO_Init+0x2c4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_GPIO_Init+0x1be>
 80043b2:	2303      	movs	r3, #3
 80043b4:	e006      	b.n	80043c4 <HAL_GPIO_Init+0x1cc>
 80043b6:	2305      	movs	r3, #5
 80043b8:	e004      	b.n	80043c4 <HAL_GPIO_Init+0x1cc>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e002      	b.n	80043c4 <HAL_GPIO_Init+0x1cc>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <HAL_GPIO_Init+0x1cc>
 80043c2:	2300      	movs	r3, #0
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	2103      	movs	r1, #3
 80043c8:	400a      	ands	r2, r1
 80043ca:	00d2      	lsls	r2, r2, #3
 80043cc:	4093      	lsls	r3, r2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80043d4:	4936      	ldr	r1, [pc, #216]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	3318      	adds	r3, #24
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043e2:	4b33      	ldr	r3, [pc, #204]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	2380      	movs	r3, #128	@ 0x80
 80043f8:	035b      	lsls	r3, r3, #13
 80043fa:	4013      	ands	r3, r2
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004406:	4b2a      	ldr	r3, [pc, #168]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800440c:	4b28      	ldr	r3, [pc, #160]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	43da      	mvns	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	039b      	lsls	r3, r3, #14
 8004424:	4013      	ands	r3, r2
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004430:	4b1f      	ldr	r3, [pc, #124]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004436:	4a1e      	ldr	r2, [pc, #120]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 8004438:	2384      	movs	r3, #132	@ 0x84
 800443a:	58d3      	ldr	r3, [r2, r3]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	43da      	mvns	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	2380      	movs	r3, #128	@ 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800445c:	4914      	ldr	r1, [pc, #80]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 800445e:	2284      	movs	r2, #132	@ 0x84
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004464:	4a12      	ldr	r2, [pc, #72]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	58d3      	ldr	r3, [r2, r3]
 800446a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	43da      	mvns	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	025b      	lsls	r3, r3, #9
 800447e:	4013      	ands	r3, r2
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800448a:	4909      	ldr	r1, [pc, #36]	@ (80044b0 <HAL_GPIO_Init+0x2b8>)
 800448c:	2280      	movs	r2, #128	@ 0x80
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	3301      	adds	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	40da      	lsrs	r2, r3
 80044a0:	1e13      	subs	r3, r2, #0
 80044a2:	d000      	beq.n	80044a6 <HAL_GPIO_Init+0x2ae>
 80044a4:	e6b0      	b.n	8004208 <HAL_GPIO_Init+0x10>
  }
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46c0      	nop			@ (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b006      	add	sp, #24
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021800 	.word	0x40021800
 80044b4:	50000400 	.word	0x50000400
 80044b8:	50000800 	.word	0x50000800
 80044bc:	50000c00 	.word	0x50000c00

080044c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	000a      	movs	r2, r1
 80044ca:	1cbb      	adds	r3, r7, #2
 80044cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	1cba      	adds	r2, r7, #2
 80044d4:	8812      	ldrh	r2, [r2, #0]
 80044d6:	4013      	ands	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80044da:	230f      	movs	r3, #15
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	2201      	movs	r2, #1
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e003      	b.n	80044ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044e4:	230f      	movs	r3, #15
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80044ec:	230f      	movs	r3, #15
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781b      	ldrb	r3, [r3, #0]
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	0008      	movs	r0, r1
 8004504:	0011      	movs	r1, r2
 8004506:	1cbb      	adds	r3, r7, #2
 8004508:	1c02      	adds	r2, r0, #0
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	1c7b      	adds	r3, r7, #1
 800450e:	1c0a      	adds	r2, r1, #0
 8004510:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004512:	1c7b      	adds	r3, r7, #1
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800451a:	1cbb      	adds	r3, r7, #2
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004522:	e003      	b.n	800452c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004524:	1cbb      	adds	r3, r7, #2
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800452c:	46c0      	nop			@ (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	b002      	add	sp, #8
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	000a      	movs	r2, r1
 800453e:	1cbb      	adds	r3, r7, #2
 8004540:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004548:	1cbb      	adds	r3, r7, #2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4013      	ands	r3, r2
 8004550:	041a      	lsls	r2, r3, #16
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	43db      	mvns	r3, r3
 8004556:	1cb9      	adds	r1, r7, #2
 8004558:	8809      	ldrh	r1, [r1, #0]
 800455a:	400b      	ands	r3, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	619a      	str	r2, [r3, #24]
}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a19      	ldr	r2, [pc, #100]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	4b17      	ldr	r3, [pc, #92]	@ (80045dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	2380      	movs	r3, #128	@ 0x80
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	429a      	cmp	r2, r3
 800458e:	d11f      	bne.n	80045d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004590:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	0013      	movs	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	189b      	adds	r3, r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4912      	ldr	r1, [pc, #72]	@ (80045e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fb fdc2 	bl	8000128 <__udivsi3>
 80045a4:	0003      	movs	r3, r0
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045aa:	e008      	b.n	80045be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e001      	b.n	80045be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e009      	b.n	80045d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045be:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	401a      	ands	r2, r3
 80045c8:	2380      	movs	r3, #128	@ 0x80
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d0ed      	beq.n	80045ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b004      	add	sp, #16
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	40007000 	.word	0x40007000
 80045e0:	fffff9ff 	.word	0xfffff9ff
 80045e4:	20000048 	.word	0x20000048
 80045e8:	000f4240 	.word	0x000f4240

080045ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80045f0:	4b03      	ldr	r3, [pc, #12]	@ (8004600 <LL_RCC_GetAPB1Prescaler+0x14>)
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	23e0      	movs	r3, #224	@ 0xe0
 80045f6:	01db      	lsls	r3, r3, #7
 80045f8:	4013      	ands	r3, r2
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000

08004604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e2fe      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	d100      	bne.n	8004622 <HAL_RCC_OscConfig+0x1e>
 8004620:	e07c      	b.n	800471c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	4bc3      	ldr	r3, [pc, #780]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2238      	movs	r2, #56	@ 0x38
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800462c:	4bc0      	ldr	r3, [pc, #768]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2203      	movs	r2, #3
 8004632:	4013      	ands	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b10      	cmp	r3, #16
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0x3e>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d002      	beq.n	8004648 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4bb9      	ldr	r3, [pc, #740]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	4013      	ands	r3, r2
 8004652:	d062      	beq.n	800471a <HAL_RCC_OscConfig+0x116>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d15e      	bne.n	800471a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2d9      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	2380      	movs	r3, #128	@ 0x80
 8004666:	025b      	lsls	r3, r3, #9
 8004668:	429a      	cmp	r2, r3
 800466a:	d107      	bne.n	800467c <HAL_RCC_OscConfig+0x78>
 800466c:	4bb0      	ldr	r3, [pc, #704]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4baf      	ldr	r3, [pc, #700]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004672:	2180      	movs	r1, #128	@ 0x80
 8004674:	0249      	lsls	r1, r1, #9
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e020      	b.n	80046be <HAL_RCC_OscConfig+0xba>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	23a0      	movs	r3, #160	@ 0xa0
 8004682:	02db      	lsls	r3, r3, #11
 8004684:	429a      	cmp	r2, r3
 8004686:	d10e      	bne.n	80046a6 <HAL_RCC_OscConfig+0xa2>
 8004688:	4ba9      	ldr	r3, [pc, #676]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4ba8      	ldr	r3, [pc, #672]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800468e:	2180      	movs	r1, #128	@ 0x80
 8004690:	02c9      	lsls	r1, r1, #11
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	4ba6      	ldr	r3, [pc, #664]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4ba5      	ldr	r3, [pc, #660]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800469c:	2180      	movs	r1, #128	@ 0x80
 800469e:	0249      	lsls	r1, r1, #9
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e00b      	b.n	80046be <HAL_RCC_OscConfig+0xba>
 80046a6:	4ba2      	ldr	r3, [pc, #648]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4ba1      	ldr	r3, [pc, #644]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80046ac:	49a1      	ldr	r1, [pc, #644]	@ (8004934 <HAL_RCC_OscConfig+0x330>)
 80046ae:	400a      	ands	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80046b8:	499f      	ldr	r1, [pc, #636]	@ (8004938 <HAL_RCC_OscConfig+0x334>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d014      	beq.n	80046f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fd01 	bl	80020cc <HAL_GetTick>
 80046ca:	0003      	movs	r3, r0
 80046cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fd fcfc 	bl	80020cc <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e298      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e2:	4b93      	ldr	r3, [pc, #588]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	2380      	movs	r3, #128	@ 0x80
 80046e8:	029b      	lsls	r3, r3, #10
 80046ea:	4013      	ands	r3, r2
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0xcc>
 80046ee:	e015      	b.n	800471c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd fcec 	bl	80020cc <HAL_GetTick>
 80046f4:	0003      	movs	r3, r0
 80046f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fa:	f7fd fce7 	bl	80020cc <HAL_GetTick>
 80046fe:	0002      	movs	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b64      	cmp	r3, #100	@ 0x64
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e283      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800470c:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	@ 0x80
 8004712:	029b      	lsls	r3, r3, #10
 8004714:	4013      	ands	r3, r2
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0xf6>
 8004718:	e000      	b.n	800471c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2202      	movs	r2, #2
 8004722:	4013      	ands	r3, r2
 8004724:	d100      	bne.n	8004728 <HAL_RCC_OscConfig+0x124>
 8004726:	e099      	b.n	800485c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004728:	4b81      	ldr	r3, [pc, #516]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2238      	movs	r2, #56	@ 0x38
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004732:	4b7f      	ldr	r3, [pc, #508]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2203      	movs	r2, #3
 8004738:	4013      	ands	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b10      	cmp	r3, #16
 8004740:	d102      	bne.n	8004748 <HAL_RCC_OscConfig+0x144>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d002      	beq.n	800474e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d135      	bne.n	80047ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800474e:	4b78      	ldr	r3, [pc, #480]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4013      	ands	r3, r2
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x162>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e256      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004766:	4b72      	ldr	r3, [pc, #456]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4a74      	ldr	r2, [pc, #464]	@ (800493c <HAL_RCC_OscConfig+0x338>)
 800476c:	4013      	ands	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	021a      	lsls	r2, r3, #8
 8004776:	4b6e      	ldr	r3, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d112      	bne.n	80047a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004782:	4b6b      	ldr	r3, [pc, #428]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6e      	ldr	r2, [pc, #440]	@ (8004940 <HAL_RCC_OscConfig+0x33c>)
 8004788:	4013      	ands	r3, r2
 800478a:	0019      	movs	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	4b67      	ldr	r3, [pc, #412]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004796:	4b66      	ldr	r3, [pc, #408]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0adb      	lsrs	r3, r3, #11
 800479c:	2207      	movs	r2, #7
 800479e:	4013      	ands	r3, r2
 80047a0:	4a68      	ldr	r2, [pc, #416]	@ (8004944 <HAL_RCC_OscConfig+0x340>)
 80047a2:	40da      	lsrs	r2, r3
 80047a4:	4b68      	ldr	r3, [pc, #416]	@ (8004948 <HAL_RCC_OscConfig+0x344>)
 80047a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047a8:	4b68      	ldr	r3, [pc, #416]	@ (800494c <HAL_RCC_OscConfig+0x348>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fd fc31 	bl	8002014 <HAL_InitTick>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d051      	beq.n	800485a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e22c      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d030      	beq.n	8004824 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004940 <HAL_RCC_OscConfig+0x33c>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	4b57      	ldr	r3, [pc, #348]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80047d6:	4b56      	ldr	r3, [pc, #344]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b55      	ldr	r3, [pc, #340]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80047dc:	2180      	movs	r1, #128	@ 0x80
 80047de:	0049      	lsls	r1, r1, #1
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd fc72 	bl	80020cc <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fd fc6d 	bl	80020cc <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e209      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004800:	4b4b      	ldr	r3, [pc, #300]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	2380      	movs	r3, #128	@ 0x80
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4013      	ands	r3, r2
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b48      	ldr	r3, [pc, #288]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a4a      	ldr	r2, [pc, #296]	@ (800493c <HAL_RCC_OscConfig+0x338>)
 8004812:	4013      	ands	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	4b44      	ldr	r3, [pc, #272]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	e01b      	b.n	800485c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004824:	4b42      	ldr	r3, [pc, #264]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800482a:	4949      	ldr	r1, [pc, #292]	@ (8004950 <HAL_RCC_OscConfig+0x34c>)
 800482c:	400a      	ands	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd fc4c 	bl	80020cc <HAL_GetTick>
 8004834:	0003      	movs	r3, r0
 8004836:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483a:	f7fd fc47 	bl	80020cc <HAL_GetTick>
 800483e:	0002      	movs	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e1e3      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800484c:	4b38      	ldr	r3, [pc, #224]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4013      	ands	r3, r2
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x236>
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2208      	movs	r2, #8
 8004862:	4013      	ands	r3, r2
 8004864:	d047      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004866:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2238      	movs	r2, #56	@ 0x38
 800486c:	4013      	ands	r3, r2
 800486e:	2b18      	cmp	r3, #24
 8004870:	d10a      	bne.n	8004888 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004872:	4b2f      	ldr	r3, [pc, #188]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d03c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2f2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d138      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e1c5      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d019      	beq.n	80048c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004890:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004892:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004894:	4b26      	ldr	r3, [pc, #152]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004896:	2101      	movs	r1, #1
 8004898:	430a      	orrs	r2, r1
 800489a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd fc16 	bl	80020cc <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fd fc11 	bl	80020cc <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1ad      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80048ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048bc:	2202      	movs	r2, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	d0f1      	beq.n	80048a6 <HAL_RCC_OscConfig+0x2a2>
 80048c2:	e018      	b.n	80048f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80048c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80048c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80048ca:	2101      	movs	r1, #1
 80048cc:	438a      	bics	r2, r1
 80048ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fbfc 	bl	80020cc <HAL_GetTick>
 80048d4:	0003      	movs	r3, r0
 80048d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048da:	f7fd fbf7 	bl	80020cc <HAL_GetTick>
 80048de:	0002      	movs	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e193      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048ec:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 80048ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f0:	2202      	movs	r2, #2
 80048f2:	4013      	ands	r3, r2
 80048f4:	d1f1      	bne.n	80048da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2204      	movs	r2, #4
 80048fc:	4013      	ands	r3, r2
 80048fe:	d100      	bne.n	8004902 <HAL_RCC_OscConfig+0x2fe>
 8004900:	e0c6      	b.n	8004a90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	231f      	movs	r3, #31
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2238      	movs	r2, #56	@ 0x38
 8004910:	4013      	ands	r3, r2
 8004912:	2b20      	cmp	r3, #32
 8004914:	d11e      	bne.n	8004954 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_OscConfig+0x32c>)
 8004918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491a:	2202      	movs	r2, #2
 800491c:	4013      	ands	r3, r2
 800491e:	d100      	bne.n	8004922 <HAL_RCC_OscConfig+0x31e>
 8004920:	e0b6      	b.n	8004a90 <HAL_RCC_OscConfig+0x48c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d000      	beq.n	800492c <HAL_RCC_OscConfig+0x328>
 800492a:	e0b1      	b.n	8004a90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e171      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
 8004930:	40021000 	.word	0x40021000
 8004934:	fffeffff 	.word	0xfffeffff
 8004938:	fffbffff 	.word	0xfffbffff
 800493c:	ffff80ff 	.word	0xffff80ff
 8004940:	ffffc7ff 	.word	0xffffc7ff
 8004944:	00f42400 	.word	0x00f42400
 8004948:	20000048 	.word	0x20000048
 800494c:	2000004c 	.word	0x2000004c
 8004950:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004954:	4bb1      	ldr	r3, [pc, #708]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	055b      	lsls	r3, r3, #21
 800495c:	4013      	ands	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_RCC_OscConfig+0x360>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x362>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	4bac      	ldr	r3, [pc, #688]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 800496c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800496e:	4bab      	ldr	r3, [pc, #684]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004970:	2180      	movs	r1, #128	@ 0x80
 8004972:	0549      	lsls	r1, r1, #21
 8004974:	430a      	orrs	r2, r1
 8004976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004978:	4ba8      	ldr	r3, [pc, #672]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 800497a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	055b      	lsls	r3, r3, #21
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004986:	231f      	movs	r3, #31
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498e:	4ba4      	ldr	r3, [pc, #656]	@ (8004c20 <HAL_RCC_OscConfig+0x61c>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	2380      	movs	r3, #128	@ 0x80
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4013      	ands	r3, r2
 8004998:	d11a      	bne.n	80049d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499a:	4ba1      	ldr	r3, [pc, #644]	@ (8004c20 <HAL_RCC_OscConfig+0x61c>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4ba0      	ldr	r3, [pc, #640]	@ (8004c20 <HAL_RCC_OscConfig+0x61c>)
 80049a0:	2180      	movs	r1, #128	@ 0x80
 80049a2:	0049      	lsls	r1, r1, #1
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80049a8:	f7fd fb90 	bl	80020cc <HAL_GetTick>
 80049ac:	0003      	movs	r3, r0
 80049ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fd fb8b 	bl	80020cc <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e127      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c4:	4b96      	ldr	r3, [pc, #600]	@ (8004c20 <HAL_RCC_OscConfig+0x61c>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	2380      	movs	r3, #128	@ 0x80
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4013      	ands	r3, r2
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3e2>
 80049d8:	4b90      	ldr	r3, [pc, #576]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 80049da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 80049de:	2101      	movs	r1, #1
 80049e0:	430a      	orrs	r2, r1
 80049e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049e4:	e01c      	b.n	8004a20 <HAL_RCC_OscConfig+0x41c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x404>
 80049ee:	4b8b      	ldr	r3, [pc, #556]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 80049f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049f2:	4b8a      	ldr	r3, [pc, #552]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 80049f4:	2104      	movs	r1, #4
 80049f6:	430a      	orrs	r2, r1
 80049f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049fa:	4b88      	ldr	r3, [pc, #544]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 80049fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049fe:	4b87      	ldr	r3, [pc, #540]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0x41c>
 8004a08:	4b84      	ldr	r3, [pc, #528]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a0c:	4b83      	ldr	r3, [pc, #524]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a14:	4b81      	ldr	r3, [pc, #516]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a18:	4b80      	ldr	r3, [pc, #512]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d014      	beq.n	8004a52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fd fb50 	bl	80020cc <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a30:	e009      	b.n	8004a46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fd fb4b 	bl	80020cc <HAL_GetTick>
 8004a36:	0002      	movs	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	4a79      	ldr	r2, [pc, #484]	@ (8004c24 <HAL_RCC_OscConfig+0x620>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e0e6      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a46:	4b75      	ldr	r3, [pc, #468]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x42e>
 8004a50:	e013      	b.n	8004a7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd fb3b 	bl	80020cc <HAL_GetTick>
 8004a56:	0003      	movs	r3, r0
 8004a58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a5a:	e009      	b.n	8004a70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fb36 	bl	80020cc <HAL_GetTick>
 8004a60:	0002      	movs	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	4a6f      	ldr	r2, [pc, #444]	@ (8004c24 <HAL_RCC_OscConfig+0x620>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0d1      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a70:	4b6a      	ldr	r3, [pc, #424]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	2202      	movs	r2, #2
 8004a76:	4013      	ands	r3, r2
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a7a:	231f      	movs	r3, #31
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a84:	4b65      	ldr	r3, [pc, #404]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a88:	4b64      	ldr	r3, [pc, #400]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a8a:	4967      	ldr	r1, [pc, #412]	@ (8004c28 <HAL_RCC_OscConfig+0x624>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d100      	bne.n	8004a9a <HAL_RCC_OscConfig+0x496>
 8004a98:	e0bb      	b.n	8004c12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a9a:	4b60      	ldr	r3, [pc, #384]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2238      	movs	r2, #56	@ 0x38
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d100      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4a4>
 8004aa6:	e07b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d156      	bne.n	8004b5e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b59      	ldr	r3, [pc, #356]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ab6:	495d      	ldr	r1, [pc, #372]	@ (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004ab8:	400a      	ands	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fb06 	bl	80020cc <HAL_GetTick>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac6:	f7fd fb01 	bl	80020cc <HAL_GetTick>
 8004aca:	0002      	movs	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e09d      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad8:	4b50      	ldr	r3, [pc, #320]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	049b      	lsls	r3, r3, #18
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a51      	ldr	r2, [pc, #324]	@ (8004c30 <HAL_RCC_OscConfig+0x62c>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	0019      	movs	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b10:	431a      	orrs	r2, r3
 8004b12:	4b42      	ldr	r3, [pc, #264]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b14:	430a      	orrs	r2, r1
 8004b16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b18:	4b40      	ldr	r3, [pc, #256]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b1e:	2180      	movs	r1, #128	@ 0x80
 8004b20:	0449      	lsls	r1, r1, #17
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004b26:	4b3d      	ldr	r3, [pc, #244]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	0549      	lsls	r1, r1, #21
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fd faca 	bl	80020cc <HAL_GetTick>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fd fac5 	bl	80020cc <HAL_GetTick>
 8004b42:	0002      	movs	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e061      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b50:	4b32      	ldr	r3, [pc, #200]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	049b      	lsls	r3, r3, #18
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x53a>
 8004b5c:	e059      	b.n	8004c12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b2e      	ldr	r3, [pc, #184]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b64:	4931      	ldr	r1, [pc, #196]	@ (8004c2c <HAL_RCC_OscConfig+0x628>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fd faaf 	bl	80020cc <HAL_GetTick>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd faaa 	bl	80020cc <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e046      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b86:	4b25      	ldr	r3, [pc, #148]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	049b      	lsls	r3, r3, #18
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004b92:	4b22      	ldr	r3, [pc, #136]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	4b21      	ldr	r3, [pc, #132]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004b98:	4926      	ldr	r1, [pc, #152]	@ (8004c34 <HAL_RCC_OscConfig+0x630>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e038      	b.n	8004c12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e033      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004bac:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <HAL_RCC_OscConfig+0x618>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d126      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2270      	movs	r2, #112	@ 0x70
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d11f      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	23fe      	movs	r3, #254	@ 0xfe
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d116      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	23f8      	movs	r3, #248	@ 0xf8
 8004be4:	039b      	lsls	r3, r3, #14
 8004be6:	401a      	ands	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d10e      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	23e0      	movs	r3, #224	@ 0xe0
 8004bf4:	051b      	lsls	r3, r3, #20
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0f5b      	lsrs	r3, r3, #29
 8004c04:	075a      	lsls	r2, r3, #29
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b008      	add	sp, #32
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40007000 	.word	0x40007000
 8004c24:	00001388 	.word	0x00001388
 8004c28:	efffffff 	.word	0xefffffff
 8004c2c:	feffffff 	.word	0xfeffffff
 8004c30:	11c1808c 	.word	0x11c1808c
 8004c34:	eefefffc 	.word	0xeefefffc

08004c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0e9      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b76      	ldr	r3, [pc, #472]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2207      	movs	r2, #7
 8004c52:	4013      	ands	r3, r2
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d91e      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b73      	ldr	r3, [pc, #460]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2207      	movs	r2, #7
 8004c60:	4393      	bics	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	4b70      	ldr	r3, [pc, #448]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c6c:	f7fd fa2e 	bl	80020cc <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c74:	e009      	b.n	8004c8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c76:	f7fd fa29 	bl	80020cc <HAL_GetTick>
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	4a6a      	ldr	r2, [pc, #424]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0ca      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c8a:	4b67      	ldr	r3, [pc, #412]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2207      	movs	r2, #7
 8004c90:	4013      	ands	r3, r2
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1ee      	bne.n	8004c76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d015      	beq.n	8004cce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d006      	beq.n	8004cba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cac:	4b60      	ldr	r3, [pc, #384]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	4b5f      	ldr	r3, [pc, #380]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004cb2:	21e0      	movs	r1, #224	@ 0xe0
 8004cb4:	01c9      	lsls	r1, r1, #7
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cba:	4b5d      	ldr	r3, [pc, #372]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a5d      	ldr	r2, [pc, #372]	@ (8004e34 <HAL_RCC_ClockConfig+0x1fc>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b59      	ldr	r3, [pc, #356]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d057      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce0:	4b53      	ldr	r3, [pc, #332]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	029b      	lsls	r3, r3, #10
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d12b      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e097      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	049b      	lsls	r3, r3, #18
 8004d00:	4013      	ands	r3, r2
 8004d02:	d11f      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e08b      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d10:	4b47      	ldr	r3, [pc, #284]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e07f      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d28:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d108      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e074      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d36:	4b3e      	ldr	r3, [pc, #248]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e06d      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d44:	4b3a      	ldr	r3, [pc, #232]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2207      	movs	r2, #7
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	4b37      	ldr	r3, [pc, #220]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d58:	f7fd f9b8 	bl	80020cc <HAL_GetTick>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d60:	e009      	b.n	8004d76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d62:	f7fd f9b3 	bl	80020cc <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e054      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2e      	ldr	r3, [pc, #184]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2238      	movs	r2, #56	@ 0x38
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1ec      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b27      	ldr	r3, [pc, #156]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	4013      	ands	r3, r2
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d21e      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	4393      	bics	r3, r2
 8004d9e:	0019      	movs	r1, r3
 8004da0:	4b21      	ldr	r3, [pc, #132]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004da8:	f7fd f990 	bl	80020cc <HAL_GetTick>
 8004dac:	0003      	movs	r3, r0
 8004dae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004db0:	e009      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db2:	f7fd f98b 	bl	80020cc <HAL_GetTick>
 8004db6:	0002      	movs	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <HAL_RCC_ClockConfig+0x1f4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e02c      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dc6:	4b18      	ldr	r3, [pc, #96]	@ (8004e28 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2207      	movs	r2, #7
 8004dcc:	4013      	ands	r3, r2
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1ee      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dde:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4a15      	ldr	r2, [pc, #84]	@ (8004e38 <HAL_RCC_ClockConfig+0x200>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004df2:	f000 f829 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8004df6:	0001      	movs	r1, r0
 8004df8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <HAL_RCC_ClockConfig+0x1f8>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	220f      	movs	r2, #15
 8004e00:	401a      	ands	r2, r3
 8004e02:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <HAL_RCC_ClockConfig+0x204>)
 8004e04:	0092      	lsls	r2, r2, #2
 8004e06:	58d3      	ldr	r3, [r2, r3]
 8004e08:	221f      	movs	r2, #31
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	000a      	movs	r2, r1
 8004e0e:	40da      	lsrs	r2, r3
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_RCC_ClockConfig+0x208>)
 8004e12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7fd f8fb 	bl	8002014 <HAL_InitTick>
 8004e1e:	0003      	movs	r3, r0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40022000 	.word	0x40022000
 8004e2c:	00001388 	.word	0x00001388
 8004e30:	40021000 	.word	0x40021000
 8004e34:	fffff0ff 	.word	0xfffff0ff
 8004e38:	ffff8fff 	.word	0xffff8fff
 8004e3c:	08009b00 	.word	0x08009b00
 8004e40:	20000048 	.word	0x20000048
 8004e44:	2000004c 	.word	0x2000004c

08004e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2238      	movs	r2, #56	@ 0x38
 8004e54:	4013      	ands	r3, r2
 8004e56:	d10f      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e58:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0adb      	lsrs	r3, r3, #11
 8004e5e:	2207      	movs	r2, #7
 8004e60:	4013      	ands	r3, r2
 8004e62:	2201      	movs	r2, #1
 8004e64:	409a      	lsls	r2, r3
 8004e66:	0013      	movs	r3, r2
 8004e68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	4835      	ldr	r0, [pc, #212]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e6e:	f7fb f95b 	bl	8000128 <__udivsi3>
 8004e72:	0003      	movs	r3, r0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e05d      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e78:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2238      	movs	r2, #56	@ 0x38
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e84:	4b30      	ldr	r3, [pc, #192]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	e054      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2238      	movs	r2, #56	@ 0x38
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d138      	bne.n	8004f08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004e96:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea0:	4b27      	ldr	r3, [pc, #156]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	2207      	movs	r2, #7
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	4824      	ldr	r0, [pc, #144]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8004eb8:	f7fb f936 	bl	8000128 <__udivsi3>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	0019      	movs	r1, r3
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	227f      	movs	r2, #127	@ 0x7f
 8004ec8:	4013      	ands	r3, r2
 8004eca:	434b      	muls	r3, r1
 8004ecc:	617b      	str	r3, [r7, #20]
        break;
 8004ece:	e00d      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	481c      	ldr	r0, [pc, #112]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ed4:	f7fb f928 	bl	8000128 <__udivsi3>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	0019      	movs	r1, r3
 8004edc:	4b18      	ldr	r3, [pc, #96]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	227f      	movs	r2, #127	@ 0x7f
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	434b      	muls	r3, r1
 8004ee8:	617b      	str	r3, [r7, #20]
        break;
 8004eea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004eec:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	0f5b      	lsrs	r3, r3, #29
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	6978      	ldr	r0, [r7, #20]
 8004efe:	f7fb f913 	bl	8000128 <__udivsi3>
 8004f02:	0003      	movs	r3, r0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	e015      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f08:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2238      	movs	r2, #56	@ 0x38
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d103      	bne.n	8004f1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004f14:	2380      	movs	r3, #128	@ 0x80
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f1c:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2238      	movs	r2, #56	@ 0x38
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b18      	cmp	r3, #24
 8004f26:	d103      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004f28:	23fa      	movs	r3, #250	@ 0xfa
 8004f2a:	01db      	lsls	r3, r3, #7
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	e001      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f34:	693b      	ldr	r3, [r7, #16]
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b006      	add	sp, #24
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	40021000 	.word	0x40021000
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	007a1200 	.word	0x007a1200

08004f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f50:	4b02      	ldr	r3, [pc, #8]	@ (8004f5c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	20000048 	.word	0x20000048

08004f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f60:	b5b0      	push	{r4, r5, r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f64:	f7ff fff2 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f68:	0004      	movs	r4, r0
 8004f6a:	f7ff fb3f 	bl	80045ec <LL_RCC_GetAPB1Prescaler>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	0b1a      	lsrs	r2, r3, #12
 8004f72:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f74:	0092      	lsls	r2, r2, #2
 8004f76:	58d3      	ldr	r3, [r2, r3]
 8004f78:	221f      	movs	r2, #31
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	40dc      	lsrs	r4, r3
 8004f7e:	0023      	movs	r3, r4
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	08009b40 	.word	0x08009b40

08004f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004f94:	2313      	movs	r3, #19
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f9c:	2312      	movs	r3, #18
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	4013      	ands	r3, r2
 8004fae:	d100      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004fb0:	e0a3      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb2:	2011      	movs	r0, #17
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fba:	4bc3      	ldr	r3, [pc, #780]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	055b      	lsls	r3, r3, #21
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d110      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc6:	4bc0      	ldr	r3, [pc, #768]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fca:	4bbf      	ldr	r3, [pc, #764]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fcc:	2180      	movs	r1, #128	@ 0x80
 8004fce:	0549      	lsls	r1, r1, #21
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fd4:	4bbc      	ldr	r3, [pc, #752]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	055b      	lsls	r3, r3, #21
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe2:	183b      	adds	r3, r7, r0
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe8:	4bb8      	ldr	r3, [pc, #736]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4bb7      	ldr	r3, [pc, #732]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	0049      	lsls	r1, r1, #1
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff6:	f7fd f869 	bl	80020cc <HAL_GetTick>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffe:	e00b      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fd f864 	bl	80020cc <HAL_GetTick>
 8005004:	0002      	movs	r2, r0
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d904      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800500e:	2313      	movs	r3, #19
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	2203      	movs	r2, #3
 8005014:	701a      	strb	r2, [r3, #0]
        break;
 8005016:	e005      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005018:	4bac      	ldr	r3, [pc, #688]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4013      	ands	r3, r2
 8005022:	d0ed      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005024:	2313      	movs	r3, #19
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d154      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800502e:	4ba6      	ldr	r3, [pc, #664]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005030:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005032:	23c0      	movs	r3, #192	@ 0xc0
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4013      	ands	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	429a      	cmp	r2, r3
 8005048:	d014      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800504a:	4b9f      	ldr	r3, [pc, #636]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800504c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504e:	4aa0      	ldr	r2, [pc, #640]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005050:	4013      	ands	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005054:	4b9c      	ldr	r3, [pc, #624]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005056:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005058:	4b9b      	ldr	r3, [pc, #620]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800505a:	2180      	movs	r1, #128	@ 0x80
 800505c:	0249      	lsls	r1, r1, #9
 800505e:	430a      	orrs	r2, r1
 8005060:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005062:	4b99      	ldr	r3, [pc, #612]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005066:	4b98      	ldr	r3, [pc, #608]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005068:	499a      	ldr	r1, [pc, #616]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800506a:	400a      	ands	r2, r1
 800506c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800506e:	4b96      	ldr	r3, [pc, #600]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2201      	movs	r2, #1
 8005078:	4013      	ands	r3, r2
 800507a:	d016      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fd f826 	bl	80020cc <HAL_GetTick>
 8005080:	0003      	movs	r3, r0
 8005082:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005084:	e00c      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fd f821 	bl	80020cc <HAL_GetTick>
 800508a:	0002      	movs	r2, r0
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	4a91      	ldr	r2, [pc, #580]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d904      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005096:	2313      	movs	r3, #19
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	2203      	movs	r2, #3
 800509c:	701a      	strb	r2, [r3, #0]
            break;
 800509e:	e004      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a0:	4b89      	ldr	r3, [pc, #548]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	2202      	movs	r2, #2
 80050a6:	4013      	ands	r3, r2
 80050a8:	d0ed      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80050aa:	2313      	movs	r3, #19
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b4:	4b84      	ldr	r3, [pc, #528]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b8:	4a85      	ldr	r2, [pc, #532]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	0019      	movs	r1, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050c2:	4b81      	ldr	r3, [pc, #516]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050c4:	430a      	orrs	r2, r1
 80050c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050c8:	e00c      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ca:	2312      	movs	r3, #18
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	2213      	movs	r2, #19
 80050d0:	18ba      	adds	r2, r7, r2
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e005      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	2312      	movs	r3, #18
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	2213      	movs	r2, #19
 80050de:	18ba      	adds	r2, r7, r2
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e4:	2311      	movs	r3, #17
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b76      	ldr	r3, [pc, #472]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f2:	4b75      	ldr	r3, [pc, #468]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050f4:	4979      	ldr	r1, [pc, #484]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005104:	4b70      	ldr	r3, [pc, #448]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005108:	2203      	movs	r2, #3
 800510a:	4393      	bics	r3, r2
 800510c:	0019      	movs	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4b6d      	ldr	r3, [pc, #436]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005114:	430a      	orrs	r2, r1
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2202      	movs	r2, #2
 800511e:	4013      	ands	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005122:	4b69      	ldr	r3, [pc, #420]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005126:	220c      	movs	r2, #12
 8005128:	4393      	bics	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b65      	ldr	r3, [pc, #404]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005132:	430a      	orrs	r2, r1
 8005134:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	4013      	ands	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005140:	4b61      	ldr	r3, [pc, #388]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005144:	4a66      	ldr	r2, [pc, #408]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005146:	4013      	ands	r3, r2
 8005148:	0019      	movs	r1, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	4b5e      	ldr	r3, [pc, #376]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005150:	430a      	orrs	r2, r1
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2380      	movs	r3, #128	@ 0x80
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4013      	ands	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005160:	4b59      	ldr	r3, [pc, #356]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	4a5f      	ldr	r2, [pc, #380]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005166:	4013      	ands	r3, r2
 8005168:	0019      	movs	r1, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	4b56      	ldr	r3, [pc, #344]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005170:	430a      	orrs	r2, r1
 8005172:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	2380      	movs	r3, #128	@ 0x80
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4013      	ands	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005180:	4b51      	ldr	r3, [pc, #324]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005184:	4a58      	ldr	r2, [pc, #352]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005186:	4013      	ands	r3, r2
 8005188:	0019      	movs	r1, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	4b4e      	ldr	r3, [pc, #312]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005190:	430a      	orrs	r2, r1
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2220      	movs	r2, #32
 800519a:	4013      	ands	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519e:	4b4a      	ldr	r3, [pc, #296]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	4a52      	ldr	r2, [pc, #328]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	4b46      	ldr	r3, [pc, #280]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051ae:	430a      	orrs	r2, r1
 80051b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	01db      	lsls	r3, r3, #7
 80051ba:	4013      	ands	r3, r2
 80051bc:	d015      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051be:	4b42      	ldr	r3, [pc, #264]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	0899      	lsrs	r1, r3, #2
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	4b3f      	ldr	r3, [pc, #252]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051cc:	430a      	orrs	r2, r1
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	05db      	lsls	r3, r3, #23
 80051d8:	429a      	cmp	r2, r3
 80051da:	d106      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80051dc:	4b3a      	ldr	r3, [pc, #232]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	4b39      	ldr	r3, [pc, #228]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051e2:	2180      	movs	r1, #128	@ 0x80
 80051e4:	0249      	lsls	r1, r1, #9
 80051e6:	430a      	orrs	r2, r1
 80051e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	2380      	movs	r3, #128	@ 0x80
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	4013      	ands	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051f6:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	2240      	movs	r2, #64	@ 0x40
 80051fc:	4393      	bics	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005204:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005206:	430a      	orrs	r2, r1
 8005208:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	039b      	lsls	r3, r3, #14
 8005212:	4013      	ands	r3, r2
 8005214:	d016      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005216:	4b2c      	ldr	r3, [pc, #176]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	4a35      	ldr	r2, [pc, #212]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005224:	4b28      	ldr	r3, [pc, #160]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005226:	430a      	orrs	r2, r1
 8005228:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800522e:	2380      	movs	r3, #128	@ 0x80
 8005230:	03db      	lsls	r3, r3, #15
 8005232:	429a      	cmp	r2, r3
 8005234:	d106      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005236:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	4b23      	ldr	r3, [pc, #140]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800523c:	2180      	movs	r1, #128	@ 0x80
 800523e:	0449      	lsls	r1, r1, #17
 8005240:	430a      	orrs	r2, r1
 8005242:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	03db      	lsls	r3, r3, #15
 800524c:	4013      	ands	r3, r2
 800524e:	d016      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	4a27      	ldr	r2, [pc, #156]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005256:	4013      	ands	r3, r2
 8005258:	0019      	movs	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525e:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005260:	430a      	orrs	r2, r1
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005268:	2380      	movs	r3, #128	@ 0x80
 800526a:	045b      	lsls	r3, r3, #17
 800526c:	429a      	cmp	r2, r3
 800526e:	d106      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005270:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005276:	2180      	movs	r1, #128	@ 0x80
 8005278:	0449      	lsls	r1, r1, #17
 800527a:	430a      	orrs	r2, r1
 800527c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4013      	ands	r3, r2
 8005288:	d016      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800528a:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528e:	4a1a      	ldr	r2, [pc, #104]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005290:	4013      	ands	r3, r2
 8005292:	0019      	movs	r1, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800529a:	430a      	orrs	r2, r1
 800529c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	01db      	lsls	r3, r3, #7
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d106      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052aa:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052b0:	2180      	movs	r1, #128	@ 0x80
 80052b2:	0249      	lsls	r1, r1, #9
 80052b4:	430a      	orrs	r2, r1
 80052b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80052b8:	2312      	movs	r3, #18
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	781b      	ldrb	r3, [r3, #0]
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b006      	add	sp, #24
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40007000 	.word	0x40007000
 80052d0:	fffffcff 	.word	0xfffffcff
 80052d4:	fffeffff 	.word	0xfffeffff
 80052d8:	00001388 	.word	0x00001388
 80052dc:	efffffff 	.word	0xefffffff
 80052e0:	fffff3ff 	.word	0xfffff3ff
 80052e4:	fff3ffff 	.word	0xfff3ffff
 80052e8:	ffcfffff 	.word	0xffcfffff
 80052ec:	ffffcfff 	.word	0xffffcfff
 80052f0:	ffbfffff 	.word	0xffbfffff
 80052f4:	feffffff 	.word	0xfeffffff
 80052f8:	ffff3fff 	.word	0xffff3fff

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e04a      	b.n	80053a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	223d      	movs	r2, #61	@ 0x3d
 8005312:	5c9b      	ldrb	r3, [r3, r2]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223c      	movs	r2, #60	@ 0x3c
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0018      	movs	r0, r3
 8005326:	f7fc fbb5 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	223d      	movs	r2, #61	@ 0x3d
 800532e:	2102      	movs	r1, #2
 8005330:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	0019      	movs	r1, r3
 800533c:	0010      	movs	r0, r2
 800533e:	f000 fe6f 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2248      	movs	r2, #72	@ 0x48
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	223e      	movs	r2, #62	@ 0x3e
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	223f      	movs	r2, #63	@ 0x3f
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2240      	movs	r2, #64	@ 0x40
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2241      	movs	r2, #65	@ 0x41
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2242      	movs	r2, #66	@ 0x42
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2243      	movs	r2, #67	@ 0x43
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2244      	movs	r2, #68	@ 0x44
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2245      	movs	r2, #69	@ 0x45
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2246      	movs	r2, #70	@ 0x46
 800538e:	2101      	movs	r1, #1
 8005390:	5499      	strb	r1, [r3, r2]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2247      	movs	r2, #71	@ 0x47
 8005396:	2101      	movs	r1, #1
 8005398:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	223d      	movs	r2, #61	@ 0x3d
 800539e:	2101      	movs	r1, #1
 80053a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	223d      	movs	r2, #61	@ 0x3d
 80053b8:	5c9b      	ldrb	r3, [r3, r2]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d001      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e042      	b.n	800544a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	223d      	movs	r2, #61	@ 0x3d
 80053c8:	2102      	movs	r1, #2
 80053ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2101      	movs	r1, #1
 80053d8:	430a      	orrs	r2, r1
 80053da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005454 <HAL_TIM_Base_Start_IT+0xa8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00f      	beq.n	8005406 <HAL_TIM_Base_Start_IT+0x5a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	05db      	lsls	r3, r3, #23
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d009      	beq.n	8005406 <HAL_TIM_Base_Start_IT+0x5a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <HAL_TIM_Base_Start_IT+0xac>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIM_Base_Start_IT+0x5a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	@ (800545c <HAL_TIM_Base_Start_IT+0xb0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d116      	bne.n	8005434 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a14      	ldr	r2, [pc, #80]	@ (8005460 <HAL_TIM_Base_Start_IT+0xb4>)
 800540e:	4013      	ands	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b06      	cmp	r3, #6
 8005416:	d016      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x9a>
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	025b      	lsls	r3, r3, #9
 800541e:	429a      	cmp	r2, r3
 8005420:	d011      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	e008      	b.n	8005446 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e000      	b.n	8005448 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40014000 	.word	0x40014000
 8005460:	00010007 	.word	0x00010007

08005464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e04a      	b.n	800550c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	223d      	movs	r2, #61	@ 0x3d
 800547a:	5c9b      	ldrb	r3, [r3, r2]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d107      	bne.n	8005492 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	223c      	movs	r2, #60	@ 0x3c
 8005486:	2100      	movs	r1, #0
 8005488:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0018      	movs	r0, r3
 800548e:	f7fc fa43 	bl	8001918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223d      	movs	r2, #61	@ 0x3d
 8005496:	2102      	movs	r1, #2
 8005498:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	0019      	movs	r1, r3
 80054a4:	0010      	movs	r0, r2
 80054a6:	f000 fdbb 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2248      	movs	r2, #72	@ 0x48
 80054ae:	2101      	movs	r1, #1
 80054b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	223e      	movs	r2, #62	@ 0x3e
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223f      	movs	r2, #63	@ 0x3f
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2240      	movs	r2, #64	@ 0x40
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2241      	movs	r2, #65	@ 0x41
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2242      	movs	r2, #66	@ 0x42
 80054d6:	2101      	movs	r1, #1
 80054d8:	5499      	strb	r1, [r3, r2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2243      	movs	r2, #67	@ 0x43
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2244      	movs	r2, #68	@ 0x44
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2245      	movs	r2, #69	@ 0x45
 80054ee:	2101      	movs	r1, #1
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2246      	movs	r2, #70	@ 0x46
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2247      	movs	r2, #71	@ 0x47
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223d      	movs	r2, #61	@ 0x3d
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b002      	add	sp, #8
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <HAL_TIM_PWM_Start+0x22>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	223e      	movs	r2, #62	@ 0x3e
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	1e5a      	subs	r2, r3, #1
 8005530:	4193      	sbcs	r3, r2
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e037      	b.n	80055a6 <HAL_TIM_PWM_Start+0x92>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b04      	cmp	r3, #4
 800553a:	d108      	bne.n	800554e <HAL_TIM_PWM_Start+0x3a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	223f      	movs	r2, #63	@ 0x3f
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	1e5a      	subs	r2, r3, #1
 8005548:	4193      	sbcs	r3, r2
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e02b      	b.n	80055a6 <HAL_TIM_PWM_Start+0x92>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d108      	bne.n	8005566 <HAL_TIM_PWM_Start+0x52>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2240      	movs	r2, #64	@ 0x40
 8005558:	5c9b      	ldrb	r3, [r3, r2]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	1e5a      	subs	r2, r3, #1
 8005560:	4193      	sbcs	r3, r2
 8005562:	b2db      	uxtb	r3, r3
 8005564:	e01f      	b.n	80055a6 <HAL_TIM_PWM_Start+0x92>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d108      	bne.n	800557e <HAL_TIM_PWM_Start+0x6a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2241      	movs	r2, #65	@ 0x41
 8005570:	5c9b      	ldrb	r3, [r3, r2]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	1e5a      	subs	r2, r3, #1
 8005578:	4193      	sbcs	r3, r2
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e013      	b.n	80055a6 <HAL_TIM_PWM_Start+0x92>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b10      	cmp	r3, #16
 8005582:	d108      	bne.n	8005596 <HAL_TIM_PWM_Start+0x82>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2242      	movs	r2, #66	@ 0x42
 8005588:	5c9b      	ldrb	r3, [r3, r2]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	1e5a      	subs	r2, r3, #1
 8005590:	4193      	sbcs	r3, r2
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e007      	b.n	80055a6 <HAL_TIM_PWM_Start+0x92>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2243      	movs	r2, #67	@ 0x43
 800559a:	5c9b      	ldrb	r3, [r3, r2]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	4193      	sbcs	r3, r2
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e08b      	b.n	80056c6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0xaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	223e      	movs	r2, #62	@ 0x3e
 80055b8:	2102      	movs	r1, #2
 80055ba:	5499      	strb	r1, [r3, r2]
 80055bc:	e023      	b.n	8005606 <HAL_TIM_PWM_Start+0xf2>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0xba>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	223f      	movs	r2, #63	@ 0x3f
 80055c8:	2102      	movs	r1, #2
 80055ca:	5499      	strb	r1, [r3, r2]
 80055cc:	e01b      	b.n	8005606 <HAL_TIM_PWM_Start+0xf2>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d104      	bne.n	80055de <HAL_TIM_PWM_Start+0xca>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2240      	movs	r2, #64	@ 0x40
 80055d8:	2102      	movs	r1, #2
 80055da:	5499      	strb	r1, [r3, r2]
 80055dc:	e013      	b.n	8005606 <HAL_TIM_PWM_Start+0xf2>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_PWM_Start+0xda>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2241      	movs	r2, #65	@ 0x41
 80055e8:	2102      	movs	r1, #2
 80055ea:	5499      	strb	r1, [r3, r2]
 80055ec:	e00b      	b.n	8005606 <HAL_TIM_PWM_Start+0xf2>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0xea>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2242      	movs	r2, #66	@ 0x42
 80055f8:	2102      	movs	r1, #2
 80055fa:	5499      	strb	r1, [r3, r2]
 80055fc:	e003      	b.n	8005606 <HAL_TIM_PWM_Start+0xf2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2243      	movs	r2, #67	@ 0x43
 8005602:	2102      	movs	r1, #2
 8005604:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	0018      	movs	r0, r3
 8005610:	f001 fa92 	bl	8006b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2d      	ldr	r2, [pc, #180]	@ (80056d0 <HAL_TIM_PWM_Start+0x1bc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_TIM_PWM_Start+0x128>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <HAL_TIM_PWM_Start+0x1c0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_TIM_PWM_Start+0x128>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2a      	ldr	r2, [pc, #168]	@ (80056d8 <HAL_TIM_PWM_Start+0x1c4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_PWM_Start+0x128>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a29      	ldr	r2, [pc, #164]	@ (80056dc <HAL_TIM_PWM_Start+0x1c8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Start+0x12c>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_TIM_PWM_Start+0x12e>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2180      	movs	r1, #128	@ 0x80
 8005652:	0209      	lsls	r1, r1, #8
 8005654:	430a      	orrs	r2, r1
 8005656:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <HAL_TIM_PWM_Start+0x1bc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <HAL_TIM_PWM_Start+0x16e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	2380      	movs	r3, #128	@ 0x80
 8005668:	05db      	lsls	r3, r3, #23
 800566a:	429a      	cmp	r2, r3
 800566c:	d009      	beq.n	8005682 <HAL_TIM_PWM_Start+0x16e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <HAL_TIM_PWM_Start+0x1cc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_TIM_PWM_Start+0x16e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <HAL_TIM_PWM_Start+0x1c0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d116      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a16      	ldr	r2, [pc, #88]	@ (80056e4 <HAL_TIM_PWM_Start+0x1d0>)
 800568a:	4013      	ands	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b06      	cmp	r3, #6
 8005692:	d016      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1ae>
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	025b      	lsls	r3, r3, #9
 800569a:	429a      	cmp	r2, r3
 800569c:	d011      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2101      	movs	r1, #1
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	e008      	b.n	80056c2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2101      	movs	r1, #1
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e000      	b.n	80056c4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b004      	add	sp, #16
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	40000400 	.word	0x40000400
 80056e4:	00010007 	.word	0x00010007

080056e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e04a      	b.n	8005790 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	223d      	movs	r2, #61	@ 0x3d
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	223c      	movs	r2, #60	@ 0x3c
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	0018      	movs	r0, r3
 8005712:	f7fc f975 	bl	8001a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	223d      	movs	r2, #61	@ 0x3d
 800571a:	2102      	movs	r1, #2
 800571c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	0019      	movs	r1, r3
 8005728:	0010      	movs	r0, r2
 800572a:	f000 fc79 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2248      	movs	r2, #72	@ 0x48
 8005732:	2101      	movs	r1, #1
 8005734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	223e      	movs	r2, #62	@ 0x3e
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	223f      	movs	r2, #63	@ 0x3f
 8005742:	2101      	movs	r1, #1
 8005744:	5499      	strb	r1, [r3, r2]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2240      	movs	r2, #64	@ 0x40
 800574a:	2101      	movs	r1, #1
 800574c:	5499      	strb	r1, [r3, r2]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2241      	movs	r2, #65	@ 0x41
 8005752:	2101      	movs	r1, #1
 8005754:	5499      	strb	r1, [r3, r2]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2242      	movs	r2, #66	@ 0x42
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2243      	movs	r2, #67	@ 0x43
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2244      	movs	r2, #68	@ 0x44
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2245      	movs	r2, #69	@ 0x45
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2246      	movs	r2, #70	@ 0x46
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2247      	movs	r2, #71	@ 0x47
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	223d      	movs	r2, #61	@ 0x3d
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	0018      	movs	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2202      	movs	r2, #2
 80057b4:	4013      	ands	r3, r2
 80057b6:	d021      	beq.n	80057fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2202      	movs	r2, #2
 80057bc:	4013      	ands	r3, r2
 80057be:	d01d      	beq.n	80057fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4252      	negs	r2, r2
 80057c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2203      	movs	r2, #3
 80057d8:	4013      	ands	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 fc06 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 80057e4:	e007      	b.n	80057f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f000 fbf9 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 fc05 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2204      	movs	r2, #4
 8005800:	4013      	ands	r3, r2
 8005802:	d022      	beq.n	800584a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2204      	movs	r2, #4
 8005808:	4013      	ands	r3, r2
 800580a:	d01e      	beq.n	800584a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2205      	movs	r2, #5
 8005812:	4252      	negs	r2, r2
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	23c0      	movs	r3, #192	@ 0xc0
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4013      	ands	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	0018      	movs	r0, r3
 800582e:	f000 fbdf 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 8005832:	e007      	b.n	8005844 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0018      	movs	r0, r3
 8005838:	f000 fbd2 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fbde 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2208      	movs	r2, #8
 800584e:	4013      	ands	r3, r2
 8005850:	d021      	beq.n	8005896 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2208      	movs	r2, #8
 8005856:	4013      	ands	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2209      	movs	r2, #9
 8005860:	4252      	negs	r2, r2
 8005862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2204      	movs	r2, #4
 8005868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	2203      	movs	r2, #3
 8005872:	4013      	ands	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0018      	movs	r0, r3
 800587a:	f000 fbb9 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 800587e:	e007      	b.n	8005890 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 fbac 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fbb8 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2210      	movs	r2, #16
 800589a:	4013      	ands	r3, r2
 800589c:	d022      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2210      	movs	r2, #16
 80058a2:	4013      	ands	r3, r2
 80058a4:	d01e      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2211      	movs	r2, #17
 80058ac:	4252      	negs	r2, r2
 80058ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2208      	movs	r2, #8
 80058b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	23c0      	movs	r3, #192	@ 0xc0
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4013      	ands	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fb92 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e007      	b.n	80058de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 fb85 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 fb91 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2201      	movs	r2, #1
 80058e8:	4013      	ands	r3, r2
 80058ea:	d00c      	beq.n	8005906 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	4013      	ands	r3, r2
 80058f2:	d008      	beq.n	8005906 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2202      	movs	r2, #2
 80058fa:	4252      	negs	r2, r2
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 fb65 	bl	8005fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2280      	movs	r2, #128	@ 0x80
 800590a:	4013      	ands	r3, r2
 800590c:	d104      	bne.n	8005918 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	019b      	lsls	r3, r3, #6
 8005914:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005916:	d00b      	beq.n	8005930 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2280      	movs	r2, #128	@ 0x80
 800591c:	4013      	ands	r3, r2
 800591e:	d007      	beq.n	8005930 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1e      	ldr	r2, [pc, #120]	@ (80059a0 <HAL_TIM_IRQHandler+0x208>)
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f001 fa3a 	bl	8006da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	2380      	movs	r3, #128	@ 0x80
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4013      	ands	r3, r2
 8005938:	d00b      	beq.n	8005952 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2280      	movs	r2, #128	@ 0x80
 800593e:	4013      	ands	r3, r2
 8005940:	d007      	beq.n	8005952 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a17      	ldr	r2, [pc, #92]	@ (80059a4 <HAL_TIM_IRQHandler+0x20c>)
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	0018      	movs	r0, r3
 800594e:	f001 fa31 	bl	8006db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2240      	movs	r2, #64	@ 0x40
 8005956:	4013      	ands	r3, r2
 8005958:	d00c      	beq.n	8005974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2240      	movs	r2, #64	@ 0x40
 800595e:	4013      	ands	r3, r2
 8005960:	d008      	beq.n	8005974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2241      	movs	r2, #65	@ 0x41
 8005968:	4252      	negs	r2, r2
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0018      	movs	r0, r3
 8005970:	f000 fb4e 	bl	8006010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2220      	movs	r2, #32
 8005978:	4013      	ands	r3, r2
 800597a:	d00c      	beq.n	8005996 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	4013      	ands	r3, r2
 8005982:	d008      	beq.n	8005996 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2221      	movs	r2, #33	@ 0x21
 800598a:	4252      	negs	r2, r2
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0018      	movs	r0, r3
 8005992:	f001 f9ff 	bl	8006d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005996:	46c0      	nop			@ (mov r8, r8)
 8005998:	46bd      	mov	sp, r7
 800599a:	b004      	add	sp, #16
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	ffffdf7f 	.word	0xffffdf7f
 80059a4:	fffffeff 	.word	0xfffffeff

080059a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2317      	movs	r3, #23
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	223c      	movs	r2, #60	@ 0x3c
 80059c0:	5c9b      	ldrb	r3, [r3, r2]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_IC_ConfigChannel+0x22>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e08c      	b.n	8005ae4 <HAL_TIM_IC_ConfigChannel+0x13c>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	223c      	movs	r2, #60	@ 0x3c
 80059ce:	2101      	movs	r1, #1
 80059d0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059e8:	f000 ff02 	bl	80067f0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	210c      	movs	r1, #12
 80059f8:	438a      	bics	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6999      	ldr	r1, [r3, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	619a      	str	r2, [r3, #24]
 8005a0e:	e062      	b.n	8005ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d11c      	bne.n	8005a50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a26:	f000 ff6d 	bl	8006904 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	492d      	ldr	r1, [pc, #180]	@ (8005aec <HAL_TIM_IC_ConfigChannel+0x144>)
 8005a36:	400a      	ands	r2, r1
 8005a38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6999      	ldr	r1, [r3, #24]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	021a      	lsls	r2, r3, #8
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	619a      	str	r2, [r3, #24]
 8005a4e:	e042      	b.n	8005ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d11b      	bne.n	8005a8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a66:	f000 ffc1 	bl	80069ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	210c      	movs	r1, #12
 8005a76:	438a      	bics	r2, r1
 8005a78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69d9      	ldr	r1, [r3, #28]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	61da      	str	r2, [r3, #28]
 8005a8c:	e023      	b.n	8005ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d11c      	bne.n	8005ace <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005aa4:	f000 ffe2 	bl	8006a6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	490e      	ldr	r1, [pc, #56]	@ (8005aec <HAL_TIM_IC_ConfigChannel+0x144>)
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69d9      	ldr	r1, [r3, #28]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	61da      	str	r2, [r3, #28]
 8005acc:	e003      	b.n	8005ad6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005ace:	2317      	movs	r3, #23
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	223c      	movs	r2, #60	@ 0x3c
 8005ada:	2100      	movs	r1, #0
 8005adc:	5499      	strb	r1, [r3, r2]

  return status;
 8005ade:	2317      	movs	r3, #23
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	781b      	ldrb	r3, [r3, #0]
}
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b006      	add	sp, #24
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fffff3ff 	.word	0xfffff3ff

08005af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005afc:	2317      	movs	r3, #23
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	223c      	movs	r2, #60	@ 0x3c
 8005b08:	5c9b      	ldrb	r3, [r3, r2]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e0e5      	b.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	223c      	movs	r2, #60	@ 0x3c
 8005b16:	2101      	movs	r1, #1
 8005b18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b14      	cmp	r3, #20
 8005b1e:	d900      	bls.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005b20:	e0d1      	b.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	009a      	lsls	r2, r3, #2
 8005b26:	4b70      	ldr	r3, [pc, #448]	@ (8005ce8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005b28:	18d3      	adds	r3, r2, r3
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 fb00 	bl	800613c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2108      	movs	r1, #8
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2104      	movs	r1, #4
 8005b58:	438a      	bics	r2, r1
 8005b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	619a      	str	r2, [r3, #24]
      break;
 8005b6e:	e0af      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	0011      	movs	r1, r2
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f000 fb69 	bl	8006250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2180      	movs	r1, #128	@ 0x80
 8005b8a:	0109      	lsls	r1, r1, #4
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4954      	ldr	r1, [pc, #336]	@ (8005cec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b9c:	400a      	ands	r2, r1
 8005b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6999      	ldr	r1, [r3, #24]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	619a      	str	r2, [r3, #24]
      break;
 8005bb4:	e08c      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0011      	movs	r1, r2
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fbca 	bl	8006358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2108      	movs	r1, #8
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2104      	movs	r1, #4
 8005be0:	438a      	bics	r2, r1
 8005be2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69d9      	ldr	r1, [r3, #28]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	61da      	str	r2, [r3, #28]
      break;
 8005bf6:	e06b      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	0011      	movs	r1, r2
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 fc31 	bl	8006468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2180      	movs	r1, #128	@ 0x80
 8005c12:	0109      	lsls	r1, r1, #4
 8005c14:	430a      	orrs	r2, r1
 8005c16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4932      	ldr	r1, [pc, #200]	@ (8005cec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69d9      	ldr	r1, [r3, #28]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	021a      	lsls	r2, r3, #8
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	61da      	str	r2, [r3, #28]
      break;
 8005c3c:	e048      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	0011      	movs	r1, r2
 8005c46:	0018      	movs	r0, r3
 8005c48:	f000 fc78 	bl	800653c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2108      	movs	r1, #8
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2104      	movs	r1, #4
 8005c68:	438a      	bics	r2, r1
 8005c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c7e:	e027      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	0011      	movs	r1, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fcb7 	bl	80065fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2180      	movs	r1, #128	@ 0x80
 8005c9a:	0109      	lsls	r1, r1, #4
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4910      	ldr	r1, [pc, #64]	@ (8005cec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	021a      	lsls	r2, r3, #8
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cc4:	e004      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005cc6:	2317      	movs	r3, #23
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	2201      	movs	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
      break;
 8005cce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	223c      	movs	r2, #60	@ 0x3c
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

  return status;
 8005cd8:	2317      	movs	r3, #23
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	781b      	ldrb	r3, [r3, #0]
}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b006      	add	sp, #24
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	08009b60 	.word	0x08009b60
 8005cec:	fffffbff 	.word	0xfffffbff

08005cf0 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfc:	2317      	movs	r3, #23
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	223c      	movs	r2, #60	@ 0x3c
 8005d08:	5c9b      	ldrb	r3, [r3, r2]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_ConfigOCrefClear+0x22>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e10e      	b.n	8005f30 <HAL_TIM_ConfigOCrefClear+0x240>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	223c      	movs	r2, #60	@ 0x3c
 8005d16:	2101      	movs	r1, #1
 8005d18:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	223d      	movs	r2, #61	@ 0x3d
 8005d1e:	2102      	movs	r1, #2
 8005d20:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2280      	movs	r2, #128	@ 0x80
 8005d28:	0592      	lsls	r2, r2, #22
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02f      	beq.n	8005d8e <HAL_TIM_ConfigOCrefClear+0x9e>
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	0592      	lsls	r2, r2, #22
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d854      	bhi.n	8005de0 <HAL_TIM_ConfigOCrefClear+0xf0>
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d914      	bls.n	8005d64 <HAL_TIM_ConfigOCrefClear+0x74>
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	0552      	lsls	r2, r2, #21
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d14e      	bne.n	8005de0 <HAL_TIM_ConfigOCrefClear+0xf0>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	497a      	ldr	r1, [pc, #488]	@ (8005f38 <HAL_TIM_ConfigOCrefClear+0x248>)
 8005d4e:	400a      	ands	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	438a      	bics	r2, r1
 8005d60:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d62:	e042      	b.n	8005dea <HAL_TIM_ConfigOCrefClear+0xfa>
#if defined(COMP3)
    case TIM_CLEARINPUTSOURCE_COMP3:
#endif /* COMP3 */
    {
      /* Clear the OCREF clear selection bit */
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2108      	movs	r1, #8
 8005d70:	438a      	bics	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]

      /* OCREF_CLR_INT is connected to COMPx output */
      MODIFY_REG(htim->Instance->OR1, TIMx_OR1_OCREF_CLR, sClearInputConfig->ClearInputSource);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d8c:	e02d      	b.n	8005dea <HAL_TIM_ConfigOCrefClear+0xfa>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_TIM_ConfigOCrefClear+0xba>
      {
        htim->State = HAL_TIM_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	223d      	movs	r2, #61	@ 0x3d
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(htim);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	223c      	movs	r2, #60	@ 0x3c
 8005da2:	2100      	movs	r1, #0
 8005da4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e0c2      	b.n	8005f30 <HAL_TIM_ConfigOCrefClear+0x240>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005dba:	f000 fe9d 	bl	8006af8 <TIM_ETR_SetConfig>

      /* Set the OCREF clear selection bit */
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2108      	movs	r1, #8
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2101      	movs	r1, #1
 8005dda:	438a      	bics	r2, r1
 8005ddc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005dde:	e004      	b.n	8005dea <HAL_TIM_ConfigOCrefClear+0xfa>
    }

    default:
      status = HAL_ERROR;
 8005de0:	2317      	movs	r3, #23
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
      break;
 8005de8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005dea:	2317      	movs	r3, #23
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d000      	beq.n	8005df6 <HAL_TIM_ConfigOCrefClear+0x106>
 8005df4:	e091      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
  {
    switch (Channel)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b14      	cmp	r3, #20
 8005dfa:	d900      	bls.n	8005dfe <HAL_TIM_ConfigOCrefClear+0x10e>
 8005dfc:	e08c      	b.n	8005f18 <HAL_TIM_ConfigOCrefClear+0x228>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	009a      	lsls	r2, r3, #2
 8005e02:	4b4e      	ldr	r3, [pc, #312]	@ (8005f3c <HAL_TIM_ConfigOCrefClear+0x24c>)
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	469f      	mov	pc, r3
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <HAL_TIM_ConfigOCrefClear+0x134>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2180      	movs	r1, #128	@ 0x80
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 8005e22:	e07a      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2180      	movs	r1, #128	@ 0x80
 8005e30:	438a      	bics	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
        break;
 8005e34:	e071      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_TIM_ConfigOCrefClear+0x162>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2180      	movs	r1, #128	@ 0x80
 8005e4a:	0209      	lsls	r1, r1, #8
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8005e50:	e063      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4938      	ldr	r1, [pc, #224]	@ (8005f40 <HAL_TIM_ConfigOCrefClear+0x250>)
 8005e5e:	400a      	ands	r2, r1
 8005e60:	619a      	str	r2, [r3, #24]
        break;
 8005e62:	e05a      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_TIM_ConfigOCrefClear+0x18e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2180      	movs	r1, #128	@ 0x80
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8005e7c:	e04d      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2180      	movs	r1, #128	@ 0x80
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	61da      	str	r2, [r3, #28]
        break;
 8005e8e:	e044      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_TIM_ConfigOCrefClear+0x1bc>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2180      	movs	r1, #128	@ 0x80
 8005ea4:	0209      	lsls	r1, r1, #8
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 8005eaa:	e036      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69da      	ldr	r2, [r3, #28]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4922      	ldr	r1, [pc, #136]	@ (8005f40 <HAL_TIM_ConfigOCrefClear+0x250>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
        break;
 8005ebc:	e02d      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_5:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d008      	beq.n	8005ed8 <HAL_TIM_ConfigOCrefClear+0x1e8>
        {
          /* Enable the OCREF clear feature for Channel 5 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2180      	movs	r1, #128	@ 0x80
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 5 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
        }
        break;
 8005ed6:	e020      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2180      	movs	r1, #128	@ 0x80
 8005ee4:	438a      	bics	r2, r1
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005ee8:	e017      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_6:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <HAL_TIM_ConfigOCrefClear+0x216>
        {
          /* Enable the OCREF clear feature for Channel 6 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2180      	movs	r1, #128	@ 0x80
 8005efe:	0209      	lsls	r1, r1, #8
 8005f00:	430a      	orrs	r2, r1
 8005f02:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 6 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
        }
        break;
 8005f04:	e009      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	490b      	ldr	r1, [pc, #44]	@ (8005f40 <HAL_TIM_ConfigOCrefClear+0x250>)
 8005f12:	400a      	ands	r2, r1
 8005f14:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005f16:	e000      	b.n	8005f1a <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      default:
        break;
 8005f18:	46c0      	nop			@ (mov r8, r8)
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	223d      	movs	r2, #61	@ 0x3d
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	223c      	movs	r2, #60	@ 0x3c
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

  return status;
 8005f2a:	2317      	movs	r3, #23
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	781b      	ldrb	r3, [r3, #0]
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b006      	add	sp, #24
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	ffff00f7 	.word	0xffff00f7
 8005f3c:	08009bb4 	.word	0x08009bb4
 8005f40:	ffff7fff 	.word	0xffff7fff

08005f44 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	223c      	movs	r2, #60	@ 0x3c
 8005f52:	5c9b      	ldrb	r3, [r3, r2]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e032      	b.n	8005fc2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	223c      	movs	r2, #60	@ 0x3c
 8005f60:	2101      	movs	r1, #1
 8005f62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	223d      	movs	r2, #61	@ 0x3d
 8005f68:	2102      	movs	r1, #2
 8005f6a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0011      	movs	r1, r2
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 fba6 	bl	80066c4 <TIM_SlaveTimer_SetConfig>
 8005f78:	1e03      	subs	r3, r0, #0
 8005f7a:	d009      	beq.n	8005f90 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	223d      	movs	r2, #61	@ 0x3d
 8005f80:	2101      	movs	r1, #1
 8005f82:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	223c      	movs	r2, #60	@ 0x3c
 8005f88:	2100      	movs	r1, #0
 8005f8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e018      	b.n	8005fc2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2140      	movs	r1, #64	@ 0x40
 8005f9c:	438a      	bics	r2, r1
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4908      	ldr	r1, [pc, #32]	@ (8005fcc <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005fac:	400a      	ands	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	223d      	movs	r2, #61	@ 0x3d
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	223c      	movs	r2, #60	@ 0x3c
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	ffffbfff 	.word	0xffffbfff

08005fd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fd8:	46c0      	nop			@ (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe8:	46c0      	nop			@ (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b002      	add	sp, #8
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff8:	46c0      	nop			@ (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b002      	add	sp, #8
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006008:	46c0      	nop			@ (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}

08006020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a3b      	ldr	r2, [pc, #236]	@ (8006120 <TIM_Base_SetConfig+0x100>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d008      	beq.n	800604a <TIM_Base_SetConfig+0x2a>
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	2380      	movs	r3, #128	@ 0x80
 800603c:	05db      	lsls	r3, r3, #23
 800603e:	429a      	cmp	r2, r3
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x2a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a37      	ldr	r2, [pc, #220]	@ (8006124 <TIM_Base_SetConfig+0x104>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2270      	movs	r2, #112	@ 0x70
 800604e:	4393      	bics	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a30      	ldr	r2, [pc, #192]	@ (8006120 <TIM_Base_SetConfig+0x100>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <TIM_Base_SetConfig+0x76>
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	2380      	movs	r3, #128	@ 0x80
 8006068:	05db      	lsls	r3, r3, #23
 800606a:	429a      	cmp	r2, r3
 800606c:	d013      	beq.n	8006096 <TIM_Base_SetConfig+0x76>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2c      	ldr	r2, [pc, #176]	@ (8006124 <TIM_Base_SetConfig+0x104>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00f      	beq.n	8006096 <TIM_Base_SetConfig+0x76>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2b      	ldr	r2, [pc, #172]	@ (8006128 <TIM_Base_SetConfig+0x108>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_Base_SetConfig+0x76>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2a      	ldr	r2, [pc, #168]	@ (800612c <TIM_Base_SetConfig+0x10c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <TIM_Base_SetConfig+0x76>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a29      	ldr	r2, [pc, #164]	@ (8006130 <TIM_Base_SetConfig+0x110>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_Base_SetConfig+0x76>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a28      	ldr	r2, [pc, #160]	@ (8006134 <TIM_Base_SetConfig+0x114>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d108      	bne.n	80060a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a27      	ldr	r2, [pc, #156]	@ (8006138 <TIM_Base_SetConfig+0x118>)
 800609a:	4013      	ands	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2280      	movs	r2, #128	@ 0x80
 80060ac:	4393      	bics	r3, r2
 80060ae:	001a      	movs	r2, r3
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <TIM_Base_SetConfig+0x100>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0xce>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a14      	ldr	r2, [pc, #80]	@ (800612c <TIM_Base_SetConfig+0x10c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0xce>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a13      	ldr	r2, [pc, #76]	@ (8006130 <TIM_Base_SetConfig+0x110>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0xce>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a12      	ldr	r2, [pc, #72]	@ (8006134 <TIM_Base_SetConfig+0x114>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d103      	bne.n	80060f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2201      	movs	r2, #1
 8006102:	4013      	ands	r3, r2
 8006104:	2b01      	cmp	r3, #1
 8006106:	d106      	bne.n	8006116 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2201      	movs	r2, #1
 800610e:	4393      	bics	r3, r2
 8006110:	001a      	movs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]
  }
}
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	b004      	add	sp, #16
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40000400 	.word	0x40000400
 8006128:	40002000 	.word	0x40002000
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800
 8006138:	fffffcff 	.word	0xfffffcff

0800613c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	2201      	movs	r2, #1
 8006152:	4393      	bics	r3, r2
 8006154:	001a      	movs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a32      	ldr	r2, [pc, #200]	@ (8006234 <TIM_OC1_SetConfig+0xf8>)
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2203      	movs	r2, #3
 8006172:	4393      	bics	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2202      	movs	r2, #2
 8006184:	4393      	bics	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a28      	ldr	r2, [pc, #160]	@ (8006238 <TIM_OC1_SetConfig+0xfc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00b      	beq.n	80061b2 <TIM_OC1_SetConfig+0x76>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a27      	ldr	r2, [pc, #156]	@ (800623c <TIM_OC1_SetConfig+0x100>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <TIM_OC1_SetConfig+0x76>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a26      	ldr	r2, [pc, #152]	@ (8006240 <TIM_OC1_SetConfig+0x104>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_OC1_SetConfig+0x76>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a25      	ldr	r2, [pc, #148]	@ (8006244 <TIM_OC1_SetConfig+0x108>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10c      	bne.n	80061cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2208      	movs	r2, #8
 80061b6:	4393      	bics	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2204      	movs	r2, #4
 80061c8:	4393      	bics	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006238 <TIM_OC1_SetConfig+0xfc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_OC1_SetConfig+0xb0>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a19      	ldr	r2, [pc, #100]	@ (800623c <TIM_OC1_SetConfig+0x100>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_OC1_SetConfig+0xb0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a18      	ldr	r2, [pc, #96]	@ (8006240 <TIM_OC1_SetConfig+0x104>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC1_SetConfig+0xb0>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <TIM_OC1_SetConfig+0x108>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d111      	bne.n	8006210 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4a16      	ldr	r2, [pc, #88]	@ (8006248 <TIM_OC1_SetConfig+0x10c>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4a15      	ldr	r2, [pc, #84]	@ (800624c <TIM_OC1_SetConfig+0x110>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	46bd      	mov	sp, r7
 800622e:	b006      	add	sp, #24
 8006230:	bd80      	pop	{r7, pc}
 8006232:	46c0      	nop			@ (mov r8, r8)
 8006234:	fffeff8f 	.word	0xfffeff8f
 8006238:	40012c00 	.word	0x40012c00
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800
 8006248:	fffffeff 	.word	0xfffffeff
 800624c:	fffffdff 	.word	0xfffffdff

08006250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	2210      	movs	r2, #16
 8006266:	4393      	bics	r3, r2
 8006268:	001a      	movs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a2e      	ldr	r2, [pc, #184]	@ (8006338 <TIM_OC2_SetConfig+0xe8>)
 800627e:	4013      	ands	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a2d      	ldr	r2, [pc, #180]	@ (800633c <TIM_OC2_SetConfig+0xec>)
 8006286:	4013      	ands	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2220      	movs	r2, #32
 800629a:	4393      	bics	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a24      	ldr	r2, [pc, #144]	@ (8006340 <TIM_OC2_SetConfig+0xf0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10d      	bne.n	80062ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2280      	movs	r2, #128	@ 0x80
 80062b6:	4393      	bics	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2240      	movs	r2, #64	@ 0x40
 80062ca:	4393      	bics	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006340 <TIM_OC2_SetConfig+0xf0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00b      	beq.n	80062ee <TIM_OC2_SetConfig+0x9e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006344 <TIM_OC2_SetConfig+0xf4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <TIM_OC2_SetConfig+0x9e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <TIM_OC2_SetConfig+0xf8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_OC2_SetConfig+0x9e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a18      	ldr	r2, [pc, #96]	@ (800634c <TIM_OC2_SetConfig+0xfc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d113      	bne.n	8006316 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4a17      	ldr	r2, [pc, #92]	@ (8006350 <TIM_OC2_SetConfig+0x100>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <TIM_OC2_SetConfig+0x104>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	46c0      	nop			@ (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	b006      	add	sp, #24
 8006336:	bd80      	pop	{r7, pc}
 8006338:	feff8fff 	.word	0xfeff8fff
 800633c:	fffffcff 	.word	0xfffffcff
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800
 8006350:	fffffbff 	.word	0xfffffbff
 8006354:	fffff7ff 	.word	0xfffff7ff

08006358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	4a33      	ldr	r2, [pc, #204]	@ (800643c <TIM_OC3_SetConfig+0xe4>)
 800636e:	401a      	ands	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a2f      	ldr	r2, [pc, #188]	@ (8006440 <TIM_OC3_SetConfig+0xe8>)
 8006384:	4013      	ands	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2203      	movs	r2, #3
 800638c:	4393      	bics	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4a29      	ldr	r2, [pc, #164]	@ (8006444 <TIM_OC3_SetConfig+0xec>)
 800639e:	4013      	ands	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a25      	ldr	r2, [pc, #148]	@ (8006448 <TIM_OC3_SetConfig+0xf0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10d      	bne.n	80063d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4a24      	ldr	r2, [pc, #144]	@ (800644c <TIM_OC3_SetConfig+0xf4>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4a20      	ldr	r2, [pc, #128]	@ (8006450 <TIM_OC3_SetConfig+0xf8>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006448 <TIM_OC3_SetConfig+0xf0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00b      	beq.n	80063f2 <TIM_OC3_SetConfig+0x9a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <TIM_OC3_SetConfig+0xfc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_OC3_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <TIM_OC3_SetConfig+0x100>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC3_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a1b      	ldr	r2, [pc, #108]	@ (800645c <TIM_OC3_SetConfig+0x104>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d113      	bne.n	800641a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006460 <TIM_OC3_SetConfig+0x108>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4a19      	ldr	r2, [pc, #100]	@ (8006464 <TIM_OC3_SetConfig+0x10c>)
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	46c0      	nop			@ (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b006      	add	sp, #24
 800643a:	bd80      	pop	{r7, pc}
 800643c:	fffffeff 	.word	0xfffffeff
 8006440:	fffeff8f 	.word	0xfffeff8f
 8006444:	fffffdff 	.word	0xfffffdff
 8006448:	40012c00 	.word	0x40012c00
 800644c:	fffff7ff 	.word	0xfffff7ff
 8006450:	fffffbff 	.word	0xfffffbff
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800
 8006460:	ffffefff 	.word	0xffffefff
 8006464:	ffffdfff 	.word	0xffffdfff

08006468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	4a26      	ldr	r2, [pc, #152]	@ (8006518 <TIM_OC4_SetConfig+0xb0>)
 800647e:	401a      	ands	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a22      	ldr	r2, [pc, #136]	@ (800651c <TIM_OC4_SetConfig+0xb4>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a21      	ldr	r2, [pc, #132]	@ (8006520 <TIM_OC4_SetConfig+0xb8>)
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <TIM_OC4_SetConfig+0xbc>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a19      	ldr	r2, [pc, #100]	@ (8006528 <TIM_OC4_SetConfig+0xc0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <TIM_OC4_SetConfig+0x78>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a18      	ldr	r2, [pc, #96]	@ (800652c <TIM_OC4_SetConfig+0xc4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_OC4_SetConfig+0x78>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a17      	ldr	r2, [pc, #92]	@ (8006530 <TIM_OC4_SetConfig+0xc8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC4_SetConfig+0x78>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a16      	ldr	r2, [pc, #88]	@ (8006534 <TIM_OC4_SetConfig+0xcc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d109      	bne.n	80064f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4a15      	ldr	r2, [pc, #84]	@ (8006538 <TIM_OC4_SetConfig+0xd0>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	019b      	lsls	r3, r3, #6
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	46c0      	nop			@ (mov r8, r8)
 8006510:	46bd      	mov	sp, r7
 8006512:	b006      	add	sp, #24
 8006514:	bd80      	pop	{r7, pc}
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	ffffefff 	.word	0xffffefff
 800651c:	feff8fff 	.word	0xfeff8fff
 8006520:	fffffcff 	.word	0xfffffcff
 8006524:	ffffdfff 	.word	0xffffdfff
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40014000 	.word	0x40014000
 8006530:	40014400 	.word	0x40014400
 8006534:	40014800 	.word	0x40014800
 8006538:	ffffbfff 	.word	0xffffbfff

0800653c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	4a23      	ldr	r2, [pc, #140]	@ (80065e0 <TIM_OC5_SetConfig+0xa4>)
 8006552:	401a      	ands	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a1f      	ldr	r2, [pc, #124]	@ (80065e4 <TIM_OC5_SetConfig+0xa8>)
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <TIM_OC5_SetConfig+0xac>)
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a17      	ldr	r2, [pc, #92]	@ (80065ec <TIM_OC5_SetConfig+0xb0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_OC5_SetConfig+0x6e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a16      	ldr	r2, [pc, #88]	@ (80065f0 <TIM_OC5_SetConfig+0xb4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_OC5_SetConfig+0x6e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a15      	ldr	r2, [pc, #84]	@ (80065f4 <TIM_OC5_SetConfig+0xb8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC5_SetConfig+0x6e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a14      	ldr	r2, [pc, #80]	@ (80065f8 <TIM_OC5_SetConfig+0xbc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d109      	bne.n	80065be <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4a0c      	ldr	r2, [pc, #48]	@ (80065e0 <TIM_OC5_SetConfig+0xa4>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	621a      	str	r2, [r3, #32]
}
 80065d8:	46c0      	nop			@ (mov r8, r8)
 80065da:	46bd      	mov	sp, r7
 80065dc:	b006      	add	sp, #24
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	fffeffff 	.word	0xfffeffff
 80065e4:	fffeff8f 	.word	0xfffeff8f
 80065e8:	fffdffff 	.word	0xfffdffff
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800

080065fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	4a24      	ldr	r2, [pc, #144]	@ (80066a4 <TIM_OC6_SetConfig+0xa8>)
 8006612:	401a      	ands	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a20      	ldr	r2, [pc, #128]	@ (80066a8 <TIM_OC6_SetConfig+0xac>)
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ac <TIM_OC6_SetConfig+0xb0>)
 800663c:	4013      	ands	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	051b      	lsls	r3, r3, #20
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a18      	ldr	r2, [pc, #96]	@ (80066b0 <TIM_OC6_SetConfig+0xb4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_OC6_SetConfig+0x70>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a17      	ldr	r2, [pc, #92]	@ (80066b4 <TIM_OC6_SetConfig+0xb8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_OC6_SetConfig+0x70>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a16      	ldr	r2, [pc, #88]	@ (80066b8 <TIM_OC6_SetConfig+0xbc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC6_SetConfig+0x70>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a15      	ldr	r2, [pc, #84]	@ (80066bc <TIM_OC6_SetConfig+0xc0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d109      	bne.n	8006680 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4a14      	ldr	r2, [pc, #80]	@ (80066c0 <TIM_OC6_SetConfig+0xc4>)
 8006670:	4013      	ands	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b006      	add	sp, #24
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	ffefffff 	.word	0xffefffff
 80066a8:	feff8fff 	.word	0xfeff8fff
 80066ac:	ffdfffff 	.word	0xffdfffff
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800
 80066c0:	fffbffff 	.word	0xfffbffff

080066c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ce:	2317      	movs	r3, #23
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4a41      	ldr	r2, [pc, #260]	@ (80067e8 <TIM_SlaveTimer_SetConfig+0x124>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4a3e      	ldr	r2, [pc, #248]	@ (80067ec <TIM_SlaveTimer_SetConfig+0x128>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b70      	cmp	r3, #112	@ 0x70
 8006710:	d015      	beq.n	800673e <TIM_SlaveTimer_SetConfig+0x7a>
 8006712:	d900      	bls.n	8006716 <TIM_SlaveTimer_SetConfig+0x52>
 8006714:	e05b      	b.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
 8006716:	2b60      	cmp	r3, #96	@ 0x60
 8006718:	d04f      	beq.n	80067ba <TIM_SlaveTimer_SetConfig+0xf6>
 800671a:	d858      	bhi.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
 800671c:	2b50      	cmp	r3, #80	@ 0x50
 800671e:	d042      	beq.n	80067a6 <TIM_SlaveTimer_SetConfig+0xe2>
 8006720:	d855      	bhi.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
 8006722:	2b40      	cmp	r3, #64	@ 0x40
 8006724:	d016      	beq.n	8006754 <TIM_SlaveTimer_SetConfig+0x90>
 8006726:	d852      	bhi.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
 8006728:	2b30      	cmp	r3, #48	@ 0x30
 800672a:	d055      	beq.n	80067d8 <TIM_SlaveTimer_SetConfig+0x114>
 800672c:	d84f      	bhi.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
 800672e:	2b20      	cmp	r3, #32
 8006730:	d052      	beq.n	80067d8 <TIM_SlaveTimer_SetConfig+0x114>
 8006732:	d84c      	bhi.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d04f      	beq.n	80067d8 <TIM_SlaveTimer_SetConfig+0x114>
 8006738:	2b10      	cmp	r3, #16
 800673a:	d04d      	beq.n	80067d8 <TIM_SlaveTimer_SetConfig+0x114>
 800673c:	e047      	b.n	80067ce <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800674e:	f000 f9d3 	bl	8006af8 <TIM_ETR_SetConfig>
      break;
 8006752:	e042      	b.n	80067da <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b05      	cmp	r3, #5
 800675a:	d101      	bne.n	8006760 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e03f      	b.n	80067e0 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6a1a      	ldr	r2, [r3, #32]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2101      	movs	r1, #1
 8006774:	438a      	bics	r2, r1
 8006776:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	22f0      	movs	r2, #240	@ 0xf0
 8006784:	4393      	bics	r3, r2
 8006786:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	621a      	str	r2, [r3, #32]
      break;
 80067a4:	e019      	b.n	80067da <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	001a      	movs	r2, r3
 80067b4:	f000 f878 	bl	80068a8 <TIM_TI1_ConfigInputStage>
      break;
 80067b8:	e00f      	b.n	80067da <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067c6:	001a      	movs	r2, r3
 80067c8:	f000 f8de 	bl	8006988 <TIM_TI2_ConfigInputStage>
      break;
 80067cc:	e005      	b.n	80067da <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80067ce:	2317      	movs	r3, #23
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
      break;
 80067d6:	e000      	b.n	80067da <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80067d8:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80067da:	2317      	movs	r3, #23
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	781b      	ldrb	r3, [r3, #0]
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b006      	add	sp, #24
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	ffcfff8f 	.word	0xffcfff8f
 80067ec:	fffefff8 	.word	0xfffefff8

080067f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	2201      	movs	r2, #1
 800680a:	4393      	bics	r3, r2
 800680c:	001a      	movs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4a20      	ldr	r2, [pc, #128]	@ (800689c <TIM_TI1_SetConfig+0xac>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00c      	beq.n	800683a <TIM_TI1_SetConfig+0x4a>
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	2380      	movs	r3, #128	@ 0x80
 8006824:	05db      	lsls	r3, r3, #23
 8006826:	429a      	cmp	r2, r3
 8006828:	d007      	beq.n	800683a <TIM_TI1_SetConfig+0x4a>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a1c      	ldr	r2, [pc, #112]	@ (80068a0 <TIM_TI1_SetConfig+0xb0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_TI1_SetConfig+0x4a>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a1b      	ldr	r2, [pc, #108]	@ (80068a4 <TIM_TI1_SetConfig+0xb4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <TIM_TI1_SetConfig+0x4e>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <TIM_TI1_SetConfig+0x50>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2203      	movs	r2, #3
 8006848:	4393      	bics	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e003      	b.n	800685e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2201      	movs	r2, #1
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	22f0      	movs	r2, #240	@ 0xf0
 8006862:	4393      	bics	r3, r2
 8006864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	22ff      	movs	r2, #255	@ 0xff
 800686c:	4013      	ands	r3, r2
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	220a      	movs	r2, #10
 8006878:	4393      	bics	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	220a      	movs	r2, #10
 8006880:	4013      	ands	r3, r2
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	621a      	str	r2, [r3, #32]
}
 8006894:	46c0      	nop			@ (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b006      	add	sp, #24
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40014000 	.word	0x40014000

080068a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	2201      	movs	r2, #1
 80068c0:	4393      	bics	r3, r2
 80068c2:	001a      	movs	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	22f0      	movs	r2, #240	@ 0xf0
 80068d2:	4393      	bics	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	220a      	movs	r2, #10
 80068e4:	4393      	bics	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	46c0      	nop			@ (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b006      	add	sp, #24
 8006902:	bd80      	pop	{r7, pc}

08006904 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	2210      	movs	r2, #16
 800691e:	4393      	bics	r3, r2
 8006920:	001a      	movs	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <TIM_TI2_SetConfig+0x7c>)
 8006930:	4013      	ands	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4a10      	ldr	r2, [pc, #64]	@ (8006984 <TIM_TI2_SetConfig+0x80>)
 8006942:	4013      	ands	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	031b      	lsls	r3, r3, #12
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	22a0      	movs	r2, #160	@ 0xa0
 8006958:	4393      	bics	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	22a0      	movs	r2, #160	@ 0xa0
 8006962:	4013      	ands	r3, r2
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	46c0      	nop			@ (mov r8, r8)
 8006978:	46bd      	mov	sp, r7
 800697a:	b006      	add	sp, #24
 800697c:	bd80      	pop	{r7, pc}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	fffffcff 	.word	0xfffffcff
 8006984:	ffff0fff 	.word	0xffff0fff

08006988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	2210      	movs	r2, #16
 80069a0:	4393      	bics	r3, r2
 80069a2:	001a      	movs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4a0d      	ldr	r2, [pc, #52]	@ (80069e8 <TIM_TI2_ConfigInputStage+0x60>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	22a0      	movs	r2, #160	@ 0xa0
 80069c4:	4393      	bics	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b006      	add	sp, #24
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	ffff0fff 	.word	0xffff0fff

080069ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <TIM_TI3_SetConfig+0x78>)
 8006a06:	401a      	ands	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2203      	movs	r2, #3
 8006a16:	4393      	bics	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	22f0      	movs	r2, #240	@ 0xf0
 8006a26:	4393      	bics	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	22ff      	movs	r2, #255	@ 0xff
 8006a30:	4013      	ands	r3, r2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8006a68 <TIM_TI3_SetConfig+0x7c>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	021a      	lsls	r2, r3, #8
 8006a44:	23a0      	movs	r3, #160	@ 0xa0
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4013      	ands	r3, r2
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	46c0      	nop			@ (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b006      	add	sp, #24
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	fffffeff 	.word	0xfffffeff
 8006a68:	fffff5ff 	.word	0xfffff5ff

08006a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	4a18      	ldr	r2, [pc, #96]	@ (8006ae8 <TIM_TI4_SetConfig+0x7c>)
 8006a86:	401a      	ands	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4a15      	ldr	r2, [pc, #84]	@ (8006aec <TIM_TI4_SetConfig+0x80>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4a12      	ldr	r2, [pc, #72]	@ (8006af0 <TIM_TI4_SetConfig+0x84>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	031b      	lsls	r3, r3, #12
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	0c1b      	lsrs	r3, r3, #16
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4a0d      	ldr	r2, [pc, #52]	@ (8006af4 <TIM_TI4_SetConfig+0x88>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	031a      	lsls	r2, r3, #12
 8006ac6:	23a0      	movs	r3, #160	@ 0xa0
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	4013      	ands	r3, r2
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b006      	add	sp, #24
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	ffffefff 	.word	0xffffefff
 8006aec:	fffffcff 	.word	0xfffffcff
 8006af0:	ffff0fff 	.word	0xffff0fff
 8006af4:	ffff5fff 	.word	0xffff5fff

08006af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4a09      	ldr	r2, [pc, #36]	@ (8006b34 <TIM_ETR_SetConfig+0x3c>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	021a      	lsls	r2, r3, #8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	609a      	str	r2, [r3, #8]
}
 8006b2c:	46c0      	nop			@ (mov r8, r8)
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b006      	add	sp, #24
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	ffff00ff 	.word	0xffff00ff

08006b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	221f      	movs	r2, #31
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	0013      	movs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	43d2      	mvns	r2, r2
 8006b5a:	401a      	ands	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	211f      	movs	r1, #31
 8006b68:	400b      	ands	r3, r1
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4099      	lsls	r1, r3
 8006b6e:	000b      	movs	r3, r1
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b006      	add	sp, #24
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	223c      	movs	r2, #60	@ 0x3c
 8006b8e:	5c9b      	ldrb	r3, [r3, r2]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e055      	b.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	223c      	movs	r2, #60	@ 0x3c
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	223d      	movs	r2, #61	@ 0x3d
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a23      	ldr	r2, [pc, #140]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d108      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a22      	ldr	r2, [pc, #136]	@ (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2270      	movs	r2, #112	@ 0x70
 8006bd8:	4393      	bics	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a16      	ldr	r2, [pc, #88]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00f      	beq.n	8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	05db      	lsls	r3, r3, #23
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d009      	beq.n	8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a12      	ldr	r2, [pc, #72]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a11      	ldr	r2, [pc, #68]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d10c      	bne.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2280      	movs	r2, #128	@ 0x80
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	223d      	movs	r2, #61	@ 0x3d
 8006c36:	2101      	movs	r1, #1
 8006c38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	223c      	movs	r2, #60	@ 0x3c
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b004      	add	sp, #16
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	ff0fffff 	.word	0xff0fffff
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40014000 	.word	0x40014000

08006c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	223c      	movs	r2, #60	@ 0x3c
 8006c6e:	5c9b      	ldrb	r3, [r3, r2]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e06f      	b.n	8006d58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	223c      	movs	r2, #60	@ 0x3c
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	22ff      	movs	r2, #255	@ 0xff
 8006c84:	4393      	bics	r3, r2
 8006c86:	001a      	movs	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a33      	ldr	r2, [pc, #204]	@ (8006d60 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006c94:	401a      	ands	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a30      	ldr	r2, [pc, #192]	@ (8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a2e      	ldr	r2, [pc, #184]	@ (8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006cb0:	401a      	ands	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4a29      	ldr	r2, [pc, #164]	@ (8006d70 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006ccc:	401a      	ands	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	@ (8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006cda:	401a      	ands	r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a24      	ldr	r2, [pc, #144]	@ (8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ce8:	401a      	ands	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a21      	ldr	r2, [pc, #132]	@ (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006cf8:	401a      	ands	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d11c      	bne.n	8006d46 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006d10:	401a      	ands	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d16:	051b      	lsls	r3, r3, #20
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006d20:	401a      	ands	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006d2e:	401a      	ands	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	@ (8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d3c:	401a      	ands	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	223c      	movs	r2, #60	@ 0x3c
 8006d52:	2100      	movs	r1, #0
 8006d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	0018      	movs	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b004      	add	sp, #16
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	fffffcff 	.word	0xfffffcff
 8006d64:	fffffbff 	.word	0xfffffbff
 8006d68:	fffff7ff 	.word	0xfffff7ff
 8006d6c:	ffffefff 	.word	0xffffefff
 8006d70:	ffffdfff 	.word	0xffffdfff
 8006d74:	ffffbfff 	.word	0xffffbfff
 8006d78:	fff0ffff 	.word	0xfff0ffff
 8006d7c:	efffffff 	.word	0xefffffff
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	ff0fffff 	.word	0xff0fffff
 8006d88:	feffffff 	.word	0xfeffffff
 8006d8c:	fdffffff 	.word	0xfdffffff
 8006d90:	dfffffff 	.word	0xdfffffff

08006d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d9c:	46c0      	nop			@ (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dac:	46c0      	nop			@ (mov r8, r8)
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dbc:	46c0      	nop			@ (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e046      	b.n	8006e64 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2288      	movs	r2, #136	@ 0x88
 8006dda:	589b      	ldr	r3, [r3, r2]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d107      	bne.n	8006df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2284      	movs	r2, #132	@ 0x84
 8006de4:	2100      	movs	r1, #0
 8006de6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7fa ff22 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2288      	movs	r2, #136	@ 0x88
 8006df4:	2124      	movs	r1, #36	@ 0x24
 8006df6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2101      	movs	r1, #1
 8006e04:	438a      	bics	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 ff2e 	bl	8007c74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f000 fc6c 	bl	80076f8 <UART_SetConfig>
 8006e20:	0003      	movs	r3, r0
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e01c      	b.n	8006e64 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	490d      	ldr	r1, [pc, #52]	@ (8006e6c <HAL_UART_Init+0xa8>)
 8006e36:	400a      	ands	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	212a      	movs	r1, #42	@ 0x2a
 8006e46:	438a      	bics	r2, r1
 8006e48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2101      	movs	r1, #1
 8006e56:	430a      	orrs	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 ffbd 	bl	8007ddc <UART_CheckIdleState>
 8006e62:	0003      	movs	r3, r0
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	ffffb7ff 	.word	0xffffb7ff

08006e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	@ 0x28
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	1dbb      	adds	r3, r7, #6
 8006e7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2288      	movs	r2, #136	@ 0x88
 8006e84:	589b      	ldr	r3, [r3, r2]
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d000      	beq.n	8006e8c <HAL_UART_Transmit+0x1c>
 8006e8a:	e090      	b.n	8006fae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_UART_Transmit+0x2a>
 8006e92:	1dbb      	adds	r3, r7, #6
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e088      	b.n	8006fb0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	2380      	movs	r3, #128	@ 0x80
 8006ea4:	015b      	lsls	r3, r3, #5
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d109      	bne.n	8006ebe <HAL_UART_Transmit+0x4e>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d105      	bne.n	8006ebe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d001      	beq.n	8006ebe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e078      	b.n	8006fb0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2290      	movs	r2, #144	@ 0x90
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2288      	movs	r2, #136	@ 0x88
 8006eca:	2121      	movs	r1, #33	@ 0x21
 8006ecc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ece:	f7fb f8fd 	bl	80020cc <HAL_GetTick>
 8006ed2:	0003      	movs	r3, r0
 8006ed4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1dba      	adds	r2, r7, #6
 8006eda:	2154      	movs	r1, #84	@ 0x54
 8006edc:	8812      	ldrh	r2, [r2, #0]
 8006ede:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1dba      	adds	r2, r7, #6
 8006ee4:	2156      	movs	r1, #86	@ 0x56
 8006ee6:	8812      	ldrh	r2, [r2, #0]
 8006ee8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	2380      	movs	r3, #128	@ 0x80
 8006ef0:	015b      	lsls	r3, r3, #5
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d108      	bne.n	8006f08 <HAL_UART_Transmit+0x98>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e003      	b.n	8006f10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f10:	e030      	b.n	8006f74 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	0013      	movs	r3, r2
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2180      	movs	r1, #128	@ 0x80
 8006f20:	f001 f806 	bl	8007f30 <UART_WaitOnFlagUntilTimeout>
 8006f24:	1e03      	subs	r3, r0, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2288      	movs	r2, #136	@ 0x88
 8006f2c:	2120      	movs	r1, #32
 8006f2e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e03d      	b.n	8006fb0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	001a      	movs	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	05d2      	lsls	r2, r2, #23
 8006f46:	0dd2      	lsrs	r2, r2, #23
 8006f48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	e007      	b.n	8006f62 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2256      	movs	r2, #86	@ 0x56
 8006f66:	5a9b      	ldrh	r3, [r3, r2]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b299      	uxth	r1, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2256      	movs	r2, #86	@ 0x56
 8006f72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2256      	movs	r2, #86	@ 0x56
 8006f78:	5a9b      	ldrh	r3, [r3, r2]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1c8      	bne.n	8006f12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	0013      	movs	r3, r2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2140      	movs	r1, #64	@ 0x40
 8006f8e:	f000 ffcf 	bl	8007f30 <UART_WaitOnFlagUntilTimeout>
 8006f92:	1e03      	subs	r3, r0, #0
 8006f94:	d005      	beq.n	8006fa2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2288      	movs	r2, #136	@ 0x88
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e006      	b.n	8006fb0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2288      	movs	r2, #136	@ 0x88
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	b008      	add	sp, #32
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	1dbb      	adds	r3, r7, #6
 8006fc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	228c      	movs	r2, #140	@ 0x8c
 8006fca:	589b      	ldr	r3, [r3, r2]
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d14a      	bne.n	8007066 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_UART_Receive_IT+0x26>
 8006fd6:	1dbb      	adds	r3, r7, #6
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e042      	b.n	8007068 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	015b      	lsls	r3, r3, #5
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d109      	bne.n	8007002 <HAL_UART_Receive_IT+0x4a>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d001      	beq.n	8007002 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e032      	b.n	8007068 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a18      	ldr	r2, [pc, #96]	@ (8007070 <HAL_UART_Receive_IT+0xb8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d020      	beq.n	8007054 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	4013      	ands	r3, r2
 800701e:	d019      	beq.n	8007054 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007020:	f3ef 8310 	mrs	r3, PRIMASK
 8007024:	613b      	str	r3, [r7, #16]
  return(result);
 8007026:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f383 8810 	msr	PRIMASK, r3
}
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2180      	movs	r1, #128	@ 0x80
 8007042:	04c9      	lsls	r1, r1, #19
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f383 8810 	msr	PRIMASK, r3
}
 8007052:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007054:	1dbb      	adds	r3, r7, #6
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	0018      	movs	r0, r3
 800705e:	f000 ffd7 	bl	8008010 <UART_Start_Receive_IT>
 8007062:	0003      	movs	r3, r0
 8007064:	e000      	b.n	8007068 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007066:	2302      	movs	r3, #2
  }
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b008      	add	sp, #32
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40008000 	.word	0x40008000

08007074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007074:	b5b0      	push	{r4, r5, r7, lr}
 8007076:	b0aa      	sub	sp, #168	@ 0xa8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	22a4      	movs	r2, #164	@ 0xa4
 8007084:	18b9      	adds	r1, r7, r2
 8007086:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	20a0      	movs	r0, #160	@ 0xa0
 8007090:	1839      	adds	r1, r7, r0
 8007092:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	249c      	movs	r4, #156	@ 0x9c
 800709c:	1939      	adds	r1, r7, r4
 800709e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070a0:	0011      	movs	r1, r2
 80070a2:	18bb      	adds	r3, r7, r2
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4aa2      	ldr	r2, [pc, #648]	@ (8007330 <HAL_UART_IRQHandler+0x2bc>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	2298      	movs	r2, #152	@ 0x98
 80070ac:	18bd      	adds	r5, r7, r2
 80070ae:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80070b0:	18bb      	adds	r3, r7, r2
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11a      	bne.n	80070ee <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070b8:	187b      	adds	r3, r7, r1
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2220      	movs	r2, #32
 80070be:	4013      	ands	r3, r2
 80070c0:	d015      	beq.n	80070ee <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070c2:	183b      	adds	r3, r7, r0
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2220      	movs	r2, #32
 80070c8:	4013      	ands	r3, r2
 80070ca:	d105      	bne.n	80070d8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070cc:	193b      	adds	r3, r7, r4
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	2380      	movs	r3, #128	@ 0x80
 80070d2:	055b      	lsls	r3, r3, #21
 80070d4:	4013      	ands	r3, r2
 80070d6:	d00a      	beq.n	80070ee <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d100      	bne.n	80070e2 <HAL_UART_IRQHandler+0x6e>
 80070e0:	e2dc      	b.n	800769c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	0010      	movs	r0, r2
 80070ea:	4798      	blx	r3
      }
      return;
 80070ec:	e2d6      	b.n	800769c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070ee:	2398      	movs	r3, #152	@ 0x98
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d100      	bne.n	80070fa <HAL_UART_IRQHandler+0x86>
 80070f8:	e122      	b.n	8007340 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070fa:	239c      	movs	r3, #156	@ 0x9c
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a8c      	ldr	r2, [pc, #560]	@ (8007334 <HAL_UART_IRQHandler+0x2c0>)
 8007102:	4013      	ands	r3, r2
 8007104:	d106      	bne.n	8007114 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007106:	23a0      	movs	r3, #160	@ 0xa0
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a8a      	ldr	r2, [pc, #552]	@ (8007338 <HAL_UART_IRQHandler+0x2c4>)
 800710e:	4013      	ands	r3, r2
 8007110:	d100      	bne.n	8007114 <HAL_UART_IRQHandler+0xa0>
 8007112:	e115      	b.n	8007340 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007114:	23a4      	movs	r3, #164	@ 0xa4
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2201      	movs	r2, #1
 800711c:	4013      	ands	r3, r2
 800711e:	d012      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
 8007120:	23a0      	movs	r3, #160	@ 0xa0
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	2380      	movs	r3, #128	@ 0x80
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	4013      	ands	r3, r2
 800712c:	d00b      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2201      	movs	r2, #1
 8007134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2290      	movs	r2, #144	@ 0x90
 800713a:	589b      	ldr	r3, [r3, r2]
 800713c:	2201      	movs	r2, #1
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2190      	movs	r1, #144	@ 0x90
 8007144:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007146:	23a4      	movs	r3, #164	@ 0xa4
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2202      	movs	r2, #2
 800714e:	4013      	ands	r3, r2
 8007150:	d011      	beq.n	8007176 <HAL_UART_IRQHandler+0x102>
 8007152:	239c      	movs	r3, #156	@ 0x9c
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	4013      	ands	r3, r2
 800715c:	d00b      	beq.n	8007176 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2202      	movs	r2, #2
 8007164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2290      	movs	r2, #144	@ 0x90
 800716a:	589b      	ldr	r3, [r3, r2]
 800716c:	2204      	movs	r2, #4
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2190      	movs	r1, #144	@ 0x90
 8007174:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007176:	23a4      	movs	r3, #164	@ 0xa4
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2204      	movs	r2, #4
 800717e:	4013      	ands	r3, r2
 8007180:	d011      	beq.n	80071a6 <HAL_UART_IRQHandler+0x132>
 8007182:	239c      	movs	r3, #156	@ 0x9c
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2201      	movs	r2, #1
 800718a:	4013      	ands	r3, r2
 800718c:	d00b      	beq.n	80071a6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2204      	movs	r2, #4
 8007194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2290      	movs	r2, #144	@ 0x90
 800719a:	589b      	ldr	r3, [r3, r2]
 800719c:	2202      	movs	r2, #2
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2190      	movs	r1, #144	@ 0x90
 80071a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071a6:	23a4      	movs	r3, #164	@ 0xa4
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2208      	movs	r2, #8
 80071ae:	4013      	ands	r3, r2
 80071b0:	d017      	beq.n	80071e2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071b2:	23a0      	movs	r3, #160	@ 0xa0
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2220      	movs	r2, #32
 80071ba:	4013      	ands	r3, r2
 80071bc:	d105      	bne.n	80071ca <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071be:	239c      	movs	r3, #156	@ 0x9c
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a5b      	ldr	r2, [pc, #364]	@ (8007334 <HAL_UART_IRQHandler+0x2c0>)
 80071c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071c8:	d00b      	beq.n	80071e2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2208      	movs	r2, #8
 80071d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2290      	movs	r2, #144	@ 0x90
 80071d6:	589b      	ldr	r3, [r3, r2]
 80071d8:	2208      	movs	r2, #8
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2190      	movs	r1, #144	@ 0x90
 80071e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071e2:	23a4      	movs	r3, #164	@ 0xa4
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	4013      	ands	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_UART_IRQHandler+0x1a4>
 80071f0:	23a0      	movs	r3, #160	@ 0xa0
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	2380      	movs	r3, #128	@ 0x80
 80071f8:	04db      	lsls	r3, r3, #19
 80071fa:	4013      	ands	r3, r2
 80071fc:	d00c      	beq.n	8007218 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2280      	movs	r2, #128	@ 0x80
 8007204:	0112      	lsls	r2, r2, #4
 8007206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2290      	movs	r2, #144	@ 0x90
 800720c:	589b      	ldr	r3, [r3, r2]
 800720e:	2220      	movs	r2, #32
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2190      	movs	r1, #144	@ 0x90
 8007216:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2290      	movs	r2, #144	@ 0x90
 800721c:	589b      	ldr	r3, [r3, r2]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d100      	bne.n	8007224 <HAL_UART_IRQHandler+0x1b0>
 8007222:	e23d      	b.n	80076a0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007224:	23a4      	movs	r3, #164	@ 0xa4
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2220      	movs	r2, #32
 800722c:	4013      	ands	r3, r2
 800722e:	d015      	beq.n	800725c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007230:	23a0      	movs	r3, #160	@ 0xa0
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2220      	movs	r2, #32
 8007238:	4013      	ands	r3, r2
 800723a:	d106      	bne.n	800724a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800723c:	239c      	movs	r3, #156	@ 0x9c
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	2380      	movs	r3, #128	@ 0x80
 8007244:	055b      	lsls	r3, r3, #21
 8007246:	4013      	ands	r3, r2
 8007248:	d008      	beq.n	800725c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	0010      	movs	r0, r2
 800725a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2290      	movs	r2, #144	@ 0x90
 8007260:	589b      	ldr	r3, [r3, r2]
 8007262:	2194      	movs	r1, #148	@ 0x94
 8007264:	187a      	adds	r2, r7, r1
 8007266:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2240      	movs	r2, #64	@ 0x40
 8007270:	4013      	ands	r3, r2
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d004      	beq.n	8007280 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007276:	187b      	adds	r3, r7, r1
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2228      	movs	r2, #40	@ 0x28
 800727c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800727e:	d04c      	beq.n	800731a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	0018      	movs	r0, r3
 8007284:	f000 ffe8 	bl	8008258 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2240      	movs	r2, #64	@ 0x40
 8007290:	4013      	ands	r3, r2
 8007292:	2b40      	cmp	r3, #64	@ 0x40
 8007294:	d13c      	bne.n	8007310 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007296:	f3ef 8310 	mrs	r3, PRIMASK
 800729a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800729c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	2090      	movs	r0, #144	@ 0x90
 80072a0:	183a      	adds	r2, r7, r0
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	2301      	movs	r3, #1
 80072a6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072aa:	f383 8810 	msr	PRIMASK, r3
}
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2140      	movs	r1, #64	@ 0x40
 80072bc:	438a      	bics	r2, r1
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	183b      	adds	r3, r7, r0
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072c8:	f383 8810 	msr	PRIMASK, r3
}
 80072cc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2280      	movs	r2, #128	@ 0x80
 80072d2:	589b      	ldr	r3, [r3, r2]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d016      	beq.n	8007306 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	@ 0x80
 80072dc:	589b      	ldr	r3, [r3, r2]
 80072de:	4a17      	ldr	r2, [pc, #92]	@ (800733c <HAL_UART_IRQHandler+0x2c8>)
 80072e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2280      	movs	r2, #128	@ 0x80
 80072e6:	589b      	ldr	r3, [r3, r2]
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7fc fdd9 	bl	8003ea0 <HAL_DMA_Abort_IT>
 80072ee:	1e03      	subs	r3, r0, #0
 80072f0:	d01c      	beq.n	800732c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2280      	movs	r2, #128	@ 0x80
 80072f6:	589b      	ldr	r3, [r3, r2]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	2180      	movs	r1, #128	@ 0x80
 80072fe:	5852      	ldr	r2, [r2, r1]
 8007300:	0010      	movs	r0, r2
 8007302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	e012      	b.n	800732c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	0018      	movs	r0, r3
 800730a:	f000 f9e1 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730e:	e00d      	b.n	800732c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	0018      	movs	r0, r3
 8007314:	f000 f9dc 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	e008      	b.n	800732c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	0018      	movs	r0, r3
 800731e:	f000 f9d7 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2290      	movs	r2, #144	@ 0x90
 8007326:	2100      	movs	r1, #0
 8007328:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800732a:	e1b9      	b.n	80076a0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	46c0      	nop			@ (mov r8, r8)
    return;
 800732e:	e1b7      	b.n	80076a0 <HAL_UART_IRQHandler+0x62c>
 8007330:	0000080f 	.word	0x0000080f
 8007334:	10000001 	.word	0x10000001
 8007338:	04000120 	.word	0x04000120
 800733c:	08008325 	.word	0x08008325

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007344:	2b01      	cmp	r3, #1
 8007346:	d000      	beq.n	800734a <HAL_UART_IRQHandler+0x2d6>
 8007348:	e13e      	b.n	80075c8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800734a:	23a4      	movs	r3, #164	@ 0xa4
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2210      	movs	r2, #16
 8007352:	4013      	ands	r3, r2
 8007354:	d100      	bne.n	8007358 <HAL_UART_IRQHandler+0x2e4>
 8007356:	e137      	b.n	80075c8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007358:	23a0      	movs	r3, #160	@ 0xa0
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2210      	movs	r2, #16
 8007360:	4013      	ands	r3, r2
 8007362:	d100      	bne.n	8007366 <HAL_UART_IRQHandler+0x2f2>
 8007364:	e130      	b.n	80075c8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2210      	movs	r2, #16
 800736c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2240      	movs	r2, #64	@ 0x40
 8007376:	4013      	ands	r3, r2
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d000      	beq.n	800737e <HAL_UART_IRQHandler+0x30a>
 800737c:	e0a4      	b.n	80074c8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2280      	movs	r2, #128	@ 0x80
 8007382:	589b      	ldr	r3, [r3, r2]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	217e      	movs	r1, #126	@ 0x7e
 800738a:	187b      	adds	r3, r7, r1
 800738c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800738e:	187b      	adds	r3, r7, r1
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d100      	bne.n	8007398 <HAL_UART_IRQHandler+0x324>
 8007396:	e185      	b.n	80076a4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	225c      	movs	r2, #92	@ 0x5c
 800739c:	5a9b      	ldrh	r3, [r3, r2]
 800739e:	187a      	adds	r2, r7, r1
 80073a0:	8812      	ldrh	r2, [r2, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d300      	bcc.n	80073a8 <HAL_UART_IRQHandler+0x334>
 80073a6:	e17d      	b.n	80076a4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	187a      	adds	r2, r7, r1
 80073ac:	215e      	movs	r1, #94	@ 0x5e
 80073ae:	8812      	ldrh	r2, [r2, #0]
 80073b0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2280      	movs	r2, #128	@ 0x80
 80073b6:	589b      	ldr	r3, [r3, r2]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2220      	movs	r2, #32
 80073be:	4013      	ands	r3, r2
 80073c0:	d170      	bne.n	80074a4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c2:	f3ef 8310 	mrs	r3, PRIMASK
 80073c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80073c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073cc:	2301      	movs	r3, #1
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	f383 8810 	msr	PRIMASK, r3
}
 80073d6:	46c0      	nop			@ (mov r8, r8)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	49b4      	ldr	r1, [pc, #720]	@ (80076b4 <HAL_UART_IRQHandler+0x640>)
 80073e4:	400a      	ands	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ee:	f383 8810 	msr	PRIMASK, r3
}
 80073f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f4:	f3ef 8310 	mrs	r3, PRIMASK
 80073f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80073fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80073fe:	2301      	movs	r3, #1
 8007400:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007404:	f383 8810 	msr	PRIMASK, r3
}
 8007408:	46c0      	nop			@ (mov r8, r8)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2101      	movs	r1, #1
 8007416:	438a      	bics	r2, r1
 8007418:	609a      	str	r2, [r3, #8]
 800741a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800741c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007420:	f383 8810 	msr	PRIMASK, r3
}
 8007424:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007426:	f3ef 8310 	mrs	r3, PRIMASK
 800742a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800742c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800742e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007430:	2301      	movs	r3, #1
 8007432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007436:	f383 8810 	msr	PRIMASK, r3
}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2140      	movs	r1, #64	@ 0x40
 8007448:	438a      	bics	r2, r1
 800744a:	609a      	str	r2, [r3, #8]
 800744c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800744e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007452:	f383 8810 	msr	PRIMASK, r3
}
 8007456:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	228c      	movs	r2, #140	@ 0x8c
 800745c:	2120      	movs	r1, #32
 800745e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007466:	f3ef 8310 	mrs	r3, PRIMASK
 800746a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800746c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007470:	2301      	movs	r3, #1
 8007472:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007476:	f383 8810 	msr	PRIMASK, r3
}
 800747a:	46c0      	nop			@ (mov r8, r8)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2110      	movs	r1, #16
 8007488:	438a      	bics	r2, r1
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800748e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007492:	f383 8810 	msr	PRIMASK, r3
}
 8007496:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2280      	movs	r2, #128	@ 0x80
 800749c:	589b      	ldr	r3, [r3, r2]
 800749e:	0018      	movs	r0, r3
 80074a0:	f7fc fc9c 	bl	8003ddc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	225c      	movs	r2, #92	@ 0x5c
 80074ae:	5a9a      	ldrh	r2, [r3, r2]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	215e      	movs	r1, #94	@ 0x5e
 80074b4:	5a5b      	ldrh	r3, [r3, r1]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0011      	movs	r1, r2
 80074c0:	0018      	movs	r0, r3
 80074c2:	f000 f90d 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074c6:	e0ed      	b.n	80076a4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	225c      	movs	r2, #92	@ 0x5c
 80074cc:	5a99      	ldrh	r1, [r3, r2]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	225e      	movs	r2, #94	@ 0x5e
 80074d2:	5a9b      	ldrh	r3, [r3, r2]
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	208e      	movs	r0, #142	@ 0x8e
 80074d8:	183b      	adds	r3, r7, r0
 80074da:	1a8a      	subs	r2, r1, r2
 80074dc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	225e      	movs	r2, #94	@ 0x5e
 80074e2:	5a9b      	ldrh	r3, [r3, r2]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d100      	bne.n	80074ec <HAL_UART_IRQHandler+0x478>
 80074ea:	e0dd      	b.n	80076a8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80074ec:	183b      	adds	r3, r7, r0
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d100      	bne.n	80074f6 <HAL_UART_IRQHandler+0x482>
 80074f4:	e0d8      	b.n	80076a8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f6:	f3ef 8310 	mrs	r3, PRIMASK
 80074fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80074fc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074fe:	2488      	movs	r4, #136	@ 0x88
 8007500:	193a      	adds	r2, r7, r4
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	2301      	movs	r3, #1
 8007506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f383 8810 	msr	PRIMASK, r3
}
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4967      	ldr	r1, [pc, #412]	@ (80076b8 <HAL_UART_IRQHandler+0x644>)
 800751c:	400a      	ands	r2, r1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	193b      	adds	r3, r7, r4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800752e:	f3ef 8310 	mrs	r3, PRIMASK
 8007532:	61bb      	str	r3, [r7, #24]
  return(result);
 8007534:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007536:	2484      	movs	r4, #132	@ 0x84
 8007538:	193a      	adds	r2, r7, r4
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	2301      	movs	r3, #1
 800753e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f383 8810 	msr	PRIMASK, r3
}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	495a      	ldr	r1, [pc, #360]	@ (80076bc <HAL_UART_IRQHandler+0x648>)
 8007554:	400a      	ands	r2, r1
 8007556:	609a      	str	r2, [r3, #8]
 8007558:	193b      	adds	r3, r7, r4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f383 8810 	msr	PRIMASK, r3
}
 8007564:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	228c      	movs	r2, #140	@ 0x8c
 800756a:	2120      	movs	r1, #32
 800756c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800757a:	f3ef 8310 	mrs	r3, PRIMASK
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007582:	2480      	movs	r4, #128	@ 0x80
 8007584:	193a      	adds	r2, r7, r4
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	2301      	movs	r3, #1
 800758a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	f383 8810 	msr	PRIMASK, r3
}
 8007592:	46c0      	nop			@ (mov r8, r8)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2110      	movs	r1, #16
 80075a0:	438a      	bics	r2, r1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	193b      	adds	r3, r7, r4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ac:	f383 8810 	msr	PRIMASK, r3
}
 80075b0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075b8:	183b      	adds	r3, r7, r0
 80075ba:	881a      	ldrh	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 f88d 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075c6:	e06f      	b.n	80076a8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075c8:	23a4      	movs	r3, #164	@ 0xa4
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	2380      	movs	r3, #128	@ 0x80
 80075d0:	035b      	lsls	r3, r3, #13
 80075d2:	4013      	ands	r3, r2
 80075d4:	d010      	beq.n	80075f8 <HAL_UART_IRQHandler+0x584>
 80075d6:	239c      	movs	r3, #156	@ 0x9c
 80075d8:	18fb      	adds	r3, r7, r3
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	2380      	movs	r3, #128	@ 0x80
 80075de:	03db      	lsls	r3, r3, #15
 80075e0:	4013      	ands	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2280      	movs	r2, #128	@ 0x80
 80075ea:	0352      	lsls	r2, r2, #13
 80075ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f001 fbeb 	bl	8008dcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075f6:	e05a      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075f8:	23a4      	movs	r3, #164	@ 0xa4
 80075fa:	18fb      	adds	r3, r7, r3
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2280      	movs	r2, #128	@ 0x80
 8007600:	4013      	ands	r3, r2
 8007602:	d016      	beq.n	8007632 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007604:	23a0      	movs	r3, #160	@ 0xa0
 8007606:	18fb      	adds	r3, r7, r3
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2280      	movs	r2, #128	@ 0x80
 800760c:	4013      	ands	r3, r2
 800760e:	d106      	bne.n	800761e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007610:	239c      	movs	r3, #156	@ 0x9c
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	2380      	movs	r3, #128	@ 0x80
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	4013      	ands	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007622:	2b00      	cmp	r3, #0
 8007624:	d042      	beq.n	80076ac <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	0010      	movs	r0, r2
 800762e:	4798      	blx	r3
    }
    return;
 8007630:	e03c      	b.n	80076ac <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007632:	23a4      	movs	r3, #164	@ 0xa4
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2240      	movs	r2, #64	@ 0x40
 800763a:	4013      	ands	r3, r2
 800763c:	d00a      	beq.n	8007654 <HAL_UART_IRQHandler+0x5e0>
 800763e:	23a0      	movs	r3, #160	@ 0xa0
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2240      	movs	r2, #64	@ 0x40
 8007646:	4013      	ands	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	0018      	movs	r0, r3
 800764e:	f000 fe80 	bl	8008352 <UART_EndTransmit_IT>
    return;
 8007652:	e02c      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007654:	23a4      	movs	r3, #164	@ 0xa4
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	2380      	movs	r3, #128	@ 0x80
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	4013      	ands	r3, r2
 8007660:	d00b      	beq.n	800767a <HAL_UART_IRQHandler+0x606>
 8007662:	23a0      	movs	r3, #160	@ 0xa0
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	2380      	movs	r3, #128	@ 0x80
 800766a:	05db      	lsls	r3, r3, #23
 800766c:	4013      	ands	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	0018      	movs	r0, r3
 8007674:	f001 fbba 	bl	8008dec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007678:	e019      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800767a:	23a4      	movs	r3, #164	@ 0xa4
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	2380      	movs	r3, #128	@ 0x80
 8007682:	045b      	lsls	r3, r3, #17
 8007684:	4013      	ands	r3, r2
 8007686:	d012      	beq.n	80076ae <HAL_UART_IRQHandler+0x63a>
 8007688:	23a0      	movs	r3, #160	@ 0xa0
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	da0d      	bge.n	80076ae <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f001 fba1 	bl	8008ddc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800769a:	e008      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
      return;
 800769c:	46c0      	nop			@ (mov r8, r8)
 800769e:	e006      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
    return;
 80076a0:	46c0      	nop			@ (mov r8, r8)
 80076a2:	e004      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
      return;
 80076a4:	46c0      	nop			@ (mov r8, r8)
 80076a6:	e002      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
      return;
 80076a8:	46c0      	nop			@ (mov r8, r8)
 80076aa:	e000      	b.n	80076ae <HAL_UART_IRQHandler+0x63a>
    return;
 80076ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b02a      	add	sp, #168	@ 0xa8
 80076b2:	bdb0      	pop	{r4, r5, r7, pc}
 80076b4:	fffffeff 	.word	0xfffffeff
 80076b8:	fffffedf 	.word	0xfffffedf
 80076bc:	effffffe 	.word	0xeffffffe

080076c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076d8:	46c0      	nop			@ (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	b002      	add	sp, #8
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	000a      	movs	r2, r1
 80076ea:	1cbb      	adds	r3, r7, #2
 80076ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b002      	add	sp, #8
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b5b0      	push	{r4, r5, r7, lr}
 80076fa:	b090      	sub	sp, #64	@ 0x40
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007700:	231a      	movs	r3, #26
 8007702:	2220      	movs	r2, #32
 8007704:	189b      	adds	r3, r3, r2
 8007706:	19db      	adds	r3, r3, r7
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	431a      	orrs	r2, r3
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	431a      	orrs	r2, r3
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	4313      	orrs	r3, r2
 8007722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4aaf      	ldr	r2, [pc, #700]	@ (80079e8 <UART_SetConfig+0x2f0>)
 800772c:	4013      	ands	r3, r2
 800772e:	0019      	movs	r1, r3
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007736:	430b      	orrs	r3, r1
 8007738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4aaa      	ldr	r2, [pc, #680]	@ (80079ec <UART_SetConfig+0x2f4>)
 8007742:	4013      	ands	r3, r2
 8007744:	0018      	movs	r0, r3
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	68d9      	ldr	r1, [r3, #12]
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	0003      	movs	r3, r0
 8007750:	430b      	orrs	r3, r1
 8007752:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4aa4      	ldr	r2, [pc, #656]	@ (80079f0 <UART_SetConfig+0x2f8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d004      	beq.n	800776e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800776a:	4313      	orrs	r3, r2
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	4a9f      	ldr	r2, [pc, #636]	@ (80079f4 <UART_SetConfig+0x2fc>)
 8007776:	4013      	ands	r3, r2
 8007778:	0019      	movs	r1, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007780:	430b      	orrs	r3, r1
 8007782:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778a:	220f      	movs	r2, #15
 800778c:	4393      	bics	r3, r2
 800778e:	0018      	movs	r0, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	0003      	movs	r3, r0
 800779a:	430b      	orrs	r3, r1
 800779c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a95      	ldr	r2, [pc, #596]	@ (80079f8 <UART_SetConfig+0x300>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d131      	bne.n	800780c <UART_SetConfig+0x114>
 80077a8:	4b94      	ldr	r3, [pc, #592]	@ (80079fc <UART_SetConfig+0x304>)
 80077aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ac:	2203      	movs	r2, #3
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d01d      	beq.n	80077f0 <UART_SetConfig+0xf8>
 80077b4:	d823      	bhi.n	80077fe <UART_SetConfig+0x106>
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d00c      	beq.n	80077d4 <UART_SetConfig+0xdc>
 80077ba:	d820      	bhi.n	80077fe <UART_SetConfig+0x106>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <UART_SetConfig+0xce>
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d00e      	beq.n	80077e2 <UART_SetConfig+0xea>
 80077c4:	e01b      	b.n	80077fe <UART_SetConfig+0x106>
 80077c6:	231b      	movs	r3, #27
 80077c8:	2220      	movs	r2, #32
 80077ca:	189b      	adds	r3, r3, r2
 80077cc:	19db      	adds	r3, r3, r7
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	e0b4      	b.n	800793e <UART_SetConfig+0x246>
 80077d4:	231b      	movs	r3, #27
 80077d6:	2220      	movs	r2, #32
 80077d8:	189b      	adds	r3, r3, r2
 80077da:	19db      	adds	r3, r3, r7
 80077dc:	2202      	movs	r2, #2
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e0ad      	b.n	800793e <UART_SetConfig+0x246>
 80077e2:	231b      	movs	r3, #27
 80077e4:	2220      	movs	r2, #32
 80077e6:	189b      	adds	r3, r3, r2
 80077e8:	19db      	adds	r3, r3, r7
 80077ea:	2204      	movs	r2, #4
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e0a6      	b.n	800793e <UART_SetConfig+0x246>
 80077f0:	231b      	movs	r3, #27
 80077f2:	2220      	movs	r2, #32
 80077f4:	189b      	adds	r3, r3, r2
 80077f6:	19db      	adds	r3, r3, r7
 80077f8:	2208      	movs	r2, #8
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e09f      	b.n	800793e <UART_SetConfig+0x246>
 80077fe:	231b      	movs	r3, #27
 8007800:	2220      	movs	r2, #32
 8007802:	189b      	adds	r3, r3, r2
 8007804:	19db      	adds	r3, r3, r7
 8007806:	2210      	movs	r2, #16
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e098      	b.n	800793e <UART_SetConfig+0x246>
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a7b      	ldr	r2, [pc, #492]	@ (8007a00 <UART_SetConfig+0x308>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d131      	bne.n	800787a <UART_SetConfig+0x182>
 8007816:	4b79      	ldr	r3, [pc, #484]	@ (80079fc <UART_SetConfig+0x304>)
 8007818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781a:	220c      	movs	r2, #12
 800781c:	4013      	ands	r3, r2
 800781e:	2b0c      	cmp	r3, #12
 8007820:	d01d      	beq.n	800785e <UART_SetConfig+0x166>
 8007822:	d823      	bhi.n	800786c <UART_SetConfig+0x174>
 8007824:	2b08      	cmp	r3, #8
 8007826:	d00c      	beq.n	8007842 <UART_SetConfig+0x14a>
 8007828:	d820      	bhi.n	800786c <UART_SetConfig+0x174>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <UART_SetConfig+0x13c>
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00e      	beq.n	8007850 <UART_SetConfig+0x158>
 8007832:	e01b      	b.n	800786c <UART_SetConfig+0x174>
 8007834:	231b      	movs	r3, #27
 8007836:	2220      	movs	r2, #32
 8007838:	189b      	adds	r3, r3, r2
 800783a:	19db      	adds	r3, r3, r7
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e07d      	b.n	800793e <UART_SetConfig+0x246>
 8007842:	231b      	movs	r3, #27
 8007844:	2220      	movs	r2, #32
 8007846:	189b      	adds	r3, r3, r2
 8007848:	19db      	adds	r3, r3, r7
 800784a:	2202      	movs	r2, #2
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e076      	b.n	800793e <UART_SetConfig+0x246>
 8007850:	231b      	movs	r3, #27
 8007852:	2220      	movs	r2, #32
 8007854:	189b      	adds	r3, r3, r2
 8007856:	19db      	adds	r3, r3, r7
 8007858:	2204      	movs	r2, #4
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	e06f      	b.n	800793e <UART_SetConfig+0x246>
 800785e:	231b      	movs	r3, #27
 8007860:	2220      	movs	r2, #32
 8007862:	189b      	adds	r3, r3, r2
 8007864:	19db      	adds	r3, r3, r7
 8007866:	2208      	movs	r2, #8
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e068      	b.n	800793e <UART_SetConfig+0x246>
 800786c:	231b      	movs	r3, #27
 800786e:	2220      	movs	r2, #32
 8007870:	189b      	adds	r3, r3, r2
 8007872:	19db      	adds	r3, r3, r7
 8007874:	2210      	movs	r2, #16
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	e061      	b.n	800793e <UART_SetConfig+0x246>
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a61      	ldr	r2, [pc, #388]	@ (8007a04 <UART_SetConfig+0x30c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d106      	bne.n	8007892 <UART_SetConfig+0x19a>
 8007884:	231b      	movs	r3, #27
 8007886:	2220      	movs	r2, #32
 8007888:	189b      	adds	r3, r3, r2
 800788a:	19db      	adds	r3, r3, r7
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	e055      	b.n	800793e <UART_SetConfig+0x246>
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a5c      	ldr	r2, [pc, #368]	@ (8007a08 <UART_SetConfig+0x310>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d106      	bne.n	80078aa <UART_SetConfig+0x1b2>
 800789c:	231b      	movs	r3, #27
 800789e:	2220      	movs	r2, #32
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	19db      	adds	r3, r3, r7
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e049      	b.n	800793e <UART_SetConfig+0x246>
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a50      	ldr	r2, [pc, #320]	@ (80079f0 <UART_SetConfig+0x2f8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d13e      	bne.n	8007932 <UART_SetConfig+0x23a>
 80078b4:	4b51      	ldr	r3, [pc, #324]	@ (80079fc <UART_SetConfig+0x304>)
 80078b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078b8:	23c0      	movs	r3, #192	@ 0xc0
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4013      	ands	r3, r2
 80078be:	22c0      	movs	r2, #192	@ 0xc0
 80078c0:	0112      	lsls	r2, r2, #4
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d027      	beq.n	8007916 <UART_SetConfig+0x21e>
 80078c6:	22c0      	movs	r2, #192	@ 0xc0
 80078c8:	0112      	lsls	r2, r2, #4
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d82a      	bhi.n	8007924 <UART_SetConfig+0x22c>
 80078ce:	2280      	movs	r2, #128	@ 0x80
 80078d0:	0112      	lsls	r2, r2, #4
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d011      	beq.n	80078fa <UART_SetConfig+0x202>
 80078d6:	2280      	movs	r2, #128	@ 0x80
 80078d8:	0112      	lsls	r2, r2, #4
 80078da:	4293      	cmp	r3, r2
 80078dc:	d822      	bhi.n	8007924 <UART_SetConfig+0x22c>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <UART_SetConfig+0x1f4>
 80078e2:	2280      	movs	r2, #128	@ 0x80
 80078e4:	00d2      	lsls	r2, r2, #3
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00e      	beq.n	8007908 <UART_SetConfig+0x210>
 80078ea:	e01b      	b.n	8007924 <UART_SetConfig+0x22c>
 80078ec:	231b      	movs	r3, #27
 80078ee:	2220      	movs	r2, #32
 80078f0:	189b      	adds	r3, r3, r2
 80078f2:	19db      	adds	r3, r3, r7
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e021      	b.n	800793e <UART_SetConfig+0x246>
 80078fa:	231b      	movs	r3, #27
 80078fc:	2220      	movs	r2, #32
 80078fe:	189b      	adds	r3, r3, r2
 8007900:	19db      	adds	r3, r3, r7
 8007902:	2202      	movs	r2, #2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e01a      	b.n	800793e <UART_SetConfig+0x246>
 8007908:	231b      	movs	r3, #27
 800790a:	2220      	movs	r2, #32
 800790c:	189b      	adds	r3, r3, r2
 800790e:	19db      	adds	r3, r3, r7
 8007910:	2204      	movs	r2, #4
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e013      	b.n	800793e <UART_SetConfig+0x246>
 8007916:	231b      	movs	r3, #27
 8007918:	2220      	movs	r2, #32
 800791a:	189b      	adds	r3, r3, r2
 800791c:	19db      	adds	r3, r3, r7
 800791e:	2208      	movs	r2, #8
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e00c      	b.n	800793e <UART_SetConfig+0x246>
 8007924:	231b      	movs	r3, #27
 8007926:	2220      	movs	r2, #32
 8007928:	189b      	adds	r3, r3, r2
 800792a:	19db      	adds	r3, r3, r7
 800792c:	2210      	movs	r2, #16
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e005      	b.n	800793e <UART_SetConfig+0x246>
 8007932:	231b      	movs	r3, #27
 8007934:	2220      	movs	r2, #32
 8007936:	189b      	adds	r3, r3, r2
 8007938:	19db      	adds	r3, r3, r7
 800793a:	2210      	movs	r2, #16
 800793c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a2b      	ldr	r2, [pc, #172]	@ (80079f0 <UART_SetConfig+0x2f8>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d000      	beq.n	800794a <UART_SetConfig+0x252>
 8007948:	e0a9      	b.n	8007a9e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800794a:	231b      	movs	r3, #27
 800794c:	2220      	movs	r2, #32
 800794e:	189b      	adds	r3, r3, r2
 8007950:	19db      	adds	r3, r3, r7
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b08      	cmp	r3, #8
 8007956:	d015      	beq.n	8007984 <UART_SetConfig+0x28c>
 8007958:	dc18      	bgt.n	800798c <UART_SetConfig+0x294>
 800795a:	2b04      	cmp	r3, #4
 800795c:	d00d      	beq.n	800797a <UART_SetConfig+0x282>
 800795e:	dc15      	bgt.n	800798c <UART_SetConfig+0x294>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <UART_SetConfig+0x272>
 8007964:	2b02      	cmp	r3, #2
 8007966:	d005      	beq.n	8007974 <UART_SetConfig+0x27c>
 8007968:	e010      	b.n	800798c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800796a:	f7fd faf9 	bl	8004f60 <HAL_RCC_GetPCLK1Freq>
 800796e:	0003      	movs	r3, r0
 8007970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007972:	e014      	b.n	800799e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b25      	ldr	r3, [pc, #148]	@ (8007a0c <UART_SetConfig+0x314>)
 8007976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007978:	e011      	b.n	800799e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fd fa65 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 800797e:	0003      	movs	r3, r0
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007982:	e00c      	b.n	800799e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007984:	2380      	movs	r3, #128	@ 0x80
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800798a:	e008      	b.n	800799e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007990:	231a      	movs	r3, #26
 8007992:	2220      	movs	r2, #32
 8007994:	189b      	adds	r3, r3, r2
 8007996:	19db      	adds	r3, r3, r7
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
        break;
 800799c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800799e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d100      	bne.n	80079a6 <UART_SetConfig+0x2ae>
 80079a4:	e14b      	b.n	8007c3e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079aa:	4b19      	ldr	r3, [pc, #100]	@ (8007a10 <UART_SetConfig+0x318>)
 80079ac:	0052      	lsls	r2, r2, #1
 80079ae:	5ad3      	ldrh	r3, [r2, r3]
 80079b0:	0019      	movs	r1, r3
 80079b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80079b4:	f7f8 fbb8 	bl	8000128 <__udivsi3>
 80079b8:	0003      	movs	r3, r0
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	0013      	movs	r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	189b      	adds	r3, r3, r2
 80079c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d305      	bcc.n	80079d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d91d      	bls.n	8007a14 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80079d8:	231a      	movs	r3, #26
 80079da:	2220      	movs	r2, #32
 80079dc:	189b      	adds	r3, r3, r2
 80079de:	19db      	adds	r3, r3, r7
 80079e0:	2201      	movs	r2, #1
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e12b      	b.n	8007c3e <UART_SetConfig+0x546>
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	cfff69f3 	.word	0xcfff69f3
 80079ec:	ffffcfff 	.word	0xffffcfff
 80079f0:	40008000 	.word	0x40008000
 80079f4:	11fff4ff 	.word	0x11fff4ff
 80079f8:	40013800 	.word	0x40013800
 80079fc:	40021000 	.word	0x40021000
 8007a00:	40004400 	.word	0x40004400
 8007a04:	40004800 	.word	0x40004800
 8007a08:	40004c00 	.word	0x40004c00
 8007a0c:	00f42400 	.word	0x00f42400
 8007a10:	08009c08 	.word	0x08009c08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a20:	4b92      	ldr	r3, [pc, #584]	@ (8007c6c <UART_SetConfig+0x574>)
 8007a22:	0052      	lsls	r2, r2, #1
 8007a24:	5ad3      	ldrh	r3, [r2, r3]
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	69b8      	ldr	r0, [r7, #24]
 8007a32:	69f9      	ldr	r1, [r7, #28]
 8007a34:	f7f8 fcee 	bl	8000414 <__aeabi_uldivmod>
 8007a38:	0002      	movs	r2, r0
 8007a3a:	000b      	movs	r3, r1
 8007a3c:	0e11      	lsrs	r1, r2, #24
 8007a3e:	021d      	lsls	r5, r3, #8
 8007a40:	430d      	orrs	r5, r1
 8007a42:	0214      	lsls	r4, r2, #8
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	60bb      	str	r3, [r7, #8]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68b8      	ldr	r0, [r7, #8]
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	1900      	adds	r0, r0, r4
 8007a56:	4169      	adcs	r1, r5
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f7f8 fcd5 	bl	8000414 <__aeabi_uldivmod>
 8007a6a:	0002      	movs	r2, r0
 8007a6c:	000b      	movs	r3, r1
 8007a6e:	0013      	movs	r3, r2
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a74:	23c0      	movs	r3, #192	@ 0xc0
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d309      	bcc.n	8007a90 <UART_SetConfig+0x398>
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a7e:	2380      	movs	r3, #128	@ 0x80
 8007a80:	035b      	lsls	r3, r3, #13
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d204      	bcs.n	8007a90 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e0d6      	b.n	8007c3e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007a90:	231a      	movs	r3, #26
 8007a92:	2220      	movs	r2, #32
 8007a94:	189b      	adds	r3, r3, r2
 8007a96:	19db      	adds	r3, r3, r7
 8007a98:	2201      	movs	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e0cf      	b.n	8007c3e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	69da      	ldr	r2, [r3, #28]
 8007aa2:	2380      	movs	r3, #128	@ 0x80
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d000      	beq.n	8007aac <UART_SetConfig+0x3b4>
 8007aaa:	e070      	b.n	8007b8e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007aac:	231b      	movs	r3, #27
 8007aae:	2220      	movs	r2, #32
 8007ab0:	189b      	adds	r3, r3, r2
 8007ab2:	19db      	adds	r3, r3, r7
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d015      	beq.n	8007ae6 <UART_SetConfig+0x3ee>
 8007aba:	dc18      	bgt.n	8007aee <UART_SetConfig+0x3f6>
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d00d      	beq.n	8007adc <UART_SetConfig+0x3e4>
 8007ac0:	dc15      	bgt.n	8007aee <UART_SetConfig+0x3f6>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <UART_SetConfig+0x3d4>
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d005      	beq.n	8007ad6 <UART_SetConfig+0x3de>
 8007aca:	e010      	b.n	8007aee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007acc:	f7fd fa48 	bl	8004f60 <HAL_RCC_GetPCLK1Freq>
 8007ad0:	0003      	movs	r3, r0
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad4:	e014      	b.n	8007b00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad6:	4b66      	ldr	r3, [pc, #408]	@ (8007c70 <UART_SetConfig+0x578>)
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ada:	e011      	b.n	8007b00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007adc:	f7fd f9b4 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ae4:	e00c      	b.n	8007b00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae6:	2380      	movs	r3, #128	@ 0x80
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aec:	e008      	b.n	8007b00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007af2:	231a      	movs	r3, #26
 8007af4:	2220      	movs	r2, #32
 8007af6:	189b      	adds	r3, r3, r2
 8007af8:	19db      	adds	r3, r3, r7
 8007afa:	2201      	movs	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
        break;
 8007afe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d100      	bne.n	8007b08 <UART_SetConfig+0x410>
 8007b06:	e09a      	b.n	8007c3e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b0c:	4b57      	ldr	r3, [pc, #348]	@ (8007c6c <UART_SetConfig+0x574>)
 8007b0e:	0052      	lsls	r2, r2, #1
 8007b10:	5ad3      	ldrh	r3, [r2, r3]
 8007b12:	0019      	movs	r1, r3
 8007b14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007b16:	f7f8 fb07 	bl	8000128 <__udivsi3>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	005a      	lsls	r2, r3, #1
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	18d2      	adds	r2, r2, r3
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	0019      	movs	r1, r3
 8007b2c:	0010      	movs	r0, r2
 8007b2e:	f7f8 fafb 	bl	8000128 <__udivsi3>
 8007b32:	0003      	movs	r3, r0
 8007b34:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	2b0f      	cmp	r3, #15
 8007b3a:	d921      	bls.n	8007b80 <UART_SetConfig+0x488>
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b3e:	2380      	movs	r3, #128	@ 0x80
 8007b40:	025b      	lsls	r3, r3, #9
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d21c      	bcs.n	8007b80 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	200e      	movs	r0, #14
 8007b4c:	2420      	movs	r4, #32
 8007b4e:	1903      	adds	r3, r0, r4
 8007b50:	19db      	adds	r3, r3, r7
 8007b52:	210f      	movs	r1, #15
 8007b54:	438a      	bics	r2, r1
 8007b56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2207      	movs	r2, #7
 8007b60:	4013      	ands	r3, r2
 8007b62:	b299      	uxth	r1, r3
 8007b64:	1903      	adds	r3, r0, r4
 8007b66:	19db      	adds	r3, r3, r7
 8007b68:	1902      	adds	r2, r0, r4
 8007b6a:	19d2      	adds	r2, r2, r7
 8007b6c:	8812      	ldrh	r2, [r2, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	1902      	adds	r2, r0, r4
 8007b78:	19d2      	adds	r2, r2, r7
 8007b7a:	8812      	ldrh	r2, [r2, #0]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	e05e      	b.n	8007c3e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007b80:	231a      	movs	r3, #26
 8007b82:	2220      	movs	r2, #32
 8007b84:	189b      	adds	r3, r3, r2
 8007b86:	19db      	adds	r3, r3, r7
 8007b88:	2201      	movs	r2, #1
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e057      	b.n	8007c3e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b8e:	231b      	movs	r3, #27
 8007b90:	2220      	movs	r2, #32
 8007b92:	189b      	adds	r3, r3, r2
 8007b94:	19db      	adds	r3, r3, r7
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d015      	beq.n	8007bc8 <UART_SetConfig+0x4d0>
 8007b9c:	dc18      	bgt.n	8007bd0 <UART_SetConfig+0x4d8>
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d00d      	beq.n	8007bbe <UART_SetConfig+0x4c6>
 8007ba2:	dc15      	bgt.n	8007bd0 <UART_SetConfig+0x4d8>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <UART_SetConfig+0x4b6>
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d005      	beq.n	8007bb8 <UART_SetConfig+0x4c0>
 8007bac:	e010      	b.n	8007bd0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bae:	f7fd f9d7 	bl	8004f60 <HAL_RCC_GetPCLK1Freq>
 8007bb2:	0003      	movs	r3, r0
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb6:	e014      	b.n	8007be2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8007c70 <UART_SetConfig+0x578>)
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bbc:	e011      	b.n	8007be2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bbe:	f7fd f943 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc6:	e00c      	b.n	8007be2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc8:	2380      	movs	r3, #128	@ 0x80
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bce:	e008      	b.n	8007be2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007bd4:	231a      	movs	r3, #26
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	189b      	adds	r3, r3, r2
 8007bda:	19db      	adds	r3, r3, r7
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
        break;
 8007be0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d02a      	beq.n	8007c3e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bec:	4b1f      	ldr	r3, [pc, #124]	@ (8007c6c <UART_SetConfig+0x574>)
 8007bee:	0052      	lsls	r2, r2, #1
 8007bf0:	5ad3      	ldrh	r3, [r2, r3]
 8007bf2:	0019      	movs	r1, r3
 8007bf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007bf6:	f7f8 fa97 	bl	8000128 <__udivsi3>
 8007bfa:	0003      	movs	r3, r0
 8007bfc:	001a      	movs	r2, r3
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	18d2      	adds	r2, r2, r3
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	0019      	movs	r1, r3
 8007c0c:	0010      	movs	r0, r2
 8007c0e:	f7f8 fa8b 	bl	8000128 <__udivsi3>
 8007c12:	0003      	movs	r3, r0
 8007c14:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	2b0f      	cmp	r3, #15
 8007c1a:	d90a      	bls.n	8007c32 <UART_SetConfig+0x53a>
 8007c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c1e:	2380      	movs	r3, #128	@ 0x80
 8007c20:	025b      	lsls	r3, r3, #9
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d205      	bcs.n	8007c32 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60da      	str	r2, [r3, #12]
 8007c30:	e005      	b.n	8007c3e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007c32:	231a      	movs	r3, #26
 8007c34:	2220      	movs	r2, #32
 8007c36:	189b      	adds	r3, r3, r2
 8007c38:	19db      	adds	r3, r3, r7
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	226a      	movs	r2, #106	@ 0x6a
 8007c42:	2101      	movs	r1, #1
 8007c44:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	2268      	movs	r2, #104	@ 0x68
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	2200      	movs	r2, #0
 8007c52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	2200      	movs	r2, #0
 8007c58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c5a:	231a      	movs	r3, #26
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	189b      	adds	r3, r3, r2
 8007c60:	19db      	adds	r3, r3, r7
 8007c62:	781b      	ldrb	r3, [r3, #0]
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b010      	add	sp, #64	@ 0x40
 8007c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c6c:	08009c08 	.word	0x08009c08
 8007c70:	00f42400 	.word	0x00f42400

08007c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	2208      	movs	r2, #8
 8007c82:	4013      	ands	r3, r2
 8007c84:	d00b      	beq.n	8007c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8007db8 <UART_AdvFeatureConfig+0x144>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	0019      	movs	r1, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d00b      	beq.n	8007cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4a43      	ldr	r2, [pc, #268]	@ (8007dbc <UART_AdvFeatureConfig+0x148>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d00b      	beq.n	8007ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8007dc0 <UART_AdvFeatureConfig+0x14c>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	0019      	movs	r1, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d00b      	beq.n	8007d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	4a34      	ldr	r2, [pc, #208]	@ (8007dc4 <UART_AdvFeatureConfig+0x150>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	0019      	movs	r1, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	2210      	movs	r2, #16
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d00b      	beq.n	8007d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc8 <UART_AdvFeatureConfig+0x154>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	0019      	movs	r1, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	4a25      	ldr	r2, [pc, #148]	@ (8007dcc <UART_AdvFeatureConfig+0x158>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	0019      	movs	r1, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4c:	2240      	movs	r2, #64	@ 0x40
 8007d4e:	4013      	ands	r3, r2
 8007d50:	d01d      	beq.n	8007d8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd0 <UART_AdvFeatureConfig+0x15c>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	0019      	movs	r1, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d6e:	2380      	movs	r3, #128	@ 0x80
 8007d70:	035b      	lsls	r3, r3, #13
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d10b      	bne.n	8007d8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	@ (8007dd4 <UART_AdvFeatureConfig+0x160>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	0019      	movs	r1, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d92:	2280      	movs	r2, #128	@ 0x80
 8007d94:	4013      	ands	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd8 <UART_AdvFeatureConfig+0x164>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	0019      	movs	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }
}
 8007db0:	46c0      	nop			@ (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	ffff7fff 	.word	0xffff7fff
 8007dbc:	fffdffff 	.word	0xfffdffff
 8007dc0:	fffeffff 	.word	0xfffeffff
 8007dc4:	fffbffff 	.word	0xfffbffff
 8007dc8:	ffffefff 	.word	0xffffefff
 8007dcc:	ffffdfff 	.word	0xffffdfff
 8007dd0:	ffefffff 	.word	0xffefffff
 8007dd4:	ff9fffff 	.word	0xff9fffff
 8007dd8:	fff7ffff 	.word	0xfff7ffff

08007ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b092      	sub	sp, #72	@ 0x48
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2290      	movs	r2, #144	@ 0x90
 8007de8:	2100      	movs	r1, #0
 8007dea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dec:	f7fa f96e 	bl	80020cc <HAL_GetTick>
 8007df0:	0003      	movs	r3, r0
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d12d      	bne.n	8007e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e04:	2280      	movs	r2, #128	@ 0x80
 8007e06:	0391      	lsls	r1, r2, #14
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4a47      	ldr	r2, [pc, #284]	@ (8007f28 <UART_CheckIdleState+0x14c>)
 8007e0c:	9200      	str	r2, [sp, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f000 f88e 	bl	8007f30 <UART_WaitOnFlagUntilTimeout>
 8007e14:	1e03      	subs	r3, r0, #0
 8007e16:	d022      	beq.n	8007e5e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e18:	f3ef 8310 	mrs	r3, PRIMASK
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e22:	2301      	movs	r3, #1
 8007e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e28:	f383 8810 	msr	PRIMASK, r3
}
 8007e2c:	46c0      	nop			@ (mov r8, r8)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2180      	movs	r1, #128	@ 0x80
 8007e3a:	438a      	bics	r2, r1
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e44:	f383 8810 	msr	PRIMASK, r3
}
 8007e48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2288      	movs	r2, #136	@ 0x88
 8007e4e:	2120      	movs	r1, #32
 8007e50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2284      	movs	r2, #132	@ 0x84
 8007e56:	2100      	movs	r1, #0
 8007e58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e060      	b.n	8007f20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2204      	movs	r2, #4
 8007e66:	4013      	ands	r3, r2
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d146      	bne.n	8007efa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e6e:	2280      	movs	r2, #128	@ 0x80
 8007e70:	03d1      	lsls	r1, r2, #15
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4a2c      	ldr	r2, [pc, #176]	@ (8007f28 <UART_CheckIdleState+0x14c>)
 8007e76:	9200      	str	r2, [sp, #0]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f000 f859 	bl	8007f30 <UART_WaitOnFlagUntilTimeout>
 8007e7e:	1e03      	subs	r3, r0, #0
 8007e80:	d03b      	beq.n	8007efa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e82:	f3ef 8310 	mrs	r3, PRIMASK
 8007e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f383 8810 	msr	PRIMASK, r3
}
 8007e96:	46c0      	nop			@ (mov r8, r8)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4922      	ldr	r1, [pc, #136]	@ (8007f2c <UART_CheckIdleState+0x150>)
 8007ea4:	400a      	ands	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f383 8810 	msr	PRIMASK, r3
}
 8007eb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007eba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f383 8810 	msr	PRIMASK, r3
}
 8007ec8:	46c0      	nop			@ (mov r8, r8)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	438a      	bics	r2, r1
 8007ed8:	609a      	str	r2, [r3, #8]
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f383 8810 	msr	PRIMASK, r3
}
 8007ee4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	228c      	movs	r2, #140	@ 0x8c
 8007eea:	2120      	movs	r1, #32
 8007eec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2284      	movs	r2, #132	@ 0x84
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e012      	b.n	8007f20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2288      	movs	r2, #136	@ 0x88
 8007efe:	2120      	movs	r1, #32
 8007f00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	228c      	movs	r2, #140	@ 0x8c
 8007f06:	2120      	movs	r1, #32
 8007f08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2284      	movs	r2, #132	@ 0x84
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	0018      	movs	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b010      	add	sp, #64	@ 0x40
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	01ffffff 	.word	0x01ffffff
 8007f2c:	fffffedf 	.word	0xfffffedf

08007f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	1dfb      	adds	r3, r7, #7
 8007f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f40:	e051      	b.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	3301      	adds	r3, #1
 8007f46:	d04e      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f48:	f7fa f8c0 	bl	80020cc <HAL_GetTick>
 8007f4c:	0002      	movs	r2, r0
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e051      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	d03b      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b80      	cmp	r3, #128	@ 0x80
 8007f72:	d038      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d035      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2208      	movs	r2, #8
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d111      	bne.n	8007fac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0018      	movs	r0, r3
 8007f94:	f000 f960 	bl	8008258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2290      	movs	r2, #144	@ 0x90
 8007f9c:	2108      	movs	r1, #8
 8007f9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2284      	movs	r2, #132	@ 0x84
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e02c      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69da      	ldr	r2, [r3, #28]
 8007fb2:	2380      	movs	r3, #128	@ 0x80
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	401a      	ands	r2, r3
 8007fb8:	2380      	movs	r3, #128	@ 0x80
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d112      	bne.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2280      	movs	r2, #128	@ 0x80
 8007fc6:	0112      	lsls	r2, r2, #4
 8007fc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f000 f943 	bl	8008258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2290      	movs	r2, #144	@ 0x90
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2284      	movs	r2, #132	@ 0x84
 8007fde:	2100      	movs	r1, #0
 8007fe0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e00f      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	425a      	negs	r2, r3
 8007ff6:	4153      	adcs	r3, r2
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	001a      	movs	r2, r3
 8007ffc:	1dfb      	adds	r3, r7, #7
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d09e      	beq.n	8007f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	0018      	movs	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	b004      	add	sp, #16
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b098      	sub	sp, #96	@ 0x60
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	1dbb      	adds	r3, r7, #6
 800801c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	1dba      	adds	r2, r7, #6
 8008028:	215c      	movs	r1, #92	@ 0x5c
 800802a:	8812      	ldrh	r2, [r2, #0]
 800802c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1dba      	adds	r2, r7, #6
 8008032:	215e      	movs	r1, #94	@ 0x5e
 8008034:	8812      	ldrh	r2, [r2, #0]
 8008036:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	2380      	movs	r3, #128	@ 0x80
 8008044:	015b      	lsls	r3, r3, #5
 8008046:	429a      	cmp	r2, r3
 8008048:	d10d      	bne.n	8008066 <UART_Start_Receive_IT+0x56>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d104      	bne.n	800805c <UART_Start_Receive_IT+0x4c>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2260      	movs	r2, #96	@ 0x60
 8008056:	497b      	ldr	r1, [pc, #492]	@ (8008244 <UART_Start_Receive_IT+0x234>)
 8008058:	5299      	strh	r1, [r3, r2]
 800805a:	e02e      	b.n	80080ba <UART_Start_Receive_IT+0xaa>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2260      	movs	r2, #96	@ 0x60
 8008060:	21ff      	movs	r1, #255	@ 0xff
 8008062:	5299      	strh	r1, [r3, r2]
 8008064:	e029      	b.n	80080ba <UART_Start_Receive_IT+0xaa>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10d      	bne.n	800808a <UART_Start_Receive_IT+0x7a>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d104      	bne.n	8008080 <UART_Start_Receive_IT+0x70>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2260      	movs	r2, #96	@ 0x60
 800807a:	21ff      	movs	r1, #255	@ 0xff
 800807c:	5299      	strh	r1, [r3, r2]
 800807e:	e01c      	b.n	80080ba <UART_Start_Receive_IT+0xaa>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2260      	movs	r2, #96	@ 0x60
 8008084:	217f      	movs	r1, #127	@ 0x7f
 8008086:	5299      	strh	r1, [r3, r2]
 8008088:	e017      	b.n	80080ba <UART_Start_Receive_IT+0xaa>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	2380      	movs	r3, #128	@ 0x80
 8008090:	055b      	lsls	r3, r3, #21
 8008092:	429a      	cmp	r2, r3
 8008094:	d10d      	bne.n	80080b2 <UART_Start_Receive_IT+0xa2>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <UART_Start_Receive_IT+0x98>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2260      	movs	r2, #96	@ 0x60
 80080a2:	217f      	movs	r1, #127	@ 0x7f
 80080a4:	5299      	strh	r1, [r3, r2]
 80080a6:	e008      	b.n	80080ba <UART_Start_Receive_IT+0xaa>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2260      	movs	r2, #96	@ 0x60
 80080ac:	213f      	movs	r1, #63	@ 0x3f
 80080ae:	5299      	strh	r1, [r3, r2]
 80080b0:	e003      	b.n	80080ba <UART_Start_Receive_IT+0xaa>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2260      	movs	r2, #96	@ 0x60
 80080b6:	2100      	movs	r1, #0
 80080b8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2290      	movs	r2, #144	@ 0x90
 80080be:	2100      	movs	r1, #0
 80080c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	228c      	movs	r2, #140	@ 0x8c
 80080c6:	2122      	movs	r1, #34	@ 0x22
 80080c8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ca:	f3ef 8310 	mrs	r3, PRIMASK
 80080ce:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80080d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080d4:	2301      	movs	r3, #1
 80080d6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080da:	f383 8810 	msr	PRIMASK, r3
}
 80080de:	46c0      	nop			@ (mov r8, r8)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2101      	movs	r1, #1
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f6:	f383 8810 	msr	PRIMASK, r3
}
 80080fa:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008100:	2380      	movs	r3, #128	@ 0x80
 8008102:	059b      	lsls	r3, r3, #22
 8008104:	429a      	cmp	r2, r3
 8008106:	d150      	bne.n	80081aa <UART_Start_Receive_IT+0x19a>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2268      	movs	r2, #104	@ 0x68
 800810c:	5a9b      	ldrh	r3, [r3, r2]
 800810e:	1dba      	adds	r2, r7, #6
 8008110:	8812      	ldrh	r2, [r2, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d349      	bcc.n	80081aa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	2380      	movs	r3, #128	@ 0x80
 800811c:	015b      	lsls	r3, r3, #5
 800811e:	429a      	cmp	r2, r3
 8008120:	d107      	bne.n	8008132 <UART_Start_Receive_IT+0x122>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a46      	ldr	r2, [pc, #280]	@ (8008248 <UART_Start_Receive_IT+0x238>)
 800812e:	675a      	str	r2, [r3, #116]	@ 0x74
 8008130:	e002      	b.n	8008138 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4a45      	ldr	r2, [pc, #276]	@ (800824c <UART_Start_Receive_IT+0x23c>)
 8008136:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d019      	beq.n	8008174 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008140:	f3ef 8310 	mrs	r3, PRIMASK
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8008146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800814a:	2301      	movs	r3, #1
 800814c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008150:	f383 8810 	msr	PRIMASK, r3
}
 8008154:	46c0      	nop			@ (mov r8, r8)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2180      	movs	r1, #128	@ 0x80
 8008162:	0049      	lsls	r1, r1, #1
 8008164:	430a      	orrs	r2, r1
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800816e:	f383 8810 	msr	PRIMASK, r3
}
 8008172:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008174:	f3ef 8310 	mrs	r3, PRIMASK
 8008178:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800817c:	657b      	str	r3, [r7, #84]	@ 0x54
 800817e:	2301      	movs	r3, #1
 8008180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008184:	f383 8810 	msr	PRIMASK, r3
}
 8008188:	46c0      	nop			@ (mov r8, r8)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2180      	movs	r1, #128	@ 0x80
 8008196:	0549      	lsls	r1, r1, #21
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800819e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	f383 8810 	msr	PRIMASK, r3
}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	e047      	b.n	800823a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	2380      	movs	r3, #128	@ 0x80
 80081b0:	015b      	lsls	r3, r3, #5
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d107      	bne.n	80081c6 <UART_Start_Receive_IT+0x1b6>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4a23      	ldr	r2, [pc, #140]	@ (8008250 <UART_Start_Receive_IT+0x240>)
 80081c2:	675a      	str	r2, [r3, #116]	@ 0x74
 80081c4:	e002      	b.n	80081cc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4a22      	ldr	r2, [pc, #136]	@ (8008254 <UART_Start_Receive_IT+0x244>)
 80081ca:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d019      	beq.n	8008208 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d4:	f3ef 8310 	mrs	r3, PRIMASK
 80081d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80081da:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80081dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081de:	2301      	movs	r3, #1
 80081e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f383 8810 	msr	PRIMASK, r3
}
 80081e8:	46c0      	nop			@ (mov r8, r8)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2190      	movs	r1, #144	@ 0x90
 80081f6:	0049      	lsls	r1, r1, #1
 80081f8:	430a      	orrs	r2, r1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	f383 8810 	msr	PRIMASK, r3
}
 8008206:	e018      	b.n	800823a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008208:	f3ef 8310 	mrs	r3, PRIMASK
 800820c:	613b      	str	r3, [r7, #16]
  return(result);
 800820e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008210:	653b      	str	r3, [r7, #80]	@ 0x50
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f383 8810 	msr	PRIMASK, r3
}
 800821c:	46c0      	nop			@ (mov r8, r8)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2120      	movs	r1, #32
 800822a:	430a      	orrs	r2, r1
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	0018      	movs	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	b018      	add	sp, #96	@ 0x60
 8008242:	bd80      	pop	{r7, pc}
 8008244:	000001ff 	.word	0x000001ff
 8008248:	08008a75 	.word	0x08008a75
 800824c:	08008735 	.word	0x08008735
 8008250:	08008571 	.word	0x08008571
 8008254:	080083ad 	.word	0x080083ad

08008258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08e      	sub	sp, #56	@ 0x38
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008260:	f3ef 8310 	mrs	r3, PRIMASK
 8008264:	617b      	str	r3, [r7, #20]
  return(result);
 8008266:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
 800826a:	2301      	movs	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	f383 8810 	msr	PRIMASK, r3
}
 8008274:	46c0      	nop			@ (mov r8, r8)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4926      	ldr	r1, [pc, #152]	@ (800831c <UART_EndRxTransfer+0xc4>)
 8008282:	400a      	ands	r2, r1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	f383 8810 	msr	PRIMASK, r3
}
 8008290:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008292:	f3ef 8310 	mrs	r3, PRIMASK
 8008296:	623b      	str	r3, [r7, #32]
  return(result);
 8008298:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800829a:	633b      	str	r3, [r7, #48]	@ 0x30
 800829c:	2301      	movs	r3, #1
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	f383 8810 	msr	PRIMASK, r3
}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	491b      	ldr	r1, [pc, #108]	@ (8008320 <UART_EndRxTransfer+0xc8>)
 80082b4:	400a      	ands	r2, r1
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082be:	f383 8810 	msr	PRIMASK, r3
}
 80082c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d118      	bne.n	80082fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082cc:	f3ef 8310 	mrs	r3, PRIMASK
 80082d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082d6:	2301      	movs	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f383 8810 	msr	PRIMASK, r3
}
 80082e0:	46c0      	nop			@ (mov r8, r8)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2110      	movs	r1, #16
 80082ee:	438a      	bics	r2, r1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f383 8810 	msr	PRIMASK, r3
}
 80082fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	228c      	movs	r2, #140	@ 0x8c
 8008302:	2120      	movs	r1, #32
 8008304:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008312:	46c0      	nop			@ (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b00e      	add	sp, #56	@ 0x38
 8008318:	bd80      	pop	{r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	fffffedf 	.word	0xfffffedf
 8008320:	effffffe 	.word	0xeffffffe

08008324 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	225e      	movs	r2, #94	@ 0x5e
 8008336:	2100      	movs	r1, #0
 8008338:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2256      	movs	r2, #86	@ 0x56
 800833e:	2100      	movs	r1, #0
 8008340:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	0018      	movs	r0, r3
 8008346:	f7ff f9c3 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	46bd      	mov	sp, r7
 800834e:	b004      	add	sp, #16
 8008350:	bd80      	pop	{r7, pc}

08008352 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800835a:	f3ef 8310 	mrs	r3, PRIMASK
 800835e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008360:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	2301      	movs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f383 8810 	msr	PRIMASK, r3
}
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2140      	movs	r1, #64	@ 0x40
 800837c:	438a      	bics	r2, r1
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f383 8810 	msr	PRIMASK, r3
}
 800838a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2288      	movs	r2, #136	@ 0x88
 8008390:	2120      	movs	r1, #32
 8008392:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	0018      	movs	r0, r3
 800839e:	f7ff f98f 	bl	80076c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083a2:	46c0      	nop			@ (mov r8, r8)
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b006      	add	sp, #24
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b094      	sub	sp, #80	@ 0x50
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80083b4:	204e      	movs	r0, #78	@ 0x4e
 80083b6:	183b      	adds	r3, r7, r0
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	2160      	movs	r1, #96	@ 0x60
 80083bc:	5a52      	ldrh	r2, [r2, r1]
 80083be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	228c      	movs	r2, #140	@ 0x8c
 80083c4:	589b      	ldr	r3, [r3, r2]
 80083c6:	2b22      	cmp	r3, #34	@ 0x22
 80083c8:	d000      	beq.n	80083cc <UART_RxISR_8BIT+0x20>
 80083ca:	e0bf      	b.n	800854c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083d2:	214c      	movs	r1, #76	@ 0x4c
 80083d4:	187b      	adds	r3, r7, r1
 80083d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083d8:	187b      	adds	r3, r7, r1
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	183b      	adds	r3, r7, r0
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b2d9      	uxtb	r1, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e8:	400a      	ands	r2, r1
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	225e      	movs	r2, #94	@ 0x5e
 80083fc:	5a9b      	ldrh	r3, [r3, r2]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b299      	uxth	r1, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	225e      	movs	r2, #94	@ 0x5e
 8008408:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	225e      	movs	r2, #94	@ 0x5e
 800840e:	5a9b      	ldrh	r3, [r3, r2]
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d000      	beq.n	8008418 <UART_RxISR_8BIT+0x6c>
 8008416:	e0a1      	b.n	800855c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008418:	f3ef 8310 	mrs	r3, PRIMASK
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008422:	2301      	movs	r3, #1
 8008424:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	f383 8810 	msr	PRIMASK, r3
}
 800842c:	46c0      	nop			@ (mov r8, r8)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	494a      	ldr	r1, [pc, #296]	@ (8008564 <UART_RxISR_8BIT+0x1b8>)
 800843a:	400a      	ands	r2, r1
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008444:	f383 8810 	msr	PRIMASK, r3
}
 8008448:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800844a:	f3ef 8310 	mrs	r3, PRIMASK
 800844e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	647b      	str	r3, [r7, #68]	@ 0x44
 8008454:	2301      	movs	r3, #1
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	f383 8810 	msr	PRIMASK, r3
}
 800845e:	46c0      	nop			@ (mov r8, r8)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2101      	movs	r1, #1
 800846c:	438a      	bics	r2, r1
 800846e:	609a      	str	r2, [r3, #8]
 8008470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008472:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	f383 8810 	msr	PRIMASK, r3
}
 800847a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	228c      	movs	r2, #140	@ 0x8c
 8008480:	2120      	movs	r1, #32
 8008482:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a34      	ldr	r2, [pc, #208]	@ (8008568 <UART_RxISR_8BIT+0x1bc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01f      	beq.n	80084da <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	2380      	movs	r3, #128	@ 0x80
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	4013      	ands	r3, r2
 80084a6:	d018      	beq.n	80084da <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a8:	f3ef 8310 	mrs	r3, PRIMASK
 80084ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80084ae:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80084b2:	2301      	movs	r3, #1
 80084b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	f383 8810 	msr	PRIMASK, r3
}
 80084bc:	46c0      	nop			@ (mov r8, r8)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4928      	ldr	r1, [pc, #160]	@ (800856c <UART_RxISR_8BIT+0x1c0>)
 80084ca:	400a      	ands	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f383 8810 	msr	PRIMASK, r3
}
 80084d8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d12f      	bne.n	8008542 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084e8:	f3ef 8310 	mrs	r3, PRIMASK
 80084ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80084ee:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f2:	2301      	movs	r3, #1
 80084f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f383 8810 	msr	PRIMASK, r3
}
 80084fc:	46c0      	nop			@ (mov r8, r8)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2110      	movs	r1, #16
 800850a:	438a      	bics	r2, r1
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f383 8810 	msr	PRIMASK, r3
}
 8008518:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2210      	movs	r2, #16
 8008522:	4013      	ands	r3, r2
 8008524:	2b10      	cmp	r3, #16
 8008526:	d103      	bne.n	8008530 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2210      	movs	r2, #16
 800852e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	225c      	movs	r2, #92	@ 0x5c
 8008534:	5a9a      	ldrh	r2, [r3, r2]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	0011      	movs	r1, r2
 800853a:	0018      	movs	r0, r3
 800853c:	f7ff f8d0 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008540:	e00c      	b.n	800855c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	0018      	movs	r0, r3
 8008546:	f7f8 f87b 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 800854a:	e007      	b.n	800855c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2108      	movs	r1, #8
 8008558:	430a      	orrs	r2, r1
 800855a:	619a      	str	r2, [r3, #24]
}
 800855c:	46c0      	nop			@ (mov r8, r8)
 800855e:	46bd      	mov	sp, r7
 8008560:	b014      	add	sp, #80	@ 0x50
 8008562:	bd80      	pop	{r7, pc}
 8008564:	fffffedf 	.word	0xfffffedf
 8008568:	40008000 	.word	0x40008000
 800856c:	fbffffff 	.word	0xfbffffff

08008570 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b094      	sub	sp, #80	@ 0x50
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008578:	204e      	movs	r0, #78	@ 0x4e
 800857a:	183b      	adds	r3, r7, r0
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	2160      	movs	r1, #96	@ 0x60
 8008580:	5a52      	ldrh	r2, [r2, r1]
 8008582:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	228c      	movs	r2, #140	@ 0x8c
 8008588:	589b      	ldr	r3, [r3, r2]
 800858a:	2b22      	cmp	r3, #34	@ 0x22
 800858c:	d000      	beq.n	8008590 <UART_RxISR_16BIT+0x20>
 800858e:	e0bf      	b.n	8008710 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008596:	214c      	movs	r1, #76	@ 0x4c
 8008598:	187b      	adds	r3, r7, r1
 800859a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	183a      	adds	r2, r7, r0
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	8812      	ldrh	r2, [r2, #0]
 80085aa:	4013      	ands	r3, r2
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085b6:	1c9a      	adds	r2, r3, #2
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	225e      	movs	r2, #94	@ 0x5e
 80085c0:	5a9b      	ldrh	r3, [r3, r2]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b299      	uxth	r1, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	225e      	movs	r2, #94	@ 0x5e
 80085cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	225e      	movs	r2, #94	@ 0x5e
 80085d2:	5a9b      	ldrh	r3, [r3, r2]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d000      	beq.n	80085dc <UART_RxISR_16BIT+0x6c>
 80085da:	e0a1      	b.n	8008720 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085dc:	f3ef 8310 	mrs	r3, PRIMASK
 80085e0:	623b      	str	r3, [r7, #32]
  return(result);
 80085e2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e6:	2301      	movs	r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	f383 8810 	msr	PRIMASK, r3
}
 80085f0:	46c0      	nop			@ (mov r8, r8)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	494a      	ldr	r1, [pc, #296]	@ (8008728 <UART_RxISR_16BIT+0x1b8>)
 80085fe:	400a      	ands	r2, r1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008604:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	f383 8810 	msr	PRIMASK, r3
}
 800860c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860e:	f3ef 8310 	mrs	r3, PRIMASK
 8008612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008616:	643b      	str	r3, [r7, #64]	@ 0x40
 8008618:	2301      	movs	r3, #1
 800861a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	f383 8810 	msr	PRIMASK, r3
}
 8008622:	46c0      	nop			@ (mov r8, r8)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2101      	movs	r1, #1
 8008630:	438a      	bics	r2, r1
 8008632:	609a      	str	r2, [r3, #8]
 8008634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863a:	f383 8810 	msr	PRIMASK, r3
}
 800863e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	228c      	movs	r2, #140	@ 0x8c
 8008644:	2120      	movs	r1, #32
 8008646:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a34      	ldr	r2, [pc, #208]	@ (800872c <UART_RxISR_16BIT+0x1bc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d01f      	beq.n	800869e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	2380      	movs	r3, #128	@ 0x80
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	4013      	ands	r3, r2
 800866a:	d018      	beq.n	800869e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	617b      	str	r3, [r7, #20]
  return(result);
 8008672:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008676:	2301      	movs	r3, #1
 8008678:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	f383 8810 	msr	PRIMASK, r3
}
 8008680:	46c0      	nop			@ (mov r8, r8)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4928      	ldr	r1, [pc, #160]	@ (8008730 <UART_RxISR_16BIT+0x1c0>)
 800868e:	400a      	ands	r2, r1
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f383 8810 	msr	PRIMASK, r3
}
 800869c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d12f      	bne.n	8008706 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ac:	f3ef 8310 	mrs	r3, PRIMASK
 80086b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80086b2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086b6:	2301      	movs	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f383 8810 	msr	PRIMASK, r3
}
 80086c0:	46c0      	nop			@ (mov r8, r8)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2110      	movs	r1, #16
 80086ce:	438a      	bics	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f383 8810 	msr	PRIMASK, r3
}
 80086dc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2210      	movs	r2, #16
 80086e6:	4013      	ands	r3, r2
 80086e8:	2b10      	cmp	r3, #16
 80086ea:	d103      	bne.n	80086f4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2210      	movs	r2, #16
 80086f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	225c      	movs	r2, #92	@ 0x5c
 80086f8:	5a9a      	ldrh	r2, [r3, r2]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	0011      	movs	r1, r2
 80086fe:	0018      	movs	r0, r3
 8008700:	f7fe ffee 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008704:	e00c      	b.n	8008720 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	0018      	movs	r0, r3
 800870a:	f7f7 ff99 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 800870e:	e007      	b.n	8008720 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2108      	movs	r1, #8
 800871c:	430a      	orrs	r2, r1
 800871e:	619a      	str	r2, [r3, #24]
}
 8008720:	46c0      	nop			@ (mov r8, r8)
 8008722:	46bd      	mov	sp, r7
 8008724:	b014      	add	sp, #80	@ 0x50
 8008726:	bd80      	pop	{r7, pc}
 8008728:	fffffedf 	.word	0xfffffedf
 800872c:	40008000 	.word	0x40008000
 8008730:	fbffffff 	.word	0xfbffffff

08008734 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b0a0      	sub	sp, #128	@ 0x80
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800873c:	237a      	movs	r3, #122	@ 0x7a
 800873e:	18fb      	adds	r3, r7, r3
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	2160      	movs	r1, #96	@ 0x60
 8008744:	5a52      	ldrh	r2, [r2, r1]
 8008746:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	228c      	movs	r2, #140	@ 0x8c
 8008764:	589b      	ldr	r3, [r3, r2]
 8008766:	2b22      	cmp	r3, #34	@ 0x22
 8008768:	d000      	beq.n	800876c <UART_RxISR_8BIT_FIFOEN+0x38>
 800876a:	e16a      	b.n	8008a42 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800876c:	236e      	movs	r3, #110	@ 0x6e
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	2168      	movs	r1, #104	@ 0x68
 8008774:	5a52      	ldrh	r2, [r2, r1]
 8008776:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008778:	e111      	b.n	800899e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008780:	216c      	movs	r1, #108	@ 0x6c
 8008782:	187b      	adds	r3, r7, r1
 8008784:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008786:	187b      	adds	r3, r7, r1
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b2da      	uxtb	r2, r3
 800878c:	237a      	movs	r3, #122	@ 0x7a
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b2d9      	uxtb	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008798:	400a      	ands	r2, r1
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	225e      	movs	r2, #94	@ 0x5e
 80087ac:	5a9b      	ldrh	r3, [r3, r2]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b299      	uxth	r1, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	225e      	movs	r2, #94	@ 0x5e
 80087b8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087c4:	2207      	movs	r2, #7
 80087c6:	4013      	ands	r3, r2
 80087c8:	d049      	beq.n	800885e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087cc:	2201      	movs	r2, #1
 80087ce:	4013      	ands	r3, r2
 80087d0:	d010      	beq.n	80087f4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80087d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80087d4:	2380      	movs	r3, #128	@ 0x80
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4013      	ands	r3, r2
 80087da:	d00b      	beq.n	80087f4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2201      	movs	r2, #1
 80087e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2290      	movs	r2, #144	@ 0x90
 80087e8:	589b      	ldr	r3, [r3, r2]
 80087ea:	2201      	movs	r2, #1
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2190      	movs	r1, #144	@ 0x90
 80087f2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087f6:	2202      	movs	r2, #2
 80087f8:	4013      	ands	r3, r2
 80087fa:	d00f      	beq.n	800881c <UART_RxISR_8BIT_FIFOEN+0xe8>
 80087fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087fe:	2201      	movs	r2, #1
 8008800:	4013      	ands	r3, r2
 8008802:	d00b      	beq.n	800881c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2202      	movs	r2, #2
 800880a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2290      	movs	r2, #144	@ 0x90
 8008810:	589b      	ldr	r3, [r3, r2]
 8008812:	2204      	movs	r2, #4
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2190      	movs	r1, #144	@ 0x90
 800881a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800881c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800881e:	2204      	movs	r2, #4
 8008820:	4013      	ands	r3, r2
 8008822:	d00f      	beq.n	8008844 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008826:	2201      	movs	r2, #1
 8008828:	4013      	ands	r3, r2
 800882a:	d00b      	beq.n	8008844 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2204      	movs	r2, #4
 8008832:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2290      	movs	r2, #144	@ 0x90
 8008838:	589b      	ldr	r3, [r3, r2]
 800883a:	2202      	movs	r2, #2
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2190      	movs	r1, #144	@ 0x90
 8008842:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2290      	movs	r2, #144	@ 0x90
 8008848:	589b      	ldr	r3, [r3, r2]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d007      	beq.n	800885e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	0018      	movs	r0, r3
 8008852:	f7fe ff3d 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2290      	movs	r2, #144	@ 0x90
 800885a:	2100      	movs	r1, #0
 800885c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	225e      	movs	r2, #94	@ 0x5e
 8008862:	5a9b      	ldrh	r3, [r3, r2]
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d000      	beq.n	800886c <UART_RxISR_8BIT_FIFOEN+0x138>
 800886a:	e098      	b.n	800899e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886c:	f3ef 8310 	mrs	r3, PRIMASK
 8008870:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008876:	2301      	movs	r3, #1
 8008878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887c:	f383 8810 	msr	PRIMASK, r3
}
 8008880:	46c0      	nop			@ (mov r8, r8)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4973      	ldr	r1, [pc, #460]	@ (8008a5c <UART_RxISR_8BIT_FIFOEN+0x328>)
 800888e:	400a      	ands	r2, r1
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008894:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008898:	f383 8810 	msr	PRIMASK, r3
}
 800889c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800889e:	f3ef 8310 	mrs	r3, PRIMASK
 80088a2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80088a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80088a8:	2301      	movs	r3, #1
 80088aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ae:	f383 8810 	msr	PRIMASK, r3
}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4968      	ldr	r1, [pc, #416]	@ (8008a60 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80088c0:	400a      	ands	r2, r1
 80088c2:	609a      	str	r2, [r3, #8]
 80088c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ca:	f383 8810 	msr	PRIMASK, r3
}
 80088ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	228c      	movs	r2, #140	@ 0x8c
 80088d4:	2120      	movs	r1, #32
 80088d6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a5e      	ldr	r2, [pc, #376]	@ (8008a64 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01f      	beq.n	800892e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	2380      	movs	r3, #128	@ 0x80
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	4013      	ands	r3, r2
 80088fa:	d018      	beq.n	800892e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008904:	663b      	str	r3, [r7, #96]	@ 0x60
 8008906:	2301      	movs	r3, #1
 8008908:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890c:	f383 8810 	msr	PRIMASK, r3
}
 8008910:	46c0      	nop			@ (mov r8, r8)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4952      	ldr	r1, [pc, #328]	@ (8008a68 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800891e:	400a      	ands	r2, r1
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008928:	f383 8810 	msr	PRIMASK, r3
}
 800892c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d12f      	bne.n	8008996 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893c:	f3ef 8310 	mrs	r3, PRIMASK
 8008940:	623b      	str	r3, [r7, #32]
  return(result);
 8008942:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008946:	2301      	movs	r3, #1
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	f383 8810 	msr	PRIMASK, r3
}
 8008950:	46c0      	nop			@ (mov r8, r8)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2110      	movs	r1, #16
 800895e:	438a      	bics	r2, r1
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008964:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008968:	f383 8810 	msr	PRIMASK, r3
}
 800896c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	2210      	movs	r2, #16
 8008976:	4013      	ands	r3, r2
 8008978:	2b10      	cmp	r3, #16
 800897a:	d103      	bne.n	8008984 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2210      	movs	r2, #16
 8008982:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	225c      	movs	r2, #92	@ 0x5c
 8008988:	5a9a      	ldrh	r2, [r3, r2]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	0011      	movs	r1, r2
 800898e:	0018      	movs	r0, r3
 8008990:	f7fe fea6 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
 8008994:	e003      	b.n	800899e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	0018      	movs	r0, r3
 800899a:	f7f7 fe51 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800899e:	236e      	movs	r3, #110	@ 0x6e
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80089a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089aa:	2220      	movs	r2, #32
 80089ac:	4013      	ands	r3, r2
 80089ae:	d000      	beq.n	80089b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80089b0:	e6e3      	b.n	800877a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089b2:	205a      	movs	r0, #90	@ 0x5a
 80089b4:	183b      	adds	r3, r7, r0
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	215e      	movs	r1, #94	@ 0x5e
 80089ba:	5a52      	ldrh	r2, [r2, r1]
 80089bc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089be:	0001      	movs	r1, r0
 80089c0:	187b      	adds	r3, r7, r1
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d044      	beq.n	8008a52 <UART_RxISR_8BIT_FIFOEN+0x31e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2268      	movs	r2, #104	@ 0x68
 80089cc:	5a9b      	ldrh	r3, [r3, r2]
 80089ce:	187a      	adds	r2, r7, r1
 80089d0:	8812      	ldrh	r2, [r2, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d23d      	bcs.n	8008a52 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089d6:	f3ef 8310 	mrs	r3, PRIMASK
 80089da:	60bb      	str	r3, [r7, #8]
  return(result);
 80089dc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089de:	657b      	str	r3, [r7, #84]	@ 0x54
 80089e0:	2301      	movs	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689a      	ldr	r2, [r3, #8]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	491d      	ldr	r1, [pc, #116]	@ (8008a6c <UART_RxISR_8BIT_FIFOEN+0x338>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f383 8810 	msr	PRIMASK, r3
}
 8008a06:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a19      	ldr	r2, [pc, #100]	@ (8008a70 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8008a0c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a12:	617b      	str	r3, [r7, #20]
  return(result);
 8008a14:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a18:	2301      	movs	r3, #1
 8008a1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f383 8810 	msr	PRIMASK, r3
}
 8008a22:	46c0      	nop			@ (mov r8, r8)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2120      	movs	r1, #32
 8008a30:	430a      	orrs	r2, r1
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f383 8810 	msr	PRIMASK, r3
}
 8008a3e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a40:	e007      	b.n	8008a52 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699a      	ldr	r2, [r3, #24]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2108      	movs	r1, #8
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	619a      	str	r2, [r3, #24]
}
 8008a52:	46c0      	nop			@ (mov r8, r8)
 8008a54:	46bd      	mov	sp, r7
 8008a56:	b020      	add	sp, #128	@ 0x80
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	fffffeff 	.word	0xfffffeff
 8008a60:	effffffe 	.word	0xeffffffe
 8008a64:	40008000 	.word	0x40008000
 8008a68:	fbffffff 	.word	0xfbffffff
 8008a6c:	efffffff 	.word	0xefffffff
 8008a70:	080083ad 	.word	0x080083ad

08008a74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b0a2      	sub	sp, #136	@ 0x88
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a7c:	2382      	movs	r3, #130	@ 0x82
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	2160      	movs	r1, #96	@ 0x60
 8008a84:	5a52      	ldrh	r2, [r2, r1]
 8008a86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	2284      	movs	r2, #132	@ 0x84
 8008a90:	18ba      	adds	r2, r7, r2
 8008a92:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	228c      	movs	r2, #140	@ 0x8c
 8008aa8:	589b      	ldr	r3, [r3, r2]
 8008aaa:	2b22      	cmp	r3, #34	@ 0x22
 8008aac:	d000      	beq.n	8008ab0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8008aae:	e174      	b.n	8008d9a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ab0:	2376      	movs	r3, #118	@ 0x76
 8008ab2:	18fb      	adds	r3, r7, r3
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	2168      	movs	r1, #104	@ 0x68
 8008ab8:	5a52      	ldrh	r2, [r2, r1]
 8008aba:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008abc:	e119      	b.n	8008cf2 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ac4:	2174      	movs	r1, #116	@ 0x74
 8008ac6:	187b      	adds	r3, r7, r1
 8008ac8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ace:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8008ad0:	187b      	adds	r3, r7, r1
 8008ad2:	2282      	movs	r2, #130	@ 0x82
 8008ad4:	18ba      	adds	r2, r7, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	8812      	ldrh	r2, [r2, #0]
 8008ada:	4013      	ands	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	1c9a      	adds	r2, r3, #2
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	225e      	movs	r2, #94	@ 0x5e
 8008af0:	5a9b      	ldrh	r3, [r3, r2]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	b299      	uxth	r1, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	225e      	movs	r2, #94	@ 0x5e
 8008afc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	2184      	movs	r1, #132	@ 0x84
 8008b06:	187a      	adds	r2, r7, r1
 8008b08:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b0a:	187b      	adds	r3, r7, r1
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2207      	movs	r2, #7
 8008b10:	4013      	ands	r3, r2
 8008b12:	d04e      	beq.n	8008bb2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b14:	187b      	adds	r3, r7, r1
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d010      	beq.n	8008b40 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8008b1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008b20:	2380      	movs	r3, #128	@ 0x80
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	4013      	ands	r3, r2
 8008b26:	d00b      	beq.n	8008b40 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2290      	movs	r2, #144	@ 0x90
 8008b34:	589b      	ldr	r3, [r3, r2]
 8008b36:	2201      	movs	r2, #1
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2190      	movs	r1, #144	@ 0x90
 8008b3e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b40:	2384      	movs	r3, #132	@ 0x84
 8008b42:	18fb      	adds	r3, r7, r3
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2202      	movs	r2, #2
 8008b48:	4013      	ands	r3, r2
 8008b4a:	d00f      	beq.n	8008b6c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4013      	ands	r3, r2
 8008b52:	d00b      	beq.n	8008b6c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2290      	movs	r2, #144	@ 0x90
 8008b60:	589b      	ldr	r3, [r3, r2]
 8008b62:	2204      	movs	r2, #4
 8008b64:	431a      	orrs	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2190      	movs	r1, #144	@ 0x90
 8008b6a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b6c:	2384      	movs	r3, #132	@ 0x84
 8008b6e:	18fb      	adds	r3, r7, r3
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2204      	movs	r2, #4
 8008b74:	4013      	ands	r3, r2
 8008b76:	d00f      	beq.n	8008b98 <UART_RxISR_16BIT_FIFOEN+0x124>
 8008b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d00b      	beq.n	8008b98 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2204      	movs	r2, #4
 8008b86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2290      	movs	r2, #144	@ 0x90
 8008b8c:	589b      	ldr	r3, [r3, r2]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2190      	movs	r1, #144	@ 0x90
 8008b96:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2290      	movs	r2, #144	@ 0x90
 8008b9c:	589b      	ldr	r3, [r3, r2]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f7fe fd93 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2290      	movs	r2, #144	@ 0x90
 8008bae:	2100      	movs	r1, #0
 8008bb0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	225e      	movs	r2, #94	@ 0x5e
 8008bb6:	5a9b      	ldrh	r3, [r3, r2]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d000      	beq.n	8008bc0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8008bbe:	e098      	b.n	8008cf2 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bca:	2301      	movs	r3, #1
 8008bcc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd0:	f383 8810 	msr	PRIMASK, r3
}
 8008bd4:	46c0      	nop			@ (mov r8, r8)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4974      	ldr	r1, [pc, #464]	@ (8008db4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8008be2:	400a      	ands	r2, r1
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008be8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bec:	f383 8810 	msr	PRIMASK, r3
}
 8008bf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c02:	f383 8810 	msr	PRIMASK, r3
}
 8008c06:	46c0      	nop			@ (mov r8, r8)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4969      	ldr	r1, [pc, #420]	@ (8008db8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8008c14:	400a      	ands	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]
 8008c18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c1a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c1e:	f383 8810 	msr	PRIMASK, r3
}
 8008c22:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	228c      	movs	r2, #140	@ 0x8c
 8008c28:	2120      	movs	r1, #32
 8008c2a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a5f      	ldr	r2, [pc, #380]	@ (8008dbc <UART_RxISR_16BIT_FIFOEN+0x348>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d01f      	beq.n	8008c82 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	d018      	beq.n	8008c82 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c50:	f3ef 8310 	mrs	r3, PRIMASK
 8008c54:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c58:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c60:	f383 8810 	msr	PRIMASK, r3
}
 8008c64:	46c0      	nop			@ (mov r8, r8)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4953      	ldr	r1, [pc, #332]	@ (8008dc0 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8008c72:	400a      	ands	r2, r1
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	f383 8810 	msr	PRIMASK, r3
}
 8008c80:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d12f      	bne.n	8008cea <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c90:	f3ef 8310 	mrs	r3, PRIMASK
 8008c94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	f383 8810 	msr	PRIMASK, r3
}
 8008ca4:	46c0      	nop			@ (mov r8, r8)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2110      	movs	r1, #16
 8008cb2:	438a      	bics	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	f383 8810 	msr	PRIMASK, r3
}
 8008cc0:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	2210      	movs	r2, #16
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d103      	bne.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2210      	movs	r2, #16
 8008cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	225c      	movs	r2, #92	@ 0x5c
 8008cdc:	5a9a      	ldrh	r2, [r3, r2]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	0011      	movs	r1, r2
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f7fe fcfc 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
 8008ce8:	e003      	b.n	8008cf2 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f7f7 fca7 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cf2:	2376      	movs	r3, #118	@ 0x76
 8008cf4:	18fb      	adds	r3, r7, r3
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d006      	beq.n	8008d0a <UART_RxISR_16BIT_FIFOEN+0x296>
 8008cfc:	2384      	movs	r3, #132	@ 0x84
 8008cfe:	18fb      	adds	r3, r7, r3
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2220      	movs	r2, #32
 8008d04:	4013      	ands	r3, r2
 8008d06:	d000      	beq.n	8008d0a <UART_RxISR_16BIT_FIFOEN+0x296>
 8008d08:	e6d9      	b.n	8008abe <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d0a:	205e      	movs	r0, #94	@ 0x5e
 8008d0c:	183b      	adds	r3, r7, r0
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	215e      	movs	r1, #94	@ 0x5e
 8008d12:	5a52      	ldrh	r2, [r2, r1]
 8008d14:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d16:	0001      	movs	r1, r0
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d044      	beq.n	8008daa <UART_RxISR_16BIT_FIFOEN+0x336>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2268      	movs	r2, #104	@ 0x68
 8008d24:	5a9b      	ldrh	r3, [r3, r2]
 8008d26:	187a      	adds	r2, r7, r1
 8008d28:	8812      	ldrh	r2, [r2, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d23d      	bcs.n	8008daa <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d34:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d38:	2301      	movs	r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f383 8810 	msr	PRIMASK, r3
}
 8008d42:	46c0      	nop			@ (mov r8, r8)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	491d      	ldr	r1, [pc, #116]	@ (8008dc4 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8008d50:	400a      	ands	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f383 8810 	msr	PRIMASK, r3
}
 8008d5e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a19      	ldr	r2, [pc, #100]	@ (8008dc8 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8008d64:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d66:	f3ef 8310 	mrs	r3, PRIMASK
 8008d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d6c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d70:	2301      	movs	r3, #1
 8008d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f383 8810 	msr	PRIMASK, r3
}
 8008d7a:	46c0      	nop			@ (mov r8, r8)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2120      	movs	r1, #32
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	f383 8810 	msr	PRIMASK, r3
}
 8008d96:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d98:	e007      	b.n	8008daa <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	699a      	ldr	r2, [r3, #24]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2108      	movs	r1, #8
 8008da6:	430a      	orrs	r2, r1
 8008da8:	619a      	str	r2, [r3, #24]
}
 8008daa:	46c0      	nop			@ (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b022      	add	sp, #136	@ 0x88
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	fffffeff 	.word	0xfffffeff
 8008db8:	effffffe 	.word	0xeffffffe
 8008dbc:	40008000 	.word	0x40008000
 8008dc0:	fbffffff 	.word	0xfbffffff
 8008dc4:	efffffff 	.word	0xefffffff
 8008dc8:	08008571 	.word	0x08008571

08008dcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dd4:	46c0      	nop			@ (mov r8, r8)
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	b002      	add	sp, #8
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008de4:	46c0      	nop			@ (mov r8, r8)
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b002      	add	sp, #8
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008df4:	46c0      	nop			@ (mov r8, r8)
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b002      	add	sp, #8
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2284      	movs	r2, #132	@ 0x84
 8008e08:	5c9b      	ldrb	r3, [r3, r2]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e027      	b.n	8008e62 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2284      	movs	r2, #132	@ 0x84
 8008e16:	2101      	movs	r1, #1
 8008e18:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2288      	movs	r2, #136	@ 0x88
 8008e1e:	2124      	movs	r1, #36	@ 0x24
 8008e20:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2101      	movs	r1, #1
 8008e36:	438a      	bics	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008e6c <HAL_UARTEx_DisableFifoMode+0x70>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2288      	movs	r2, #136	@ 0x88
 8008e54:	2120      	movs	r1, #32
 8008e56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2284      	movs	r2, #132	@ 0x84
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	0018      	movs	r0, r3
 8008e64:	46bd      	mov	sp, r7
 8008e66:	b004      	add	sp, #16
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	46c0      	nop			@ (mov r8, r8)
 8008e6c:	dfffffff 	.word	0xdfffffff

08008e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2284      	movs	r2, #132	@ 0x84
 8008e7e:	5c9b      	ldrb	r3, [r3, r2]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e84:	2302      	movs	r3, #2
 8008e86:	e02e      	b.n	8008ee6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2284      	movs	r2, #132	@ 0x84
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2288      	movs	r2, #136	@ 0x88
 8008e94:	2124      	movs	r1, #36	@ 0x24
 8008e96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2101      	movs	r1, #1
 8008eac:	438a      	bics	r2, r1
 8008eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	08d9      	lsrs	r1, r3, #3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f000 f854 	bl	8008f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2288      	movs	r2, #136	@ 0x88
 8008ed8:	2120      	movs	r1, #32
 8008eda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2284      	movs	r2, #132	@ 0x84
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	b004      	add	sp, #16
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2284      	movs	r2, #132	@ 0x84
 8008efe:	5c9b      	ldrb	r3, [r3, r2]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f04:	2302      	movs	r3, #2
 8008f06:	e02f      	b.n	8008f68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2284      	movs	r2, #132	@ 0x84
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2288      	movs	r2, #136	@ 0x88
 8008f14:	2124      	movs	r1, #36	@ 0x24
 8008f16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	438a      	bics	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4a0e      	ldr	r2, [pc, #56]	@ (8008f70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008f38:	4013      	ands	r3, r2
 8008f3a:	0019      	movs	r1, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f000 f813 	bl	8008f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2288      	movs	r2, #136	@ 0x88
 8008f5a:	2120      	movs	r1, #32
 8008f5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2284      	movs	r2, #132	@ 0x84
 8008f62:	2100      	movs	r1, #0
 8008f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	0018      	movs	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b004      	add	sp, #16
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	f1ffffff 	.word	0xf1ffffff

08008f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d108      	bne.n	8008f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	226a      	movs	r2, #106	@ 0x6a
 8008f88:	2101      	movs	r1, #1
 8008f8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2268      	movs	r2, #104	@ 0x68
 8008f90:	2101      	movs	r1, #1
 8008f92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f94:	e043      	b.n	800901e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f96:	260f      	movs	r6, #15
 8008f98:	19bb      	adds	r3, r7, r6
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f9e:	200e      	movs	r0, #14
 8008fa0:	183b      	adds	r3, r7, r0
 8008fa2:	2208      	movs	r2, #8
 8008fa4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	0e5b      	lsrs	r3, r3, #25
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	240d      	movs	r4, #13
 8008fb2:	193b      	adds	r3, r7, r4
 8008fb4:	2107      	movs	r1, #7
 8008fb6:	400a      	ands	r2, r1
 8008fb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	0f5b      	lsrs	r3, r3, #29
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	250c      	movs	r5, #12
 8008fc6:	197b      	adds	r3, r7, r5
 8008fc8:	2107      	movs	r1, #7
 8008fca:	400a      	ands	r2, r1
 8008fcc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fce:	183b      	adds	r3, r7, r0
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	197a      	adds	r2, r7, r5
 8008fd4:	7812      	ldrb	r2, [r2, #0]
 8008fd6:	4914      	ldr	r1, [pc, #80]	@ (8009028 <UARTEx_SetNbDataToProcess+0xb4>)
 8008fd8:	5c8a      	ldrb	r2, [r1, r2]
 8008fda:	435a      	muls	r2, r3
 8008fdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fde:	197b      	adds	r3, r7, r5
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	4a12      	ldr	r2, [pc, #72]	@ (800902c <UARTEx_SetNbDataToProcess+0xb8>)
 8008fe4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fe6:	0019      	movs	r1, r3
 8008fe8:	f7f7 f928 	bl	800023c <__divsi3>
 8008fec:	0003      	movs	r3, r0
 8008fee:	b299      	uxth	r1, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	226a      	movs	r2, #106	@ 0x6a
 8008ff4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ff6:	19bb      	adds	r3, r7, r6
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	193a      	adds	r2, r7, r4
 8008ffc:	7812      	ldrb	r2, [r2, #0]
 8008ffe:	490a      	ldr	r1, [pc, #40]	@ (8009028 <UARTEx_SetNbDataToProcess+0xb4>)
 8009000:	5c8a      	ldrb	r2, [r1, r2]
 8009002:	435a      	muls	r2, r3
 8009004:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009006:	193b      	adds	r3, r7, r4
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	4a08      	ldr	r2, [pc, #32]	@ (800902c <UARTEx_SetNbDataToProcess+0xb8>)
 800900c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800900e:	0019      	movs	r1, r3
 8009010:	f7f7 f914 	bl	800023c <__divsi3>
 8009014:	0003      	movs	r3, r0
 8009016:	b299      	uxth	r1, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2268      	movs	r2, #104	@ 0x68
 800901c:	5299      	strh	r1, [r3, r2]
}
 800901e:	46c0      	nop			@ (mov r8, r8)
 8009020:	46bd      	mov	sp, r7
 8009022:	b005      	add	sp, #20
 8009024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	08009c20 	.word	0x08009c20
 800902c:	08009c28 	.word	0x08009c28

08009030 <atoi>:
 8009030:	b510      	push	{r4, lr}
 8009032:	220a      	movs	r2, #10
 8009034:	2100      	movs	r1, #0
 8009036:	f000 f88b 	bl	8009150 <strtol>
 800903a:	bd10      	pop	{r4, pc}

0800903c <_strtol_l.isra.0>:
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	b085      	sub	sp, #20
 8009040:	0017      	movs	r7, r2
 8009042:	001e      	movs	r6, r3
 8009044:	9003      	str	r0, [sp, #12]
 8009046:	9101      	str	r1, [sp, #4]
 8009048:	2b24      	cmp	r3, #36	@ 0x24
 800904a:	d823      	bhi.n	8009094 <_strtol_l.isra.0+0x58>
 800904c:	000c      	movs	r4, r1
 800904e:	2b01      	cmp	r3, #1
 8009050:	d020      	beq.n	8009094 <_strtol_l.isra.0+0x58>
 8009052:	4b3d      	ldr	r3, [pc, #244]	@ (8009148 <_strtol_l.isra.0+0x10c>)
 8009054:	2208      	movs	r2, #8
 8009056:	469c      	mov	ip, r3
 8009058:	0023      	movs	r3, r4
 800905a:	4661      	mov	r1, ip
 800905c:	781d      	ldrb	r5, [r3, #0]
 800905e:	3401      	adds	r4, #1
 8009060:	5d48      	ldrb	r0, [r1, r5]
 8009062:	0001      	movs	r1, r0
 8009064:	4011      	ands	r1, r2
 8009066:	4210      	tst	r0, r2
 8009068:	d1f6      	bne.n	8009058 <_strtol_l.isra.0+0x1c>
 800906a:	2d2d      	cmp	r5, #45	@ 0x2d
 800906c:	d119      	bne.n	80090a2 <_strtol_l.isra.0+0x66>
 800906e:	7825      	ldrb	r5, [r4, #0]
 8009070:	1c9c      	adds	r4, r3, #2
 8009072:	2301      	movs	r3, #1
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2210      	movs	r2, #16
 8009078:	0033      	movs	r3, r6
 800907a:	4393      	bics	r3, r2
 800907c:	d11d      	bne.n	80090ba <_strtol_l.isra.0+0x7e>
 800907e:	2d30      	cmp	r5, #48	@ 0x30
 8009080:	d115      	bne.n	80090ae <_strtol_l.isra.0+0x72>
 8009082:	2120      	movs	r1, #32
 8009084:	7823      	ldrb	r3, [r4, #0]
 8009086:	438b      	bics	r3, r1
 8009088:	2b58      	cmp	r3, #88	@ 0x58
 800908a:	d110      	bne.n	80090ae <_strtol_l.isra.0+0x72>
 800908c:	7865      	ldrb	r5, [r4, #1]
 800908e:	3402      	adds	r4, #2
 8009090:	2610      	movs	r6, #16
 8009092:	e012      	b.n	80090ba <_strtol_l.isra.0+0x7e>
 8009094:	f000 f8a6 	bl	80091e4 <__errno>
 8009098:	2316      	movs	r3, #22
 800909a:	6003      	str	r3, [r0, #0]
 800909c:	2000      	movs	r0, #0
 800909e:	b005      	add	sp, #20
 80090a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a2:	9100      	str	r1, [sp, #0]
 80090a4:	2d2b      	cmp	r5, #43	@ 0x2b
 80090a6:	d1e6      	bne.n	8009076 <_strtol_l.isra.0+0x3a>
 80090a8:	7825      	ldrb	r5, [r4, #0]
 80090aa:	1c9c      	adds	r4, r3, #2
 80090ac:	e7e3      	b.n	8009076 <_strtol_l.isra.0+0x3a>
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d1ee      	bne.n	8009090 <_strtol_l.isra.0+0x54>
 80090b2:	360a      	adds	r6, #10
 80090b4:	2d30      	cmp	r5, #48	@ 0x30
 80090b6:	d100      	bne.n	80090ba <_strtol_l.isra.0+0x7e>
 80090b8:	3e02      	subs	r6, #2
 80090ba:	4a24      	ldr	r2, [pc, #144]	@ (800914c <_strtol_l.isra.0+0x110>)
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	4694      	mov	ip, r2
 80090c0:	4463      	add	r3, ip
 80090c2:	0031      	movs	r1, r6
 80090c4:	0018      	movs	r0, r3
 80090c6:	9302      	str	r3, [sp, #8]
 80090c8:	f7f7 f8b4 	bl	8000234 <__aeabi_uidivmod>
 80090cc:	2200      	movs	r2, #0
 80090ce:	4684      	mov	ip, r0
 80090d0:	0010      	movs	r0, r2
 80090d2:	002b      	movs	r3, r5
 80090d4:	3b30      	subs	r3, #48	@ 0x30
 80090d6:	2b09      	cmp	r3, #9
 80090d8:	d811      	bhi.n	80090fe <_strtol_l.isra.0+0xc2>
 80090da:	001d      	movs	r5, r3
 80090dc:	42ae      	cmp	r6, r5
 80090de:	dd1d      	ble.n	800911c <_strtol_l.isra.0+0xe0>
 80090e0:	1c53      	adds	r3, r2, #1
 80090e2:	d009      	beq.n	80090f8 <_strtol_l.isra.0+0xbc>
 80090e4:	2201      	movs	r2, #1
 80090e6:	4252      	negs	r2, r2
 80090e8:	4584      	cmp	ip, r0
 80090ea:	d305      	bcc.n	80090f8 <_strtol_l.isra.0+0xbc>
 80090ec:	d101      	bne.n	80090f2 <_strtol_l.isra.0+0xb6>
 80090ee:	42a9      	cmp	r1, r5
 80090f0:	db11      	blt.n	8009116 <_strtol_l.isra.0+0xda>
 80090f2:	2201      	movs	r2, #1
 80090f4:	4370      	muls	r0, r6
 80090f6:	1828      	adds	r0, r5, r0
 80090f8:	7825      	ldrb	r5, [r4, #0]
 80090fa:	3401      	adds	r4, #1
 80090fc:	e7e9      	b.n	80090d2 <_strtol_l.isra.0+0x96>
 80090fe:	002b      	movs	r3, r5
 8009100:	3b41      	subs	r3, #65	@ 0x41
 8009102:	2b19      	cmp	r3, #25
 8009104:	d801      	bhi.n	800910a <_strtol_l.isra.0+0xce>
 8009106:	3d37      	subs	r5, #55	@ 0x37
 8009108:	e7e8      	b.n	80090dc <_strtol_l.isra.0+0xa0>
 800910a:	002b      	movs	r3, r5
 800910c:	3b61      	subs	r3, #97	@ 0x61
 800910e:	2b19      	cmp	r3, #25
 8009110:	d804      	bhi.n	800911c <_strtol_l.isra.0+0xe0>
 8009112:	3d57      	subs	r5, #87	@ 0x57
 8009114:	e7e2      	b.n	80090dc <_strtol_l.isra.0+0xa0>
 8009116:	2201      	movs	r2, #1
 8009118:	4252      	negs	r2, r2
 800911a:	e7ed      	b.n	80090f8 <_strtol_l.isra.0+0xbc>
 800911c:	1c53      	adds	r3, r2, #1
 800911e:	d108      	bne.n	8009132 <_strtol_l.isra.0+0xf6>
 8009120:	2322      	movs	r3, #34	@ 0x22
 8009122:	9a03      	ldr	r2, [sp, #12]
 8009124:	9802      	ldr	r0, [sp, #8]
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	2f00      	cmp	r7, #0
 800912a:	d0b8      	beq.n	800909e <_strtol_l.isra.0+0x62>
 800912c:	1e63      	subs	r3, r4, #1
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	e007      	b.n	8009142 <_strtol_l.isra.0+0x106>
 8009132:	9b00      	ldr	r3, [sp, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d000      	beq.n	800913a <_strtol_l.isra.0+0xfe>
 8009138:	4240      	negs	r0, r0
 800913a:	2f00      	cmp	r7, #0
 800913c:	d0af      	beq.n	800909e <_strtol_l.isra.0+0x62>
 800913e:	2a00      	cmp	r2, #0
 8009140:	d1f4      	bne.n	800912c <_strtol_l.isra.0+0xf0>
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	e7aa      	b.n	800909e <_strtol_l.isra.0+0x62>
 8009148:	08009c31 	.word	0x08009c31
 800914c:	7fffffff 	.word	0x7fffffff

08009150 <strtol>:
 8009150:	b510      	push	{r4, lr}
 8009152:	4c04      	ldr	r4, [pc, #16]	@ (8009164 <strtol+0x14>)
 8009154:	0013      	movs	r3, r2
 8009156:	000a      	movs	r2, r1
 8009158:	0001      	movs	r1, r0
 800915a:	6820      	ldr	r0, [r4, #0]
 800915c:	f7ff ff6e 	bl	800903c <_strtol_l.isra.0>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	46c0      	nop			@ (mov r8, r8)
 8009164:	20000054 	.word	0x20000054

08009168 <sniprintf>:
 8009168:	b40c      	push	{r2, r3}
 800916a:	b530      	push	{r4, r5, lr}
 800916c:	4b18      	ldr	r3, [pc, #96]	@ (80091d0 <sniprintf+0x68>)
 800916e:	000c      	movs	r4, r1
 8009170:	681d      	ldr	r5, [r3, #0]
 8009172:	b09d      	sub	sp, #116	@ 0x74
 8009174:	2900      	cmp	r1, #0
 8009176:	da08      	bge.n	800918a <sniprintf+0x22>
 8009178:	238b      	movs	r3, #139	@ 0x8b
 800917a:	2001      	movs	r0, #1
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	4240      	negs	r0, r0
 8009180:	b01d      	add	sp, #116	@ 0x74
 8009182:	bc30      	pop	{r4, r5}
 8009184:	bc08      	pop	{r3}
 8009186:	b002      	add	sp, #8
 8009188:	4718      	bx	r3
 800918a:	2382      	movs	r3, #130	@ 0x82
 800918c:	466a      	mov	r2, sp
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	8293      	strh	r3, [r2, #20]
 8009192:	2300      	movs	r3, #0
 8009194:	9002      	str	r0, [sp, #8]
 8009196:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009198:	9006      	str	r0, [sp, #24]
 800919a:	4299      	cmp	r1, r3
 800919c:	d000      	beq.n	80091a0 <sniprintf+0x38>
 800919e:	1e4b      	subs	r3, r1, #1
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	9307      	str	r3, [sp, #28]
 80091a4:	2301      	movs	r3, #1
 80091a6:	466a      	mov	r2, sp
 80091a8:	425b      	negs	r3, r3
 80091aa:	82d3      	strh	r3, [r2, #22]
 80091ac:	0028      	movs	r0, r5
 80091ae:	ab21      	add	r3, sp, #132	@ 0x84
 80091b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80091b2:	a902      	add	r1, sp, #8
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	f000 f99d 	bl	80094f4 <_svfiprintf_r>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	da01      	bge.n	80091c2 <sniprintf+0x5a>
 80091be:	238b      	movs	r3, #139	@ 0x8b
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	2c00      	cmp	r4, #0
 80091c4:	d0dc      	beq.n	8009180 <sniprintf+0x18>
 80091c6:	2200      	movs	r2, #0
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	701a      	strb	r2, [r3, #0]
 80091cc:	e7d8      	b.n	8009180 <sniprintf+0x18>
 80091ce:	46c0      	nop			@ (mov r8, r8)
 80091d0:	20000054 	.word	0x20000054

080091d4 <memset>:
 80091d4:	0003      	movs	r3, r0
 80091d6:	1882      	adds	r2, r0, r2
 80091d8:	4293      	cmp	r3, r2
 80091da:	d100      	bne.n	80091de <memset+0xa>
 80091dc:	4770      	bx	lr
 80091de:	7019      	strb	r1, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	e7f9      	b.n	80091d8 <memset+0x4>

080091e4 <__errno>:
 80091e4:	4b01      	ldr	r3, [pc, #4]	@ (80091ec <__errno+0x8>)
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	4770      	bx	lr
 80091ea:	46c0      	nop			@ (mov r8, r8)
 80091ec:	20000054 	.word	0x20000054

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	2600      	movs	r6, #0
 80091f4:	4c0c      	ldr	r4, [pc, #48]	@ (8009228 <__libc_init_array+0x38>)
 80091f6:	4d0d      	ldr	r5, [pc, #52]	@ (800922c <__libc_init_array+0x3c>)
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	2600      	movs	r6, #0
 8009202:	f000 fc61 	bl	8009ac8 <_init>
 8009206:	4c0a      	ldr	r4, [pc, #40]	@ (8009230 <__libc_init_array+0x40>)
 8009208:	4d0a      	ldr	r5, [pc, #40]	@ (8009234 <__libc_init_array+0x44>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	00b3      	lsls	r3, r6, #2
 8009216:	58eb      	ldr	r3, [r5, r3]
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	00b3      	lsls	r3, r6, #2
 8009220:	58eb      	ldr	r3, [r5, r3]
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	08009d6c 	.word	0x08009d6c
 800922c:	08009d6c 	.word	0x08009d6c
 8009230:	08009d70 	.word	0x08009d70
 8009234:	08009d6c 	.word	0x08009d6c

08009238 <__retarget_lock_acquire_recursive>:
 8009238:	4770      	bx	lr

0800923a <__retarget_lock_release_recursive>:
 800923a:	4770      	bx	lr

0800923c <_free_r>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	0005      	movs	r5, r0
 8009240:	1e0c      	subs	r4, r1, #0
 8009242:	d010      	beq.n	8009266 <_free_r+0x2a>
 8009244:	3c04      	subs	r4, #4
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	da00      	bge.n	800924e <_free_r+0x12>
 800924c:	18e4      	adds	r4, r4, r3
 800924e:	0028      	movs	r0, r5
 8009250:	f000 f8e0 	bl	8009414 <__malloc_lock>
 8009254:	4a1d      	ldr	r2, [pc, #116]	@ (80092cc <_free_r+0x90>)
 8009256:	6813      	ldr	r3, [r2, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d105      	bne.n	8009268 <_free_r+0x2c>
 800925c:	6063      	str	r3, [r4, #4]
 800925e:	6014      	str	r4, [r2, #0]
 8009260:	0028      	movs	r0, r5
 8009262:	f000 f8df 	bl	8009424 <__malloc_unlock>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	42a3      	cmp	r3, r4
 800926a:	d908      	bls.n	800927e <_free_r+0x42>
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	1821      	adds	r1, r4, r0
 8009270:	428b      	cmp	r3, r1
 8009272:	d1f3      	bne.n	800925c <_free_r+0x20>
 8009274:	6819      	ldr	r1, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	1809      	adds	r1, r1, r0
 800927a:	6021      	str	r1, [r4, #0]
 800927c:	e7ee      	b.n	800925c <_free_r+0x20>
 800927e:	001a      	movs	r2, r3
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <_free_r+0x4e>
 8009286:	42a3      	cmp	r3, r4
 8009288:	d9f9      	bls.n	800927e <_free_r+0x42>
 800928a:	6811      	ldr	r1, [r2, #0]
 800928c:	1850      	adds	r0, r2, r1
 800928e:	42a0      	cmp	r0, r4
 8009290:	d10b      	bne.n	80092aa <_free_r+0x6e>
 8009292:	6820      	ldr	r0, [r4, #0]
 8009294:	1809      	adds	r1, r1, r0
 8009296:	1850      	adds	r0, r2, r1
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	4283      	cmp	r3, r0
 800929c:	d1e0      	bne.n	8009260 <_free_r+0x24>
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	1841      	adds	r1, r0, r1
 80092a4:	6011      	str	r1, [r2, #0]
 80092a6:	6053      	str	r3, [r2, #4]
 80092a8:	e7da      	b.n	8009260 <_free_r+0x24>
 80092aa:	42a0      	cmp	r0, r4
 80092ac:	d902      	bls.n	80092b4 <_free_r+0x78>
 80092ae:	230c      	movs	r3, #12
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	e7d5      	b.n	8009260 <_free_r+0x24>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	1821      	adds	r1, r4, r0
 80092b8:	428b      	cmp	r3, r1
 80092ba:	d103      	bne.n	80092c4 <_free_r+0x88>
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	1809      	adds	r1, r1, r0
 80092c2:	6021      	str	r1, [r4, #0]
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	6054      	str	r4, [r2, #4]
 80092c8:	e7ca      	b.n	8009260 <_free_r+0x24>
 80092ca:	46c0      	nop			@ (mov r8, r8)
 80092cc:	20000594 	.word	0x20000594

080092d0 <sbrk_aligned>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	4e0f      	ldr	r6, [pc, #60]	@ (8009310 <sbrk_aligned+0x40>)
 80092d4:	000d      	movs	r5, r1
 80092d6:	6831      	ldr	r1, [r6, #0]
 80092d8:	0004      	movs	r4, r0
 80092da:	2900      	cmp	r1, #0
 80092dc:	d102      	bne.n	80092e4 <sbrk_aligned+0x14>
 80092de:	f000 fb95 	bl	8009a0c <_sbrk_r>
 80092e2:	6030      	str	r0, [r6, #0]
 80092e4:	0029      	movs	r1, r5
 80092e6:	0020      	movs	r0, r4
 80092e8:	f000 fb90 	bl	8009a0c <_sbrk_r>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d103      	bne.n	80092f8 <sbrk_aligned+0x28>
 80092f0:	2501      	movs	r5, #1
 80092f2:	426d      	negs	r5, r5
 80092f4:	0028      	movs	r0, r5
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	2303      	movs	r3, #3
 80092fa:	1cc5      	adds	r5, r0, #3
 80092fc:	439d      	bics	r5, r3
 80092fe:	42a8      	cmp	r0, r5
 8009300:	d0f8      	beq.n	80092f4 <sbrk_aligned+0x24>
 8009302:	1a29      	subs	r1, r5, r0
 8009304:	0020      	movs	r0, r4
 8009306:	f000 fb81 	bl	8009a0c <_sbrk_r>
 800930a:	3001      	adds	r0, #1
 800930c:	d1f2      	bne.n	80092f4 <sbrk_aligned+0x24>
 800930e:	e7ef      	b.n	80092f0 <sbrk_aligned+0x20>
 8009310:	20000590 	.word	0x20000590

08009314 <_malloc_r>:
 8009314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009316:	2203      	movs	r2, #3
 8009318:	1ccb      	adds	r3, r1, #3
 800931a:	4393      	bics	r3, r2
 800931c:	3308      	adds	r3, #8
 800931e:	0005      	movs	r5, r0
 8009320:	001f      	movs	r7, r3
 8009322:	2b0c      	cmp	r3, #12
 8009324:	d234      	bcs.n	8009390 <_malloc_r+0x7c>
 8009326:	270c      	movs	r7, #12
 8009328:	42b9      	cmp	r1, r7
 800932a:	d833      	bhi.n	8009394 <_malloc_r+0x80>
 800932c:	0028      	movs	r0, r5
 800932e:	f000 f871 	bl	8009414 <__malloc_lock>
 8009332:	4e37      	ldr	r6, [pc, #220]	@ (8009410 <_malloc_r+0xfc>)
 8009334:	6833      	ldr	r3, [r6, #0]
 8009336:	001c      	movs	r4, r3
 8009338:	2c00      	cmp	r4, #0
 800933a:	d12f      	bne.n	800939c <_malloc_r+0x88>
 800933c:	0039      	movs	r1, r7
 800933e:	0028      	movs	r0, r5
 8009340:	f7ff ffc6 	bl	80092d0 <sbrk_aligned>
 8009344:	0004      	movs	r4, r0
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	d15f      	bne.n	800940a <_malloc_r+0xf6>
 800934a:	6834      	ldr	r4, [r6, #0]
 800934c:	9400      	str	r4, [sp, #0]
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d14a      	bne.n	80093ea <_malloc_r+0xd6>
 8009354:	2c00      	cmp	r4, #0
 8009356:	d052      	beq.n	80093fe <_malloc_r+0xea>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	0028      	movs	r0, r5
 800935c:	18e3      	adds	r3, r4, r3
 800935e:	9900      	ldr	r1, [sp, #0]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f000 fb53 	bl	8009a0c <_sbrk_r>
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	4283      	cmp	r3, r0
 800936a:	d148      	bne.n	80093fe <_malloc_r+0xea>
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	0028      	movs	r0, r5
 8009370:	1aff      	subs	r7, r7, r3
 8009372:	0039      	movs	r1, r7
 8009374:	f7ff ffac 	bl	80092d0 <sbrk_aligned>
 8009378:	3001      	adds	r0, #1
 800937a:	d040      	beq.n	80093fe <_malloc_r+0xea>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	19db      	adds	r3, r3, r7
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	6833      	ldr	r3, [r6, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	2a00      	cmp	r2, #0
 8009388:	d133      	bne.n	80093f2 <_malloc_r+0xde>
 800938a:	9b00      	ldr	r3, [sp, #0]
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	e019      	b.n	80093c4 <_malloc_r+0xb0>
 8009390:	2b00      	cmp	r3, #0
 8009392:	dac9      	bge.n	8009328 <_malloc_r+0x14>
 8009394:	230c      	movs	r3, #12
 8009396:	602b      	str	r3, [r5, #0]
 8009398:	2000      	movs	r0, #0
 800939a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800939c:	6821      	ldr	r1, [r4, #0]
 800939e:	1bc9      	subs	r1, r1, r7
 80093a0:	d420      	bmi.n	80093e4 <_malloc_r+0xd0>
 80093a2:	290b      	cmp	r1, #11
 80093a4:	d90a      	bls.n	80093bc <_malloc_r+0xa8>
 80093a6:	19e2      	adds	r2, r4, r7
 80093a8:	6027      	str	r7, [r4, #0]
 80093aa:	42a3      	cmp	r3, r4
 80093ac:	d104      	bne.n	80093b8 <_malloc_r+0xa4>
 80093ae:	6032      	str	r2, [r6, #0]
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	6011      	str	r1, [r2, #0]
 80093b4:	6053      	str	r3, [r2, #4]
 80093b6:	e005      	b.n	80093c4 <_malloc_r+0xb0>
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	e7f9      	b.n	80093b0 <_malloc_r+0x9c>
 80093bc:	6862      	ldr	r2, [r4, #4]
 80093be:	42a3      	cmp	r3, r4
 80093c0:	d10e      	bne.n	80093e0 <_malloc_r+0xcc>
 80093c2:	6032      	str	r2, [r6, #0]
 80093c4:	0028      	movs	r0, r5
 80093c6:	f000 f82d 	bl	8009424 <__malloc_unlock>
 80093ca:	0020      	movs	r0, r4
 80093cc:	2207      	movs	r2, #7
 80093ce:	300b      	adds	r0, #11
 80093d0:	1d23      	adds	r3, r4, #4
 80093d2:	4390      	bics	r0, r2
 80093d4:	1ac2      	subs	r2, r0, r3
 80093d6:	4298      	cmp	r0, r3
 80093d8:	d0df      	beq.n	800939a <_malloc_r+0x86>
 80093da:	1a1b      	subs	r3, r3, r0
 80093dc:	50a3      	str	r3, [r4, r2]
 80093de:	e7dc      	b.n	800939a <_malloc_r+0x86>
 80093e0:	605a      	str	r2, [r3, #4]
 80093e2:	e7ef      	b.n	80093c4 <_malloc_r+0xb0>
 80093e4:	0023      	movs	r3, r4
 80093e6:	6864      	ldr	r4, [r4, #4]
 80093e8:	e7a6      	b.n	8009338 <_malloc_r+0x24>
 80093ea:	9c00      	ldr	r4, [sp, #0]
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	e7ad      	b.n	800934e <_malloc_r+0x3a>
 80093f2:	001a      	movs	r2, r3
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	42a3      	cmp	r3, r4
 80093f8:	d1fb      	bne.n	80093f2 <_malloc_r+0xde>
 80093fa:	2300      	movs	r3, #0
 80093fc:	e7da      	b.n	80093b4 <_malloc_r+0xa0>
 80093fe:	230c      	movs	r3, #12
 8009400:	0028      	movs	r0, r5
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f000 f80e 	bl	8009424 <__malloc_unlock>
 8009408:	e7c6      	b.n	8009398 <_malloc_r+0x84>
 800940a:	6007      	str	r7, [r0, #0]
 800940c:	e7da      	b.n	80093c4 <_malloc_r+0xb0>
 800940e:	46c0      	nop			@ (mov r8, r8)
 8009410:	20000594 	.word	0x20000594

08009414 <__malloc_lock>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4802      	ldr	r0, [pc, #8]	@ (8009420 <__malloc_lock+0xc>)
 8009418:	f7ff ff0e 	bl	8009238 <__retarget_lock_acquire_recursive>
 800941c:	bd10      	pop	{r4, pc}
 800941e:	46c0      	nop			@ (mov r8, r8)
 8009420:	2000058c 	.word	0x2000058c

08009424 <__malloc_unlock>:
 8009424:	b510      	push	{r4, lr}
 8009426:	4802      	ldr	r0, [pc, #8]	@ (8009430 <__malloc_unlock+0xc>)
 8009428:	f7ff ff07 	bl	800923a <__retarget_lock_release_recursive>
 800942c:	bd10      	pop	{r4, pc}
 800942e:	46c0      	nop			@ (mov r8, r8)
 8009430:	2000058c 	.word	0x2000058c

08009434 <__ssputs_r>:
 8009434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009436:	688e      	ldr	r6, [r1, #8]
 8009438:	b085      	sub	sp, #20
 800943a:	001f      	movs	r7, r3
 800943c:	000c      	movs	r4, r1
 800943e:	680b      	ldr	r3, [r1, #0]
 8009440:	9002      	str	r0, [sp, #8]
 8009442:	9203      	str	r2, [sp, #12]
 8009444:	42be      	cmp	r6, r7
 8009446:	d830      	bhi.n	80094aa <__ssputs_r+0x76>
 8009448:	210c      	movs	r1, #12
 800944a:	5e62      	ldrsh	r2, [r4, r1]
 800944c:	2190      	movs	r1, #144	@ 0x90
 800944e:	00c9      	lsls	r1, r1, #3
 8009450:	420a      	tst	r2, r1
 8009452:	d028      	beq.n	80094a6 <__ssputs_r+0x72>
 8009454:	2003      	movs	r0, #3
 8009456:	6921      	ldr	r1, [r4, #16]
 8009458:	1a5b      	subs	r3, r3, r1
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	6963      	ldr	r3, [r4, #20]
 800945e:	4343      	muls	r3, r0
 8009460:	9801      	ldr	r0, [sp, #4]
 8009462:	0fdd      	lsrs	r5, r3, #31
 8009464:	18ed      	adds	r5, r5, r3
 8009466:	1c7b      	adds	r3, r7, #1
 8009468:	181b      	adds	r3, r3, r0
 800946a:	106d      	asrs	r5, r5, #1
 800946c:	42ab      	cmp	r3, r5
 800946e:	d900      	bls.n	8009472 <__ssputs_r+0x3e>
 8009470:	001d      	movs	r5, r3
 8009472:	0552      	lsls	r2, r2, #21
 8009474:	d528      	bpl.n	80094c8 <__ssputs_r+0x94>
 8009476:	0029      	movs	r1, r5
 8009478:	9802      	ldr	r0, [sp, #8]
 800947a:	f7ff ff4b 	bl	8009314 <_malloc_r>
 800947e:	1e06      	subs	r6, r0, #0
 8009480:	d02c      	beq.n	80094dc <__ssputs_r+0xa8>
 8009482:	9a01      	ldr	r2, [sp, #4]
 8009484:	6921      	ldr	r1, [r4, #16]
 8009486:	f000 fade 	bl	8009a46 <memcpy>
 800948a:	89a2      	ldrh	r2, [r4, #12]
 800948c:	4b18      	ldr	r3, [pc, #96]	@ (80094f0 <__ssputs_r+0xbc>)
 800948e:	401a      	ands	r2, r3
 8009490:	2380      	movs	r3, #128	@ 0x80
 8009492:	4313      	orrs	r3, r2
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	6126      	str	r6, [r4, #16]
 800949a:	18f6      	adds	r6, r6, r3
 800949c:	6026      	str	r6, [r4, #0]
 800949e:	003e      	movs	r6, r7
 80094a0:	6165      	str	r5, [r4, #20]
 80094a2:	1aed      	subs	r5, r5, r3
 80094a4:	60a5      	str	r5, [r4, #8]
 80094a6:	42be      	cmp	r6, r7
 80094a8:	d900      	bls.n	80094ac <__ssputs_r+0x78>
 80094aa:	003e      	movs	r6, r7
 80094ac:	0032      	movs	r2, r6
 80094ae:	9903      	ldr	r1, [sp, #12]
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	f000 fa99 	bl	80099e8 <memmove>
 80094b6:	2000      	movs	r0, #0
 80094b8:	68a3      	ldr	r3, [r4, #8]
 80094ba:	1b9b      	subs	r3, r3, r6
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	199b      	adds	r3, r3, r6
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	b005      	add	sp, #20
 80094c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c8:	002a      	movs	r2, r5
 80094ca:	9802      	ldr	r0, [sp, #8]
 80094cc:	f000 fac4 	bl	8009a58 <_realloc_r>
 80094d0:	1e06      	subs	r6, r0, #0
 80094d2:	d1e0      	bne.n	8009496 <__ssputs_r+0x62>
 80094d4:	6921      	ldr	r1, [r4, #16]
 80094d6:	9802      	ldr	r0, [sp, #8]
 80094d8:	f7ff feb0 	bl	800923c <_free_r>
 80094dc:	230c      	movs	r3, #12
 80094de:	2001      	movs	r0, #1
 80094e0:	9a02      	ldr	r2, [sp, #8]
 80094e2:	4240      	negs	r0, r0
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	89a2      	ldrh	r2, [r4, #12]
 80094e8:	3334      	adds	r3, #52	@ 0x34
 80094ea:	4313      	orrs	r3, r2
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	e7e9      	b.n	80094c4 <__ssputs_r+0x90>
 80094f0:	fffffb7f 	.word	0xfffffb7f

080094f4 <_svfiprintf_r>:
 80094f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f6:	b0a1      	sub	sp, #132	@ 0x84
 80094f8:	9003      	str	r0, [sp, #12]
 80094fa:	001d      	movs	r5, r3
 80094fc:	898b      	ldrh	r3, [r1, #12]
 80094fe:	000f      	movs	r7, r1
 8009500:	0016      	movs	r6, r2
 8009502:	061b      	lsls	r3, r3, #24
 8009504:	d511      	bpl.n	800952a <_svfiprintf_r+0x36>
 8009506:	690b      	ldr	r3, [r1, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10e      	bne.n	800952a <_svfiprintf_r+0x36>
 800950c:	2140      	movs	r1, #64	@ 0x40
 800950e:	f7ff ff01 	bl	8009314 <_malloc_r>
 8009512:	6038      	str	r0, [r7, #0]
 8009514:	6138      	str	r0, [r7, #16]
 8009516:	2800      	cmp	r0, #0
 8009518:	d105      	bne.n	8009526 <_svfiprintf_r+0x32>
 800951a:	230c      	movs	r3, #12
 800951c:	9a03      	ldr	r2, [sp, #12]
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	2001      	movs	r0, #1
 8009522:	4240      	negs	r0, r0
 8009524:	e0cf      	b.n	80096c6 <_svfiprintf_r+0x1d2>
 8009526:	2340      	movs	r3, #64	@ 0x40
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	2300      	movs	r3, #0
 800952c:	ac08      	add	r4, sp, #32
 800952e:	6163      	str	r3, [r4, #20]
 8009530:	3320      	adds	r3, #32
 8009532:	7663      	strb	r3, [r4, #25]
 8009534:	3310      	adds	r3, #16
 8009536:	76a3      	strb	r3, [r4, #26]
 8009538:	9507      	str	r5, [sp, #28]
 800953a:	0035      	movs	r5, r6
 800953c:	782b      	ldrb	r3, [r5, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <_svfiprintf_r+0x52>
 8009542:	2b25      	cmp	r3, #37	@ 0x25
 8009544:	d148      	bne.n	80095d8 <_svfiprintf_r+0xe4>
 8009546:	1bab      	subs	r3, r5, r6
 8009548:	9305      	str	r3, [sp, #20]
 800954a:	42b5      	cmp	r5, r6
 800954c:	d00b      	beq.n	8009566 <_svfiprintf_r+0x72>
 800954e:	0032      	movs	r2, r6
 8009550:	0039      	movs	r1, r7
 8009552:	9803      	ldr	r0, [sp, #12]
 8009554:	f7ff ff6e 	bl	8009434 <__ssputs_r>
 8009558:	3001      	adds	r0, #1
 800955a:	d100      	bne.n	800955e <_svfiprintf_r+0x6a>
 800955c:	e0ae      	b.n	80096bc <_svfiprintf_r+0x1c8>
 800955e:	6963      	ldr	r3, [r4, #20]
 8009560:	9a05      	ldr	r2, [sp, #20]
 8009562:	189b      	adds	r3, r3, r2
 8009564:	6163      	str	r3, [r4, #20]
 8009566:	782b      	ldrb	r3, [r5, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d100      	bne.n	800956e <_svfiprintf_r+0x7a>
 800956c:	e0a6      	b.n	80096bc <_svfiprintf_r+0x1c8>
 800956e:	2201      	movs	r2, #1
 8009570:	2300      	movs	r3, #0
 8009572:	4252      	negs	r2, r2
 8009574:	6062      	str	r2, [r4, #4]
 8009576:	a904      	add	r1, sp, #16
 8009578:	3254      	adds	r2, #84	@ 0x54
 800957a:	1852      	adds	r2, r2, r1
 800957c:	1c6e      	adds	r6, r5, #1
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	60e3      	str	r3, [r4, #12]
 8009582:	60a3      	str	r3, [r4, #8]
 8009584:	7013      	strb	r3, [r2, #0]
 8009586:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009588:	4b54      	ldr	r3, [pc, #336]	@ (80096dc <_svfiprintf_r+0x1e8>)
 800958a:	2205      	movs	r2, #5
 800958c:	0018      	movs	r0, r3
 800958e:	7831      	ldrb	r1, [r6, #0]
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	f000 fa4d 	bl	8009a30 <memchr>
 8009596:	1c75      	adds	r5, r6, #1
 8009598:	2800      	cmp	r0, #0
 800959a:	d11f      	bne.n	80095dc <_svfiprintf_r+0xe8>
 800959c:	6822      	ldr	r2, [r4, #0]
 800959e:	06d3      	lsls	r3, r2, #27
 80095a0:	d504      	bpl.n	80095ac <_svfiprintf_r+0xb8>
 80095a2:	2353      	movs	r3, #83	@ 0x53
 80095a4:	a904      	add	r1, sp, #16
 80095a6:	185b      	adds	r3, r3, r1
 80095a8:	2120      	movs	r1, #32
 80095aa:	7019      	strb	r1, [r3, #0]
 80095ac:	0713      	lsls	r3, r2, #28
 80095ae:	d504      	bpl.n	80095ba <_svfiprintf_r+0xc6>
 80095b0:	2353      	movs	r3, #83	@ 0x53
 80095b2:	a904      	add	r1, sp, #16
 80095b4:	185b      	adds	r3, r3, r1
 80095b6:	212b      	movs	r1, #43	@ 0x2b
 80095b8:	7019      	strb	r1, [r3, #0]
 80095ba:	7833      	ldrb	r3, [r6, #0]
 80095bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80095be:	d016      	beq.n	80095ee <_svfiprintf_r+0xfa>
 80095c0:	0035      	movs	r5, r6
 80095c2:	2100      	movs	r1, #0
 80095c4:	200a      	movs	r0, #10
 80095c6:	68e3      	ldr	r3, [r4, #12]
 80095c8:	782a      	ldrb	r2, [r5, #0]
 80095ca:	1c6e      	adds	r6, r5, #1
 80095cc:	3a30      	subs	r2, #48	@ 0x30
 80095ce:	2a09      	cmp	r2, #9
 80095d0:	d950      	bls.n	8009674 <_svfiprintf_r+0x180>
 80095d2:	2900      	cmp	r1, #0
 80095d4:	d111      	bne.n	80095fa <_svfiprintf_r+0x106>
 80095d6:	e017      	b.n	8009608 <_svfiprintf_r+0x114>
 80095d8:	3501      	adds	r5, #1
 80095da:	e7af      	b.n	800953c <_svfiprintf_r+0x48>
 80095dc:	9b05      	ldr	r3, [sp, #20]
 80095de:	6822      	ldr	r2, [r4, #0]
 80095e0:	1ac0      	subs	r0, r0, r3
 80095e2:	2301      	movs	r3, #1
 80095e4:	4083      	lsls	r3, r0
 80095e6:	4313      	orrs	r3, r2
 80095e8:	002e      	movs	r6, r5
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	e7cc      	b.n	8009588 <_svfiprintf_r+0x94>
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	1d19      	adds	r1, r3, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	9107      	str	r1, [sp, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	db01      	blt.n	80095fe <_svfiprintf_r+0x10a>
 80095fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095fc:	e004      	b.n	8009608 <_svfiprintf_r+0x114>
 80095fe:	425b      	negs	r3, r3
 8009600:	60e3      	str	r3, [r4, #12]
 8009602:	2302      	movs	r3, #2
 8009604:	4313      	orrs	r3, r2
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	782b      	ldrb	r3, [r5, #0]
 800960a:	2b2e      	cmp	r3, #46	@ 0x2e
 800960c:	d10c      	bne.n	8009628 <_svfiprintf_r+0x134>
 800960e:	786b      	ldrb	r3, [r5, #1]
 8009610:	2b2a      	cmp	r3, #42	@ 0x2a
 8009612:	d134      	bne.n	800967e <_svfiprintf_r+0x18a>
 8009614:	9b07      	ldr	r3, [sp, #28]
 8009616:	3502      	adds	r5, #2
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	9207      	str	r2, [sp, #28]
 800961e:	2b00      	cmp	r3, #0
 8009620:	da01      	bge.n	8009626 <_svfiprintf_r+0x132>
 8009622:	2301      	movs	r3, #1
 8009624:	425b      	negs	r3, r3
 8009626:	9309      	str	r3, [sp, #36]	@ 0x24
 8009628:	4e2d      	ldr	r6, [pc, #180]	@ (80096e0 <_svfiprintf_r+0x1ec>)
 800962a:	2203      	movs	r2, #3
 800962c:	0030      	movs	r0, r6
 800962e:	7829      	ldrb	r1, [r5, #0]
 8009630:	f000 f9fe 	bl	8009a30 <memchr>
 8009634:	2800      	cmp	r0, #0
 8009636:	d006      	beq.n	8009646 <_svfiprintf_r+0x152>
 8009638:	2340      	movs	r3, #64	@ 0x40
 800963a:	1b80      	subs	r0, r0, r6
 800963c:	4083      	lsls	r3, r0
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	3501      	adds	r5, #1
 8009642:	4313      	orrs	r3, r2
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	7829      	ldrb	r1, [r5, #0]
 8009648:	2206      	movs	r2, #6
 800964a:	4826      	ldr	r0, [pc, #152]	@ (80096e4 <_svfiprintf_r+0x1f0>)
 800964c:	1c6e      	adds	r6, r5, #1
 800964e:	7621      	strb	r1, [r4, #24]
 8009650:	f000 f9ee 	bl	8009a30 <memchr>
 8009654:	2800      	cmp	r0, #0
 8009656:	d038      	beq.n	80096ca <_svfiprintf_r+0x1d6>
 8009658:	4b23      	ldr	r3, [pc, #140]	@ (80096e8 <_svfiprintf_r+0x1f4>)
 800965a:	2b00      	cmp	r3, #0
 800965c:	d122      	bne.n	80096a4 <_svfiprintf_r+0x1b0>
 800965e:	2207      	movs	r2, #7
 8009660:	9b07      	ldr	r3, [sp, #28]
 8009662:	3307      	adds	r3, #7
 8009664:	4393      	bics	r3, r2
 8009666:	3308      	adds	r3, #8
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	6963      	ldr	r3, [r4, #20]
 800966c:	9a04      	ldr	r2, [sp, #16]
 800966e:	189b      	adds	r3, r3, r2
 8009670:	6163      	str	r3, [r4, #20]
 8009672:	e762      	b.n	800953a <_svfiprintf_r+0x46>
 8009674:	4343      	muls	r3, r0
 8009676:	0035      	movs	r5, r6
 8009678:	2101      	movs	r1, #1
 800967a:	189b      	adds	r3, r3, r2
 800967c:	e7a4      	b.n	80095c8 <_svfiprintf_r+0xd4>
 800967e:	2300      	movs	r3, #0
 8009680:	200a      	movs	r0, #10
 8009682:	0019      	movs	r1, r3
 8009684:	3501      	adds	r5, #1
 8009686:	6063      	str	r3, [r4, #4]
 8009688:	782a      	ldrb	r2, [r5, #0]
 800968a:	1c6e      	adds	r6, r5, #1
 800968c:	3a30      	subs	r2, #48	@ 0x30
 800968e:	2a09      	cmp	r2, #9
 8009690:	d903      	bls.n	800969a <_svfiprintf_r+0x1a6>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0c8      	beq.n	8009628 <_svfiprintf_r+0x134>
 8009696:	9109      	str	r1, [sp, #36]	@ 0x24
 8009698:	e7c6      	b.n	8009628 <_svfiprintf_r+0x134>
 800969a:	4341      	muls	r1, r0
 800969c:	0035      	movs	r5, r6
 800969e:	2301      	movs	r3, #1
 80096a0:	1889      	adds	r1, r1, r2
 80096a2:	e7f1      	b.n	8009688 <_svfiprintf_r+0x194>
 80096a4:	aa07      	add	r2, sp, #28
 80096a6:	9200      	str	r2, [sp, #0]
 80096a8:	0021      	movs	r1, r4
 80096aa:	003a      	movs	r2, r7
 80096ac:	4b0f      	ldr	r3, [pc, #60]	@ (80096ec <_svfiprintf_r+0x1f8>)
 80096ae:	9803      	ldr	r0, [sp, #12]
 80096b0:	e000      	b.n	80096b4 <_svfiprintf_r+0x1c0>
 80096b2:	bf00      	nop
 80096b4:	9004      	str	r0, [sp, #16]
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	3301      	adds	r3, #1
 80096ba:	d1d6      	bne.n	800966a <_svfiprintf_r+0x176>
 80096bc:	89bb      	ldrh	r3, [r7, #12]
 80096be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80096c0:	065b      	lsls	r3, r3, #25
 80096c2:	d500      	bpl.n	80096c6 <_svfiprintf_r+0x1d2>
 80096c4:	e72c      	b.n	8009520 <_svfiprintf_r+0x2c>
 80096c6:	b021      	add	sp, #132	@ 0x84
 80096c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ca:	aa07      	add	r2, sp, #28
 80096cc:	9200      	str	r2, [sp, #0]
 80096ce:	0021      	movs	r1, r4
 80096d0:	003a      	movs	r2, r7
 80096d2:	4b06      	ldr	r3, [pc, #24]	@ (80096ec <_svfiprintf_r+0x1f8>)
 80096d4:	9803      	ldr	r0, [sp, #12]
 80096d6:	f000 f87b 	bl	80097d0 <_printf_i>
 80096da:	e7eb      	b.n	80096b4 <_svfiprintf_r+0x1c0>
 80096dc:	08009d31 	.word	0x08009d31
 80096e0:	08009d37 	.word	0x08009d37
 80096e4:	08009d3b 	.word	0x08009d3b
 80096e8:	00000000 	.word	0x00000000
 80096ec:	08009435 	.word	0x08009435

080096f0 <_printf_common>:
 80096f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f2:	0016      	movs	r6, r2
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	688a      	ldr	r2, [r1, #8]
 80096f8:	690b      	ldr	r3, [r1, #16]
 80096fa:	000c      	movs	r4, r1
 80096fc:	9000      	str	r0, [sp, #0]
 80096fe:	4293      	cmp	r3, r2
 8009700:	da00      	bge.n	8009704 <_printf_common+0x14>
 8009702:	0013      	movs	r3, r2
 8009704:	0022      	movs	r2, r4
 8009706:	6033      	str	r3, [r6, #0]
 8009708:	3243      	adds	r2, #67	@ 0x43
 800970a:	7812      	ldrb	r2, [r2, #0]
 800970c:	2a00      	cmp	r2, #0
 800970e:	d001      	beq.n	8009714 <_printf_common+0x24>
 8009710:	3301      	adds	r3, #1
 8009712:	6033      	str	r3, [r6, #0]
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	069b      	lsls	r3, r3, #26
 8009718:	d502      	bpl.n	8009720 <_printf_common+0x30>
 800971a:	6833      	ldr	r3, [r6, #0]
 800971c:	3302      	adds	r3, #2
 800971e:	6033      	str	r3, [r6, #0]
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	2306      	movs	r3, #6
 8009724:	0015      	movs	r5, r2
 8009726:	401d      	ands	r5, r3
 8009728:	421a      	tst	r2, r3
 800972a:	d027      	beq.n	800977c <_printf_common+0x8c>
 800972c:	0023      	movs	r3, r4
 800972e:	3343      	adds	r3, #67	@ 0x43
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	1e5a      	subs	r2, r3, #1
 8009734:	4193      	sbcs	r3, r2
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	0692      	lsls	r2, r2, #26
 800973a:	d430      	bmi.n	800979e <_printf_common+0xae>
 800973c:	0022      	movs	r2, r4
 800973e:	9901      	ldr	r1, [sp, #4]
 8009740:	9800      	ldr	r0, [sp, #0]
 8009742:	9d08      	ldr	r5, [sp, #32]
 8009744:	3243      	adds	r2, #67	@ 0x43
 8009746:	47a8      	blx	r5
 8009748:	3001      	adds	r0, #1
 800974a:	d025      	beq.n	8009798 <_printf_common+0xa8>
 800974c:	2206      	movs	r2, #6
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	2500      	movs	r5, #0
 8009752:	4013      	ands	r3, r2
 8009754:	2b04      	cmp	r3, #4
 8009756:	d105      	bne.n	8009764 <_printf_common+0x74>
 8009758:	6833      	ldr	r3, [r6, #0]
 800975a:	68e5      	ldr	r5, [r4, #12]
 800975c:	1aed      	subs	r5, r5, r3
 800975e:	43eb      	mvns	r3, r5
 8009760:	17db      	asrs	r3, r3, #31
 8009762:	401d      	ands	r5, r3
 8009764:	68a3      	ldr	r3, [r4, #8]
 8009766:	6922      	ldr	r2, [r4, #16]
 8009768:	4293      	cmp	r3, r2
 800976a:	dd01      	ble.n	8009770 <_printf_common+0x80>
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	18ed      	adds	r5, r5, r3
 8009770:	2600      	movs	r6, #0
 8009772:	42b5      	cmp	r5, r6
 8009774:	d120      	bne.n	80097b8 <_printf_common+0xc8>
 8009776:	2000      	movs	r0, #0
 8009778:	e010      	b.n	800979c <_printf_common+0xac>
 800977a:	3501      	adds	r5, #1
 800977c:	68e3      	ldr	r3, [r4, #12]
 800977e:	6832      	ldr	r2, [r6, #0]
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	42ab      	cmp	r3, r5
 8009784:	ddd2      	ble.n	800972c <_printf_common+0x3c>
 8009786:	0022      	movs	r2, r4
 8009788:	2301      	movs	r3, #1
 800978a:	9901      	ldr	r1, [sp, #4]
 800978c:	9800      	ldr	r0, [sp, #0]
 800978e:	9f08      	ldr	r7, [sp, #32]
 8009790:	3219      	adds	r2, #25
 8009792:	47b8      	blx	r7
 8009794:	3001      	adds	r0, #1
 8009796:	d1f0      	bne.n	800977a <_printf_common+0x8a>
 8009798:	2001      	movs	r0, #1
 800979a:	4240      	negs	r0, r0
 800979c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800979e:	2030      	movs	r0, #48	@ 0x30
 80097a0:	18e1      	adds	r1, r4, r3
 80097a2:	3143      	adds	r1, #67	@ 0x43
 80097a4:	7008      	strb	r0, [r1, #0]
 80097a6:	0021      	movs	r1, r4
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	3145      	adds	r1, #69	@ 0x45
 80097ac:	7809      	ldrb	r1, [r1, #0]
 80097ae:	18a2      	adds	r2, r4, r2
 80097b0:	3243      	adds	r2, #67	@ 0x43
 80097b2:	3302      	adds	r3, #2
 80097b4:	7011      	strb	r1, [r2, #0]
 80097b6:	e7c1      	b.n	800973c <_printf_common+0x4c>
 80097b8:	0022      	movs	r2, r4
 80097ba:	2301      	movs	r3, #1
 80097bc:	9901      	ldr	r1, [sp, #4]
 80097be:	9800      	ldr	r0, [sp, #0]
 80097c0:	9f08      	ldr	r7, [sp, #32]
 80097c2:	321a      	adds	r2, #26
 80097c4:	47b8      	blx	r7
 80097c6:	3001      	adds	r0, #1
 80097c8:	d0e6      	beq.n	8009798 <_printf_common+0xa8>
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7d1      	b.n	8009772 <_printf_common+0x82>
	...

080097d0 <_printf_i>:
 80097d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d2:	b08b      	sub	sp, #44	@ 0x2c
 80097d4:	9206      	str	r2, [sp, #24]
 80097d6:	000a      	movs	r2, r1
 80097d8:	3243      	adds	r2, #67	@ 0x43
 80097da:	9307      	str	r3, [sp, #28]
 80097dc:	9005      	str	r0, [sp, #20]
 80097de:	9203      	str	r2, [sp, #12]
 80097e0:	7e0a      	ldrb	r2, [r1, #24]
 80097e2:	000c      	movs	r4, r1
 80097e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097e6:	2a78      	cmp	r2, #120	@ 0x78
 80097e8:	d809      	bhi.n	80097fe <_printf_i+0x2e>
 80097ea:	2a62      	cmp	r2, #98	@ 0x62
 80097ec:	d80b      	bhi.n	8009806 <_printf_i+0x36>
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	d100      	bne.n	80097f4 <_printf_i+0x24>
 80097f2:	e0ba      	b.n	800996a <_printf_i+0x19a>
 80097f4:	497a      	ldr	r1, [pc, #488]	@ (80099e0 <_printf_i+0x210>)
 80097f6:	9104      	str	r1, [sp, #16]
 80097f8:	2a58      	cmp	r2, #88	@ 0x58
 80097fa:	d100      	bne.n	80097fe <_printf_i+0x2e>
 80097fc:	e08e      	b.n	800991c <_printf_i+0x14c>
 80097fe:	0025      	movs	r5, r4
 8009800:	3542      	adds	r5, #66	@ 0x42
 8009802:	702a      	strb	r2, [r5, #0]
 8009804:	e022      	b.n	800984c <_printf_i+0x7c>
 8009806:	0010      	movs	r0, r2
 8009808:	3863      	subs	r0, #99	@ 0x63
 800980a:	2815      	cmp	r0, #21
 800980c:	d8f7      	bhi.n	80097fe <_printf_i+0x2e>
 800980e:	f7f6 fc81 	bl	8000114 <__gnu_thumb1_case_shi>
 8009812:	0016      	.short	0x0016
 8009814:	fff6001f 	.word	0xfff6001f
 8009818:	fff6fff6 	.word	0xfff6fff6
 800981c:	001ffff6 	.word	0x001ffff6
 8009820:	fff6fff6 	.word	0xfff6fff6
 8009824:	fff6fff6 	.word	0xfff6fff6
 8009828:	0036009f 	.word	0x0036009f
 800982c:	fff6007e 	.word	0xfff6007e
 8009830:	00b0fff6 	.word	0x00b0fff6
 8009834:	0036fff6 	.word	0x0036fff6
 8009838:	fff6fff6 	.word	0xfff6fff6
 800983c:	0082      	.short	0x0082
 800983e:	0025      	movs	r5, r4
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	3542      	adds	r5, #66	@ 0x42
 8009844:	1d11      	adds	r1, r2, #4
 8009846:	6019      	str	r1, [r3, #0]
 8009848:	6813      	ldr	r3, [r2, #0]
 800984a:	702b      	strb	r3, [r5, #0]
 800984c:	2301      	movs	r3, #1
 800984e:	e09e      	b.n	800998e <_printf_i+0x1be>
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	6809      	ldr	r1, [r1, #0]
 8009854:	1d02      	adds	r2, r0, #4
 8009856:	060d      	lsls	r5, r1, #24
 8009858:	d50b      	bpl.n	8009872 <_printf_i+0xa2>
 800985a:	6806      	ldr	r6, [r0, #0]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	2e00      	cmp	r6, #0
 8009860:	da03      	bge.n	800986a <_printf_i+0x9a>
 8009862:	232d      	movs	r3, #45	@ 0x2d
 8009864:	9a03      	ldr	r2, [sp, #12]
 8009866:	4276      	negs	r6, r6
 8009868:	7013      	strb	r3, [r2, #0]
 800986a:	4b5d      	ldr	r3, [pc, #372]	@ (80099e0 <_printf_i+0x210>)
 800986c:	270a      	movs	r7, #10
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	e018      	b.n	80098a4 <_printf_i+0xd4>
 8009872:	6806      	ldr	r6, [r0, #0]
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	0649      	lsls	r1, r1, #25
 8009878:	d5f1      	bpl.n	800985e <_printf_i+0x8e>
 800987a:	b236      	sxth	r6, r6
 800987c:	e7ef      	b.n	800985e <_printf_i+0x8e>
 800987e:	6808      	ldr	r0, [r1, #0]
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	c940      	ldmia	r1!, {r6}
 8009884:	0605      	lsls	r5, r0, #24
 8009886:	d402      	bmi.n	800988e <_printf_i+0xbe>
 8009888:	0640      	lsls	r0, r0, #25
 800988a:	d500      	bpl.n	800988e <_printf_i+0xbe>
 800988c:	b2b6      	uxth	r6, r6
 800988e:	6019      	str	r1, [r3, #0]
 8009890:	4b53      	ldr	r3, [pc, #332]	@ (80099e0 <_printf_i+0x210>)
 8009892:	270a      	movs	r7, #10
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	2a6f      	cmp	r2, #111	@ 0x6f
 8009898:	d100      	bne.n	800989c <_printf_i+0xcc>
 800989a:	3f02      	subs	r7, #2
 800989c:	0023      	movs	r3, r4
 800989e:	2200      	movs	r2, #0
 80098a0:	3343      	adds	r3, #67	@ 0x43
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	6863      	ldr	r3, [r4, #4]
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	db06      	blt.n	80098ba <_printf_i+0xea>
 80098ac:	2104      	movs	r1, #4
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	9d03      	ldr	r5, [sp, #12]
 80098b2:	438a      	bics	r2, r1
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	4333      	orrs	r3, r6
 80098b8:	d00c      	beq.n	80098d4 <_printf_i+0x104>
 80098ba:	9d03      	ldr	r5, [sp, #12]
 80098bc:	0030      	movs	r0, r6
 80098be:	0039      	movs	r1, r7
 80098c0:	f7f6 fcb8 	bl	8000234 <__aeabi_uidivmod>
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	3d01      	subs	r5, #1
 80098c8:	5c5b      	ldrb	r3, [r3, r1]
 80098ca:	702b      	strb	r3, [r5, #0]
 80098cc:	0033      	movs	r3, r6
 80098ce:	0006      	movs	r6, r0
 80098d0:	429f      	cmp	r7, r3
 80098d2:	d9f3      	bls.n	80098bc <_printf_i+0xec>
 80098d4:	2f08      	cmp	r7, #8
 80098d6:	d109      	bne.n	80098ec <_printf_i+0x11c>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	07db      	lsls	r3, r3, #31
 80098dc:	d506      	bpl.n	80098ec <_printf_i+0x11c>
 80098de:	6862      	ldr	r2, [r4, #4]
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	dc02      	bgt.n	80098ec <_printf_i+0x11c>
 80098e6:	2330      	movs	r3, #48	@ 0x30
 80098e8:	3d01      	subs	r5, #1
 80098ea:	702b      	strb	r3, [r5, #0]
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	1b5b      	subs	r3, r3, r5
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	9b07      	ldr	r3, [sp, #28]
 80098f4:	0021      	movs	r1, r4
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	9b06      	ldr	r3, [sp, #24]
 80098fc:	aa09      	add	r2, sp, #36	@ 0x24
 80098fe:	f7ff fef7 	bl	80096f0 <_printf_common>
 8009902:	3001      	adds	r0, #1
 8009904:	d148      	bne.n	8009998 <_printf_i+0x1c8>
 8009906:	2001      	movs	r0, #1
 8009908:	4240      	negs	r0, r0
 800990a:	b00b      	add	sp, #44	@ 0x2c
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	2220      	movs	r2, #32
 8009910:	6809      	ldr	r1, [r1, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	6022      	str	r2, [r4, #0]
 8009916:	2278      	movs	r2, #120	@ 0x78
 8009918:	4932      	ldr	r1, [pc, #200]	@ (80099e4 <_printf_i+0x214>)
 800991a:	9104      	str	r1, [sp, #16]
 800991c:	0021      	movs	r1, r4
 800991e:	3145      	adds	r1, #69	@ 0x45
 8009920:	700a      	strb	r2, [r1, #0]
 8009922:	6819      	ldr	r1, [r3, #0]
 8009924:	6822      	ldr	r2, [r4, #0]
 8009926:	c940      	ldmia	r1!, {r6}
 8009928:	0610      	lsls	r0, r2, #24
 800992a:	d402      	bmi.n	8009932 <_printf_i+0x162>
 800992c:	0650      	lsls	r0, r2, #25
 800992e:	d500      	bpl.n	8009932 <_printf_i+0x162>
 8009930:	b2b6      	uxth	r6, r6
 8009932:	6019      	str	r1, [r3, #0]
 8009934:	07d3      	lsls	r3, r2, #31
 8009936:	d502      	bpl.n	800993e <_printf_i+0x16e>
 8009938:	2320      	movs	r3, #32
 800993a:	4313      	orrs	r3, r2
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	2e00      	cmp	r6, #0
 8009940:	d001      	beq.n	8009946 <_printf_i+0x176>
 8009942:	2710      	movs	r7, #16
 8009944:	e7aa      	b.n	800989c <_printf_i+0xcc>
 8009946:	2220      	movs	r2, #32
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	4393      	bics	r3, r2
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	e7f8      	b.n	8009942 <_printf_i+0x172>
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	680d      	ldr	r5, [r1, #0]
 8009954:	1d10      	adds	r0, r2, #4
 8009956:	6949      	ldr	r1, [r1, #20]
 8009958:	6018      	str	r0, [r3, #0]
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	062e      	lsls	r6, r5, #24
 800995e:	d501      	bpl.n	8009964 <_printf_i+0x194>
 8009960:	6019      	str	r1, [r3, #0]
 8009962:	e002      	b.n	800996a <_printf_i+0x19a>
 8009964:	066d      	lsls	r5, r5, #25
 8009966:	d5fb      	bpl.n	8009960 <_printf_i+0x190>
 8009968:	8019      	strh	r1, [r3, #0]
 800996a:	2300      	movs	r3, #0
 800996c:	9d03      	ldr	r5, [sp, #12]
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	e7bf      	b.n	80098f2 <_printf_i+0x122>
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	1d11      	adds	r1, r2, #4
 8009976:	6019      	str	r1, [r3, #0]
 8009978:	6815      	ldr	r5, [r2, #0]
 800997a:	2100      	movs	r1, #0
 800997c:	0028      	movs	r0, r5
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	f000 f856 	bl	8009a30 <memchr>
 8009984:	2800      	cmp	r0, #0
 8009986:	d001      	beq.n	800998c <_printf_i+0x1bc>
 8009988:	1b40      	subs	r0, r0, r5
 800998a:	6060      	str	r0, [r4, #4]
 800998c:	6863      	ldr	r3, [r4, #4]
 800998e:	6123      	str	r3, [r4, #16]
 8009990:	2300      	movs	r3, #0
 8009992:	9a03      	ldr	r2, [sp, #12]
 8009994:	7013      	strb	r3, [r2, #0]
 8009996:	e7ac      	b.n	80098f2 <_printf_i+0x122>
 8009998:	002a      	movs	r2, r5
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	9906      	ldr	r1, [sp, #24]
 800999e:	9805      	ldr	r0, [sp, #20]
 80099a0:	9d07      	ldr	r5, [sp, #28]
 80099a2:	47a8      	blx	r5
 80099a4:	3001      	adds	r0, #1
 80099a6:	d0ae      	beq.n	8009906 <_printf_i+0x136>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	079b      	lsls	r3, r3, #30
 80099ac:	d415      	bmi.n	80099da <_printf_i+0x20a>
 80099ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b0:	68e0      	ldr	r0, [r4, #12]
 80099b2:	4298      	cmp	r0, r3
 80099b4:	daa9      	bge.n	800990a <_printf_i+0x13a>
 80099b6:	0018      	movs	r0, r3
 80099b8:	e7a7      	b.n	800990a <_printf_i+0x13a>
 80099ba:	0022      	movs	r2, r4
 80099bc:	2301      	movs	r3, #1
 80099be:	9906      	ldr	r1, [sp, #24]
 80099c0:	9805      	ldr	r0, [sp, #20]
 80099c2:	9e07      	ldr	r6, [sp, #28]
 80099c4:	3219      	adds	r2, #25
 80099c6:	47b0      	blx	r6
 80099c8:	3001      	adds	r0, #1
 80099ca:	d09c      	beq.n	8009906 <_printf_i+0x136>
 80099cc:	3501      	adds	r5, #1
 80099ce:	68e3      	ldr	r3, [r4, #12]
 80099d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	42ab      	cmp	r3, r5
 80099d6:	dcf0      	bgt.n	80099ba <_printf_i+0x1ea>
 80099d8:	e7e9      	b.n	80099ae <_printf_i+0x1de>
 80099da:	2500      	movs	r5, #0
 80099dc:	e7f7      	b.n	80099ce <_printf_i+0x1fe>
 80099de:	46c0      	nop			@ (mov r8, r8)
 80099e0:	08009d42 	.word	0x08009d42
 80099e4:	08009d53 	.word	0x08009d53

080099e8 <memmove>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	4288      	cmp	r0, r1
 80099ec:	d902      	bls.n	80099f4 <memmove+0xc>
 80099ee:	188b      	adds	r3, r1, r2
 80099f0:	4298      	cmp	r0, r3
 80099f2:	d308      	bcc.n	8009a06 <memmove+0x1e>
 80099f4:	2300      	movs	r3, #0
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d007      	beq.n	8009a0a <memmove+0x22>
 80099fa:	5ccc      	ldrb	r4, [r1, r3]
 80099fc:	54c4      	strb	r4, [r0, r3]
 80099fe:	3301      	adds	r3, #1
 8009a00:	e7f9      	b.n	80099f6 <memmove+0xe>
 8009a02:	5c8b      	ldrb	r3, [r1, r2]
 8009a04:	5483      	strb	r3, [r0, r2]
 8009a06:	3a01      	subs	r2, #1
 8009a08:	d2fb      	bcs.n	8009a02 <memmove+0x1a>
 8009a0a:	bd10      	pop	{r4, pc}

08009a0c <_sbrk_r>:
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	b570      	push	{r4, r5, r6, lr}
 8009a10:	4d06      	ldr	r5, [pc, #24]	@ (8009a2c <_sbrk_r+0x20>)
 8009a12:	0004      	movs	r4, r0
 8009a14:	0008      	movs	r0, r1
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	f7f8 fa76 	bl	8001f08 <_sbrk>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d103      	bne.n	8009a28 <_sbrk_r+0x1c>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d000      	beq.n	8009a28 <_sbrk_r+0x1c>
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	46c0      	nop			@ (mov r8, r8)
 8009a2c:	20000588 	.word	0x20000588

08009a30 <memchr>:
 8009a30:	b2c9      	uxtb	r1, r1
 8009a32:	1882      	adds	r2, r0, r2
 8009a34:	4290      	cmp	r0, r2
 8009a36:	d101      	bne.n	8009a3c <memchr+0xc>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	4770      	bx	lr
 8009a3c:	7803      	ldrb	r3, [r0, #0]
 8009a3e:	428b      	cmp	r3, r1
 8009a40:	d0fb      	beq.n	8009a3a <memchr+0xa>
 8009a42:	3001      	adds	r0, #1
 8009a44:	e7f6      	b.n	8009a34 <memchr+0x4>

08009a46 <memcpy>:
 8009a46:	2300      	movs	r3, #0
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d100      	bne.n	8009a50 <memcpy+0xa>
 8009a4e:	bd10      	pop	{r4, pc}
 8009a50:	5ccc      	ldrb	r4, [r1, r3]
 8009a52:	54c4      	strb	r4, [r0, r3]
 8009a54:	3301      	adds	r3, #1
 8009a56:	e7f8      	b.n	8009a4a <memcpy+0x4>

08009a58 <_realloc_r>:
 8009a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5a:	0006      	movs	r6, r0
 8009a5c:	000c      	movs	r4, r1
 8009a5e:	0015      	movs	r5, r2
 8009a60:	2900      	cmp	r1, #0
 8009a62:	d105      	bne.n	8009a70 <_realloc_r+0x18>
 8009a64:	0011      	movs	r1, r2
 8009a66:	f7ff fc55 	bl	8009314 <_malloc_r>
 8009a6a:	0004      	movs	r4, r0
 8009a6c:	0020      	movs	r0, r4
 8009a6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	d103      	bne.n	8009a7c <_realloc_r+0x24>
 8009a74:	f7ff fbe2 	bl	800923c <_free_r>
 8009a78:	002c      	movs	r4, r5
 8009a7a:	e7f7      	b.n	8009a6c <_realloc_r+0x14>
 8009a7c:	f000 f81c 	bl	8009ab8 <_malloc_usable_size_r>
 8009a80:	0007      	movs	r7, r0
 8009a82:	4285      	cmp	r5, r0
 8009a84:	d802      	bhi.n	8009a8c <_realloc_r+0x34>
 8009a86:	0843      	lsrs	r3, r0, #1
 8009a88:	42ab      	cmp	r3, r5
 8009a8a:	d3ef      	bcc.n	8009a6c <_realloc_r+0x14>
 8009a8c:	0029      	movs	r1, r5
 8009a8e:	0030      	movs	r0, r6
 8009a90:	f7ff fc40 	bl	8009314 <_malloc_r>
 8009a94:	9001      	str	r0, [sp, #4]
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d101      	bne.n	8009a9e <_realloc_r+0x46>
 8009a9a:	9c01      	ldr	r4, [sp, #4]
 8009a9c:	e7e6      	b.n	8009a6c <_realloc_r+0x14>
 8009a9e:	002a      	movs	r2, r5
 8009aa0:	42bd      	cmp	r5, r7
 8009aa2:	d900      	bls.n	8009aa6 <_realloc_r+0x4e>
 8009aa4:	003a      	movs	r2, r7
 8009aa6:	0021      	movs	r1, r4
 8009aa8:	9801      	ldr	r0, [sp, #4]
 8009aaa:	f7ff ffcc 	bl	8009a46 <memcpy>
 8009aae:	0021      	movs	r1, r4
 8009ab0:	0030      	movs	r0, r6
 8009ab2:	f7ff fbc3 	bl	800923c <_free_r>
 8009ab6:	e7f0      	b.n	8009a9a <_realloc_r+0x42>

08009ab8 <_malloc_usable_size_r>:
 8009ab8:	1f0b      	subs	r3, r1, #4
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	1f18      	subs	r0, r3, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da01      	bge.n	8009ac6 <_malloc_usable_size_r+0xe>
 8009ac2:	580b      	ldr	r3, [r1, r0]
 8009ac4:	18c0      	adds	r0, r0, r3
 8009ac6:	4770      	bx	lr

08009ac8 <_init>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	46c0      	nop			@ (mov r8, r8)
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr

08009ad4 <_fini>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	46c0      	nop			@ (mov r8, r8)
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr
