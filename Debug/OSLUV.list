
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e10  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006ecc  08006ecc  00007ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa8  08006fa8  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fa8  08006fa8  00007fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb0  08006fb0  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00007fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00007fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006fb8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000014  08006fcc  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08006fcc  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016777  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003013  00000000  00000000  0001e7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  000217c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a9b2  00000000  00000000  00022ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017be6  00000000  00000000  0003d552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ad574  00000000  00000000  00055138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001026ac  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f70  00000000  00000000  001026ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004838  00000000  00000000  00103660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00107e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006eb4 	.word	0x08006eb4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08006eb4 	.word	0x08006eb4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f001 f99b 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8b7 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fccb 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 800062e:	f000 fcb3 	bl	8000f98 <MX_DMA_Init>
  MX_ADC1_Init();
 8000632:	f000 f917 	bl	8000864 <MX_ADC1_Init>
  MX_COMP2_Init();
 8000636:	f000 f9d9 	bl	80009ec <MX_COMP2_Init>
  MX_DAC1_Init();
 800063a:	f000 fa07 	bl	8000a4c <MX_DAC1_Init>
  MX_TIM1_Init();
 800063e:	f000 fa49 	bl	8000ad4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000642:	f000 fb0f 	bl	8000c64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000646:	f000 fb6d 	bl	8000d24 <MX_TIM3_Init>
  MX_TIM16_Init();
 800064a:	f000 fc07 	bl	8000e5c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800064e:	f000 fc55 	bl	8000efc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000652:	f000 fbc9 	bl	8000de8 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000656:	f000 f8e7 	bl	8000828 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // DRV PWM output
 800065a:	4b44      	ldr	r3, [pc, #272]	@ (800076c <main+0x150>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f004 f9e4 	bl	8004a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // alive PWM output
 8000664:	4b42      	ldr	r3, [pc, #264]	@ (8000770 <main+0x154>)
 8000666:	2108      	movs	r1, #8
 8000668:	0018      	movs	r0, r3
 800066a:	f004 f9df 	bl	8004a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // DRV Mask PWM output
 800066e:	4b41      	ldr	r3, [pc, #260]	@ (8000774 <main+0x158>)
 8000670:	2104      	movs	r1, #4
 8000672:	0018      	movs	r0, r3
 8000674:	f004 f9da 	bl	8004a2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim6, TIM_CHANNEL_1); // state machine timing
 8000678:	4b3f      	ldr	r3, [pc, #252]	@ (8000778 <main+0x15c>)
 800067a:	2100      	movs	r1, #0
 800067c:	0018      	movs	r0, r3
 800067e:	f004 fabf 	bl	8004c00 <HAL_TIM_PWM_Start_IT>


  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_buffer, 6); // start ADC with DMA, 6 channels
 8000682:	493e      	ldr	r1, [pc, #248]	@ (800077c <main+0x160>)
 8000684:	4b3e      	ldr	r3, [pc, #248]	@ (8000780 <main+0x164>)
 8000686:	2206      	movs	r2, #6
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fce9 	bl	8002060 <HAL_ADC_Start_DMA>
   * 4 = Ch9: Lamp Intensity
   * 5 = Ch10: Isense_In
   */


  enum States state = INIT;
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (state) {
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d053      	beq.n	8000744 <main+0x128>
 800069c:	dcfa      	bgt.n	8000694 <main+0x78>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <main+0x8c>
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d02a      	beq.n	80006fc <main+0xe0>
 80006a6:	e7f5      	b.n	8000694 <main+0x78>
	  case INIT:
		  // init code
		  HAL_GPIO_WritePin(GPIOC, 15, GPIO_PIN_RESET); // disable LED
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <main+0x168>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	210f      	movs	r1, #15
 80006ae:	0018      	movs	r0, r3
 80006b0:	f003 fa27 	bl	8003b02 <HAL_GPIO_WritePin>
		  // set DRV to zero, set MASK to max to enforce gate signal off
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80006b4:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <main+0x150>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
		  arr_buffer = __HAL_TIM_GET_AUTORELOAD(&htim3);
 80006bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <main+0x158>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c2:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <main+0x16c>)
 80006c4:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, arr_buffer);
 80006c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <main+0x158>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000788 <main+0x16c>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	639a      	str	r2, [r3, #56]	@ 0x38

		  // exit conditions
		  if (errorFlag == 1) {
 80006d0:	4b2e      	ldr	r3, [pc, #184]	@ (800078c <main+0x170>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <main+0xc4>
			  state = ERROR_state;
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	2202      	movs	r2, #2
 80006de:	701a      	strb	r2, [r3, #0]
		  }
		  if (enableFlag == 1 && supplyOKFlag == 1) {
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <main+0x174>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d13b      	bne.n	8000762 <main+0x146>
 80006ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <main+0x178>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d136      	bne.n	8000762 <main+0x146>
			  state = RUN;
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80006fa:	e032      	b.n	8000762 <main+0x146>
	  case RUN:
		  // RUN code
		  HAL_GPIO_WritePin(GPIOC, 15, GPIO_PIN_SET); // enable LED
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <main+0x168>)
 80006fe:	2201      	movs	r2, #1
 8000700:	210f      	movs	r1, #15
 8000702:	0018      	movs	r0, r3
 8000704:	f003 f9fd 	bl	8003b02 <HAL_GPIO_WritePin>
		  // set Mask to zero
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <main+0x158>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	639a      	str	r2, [r3, #56]	@ 0x38
		  // set DRV CCR to 3.3us (=2A @ 24V,40uH) for max. duty cycle limiting (=53 steps)
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 53);
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <main+0x150>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2235      	movs	r2, #53	@ 0x35
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34

		  // exit conditions
		  if (errorFlag == 1) {
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <main+0x170>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b01      	cmp	r3, #1
 8000720:	d102      	bne.n	8000728 <main+0x10c>
			  state = ERROR_state;
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	2202      	movs	r2, #2
 8000726:	701a      	strb	r2, [r3, #0]
		  }
		  if (enableFlag == 0 || supplyOKFlag == 0) {
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <main+0x174>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <main+0x120>
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <main+0x178>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d114      	bne.n	8000766 <main+0x14a>
			  state = INIT;
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000742:	e010      	b.n	8000766 <main+0x14a>
	  case ERROR_state:
		  // ERROR code
		  // set DRV to zero, set MASK to max to enforce gate signal off
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <main+0x150>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34
		  arr_buffer = __HAL_TIM_GET_AUTORELOAD(&htim3);
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <main+0x158>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <main+0x16c>)
 8000754:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, arr_buffer);
 8000756:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <main+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0b      	ldr	r2, [pc, #44]	@ (8000788 <main+0x16c>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	639a      	str	r2, [r3, #56]	@ 0x38

		  // communicate error (blink LED, UART)
		  // no exit conditions, only power cycle
		  break;
 8000760:	e002      	b.n	8000768 <main+0x14c>
		  break;
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	e796      	b.n	8000694 <main+0x78>
		  break;
 8000766:	46c0      	nop			@ (mov r8, r8)
	  switch (state) {
 8000768:	e794      	b.n	8000694 <main+0x78>
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	20000154 	.word	0x20000154
 8000770:	200001a0 	.word	0x200001a0
 8000774:	200001ec 	.word	0x200001ec
 8000778:	20000238 	.word	0x20000238
 800077c:	20000038 	.word	0x20000038
 8000780:	20000050 	.word	0x20000050
 8000784:	50000800 	.word	0x50000800
 8000788:	20000364 	.word	0x20000364
 800078c:	20000032 	.word	0x20000032
 8000790:	20000030 	.word	0x20000030
 8000794:	20000031 	.word	0x20000031

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b093      	sub	sp, #76	@ 0x4c
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	2410      	movs	r4, #16
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2338      	movs	r3, #56	@ 0x38
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f006 fb57 	bl	8006e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	2310      	movs	r3, #16
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f006 fb50 	bl	8006e5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 f9bb 	bl	8003b3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2240      	movs	r2, #64	@ 0x40
 80007de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 f9f3 	bl	8003bd4 <HAL_RCC_OscConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007f2:	f000 fc91 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	003b      	movs	r3, r7
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080e:	003b      	movs	r3, r7
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f003 fcf8 	bl	8004208 <HAL_RCC_ClockConfig>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800081c:	f000 fc7c 	bl	8001118 <Error_Handler>
  }
}
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b013      	add	sp, #76	@ 0x4c
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2011      	movs	r0, #17
 8000832:	f002 fba1 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000836:	2011      	movs	r0, #17
 8000838:	f002 fbb3 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* ADC1_COMP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	200c      	movs	r0, #12
 8000842:	f002 fb99 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000846:	200c      	movs	r0, #12
 8000848:	f002 fbab 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2009      	movs	r0, #9
 8000852:	f002 fb91 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000856:	2009      	movs	r0, #9
 8000858:	f002 fba3 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	0018      	movs	r0, r3
 800086e:	230c      	movs	r3, #12
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f006 faf2 	bl	8006e5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000878:	4b55      	ldr	r3, [pc, #340]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 800087a:	4a56      	ldr	r2, [pc, #344]	@ (80009d4 <MX_ADC1_Init+0x170>)
 800087c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800087e:	4b54      	ldr	r3, [pc, #336]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000880:	22a0      	movs	r2, #160	@ 0xa0
 8000882:	0352      	lsls	r2, r2, #13
 8000884:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000886:	4b52      	ldr	r3, [pc, #328]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088c:	4b50      	ldr	r3, [pc, #320]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000892:	4b4f      	ldr	r3, [pc, #316]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	0392      	lsls	r2, r2, #14
 8000898:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089a:	4b4d      	ldr	r3, [pc, #308]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 800089c:	2204      	movs	r2, #4
 800089e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a0:	4b4b      	ldr	r3, [pc, #300]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008a6:	4b4a      	ldr	r3, [pc, #296]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ac:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 6;
 80008b2:	4b47      	ldr	r3, [pc, #284]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008b4:	2206      	movs	r2, #6
 80008b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80008b8:	4b45      	ldr	r3, [pc, #276]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008ba:	22a8      	movs	r2, #168	@ 0xa8
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008c0:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008c8:	4b41      	ldr	r3, [pc, #260]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008ca:	222c      	movs	r2, #44	@ 0x2c
 80008cc:	2100      	movs	r1, #0
 80008ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d0:	4b3f      	ldr	r3, [pc, #252]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 80008d6:	4b3e      	ldr	r3, [pc, #248]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008d8:	2202      	movs	r2, #2
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_7CYCLES_5;
 80008dc:	4b3c      	ldr	r3, [pc, #240]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008de:	2202      	movs	r2, #2
 80008e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80008e2:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008e4:	223c      	movs	r2, #60	@ 0x3c
 80008e6:	2100      	movs	r1, #0
 80008e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008ea:	4b39      	ldr	r3, [pc, #228]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f0:	4b37      	ldr	r3, [pc, #220]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fa0c 	bl	8001d10 <HAL_ADC_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80008fc:	f000 fc0c 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	1d3a      	adds	r2, r7, #4
 8000914:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f001 fd67 	bl	80023ec <HAL_ADC_ConfigChannel>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000922:	f000 fbf9 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4a2b      	ldr	r2, [pc, #172]	@ (80009d8 <MX_ADC1_Init+0x174>)
 800092a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2204      	movs	r2, #4
 8000930:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fd57 	bl	80023ec <HAL_ADC_ConfigChannel>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000942:	f000 fbe9 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4a24      	ldr	r2, [pc, #144]	@ (80009dc <MX_ADC1_Init+0x178>)
 800094a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2208      	movs	r2, #8
 8000950:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fd47 	bl	80023ec <HAL_ADC_ConfigChannel>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000962:	f000 fbd9 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4a1d      	ldr	r2, [pc, #116]	@ (80009e0 <MX_ADC1_Init+0x17c>)
 800096a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	220c      	movs	r2, #12
 8000970:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	1d3a      	adds	r2, r7, #4
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fd37 	bl	80023ec <HAL_ADC_ConfigChannel>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000982:	f000 fbc9 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4a16      	ldr	r2, [pc, #88]	@ (80009e4 <MX_ADC1_Init+0x180>)
 800098a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2210      	movs	r2, #16
 8000990:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	1d3a      	adds	r2, r7, #4
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fd27 	bl	80023ec <HAL_ADC_ConfigChannel>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80009a2:	f000 fbb9 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <MX_ADC1_Init+0x184>)
 80009aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2214      	movs	r2, #20
 80009b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	1d3a      	adds	r2, r7, #4
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_ADC1_Init+0x16c>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fd17 	bl	80023ec <HAL_ADC_ConfigChannel>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80009c2:	f000 fba9 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000050 	.word	0x20000050
 80009d4:	40012400 	.word	0x40012400
 80009d8:	04000002 	.word	0x04000002
 80009dc:	0c000008 	.word	0x0c000008
 80009e0:	20000100 	.word	0x20000100
 80009e4:	24000200 	.word	0x24000200
 80009e8:	28000400 	.word	0x28000400

080009ec <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_COMP2_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <MX_COMP2_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_COMP2_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_COMP2_Init+0x58>)
 80009fe:	2240      	movs	r2, #64	@ 0x40
 8000a00:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <MX_COMP2_Init+0x58>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f894 	bl	8002b5c <HAL_COMP_Init>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_COMP2_Init+0x50>
  {
    Error_Handler();
 8000a38:	f000 fb6e 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	20000110 	.word	0x20000110
 8000a48:	40010204 	.word	0x40010204

08000a4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2324      	movs	r3, #36	@ 0x24
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f006 f9fe 	bl	8006e5c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <MX_DAC1_Init+0x80>)
 8000a62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <MX_DAC1_Init+0x84>)
 8000a64:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <MX_DAC1_Init+0x80>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fab7 	bl	8002fdc <HAL_DAC_Init>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8000a72:	f000 fb51 	bl	8001118 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a94:	1d39      	adds	r1, r7, #4
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_DAC1_Init+0x80>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fb26 	bl	80030ec <HAL_DAC_ConfigChannel>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f000 fb38 	bl	8001118 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000aae:	1d39      	adds	r1, r7, #4
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_DAC1_Init+0x80>)
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f002 fb19 	bl	80030ec <HAL_DAC_ConfigChannel>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_DAC1_Init+0x76>
  {
    Error_Handler();
 8000abe:	f000 fb2b 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b00a      	add	sp, #40	@ 0x28
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000140 	.word	0x20000140
 8000ad0:	40007400 	.word	0x40007400

08000ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b09a      	sub	sp, #104	@ 0x68
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ada:	235c      	movs	r3, #92	@ 0x5c
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	0018      	movs	r0, r3
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f006 f9b9 	bl	8006e5c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000aea:	2350      	movs	r3, #80	@ 0x50
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	0018      	movs	r0, r3
 8000af0:	230c      	movs	r3, #12
 8000af2:	001a      	movs	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	f006 f9b1 	bl	8006e5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afa:	2334      	movs	r3, #52	@ 0x34
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	0018      	movs	r0, r3
 8000b00:	231c      	movs	r3, #28
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f006 f9a9 	bl	8006e5c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2334      	movs	r3, #52	@ 0x34
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f006 f9a2 	bl	8006e5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b18:	4b50      	ldr	r3, [pc, #320]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b1a:	4a51      	ldr	r2, [pc, #324]	@ (8000c60 <MX_TIM1_Init+0x18c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b4d      	ldr	r3, [pc, #308]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320;
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b2c:	22a0      	movs	r2, #160	@ 0xa0
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b4a      	ldr	r3, [pc, #296]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b38:	4b48      	ldr	r3, [pc, #288]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b47      	ldr	r3, [pc, #284]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b44:	4b45      	ldr	r3, [pc, #276]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f003 ff18 	bl	800497c <HAL_TIM_PWM_Init>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000b50:	f000 fae2 	bl	8001118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	215c      	movs	r1, #92	@ 0x5c
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b68:	187a      	adds	r2, r7, r1
 8000b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f005 f944 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b78:	f000 face 	bl	8001118 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000b7c:	2150      	movs	r1, #80	@ 0x50
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2201      	movs	r2, #1
 8000b88:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000b90:	187a      	adds	r2, r7, r1
 8000b92:	4b32      	ldr	r3, [pc, #200]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	0018      	movs	r0, r3
 8000b98:	f005 fa3a 	bl	8006010 <HAL_TIMEx_ConfigBreakInput>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000ba0:	f000 faba 	bl	8001118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2134      	movs	r1, #52	@ 0x34
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2260      	movs	r2, #96	@ 0x60
 8000baa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f004 fb4e 	bl	8005278 <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000be0:	f000 fa9a 	bl	8001118 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	0152      	lsls	r2, r2, #5
 8000c02:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2280      	movs	r2, #128	@ 0x80
 8000c08:	0192      	lsls	r2, r2, #6
 8000c0a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2280      	movs	r2, #128	@ 0x80
 8000c22:	0492      	lsls	r2, r2, #18
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c38:	003a      	movs	r2, r7
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f005 f94a 	bl	8005ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8000c48:	f000 fa66 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <MX_TIM1_Init+0x188>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fc96 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b01a      	add	sp, #104	@ 0x68
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000154 	.word	0x20000154
 8000c60:	40012c00 	.word	0x40012c00

08000c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	231c      	movs	r3, #28
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	0018      	movs	r0, r3
 8000c70:	230c      	movs	r3, #12
 8000c72:	001a      	movs	r2, r3
 8000c74:	2100      	movs	r1, #0
 8000c76:	f006 f8f1 	bl	8006e5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	231c      	movs	r3, #28
 8000c80:	001a      	movs	r2, r3
 8000c82:	2100      	movs	r1, #0
 8000c84:	f006 f8ea 	bl	8006e5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	05d2      	lsls	r2, r2, #23
 8000c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c90:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f003 fe62 	bl	800497c <HAL_TIM_PWM_Init>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cbc:	f000 fa2c 	bl	8001118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	211c      	movs	r1, #28
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cce:	187a      	adds	r2, r7, r1
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f005 f891 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cde:	f000 fa1b 	bl	8001118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2260      	movs	r2, #96	@ 0x60
 8000ce6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ce8:	003b      	movs	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cee:	003b      	movs	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf4:	003b      	movs	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cfa:	0039      	movs	r1, r7
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	0018      	movs	r0, r3
 8000d02:	f004 fab9 	bl	8005278 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000d0a:	f000 fa05 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <MX_TIM2_Init+0xbc>)
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 fc35 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b00a      	add	sp, #40	@ 0x28
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	200001a0 	.word	0x200001a0

08000d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	231c      	movs	r3, #28
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	0018      	movs	r0, r3
 8000d30:	230c      	movs	r3, #12
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f006 f891 	bl	8006e5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	231c      	movs	r3, #28
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f006 f88a 	bl	8006e5c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d4a:	4a25      	ldr	r2, [pc, #148]	@ (8000de0 <MX_TIM3_Init+0xbc>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d5c:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <MX_TIM3_Init+0xc0>)
 8000d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f003 fe04 	bl	800497c <HAL_TIM_PWM_Init>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d78:	f000 f9ce 	bl	8001118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	211c      	movs	r1, #28
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8a:	187a      	adds	r2, r7, r1
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f005 f833 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000d9a:	f000 f9bd 	bl	8001118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	003b      	movs	r3, r7
 8000da0:	2260      	movs	r2, #96	@ 0x60
 8000da2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000da4:	003b      	movs	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	003b      	movs	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	003b      	movs	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db6:	0039      	movs	r1, r7
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f004 fa5b 	bl	8005278 <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000dc6:	f000 f9a7 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <MX_TIM3_Init+0xb8>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 fbd7 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b00a      	add	sp, #40	@ 0x28
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	200001ec 	.word	0x200001ec
 8000de0:	40000400 	.word	0x40000400
 8000de4:	0000ffff 	.word	0x0000ffff

08000de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	0018      	movs	r0, r3
 8000df2:	230c      	movs	r3, #12
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f006 f830 	bl	8006e5c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000dfe:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <MX_TIM6_Init+0x70>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 8000e02:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000e04:	2210      	movs	r2, #16
 8000e06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000e10:	22fa      	movs	r2, #250	@ 0xfa
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f003 fd54 	bl	80048cc <HAL_TIM_Base_Init>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000e28:	f000 f976 	bl	8001118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2220      	movs	r2, #32
 8000e30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e38:	1d3a      	adds	r2, r7, #4
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_TIM6_Init+0x6c>)
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f004 ffdc 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000e48:	f000 f966 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000238 	.word	0x20000238
 8000e58:	40001000 	.word	0x40001000

08000e5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e62:	003b      	movs	r3, r7
 8000e64:	0018      	movs	r0, r3
 8000e66:	2310      	movs	r3, #16
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f005 fff6 	bl	8006e5c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e72:	4a20      	ldr	r2, [pc, #128]	@ (8000ef4 <MX_TIM16_Init+0x98>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e84:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <MX_TIM16_Init+0x9c>)
 8000e86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f003 fd15 	bl	80048cc <HAL_TIM_Base_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000ea6:	f000 f937 	bl	8001118 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f003 ffd7 	bl	8004e60 <HAL_TIM_IC_Init>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000eb6:	f000 f92f 	bl	8001118 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ed2:	0039      	movs	r1, r7
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_TIM16_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f004 f929 	bl	8005130 <HAL_TIM_IC_ConfigChannel>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM16_Init+0x8a>
  {
    Error_Handler();
 8000ee2:	f000 f919 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	20000284 	.word	0x20000284
 8000ef4:	40014400 	.word	0x40014400
 8000ef8:	0000ffff 	.word	0x0000ffff

08000efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f02:	4a24      	ldr	r2, [pc, #144]	@ (8000f94 <MX_USART2_UART_Init+0x98>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f06:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f08:	22e1      	movs	r2, #225	@ 0xe1
 8000f0a:	0252      	lsls	r2, r2, #9
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f005 f926 	bl	8006198 <HAL_UART_Init>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f50:	f000 f8e2 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f005 fe9f 	bl	8006c9c <HAL_UARTEx_SetTxFifoThreshold>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f62:	f000 f8d9 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f005 fed6 	bl	8006d1c <HAL_UARTEx_SetRxFifoThreshold>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f000 f8d0 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <MX_USART2_UART_Init+0x94>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f005 fe54 	bl	8006c28 <HAL_UARTEx_DisableFifoMode>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f84:	f000 f8c8 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	200002d0 	.word	0x200002d0
 8000f94:	40004400 	.word	0x40004400

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MX_DMA_Init+0x28>)
 8000fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <MX_DMA_Init+0x28>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <MX_DMA_Init+0x28>)
 8000fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	240c      	movs	r4, #12
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f005 ff41 	bl	8006e5c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <MX_GPIO_Init+0x148>)
 8000fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fde:	4b4b      	ldr	r3, [pc, #300]	@ (800110c <MX_GPIO_Init+0x148>)
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <MX_GPIO_Init+0x148>)
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b46      	ldr	r3, [pc, #280]	@ (800110c <MX_GPIO_Init+0x148>)
 8000ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff6:	4b45      	ldr	r3, [pc, #276]	@ (800110c <MX_GPIO_Init+0x148>)
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffe:	4b43      	ldr	r3, [pc, #268]	@ (800110c <MX_GPIO_Init+0x148>)
 8001000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001002:	2204      	movs	r2, #4
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b40      	ldr	r3, [pc, #256]	@ (800110c <MX_GPIO_Init+0x148>)
 800100c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800100e:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <MX_GPIO_Init+0x148>)
 8001010:	2101      	movs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	635a      	str	r2, [r3, #52]	@ 0x34
 8001016:	4b3d      	ldr	r3, [pc, #244]	@ (800110c <MX_GPIO_Init+0x148>)
 8001018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101a:	2201      	movs	r2, #1
 800101c:	4013      	ands	r3, r2
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	483a      	ldr	r0, [pc, #232]	@ (8001110 <MX_GPIO_Init+0x14c>)
 8001028:	2200      	movs	r2, #0
 800102a:	0019      	movs	r1, r3
 800102c:	f002 fd69 	bl	8003b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 8001030:	23a0      	movs	r3, #160	@ 0xa0
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	2200      	movs	r2, #0
 8001036:	2180      	movs	r1, #128	@ 0x80
 8001038:	0018      	movs	r0, r3
 800103a:	f002 fd62 	bl	8003b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 800103e:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <MX_GPIO_Init+0x150>)
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	@ 0x40
 8001044:	0018      	movs	r0, r3
 8001046:	f002 fd5c 	bl	8003b02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCU_Remote_Pin */
  GPIO_InitStruct.Pin = MCU_Remote_Pin;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2280      	movs	r2, #128	@ 0x80
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2202      	movs	r2, #2
 800105c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 800105e:	193b      	adds	r3, r7, r4
 8001060:	4a2c      	ldr	r2, [pc, #176]	@ (8001114 <MX_GPIO_Init+0x150>)
 8001062:	0019      	movs	r1, r3
 8001064:	0010      	movs	r0, r2
 8001066:	f002 fbcb 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800106a:	0021      	movs	r1, r4
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	0212      	lsls	r2, r2, #8
 8001072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	000c      	movs	r4, r1
 8001076:	193b      	adds	r3, r7, r4
 8001078:	2201      	movs	r2, #1
 800107a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	193b      	adds	r3, r7, r4
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001088:	193b      	adds	r3, r7, r4
 800108a:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <MX_GPIO_Init+0x14c>)
 800108c:	0019      	movs	r1, r3
 800108e:	0010      	movs	r0, r2
 8001090:	f002 fbb6 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_Pin */
  GPIO_InitStruct.Pin = Status_Pin;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2201      	movs	r2, #1
 800109e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 80010ac:	193a      	adds	r2, r7, r4
 80010ae:	23a0      	movs	r3, #160	@ 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 fba3 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	193a      	adds	r2, r7, r4
 80010d0:	23a0      	movs	r3, #160	@ 0xa0
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	0011      	movs	r1, r2
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 fb92 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : UV_LED_Pin */
  GPIO_InitStruct.Pin = UV_LED_Pin;
 80010dc:	0021      	movs	r1, r4
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2240      	movs	r2, #64	@ 0x40
 80010e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2201      	movs	r2, #1
 80010e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <MX_GPIO_Init+0x150>)
 80010fa:	0019      	movs	r1, r3
 80010fc:	0010      	movs	r0, r2
 80010fe:	f002 fb7f 	bl	8003800 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b009      	add	sp, #36	@ 0x24
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	40021000 	.word	0x40021000
 8001110:	50000800 	.word	0x50000800
 8001114:	50000400 	.word	0x50000400

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	e7fd      	b.n	8001120 <Error_Handler+0x8>

08001124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_MspInit+0x44>)
 800112c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_MspInit+0x44>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	641a      	str	r2, [r3, #64]	@ 0x40
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_MspInit+0x44>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x44>)
 8001144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_MspInit+0x44>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0549      	lsls	r1, r1, #21
 800114c:	430a      	orrs	r2, r1
 800114e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_MspInit+0x44>)
 8001152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	4013      	ands	r3, r2
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b099      	sub	sp, #100	@ 0x64
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	234c      	movs	r3, #76	@ 0x4c
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	0018      	movs	r0, r3
 800117a:	2314      	movs	r3, #20
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f005 fe6c 	bl	8006e5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	2418      	movs	r4, #24
 8001186:	193b      	adds	r3, r7, r4
 8001188:	0018      	movs	r0, r3
 800118a:	2334      	movs	r3, #52	@ 0x34
 800118c:	001a      	movs	r2, r3
 800118e:	2100      	movs	r1, #0
 8001190:	f005 fe64 	bl	8006e5c <memset>
  if(hadc->Instance==ADC1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a43      	ldr	r2, [pc, #268]	@ (80012a8 <HAL_ADC_MspInit+0x13c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d000      	beq.n	80011a0 <HAL_ADC_MspInit+0x34>
 800119e:	e07f      	b.n	80012a0 <HAL_ADC_MspInit+0x134>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2280      	movs	r2, #128	@ 0x80
 80011a4:	01d2      	lsls	r2, r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	0018      	movs	r0, r3
 80011b2:	f003 f9d3 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011ba:	f7ff ffad 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c2:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011c4:	2180      	movs	r1, #128	@ 0x80
 80011c6:	0349      	lsls	r1, r1, #13
 80011c8:	430a      	orrs	r2, r1
 80011ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	035b      	lsls	r3, r3, #13
 80011d4:	4013      	ands	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011de:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ea:	2201      	movs	r2, #1
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f6:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 80011f8:	2102      	movs	r1, #2
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011fe:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_ADC_MspInit+0x140>)
 8001200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001202:	2202      	movs	r2, #2
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 800120a:	244c      	movs	r4, #76	@ 0x4c
 800120c:	193b      	adds	r3, r7, r4
 800120e:	220b      	movs	r2, #11
 8001210:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2203      	movs	r2, #3
 8001216:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	193a      	adds	r2, r7, r4
 8001220:	23a0      	movs	r3, #160	@ 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f002 faea 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2207      	movs	r2, #7
 8001230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2203      	movs	r2, #3
 8001236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	193b      	adds	r3, r7, r4
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_ADC_MspInit+0x144>)
 8001242:	0019      	movs	r1, r3
 8001244:	0010      	movs	r0, r2
 8001246:	f002 fadb 	bl	8003800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 800124c:	4a1a      	ldr	r2, [pc, #104]	@ (80012b8 <HAL_ADC_MspInit+0x14c>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001252:	2205      	movs	r2, #5
 8001254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	0052      	lsls	r2, r2, #1
 800126e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001270:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001286:	0018      	movs	r0, r3
 8001288:	f002 f868 	bl	800335c <HAL_DMA_Init>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001290:	f7ff ff42 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 8001298:	651a      	str	r2, [r3, #80]	@ 0x50
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_ADC_MspInit+0x148>)
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b019      	add	sp, #100	@ 0x64
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	40012400 	.word	0x40012400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	50000400 	.word	0x50000400
 80012b4:	200000b4 	.word	0x200000b4
 80012b8:	40020008 	.word	0x40020008

080012bc <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	240c      	movs	r4, #12
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2314      	movs	r3, #20
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f005 fdc4 	bl	8006e5c <memset>
  if(hcomp->Instance==COMP2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a10      	ldr	r2, [pc, #64]	@ (800131c <HAL_COMP_MspInit+0x60>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d11a      	bne.n	8001314 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_COMP_MspInit+0x64>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_COMP_MspInit+0x64>)
 80012e4:	2102      	movs	r1, #2
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_COMP_MspInit+0x64>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	2210      	movs	r2, #16
 80012fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2203      	movs	r2, #3
 8001300:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	193b      	adds	r3, r7, r4
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 8001308:	193b      	adds	r3, r7, r4
 800130a:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <HAL_COMP_MspInit+0x68>)
 800130c:	0019      	movs	r1, r3
 800130e:	0010      	movs	r0, r2
 8001310:	f002 fa76 	bl	8003800 <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b009      	add	sp, #36	@ 0x24
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	40010204 	.word	0x40010204
 8001320:	40021000 	.word	0x40021000
 8001324:	50000400 	.word	0x50000400

08001328 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08b      	sub	sp, #44	@ 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	2414      	movs	r4, #20
 8001332:	193b      	adds	r3, r7, r4
 8001334:	0018      	movs	r0, r3
 8001336:	2314      	movs	r3, #20
 8001338:	001a      	movs	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	f005 fd8e 	bl	8006e5c <memset>
  if(hdac->Instance==DAC1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_DAC_MspInit+0x80>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d129      	bne.n	800139e <HAL_DAC_MspInit+0x76>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_DAC_MspInit+0x84>)
 800134c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_DAC_MspInit+0x84>)
 8001350:	2180      	movs	r1, #128	@ 0x80
 8001352:	0589      	lsls	r1, r1, #22
 8001354:	430a      	orrs	r2, r1
 8001356:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_DAC_MspInit+0x84>)
 800135a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	059b      	lsls	r3, r3, #22
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_DAC_MspInit+0x84>)
 8001368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_DAC_MspInit+0x84>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_DAC_MspInit+0x84>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001376:	2201      	movs	r2, #1
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Ilevel_DAC_Pin|DAC2_Pin;
 800137e:	193b      	adds	r3, r7, r4
 8001380:	2230      	movs	r2, #48	@ 0x30
 8001382:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	193b      	adds	r3, r7, r4
 8001386:	2203      	movs	r2, #3
 8001388:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	193b      	adds	r3, r7, r4
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	193a      	adds	r2, r7, r4
 8001392:	23a0      	movs	r3, #160	@ 0xa0
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f002 fa31 	bl	8003800 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b00b      	add	sp, #44	@ 0x2c
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	40007400 	.word	0x40007400
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b099      	sub	sp, #100	@ 0x64
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	234c      	movs	r3, #76	@ 0x4c
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	0018      	movs	r0, r3
 80013be:	2314      	movs	r3, #20
 80013c0:	001a      	movs	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	f005 fd4a 	bl	8006e5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	2418      	movs	r4, #24
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	0018      	movs	r0, r3
 80013ce:	2334      	movs	r3, #52	@ 0x34
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f005 fd42 	bl	8006e5c <memset>
  if(htim_pwm->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a35      	ldr	r2, [pc, #212]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x104>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d140      	bne.n	8001464 <HAL_TIM_PWM_MspInit+0xb4>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2280      	movs	r2, #128	@ 0x80
 80013e6:	0392      	lsls	r2, r2, #14
 80013e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	0018      	movs	r0, r3
 80013f4:	f003 f8b2 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 80013fc:	f7ff fe8c 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001400:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001406:	2180      	movs	r1, #128	@ 0x80
 8001408:	0109      	lsls	r1, r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4013      	ands	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 800141e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001420:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001422:	2101      	movs	r1, #1
 8001424:	430a      	orrs	r2, r1
 8001426:	635a      	str	r2, [r3, #52]	@ 0x34
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = OCP_TIM1_BK_Pin;
 8001434:	214c      	movs	r1, #76	@ 0x4c
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2240      	movs	r2, #64	@ 0x40
 800143a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2212      	movs	r2, #18
 8001440:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2201      	movs	r2, #1
 8001446:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2202      	movs	r2, #2
 8001452:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(OCP_TIM1_BK_GPIO_Port, &GPIO_InitStruct);
 8001454:	187a      	adds	r2, r7, r1
 8001456:	23a0      	movs	r3, #160	@ 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f002 f9cf 	bl	8003800 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001462:	e023      	b.n	80014ac <HAL_TIM_PWM_MspInit+0xfc>
  else if(htim_pwm->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	429a      	cmp	r2, r3
 800146e:	d10c      	bne.n	800148a <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 800147e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	e010      	b.n	80014ac <HAL_TIM_PWM_MspInit+0xfc>
  else if(htim_pwm->Instance==TIM3)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_TIM_PWM_MspInit+0x10c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d10b      	bne.n	80014ac <HAL_TIM_PWM_MspInit+0xfc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 8001496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 800149a:	2102      	movs	r1, #2
 800149c:	430a      	orrs	r2, r1
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x108>)
 80014a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b019      	add	sp, #100	@ 0x64
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	40012c00 	.word	0x40012c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40000400 	.word	0x40000400

080014c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	2314      	movs	r3, #20
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	0018      	movs	r0, r3
 80014ce:	2314      	movs	r3, #20
 80014d0:	001a      	movs	r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	f005 fcc2 	bl	8006e5c <memset>
  if(htim_base->Instance==TIM6)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <HAL_TIM_Base_MspInit+0xb0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10c      	bne.n	80014fc <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 80014e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 80014e8:	2110      	movs	r1, #16
 80014ea:	430a      	orrs	r2, r1
 80014ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 80014f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f2:	2210      	movs	r2, #16
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 80014fa:	e035      	b.n	8001568 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_TIM_Base_MspInit+0xb8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d130      	bne.n	8001568 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 8001508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	0289      	lsls	r1, r1, #10
 8001510:	430a      	orrs	r2, r1
 8001512:	641a      	str	r2, [r3, #64]	@ 0x40
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 8001516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	029b      	lsls	r3, r3, #10
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 8001524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 8001528:	2102      	movs	r1, #2
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	@ 0x34
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_TIM_Base_MspInit+0xb4>)
 8001530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153a:	2114      	movs	r1, #20
 800153c:	187b      	adds	r3, r7, r1
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2202      	movs	r2, #2
 8001548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2202      	movs	r2, #2
 800155a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	187b      	adds	r3, r7, r1
 800155e:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_TIM_Base_MspInit+0xbc>)
 8001560:	0019      	movs	r1, r3
 8001562:	0010      	movs	r0, r2
 8001564:	f002 f94c 	bl	8003800 <HAL_GPIO_Init>
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b00a      	add	sp, #40	@ 0x28
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40001000 	.word	0x40001000
 8001574:	40021000 	.word	0x40021000
 8001578:	40014400 	.word	0x40014400
 800157c:	50000400 	.word	0x50000400

08001580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b08b      	sub	sp, #44	@ 0x2c
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	2414      	movs	r4, #20
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	2314      	movs	r3, #20
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f005 fc62 	bl	8006e5c <memset>
  if(htim->Instance==TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3d      	ldr	r2, [pc, #244]	@ (8001694 <HAL_TIM_MspPostInit+0x114>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d124      	bne.n	80015ec <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 80015a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b2:	2201      	movs	r2, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	2280      	movs	r2, #128	@ 0x80
 80015be:	0052      	lsls	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	0021      	movs	r1, r4
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2202      	movs	r2, #2
 80015c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2202      	movs	r2, #2
 80015da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 80015dc:	187a      	adds	r2, r7, r1
 80015de:	23a0      	movs	r3, #160	@ 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f002 f90b 	bl	8003800 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ea:	e04f      	b.n	800168c <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	05db      	lsls	r3, r3, #23
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d122      	bne.n	800163e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 80015fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 80015fe:	2104      	movs	r1, #4
 8001600:	430a      	orrs	r2, r1
 8001602:	635a      	str	r2, [r3, #52]	@ 0x34
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 8001606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001608:	2204      	movs	r2, #4
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001610:	2114      	movs	r1, #20
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2240      	movs	r2, #64	@ 0x40
 8001616:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	187b      	adds	r3, r7, r1
 800161a:	2202      	movs	r2, #2
 800161c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2202      	movs	r2, #2
 800162e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001630:	187b      	adds	r3, r7, r1
 8001632:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_TIM_MspPostInit+0x11c>)
 8001634:	0019      	movs	r1, r3
 8001636:	0010      	movs	r0, r2
 8001638:	f002 f8e2 	bl	8003800 <HAL_GPIO_Init>
}
 800163c:	e026      	b.n	800168c <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_TIM_MspPostInit+0x120>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d121      	bne.n	800168c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 800164a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 800164e:	2102      	movs	r1, #2
 8001650:	430a      	orrs	r2, r1
 8001652:	635a      	str	r2, [r3, #52]	@ 0x34
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_TIM_MspPostInit+0x118>)
 8001656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DRV_Mask_Pin;
 8001660:	2114      	movs	r1, #20
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2220      	movs	r2, #32
 8001666:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2202      	movs	r2, #2
 800166c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2201      	movs	r2, #1
 800167e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_Mask_GPIO_Port, &GPIO_InitStruct);
 8001680:	187b      	adds	r3, r7, r1
 8001682:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <HAL_TIM_MspPostInit+0x124>)
 8001684:	0019      	movs	r1, r3
 8001686:	0010      	movs	r0, r2
 8001688:	f002 f8ba 	bl	8003800 <HAL_GPIO_Init>
}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b00b      	add	sp, #44	@ 0x2c
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000
 800169c:	50000800 	.word	0x50000800
 80016a0:	40000400 	.word	0x40000400
 80016a4:	50000400 	.word	0x50000400

080016a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b097      	sub	sp, #92	@ 0x5c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	2344      	movs	r3, #68	@ 0x44
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	0018      	movs	r0, r3
 80016b6:	2314      	movs	r3, #20
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f005 fbce 	bl	8006e5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	2410      	movs	r4, #16
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	0018      	movs	r0, r3
 80016c6:	2334      	movs	r3, #52	@ 0x34
 80016c8:	001a      	movs	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	f005 fbc6 	bl	8006e5c <memset>
  if(huart->Instance==USART2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <HAL_UART_MspInit+0xb8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d13e      	bne.n	8001758 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	0018      	movs	r0, r3
 80016ea:	f002 ff37 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016f2:	f7ff fd11 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_UART_MspInit+0xbc>)
 80016f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_UART_MspInit+0xbc>)
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	0289      	lsls	r1, r1, #10
 8001700:	430a      	orrs	r2, r1
 8001702:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_UART_MspInit+0xbc>)
 8001706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_UART_MspInit+0xbc>)
 8001714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_UART_MspInit+0xbc>)
 8001718:	2101      	movs	r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	@ 0x34
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_UART_MspInit+0xbc>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800172a:	2144      	movs	r1, #68	@ 0x44
 800172c:	187b      	adds	r3, r7, r1
 800172e:	4a0e      	ldr	r2, [pc, #56]	@ (8001768 <HAL_UART_MspInit+0xc0>)
 8001730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2202      	movs	r2, #2
 8001736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2201      	movs	r2, #1
 8001748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	187a      	adds	r2, r7, r1
 800174c:	23a0      	movs	r3, #160	@ 0xa0
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f002 f854 	bl	8003800 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b017      	add	sp, #92	@ 0x5c
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	40004400 	.word	0x40004400
 8001764:	40021000 	.word	0x40021000
 8001768:	00008004 	.word	0x00008004

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	e7fd      	b.n	8001770 <NMI_Handler+0x4>

08001774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	e7fd      	b.n	8001778 <HardFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f94c 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <DMA1_Channel1_IRQHandler+0x50>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f001 fee8 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
	adc_24V = adc_buffer[0]; // 4095 = 36.3 V
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <DMA1_Channel1_IRQHandler+0x54>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <DMA1_Channel1_IRQHandler+0x58>)
 80017b4:	801a      	strh	r2, [r3, #0]
	adc_tempMOSFET = adc_buffer[1]; // 2482 = 2V = 90°C
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <DMA1_Channel1_IRQHandler+0x54>)
 80017b8:	885b      	ldrh	r3, [r3, #2]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <DMA1_Channel1_IRQHandler+0x5c>)
 80017be:	801a      	strh	r2, [r3, #0]
	adc_uSenseLamp = adc_buffer[2];
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <DMA1_Channel1_IRQHandler+0x54>)
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <DMA1_Channel1_IRQHandler+0x60>)
 80017c8:	801a      	strh	r2, [r3, #0]
	adc_iSenseLamp = adc_buffer[3];
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <DMA1_Channel1_IRQHandler+0x54>)
 80017cc:	88db      	ldrh	r3, [r3, #6]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <DMA1_Channel1_IRQHandler+0x64>)
 80017d2:	801a      	strh	r2, [r3, #0]
	adc_lampIntensity = adc_buffer[4];
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <DMA1_Channel1_IRQHandler+0x54>)
 80017d6:	891b      	ldrh	r3, [r3, #8]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <DMA1_Channel1_IRQHandler+0x68>)
 80017dc:	801a      	strh	r2, [r3, #0]
	adc_iSenseIn = adc_buffer[5]; // 4095 = 0.825 A
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <DMA1_Channel1_IRQHandler+0x54>)
 80017e0:	895b      	ldrh	r3, [r3, #10]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <DMA1_Channel1_IRQHandler+0x6c>)
 80017e6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017e8:	46c0      	nop			@ (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	200000b4 	.word	0x200000b4
 80017f4:	20000038 	.word	0x20000038
 80017f8:	20000044 	.word	0x20000044
 80017fc:	20000046 	.word	0x20000046
 8001800:	20000048 	.word	0x20000048
 8001804:	2000004a 	.word	0x2000004a
 8001808:	2000004c 	.word	0x2000004c
 800180c:	2000004e 	.word	0x2000004e

08001810 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <ADC1_COMP_IRQHandler+0x14>)
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fcb0 	bl	800217c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	20000050 	.word	0x20000050

08001828 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800182c:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <TIM6_DAC_LPTIM1_IRQHandler+0x9c>)
 800182e:	0018      	movs	r0, r3
 8001830:	f003 fb76 	bl	8004f20 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <TIM6_DAC_LPTIM1_IRQHandler+0xa0>)
 8001836:	0018      	movs	r0, r3
 8001838:	f001 fbf4 	bl	8003024 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // timer interrupt
  enableFlag = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9); // check enable
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4a22      	ldr	r2, [pc, #136]	@ (80018cc <TIM6_DAC_LPTIM1_IRQHandler+0xa4>)
 8001842:	0019      	movs	r1, r3
 8001844:	0010      	movs	r0, r2
 8001846:	f002 f93f 	bl	8003ac8 <HAL_GPIO_ReadPin>
 800184a:	0003      	movs	r3, r0
 800184c:	001a      	movs	r2, r3
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <TIM6_DAC_LPTIM1_IRQHandler+0xa8>)
 8001850:	701a      	strb	r2, [r3, #0]
  // check supply voltage
  if ((adc_24V < upper_24Vsupply) && (adc_24V > lower_24Vsupply)) {
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <TIM6_DAC_LPTIM1_IRQHandler+0xac>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <TIM6_DAC_LPTIM1_IRQHandler+0xb0>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	429a      	cmp	r2, r3
 8001860:	d20b      	bcs.n	800187a <TIM6_DAC_LPTIM1_IRQHandler+0x52>
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <TIM6_DAC_LPTIM1_IRQHandler+0xac>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <TIM6_DAC_LPTIM1_IRQHandler+0xb4>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	429a      	cmp	r2, r3
 8001870:	d903      	bls.n	800187a <TIM6_DAC_LPTIM1_IRQHandler+0x52>
	  supplyOKFlag = 1;
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <TIM6_DAC_LPTIM1_IRQHandler+0xb8>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e002      	b.n	8001880 <TIM6_DAC_LPTIM1_IRQHandler+0x58>
  }
  else {
	  supplyOKFlag = 0;
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <TIM6_DAC_LPTIM1_IRQHandler+0xb8>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
  }
  // check temperature
  if (adc_tempMOSFET > upper_tempMOSFET) {
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <TIM6_DAC_LPTIM1_IRQHandler+0xbc>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <TIM6_DAC_LPTIM1_IRQHandler+0xc0>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	429a      	cmp	r2, r3
 800188e:	d903      	bls.n	8001898 <TIM6_DAC_LPTIM1_IRQHandler+0x70>
	  OT_flag = 1;
 8001890:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <TIM6_DAC_LPTIM1_IRQHandler+0xc4>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <TIM6_DAC_LPTIM1_IRQHandler+0x76>
  }
  else {
	  OT_flag = 0;
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <TIM6_DAC_LPTIM1_IRQHandler+0xc4>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
  }
  // check input current
  if (adc_iSenseIn > upper_iIn) {
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <TIM6_DAC_LPTIM1_IRQHandler+0xc8>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <TIM6_DAC_LPTIM1_IRQHandler+0xcc>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d903      	bls.n	80018b6 <TIM6_DAC_LPTIM1_IRQHandler+0x8e>
	  OCPinFlag = 1;
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <TIM6_DAC_LPTIM1_IRQHandler+0xd0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
  else {
	  OCPinFlag = 0;
  }

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80018b4:	e002      	b.n	80018bc <TIM6_DAC_LPTIM1_IRQHandler+0x94>
	  OCPinFlag = 0;
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <TIM6_DAC_LPTIM1_IRQHandler+0xd0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	20000238 	.word	0x20000238
 80018c8:	20000140 	.word	0x20000140
 80018cc:	50000400 	.word	0x50000400
 80018d0:	20000030 	.word	0x20000030
 80018d4:	20000044 	.word	0x20000044
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000002 	.word	0x20000002
 80018e0:	20000031 	.word	0x20000031
 80018e4:	20000046 	.word	0x20000046
 80018e8:	20000004 	.word	0x20000004
 80018ec:	20000033 	.word	0x20000033
 80018f0:	2000004e 	.word	0x2000004e
 80018f4:	20000006 	.word	0x20000006
 80018f8:	20000034 	.word	0x20000034

080018fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	46c0      	nop			@ (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001908:	480d      	ldr	r0, [pc, #52]	@ (8001940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800190a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800190c:	f7ff fff6 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	@ (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	@ (8001954 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001936:	f005 fa99 	bl	8006e6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800193a:	f7fe fe6f 	bl	800061c <main>

0800193e <LoopForever>:

LoopForever:
  b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   r0, =_estack
 8001940:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800194c:	08006fb8 	.word	0x08006fb8
  ldr r2, =_sbss
 8001950:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001954:	2000036c 	.word	0x2000036c

08001958 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <CEC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_Init+0x3c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_Init+0x3c>)
 800196e:	2180      	movs	r1, #128	@ 0x80
 8001970:	0049      	lsls	r1, r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001976:	2003      	movs	r0, #3
 8001978:	f000 f810 	bl	800199c <HAL_InitTick>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d003      	beq.n	8001988 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	e001      	b.n	800198c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fbcc 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	781b      	ldrb	r3, [r3, #0]
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_InitTick+0x88>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d02b      	beq.n	8001a0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_InitTick+0x8c>)
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <HAL_InitTick+0x88>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	0019      	movs	r1, r3
 80019be:	23fa      	movs	r3, #250	@ 0xfa
 80019c0:	0098      	lsls	r0, r3, #2
 80019c2:	f7fe fb9f 	bl	8000104 <__udivsi3>
 80019c6:	0003      	movs	r3, r0
 80019c8:	0019      	movs	r1, r3
 80019ca:	0020      	movs	r0, r4
 80019cc:	f7fe fb9a 	bl	8000104 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f001 faf5 	bl	8002fc2 <HAL_SYSTICK_Config>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d112      	bne.n	8001a02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d80a      	bhi.n	80019f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	2301      	movs	r3, #1
 80019e6:	425b      	negs	r3, r3
 80019e8:	2200      	movs	r2, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 fac4 	bl	8002f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_InitTick+0x90>)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e00d      	b.n	8001a14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e008      	b.n	8001a14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a02:	230f      	movs	r3, #15
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e003      	b.n	8001a14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a14:	230f      	movs	r3, #15
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b005      	add	sp, #20
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	20000010 	.word	0x20000010
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	001a      	movs	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	18d2      	adds	r2, r2, r3
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	20000368 	.word	0x20000368

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	@ (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	20000368 	.word	0x20000368

08001a68 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a78:	401a      	ands	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	fe3fffff 	.word	0xfe3fffff

08001a90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	23e0      	movs	r3, #224	@ 0xe0
 8001a9e:	045b      	lsls	r3, r3, #17
 8001aa0:	4013      	ands	r3, r2
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	2104      	movs	r1, #4
 8001abe:	400a      	ands	r2, r1
 8001ac0:	2107      	movs	r1, #7
 8001ac2:	4091      	lsls	r1, r2
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	43d2      	mvns	r2, r2
 8001ac8:	401a      	ands	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2104      	movs	r1, #4
 8001ace:	400b      	ands	r3, r1
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4099      	lsls	r1, r3
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	2104      	movs	r1, #4
 8001af6:	400a      	ands	r2, r1
 8001af8:	2107      	movs	r1, #7
 8001afa:	4091      	lsls	r1, r2
 8001afc:	000a      	movs	r2, r1
 8001afe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2104      	movs	r1, #4
 8001b04:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b06:	40da      	lsrs	r2, r3
 8001b08:	0013      	movs	r3, r2
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	23c0      	movs	r3, #192	@ 0xc0
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	211f      	movs	r1, #31
 8001b48:	400a      	ands	r2, r1
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	4091      	lsls	r1, r2
 8001b4e:	000a      	movs	r2, r1
 8001b50:	43d2      	mvns	r2, r2
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	210f      	movs	r1, #15
 8001b5a:	4019      	ands	r1, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	201f      	movs	r0, #31
 8001b60:	4003      	ands	r3, r0
 8001b62:	4099      	lsls	r1, r3
 8001b64:	000b      	movs	r3, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b6c:	46c0      	nop			@ (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	035b      	lsls	r3, r3, #13
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	0352      	lsls	r2, r2, #13
 8001ba8:	0b52      	lsrs	r2, r2, #13
 8001baa:	43d2      	mvns	r2, r2
 8001bac:	401a      	ands	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	4013      	ands	r3, r2
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	0212      	lsls	r2, r2, #8
 8001be8:	43d2      	mvns	r2, r2
 8001bea:	401a      	ands	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	4904      	ldr	r1, [pc, #16]	@ (8001c08 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	07ffff00 	.word	0x07ffff00

08001c0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	0552      	lsls	r2, r2, #21
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	6fffffe8 	.word	0x6fffffe8

08001c34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	055b      	lsls	r3, r3, #21
 8001c44:	401a      	ands	r2, r3
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	055b      	lsls	r3, r3, #21
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d101      	bne.n	8001c52 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <LL_ADC_Enable+0x20>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	7fffffe8 	.word	0x7fffffe8

08001c80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <LL_ADC_Disable+0x20>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2202      	movs	r2, #2
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	7fffffe8 	.word	0x7fffffe8

08001ca4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_IsEnabled+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_IsEnabled+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <LL_ADC_REG_StartConversion+0x20>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2204      	movs	r2, #4
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ce0:	46c0      	nop			@ (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b002      	add	sp, #8
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	7fffffe8 	.word	0x7fffffe8

08001cec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d101      	bne.n	8001d04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e17f      	b.n	8002036 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff fa13 	bl	800116c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2254      	movs	r2, #84	@ 0x54
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff6b 	bl	8001c34 <LL_ADC_IsInternalRegulatorEnabled>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff ff50 	bl	8001c0c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d6c:	4bb4      	ldr	r3, [pc, #720]	@ (8002040 <HAL_ADC_Init+0x330>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	49b4      	ldr	r1, [pc, #720]	@ (8002044 <HAL_ADC_Init+0x334>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe f9c6 	bl	8000104 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff ff4e 	bl	8001c34 <LL_ADC_IsInternalRegulatorEnabled>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d10f      	bne.n	8001dbc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	2210      	movs	r2, #16
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	2201      	movs	r2, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001db4:	231f      	movs	r3, #31
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff ff93 	bl	8001cec <LL_ADC_REG_IsConversionOngoing>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	2210      	movs	r2, #16
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d000      	beq.n	8001dd6 <HAL_ADC_Init+0xc6>
 8001dd4:	e122      	b.n	800201c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d000      	beq.n	8001dde <HAL_ADC_Init+0xce>
 8001ddc:	e11e      	b.n	800201c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	4a99      	ldr	r2, [pc, #612]	@ (8002048 <HAL_ADC_Init+0x338>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	2202      	movs	r2, #2
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ff56 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001df8:	1e03      	subs	r3, r0, #0
 8001dfa:	d000      	beq.n	8001dfe <HAL_ADC_Init+0xee>
 8001dfc:	e0ad      	b.n	8001f5a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e1b      	ldrb	r3, [r3, #24]
 8001e06:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e08:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7e5b      	ldrb	r3, [r3, #25]
 8001e0e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e10:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7e9b      	ldrb	r3, [r3, #26]
 8001e16:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e18:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_ADC_Init+0x118>
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_Init+0x11a>
 8001e28:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e2a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e30:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da04      	bge.n	8001e44 <HAL_ADC_Init+0x134>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0x138>
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001e48:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	212c      	movs	r1, #44	@ 0x2c
 8001e4e:	5c5b      	ldrb	r3, [r3, r1]
 8001e50:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e52:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	5c9b      	ldrb	r3, [r3, r2]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d115      	bne.n	8001e90 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7e9b      	ldrb	r3, [r3, #26]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	0252      	lsls	r2, r2, #9
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e00b      	b.n	8001e90 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	2201      	movs	r2, #1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e9c:	23e0      	movs	r3, #224	@ 0xe0
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_ADC_Init+0x33c>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	0f9b      	lsrs	r3, r3, #30
 8001eca:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	223c      	movs	r2, #60	@ 0x3c
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d111      	bne.n	8001f06 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0f9b      	lsrs	r3, r3, #30
 8001ee8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001eee:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001ef4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001efa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	2201      	movs	r2, #1
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	@ (8002050 <HAL_ADC_Init+0x340>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	23c0      	movs	r3, #192	@ 0xc0
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d018      	beq.n	8001f5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d012      	beq.n	8001f5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d00c      	beq.n	8001f5a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f40:	4b44      	ldr	r3, [pc, #272]	@ (8002054 <HAL_ADC_Init+0x344>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a44      	ldr	r2, [pc, #272]	@ (8002058 <HAL_ADC_Init+0x348>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	23f0      	movs	r3, #240	@ 0xf0
 8001f50:	039b      	lsls	r3, r3, #14
 8001f52:	401a      	ands	r2, r3
 8001f54:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <HAL_ADC_Init+0x344>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f62:	001a      	movs	r2, r3
 8001f64:	2100      	movs	r1, #0
 8001f66:	f7ff fda0 	bl	8001aaa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f72:	493a      	ldr	r1, [pc, #232]	@ (800205c <HAL_ADC_Init+0x34c>)
 8001f74:	001a      	movs	r2, r3
 8001f76:	f7ff fd98 	bl	8001aaa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4249      	negs	r1, r1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f94:	e018      	b.n	8001fc8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	039b      	lsls	r3, r3, #14
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d112      	bne.n	8001fc8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	221c      	movs	r2, #28
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	4252      	negs	r2, r2
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	0011      	movs	r1, r2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2100      	movs	r1, #0
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fd88 	bl	8001ae4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001fd4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4393      	bics	r3, r2
 8001fec:	2201      	movs	r2, #1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ff4:	e01c      	b.n	8002030 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	2212      	movs	r2, #18
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	2210      	movs	r2, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200a:	2201      	movs	r2, #1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800201a:	e009      	b.n	8002030 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	2210      	movs	r2, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002028:	231f      	movs	r3, #31
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002030:	231f      	movs	r3, #31
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b008      	add	sp, #32
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	20000008 	.word	0x20000008
 8002044:	00030d40 	.word	0x00030d40
 8002048:	fffffefd 	.word	0xfffffefd
 800204c:	ffde0201 	.word	0xffde0201
 8002050:	1ffffc02 	.word	0x1ffffc02
 8002054:	40012708 	.word	0x40012708
 8002058:	ffc3ffff 	.word	0xffc3ffff
 800205c:	07ffff04 	.word	0x07ffff04

08002060 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f7ff fe3b 	bl	8001cec <LL_ADC_REG_IsConversionOngoing>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d16c      	bne.n	8002154 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2254      	movs	r2, #84	@ 0x54
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_ADC_Start_DMA+0x28>
 8002084:	2302      	movs	r3, #2
 8002086:	e06c      	b.n	8002162 <HAL_ADC_Start_DMA+0x102>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2254      	movs	r2, #84	@ 0x54
 800208c:	2101      	movs	r1, #1
 800208e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d113      	bne.n	80020c4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff fdff 	bl	8001ca4 <LL_ADC_IsEnabled>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff fde6 	bl	8001c80 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020c4:	2517      	movs	r5, #23
 80020c6:	197c      	adds	r4, r7, r5
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fb66 	bl	800279c <ADC_Enable>
 80020d0:	0003      	movs	r3, r0
 80020d2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020d4:	002c      	movs	r4, r5
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d13e      	bne.n	800215c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	4a22      	ldr	r2, [pc, #136]	@ (800216c <HAL_ADC_Start_DMA+0x10c>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	0052      	lsls	r2, r2, #1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_ADC_Start_DMA+0x110>)
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002102:	4a1c      	ldr	r2, [pc, #112]	@ (8002174 <HAL_ADC_Start_DMA+0x114>)
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210a:	4a1b      	ldr	r2, [pc, #108]	@ (8002178 <HAL_ADC_Start_DMA+0x118>)
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	221c      	movs	r2, #28
 8002114:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2254      	movs	r2, #84	@ 0x54
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2110      	movs	r1, #16
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3340      	adds	r3, #64	@ 0x40
 8002138:	0019      	movs	r1, r3
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	193c      	adds	r4, r7, r4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f001 f996 	bl	8003470 <HAL_DMA_Start_IT>
 8002144:	0003      	movs	r3, r0
 8002146:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff fdbb 	bl	8001cc8 <LL_ADC_REG_StartConversion>
 8002152:	e003      	b.n	800215c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002154:	2317      	movs	r3, #23
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2202      	movs	r2, #2
 800215a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800215c:	2317      	movs	r3, #23
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	781b      	ldrb	r3, [r3, #0]
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b006      	add	sp, #24
 8002168:	bdb0      	pop	{r4, r5, r7, pc}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	fffff0fe 	.word	0xfffff0fe
 8002170:	080028a9 	.word	0x080028a9
 8002174:	08002971 	.word	0x08002971
 8002178:	0800298f 	.word	0x0800298f

0800217c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2202      	movs	r2, #2
 800219c:	4013      	ands	r3, r2
 800219e:	d017      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x54>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	2210      	movs	r2, #16
 80021ae:	4013      	ands	r3, r2
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	2280      	movs	r2, #128	@ 0x80
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 fc0e 	bl	80029e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2204      	movs	r2, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	d003      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x64>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2204      	movs	r2, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	d107      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2208      	movs	r2, #8
 80021e4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021e6:	d04d      	beq.n	8002284 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2208      	movs	r2, #8
 80021ec:	4013      	ands	r3, r2
 80021ee:	d049      	beq.n	8002284 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	2210      	movs	r2, #16
 80021f6:	4013      	ands	r3, r2
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	2280      	movs	r2, #128	@ 0x80
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff fc80 	bl	8001b12 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d02e      	beq.n	8002274 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7e9b      	ldrb	r3, [r3, #26]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12a      	bne.n	8002274 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	4013      	ands	r3, r2
 8002228:	2b08      	cmp	r3, #8
 800222a:	d123      	bne.n	8002274 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff fd5b 	bl	8001cec <LL_ADC_REG_IsConversionOngoing>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d110      	bne.n	800225c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	210c      	movs	r1, #12
 8002246:	438a      	bics	r2, r1
 8002248:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	4a56      	ldr	r2, [pc, #344]	@ (80023a8 <HAL_ADC_IRQHandler+0x22c>)
 8002250:	4013      	ands	r3, r2
 8002252:	2201      	movs	r2, #1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	@ 0x58
 800225a:	e00b      	b.n	8002274 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	2220      	movs	r2, #32
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226c:	2201      	movs	r2, #1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f898 	bl	80023ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	220c      	movs	r2, #12
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2280      	movs	r2, #128	@ 0x80
 8002288:	4013      	ands	r3, r2
 800228a:	d012      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x136>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2280      	movs	r2, #128	@ 0x80
 8002290:	4013      	ands	r3, r2
 8002292:	d00e      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	2280      	movs	r2, #128	@ 0x80
 800229a:	0252      	lsls	r2, r2, #9
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f891 	bl	80023cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	2380      	movs	r3, #128	@ 0x80
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d014      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x16a>
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	d00f      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	0292      	lsls	r2, r2, #10
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fb74 	bl	80029c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	0052      	lsls	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d014      	beq.n	800231a <HAL_ADC_IRQHandler+0x19e>
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	d00f      	beq.n	800231a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	2280      	movs	r2, #128	@ 0x80
 8002300:	02d2      	lsls	r2, r2, #11
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 fb62 	bl	80029d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2210      	movs	r2, #16
 800231e:	4013      	ands	r3, r2
 8002320:	d02b      	beq.n	800237a <HAL_ADC_IRQHandler+0x1fe>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2210      	movs	r2, #16
 8002326:	4013      	ands	r3, r2
 8002328:	d027      	beq.n	800237a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e008      	b.n	800234a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff fc3c 	bl	8001bba <LL_ADC_REG_GetDMATransfer>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d001      	beq.n	800234a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002346:	2301      	movs	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d110      	bne.n	8002372 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	00d2      	lsls	r2, r2, #3
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2202      	movs	r2, #2
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f835 	bl	80023dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2210      	movs	r2, #16
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	019b      	lsls	r3, r3, #6
 8002380:	4013      	ands	r3, r2
 8002382:	d00d      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x224>
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	4013      	ands	r3, r2
 800238c:	d008      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fb2f 	bl	80029f4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2280      	movs	r2, #128	@ 0x80
 800239c:	0192      	lsls	r2, r2, #6
 800239e:	601a      	str	r2, [r3, #0]
  }
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	fffffefe 	.word	0xfffffefe

080023ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f6:	2317      	movs	r3, #23
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2254      	movs	r2, #84	@ 0x54
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x24>
 800240c:	2302      	movs	r3, #2
 800240e:	e1c0      	b.n	8002792 <HAL_ADC_ConfigChannel+0x3a6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2254      	movs	r2, #84	@ 0x54
 8002414:	2101      	movs	r1, #1
 8002416:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fc65 	bl	8001cec <LL_ADC_REG_IsConversionOngoing>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d000      	beq.n	8002428 <HAL_ADC_ConfigChannel+0x3c>
 8002426:	e1a3      	b.n	8002770 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d100      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x46>
 8002430:	e143      	b.n	80026ba <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	429a      	cmp	r2, r3
 800243c:	d004      	beq.n	8002448 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002442:	4ac1      	ldr	r2, [pc, #772]	@ (8002748 <HAL_ADC_ConfigChannel+0x35c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d108      	bne.n	800245a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0019      	movs	r1, r3
 8002452:	0010      	movs	r0, r2
 8002454:	f7ff fb8e 	bl	8001b74 <LL_ADC_REG_SetSequencerChAdd>
 8002458:	e0c9      	b.n	80025ee <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	211f      	movs	r1, #31
 8002464:	400b      	ands	r3, r1
 8002466:	210f      	movs	r1, #15
 8002468:	4099      	lsls	r1, r3
 800246a:	000b      	movs	r3, r1
 800246c:	43db      	mvns	r3, r3
 800246e:	4013      	ands	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	035b      	lsls	r3, r3, #13
 8002478:	0b5b      	lsrs	r3, r3, #13
 800247a:	d105      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x9c>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	221f      	movs	r2, #31
 8002484:	4013      	ands	r3, r2
 8002486:	e098      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	d000      	beq.n	8002494 <HAL_ADC_ConfigChannel+0xa8>
 8002492:	e091      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x1cc>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d000      	beq.n	80024a0 <HAL_ADC_ConfigChannel+0xb4>
 800249e:	e089      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x1c8>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2204      	movs	r2, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d000      	beq.n	80024ac <HAL_ADC_ConfigChannel+0xc0>
 80024aa:	e081      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1c4>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2208      	movs	r2, #8
 80024b2:	4013      	ands	r3, r2
 80024b4:	d000      	beq.n	80024b8 <HAL_ADC_ConfigChannel+0xcc>
 80024b6:	e079      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1c0>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	d000      	beq.n	80024c4 <HAL_ADC_ConfigChannel+0xd8>
 80024c2:	e071      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1bc>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2220      	movs	r2, #32
 80024ca:	4013      	ands	r3, r2
 80024cc:	d000      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0xe4>
 80024ce:	e069      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1b8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	4013      	ands	r3, r2
 80024d8:	d000      	beq.n	80024dc <HAL_ADC_ConfigChannel+0xf0>
 80024da:	e061      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1b4>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	4013      	ands	r3, r2
 80024e4:	d000      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0xfc>
 80024e6:	e059      	b.n	800259c <HAL_ADC_ConfigChannel+0x1b0>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	d151      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1ac>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	d149      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1a8>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4013      	ands	r3, r2
 800250a:	d141      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1a4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4013      	ands	r3, r2
 8002516:	d139      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1a0>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	4013      	ands	r3, r2
 8002522:	d131      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x19c>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	@ 0x80
 800252a:	019b      	lsls	r3, r3, #6
 800252c:	4013      	ands	r3, r2
 800252e:	d129      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x198>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	01db      	lsls	r3, r3, #7
 8002538:	4013      	ands	r3, r2
 800253a:	d121      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x194>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	4013      	ands	r3, r2
 8002546:	d119      	bne.n	800257c <HAL_ADC_ConfigChannel+0x190>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	4013      	ands	r3, r2
 8002552:	d111      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x18c>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	4013      	ands	r3, r2
 800255e:	d109      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x188>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	02db      	lsls	r3, r3, #11
 8002568:	4013      	ands	r3, r2
 800256a:	d001      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x184>
 800256c:	2312      	movs	r3, #18
 800256e:	e024      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2300      	movs	r3, #0
 8002572:	e022      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	2311      	movs	r3, #17
 8002576:	e020      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	2310      	movs	r3, #16
 800257a:	e01e      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	230f      	movs	r3, #15
 800257e:	e01c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	230e      	movs	r3, #14
 8002582:	e01a      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	230d      	movs	r3, #13
 8002586:	e018      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002588:	230c      	movs	r3, #12
 800258a:	e016      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 800258c:	230b      	movs	r3, #11
 800258e:	e014      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	230a      	movs	r3, #10
 8002592:	e012      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002594:	2309      	movs	r3, #9
 8002596:	e010      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	2308      	movs	r3, #8
 800259a:	e00e      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 800259c:	2307      	movs	r3, #7
 800259e:	e00c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025a0:	2306      	movs	r3, #6
 80025a2:	e00a      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025a4:	2305      	movs	r3, #5
 80025a6:	e008      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e006      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e004      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e002      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ce>
 80025b8:	2300      	movs	r3, #0
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	6852      	ldr	r2, [r2, #4]
 80025be:	201f      	movs	r0, #31
 80025c0:	4002      	ands	r2, r0
 80025c2:	4093      	lsls	r3, r2
 80025c4:	000a      	movs	r2, r1
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d808      	bhi.n	80025ee <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	001a      	movs	r2, r3
 80025ea:	f7ff faa3 	bl	8001b34 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	001a      	movs	r2, r3
 80025fc:	f7ff faea 	bl	8001bd4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db00      	blt.n	800260a <HAL_ADC_ConfigChannel+0x21e>
 8002608:	e0bc      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800260a:	4b50      	ldr	r3, [pc, #320]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 800260c:	0018      	movs	r0, r3
 800260e:	f7ff fa3f 	bl	8001a90 <LL_ADC_GetCommonPathInternalCh>
 8002612:	0003      	movs	r3, r0
 8002614:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a4d      	ldr	r2, [pc, #308]	@ (8002750 <HAL_ADC_ConfigChannel+0x364>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d122      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002628:	d11d      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	0412      	lsls	r2, r2, #16
 8002630:	4313      	orrs	r3, r2
 8002632:	4a46      	ldr	r2, [pc, #280]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f7ff fa16 	bl	8001a68 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263c:	4b45      	ldr	r3, [pc, #276]	@ (8002754 <HAL_ADC_ConfigChannel+0x368>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4945      	ldr	r1, [pc, #276]	@ (8002758 <HAL_ADC_ConfigChannel+0x36c>)
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd5e 	bl	8000104 <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	0013      	movs	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	189b      	adds	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002656:	e002      	b.n	800265e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3b01      	subs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002664:	e08e      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a3c      	ldr	r2, [pc, #240]	@ (800275c <HAL_ADC_ConfigChannel+0x370>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10e      	bne.n	800268e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	045b      	lsls	r3, r3, #17
 8002676:	4013      	ands	r3, r2
 8002678:	d109      	bne.n	800268e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2280      	movs	r2, #128	@ 0x80
 800267e:	0452      	lsls	r2, r2, #17
 8002680:	4313      	orrs	r3, r2
 8002682:	4a32      	ldr	r2, [pc, #200]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 8002684:	0019      	movs	r1, r3
 8002686:	0010      	movs	r0, r2
 8002688:	f7ff f9ee 	bl	8001a68 <LL_ADC_SetCommonPathInternalCh>
 800268c:	e07a      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a33      	ldr	r2, [pc, #204]	@ (8002760 <HAL_ADC_ConfigChannel+0x374>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d000      	beq.n	800269a <HAL_ADC_ConfigChannel+0x2ae>
 8002698:	e074      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	03db      	lsls	r3, r3, #15
 80026a0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026a2:	d000      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x2ba>
 80026a4:	e06e      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	03d2      	lsls	r2, r2, #15
 80026ac:	4313      	orrs	r3, r2
 80026ae:	4a27      	ldr	r2, [pc, #156]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 80026b0:	0019      	movs	r1, r3
 80026b2:	0010      	movs	r0, r2
 80026b4:	f7ff f9d8 	bl	8001a68 <LL_ADC_SetCommonPathInternalCh>
 80026b8:	e064      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d004      	beq.n	80026d0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002748 <HAL_ADC_ConfigChannel+0x35c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d107      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0019      	movs	r1, r3
 80026da:	0010      	movs	r0, r2
 80026dc:	f7ff fa5b 	bl	8001b96 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da4d      	bge.n	8002784 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e8:	4b18      	ldr	r3, [pc, #96]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff f9d0 	bl	8001a90 <LL_ADC_GetCommonPathInternalCh>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <HAL_ADC_ConfigChannel+0x364>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4a18      	ldr	r2, [pc, #96]	@ (8002764 <HAL_ADC_ConfigChannel+0x378>)
 8002702:	4013      	ands	r3, r2
 8002704:	4a11      	ldr	r2, [pc, #68]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 8002706:	0019      	movs	r1, r3
 8002708:	0010      	movs	r0, r2
 800270a:	f7ff f9ad 	bl	8001a68 <LL_ADC_SetCommonPathInternalCh>
 800270e:	e039      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a11      	ldr	r2, [pc, #68]	@ (800275c <HAL_ADC_ConfigChannel+0x370>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <HAL_ADC_ConfigChannel+0x37c>)
 800271e:	4013      	ands	r3, r2
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f7ff f99f 	bl	8001a68 <LL_ADC_SetCommonPathInternalCh>
 800272a:	e02b      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <HAL_ADC_ConfigChannel+0x374>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d126      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <HAL_ADC_ConfigChannel+0x380>)
 800273a:	4013      	ands	r3, r2
 800273c:	4a03      	ldr	r2, [pc, #12]	@ (800274c <HAL_ADC_ConfigChannel+0x360>)
 800273e:	0019      	movs	r1, r3
 8002740:	0010      	movs	r0, r2
 8002742:	f7ff f991 	bl	8001a68 <LL_ADC_SetCommonPathInternalCh>
 8002746:	e01d      	b.n	8002784 <HAL_ADC_ConfigChannel+0x398>
 8002748:	80000004 	.word	0x80000004
 800274c:	40012708 	.word	0x40012708
 8002750:	b0001000 	.word	0xb0001000
 8002754:	20000008 	.word	0x20000008
 8002758:	00030d40 	.word	0x00030d40
 800275c:	b8004000 	.word	0xb8004000
 8002760:	b4002000 	.word	0xb4002000
 8002764:	ff7fffff 	.word	0xff7fffff
 8002768:	feffffff 	.word	0xfeffffff
 800276c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	2220      	movs	r2, #32
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800277c:	2317      	movs	r3, #23
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2254      	movs	r2, #84	@ 0x54
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800278c:	2317      	movs	r3, #23
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	781b      	ldrb	r3, [r3, #0]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			@ (mov r8, r8)

0800279c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff fa79 	bl	8001ca4 <LL_ADC_IsEnabled>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d000      	beq.n	80027b8 <ADC_Enable+0x1c>
 80027b6:	e069      	b.n	800288c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4a36      	ldr	r2, [pc, #216]	@ (8002898 <ADC_Enable+0xfc>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	2210      	movs	r2, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d4:	2201      	movs	r2, #1
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e056      	b.n	800288e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fa39 	bl	8001c5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80027ea:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <ADC_Enable+0x100>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7ff f94f 	bl	8001a90 <LL_ADC_GetCommonPathInternalCh>
 80027f2:	0002      	movs	r2, r0
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	4013      	ands	r3, r2
 80027fa:	d00f      	beq.n	800281c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fc:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <ADC_Enable+0x104>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4928      	ldr	r1, [pc, #160]	@ (80028a4 <ADC_Enable+0x108>)
 8002802:	0018      	movs	r0, r3
 8002804:	f7fd fc7e 	bl	8000104 <__udivsi3>
 8002808:	0003      	movs	r3, r0
 800280a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800280c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800280e:	e002      	b.n	8002816 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	3b01      	subs	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7e5b      	ldrb	r3, [r3, #25]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d033      	beq.n	800288c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002824:	f7ff f916 	bl	8001a54 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800282c:	e027      	b.n	800287e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0018      	movs	r0, r3
 8002834:	f7ff fa36 	bl	8001ca4 <LL_ADC_IsEnabled>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d104      	bne.n	8002846 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0018      	movs	r0, r3
 8002842:	f7ff fa0b 	bl	8001c5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002846:	f7ff f905 	bl	8001a54 <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d914      	bls.n	800287e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00d      	beq.n	800287e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	2210      	movs	r2, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	2201      	movs	r2, #1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e007      	b.n	800288e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	2b01      	cmp	r3, #1
 800288a:	d1d0      	bne.n	800282e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	80000017 	.word	0x80000017
 800289c:	40012708 	.word	0x40012708
 80028a0:	20000008 	.word	0x20000008
 80028a4:	00030d40 	.word	0x00030d40

080028a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	2250      	movs	r2, #80	@ 0x50
 80028bc:	4013      	ands	r3, r2
 80028be:	d141      	bne.n	8002944 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7ff f91d 	bl	8001b12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d02e      	beq.n	800293a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	7e9b      	ldrb	r3, [r3, #26]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d12a      	bne.n	800293a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2208      	movs	r2, #8
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d123      	bne.n	800293a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7ff f9f8 	bl	8001cec <LL_ADC_REG_IsConversionOngoing>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d110      	bne.n	8002922 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	210c      	movs	r1, #12
 800290c:	438a      	bics	r2, r1
 800290e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002914:	4a15      	ldr	r2, [pc, #84]	@ (800296c <ADC_DMAConvCplt+0xc4>)
 8002916:	4013      	ands	r3, r2
 8002918:	2201      	movs	r2, #1
 800291a:	431a      	orrs	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002920:	e00b      	b.n	800293a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	2220      	movs	r2, #32
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	2201      	movs	r2, #1
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff fd35 	bl	80023ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002942:	e00f      	b.n	8002964 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	2210      	movs	r2, #16
 800294a:	4013      	ands	r3, r2
 800294c:	d004      	beq.n	8002958 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff fd43 	bl	80023dc <HAL_ADC_ErrorCallback>
}
 8002956:	e005      	b.n	8002964 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	0010      	movs	r0, r2
 8002962:	4798      	blx	r3
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}
 800296c:	fffffefe 	.word	0xfffffefe

08002970 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff fd1b 	bl	80023bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}

0800298e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	2204      	movs	r2, #4
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fd10 	bl	80023dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029bc:	46c0      	nop			@ (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029cc:	46c0      	nop			@ (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b002      	add	sp, #8
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029ec:	46c0      	nop			@ (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a0c:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	58d2      	ldr	r2, [r2, r3]
 8002a12:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	508b      	str	r3, [r1, r2]
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021800 	.word	0x40021800

08002a28 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002a30:	4a06      	ldr	r2, [pc, #24]	@ (8002a4c <LL_EXTI_DisableIT_0_31+0x24>)
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	58d3      	ldr	r3, [r2, r3]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	43d2      	mvns	r2, r2
 8002a3a:	4904      	ldr	r1, [pc, #16]	@ (8002a4c <LL_EXTI_DisableIT_0_31+0x24>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2280      	movs	r2, #128	@ 0x80
 8002a40:	508b      	str	r3, [r1, r2]
}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b002      	add	sp, #8
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	40021800 	.word	0x40021800

08002a50 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002a58:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a5a:	2384      	movs	r3, #132	@ 0x84
 8002a5c:	58d2      	ldr	r2, [r2, r3]
 8002a5e:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	2284      	movs	r2, #132	@ 0x84
 8002a66:	508b      	str	r3, [r1, r2]

}
 8002a68:	46c0      	nop			@ (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021800 	.word	0x40021800

08002a74 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002a7c:	4a06      	ldr	r2, [pc, #24]	@ (8002a98 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002a7e:	2384      	movs	r3, #132	@ 0x84
 8002a80:	58d3      	ldr	r3, [r2, r3]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	43d2      	mvns	r2, r2
 8002a86:	4904      	ldr	r1, [pc, #16]	@ (8002a98 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2284      	movs	r2, #132	@ 0x84
 8002a8c:	508b      	str	r3, [r1, r2]
}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	40021800 	.word	0x40021800

08002a9c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021800 	.word	0x40021800

08002abc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	40021800 	.word	0x40021800

08002ae0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	4b03      	ldr	r3, [pc, #12]	@ (8002afc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021800 	.word	0x40021800

08002b00 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	40021800 	.word	0x40021800

08002b24 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	40021800 	.word	0x40021800

08002b40 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	60da      	str	r2, [r3, #12]
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	40021800 	.word	0x40021800

08002b5c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	211f      	movs	r1, #31
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e13d      	b.n	8002dfa <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0fdb      	lsrs	r3, r3, #31
 8002b86:	07da      	lsls	r2, r3, #31
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d104      	bne.n	8002b9a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8002b90:	231f      	movs	r3, #31
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e12f      	b.n	8002dfa <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2229      	movs	r2, #41	@ 0x29
 8002b9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2228      	movs	r2, #40	@ 0x28
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7fe fb80 	bl	80012bc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2230      	movs	r2, #48	@ 0x30
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a85      	ldr	r2, [pc, #532]	@ (8002e08 <HAL_COMP_Init+0x2ac>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10d      	bne.n	8002c2a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b7e      	ldr	r3, [pc, #504]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c14:	497e      	ldr	r1, [pc, #504]	@ (8002e10 <HAL_COMP_Init+0x2b4>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c20:	2180      	movs	r1, #128	@ 0x80
 8002c22:	0109      	lsls	r1, r1, #4
 8002c24:	430a      	orrs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	e01f      	b.n	8002c6a <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	23c0      	movs	r3, #192	@ 0xc0
 8002c30:	015b      	lsls	r3, r3, #5
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10d      	bne.n	8002c52 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002c36:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b74      	ldr	r3, [pc, #464]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c3c:	2180      	movs	r1, #128	@ 0x80
 8002c3e:	0109      	lsls	r1, r1, #4
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002c44:	4b71      	ldr	r3, [pc, #452]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4b70      	ldr	r3, [pc, #448]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c4a:	4971      	ldr	r1, [pc, #452]	@ (8002e10 <HAL_COMP_Init+0x2b4>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	e00b      	b.n	8002c6a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002c52:	4b6e      	ldr	r3, [pc, #440]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b6d      	ldr	r3, [pc, #436]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c58:	496d      	ldr	r1, [pc, #436]	@ (8002e10 <HAL_COMP_Init+0x2b4>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4b6a      	ldr	r3, [pc, #424]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c64:	496a      	ldr	r1, [pc, #424]	@ (8002e10 <HAL_COMP_Init+0x2b4>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	22a0      	movs	r2, #160	@ 0xa0
 8002c70:	01d2      	lsls	r2, r2, #7
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_COMP_Init+0x14a>
 8002c76:	22a0      	movs	r2, #160	@ 0xa0
 8002c78:	01d2      	lsls	r2, r2, #7
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d830      	bhi.n	8002ce0 <HAL_COMP_Init+0x184>
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d01f      	beq.n	8002cc2 <HAL_COMP_Init+0x166>
 8002c82:	2280      	movs	r2, #128	@ 0x80
 8002c84:	01d2      	lsls	r2, r2, #7
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12a      	bne.n	8002ce0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002c8a:	4b60      	ldr	r3, [pc, #384]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	01c9      	lsls	r1, r1, #7
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002c98:	4b5c      	ldr	r3, [pc, #368]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002c9e:	495d      	ldr	r1, [pc, #372]	@ (8002e14 <HAL_COMP_Init+0x2b8>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
        break;
 8002ca4:	e029      	b.n	8002cfa <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002ca6:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b58      	ldr	r3, [pc, #352]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cac:	4959      	ldr	r1, [pc, #356]	@ (8002e14 <HAL_COMP_Init+0x2b8>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002cb2:	4b56      	ldr	r3, [pc, #344]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4b55      	ldr	r3, [pc, #340]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	01c9      	lsls	r1, r1, #7
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
        break;
 8002cc0:	e01b      	b.n	8002cfa <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002cc2:	4b52      	ldr	r3, [pc, #328]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b51      	ldr	r3, [pc, #324]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cc8:	2180      	movs	r1, #128	@ 0x80
 8002cca:	01c9      	lsls	r1, r1, #7
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cd6:	2180      	movs	r1, #128	@ 0x80
 8002cd8:	01c9      	lsls	r1, r1, #7
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
        break;
 8002cde:	e00c      	b.n	8002cfa <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b49      	ldr	r3, [pc, #292]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002ce6:	494b      	ldr	r1, [pc, #300]	@ (8002e14 <HAL_COMP_Init+0x2b8>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002cec:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4b46      	ldr	r3, [pc, #280]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002cf2:	4948      	ldr	r1, [pc, #288]	@ (8002e14 <HAL_COMP_Init+0x2b8>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
        break;
 8002cf8:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2230      	movs	r2, #48	@ 0x30
 8002d02:	4013      	ands	r3, r2
 8002d04:	d016      	beq.n	8002d34 <HAL_COMP_Init+0x1d8>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d113      	bne.n	8002d34 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d0c:	4b42      	ldr	r3, [pc, #264]	@ (8002e18 <HAL_COMP_Init+0x2bc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4942      	ldr	r1, [pc, #264]	@ (8002e1c <HAL_COMP_Init+0x2c0>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fd f9f6 	bl	8000104 <__udivsi3>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	0013      	movs	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	189b      	adds	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002d26:	e002      	b.n	8002d2e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f9      	bne.n	8002d28 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_COMP_Init+0x2b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d102      	bne.n	8002d44 <HAL_COMP_Init+0x1e8>
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	029b      	lsls	r3, r3, #10
 8002d42:	e001      	b.n	8002d48 <HAL_COMP_Init+0x1ec>
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	02db      	lsls	r3, r3, #11
 8002d48:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	2203      	movs	r2, #3
 8002d50:	4013      	ands	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	2210      	movs	r2, #16
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7ff fe9b 	bl	8002a9c <LL_EXTI_EnableRisingTrig_0_31>
 8002d66:	e003      	b.n	8002d70 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7ff fea6 	bl	8002abc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	2220      	movs	r2, #32
 8002d76:	4013      	ands	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff feaf 	bl	8002ae0 <LL_EXTI_EnableFallingTrig_0_31>
 8002d82:	e003      	b.n	8002d8c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7ff feba 	bl	8002b00 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff fed6 	bl	8002b40 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff fec4 	bl	8002b24 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	2202      	movs	r2, #2
 8002da2:	4013      	ands	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff fe51 	bl	8002a50 <LL_EXTI_EnableEvent_0_31>
 8002dae:	e003      	b.n	8002db8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff fe5e 	bl	8002a74 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff fe1d 	bl	8002a04 <LL_EXTI_EnableIT_0_31>
 8002dca:	e00c      	b.n	8002de6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff fe2a 	bl	8002a28 <LL_EXTI_DisableIT_0_31>
 8002dd4:	e007      	b.n	8002de6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff fe4b 	bl	8002a74 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff fe21 	bl	8002a28 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2229      	movs	r2, #41	@ 0x29
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2229      	movs	r2, #41	@ 0x29
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002dfa:	231f      	movs	r3, #31
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b008      	add	sp, #32
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	fe00740f 	.word	0xfe00740f
 8002e0c:	40010200 	.word	0x40010200
 8002e10:	fffff7ff 	.word	0xfffff7ff
 8002e14:	ffffbfff 	.word	0xffffbfff
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	00030d40 	.word	0x00030d40

08002e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	0002      	movs	r2, r0
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	1dfb      	adds	r3, r7, #7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e32:	d809      	bhi.n	8002e48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	001a      	movs	r2, r3
 8002e3a:	231f      	movs	r3, #31
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <__NVIC_EnableIRQ+0x30>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	4091      	lsls	r1, r2
 8002e44:	000a      	movs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e68:	d828      	bhi.n	8002ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f28 <__NVIC_SetPriority+0xd4>)
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	33c0      	adds	r3, #192	@ 0xc0
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	589b      	ldr	r3, [r3, r2]
 8002e7a:	1dfa      	adds	r2, r7, #7
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	2203      	movs	r2, #3
 8002e82:	400a      	ands	r2, r1
 8002e84:	00d2      	lsls	r2, r2, #3
 8002e86:	21ff      	movs	r1, #255	@ 0xff
 8002e88:	4091      	lsls	r1, r2
 8002e8a:	000a      	movs	r2, r1
 8002e8c:	43d2      	mvns	r2, r2
 8002e8e:	401a      	ands	r2, r3
 8002e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	22ff      	movs	r2, #255	@ 0xff
 8002e98:	401a      	ands	r2, r3
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	4003      	ands	r3, r0
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ea8:	481f      	ldr	r0, [pc, #124]	@ (8002f28 <__NVIC_SetPriority+0xd4>)
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	33c0      	adds	r3, #192	@ 0xc0
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002eba:	e031      	b.n	8002f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f2c <__NVIC_SetPriority+0xd8>)
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	3b08      	subs	r3, #8
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3306      	adds	r3, #6
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1dfa      	adds	r2, r7, #7
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	0011      	movs	r1, r2
 8002edc:	2203      	movs	r2, #3
 8002ede:	400a      	ands	r2, r1
 8002ee0:	00d2      	lsls	r2, r2, #3
 8002ee2:	21ff      	movs	r1, #255	@ 0xff
 8002ee4:	4091      	lsls	r1, r2
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	43d2      	mvns	r2, r2
 8002eea:	401a      	ands	r2, r3
 8002eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	22ff      	movs	r2, #255	@ 0xff
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	2303      	movs	r3, #3
 8002efe:	4003      	ands	r3, r0
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f04:	4809      	ldr	r0, [pc, #36]	@ (8002f2c <__NVIC_SetPriority+0xd8>)
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	001c      	movs	r4, r3
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	4023      	ands	r3, r4
 8002f10:	3b08      	subs	r3, #8
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	430a      	orrs	r2, r1
 8002f16:	3306      	adds	r3, #6
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	18c3      	adds	r3, r0, r3
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b003      	add	sp, #12
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1e5a      	subs	r2, r3, #1
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	045b      	lsls	r3, r3, #17
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d301      	bcc.n	8002f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f44:	2301      	movs	r3, #1
 8002f46:	e010      	b.n	8002f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <SysTick_Config+0x44>)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f50:	2301      	movs	r3, #1
 8002f52:	425b      	negs	r3, r3
 8002f54:	2103      	movs	r1, #3
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7ff ff7c 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <SysTick_Config+0x44>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <SysTick_Config+0x44>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	210f      	movs	r1, #15
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	1c02      	adds	r2, r0, #0
 8002f88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	0002      	movs	r2, r0
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff ff33 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff ffaf 	bl	8002f30 <SysTick_Config>
 8002fd2:	0003      	movs	r3, r0
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e015      	b.n	800301a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	791b      	ldrb	r3, [r3, #4]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	0018      	movs	r0, r3
 8003002:	f7fe f991 	bl	8001328 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	019b      	lsls	r3, r3, #6
 8003042:	4013      	ands	r3, r2
 8003044:	d01e      	beq.n	8003084 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	4013      	ands	r3, r2
 800304e:	d019      	beq.n	8003084 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2204      	movs	r2, #4
 8003054:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2201      	movs	r2, #1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2280      	movs	r2, #128	@ 0x80
 8003068:	0192      	lsls	r2, r2, #6
 800306a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4917      	ldr	r1, [pc, #92]	@ (80030d4 <HAL_DAC_IRQHandler+0xb0>)
 8003078:	400a      	ands	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f000 f82c 	bl	80030dc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	059b      	lsls	r3, r3, #22
 800308a:	4013      	ands	r3, r2
 800308c:	d01e      	beq.n	80030cc <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	059b      	lsls	r3, r3, #22
 8003094:	4013      	ands	r3, r2
 8003096:	d019      	beq.n	80030cc <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2204      	movs	r2, #4
 800309c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2202      	movs	r2, #2
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	0592      	lsls	r2, r2, #22
 80030b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4906      	ldr	r1, [pc, #24]	@ (80030d8 <HAL_DAC_IRQHandler+0xb4>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 f940 	bl	800334c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b004      	add	sp, #16
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	ffffefff 	.word	0xffffefff
 80030d8:	efffffff 	.word	0xefffffff

080030dc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	231f      	movs	r3, #31
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_DAC_ConfigChannel+0x20>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e115      	b.n	800333c <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	795b      	ldrb	r3, [r3, #5]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_DAC_ConfigChannel+0x30>
 8003118:	2302      	movs	r3, #2
 800311a:	e10f      	b.n	800333c <HAL_DAC_ConfigChannel+0x250>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2202      	movs	r2, #2
 8003126:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d000      	beq.n	8003132 <HAL_DAC_ConfigChannel+0x46>
 8003130:	e07a      	b.n	8003228 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003132:	f7fe fc8f 	bl	8001a54 <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d13d      	bne.n	80031bc <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003140:	e018      	b.n	8003174 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003142:	f7fe fc87 	bl	8001a54 <HAL_GetTick>
 8003146:	0002      	movs	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d911      	bls.n	8003174 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	4013      	ands	r3, r2
 800315c:	d00a      	beq.n	8003174 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2208      	movs	r2, #8
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2203      	movs	r2, #3
 800316e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0e3      	b.n	800333c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	4013      	ands	r3, r2
 8003180:	d1df      	bne.n	8003142 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	6992      	ldr	r2, [r2, #24]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
 800318c:	e020      	b.n	80031d0 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800318e:	f7fe fc61 	bl	8001a54 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d90f      	bls.n	80031bc <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da0a      	bge.n	80031bc <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2208      	movs	r2, #8
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2203      	movs	r2, #3
 80031b6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0bf      	b.n	800333c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dbe3      	blt.n	800318e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	6992      	ldr	r2, [r2, #24]
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	2110      	movs	r1, #16
 80031da:	400a      	ands	r2, r1
 80031dc:	4959      	ldr	r1, [pc, #356]	@ (8003344 <HAL_DAC_ConfigChannel+0x258>)
 80031de:	4091      	lsls	r1, r2
 80031e0:	000a      	movs	r2, r1
 80031e2:	43d2      	mvns	r2, r2
 80031e4:	401a      	ands	r2, r3
 80031e6:	0011      	movs	r1, r2
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2010      	movs	r0, #16
 80031f0:	4003      	ands	r3, r0
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	2110      	movs	r1, #16
 8003206:	400a      	ands	r2, r1
 8003208:	21ff      	movs	r1, #255	@ 0xff
 800320a:	4091      	lsls	r1, r2
 800320c:	000a      	movs	r2, r1
 800320e:	43d2      	mvns	r2, r2
 8003210:	401a      	ands	r2, r3
 8003212:	0011      	movs	r1, r2
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2010      	movs	r0, #16
 800321c:	4003      	ands	r3, r0
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d11d      	bne.n	800326c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2210      	movs	r2, #16
 800323c:	4013      	ands	r3, r2
 800323e:	221f      	movs	r2, #31
 8003240:	409a      	lsls	r2, r3
 8003242:	0013      	movs	r3, r2
 8003244:	43da      	mvns	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4013      	ands	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2210      	movs	r2, #16
 8003256:	4013      	ands	r3, r2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2210      	movs	r2, #16
 8003278:	4013      	ands	r3, r2
 800327a:	2207      	movs	r2, #7
 800327c:	409a      	lsls	r2, r3
 800327e:	0013      	movs	r3, r2
 8003280:	43da      	mvns	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	431a      	orrs	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2210      	movs	r2, #16
 800329e:	4013      	ands	r3, r2
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	409a      	lsls	r2, r3
 80032a4:	0013      	movs	r3, r2
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2110      	movs	r1, #16
 80032be:	400b      	ands	r3, r1
 80032c0:	2180      	movs	r1, #128	@ 0x80
 80032c2:	01c9      	lsls	r1, r1, #7
 80032c4:	4099      	lsls	r1, r3
 80032c6:	000b      	movs	r3, r1
 80032c8:	43d9      	mvns	r1, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2210      	movs	r2, #16
 80032de:	4013      	ands	r3, r2
 80032e0:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <HAL_DAC_ConfigChannel+0x25c>)
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	43da      	mvns	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4013      	ands	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2210      	movs	r2, #16
 80032f8:	4013      	ands	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	409a      	lsls	r2, r3
 80032fe:	0013      	movs	r3, r2
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2110      	movs	r1, #16
 8003318:	400b      	ands	r3, r1
 800331a:	21c0      	movs	r1, #192	@ 0xc0
 800331c:	4099      	lsls	r1, r3
 800331e:	000b      	movs	r3, r1
 8003320:	43d9      	mvns	r1, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	400a      	ands	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003336:	231f      	movs	r3, #31
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	781b      	ldrb	r3, [r3, #0]
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b008      	add	sp, #32
 8003342:	bd80      	pop	{r7, pc}
 8003344:	000003ff 	.word	0x000003ff
 8003348:	00000ffe 	.word	0x00000ffe

0800334c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e077      	b.n	800345e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3d      	ldr	r2, [pc, #244]	@ (8003468 <HAL_DMA_Init+0x10c>)
 8003374:	4694      	mov	ip, r2
 8003376:	4463      	add	r3, ip
 8003378:	2114      	movs	r1, #20
 800337a:	0018      	movs	r0, r3
 800337c:	f7fc fec2 	bl	8000104 <__udivsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	009a      	lsls	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2225      	movs	r2, #37	@ 0x25
 800338c:	2102      	movs	r1, #2
 800338e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4934      	ldr	r1, [pc, #208]	@ (800346c <HAL_DMA_Init+0x110>)
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 f9c1 	bl	8003760 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d102      	bne.n	80033f0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f8:	213f      	movs	r1, #63	@ 0x3f
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003406:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d011      	beq.n	8003434 <HAL_DMA_Init+0xd8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d80d      	bhi.n	8003434 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 f9cc 	bl	80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	e008      	b.n	8003446 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2225      	movs	r2, #37	@ 0x25
 8003450:	2101      	movs	r1, #1
 8003452:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	@ 0x24
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	bffdfff8 	.word	0xbffdfff8
 800346c:	ffff800f 	.word	0xffff800f

08003470 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2317      	movs	r3, #23
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2224      	movs	r2, #36	@ 0x24
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_DMA_Start_IT+0x24>
 8003490:	2302      	movs	r3, #2
 8003492:	e06f      	b.n	8003574 <HAL_DMA_Start_IT+0x104>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2224      	movs	r2, #36	@ 0x24
 8003498:	2101      	movs	r1, #1
 800349a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2225      	movs	r2, #37	@ 0x25
 80034a0:	5c9b      	ldrb	r3, [r3, r2]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d157      	bne.n	8003558 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2225      	movs	r2, #37	@ 0x25
 80034ac:	2102      	movs	r1, #2
 80034ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	438a      	bics	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f907 	bl	80036e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	210e      	movs	r1, #14
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00f      	b.n	800350c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2104      	movs	r1, #4
 80034f8:	438a      	bics	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	210a      	movs	r1, #10
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	4013      	ands	r3, r2
 8003518:	d008      	beq.n	800352c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003524:	2180      	movs	r1, #128	@ 0x80
 8003526:	0049      	lsls	r1, r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353e:	2180      	movs	r1, #128	@ 0x80
 8003540:	0049      	lsls	r1, r1, #1
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2101      	movs	r1, #1
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00a      	b.n	800356e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2280      	movs	r2, #128	@ 0x80
 800355c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2224      	movs	r2, #36	@ 0x24
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003566:	2317      	movs	r3, #23
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800356e:	2317      	movs	r3, #23
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b006      	add	sp, #24
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003584:	4b55      	ldr	r3, [pc, #340]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	221c      	movs	r2, #28
 8003598:	4013      	ands	r3, r2
 800359a:	2204      	movs	r2, #4
 800359c:	409a      	lsls	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7a>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2204      	movs	r2, #4
 80035aa:	4013      	ands	r3, r2
 80035ac:	d023      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2220      	movs	r2, #32
 80035b6:	4013      	ands	r3, r2
 80035b8:	d107      	bne.n	80035ca <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2104      	movs	r1, #4
 80035c6:	438a      	bics	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80035ca:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	221c      	movs	r2, #28
 80035d4:	4013      	ands	r3, r2
 80035d6:	2204      	movs	r2, #4
 80035d8:	409a      	lsls	r2, r3
 80035da:	4b40      	ldr	r3, [pc, #256]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d100      	bne.n	80035ea <HAL_DMA_IRQHandler+0x6e>
 80035e8:	e073      	b.n	80036d2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	0010      	movs	r0, r2
 80035f2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80035f4:	e06d      	b.n	80036d2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	221c      	movs	r2, #28
 80035fc:	4013      	ands	r3, r2
 80035fe:	2202      	movs	r2, #2
 8003600:	409a      	lsls	r2, r3
 8003602:	0013      	movs	r3, r2
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	d02e      	beq.n	8003668 <HAL_DMA_IRQHandler+0xec>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d02a      	beq.n	8003668 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2220      	movs	r2, #32
 800361a:	4013      	ands	r3, r2
 800361c:	d10b      	bne.n	8003636 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	210a      	movs	r1, #10
 800362a:	438a      	bics	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2225      	movs	r2, #37	@ 0x25
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003636:	4b29      	ldr	r3, [pc, #164]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	221c      	movs	r2, #28
 8003640:	4013      	ands	r3, r2
 8003642:	2202      	movs	r2, #2
 8003644:	409a      	lsls	r2, r3
 8003646:	4b25      	ldr	r3, [pc, #148]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	@ 0x24
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	0010      	movs	r0, r2
 8003664:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003666:	e034      	b.n	80036d2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	221c      	movs	r2, #28
 800366e:	4013      	ands	r3, r2
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	0013      	movs	r3, r2
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	d02b      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x158>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2208      	movs	r2, #8
 8003680:	4013      	ands	r3, r2
 8003682:	d027      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	210e      	movs	r1, #14
 8003690:	438a      	bics	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003694:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	221c      	movs	r2, #28
 800369e:	4013      	ands	r3, r2
 80036a0:	2201      	movs	r2, #1
 80036a2:	409a      	lsls	r2, r3
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <HAL_DMA_IRQHandler+0x160>)
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2225      	movs	r2, #37	@ 0x25
 80036b4:	2101      	movs	r1, #1
 80036b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	@ 0x24
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	0010      	movs	r0, r2
 80036d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46c0      	nop			@ (mov r8, r8)
}
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40020000 	.word	0x40020000

080036e0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003708:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800370a:	4b14      	ldr	r3, [pc, #80]	@ (800375c <DMA_SetConfig+0x7c>)
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	221c      	movs	r2, #28
 8003714:	4013      	ands	r3, r2
 8003716:	2201      	movs	r2, #1
 8003718:	409a      	lsls	r2, r3
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <DMA_SetConfig+0x7c>)
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b10      	cmp	r3, #16
 800372e:	d108      	bne.n	8003742 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003740:	e007      	b.n	8003752 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	60da      	str	r2, [r3, #12]
}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b004      	add	sp, #16
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	40020000 	.word	0x40020000

08003760 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	4a10      	ldr	r2, [pc, #64]	@ (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003770:	4694      	mov	ip, r2
 8003772:	4463      	add	r3, ip
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	001a      	movs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	001a      	movs	r2, r3
 8003782:	23ff      	movs	r3, #255	@ 0xff
 8003784:	4013      	ands	r3, r2
 8003786:	3b08      	subs	r3, #8
 8003788:	2114      	movs	r1, #20
 800378a:	0018      	movs	r0, r3
 800378c:	f7fc fcba 	bl	8000104 <__udivsi3>
 8003790:	0003      	movs	r3, r0
 8003792:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003798:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	221f      	movs	r2, #31
 800379e:	4013      	ands	r3, r2
 80037a0:	2201      	movs	r2, #1
 80037a2:	409a      	lsls	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b004      	add	sp, #16
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	10008200 	.word	0x10008200
 80037b4:	40020880 	.word	0x40020880

080037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	223f      	movs	r2, #63	@ 0x3f
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037ce:	4694      	mov	ip, r2
 80037d0:	4463      	add	r3, ip
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	001a      	movs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	4013      	ands	r3, r2
 80037e8:	2201      	movs	r2, #1
 80037ea:	409a      	lsls	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80037f0:	46c0      	nop			@ (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	1000823f 	.word	0x1000823f
 80037fc:	40020940 	.word	0x40020940

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380e:	e147      	b.n	8003aa0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4091      	lsls	r1, r2
 800381a:	000a      	movs	r2, r1
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d100      	bne.n	8003828 <HAL_GPIO_Init+0x28>
 8003826:	e138      	b.n	8003a9a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	4013      	ands	r3, r2
 8003830:	2b01      	cmp	r3, #1
 8003832:	d005      	beq.n	8003840 <HAL_GPIO_Init+0x40>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2203      	movs	r2, #3
 800383a:	4013      	ands	r3, r2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d130      	bne.n	80038a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	409a      	lsls	r2, r3
 800384e:	0013      	movs	r3, r2
 8003850:	43da      	mvns	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	0013      	movs	r3, r2
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003876:	2201      	movs	r2, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
 800387c:	0013      	movs	r3, r2
 800387e:	43da      	mvns	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	2201      	movs	r2, #1
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2203      	movs	r2, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d017      	beq.n	80038de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	409a      	lsls	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	43da      	mvns	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	409a      	lsls	r2, r3
 80038d0:	0013      	movs	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2203      	movs	r2, #3
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d123      	bne.n	8003932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	08da      	lsrs	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	58d3      	ldr	r3, [r2, r3]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2207      	movs	r2, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	409a      	lsls	r2, r3
 8003904:	0013      	movs	r3, r2
 8003906:	43da      	mvns	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2107      	movs	r1, #7
 8003916:	400b      	ands	r3, r1
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	409a      	lsls	r2, r3
 800391c:	0013      	movs	r3, r2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	0092      	lsls	r2, r2, #2
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	43da      	mvns	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	401a      	ands	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	23c0      	movs	r3, #192	@ 0xc0
 800396c:	029b      	lsls	r3, r3, #10
 800396e:	4013      	ands	r3, r2
 8003970:	d100      	bne.n	8003974 <HAL_GPIO_Init+0x174>
 8003972:	e092      	b.n	8003a9a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003974:	4a50      	ldr	r2, [pc, #320]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3318      	adds	r3, #24
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	589b      	ldr	r3, [r3, r2]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2203      	movs	r2, #3
 8003986:	4013      	ands	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	220f      	movs	r2, #15
 800398c:	409a      	lsls	r2, r3
 800398e:	0013      	movs	r3, r2
 8003990:	43da      	mvns	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	23a0      	movs	r3, #160	@ 0xa0
 800399c:	05db      	lsls	r3, r3, #23
 800399e:	429a      	cmp	r2, r3
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x1ca>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a45      	ldr	r2, [pc, #276]	@ (8003abc <HAL_GPIO_Init+0x2bc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x1c6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a44      	ldr	r2, [pc, #272]	@ (8003ac0 <HAL_GPIO_Init+0x2c0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x1c2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a43      	ldr	r2, [pc, #268]	@ (8003ac4 <HAL_GPIO_Init+0x2c4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x1be>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x1cc>
 80039be:	2305      	movs	r3, #5
 80039c0:	e004      	b.n	80039cc <HAL_GPIO_Init+0x1cc>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e002      	b.n	80039cc <HAL_GPIO_Init+0x1cc>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_GPIO_Init+0x1cc>
 80039ca:	2300      	movs	r3, #0
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	2103      	movs	r1, #3
 80039d0:	400a      	ands	r2, r1
 80039d2:	00d2      	lsls	r2, r2, #3
 80039d4:	4093      	lsls	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80039dc:	4936      	ldr	r1, [pc, #216]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	3318      	adds	r3, #24
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ea:	4b33      	ldr	r3, [pc, #204]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	035b      	lsls	r3, r3, #13
 8003a02:	4013      	ands	r3, r2
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003a14:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	039b      	lsls	r3, r3, #14
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a38:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a40:	2384      	movs	r3, #132	@ 0x84
 8003a42:	58d3      	ldr	r3, [r2, r3]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	029b      	lsls	r3, r3, #10
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a64:	4914      	ldr	r1, [pc, #80]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a66:	2284      	movs	r2, #132	@ 0x84
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003a6c:	4a12      	ldr	r2, [pc, #72]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	58d3      	ldr	r3, [r2, r3]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	4013      	ands	r3, r2
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a92:	4909      	ldr	r1, [pc, #36]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003a94:	2280      	movs	r2, #128	@ 0x80
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	40da      	lsrs	r2, r3
 8003aa8:	1e13      	subs	r3, r2, #0
 8003aaa:	d000      	beq.n	8003aae <HAL_GPIO_Init+0x2ae>
 8003aac:	e6b0      	b.n	8003810 <HAL_GPIO_Init+0x10>
  }
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	46c0      	nop			@ (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b006      	add	sp, #24
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021800 	.word	0x40021800
 8003abc:	50000400 	.word	0x50000400
 8003ac0:	50000800 	.word	0x50000800
 8003ac4:	50000c00 	.word	0x50000c00

08003ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	1cbb      	adds	r3, r7, #2
 8003ad4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	1cba      	adds	r2, r7, #2
 8003adc:	8812      	ldrh	r2, [r2, #0]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae2:	230f      	movs	r3, #15
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e003      	b.n	8003af4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003af4:	230f      	movs	r3, #15
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	781b      	ldrb	r3, [r3, #0]
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	0008      	movs	r0, r1
 8003b0c:	0011      	movs	r1, r2
 8003b0e:	1cbb      	adds	r3, r7, #2
 8003b10:	1c02      	adds	r2, r0, #0
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	1c7b      	adds	r3, r7, #1
 8003b16:	1c0a      	adds	r2, r1, #0
 8003b18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b1a:	1c7b      	adds	r3, r7, #1
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b22:	1cbb      	adds	r3, r7, #2
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b2a:	e003      	b.n	8003b34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2c:	1cbb      	adds	r3, r7, #2
 8003b2e:	881a      	ldrh	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b44:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d11f      	bne.n	8003ba0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b60:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	0013      	movs	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4912      	ldr	r1, [pc, #72]	@ (8003bb8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fc fac8 	bl	8000104 <__udivsi3>
 8003b74:	0003      	movs	r3, r0
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b7a:	e008      	b.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e001      	b.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e009      	b.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b8e:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	2380      	movs	r3, #128	@ 0x80
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	401a      	ands	r2, r3
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d0ed      	beq.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b004      	add	sp, #16
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	fffff9ff 	.word	0xfffff9ff
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	000f4240 	.word	0x000f4240

08003bbc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	23e0      	movs	r3, #224	@ 0xe0
 8003bc6:	01db      	lsls	r3, r3, #7
 8003bc8:	4013      	ands	r3, r2
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e2fe      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	d100      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x1e>
 8003bf0:	e07c      	b.n	8003cec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf2:	4bc3      	ldr	r3, [pc, #780]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2238      	movs	r2, #56	@ 0x38
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bfc:	4bc0      	ldr	r3, [pc, #768]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4013      	ands	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3e>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4bb9      	ldr	r3, [pc, #740]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	4013      	ands	r3, r2
 8003c22:	d062      	beq.n	8003cea <HAL_RCC_OscConfig+0x116>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d15e      	bne.n	8003cea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e2d9      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	025b      	lsls	r3, r3, #9
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x78>
 8003c3c:	4bb0      	ldr	r3, [pc, #704]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4baf      	ldr	r3, [pc, #700]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	2180      	movs	r1, #128	@ 0x80
 8003c44:	0249      	lsls	r1, r1, #9
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e020      	b.n	8003c8e <HAL_RCC_OscConfig+0xba>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	23a0      	movs	r3, #160	@ 0xa0
 8003c52:	02db      	lsls	r3, r3, #11
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d10e      	bne.n	8003c76 <HAL_RCC_OscConfig+0xa2>
 8003c58:	4ba9      	ldr	r3, [pc, #676]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4ba8      	ldr	r3, [pc, #672]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	02c9      	lsls	r1, r1, #11
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	4ba6      	ldr	r3, [pc, #664]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4ba5      	ldr	r3, [pc, #660]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c6c:	2180      	movs	r1, #128	@ 0x80
 8003c6e:	0249      	lsls	r1, r1, #9
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e00b      	b.n	8003c8e <HAL_RCC_OscConfig+0xba>
 8003c76:	4ba2      	ldr	r3, [pc, #648]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4ba1      	ldr	r3, [pc, #644]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	49a1      	ldr	r1, [pc, #644]	@ (8003f04 <HAL_RCC_OscConfig+0x330>)
 8003c7e:	400a      	ands	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	4b9f      	ldr	r3, [pc, #636]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b9e      	ldr	r3, [pc, #632]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003c88:	499f      	ldr	r1, [pc, #636]	@ (8003f08 <HAL_RCC_OscConfig+0x334>)
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d014      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fd fedd 	bl	8001a54 <HAL_GetTick>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fd fed8 	bl	8001a54 <HAL_GetTick>
 8003ca4:	0002      	movs	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	@ 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e298      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb2:	4b93      	ldr	r3, [pc, #588]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	029b      	lsls	r3, r3, #10
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xcc>
 8003cbe:	e015      	b.n	8003cec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fec8 	bl	8001a54 <HAL_GetTick>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cca:	f7fd fec3 	bl	8001a54 <HAL_GetTick>
 8003cce:	0002      	movs	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b64      	cmp	r3, #100	@ 0x64
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e283      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cdc:	4b88      	ldr	r3, [pc, #544]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0xf6>
 8003ce8:	e000      	b.n	8003cec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d100      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x124>
 8003cf6:	e099      	b.n	8003e2c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf8:	4b81      	ldr	r3, [pc, #516]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2238      	movs	r2, #56	@ 0x38
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2203      	movs	r2, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_OscConfig+0x144>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d002      	beq.n	8003d1e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d135      	bne.n	8003d8a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d1e:	4b78      	ldr	r3, [pc, #480]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4013      	ands	r3, r2
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x162>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e256      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b72      	ldr	r3, [pc, #456]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4a74      	ldr	r2, [pc, #464]	@ (8003f0c <HAL_RCC_OscConfig+0x338>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	021a      	lsls	r2, r3, #8
 8003d46:	4b6e      	ldr	r3, [pc, #440]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d112      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d52:	4b6b      	ldr	r3, [pc, #428]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6e      	ldr	r2, [pc, #440]	@ (8003f10 <HAL_RCC_OscConfig+0x33c>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	4b67      	ldr	r3, [pc, #412]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d66:	4b66      	ldr	r3, [pc, #408]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0adb      	lsrs	r3, r3, #11
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	4013      	ands	r3, r2
 8003d70:	4a68      	ldr	r2, [pc, #416]	@ (8003f14 <HAL_RCC_OscConfig+0x340>)
 8003d72:	40da      	lsrs	r2, r3
 8003d74:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <HAL_RCC_OscConfig+0x344>)
 8003d76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d78:	4b68      	ldr	r3, [pc, #416]	@ (8003f1c <HAL_RCC_OscConfig+0x348>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fd fe0d 	bl	800199c <HAL_InitTick>
 8003d82:	1e03      	subs	r3, r0, #0
 8003d84:	d051      	beq.n	8003e2a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e22c      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d030      	beq.n	8003df4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d92:	4b5b      	ldr	r3, [pc, #364]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5e      	ldr	r2, [pc, #376]	@ (8003f10 <HAL_RCC_OscConfig+0x33c>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	4b57      	ldr	r3, [pc, #348]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003da6:	4b56      	ldr	r3, [pc, #344]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b55      	ldr	r3, [pc, #340]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	2180      	movs	r1, #128	@ 0x80
 8003dae:	0049      	lsls	r1, r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fe4e 	bl	8001a54 <HAL_GetTick>
 8003db8:	0003      	movs	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fe49 	bl	8001a54 <HAL_GetTick>
 8003dc2:	0002      	movs	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e209      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b48      	ldr	r3, [pc, #288]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a4a      	ldr	r2, [pc, #296]	@ (8003f0c <HAL_RCC_OscConfig+0x338>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	4b44      	ldr	r3, [pc, #272]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	e01b      	b.n	8003e2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003df4:	4b42      	ldr	r3, [pc, #264]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b41      	ldr	r3, [pc, #260]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	4949      	ldr	r1, [pc, #292]	@ (8003f20 <HAL_RCC_OscConfig+0x34c>)
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fe28 	bl	8001a54 <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fd fe23 	bl	8001a54 <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1e3      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e1c:	4b38      	ldr	r3, [pc, #224]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4013      	ands	r3, r2
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x236>
 8003e28:	e000      	b.n	8003e2c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	4013      	ands	r3, r2
 8003e34:	d047      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e36:	4b32      	ldr	r3, [pc, #200]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2238      	movs	r2, #56	@ 0x38
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b18      	cmp	r3, #24
 8003e40:	d10a      	bne.n	8003e58 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e42:	4b2f      	ldr	r3, [pc, #188]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e46:	2202      	movs	r2, #2
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d03c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x2f2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d138      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e1c5      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d019      	beq.n	8003e94 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e60:	4b27      	ldr	r3, [pc, #156]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e64:	4b26      	ldr	r3, [pc, #152]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	2101      	movs	r1, #1
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fdf2 	bl	8001a54 <HAL_GetTick>
 8003e70:	0003      	movs	r3, r0
 8003e72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fd fded 	bl	8001a54 <HAL_GetTick>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e1ad      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d0f1      	beq.n	8003e76 <HAL_RCC_OscConfig+0x2a2>
 8003e92:	e018      	b.n	8003ec6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e94:	4b1a      	ldr	r3, [pc, #104]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e98:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fdd8 	bl	8001a54 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fd fdd3 	bl	8001a54 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e193      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ebc:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d1f1      	bne.n	8003eaa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x2fe>
 8003ed0:	e0c6      	b.n	8004060 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	231f      	movs	r3, #31
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003eda:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2238      	movs	r2, #56	@ 0x38
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d11e      	bne.n	8003f24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ee6:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <HAL_RCC_OscConfig+0x32c>)
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d100      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x31e>
 8003ef0:	e0b6      	b.n	8004060 <HAL_RCC_OscConfig+0x48c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d000      	beq.n	8003efc <HAL_RCC_OscConfig+0x328>
 8003efa:	e0b1      	b.n	8004060 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e171      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
 8003f00:	40021000 	.word	0x40021000
 8003f04:	fffeffff 	.word	0xfffeffff
 8003f08:	fffbffff 	.word	0xfffbffff
 8003f0c:	ffff80ff 	.word	0xffff80ff
 8003f10:	ffffc7ff 	.word	0xffffc7ff
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	20000008 	.word	0x20000008
 8003f1c:	2000000c 	.word	0x2000000c
 8003f20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f24:	4bb1      	ldr	r3, [pc, #708]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	055b      	lsls	r3, r3, #21
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_OscConfig+0x360>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x362>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4bac      	ldr	r3, [pc, #688]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f3e:	4bab      	ldr	r3, [pc, #684]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	0549      	lsls	r1, r1, #21
 8003f44:	430a      	orrs	r2, r1
 8003f46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f48:	4ba8      	ldr	r3, [pc, #672]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f4c:	2380      	movs	r3, #128	@ 0x80
 8003f4e:	055b      	lsls	r3, r3, #21
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f56:	231f      	movs	r3, #31
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5e:	4ba4      	ldr	r3, [pc, #656]	@ (80041f0 <HAL_RCC_OscConfig+0x61c>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6a:	4ba1      	ldr	r3, [pc, #644]	@ (80041f0 <HAL_RCC_OscConfig+0x61c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4ba0      	ldr	r3, [pc, #640]	@ (80041f0 <HAL_RCC_OscConfig+0x61c>)
 8003f70:	2180      	movs	r1, #128	@ 0x80
 8003f72:	0049      	lsls	r1, r1, #1
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f78:	f7fd fd6c 	bl	8001a54 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fd fd67 	bl	8001a54 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e127      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f94:	4b96      	ldr	r3, [pc, #600]	@ (80041f0 <HAL_RCC_OscConfig+0x61c>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x3e2>
 8003fa8:	4b90      	ldr	r3, [pc, #576]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fac:	4b8f      	ldr	r3, [pc, #572]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fae:	2101      	movs	r1, #1
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x41c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x404>
 8003fbe:	4b8b      	ldr	r3, [pc, #556]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fc2:	4b8a      	ldr	r3, [pc, #552]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fca:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fce:	4b87      	ldr	r3, [pc, #540]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x41c>
 8003fd8:	4b84      	ldr	r3, [pc, #528]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fdc:	4b83      	ldr	r3, [pc, #524]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fe4:	4b81      	ldr	r3, [pc, #516]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fe6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fe8:	4b80      	ldr	r3, [pc, #512]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8003fea:	2104      	movs	r1, #4
 8003fec:	438a      	bics	r2, r1
 8003fee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d014      	beq.n	8004022 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fd2c 	bl	8001a54 <HAL_GetTick>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004000:	e009      	b.n	8004016 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fd fd27 	bl	8001a54 <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	4a79      	ldr	r2, [pc, #484]	@ (80041f4 <HAL_RCC_OscConfig+0x620>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0e6      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004016:	4b75      	ldr	r3, [pc, #468]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x42e>
 8004020:	e013      	b.n	800404a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fd fd17 	bl	8001a54 <HAL_GetTick>
 8004026:	0003      	movs	r3, r0
 8004028:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800402a:	e009      	b.n	8004040 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7fd fd12 	bl	8001a54 <HAL_GetTick>
 8004030:	0002      	movs	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	4a6f      	ldr	r2, [pc, #444]	@ (80041f4 <HAL_RCC_OscConfig+0x620>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0d1      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004040:	4b6a      	ldr	r3, [pc, #424]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800404a:	231f      	movs	r3, #31
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d105      	bne.n	8004060 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004054:	4b65      	ldr	r3, [pc, #404]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004058:	4b64      	ldr	r3, [pc, #400]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 800405a:	4967      	ldr	r1, [pc, #412]	@ (80041f8 <HAL_RCC_OscConfig+0x624>)
 800405c:	400a      	ands	r2, r1
 800405e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d100      	bne.n	800406a <HAL_RCC_OscConfig+0x496>
 8004068:	e0bb      	b.n	80041e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800406a:	4b60      	ldr	r3, [pc, #384]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2238      	movs	r2, #56	@ 0x38
 8004070:	4013      	ands	r3, r2
 8004072:	2b10      	cmp	r3, #16
 8004074:	d100      	bne.n	8004078 <HAL_RCC_OscConfig+0x4a4>
 8004076:	e07b      	b.n	8004170 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d156      	bne.n	800412e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b5a      	ldr	r3, [pc, #360]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004086:	495d      	ldr	r1, [pc, #372]	@ (80041fc <HAL_RCC_OscConfig+0x628>)
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd fce2 	bl	8001a54 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7fd fcdd 	bl	8001a54 <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e09d      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a8:	4b50      	ldr	r3, [pc, #320]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	2380      	movs	r3, #128	@ 0x80
 80040ae:	049b      	lsls	r3, r3, #18
 80040b0:	4013      	ands	r3, r2
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b4:	4b4d      	ldr	r3, [pc, #308]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a51      	ldr	r2, [pc, #324]	@ (8004200 <HAL_RCC_OscConfig+0x62c>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e0:	431a      	orrs	r2, r3
 80040e2:	4b42      	ldr	r3, [pc, #264]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e8:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b3f      	ldr	r3, [pc, #252]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040ee:	2180      	movs	r1, #128	@ 0x80
 80040f0:	0449      	lsls	r1, r1, #17
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	4b3c      	ldr	r3, [pc, #240]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 80040fc:	2180      	movs	r1, #128	@ 0x80
 80040fe:	0549      	lsls	r1, r1, #21
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fca6 	bl	8001a54 <HAL_GetTick>
 8004108:	0003      	movs	r3, r0
 800410a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7fd fca1 	bl	8001a54 <HAL_GetTick>
 8004112:	0002      	movs	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e061      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004120:	4b32      	ldr	r3, [pc, #200]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	049b      	lsls	r3, r3, #18
 8004128:	4013      	ands	r3, r2
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x53a>
 800412c:	e059      	b.n	80041e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b2e      	ldr	r3, [pc, #184]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004134:	4931      	ldr	r1, [pc, #196]	@ (80041fc <HAL_RCC_OscConfig+0x628>)
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd fc8b 	bl	8001a54 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd fc86 	bl	8001a54 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e046      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	049b      	lsls	r3, r3, #18
 800415e:	4013      	ands	r3, r2
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004162:	4b22      	ldr	r3, [pc, #136]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	4b21      	ldr	r3, [pc, #132]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 8004168:	4926      	ldr	r1, [pc, #152]	@ (8004204 <HAL_RCC_OscConfig+0x630>)
 800416a:	400a      	ands	r2, r1
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	e038      	b.n	80041e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e033      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800417c:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x618>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2203      	movs	r2, #3
 8004186:	401a      	ands	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	429a      	cmp	r2, r3
 800418e:	d126      	bne.n	80041de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2270      	movs	r2, #112	@ 0x70
 8004194:	401a      	ands	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d11f      	bne.n	80041de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	23fe      	movs	r3, #254	@ 0xfe
 80041a2:	01db      	lsls	r3, r3, #7
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d116      	bne.n	80041de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	23f8      	movs	r3, #248	@ 0xf8
 80041b4:	039b      	lsls	r3, r3, #14
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d10e      	bne.n	80041de <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	23e0      	movs	r3, #224	@ 0xe0
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	0f5b      	lsrs	r3, r3, #29
 80041d4:	075a      	lsls	r2, r3, #29
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b008      	add	sp, #32
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
 80041f4:	00001388 	.word	0x00001388
 80041f8:	efffffff 	.word	0xefffffff
 80041fc:	feffffff 	.word	0xfeffffff
 8004200:	11c1808c 	.word	0x11c1808c
 8004204:	eefefffc 	.word	0xeefefffc

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0e9      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b76      	ldr	r3, [pc, #472]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2207      	movs	r2, #7
 8004222:	4013      	ands	r3, r2
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d91e      	bls.n	8004268 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b73      	ldr	r3, [pc, #460]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2207      	movs	r2, #7
 8004230:	4393      	bics	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	4b70      	ldr	r3, [pc, #448]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800423c:	f7fd fc0a 	bl	8001a54 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004244:	e009      	b.n	800425a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004246:	f7fd fc05 	bl	8001a54 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	4a6a      	ldr	r2, [pc, #424]	@ (80043fc <HAL_RCC_ClockConfig+0x1f4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e0ca      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800425a:	4b67      	ldr	r3, [pc, #412]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2207      	movs	r2, #7
 8004260:	4013      	ands	r3, r2
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d1ee      	bne.n	8004246 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2202      	movs	r2, #2
 800426e:	4013      	ands	r3, r2
 8004270:	d015      	beq.n	800429e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2204      	movs	r2, #4
 8004278:	4013      	ands	r3, r2
 800427a:	d006      	beq.n	800428a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800427c:	4b60      	ldr	r3, [pc, #384]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 8004282:	21e0      	movs	r1, #224	@ 0xe0
 8004284:	01c9      	lsls	r1, r1, #7
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428a:	4b5d      	ldr	r3, [pc, #372]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a5d      	ldr	r2, [pc, #372]	@ (8004404 <HAL_RCC_ClockConfig+0x1fc>)
 8004290:	4013      	ands	r3, r2
 8004292:	0019      	movs	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2201      	movs	r2, #1
 80042a4:	4013      	ands	r3, r2
 80042a6:	d057      	beq.n	8004358 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b0:	4b53      	ldr	r3, [pc, #332]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	4013      	ands	r3, r2
 80042ba:	d12b      	bne.n	8004314 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e097      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	049b      	lsls	r3, r3, #18
 80042d0:	4013      	ands	r3, r2
 80042d2:	d11f      	bne.n	8004314 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e08b      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e0:	4b47      	ldr	r3, [pc, #284]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4013      	ands	r3, r2
 80042ea:	d113      	bne.n	8004314 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e07f      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f8:	4b41      	ldr	r3, [pc, #260]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80042fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fc:	2202      	movs	r2, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	d108      	bne.n	8004314 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e074      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b3e      	ldr	r3, [pc, #248]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 8004308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430a:	2202      	movs	r2, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e06d      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004314:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2207      	movs	r2, #7
 800431a:	4393      	bics	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fd fb94 	bl	8001a54 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004330:	e009      	b.n	8004346 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004332:	f7fd fb8f 	bl	8001a54 <HAL_GetTick>
 8004336:	0002      	movs	r2, r0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	4a2f      	ldr	r2, [pc, #188]	@ (80043fc <HAL_RCC_ClockConfig+0x1f4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e054      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2238      	movs	r2, #56	@ 0x38
 800434c:	401a      	ands	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	429a      	cmp	r2, r3
 8004356:	d1ec      	bne.n	8004332 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b27      	ldr	r3, [pc, #156]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2207      	movs	r2, #7
 800435e:	4013      	ands	r3, r2
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d21e      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b24      	ldr	r3, [pc, #144]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2207      	movs	r2, #7
 800436c:	4393      	bics	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	4b21      	ldr	r3, [pc, #132]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004378:	f7fd fb6c 	bl	8001a54 <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004380:	e009      	b.n	8004396 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004382:	f7fd fb67 	bl	8001a54 <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	4a1b      	ldr	r2, [pc, #108]	@ (80043fc <HAL_RCC_ClockConfig+0x1f4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e02c      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004396:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2207      	movs	r2, #7
 800439c:	4013      	ands	r3, r2
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1ee      	bne.n	8004382 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2204      	movs	r2, #4
 80043aa:	4013      	ands	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043ae:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <HAL_RCC_ClockConfig+0x200>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	4b10      	ldr	r3, [pc, #64]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80043c2:	f000 f829 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043c6:	0001      	movs	r1, r0
 80043c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <HAL_RCC_ClockConfig+0x1f8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	220f      	movs	r2, #15
 80043d0:	401a      	ands	r2, r3
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_RCC_ClockConfig+0x204>)
 80043d4:	0092      	lsls	r2, r2, #2
 80043d6:	58d3      	ldr	r3, [r2, r3]
 80043d8:	221f      	movs	r2, #31
 80043da:	4013      	ands	r3, r2
 80043dc:	000a      	movs	r2, r1
 80043de:	40da      	lsrs	r2, r3
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <HAL_RCC_ClockConfig+0x208>)
 80043e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <HAL_RCC_ClockConfig+0x20c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7fd fad7 	bl	800199c <HAL_InitTick>
 80043ee:	0003      	movs	r3, r0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40022000 	.word	0x40022000
 80043fc:	00001388 	.word	0x00001388
 8004400:	40021000 	.word	0x40021000
 8004404:	fffff0ff 	.word	0xfffff0ff
 8004408:	ffff8fff 	.word	0xffff8fff
 800440c:	08006ecc 	.word	0x08006ecc
 8004410:	20000008 	.word	0x20000008
 8004414:	2000000c 	.word	0x2000000c

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800441e:	4b3c      	ldr	r3, [pc, #240]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2238      	movs	r2, #56	@ 0x38
 8004424:	4013      	ands	r3, r2
 8004426:	d10f      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004428:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0adb      	lsrs	r3, r3, #11
 800442e:	2207      	movs	r2, #7
 8004430:	4013      	ands	r3, r2
 8004432:	2201      	movs	r2, #1
 8004434:	409a      	lsls	r2, r3
 8004436:	0013      	movs	r3, r2
 8004438:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	4835      	ldr	r0, [pc, #212]	@ (8004514 <HAL_RCC_GetSysClockFreq+0xfc>)
 800443e:	f7fb fe61 	bl	8000104 <__udivsi3>
 8004442:	0003      	movs	r3, r0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e05d      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004448:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2238      	movs	r2, #56	@ 0x38
 800444e:	4013      	ands	r3, r2
 8004450:	2b08      	cmp	r3, #8
 8004452:	d102      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004454:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x100>)
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e054      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445a:	4b2d      	ldr	r3, [pc, #180]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2238      	movs	r2, #56	@ 0x38
 8004460:	4013      	ands	r3, r2
 8004462:	2b10      	cmp	r3, #16
 8004464:	d138      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004466:	4b2a      	ldr	r3, [pc, #168]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2203      	movs	r2, #3
 800446c:	4013      	ands	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004470:	4b27      	ldr	r3, [pc, #156]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	2207      	movs	r2, #7
 8004478:	4013      	ands	r3, r2
 800447a:	3301      	adds	r3, #1
 800447c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d10d      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	4824      	ldr	r0, [pc, #144]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x100>)
 8004488:	f7fb fe3c 	bl	8000104 <__udivsi3>
 800448c:	0003      	movs	r3, r0
 800448e:	0019      	movs	r1, r3
 8004490:	4b1f      	ldr	r3, [pc, #124]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	227f      	movs	r2, #127	@ 0x7f
 8004498:	4013      	ands	r3, r2
 800449a:	434b      	muls	r3, r1
 800449c:	617b      	str	r3, [r7, #20]
        break;
 800449e:	e00d      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	481c      	ldr	r0, [pc, #112]	@ (8004514 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044a4:	f7fb fe2e 	bl	8000104 <__udivsi3>
 80044a8:	0003      	movs	r3, r0
 80044aa:	0019      	movs	r1, r3
 80044ac:	4b18      	ldr	r3, [pc, #96]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	227f      	movs	r2, #127	@ 0x7f
 80044b4:	4013      	ands	r3, r2
 80044b6:	434b      	muls	r3, r1
 80044b8:	617b      	str	r3, [r7, #20]
        break;
 80044ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0f5b      	lsrs	r3, r3, #29
 80044c2:	2207      	movs	r2, #7
 80044c4:	4013      	ands	r3, r2
 80044c6:	3301      	adds	r3, #1
 80044c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f7fb fe19 	bl	8000104 <__udivsi3>
 80044d2:	0003      	movs	r3, r0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	e015      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2238      	movs	r2, #56	@ 0x38
 80044de:	4013      	ands	r3, r2
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d103      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044ec:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2238      	movs	r2, #56	@ 0x38
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	d103      	bne.n	8004500 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80044f8:	23fa      	movs	r3, #250	@ 0xfa
 80044fa:	01db      	lsls	r3, r3, #7
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	e001      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004504:	693b      	ldr	r3, [r7, #16]
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b006      	add	sp, #24
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	40021000 	.word	0x40021000
 8004514:	00f42400 	.word	0x00f42400
 8004518:	007a1200 	.word	0x007a1200

0800451c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b02      	ldr	r3, [pc, #8]	@ (800452c <HAL_RCC_GetHCLKFreq+0x10>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	20000008 	.word	0x20000008

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004534:	f7ff fff2 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004538:	0004      	movs	r4, r0
 800453a:	f7ff fb3f 	bl	8003bbc <LL_RCC_GetAPB1Prescaler>
 800453e:	0003      	movs	r3, r0
 8004540:	0b1a      	lsrs	r2, r3, #12
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	58d3      	ldr	r3, [r2, r3]
 8004548:	221f      	movs	r2, #31
 800454a:	4013      	ands	r3, r2
 800454c:	40dc      	lsrs	r4, r3
 800454e:	0023      	movs	r3, r4
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	bdb0      	pop	{r4, r5, r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	08006f0c 	.word	0x08006f0c

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004564:	2313      	movs	r3, #19
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800456c:	2312      	movs	r3, #18
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	4013      	ands	r3, r2
 800457e:	d100      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004580:	e0a3      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2011      	movs	r0, #17
 8004584:	183b      	adds	r3, r7, r0
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4bc3      	ldr	r3, [pc, #780]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800458c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800458e:	2380      	movs	r3, #128	@ 0x80
 8004590:	055b      	lsls	r3, r3, #21
 8004592:	4013      	ands	r3, r2
 8004594:	d110      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	4bc0      	ldr	r3, [pc, #768]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800459a:	4bbf      	ldr	r3, [pc, #764]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800459c:	2180      	movs	r1, #128	@ 0x80
 800459e:	0549      	lsls	r1, r1, #21
 80045a0:	430a      	orrs	r2, r1
 80045a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045a4:	4bbc      	ldr	r3, [pc, #752]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	055b      	lsls	r3, r3, #21
 80045ac:	4013      	ands	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b8:	4bb8      	ldr	r3, [pc, #736]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4bb7      	ldr	r3, [pc, #732]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045be:	2180      	movs	r1, #128	@ 0x80
 80045c0:	0049      	lsls	r1, r1, #1
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c6:	f7fd fa45 	bl	8001a54 <HAL_GetTick>
 80045ca:	0003      	movs	r3, r0
 80045cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ce:	e00b      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fd fa40 	bl	8001a54 <HAL_GetTick>
 80045d4:	0002      	movs	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d904      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80045de:	2313      	movs	r3, #19
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	2203      	movs	r2, #3
 80045e4:	701a      	strb	r2, [r3, #0]
        break;
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e8:	4bac      	ldr	r3, [pc, #688]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4013      	ands	r3, r2
 80045f2:	d0ed      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80045f4:	2313      	movs	r3, #19
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d154      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045fe:	4ba6      	ldr	r3, [pc, #664]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004600:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004602:	23c0      	movs	r3, #192	@ 0xc0
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4013      	ands	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d019      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	429a      	cmp	r2, r3
 8004618:	d014      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800461a:	4b9f      	ldr	r3, [pc, #636]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	4aa0      	ldr	r2, [pc, #640]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004620:	4013      	ands	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004624:	4b9c      	ldr	r3, [pc, #624]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004626:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004628:	4b9b      	ldr	r3, [pc, #620]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800462a:	2180      	movs	r1, #128	@ 0x80
 800462c:	0249      	lsls	r1, r1, #9
 800462e:	430a      	orrs	r2, r1
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004632:	4b99      	ldr	r3, [pc, #612]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004634:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004636:	4b98      	ldr	r3, [pc, #608]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004638:	499a      	ldr	r1, [pc, #616]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800463a:	400a      	ands	r2, r1
 800463c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800463e:	4b96      	ldr	r3, [pc, #600]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2201      	movs	r2, #1
 8004648:	4013      	ands	r3, r2
 800464a:	d016      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fa02 	bl	8001a54 <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004654:	e00c      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fd f9fd 	bl	8001a54 <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	4a91      	ldr	r2, [pc, #580]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d904      	bls.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004666:	2313      	movs	r3, #19
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	2203      	movs	r2, #3
 800466c:	701a      	strb	r2, [r3, #0]
            break;
 800466e:	e004      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004670:	4b89      	ldr	r3, [pc, #548]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004674:	2202      	movs	r2, #2
 8004676:	4013      	ands	r3, r2
 8004678:	d0ed      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800467a:	2313      	movs	r3, #19
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004684:	4b84      	ldr	r3, [pc, #528]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	4a85      	ldr	r2, [pc, #532]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800468a:	4013      	ands	r3, r2
 800468c:	0019      	movs	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004692:	4b81      	ldr	r3, [pc, #516]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004694:	430a      	orrs	r2, r1
 8004696:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004698:	e00c      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800469a:	2312      	movs	r3, #18
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	2213      	movs	r2, #19
 80046a0:	18ba      	adds	r2, r7, r2
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e005      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	2312      	movs	r3, #18
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	2213      	movs	r2, #19
 80046ae:	18ba      	adds	r2, r7, r2
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b4:	2311      	movs	r3, #17
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046be:	4b76      	ldr	r3, [pc, #472]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046c2:	4b75      	ldr	r3, [pc, #468]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c4:	4979      	ldr	r1, [pc, #484]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80046c6:	400a      	ands	r2, r1
 80046c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	4013      	ands	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046d4:	4b70      	ldr	r3, [pc, #448]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	2203      	movs	r2, #3
 80046da:	4393      	bics	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046e4:	430a      	orrs	r2, r1
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2202      	movs	r2, #2
 80046ee:	4013      	ands	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f2:	4b69      	ldr	r3, [pc, #420]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	220c      	movs	r2, #12
 80046f8:	4393      	bics	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	4b65      	ldr	r3, [pc, #404]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004702:	430a      	orrs	r2, r1
 8004704:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2210      	movs	r2, #16
 800470c:	4013      	ands	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004710:	4b61      	ldr	r3, [pc, #388]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004714:	4a66      	ldr	r2, [pc, #408]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004716:	4013      	ands	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	4b5e      	ldr	r3, [pc, #376]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004720:	430a      	orrs	r2, r1
 8004722:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004730:	4b59      	ldr	r3, [pc, #356]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	4a5f      	ldr	r2, [pc, #380]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	4b56      	ldr	r3, [pc, #344]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004740:	430a      	orrs	r2, r1
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4013      	ands	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004750:	4b51      	ldr	r3, [pc, #324]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	4a58      	ldr	r2, [pc, #352]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004760:	430a      	orrs	r2, r1
 8004762:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2220      	movs	r2, #32
 800476a:	4013      	ands	r3, r2
 800476c:	d009      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476e:	4b4a      	ldr	r3, [pc, #296]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004772:	4a52      	ldr	r2, [pc, #328]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004774:	4013      	ands	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	4b46      	ldr	r3, [pc, #280]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800477e:	430a      	orrs	r2, r1
 8004780:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	2380      	movs	r3, #128	@ 0x80
 8004788:	01db      	lsls	r3, r3, #7
 800478a:	4013      	ands	r3, r2
 800478c:	d015      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800478e:	4b42      	ldr	r3, [pc, #264]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	0899      	lsrs	r1, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	4b3f      	ldr	r3, [pc, #252]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800479c:	430a      	orrs	r2, r1
 800479e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	05db      	lsls	r3, r3, #23
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d106      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	4b39      	ldr	r3, [pc, #228]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047b2:	2180      	movs	r1, #128	@ 0x80
 80047b4:	0249      	lsls	r1, r1, #9
 80047b6:	430a      	orrs	r2, r1
 80047b8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	@ 0x80
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	4013      	ands	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047c6:	4b34      	ldr	r3, [pc, #208]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ca:	2240      	movs	r2, #64	@ 0x40
 80047cc:	4393      	bics	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047d4:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d6:	430a      	orrs	r2, r1
 80047d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	039b      	lsls	r3, r3, #14
 80047e2:	4013      	ands	r3, r2
 80047e4:	d016      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	4a35      	ldr	r2, [pc, #212]	@ (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f4:	4b28      	ldr	r3, [pc, #160]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047fe:	2380      	movs	r3, #128	@ 0x80
 8004800:	03db      	lsls	r3, r3, #15
 8004802:	429a      	cmp	r2, r3
 8004804:	d106      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004806:	4b24      	ldr	r3, [pc, #144]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800480c:	2180      	movs	r1, #128	@ 0x80
 800480e:	0449      	lsls	r1, r1, #17
 8004810:	430a      	orrs	r2, r1
 8004812:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	2380      	movs	r3, #128	@ 0x80
 800481a:	03db      	lsls	r3, r3, #15
 800481c:	4013      	ands	r3, r2
 800481e:	d016      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004820:	4b1d      	ldr	r3, [pc, #116]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004824:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004826:	4013      	ands	r3, r2
 8004828:	0019      	movs	r1, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800482e:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004830:	430a      	orrs	r2, r1
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	045b      	lsls	r3, r3, #17
 800483c:	429a      	cmp	r2, r3
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004840:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4b14      	ldr	r3, [pc, #80]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004846:	2180      	movs	r1, #128	@ 0x80
 8004848:	0449      	lsls	r1, r1, #17
 800484a:	430a      	orrs	r2, r1
 800484c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	2380      	movs	r3, #128	@ 0x80
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4013      	ands	r3, r2
 8004858:	d016      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800485a:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004860:	4013      	ands	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800486a:	430a      	orrs	r2, r1
 800486c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	2380      	movs	r3, #128	@ 0x80
 8004874:	01db      	lsls	r3, r3, #7
 8004876:	429a      	cmp	r2, r3
 8004878:	d106      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800487a:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004880:	2180      	movs	r1, #128	@ 0x80
 8004882:	0249      	lsls	r1, r1, #9
 8004884:	430a      	orrs	r2, r1
 8004886:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004888:	2312      	movs	r3, #18
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b006      	add	sp, #24
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	fffffcff 	.word	0xfffffcff
 80048a4:	fffeffff 	.word	0xfffeffff
 80048a8:	00001388 	.word	0x00001388
 80048ac:	efffffff 	.word	0xefffffff
 80048b0:	fffff3ff 	.word	0xfffff3ff
 80048b4:	fff3ffff 	.word	0xfff3ffff
 80048b8:	ffcfffff 	.word	0xffcfffff
 80048bc:	ffffcfff 	.word	0xffffcfff
 80048c0:	ffbfffff 	.word	0xffbfffff
 80048c4:	feffffff 	.word	0xfeffffff
 80048c8:	ffff3fff 	.word	0xffff3fff

080048cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e04a      	b.n	8004974 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223d      	movs	r2, #61	@ 0x3d
 80048e2:	5c9b      	ldrb	r3, [r3, r2]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	223c      	movs	r2, #60	@ 0x3c
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fc fde3 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	223d      	movs	r2, #61	@ 0x3d
 80048fe:	2102      	movs	r1, #2
 8004900:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	0019      	movs	r1, r3
 800490c:	0010      	movs	r0, r2
 800490e:	f000 fddb 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2248      	movs	r2, #72	@ 0x48
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	223e      	movs	r2, #62	@ 0x3e
 800491e:	2101      	movs	r1, #1
 8004920:	5499      	strb	r1, [r3, r2]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	223f      	movs	r2, #63	@ 0x3f
 8004926:	2101      	movs	r1, #1
 8004928:	5499      	strb	r1, [r3, r2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2240      	movs	r2, #64	@ 0x40
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2241      	movs	r2, #65	@ 0x41
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2242      	movs	r2, #66	@ 0x42
 800493e:	2101      	movs	r1, #1
 8004940:	5499      	strb	r1, [r3, r2]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2243      	movs	r2, #67	@ 0x43
 8004946:	2101      	movs	r1, #1
 8004948:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2244      	movs	r2, #68	@ 0x44
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2245      	movs	r2, #69	@ 0x45
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2246      	movs	r2, #70	@ 0x46
 800495e:	2101      	movs	r1, #1
 8004960:	5499      	strb	r1, [r3, r2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2247      	movs	r2, #71	@ 0x47
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	223d      	movs	r2, #61	@ 0x3d
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e04a      	b.n	8004a24 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	223d      	movs	r2, #61	@ 0x3d
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	223c      	movs	r2, #60	@ 0x3c
 800499e:	2100      	movs	r1, #0
 80049a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7fc fd03 	bl	80013b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	223d      	movs	r2, #61	@ 0x3d
 80049ae:	2102      	movs	r1, #2
 80049b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	0019      	movs	r1, r3
 80049bc:	0010      	movs	r0, r2
 80049be:	f000 fd83 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2248      	movs	r2, #72	@ 0x48
 80049c6:	2101      	movs	r1, #1
 80049c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	223e      	movs	r2, #62	@ 0x3e
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	223f      	movs	r2, #63	@ 0x3f
 80049d6:	2101      	movs	r1, #1
 80049d8:	5499      	strb	r1, [r3, r2]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2240      	movs	r2, #64	@ 0x40
 80049de:	2101      	movs	r1, #1
 80049e0:	5499      	strb	r1, [r3, r2]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2241      	movs	r2, #65	@ 0x41
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2242      	movs	r2, #66	@ 0x42
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2243      	movs	r2, #67	@ 0x43
 80049f6:	2101      	movs	r1, #1
 80049f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2244      	movs	r2, #68	@ 0x44
 80049fe:	2101      	movs	r1, #1
 8004a00:	5499      	strb	r1, [r3, r2]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2245      	movs	r2, #69	@ 0x45
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2246      	movs	r2, #70	@ 0x46
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2247      	movs	r2, #71	@ 0x47
 8004a16:	2101      	movs	r1, #1
 8004a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	223d      	movs	r2, #61	@ 0x3d
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x22>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	223e      	movs	r2, #62	@ 0x3e
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	4193      	sbcs	r3, r2
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e037      	b.n	8004abe <HAL_TIM_PWM_Start+0x92>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d108      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x3a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	223f      	movs	r2, #63	@ 0x3f
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	1e5a      	subs	r2, r3, #1
 8004a60:	4193      	sbcs	r3, r2
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e02b      	b.n	8004abe <HAL_TIM_PWM_Start+0x92>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d108      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x52>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2240      	movs	r2, #64	@ 0x40
 8004a70:	5c9b      	ldrb	r3, [r3, r2]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	1e5a      	subs	r2, r3, #1
 8004a78:	4193      	sbcs	r3, r2
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e01f      	b.n	8004abe <HAL_TIM_PWM_Start+0x92>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d108      	bne.n	8004a96 <HAL_TIM_PWM_Start+0x6a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2241      	movs	r2, #65	@ 0x41
 8004a88:	5c9b      	ldrb	r3, [r3, r2]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	1e5a      	subs	r2, r3, #1
 8004a90:	4193      	sbcs	r3, r2
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	e013      	b.n	8004abe <HAL_TIM_PWM_Start+0x92>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d108      	bne.n	8004aae <HAL_TIM_PWM_Start+0x82>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2242      	movs	r2, #66	@ 0x42
 8004aa0:	5c9b      	ldrb	r3, [r3, r2]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	1e5a      	subs	r2, r3, #1
 8004aa8:	4193      	sbcs	r3, r2
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e007      	b.n	8004abe <HAL_TIM_PWM_Start+0x92>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2243      	movs	r2, #67	@ 0x43
 8004ab2:	5c9b      	ldrb	r3, [r3, r2]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	4193      	sbcs	r3, r2
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e08b      	b.n	8004bde <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0xaa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	223e      	movs	r2, #62	@ 0x3e
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	5499      	strb	r1, [r3, r2]
 8004ad4:	e023      	b.n	8004b1e <HAL_TIM_PWM_Start+0xf2>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0xba>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223f      	movs	r2, #63	@ 0x3f
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	5499      	strb	r1, [r3, r2]
 8004ae4:	e01b      	b.n	8004b1e <HAL_TIM_PWM_Start+0xf2>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0xca>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2240      	movs	r2, #64	@ 0x40
 8004af0:	2102      	movs	r1, #2
 8004af2:	5499      	strb	r1, [r3, r2]
 8004af4:	e013      	b.n	8004b1e <HAL_TIM_PWM_Start+0xf2>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0xda>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2241      	movs	r2, #65	@ 0x41
 8004b00:	2102      	movs	r1, #2
 8004b02:	5499      	strb	r1, [r3, r2]
 8004b04:	e00b      	b.n	8004b1e <HAL_TIM_PWM_Start+0xf2>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0xea>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2242      	movs	r2, #66	@ 0x42
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]
 8004b14:	e003      	b.n	8004b1e <HAL_TIM_PWM_Start+0xf2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2243      	movs	r2, #67	@ 0x43
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	0018      	movs	r0, r3
 8004b28:	f001 f944 	bl	8005db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2d      	ldr	r2, [pc, #180]	@ (8004be8 <HAL_TIM_PWM_Start+0x1bc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIM_PWM_Start+0x128>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bec <HAL_TIM_PWM_Start+0x1c0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_TIM_PWM_Start+0x128>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <HAL_TIM_PWM_Start+0x1c4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIM_PWM_Start+0x128>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a29      	ldr	r2, [pc, #164]	@ (8004bf4 <HAL_TIM_PWM_Start+0x1c8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_TIM_PWM_Start+0x12c>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_TIM_PWM_Start+0x12e>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2180      	movs	r1, #128	@ 0x80
 8004b6a:	0209      	lsls	r1, r1, #8
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	@ (8004be8 <HAL_TIM_PWM_Start+0x1bc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00f      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x16e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	@ 0x80
 8004b80:	05db      	lsls	r3, r3, #23
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d009      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x16e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <HAL_TIM_PWM_Start+0x1cc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIM_PWM_Start+0x16e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a15      	ldr	r2, [pc, #84]	@ (8004bec <HAL_TIM_PWM_Start+0x1c0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d116      	bne.n	8004bc8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <HAL_TIM_PWM_Start+0x1d0>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b06      	cmp	r3, #6
 8004baa:	d016      	beq.n	8004bda <HAL_TIM_PWM_Start+0x1ae>
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	025b      	lsls	r3, r3, #9
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d011      	beq.n	8004bda <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	e008      	b.n	8004bda <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e000      	b.n	8004bdc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b004      	add	sp, #16
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	00010007 	.word	0x00010007

08004c00 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	230f      	movs	r3, #15
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <HAL_TIM_PWM_Start_IT+0x2a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223e      	movs	r2, #62	@ 0x3e
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	4193      	sbcs	r3, r2
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e037      	b.n	8004c9a <HAL_TIM_PWM_Start_IT+0x9a>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d108      	bne.n	8004c42 <HAL_TIM_PWM_Start_IT+0x42>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	223f      	movs	r2, #63	@ 0x3f
 8004c34:	5c9b      	ldrb	r3, [r3, r2]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	4193      	sbcs	r3, r2
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e02b      	b.n	8004c9a <HAL_TIM_PWM_Start_IT+0x9a>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d108      	bne.n	8004c5a <HAL_TIM_PWM_Start_IT+0x5a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2240      	movs	r2, #64	@ 0x40
 8004c4c:	5c9b      	ldrb	r3, [r3, r2]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	4193      	sbcs	r3, r2
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e01f      	b.n	8004c9a <HAL_TIM_PWM_Start_IT+0x9a>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d108      	bne.n	8004c72 <HAL_TIM_PWM_Start_IT+0x72>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2241      	movs	r2, #65	@ 0x41
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	1e5a      	subs	r2, r3, #1
 8004c6c:	4193      	sbcs	r3, r2
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e013      	b.n	8004c9a <HAL_TIM_PWM_Start_IT+0x9a>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d108      	bne.n	8004c8a <HAL_TIM_PWM_Start_IT+0x8a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2242      	movs	r2, #66	@ 0x42
 8004c7c:	5c9b      	ldrb	r3, [r3, r2]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	1e5a      	subs	r2, r3, #1
 8004c84:	4193      	sbcs	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e007      	b.n	8004c9a <HAL_TIM_PWM_Start_IT+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2243      	movs	r2, #67	@ 0x43
 8004c8e:	5c9b      	ldrb	r3, [r3, r2]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	1e5a      	subs	r2, r3, #1
 8004c96:	4193      	sbcs	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PWM_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0ce      	b.n	8004e40 <HAL_TIM_PWM_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_PWM_Start_IT+0xb2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	223e      	movs	r2, #62	@ 0x3e
 8004cac:	2102      	movs	r1, #2
 8004cae:	5499      	strb	r1, [r3, r2]
 8004cb0:	e023      	b.n	8004cfa <HAL_TIM_PWM_Start_IT+0xfa>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_PWM_Start_IT+0xc2>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	223f      	movs	r2, #63	@ 0x3f
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	5499      	strb	r1, [r3, r2]
 8004cc0:	e01b      	b.n	8004cfa <HAL_TIM_PWM_Start_IT+0xfa>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start_IT+0xd2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2240      	movs	r2, #64	@ 0x40
 8004ccc:	2102      	movs	r1, #2
 8004cce:	5499      	strb	r1, [r3, r2]
 8004cd0:	e013      	b.n	8004cfa <HAL_TIM_PWM_Start_IT+0xfa>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b0c      	cmp	r3, #12
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_PWM_Start_IT+0xe2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2241      	movs	r2, #65	@ 0x41
 8004cdc:	2102      	movs	r1, #2
 8004cde:	5499      	strb	r1, [r3, r2]
 8004ce0:	e00b      	b.n	8004cfa <HAL_TIM_PWM_Start_IT+0xfa>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_PWM_Start_IT+0xf2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2242      	movs	r2, #66	@ 0x42
 8004cec:	2102      	movs	r1, #2
 8004cee:	5499      	strb	r1, [r3, r2]
 8004cf0:	e003      	b.n	8004cfa <HAL_TIM_PWM_Start_IT+0xfa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2243      	movs	r2, #67	@ 0x43
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d02a      	beq.n	8004d56 <HAL_TIM_PWM_Start_IT+0x156>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d830      	bhi.n	8004d68 <HAL_TIM_PWM_Start_IT+0x168>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d01b      	beq.n	8004d44 <HAL_TIM_PWM_Start_IT+0x144>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d82a      	bhi.n	8004d68 <HAL_TIM_PWM_Start_IT+0x168>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_TIM_PWM_Start_IT+0x120>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIM_PWM_Start_IT+0x132>
 8004d1e:	e023      	b.n	8004d68 <HAL_TIM_PWM_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	60da      	str	r2, [r3, #12]
      break;
 8004d30:	e01f      	b.n	8004d72 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2104      	movs	r1, #4
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	60da      	str	r2, [r3, #12]
      break;
 8004d42:	e016      	b.n	8004d72 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2108      	movs	r1, #8
 8004d50:	430a      	orrs	r2, r1
 8004d52:	60da      	str	r2, [r3, #12]
      break;
 8004d54:	e00d      	b.n	8004d72 <HAL_TIM_PWM_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2110      	movs	r1, #16
 8004d62:	430a      	orrs	r2, r1
 8004d64:	60da      	str	r2, [r3, #12]
      break;
 8004d66:	e004      	b.n	8004d72 <HAL_TIM_PWM_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d68:	230f      	movs	r3, #15
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
      break;
 8004d70:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004d72:	230f      	movs	r3, #15
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d15e      	bne.n	8004e3a <HAL_TIM_PWM_Start_IT+0x23a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	2201      	movs	r2, #1
 8004d84:	0018      	movs	r0, r3
 8004d86:	f001 f815 	bl	8005db4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e48 <HAL_TIM_PWM_Start_IT+0x248>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIM_PWM_Start_IT+0x1b2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2c      	ldr	r2, [pc, #176]	@ (8004e4c <HAL_TIM_PWM_Start_IT+0x24c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_PWM_Start_IT+0x1b2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e50 <HAL_TIM_PWM_Start_IT+0x250>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_PWM_Start_IT+0x1b2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a29      	ldr	r2, [pc, #164]	@ (8004e54 <HAL_TIM_PWM_Start_IT+0x254>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_PWM_Start_IT+0x1b6>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_PWM_Start_IT+0x1b8>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_TIM_PWM_Start_IT+0x1ce>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	0209      	lsls	r1, r1, #8
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <HAL_TIM_PWM_Start_IT+0x248>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00f      	beq.n	8004df8 <HAL_TIM_PWM_Start_IT+0x1f8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d009      	beq.n	8004df8 <HAL_TIM_PWM_Start_IT+0x1f8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <HAL_TIM_PWM_Start_IT+0x258>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIM_PWM_Start_IT+0x1f8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <HAL_TIM_PWM_Start_IT+0x24c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d116      	bne.n	8004e26 <HAL_TIM_PWM_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_TIM_PWM_Start_IT+0x25c>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d016      	beq.n	8004e38 <HAL_TIM_PWM_Start_IT+0x238>
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	025b      	lsls	r3, r3, #9
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d011      	beq.n	8004e38 <HAL_TIM_PWM_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	e008      	b.n	8004e38 <HAL_TIM_PWM_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	430a      	orrs	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e000      	b.n	8004e3a <HAL_TIM_PWM_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e38:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004e3a:	230f      	movs	r3, #15
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	781b      	ldrb	r3, [r3, #0]
}
 8004e40:	0018      	movs	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b004      	add	sp, #16
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	00010007 	.word	0x00010007

08004e60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e04a      	b.n	8004f08 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	223d      	movs	r2, #61	@ 0x3d
 8004e76:	5c9b      	ldrb	r3, [r3, r2]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	223c      	movs	r2, #60	@ 0x3c
 8004e82:	2100      	movs	r1, #0
 8004e84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 f841 	bl	8004f10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223d      	movs	r2, #61	@ 0x3d
 8004e92:	2102      	movs	r1, #2
 8004e94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	0010      	movs	r0, r2
 8004ea2:	f000 fb11 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2248      	movs	r2, #72	@ 0x48
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	223e      	movs	r2, #62	@ 0x3e
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	223f      	movs	r2, #63	@ 0x3f
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2240      	movs	r2, #64	@ 0x40
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2241      	movs	r2, #65	@ 0x41
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2242      	movs	r2, #66	@ 0x42
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2243      	movs	r2, #67	@ 0x43
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2244      	movs	r2, #68	@ 0x44
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2245      	movs	r2, #69	@ 0x45
 8004eea:	2101      	movs	r1, #1
 8004eec:	5499      	strb	r1, [r3, r2]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2246      	movs	r2, #70	@ 0x46
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2247      	movs	r2, #71	@ 0x47
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223d      	movs	r2, #61	@ 0x3d
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d021      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2202      	movs	r2, #2
 8004f44:	4013      	ands	r3, r2
 8004f46:	d01d      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	4252      	negs	r2, r2
 8004f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	4013      	ands	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 fa96 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e007      	b.n	8004f7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 fa89 	bl	8005488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fa95 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2204      	movs	r2, #4
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2204      	movs	r2, #4
 8004f90:	4013      	ands	r3, r2
 8004f92:	d01e      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2205      	movs	r2, #5
 8004f9a:	4252      	negs	r2, r2
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	23c0      	movs	r3, #192	@ 0xc0
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fa6f 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 8004fba:	e007      	b.n	8004fcc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 fa62 	bl	8005488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f000 fa6e 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d021      	beq.n	800501e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d01d      	beq.n	800501e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2209      	movs	r2, #9
 8004fe8:	4252      	negs	r2, r2
 8004fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2204      	movs	r2, #4
 8004ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 fa49 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 8005006:	e007      	b.n	8005018 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0018      	movs	r0, r3
 800500c:	f000 fa3c 	bl	8005488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 fa48 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2210      	movs	r2, #16
 8005022:	4013      	ands	r3, r2
 8005024:	d022      	beq.n	800506c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2210      	movs	r2, #16
 800502a:	4013      	ands	r3, r2
 800502c:	d01e      	beq.n	800506c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2211      	movs	r2, #17
 8005034:	4252      	negs	r2, r2
 8005036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2208      	movs	r2, #8
 800503c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	23c0      	movs	r3, #192	@ 0xc0
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4013      	ands	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	0018      	movs	r0, r3
 8005050:	f000 fa22 	bl	8005498 <HAL_TIM_IC_CaptureCallback>
 8005054:	e007      	b.n	8005066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 fa15 	bl	8005488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 fa21 	bl	80054a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2201      	movs	r2, #1
 8005070:	4013      	ands	r3, r2
 8005072:	d00c      	beq.n	800508e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	4013      	ands	r3, r2
 800507a:	d008      	beq.n	800508e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2202      	movs	r2, #2
 8005082:	4252      	negs	r2, r2
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 f9f5 	bl	8005478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2280      	movs	r2, #128	@ 0x80
 8005092:	4013      	ands	r3, r2
 8005094:	d104      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	019b      	lsls	r3, r3, #6
 800509c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800509e:	d00b      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2280      	movs	r2, #128	@ 0x80
 80050a4:	4013      	ands	r3, r2
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <HAL_TIM_IRQHandler+0x208>)
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0018      	movs	r0, r3
 80050b4:	f001 f85f 	bl	8006176 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	d00b      	beq.n	80050da <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2280      	movs	r2, #128	@ 0x80
 80050c6:	4013      	ands	r3, r2
 80050c8:	d007      	beq.n	80050da <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a17      	ldr	r2, [pc, #92]	@ (800512c <HAL_TIM_IRQHandler+0x20c>)
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f001 f856 	bl	8006186 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2240      	movs	r2, #64	@ 0x40
 80050de:	4013      	ands	r3, r2
 80050e0:	d00c      	beq.n	80050fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2240      	movs	r2, #64	@ 0x40
 80050e6:	4013      	ands	r3, r2
 80050e8:	d008      	beq.n	80050fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2241      	movs	r2, #65	@ 0x41
 80050f0:	4252      	negs	r2, r2
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 f9de 	bl	80054b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2220      	movs	r2, #32
 8005100:	4013      	ands	r3, r2
 8005102:	d00c      	beq.n	800511e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	4013      	ands	r3, r2
 800510a:	d008      	beq.n	800511e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2221      	movs	r2, #33	@ 0x21
 8005112:	4252      	negs	r2, r2
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	0018      	movs	r0, r3
 800511a:	f001 f824 	bl	8006166 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	ffffdf7f 	.word	0xffffdf7f
 800512c:	fffffeff 	.word	0xfffffeff

08005130 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2317      	movs	r3, #23
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	223c      	movs	r2, #60	@ 0x3c
 8005148:	5c9b      	ldrb	r3, [r3, r2]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_TIM_IC_ConfigChannel+0x22>
 800514e:	2302      	movs	r3, #2
 8005150:	e08c      	b.n	800526c <HAL_TIM_IC_ConfigChannel+0x13c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	223c      	movs	r2, #60	@ 0x3c
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005170:	f000 fcfc 	bl	8005b6c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	210c      	movs	r1, #12
 8005180:	438a      	bics	r2, r1
 8005182:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6999      	ldr	r1, [r3, #24]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	619a      	str	r2, [r3, #24]
 8005196:	e062      	b.n	800525e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d11c      	bne.n	80051d8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80051ae:	f000 fd39 	bl	8005c24 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	492d      	ldr	r1, [pc, #180]	@ (8005274 <HAL_TIM_IC_ConfigChannel+0x144>)
 80051be:	400a      	ands	r2, r1
 80051c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6999      	ldr	r1, [r3, #24]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	021a      	lsls	r2, r3, #8
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	619a      	str	r2, [r3, #24]
 80051d6:	e042      	b.n	800525e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d11b      	bne.n	8005216 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80051ee:	f000 fd5b 	bl	8005ca8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	210c      	movs	r1, #12
 80051fe:	438a      	bics	r2, r1
 8005200:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69d9      	ldr	r1, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	61da      	str	r2, [r3, #28]
 8005214:	e023      	b.n	800525e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b0c      	cmp	r3, #12
 800521a:	d11c      	bne.n	8005256 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800522c:	f000 fd7c 	bl	8005d28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	490e      	ldr	r1, [pc, #56]	@ (8005274 <HAL_TIM_IC_ConfigChannel+0x144>)
 800523c:	400a      	ands	r2, r1
 800523e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69d9      	ldr	r1, [r3, #28]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	61da      	str	r2, [r3, #28]
 8005254:	e003      	b.n	800525e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005256:	2317      	movs	r3, #23
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	223c      	movs	r2, #60	@ 0x3c
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]

  return status;
 8005266:	2317      	movs	r3, #23
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	781b      	ldrb	r3, [r3, #0]
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b006      	add	sp, #24
 8005272:	bd80      	pop	{r7, pc}
 8005274:	fffff3ff 	.word	0xfffff3ff

08005278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2317      	movs	r3, #23
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	223c      	movs	r2, #60	@ 0x3c
 8005290:	5c9b      	ldrb	r3, [r3, r2]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005296:	2302      	movs	r3, #2
 8005298:	e0e5      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	223c      	movs	r2, #60	@ 0x3c
 800529e:	2101      	movs	r1, #1
 80052a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b14      	cmp	r3, #20
 80052a6:	d900      	bls.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80052a8:	e0d1      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	4b70      	ldr	r3, [pc, #448]	@ (8005470 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	0011      	movs	r1, r2
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 f990 	bl	80055e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2108      	movs	r1, #8
 80052d0:	430a      	orrs	r2, r1
 80052d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2104      	movs	r1, #4
 80052e0:	438a      	bics	r2, r1
 80052e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6999      	ldr	r1, [r3, #24]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	619a      	str	r2, [r3, #24]
      break;
 80052f6:	e0af      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	0011      	movs	r1, r2
 8005300:	0018      	movs	r0, r3
 8005302:	f000 f9f9 	bl	80056f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2180      	movs	r1, #128	@ 0x80
 8005312:	0109      	lsls	r1, r1, #4
 8005314:	430a      	orrs	r2, r1
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4954      	ldr	r1, [pc, #336]	@ (8005474 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005324:	400a      	ands	r2, r1
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	619a      	str	r2, [r3, #24]
      break;
 800533c:	e08c      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0011      	movs	r1, r2
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fa5a 	bl	8005800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2108      	movs	r1, #8
 8005358:	430a      	orrs	r2, r1
 800535a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2104      	movs	r1, #4
 8005368:	438a      	bics	r2, r1
 800536a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69d9      	ldr	r1, [r3, #28]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	61da      	str	r2, [r3, #28]
      break;
 800537e:	e06b      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	0011      	movs	r1, r2
 8005388:	0018      	movs	r0, r3
 800538a:	f000 fac1 	bl	8005910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2180      	movs	r1, #128	@ 0x80
 800539a:	0109      	lsls	r1, r1, #4
 800539c:	430a      	orrs	r2, r1
 800539e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4932      	ldr	r1, [pc, #200]	@ (8005474 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053ac:	400a      	ands	r2, r1
 80053ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69d9      	ldr	r1, [r3, #28]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	61da      	str	r2, [r3, #28]
      break;
 80053c4:	e048      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0011      	movs	r1, r2
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 fb08 	bl	80059e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2108      	movs	r1, #8
 80053e0:	430a      	orrs	r2, r1
 80053e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2104      	movs	r1, #4
 80053f0:	438a      	bics	r2, r1
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005406:	e027      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	0011      	movs	r1, r2
 8005410:	0018      	movs	r0, r3
 8005412:	f000 fb47 	bl	8005aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2180      	movs	r1, #128	@ 0x80
 8005422:	0109      	lsls	r1, r1, #4
 8005424:	430a      	orrs	r2, r1
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4910      	ldr	r1, [pc, #64]	@ (8005474 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005434:	400a      	ands	r2, r1
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	021a      	lsls	r2, r3, #8
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800544c:	e004      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800544e:	2317      	movs	r3, #23
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
      break;
 8005456:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	223c      	movs	r2, #60	@ 0x3c
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

  return status;
 8005460:	2317      	movs	r3, #23
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	781b      	ldrb	r3, [r3, #0]
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b006      	add	sp, #24
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	08006f2c 	.word	0x08006f2c
 8005474:	fffffbff 	.word	0xfffffbff

08005478 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005490:	46c0      	nop			@ (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	b002      	add	sp, #8
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a0:	46c0      	nop			@ (mov r8, r8)
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b0:	46c0      	nop			@ (mov r8, r8)
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b002      	add	sp, #8
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c0:	46c0      	nop			@ (mov r8, r8)
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3b      	ldr	r2, [pc, #236]	@ (80055c8 <TIM_Base_SetConfig+0x100>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d008      	beq.n	80054f2 <TIM_Base_SetConfig+0x2a>
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	05db      	lsls	r3, r3, #23
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d003      	beq.n	80054f2 <TIM_Base_SetConfig+0x2a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a37      	ldr	r2, [pc, #220]	@ (80055cc <TIM_Base_SetConfig+0x104>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2270      	movs	r2, #112	@ 0x70
 80054f6:	4393      	bics	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a30      	ldr	r2, [pc, #192]	@ (80055c8 <TIM_Base_SetConfig+0x100>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <TIM_Base_SetConfig+0x76>
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	05db      	lsls	r3, r3, #23
 8005512:	429a      	cmp	r2, r3
 8005514:	d013      	beq.n	800553e <TIM_Base_SetConfig+0x76>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2c      	ldr	r2, [pc, #176]	@ (80055cc <TIM_Base_SetConfig+0x104>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_Base_SetConfig+0x76>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <TIM_Base_SetConfig+0x108>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0x76>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <TIM_Base_SetConfig+0x10c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x76>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a29      	ldr	r2, [pc, #164]	@ (80055d8 <TIM_Base_SetConfig+0x110>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x76>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a28      	ldr	r2, [pc, #160]	@ (80055dc <TIM_Base_SetConfig+0x114>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a27      	ldr	r2, [pc, #156]	@ (80055e0 <TIM_Base_SetConfig+0x118>)
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2280      	movs	r2, #128	@ 0x80
 8005554:	4393      	bics	r3, r2
 8005556:	001a      	movs	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a13      	ldr	r2, [pc, #76]	@ (80055c8 <TIM_Base_SetConfig+0x100>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0xce>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a14      	ldr	r2, [pc, #80]	@ (80055d4 <TIM_Base_SetConfig+0x10c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0xce>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a13      	ldr	r2, [pc, #76]	@ (80055d8 <TIM_Base_SetConfig+0x110>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0xce>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a12      	ldr	r2, [pc, #72]	@ (80055dc <TIM_Base_SetConfig+0x114>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d103      	bne.n	800559e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2201      	movs	r2, #1
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d106      	bne.n	80055be <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2201      	movs	r2, #1
 80055b6:	4393      	bics	r3, r2
 80055b8:	001a      	movs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]
  }
}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b004      	add	sp, #16
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40002000 	.word	0x40002000
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800
 80055e0:	fffffcff 	.word	0xfffffcff

080055e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	2201      	movs	r2, #1
 80055fa:	4393      	bics	r3, r2
 80055fc:	001a      	movs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a32      	ldr	r2, [pc, #200]	@ (80056dc <TIM_OC1_SetConfig+0xf8>)
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2203      	movs	r2, #3
 800561a:	4393      	bics	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2202      	movs	r2, #2
 800562c:	4393      	bics	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a28      	ldr	r2, [pc, #160]	@ (80056e0 <TIM_OC1_SetConfig+0xfc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_OC1_SetConfig+0x76>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a27      	ldr	r2, [pc, #156]	@ (80056e4 <TIM_OC1_SetConfig+0x100>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_OC1_SetConfig+0x76>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a26      	ldr	r2, [pc, #152]	@ (80056e8 <TIM_OC1_SetConfig+0x104>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC1_SetConfig+0x76>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a25      	ldr	r2, [pc, #148]	@ (80056ec <TIM_OC1_SetConfig+0x108>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2208      	movs	r2, #8
 800565e:	4393      	bics	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2204      	movs	r2, #4
 8005670:	4393      	bics	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <TIM_OC1_SetConfig+0xfc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_OC1_SetConfig+0xb0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <TIM_OC1_SetConfig+0x100>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_OC1_SetConfig+0xb0>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <TIM_OC1_SetConfig+0x104>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_OC1_SetConfig+0xb0>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <TIM_OC1_SetConfig+0x108>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d111      	bne.n	80056b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <TIM_OC1_SetConfig+0x10c>)
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <TIM_OC1_SetConfig+0x110>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b006      	add	sp, #24
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	fffeff8f 	.word	0xfffeff8f
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800
 80056f0:	fffffeff 	.word	0xfffffeff
 80056f4:	fffffdff 	.word	0xfffffdff

080056f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	2210      	movs	r2, #16
 800570e:	4393      	bics	r3, r2
 8005710:	001a      	movs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a2e      	ldr	r2, [pc, #184]	@ (80057e0 <TIM_OC2_SetConfig+0xe8>)
 8005726:	4013      	ands	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a2d      	ldr	r2, [pc, #180]	@ (80057e4 <TIM_OC2_SetConfig+0xec>)
 800572e:	4013      	ands	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2220      	movs	r2, #32
 8005742:	4393      	bics	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a24      	ldr	r2, [pc, #144]	@ (80057e8 <TIM_OC2_SetConfig+0xf0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10d      	bne.n	8005776 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2280      	movs	r2, #128	@ 0x80
 800575e:	4393      	bics	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2240      	movs	r2, #64	@ 0x40
 8005772:	4393      	bics	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <TIM_OC2_SetConfig+0xf0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_OC2_SetConfig+0x9e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <TIM_OC2_SetConfig+0xf4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_OC2_SetConfig+0x9e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a19      	ldr	r2, [pc, #100]	@ (80057f0 <TIM_OC2_SetConfig+0xf8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_OC2_SetConfig+0x9e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a18      	ldr	r2, [pc, #96]	@ (80057f4 <TIM_OC2_SetConfig+0xfc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d113      	bne.n	80057be <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <TIM_OC2_SetConfig+0x100>)
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <TIM_OC2_SetConfig+0x104>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	46c0      	nop			@ (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	b006      	add	sp, #24
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	feff8fff 	.word	0xfeff8fff
 80057e4:	fffffcff 	.word	0xfffffcff
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800
 80057f8:	fffffbff 	.word	0xfffffbff
 80057fc:	fffff7ff 	.word	0xfffff7ff

08005800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4a33      	ldr	r2, [pc, #204]	@ (80058e4 <TIM_OC3_SetConfig+0xe4>)
 8005816:	401a      	ands	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <TIM_OC3_SetConfig+0xe8>)
 800582c:	4013      	ands	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2203      	movs	r2, #3
 8005834:	4393      	bics	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4a29      	ldr	r2, [pc, #164]	@ (80058ec <TIM_OC3_SetConfig+0xec>)
 8005846:	4013      	ands	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a25      	ldr	r2, [pc, #148]	@ (80058f0 <TIM_OC3_SetConfig+0xf0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d10d      	bne.n	800587a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4a24      	ldr	r2, [pc, #144]	@ (80058f4 <TIM_OC3_SetConfig+0xf4>)
 8005862:	4013      	ands	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	4a20      	ldr	r2, [pc, #128]	@ (80058f8 <TIM_OC3_SetConfig+0xf8>)
 8005876:	4013      	ands	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <TIM_OC3_SetConfig+0xf0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_OC3_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <TIM_OC3_SetConfig+0xfc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_OC3_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <TIM_OC3_SetConfig+0x100>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <TIM_OC3_SetConfig+0x104>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4a1a      	ldr	r2, [pc, #104]	@ (8005908 <TIM_OC3_SetConfig+0x108>)
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4a19      	ldr	r2, [pc, #100]	@ (800590c <TIM_OC3_SetConfig+0x10c>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	46c0      	nop			@ (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b006      	add	sp, #24
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	fffffeff 	.word	0xfffffeff
 80058e8:	fffeff8f 	.word	0xfffeff8f
 80058ec:	fffffdff 	.word	0xfffffdff
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	fffff7ff 	.word	0xfffff7ff
 80058f8:	fffffbff 	.word	0xfffffbff
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	ffffefff 	.word	0xffffefff
 800590c:	ffffdfff 	.word	0xffffdfff

08005910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	4a26      	ldr	r2, [pc, #152]	@ (80059c0 <TIM_OC4_SetConfig+0xb0>)
 8005926:	401a      	ands	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a22      	ldr	r2, [pc, #136]	@ (80059c4 <TIM_OC4_SetConfig+0xb4>)
 800593c:	4013      	ands	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a21      	ldr	r2, [pc, #132]	@ (80059c8 <TIM_OC4_SetConfig+0xb8>)
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <TIM_OC4_SetConfig+0xbc>)
 8005958:	4013      	ands	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <TIM_OC4_SetConfig+0xc0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00b      	beq.n	8005988 <TIM_OC4_SetConfig+0x78>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a18      	ldr	r2, [pc, #96]	@ (80059d4 <TIM_OC4_SetConfig+0xc4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d007      	beq.n	8005988 <TIM_OC4_SetConfig+0x78>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <TIM_OC4_SetConfig+0xc8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_OC4_SetConfig+0x78>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <TIM_OC4_SetConfig+0xcc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d109      	bne.n	800599c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <TIM_OC4_SetConfig+0xd0>)
 800598c:	4013      	ands	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b006      	add	sp, #24
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	ffffefff 	.word	0xffffefff
 80059c4:	feff8fff 	.word	0xfeff8fff
 80059c8:	fffffcff 	.word	0xfffffcff
 80059cc:	ffffdfff 	.word	0xffffdfff
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800
 80059e0:	ffffbfff 	.word	0xffffbfff

080059e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a23      	ldr	r2, [pc, #140]	@ (8005a88 <TIM_OC5_SetConfig+0xa4>)
 80059fa:	401a      	ands	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a8c <TIM_OC5_SetConfig+0xa8>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4a1b      	ldr	r2, [pc, #108]	@ (8005a90 <TIM_OC5_SetConfig+0xac>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	041b      	lsls	r3, r3, #16
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a17      	ldr	r2, [pc, #92]	@ (8005a94 <TIM_OC5_SetConfig+0xb0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_OC5_SetConfig+0x6e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a16      	ldr	r2, [pc, #88]	@ (8005a98 <TIM_OC5_SetConfig+0xb4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_OC5_SetConfig+0x6e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a15      	ldr	r2, [pc, #84]	@ (8005a9c <TIM_OC5_SetConfig+0xb8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC5_SetConfig+0x6e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	@ (8005aa0 <TIM_OC5_SetConfig+0xbc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d109      	bne.n	8005a66 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4a0c      	ldr	r2, [pc, #48]	@ (8005a88 <TIM_OC5_SetConfig+0xa4>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b006      	add	sp, #24
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	fffeffff 	.word	0xfffeffff
 8005a8c:	fffeff8f 	.word	0xfffeff8f
 8005a90:	fffdffff 	.word	0xfffdffff
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800

08005aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <TIM_OC6_SetConfig+0xa8>)
 8005aba:	401a      	ands	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a20      	ldr	r2, [pc, #128]	@ (8005b50 <TIM_OC6_SetConfig+0xac>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <TIM_OC6_SetConfig+0xb0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	051b      	lsls	r3, r3, #20
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a18      	ldr	r2, [pc, #96]	@ (8005b58 <TIM_OC6_SetConfig+0xb4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_OC6_SetConfig+0x70>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <TIM_OC6_SetConfig+0xb8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_OC6_SetConfig+0x70>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <TIM_OC6_SetConfig+0xbc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC6_SetConfig+0x70>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <TIM_OC6_SetConfig+0xc0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d109      	bne.n	8005b28 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4a14      	ldr	r2, [pc, #80]	@ (8005b68 <TIM_OC6_SetConfig+0xc4>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	029b      	lsls	r3, r3, #10
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b006      	add	sp, #24
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	ffefffff 	.word	0xffefffff
 8005b50:	feff8fff 	.word	0xfeff8fff
 8005b54:	ffdfffff 	.word	0xffdfffff
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800
 8005b68:	fffbffff 	.word	0xfffbffff

08005b6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	2201      	movs	r2, #1
 8005b86:	4393      	bics	r3, r2
 8005b88:	001a      	movs	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a20      	ldr	r2, [pc, #128]	@ (8005c18 <TIM_TI1_SetConfig+0xac>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00c      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x4a>
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	2380      	movs	r3, #128	@ 0x80
 8005ba0:	05db      	lsls	r3, r3, #23
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d007      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x4a>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c1c <TIM_TI1_SetConfig+0xb0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x4a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c20 <TIM_TI1_SetConfig+0xb4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d101      	bne.n	8005bba <TIM_TI1_SetConfig+0x4e>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <TIM_TI1_SetConfig+0x50>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e003      	b.n	8005bda <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	22f0      	movs	r2, #240	@ 0xf0
 8005bde:	4393      	bics	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	22ff      	movs	r2, #255	@ 0xff
 8005be8:	4013      	ands	r3, r2
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	220a      	movs	r2, #10
 8005bf4:	4393      	bics	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	220a      	movs	r2, #10
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b006      	add	sp, #24
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40014000 	.word	0x40014000

08005c24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	4393      	bics	r3, r2
 8005c40:	001a      	movs	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <TIM_TI2_SetConfig+0x7c>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4a10      	ldr	r2, [pc, #64]	@ (8005ca4 <TIM_TI2_SetConfig+0x80>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	031b      	lsls	r3, r3, #12
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	0c1b      	lsrs	r3, r3, #16
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	22a0      	movs	r2, #160	@ 0xa0
 8005c78:	4393      	bics	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	22a0      	movs	r2, #160	@ 0xa0
 8005c82:	4013      	ands	r3, r2
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	46c0      	nop			@ (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b006      	add	sp, #24
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	fffffcff 	.word	0xfffffcff
 8005ca4:	ffff0fff 	.word	0xffff0fff

08005ca8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <TIM_TI3_SetConfig+0x78>)
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	4393      	bics	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	22f0      	movs	r2, #240	@ 0xf0
 8005ce2:	4393      	bics	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	22ff      	movs	r2, #255	@ 0xff
 8005cec:	4013      	ands	r3, r2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d24 <TIM_TI3_SetConfig+0x7c>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	021a      	lsls	r2, r3, #8
 8005d00:	23a0      	movs	r3, #160	@ 0xa0
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4013      	ands	r3, r2
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	621a      	str	r2, [r3, #32]
}
 8005d18:	46c0      	nop			@ (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b006      	add	sp, #24
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	fffffeff 	.word	0xfffffeff
 8005d24:	fffff5ff 	.word	0xfffff5ff

08005d28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4a18      	ldr	r2, [pc, #96]	@ (8005da4 <TIM_TI4_SetConfig+0x7c>)
 8005d42:	401a      	ands	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4a15      	ldr	r2, [pc, #84]	@ (8005da8 <TIM_TI4_SetConfig+0x80>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4a12      	ldr	r2, [pc, #72]	@ (8005dac <TIM_TI4_SetConfig+0x84>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	031b      	lsls	r3, r3, #12
 8005d6c:	041b      	lsls	r3, r3, #16
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4a0d      	ldr	r2, [pc, #52]	@ (8005db0 <TIM_TI4_SetConfig+0x88>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	031a      	lsls	r2, r3, #12
 8005d82:	23a0      	movs	r3, #160	@ 0xa0
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	4013      	ands	r3, r2
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b006      	add	sp, #24
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	ffffefff 	.word	0xffffefff
 8005da8:	fffffcff 	.word	0xfffffcff
 8005dac:	ffff0fff 	.word	0xffff0fff
 8005db0:	ffff5fff 	.word	0xffff5fff

08005db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	221f      	movs	r2, #31
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	0013      	movs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	43d2      	mvns	r2, r2
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	211f      	movs	r1, #31
 8005de4:	400b      	ands	r3, r1
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	4099      	lsls	r1, r3
 8005dea:	000b      	movs	r3, r1
 8005dec:	431a      	orrs	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b006      	add	sp, #24
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	223c      	movs	r2, #60	@ 0x3c
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e055      	b.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	223c      	movs	r2, #60	@ 0x3c
 8005e18:	2101      	movs	r1, #1
 8005e1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	223d      	movs	r2, #61	@ 0x3d
 8005e20:	2102      	movs	r1, #2
 8005e22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a23      	ldr	r2, [pc, #140]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a22      	ldr	r2, [pc, #136]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2270      	movs	r2, #112	@ 0x70
 8005e54:	4393      	bics	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	2380      	movs	r3, #128	@ 0x80
 8005e7a:	05db      	lsls	r3, r3, #23
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d009      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a12      	ldr	r2, [pc, #72]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a11      	ldr	r2, [pc, #68]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d10c      	bne.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	4393      	bics	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	223d      	movs	r2, #61	@ 0x3d
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	223c      	movs	r2, #60	@ 0x3c
 8005eba:	2100      	movs	r1, #0
 8005ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	ff0fffff 	.word	0xff0fffff
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40014000 	.word	0x40014000

08005ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	223c      	movs	r2, #60	@ 0x3c
 8005eea:	5c9b      	ldrb	r3, [r3, r2]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e06f      	b.n	8005fd4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	223c      	movs	r2, #60	@ 0x3c
 8005ef8:	2101      	movs	r1, #1
 8005efa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	22ff      	movs	r2, #255	@ 0xff
 8005f00:	4393      	bics	r3, r2
 8005f02:	001a      	movs	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a33      	ldr	r2, [pc, #204]	@ (8005fdc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005f10:	401a      	ands	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a30      	ldr	r2, [pc, #192]	@ (8005fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005f1e:	401a      	ands	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a29      	ldr	r2, [pc, #164]	@ (8005fec <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005f48:	401a      	ands	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a26      	ldr	r2, [pc, #152]	@ (8005ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005f56:	401a      	ands	r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a24      	ldr	r2, [pc, #144]	@ (8005ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f64:	401a      	ands	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a21      	ldr	r2, [pc, #132]	@ (8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f74:	401a      	ands	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1e      	ldr	r2, [pc, #120]	@ (8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d11c      	bne.n	8005fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005f8c:	401a      	ands	r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f92:	051b      	lsls	r3, r3, #20
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005f9c:	401a      	ands	r2, r3
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005faa:	401a      	ands	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4a15      	ldr	r2, [pc, #84]	@ (800600c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fb8:	401a      	ands	r2, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223c      	movs	r2, #60	@ 0x3c
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b004      	add	sp, #16
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	fffffcff 	.word	0xfffffcff
 8005fe0:	fffffbff 	.word	0xfffffbff
 8005fe4:	fffff7ff 	.word	0xfffff7ff
 8005fe8:	ffffefff 	.word	0xffffefff
 8005fec:	ffffdfff 	.word	0xffffdfff
 8005ff0:	ffffbfff 	.word	0xffffbfff
 8005ff4:	fff0ffff 	.word	0xfff0ffff
 8005ff8:	efffffff 	.word	0xefffffff
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	ff0fffff 	.word	0xff0fffff
 8006004:	feffffff 	.word	0xfeffffff
 8006008:	fdffffff 	.word	0xfdffffff
 800600c:	dfffffff 	.word	0xdfffffff

08006010 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	@ 0x28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800601c:	2327      	movs	r3, #39	@ 0x27
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	223c      	movs	r2, #60	@ 0x3c
 8006028:	5c9b      	ldrb	r3, [r3, r2]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_TIMEx_ConfigBreakInput+0x22>
 800602e:	2302      	movs	r3, #2
 8006030:	e095      	b.n	800615e <HAL_TIMEx_ConfigBreakInput+0x14e>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	223c      	movs	r2, #60	@ 0x3c
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d019      	beq.n	8006076 <HAL_TIMEx_ConfigBreakInput+0x66>
 8006042:	d822      	bhi.n	800608a <HAL_TIMEx_ConfigBreakInput+0x7a>
 8006044:	2b01      	cmp	r3, #1
 8006046:	d002      	beq.n	800604e <HAL_TIMEx_ConfigBreakInput+0x3e>
 8006048:	2b02      	cmp	r3, #2
 800604a:	d00a      	beq.n	8006062 <HAL_TIMEx_ConfigBreakInput+0x52>
 800604c:	e01d      	b.n	800608a <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800604e:	2301      	movs	r3, #1
 8006050:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006056:	2380      	movs	r3, #128	@ 0x80
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800605c:	2309      	movs	r3, #9
 800605e:	617b      	str	r3, [r7, #20]
      break;
 8006060:	e01c      	b.n	800609c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006062:	2302      	movs	r3, #2
 8006064:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006066:	2301      	movs	r3, #1
 8006068:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006070:	230a      	movs	r3, #10
 8006072:	617b      	str	r3, [r7, #20]
      break;
 8006074:	e012      	b.n	800609c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006076:	2304      	movs	r3, #4
 8006078:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800607a:	2302      	movs	r3, #2
 800607c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800607e:	2380      	movs	r3, #128	@ 0x80
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006084:	230b      	movs	r3, #11
 8006086:	617b      	str	r3, [r7, #20]
      break;
 8006088:	e008      	b.n	800609c <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
      break;
 800609a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  switch (BreakInput)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d003      	beq.n	80060aa <HAL_TIMEx_ConfigBreakInput+0x9a>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d027      	beq.n	80060f8 <HAL_TIMEx_ConfigBreakInput+0xe8>
 80060a8:	e04d      	b.n	8006146 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b0:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	43da      	mvns	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4013      	ands	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	409a      	lsls	r2, r3
 80060c4:	0013      	movs	r3, r2
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	4013      	ands	r3, r2
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	43da      	mvns	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4013      	ands	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	409a      	lsls	r2, r3
 80060e2:	0013      	movs	r3, r2
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	4013      	ands	r3, r2
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80060f6:	e02b      	b.n	8006150 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fe:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	43da      	mvns	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4013      	ands	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	409a      	lsls	r2, r3
 8006112:	0013      	movs	r3, r2
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	4013      	ands	r3, r2
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	43da      	mvns	r2, r3
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4013      	ands	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	409a      	lsls	r2, r3
 8006130:	0013      	movs	r3, r2
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	4013      	ands	r3, r2
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006144:	e004      	b.n	8006150 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 8006146:	2327      	movs	r3, #39	@ 0x27
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
      break;
 800614e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	223c      	movs	r2, #60	@ 0x3c
 8006154:	2100      	movs	r1, #0
 8006156:	5499      	strb	r1, [r3, r2]

  return status;
 8006158:	2327      	movs	r3, #39	@ 0x27
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b00a      	add	sp, #40	@ 0x28
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	46bd      	mov	sp, r7
 8006172:	b002      	add	sp, #8
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	b002      	add	sp, #8
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800618e:	46c0      	nop			@ (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b002      	add	sp, #8
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e046      	b.n	8006238 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2288      	movs	r2, #136	@ 0x88
 80061ae:	589b      	ldr	r3, [r3, r2]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2284      	movs	r2, #132	@ 0x84
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0018      	movs	r0, r3
 80061c0:	f7fb fa72 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2288      	movs	r2, #136	@ 0x88
 80061c8:	2124      	movs	r1, #36	@ 0x24
 80061ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2101      	movs	r1, #1
 80061d8:	438a      	bics	r2, r1
 80061da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0018      	movs	r0, r3
 80061e8:	f000 faea 	bl	80067c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	0018      	movs	r0, r3
 80061f0:	f000 f828 	bl	8006244 <UART_SetConfig>
 80061f4:	0003      	movs	r3, r0
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e01c      	b.n	8006238 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	490d      	ldr	r1, [pc, #52]	@ (8006240 <HAL_UART_Init+0xa8>)
 800620a:	400a      	ands	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	212a      	movs	r1, #42	@ 0x2a
 800621a:	438a      	bics	r2, r1
 800621c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2101      	movs	r1, #1
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0018      	movs	r0, r3
 8006232:	f000 fb79 	bl	8006928 <UART_CheckIdleState>
 8006236:	0003      	movs	r3, r0
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}
 8006240:	ffffb7ff 	.word	0xffffb7ff

08006244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006244:	b5b0      	push	{r4, r5, r7, lr}
 8006246:	b090      	sub	sp, #64	@ 0x40
 8006248:	af00      	add	r7, sp, #0
 800624a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800624c:	231a      	movs	r3, #26
 800624e:	2220      	movs	r2, #32
 8006250:	189b      	adds	r3, r3, r2
 8006252:	19db      	adds	r3, r3, r7
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	431a      	orrs	r2, r3
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	431a      	orrs	r2, r3
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	4313      	orrs	r3, r2
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4aaf      	ldr	r2, [pc, #700]	@ (8006534 <UART_SetConfig+0x2f0>)
 8006278:	4013      	ands	r3, r2
 800627a:	0019      	movs	r1, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	430b      	orrs	r3, r1
 8006284:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4aaa      	ldr	r2, [pc, #680]	@ (8006538 <UART_SetConfig+0x2f4>)
 800628e:	4013      	ands	r3, r2
 8006290:	0018      	movs	r0, r3
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	68d9      	ldr	r1, [r3, #12]
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	0003      	movs	r3, r0
 800629c:	430b      	orrs	r3, r1
 800629e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4aa4      	ldr	r2, [pc, #656]	@ (800653c <UART_SetConfig+0x2f8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062b6:	4313      	orrs	r3, r2
 80062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a9f      	ldr	r2, [pc, #636]	@ (8006540 <UART_SetConfig+0x2fc>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	0019      	movs	r1, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	220f      	movs	r2, #15
 80062d8:	4393      	bics	r3, r2
 80062da:	0018      	movs	r0, r3
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	0003      	movs	r3, r0
 80062e6:	430b      	orrs	r3, r1
 80062e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a95      	ldr	r2, [pc, #596]	@ (8006544 <UART_SetConfig+0x300>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d131      	bne.n	8006358 <UART_SetConfig+0x114>
 80062f4:	4b94      	ldr	r3, [pc, #592]	@ (8006548 <UART_SetConfig+0x304>)
 80062f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f8:	2203      	movs	r2, #3
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d01d      	beq.n	800633c <UART_SetConfig+0xf8>
 8006300:	d823      	bhi.n	800634a <UART_SetConfig+0x106>
 8006302:	2b02      	cmp	r3, #2
 8006304:	d00c      	beq.n	8006320 <UART_SetConfig+0xdc>
 8006306:	d820      	bhi.n	800634a <UART_SetConfig+0x106>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <UART_SetConfig+0xce>
 800630c:	2b01      	cmp	r3, #1
 800630e:	d00e      	beq.n	800632e <UART_SetConfig+0xea>
 8006310:	e01b      	b.n	800634a <UART_SetConfig+0x106>
 8006312:	231b      	movs	r3, #27
 8006314:	2220      	movs	r2, #32
 8006316:	189b      	adds	r3, r3, r2
 8006318:	19db      	adds	r3, r3, r7
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e0b4      	b.n	800648a <UART_SetConfig+0x246>
 8006320:	231b      	movs	r3, #27
 8006322:	2220      	movs	r2, #32
 8006324:	189b      	adds	r3, r3, r2
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2202      	movs	r2, #2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e0ad      	b.n	800648a <UART_SetConfig+0x246>
 800632e:	231b      	movs	r3, #27
 8006330:	2220      	movs	r2, #32
 8006332:	189b      	adds	r3, r3, r2
 8006334:	19db      	adds	r3, r3, r7
 8006336:	2204      	movs	r2, #4
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e0a6      	b.n	800648a <UART_SetConfig+0x246>
 800633c:	231b      	movs	r3, #27
 800633e:	2220      	movs	r2, #32
 8006340:	189b      	adds	r3, r3, r2
 8006342:	19db      	adds	r3, r3, r7
 8006344:	2208      	movs	r2, #8
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e09f      	b.n	800648a <UART_SetConfig+0x246>
 800634a:	231b      	movs	r3, #27
 800634c:	2220      	movs	r2, #32
 800634e:	189b      	adds	r3, r3, r2
 8006350:	19db      	adds	r3, r3, r7
 8006352:	2210      	movs	r2, #16
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e098      	b.n	800648a <UART_SetConfig+0x246>
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a7b      	ldr	r2, [pc, #492]	@ (800654c <UART_SetConfig+0x308>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d131      	bne.n	80063c6 <UART_SetConfig+0x182>
 8006362:	4b79      	ldr	r3, [pc, #484]	@ (8006548 <UART_SetConfig+0x304>)
 8006364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006366:	220c      	movs	r2, #12
 8006368:	4013      	ands	r3, r2
 800636a:	2b0c      	cmp	r3, #12
 800636c:	d01d      	beq.n	80063aa <UART_SetConfig+0x166>
 800636e:	d823      	bhi.n	80063b8 <UART_SetConfig+0x174>
 8006370:	2b08      	cmp	r3, #8
 8006372:	d00c      	beq.n	800638e <UART_SetConfig+0x14a>
 8006374:	d820      	bhi.n	80063b8 <UART_SetConfig+0x174>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <UART_SetConfig+0x13c>
 800637a:	2b04      	cmp	r3, #4
 800637c:	d00e      	beq.n	800639c <UART_SetConfig+0x158>
 800637e:	e01b      	b.n	80063b8 <UART_SetConfig+0x174>
 8006380:	231b      	movs	r3, #27
 8006382:	2220      	movs	r2, #32
 8006384:	189b      	adds	r3, r3, r2
 8006386:	19db      	adds	r3, r3, r7
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e07d      	b.n	800648a <UART_SetConfig+0x246>
 800638e:	231b      	movs	r3, #27
 8006390:	2220      	movs	r2, #32
 8006392:	189b      	adds	r3, r3, r2
 8006394:	19db      	adds	r3, r3, r7
 8006396:	2202      	movs	r2, #2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e076      	b.n	800648a <UART_SetConfig+0x246>
 800639c:	231b      	movs	r3, #27
 800639e:	2220      	movs	r2, #32
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	19db      	adds	r3, r3, r7
 80063a4:	2204      	movs	r2, #4
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e06f      	b.n	800648a <UART_SetConfig+0x246>
 80063aa:	231b      	movs	r3, #27
 80063ac:	2220      	movs	r2, #32
 80063ae:	189b      	adds	r3, r3, r2
 80063b0:	19db      	adds	r3, r3, r7
 80063b2:	2208      	movs	r2, #8
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e068      	b.n	800648a <UART_SetConfig+0x246>
 80063b8:	231b      	movs	r3, #27
 80063ba:	2220      	movs	r2, #32
 80063bc:	189b      	adds	r3, r3, r2
 80063be:	19db      	adds	r3, r3, r7
 80063c0:	2210      	movs	r2, #16
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e061      	b.n	800648a <UART_SetConfig+0x246>
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a61      	ldr	r2, [pc, #388]	@ (8006550 <UART_SetConfig+0x30c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d106      	bne.n	80063de <UART_SetConfig+0x19a>
 80063d0:	231b      	movs	r3, #27
 80063d2:	2220      	movs	r2, #32
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	19db      	adds	r3, r3, r7
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e055      	b.n	800648a <UART_SetConfig+0x246>
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006554 <UART_SetConfig+0x310>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d106      	bne.n	80063f6 <UART_SetConfig+0x1b2>
 80063e8:	231b      	movs	r3, #27
 80063ea:	2220      	movs	r2, #32
 80063ec:	189b      	adds	r3, r3, r2
 80063ee:	19db      	adds	r3, r3, r7
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e049      	b.n	800648a <UART_SetConfig+0x246>
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a50      	ldr	r2, [pc, #320]	@ (800653c <UART_SetConfig+0x2f8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d13e      	bne.n	800647e <UART_SetConfig+0x23a>
 8006400:	4b51      	ldr	r3, [pc, #324]	@ (8006548 <UART_SetConfig+0x304>)
 8006402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006404:	23c0      	movs	r3, #192	@ 0xc0
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	4013      	ands	r3, r2
 800640a:	22c0      	movs	r2, #192	@ 0xc0
 800640c:	0112      	lsls	r2, r2, #4
 800640e:	4293      	cmp	r3, r2
 8006410:	d027      	beq.n	8006462 <UART_SetConfig+0x21e>
 8006412:	22c0      	movs	r2, #192	@ 0xc0
 8006414:	0112      	lsls	r2, r2, #4
 8006416:	4293      	cmp	r3, r2
 8006418:	d82a      	bhi.n	8006470 <UART_SetConfig+0x22c>
 800641a:	2280      	movs	r2, #128	@ 0x80
 800641c:	0112      	lsls	r2, r2, #4
 800641e:	4293      	cmp	r3, r2
 8006420:	d011      	beq.n	8006446 <UART_SetConfig+0x202>
 8006422:	2280      	movs	r2, #128	@ 0x80
 8006424:	0112      	lsls	r2, r2, #4
 8006426:	4293      	cmp	r3, r2
 8006428:	d822      	bhi.n	8006470 <UART_SetConfig+0x22c>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <UART_SetConfig+0x1f4>
 800642e:	2280      	movs	r2, #128	@ 0x80
 8006430:	00d2      	lsls	r2, r2, #3
 8006432:	4293      	cmp	r3, r2
 8006434:	d00e      	beq.n	8006454 <UART_SetConfig+0x210>
 8006436:	e01b      	b.n	8006470 <UART_SetConfig+0x22c>
 8006438:	231b      	movs	r3, #27
 800643a:	2220      	movs	r2, #32
 800643c:	189b      	adds	r3, r3, r2
 800643e:	19db      	adds	r3, r3, r7
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e021      	b.n	800648a <UART_SetConfig+0x246>
 8006446:	231b      	movs	r3, #27
 8006448:	2220      	movs	r2, #32
 800644a:	189b      	adds	r3, r3, r2
 800644c:	19db      	adds	r3, r3, r7
 800644e:	2202      	movs	r2, #2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e01a      	b.n	800648a <UART_SetConfig+0x246>
 8006454:	231b      	movs	r3, #27
 8006456:	2220      	movs	r2, #32
 8006458:	189b      	adds	r3, r3, r2
 800645a:	19db      	adds	r3, r3, r7
 800645c:	2204      	movs	r2, #4
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e013      	b.n	800648a <UART_SetConfig+0x246>
 8006462:	231b      	movs	r3, #27
 8006464:	2220      	movs	r2, #32
 8006466:	189b      	adds	r3, r3, r2
 8006468:	19db      	adds	r3, r3, r7
 800646a:	2208      	movs	r2, #8
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e00c      	b.n	800648a <UART_SetConfig+0x246>
 8006470:	231b      	movs	r3, #27
 8006472:	2220      	movs	r2, #32
 8006474:	189b      	adds	r3, r3, r2
 8006476:	19db      	adds	r3, r3, r7
 8006478:	2210      	movs	r2, #16
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	e005      	b.n	800648a <UART_SetConfig+0x246>
 800647e:	231b      	movs	r3, #27
 8006480:	2220      	movs	r2, #32
 8006482:	189b      	adds	r3, r3, r2
 8006484:	19db      	adds	r3, r3, r7
 8006486:	2210      	movs	r2, #16
 8006488:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2b      	ldr	r2, [pc, #172]	@ (800653c <UART_SetConfig+0x2f8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d000      	beq.n	8006496 <UART_SetConfig+0x252>
 8006494:	e0a9      	b.n	80065ea <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006496:	231b      	movs	r3, #27
 8006498:	2220      	movs	r2, #32
 800649a:	189b      	adds	r3, r3, r2
 800649c:	19db      	adds	r3, r3, r7
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d015      	beq.n	80064d0 <UART_SetConfig+0x28c>
 80064a4:	dc18      	bgt.n	80064d8 <UART_SetConfig+0x294>
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d00d      	beq.n	80064c6 <UART_SetConfig+0x282>
 80064aa:	dc15      	bgt.n	80064d8 <UART_SetConfig+0x294>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <UART_SetConfig+0x272>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d005      	beq.n	80064c0 <UART_SetConfig+0x27c>
 80064b4:	e010      	b.n	80064d8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b6:	f7fe f83b 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80064ba:	0003      	movs	r3, r0
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064be:	e014      	b.n	80064ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c0:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <UART_SetConfig+0x314>)
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064c4:	e011      	b.n	80064ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fd ffa7 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80064ca:	0003      	movs	r3, r0
 80064cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064ce:	e00c      	b.n	80064ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064d6:	e008      	b.n	80064ea <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80064dc:	231a      	movs	r3, #26
 80064de:	2220      	movs	r2, #32
 80064e0:	189b      	adds	r3, r3, r2
 80064e2:	19db      	adds	r3, r3, r7
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
        break;
 80064e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d100      	bne.n	80064f2 <UART_SetConfig+0x2ae>
 80064f0:	e14b      	b.n	800678a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064f6:	4b19      	ldr	r3, [pc, #100]	@ (800655c <UART_SetConfig+0x318>)
 80064f8:	0052      	lsls	r2, r2, #1
 80064fa:	5ad3      	ldrh	r3, [r2, r3]
 80064fc:	0019      	movs	r1, r3
 80064fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006500:	f7f9 fe00 	bl	8000104 <__udivsi3>
 8006504:	0003      	movs	r3, r0
 8006506:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	0013      	movs	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	189b      	adds	r3, r3, r2
 8006512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006514:	429a      	cmp	r2, r3
 8006516:	d305      	bcc.n	8006524 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800651e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006520:	429a      	cmp	r2, r3
 8006522:	d91d      	bls.n	8006560 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006524:	231a      	movs	r3, #26
 8006526:	2220      	movs	r2, #32
 8006528:	189b      	adds	r3, r3, r2
 800652a:	19db      	adds	r3, r3, r7
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	e12b      	b.n	800678a <UART_SetConfig+0x546>
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	cfff69f3 	.word	0xcfff69f3
 8006538:	ffffcfff 	.word	0xffffcfff
 800653c:	40008000 	.word	0x40008000
 8006540:	11fff4ff 	.word	0x11fff4ff
 8006544:	40013800 	.word	0x40013800
 8006548:	40021000 	.word	0x40021000
 800654c:	40004400 	.word	0x40004400
 8006550:	40004800 	.word	0x40004800
 8006554:	40004c00 	.word	0x40004c00
 8006558:	00f42400 	.word	0x00f42400
 800655c:	08006f80 	.word	0x08006f80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800656c:	4b92      	ldr	r3, [pc, #584]	@ (80067b8 <UART_SetConfig+0x574>)
 800656e:	0052      	lsls	r2, r2, #1
 8006570:	5ad3      	ldrh	r3, [r2, r3]
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	69b8      	ldr	r0, [r7, #24]
 800657e:	69f9      	ldr	r1, [r7, #28]
 8006580:	f7f9 ff36 	bl	80003f0 <__aeabi_uldivmod>
 8006584:	0002      	movs	r2, r0
 8006586:	000b      	movs	r3, r1
 8006588:	0e11      	lsrs	r1, r2, #24
 800658a:	021d      	lsls	r5, r3, #8
 800658c:	430d      	orrs	r5, r1
 800658e:	0214      	lsls	r4, r2, #8
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68b8      	ldr	r0, [r7, #8]
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	1900      	adds	r0, r0, r4
 80065a2:	4169      	adcs	r1, r5
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f7f9 ff1d 	bl	80003f0 <__aeabi_uldivmod>
 80065b6:	0002      	movs	r2, r0
 80065b8:	000b      	movs	r3, r1
 80065ba:	0013      	movs	r3, r2
 80065bc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c0:	23c0      	movs	r3, #192	@ 0xc0
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d309      	bcc.n	80065dc <UART_SetConfig+0x398>
 80065c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ca:	2380      	movs	r3, #128	@ 0x80
 80065cc:	035b      	lsls	r3, r3, #13
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d204      	bcs.n	80065dc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e0d6      	b.n	800678a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80065dc:	231a      	movs	r3, #26
 80065de:	2220      	movs	r2, #32
 80065e0:	189b      	adds	r3, r3, r2
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e0cf      	b.n	800678a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d000      	beq.n	80065f8 <UART_SetConfig+0x3b4>
 80065f6:	e070      	b.n	80066da <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80065f8:	231b      	movs	r3, #27
 80065fa:	2220      	movs	r2, #32
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	19db      	adds	r3, r3, r7
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d015      	beq.n	8006632 <UART_SetConfig+0x3ee>
 8006606:	dc18      	bgt.n	800663a <UART_SetConfig+0x3f6>
 8006608:	2b04      	cmp	r3, #4
 800660a:	d00d      	beq.n	8006628 <UART_SetConfig+0x3e4>
 800660c:	dc15      	bgt.n	800663a <UART_SetConfig+0x3f6>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <UART_SetConfig+0x3d4>
 8006612:	2b02      	cmp	r3, #2
 8006614:	d005      	beq.n	8006622 <UART_SetConfig+0x3de>
 8006616:	e010      	b.n	800663a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006618:	f7fd ff8a 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 800661c:	0003      	movs	r3, r0
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006620:	e014      	b.n	800664c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006622:	4b66      	ldr	r3, [pc, #408]	@ (80067bc <UART_SetConfig+0x578>)
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006626:	e011      	b.n	800664c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006628:	f7fd fef6 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 800662c:	0003      	movs	r3, r0
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006630:	e00c      	b.n	800664c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006632:	2380      	movs	r3, #128	@ 0x80
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006638:	e008      	b.n	800664c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800663e:	231a      	movs	r3, #26
 8006640:	2220      	movs	r2, #32
 8006642:	189b      	adds	r3, r3, r2
 8006644:	19db      	adds	r3, r3, r7
 8006646:	2201      	movs	r2, #1
 8006648:	701a      	strb	r2, [r3, #0]
        break;
 800664a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800664c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664e:	2b00      	cmp	r3, #0
 8006650:	d100      	bne.n	8006654 <UART_SetConfig+0x410>
 8006652:	e09a      	b.n	800678a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006658:	4b57      	ldr	r3, [pc, #348]	@ (80067b8 <UART_SetConfig+0x574>)
 800665a:	0052      	lsls	r2, r2, #1
 800665c:	5ad3      	ldrh	r3, [r2, r3]
 800665e:	0019      	movs	r1, r3
 8006660:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006662:	f7f9 fd4f 	bl	8000104 <__udivsi3>
 8006666:	0003      	movs	r3, r0
 8006668:	005a      	lsls	r2, r3, #1
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	18d2      	adds	r2, r2, r3
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	0019      	movs	r1, r3
 8006678:	0010      	movs	r0, r2
 800667a:	f7f9 fd43 	bl	8000104 <__udivsi3>
 800667e:	0003      	movs	r3, r0
 8006680:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	2b0f      	cmp	r3, #15
 8006686:	d921      	bls.n	80066cc <UART_SetConfig+0x488>
 8006688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668a:	2380      	movs	r3, #128	@ 0x80
 800668c:	025b      	lsls	r3, r3, #9
 800668e:	429a      	cmp	r2, r3
 8006690:	d21c      	bcs.n	80066cc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	b29a      	uxth	r2, r3
 8006696:	200e      	movs	r0, #14
 8006698:	2420      	movs	r4, #32
 800669a:	1903      	adds	r3, r0, r4
 800669c:	19db      	adds	r3, r3, r7
 800669e:	210f      	movs	r1, #15
 80066a0:	438a      	bics	r2, r1
 80066a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2207      	movs	r2, #7
 80066ac:	4013      	ands	r3, r2
 80066ae:	b299      	uxth	r1, r3
 80066b0:	1903      	adds	r3, r0, r4
 80066b2:	19db      	adds	r3, r3, r7
 80066b4:	1902      	adds	r2, r0, r4
 80066b6:	19d2      	adds	r2, r2, r7
 80066b8:	8812      	ldrh	r2, [r2, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	1902      	adds	r2, r0, r4
 80066c4:	19d2      	adds	r2, r2, r7
 80066c6:	8812      	ldrh	r2, [r2, #0]
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	e05e      	b.n	800678a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80066cc:	231a      	movs	r3, #26
 80066ce:	2220      	movs	r2, #32
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	19db      	adds	r3, r3, r7
 80066d4:	2201      	movs	r2, #1
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e057      	b.n	800678a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066da:	231b      	movs	r3, #27
 80066dc:	2220      	movs	r2, #32
 80066de:	189b      	adds	r3, r3, r2
 80066e0:	19db      	adds	r3, r3, r7
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d015      	beq.n	8006714 <UART_SetConfig+0x4d0>
 80066e8:	dc18      	bgt.n	800671c <UART_SetConfig+0x4d8>
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d00d      	beq.n	800670a <UART_SetConfig+0x4c6>
 80066ee:	dc15      	bgt.n	800671c <UART_SetConfig+0x4d8>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <UART_SetConfig+0x4b6>
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d005      	beq.n	8006704 <UART_SetConfig+0x4c0>
 80066f8:	e010      	b.n	800671c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7fd ff19 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80066fe:	0003      	movs	r3, r0
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006702:	e014      	b.n	800672e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006704:	4b2d      	ldr	r3, [pc, #180]	@ (80067bc <UART_SetConfig+0x578>)
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006708:	e011      	b.n	800672e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fd fe85 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 800670e:	0003      	movs	r3, r0
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006712:	e00c      	b.n	800672e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006714:	2380      	movs	r3, #128	@ 0x80
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800671a:	e008      	b.n	800672e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006720:	231a      	movs	r3, #26
 8006722:	2220      	movs	r2, #32
 8006724:	189b      	adds	r3, r3, r2
 8006726:	19db      	adds	r3, r3, r7
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
        break;
 800672c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800672e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d02a      	beq.n	800678a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006738:	4b1f      	ldr	r3, [pc, #124]	@ (80067b8 <UART_SetConfig+0x574>)
 800673a:	0052      	lsls	r2, r2, #1
 800673c:	5ad3      	ldrh	r3, [r2, r3]
 800673e:	0019      	movs	r1, r3
 8006740:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006742:	f7f9 fcdf 	bl	8000104 <__udivsi3>
 8006746:	0003      	movs	r3, r0
 8006748:	001a      	movs	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	18d2      	adds	r2, r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	0019      	movs	r1, r3
 8006758:	0010      	movs	r0, r2
 800675a:	f7f9 fcd3 	bl	8000104 <__udivsi3>
 800675e:	0003      	movs	r3, r0
 8006760:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	2b0f      	cmp	r3, #15
 8006766:	d90a      	bls.n	800677e <UART_SetConfig+0x53a>
 8006768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676a:	2380      	movs	r3, #128	@ 0x80
 800676c:	025b      	lsls	r3, r3, #9
 800676e:	429a      	cmp	r2, r3
 8006770:	d205      	bcs.n	800677e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	b29a      	uxth	r2, r3
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60da      	str	r2, [r3, #12]
 800677c:	e005      	b.n	800678a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800677e:	231a      	movs	r3, #26
 8006780:	2220      	movs	r2, #32
 8006782:	189b      	adds	r3, r3, r2
 8006784:	19db      	adds	r3, r3, r7
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	226a      	movs	r2, #106	@ 0x6a
 800678e:	2101      	movs	r1, #1
 8006790:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	2268      	movs	r2, #104	@ 0x68
 8006796:	2101      	movs	r1, #1
 8006798:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	2200      	movs	r2, #0
 800679e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	2200      	movs	r2, #0
 80067a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067a6:	231a      	movs	r3, #26
 80067a8:	2220      	movs	r2, #32
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	19db      	adds	r3, r3, r7
 80067ae:	781b      	ldrb	r3, [r3, #0]
}
 80067b0:	0018      	movs	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	b010      	add	sp, #64	@ 0x40
 80067b6:	bdb0      	pop	{r4, r5, r7, pc}
 80067b8:	08006f80 	.word	0x08006f80
 80067bc:	00f42400 	.word	0x00f42400

080067c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	2208      	movs	r2, #8
 80067ce:	4013      	ands	r3, r2
 80067d0:	d00b      	beq.n	80067ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006904 <UART_AdvFeatureConfig+0x144>)
 80067da:	4013      	ands	r3, r2
 80067dc:	0019      	movs	r1, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	2201      	movs	r2, #1
 80067f0:	4013      	ands	r3, r2
 80067f2:	d00b      	beq.n	800680c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	4a43      	ldr	r2, [pc, #268]	@ (8006908 <UART_AdvFeatureConfig+0x148>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	0019      	movs	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	2202      	movs	r2, #2
 8006812:	4013      	ands	r3, r2
 8006814:	d00b      	beq.n	800682e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a3b      	ldr	r2, [pc, #236]	@ (800690c <UART_AdvFeatureConfig+0x14c>)
 800681e:	4013      	ands	r3, r2
 8006820:	0019      	movs	r1, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	2204      	movs	r2, #4
 8006834:	4013      	ands	r3, r2
 8006836:	d00b      	beq.n	8006850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	4a34      	ldr	r2, [pc, #208]	@ (8006910 <UART_AdvFeatureConfig+0x150>)
 8006840:	4013      	ands	r3, r2
 8006842:	0019      	movs	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	2210      	movs	r2, #16
 8006856:	4013      	ands	r3, r2
 8006858:	d00b      	beq.n	8006872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4a2c      	ldr	r2, [pc, #176]	@ (8006914 <UART_AdvFeatureConfig+0x154>)
 8006862:	4013      	ands	r3, r2
 8006864:	0019      	movs	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	2220      	movs	r2, #32
 8006878:	4013      	ands	r3, r2
 800687a:	d00b      	beq.n	8006894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	4a25      	ldr	r2, [pc, #148]	@ (8006918 <UART_AdvFeatureConfig+0x158>)
 8006884:	4013      	ands	r3, r2
 8006886:	0019      	movs	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	2240      	movs	r2, #64	@ 0x40
 800689a:	4013      	ands	r3, r2
 800689c:	d01d      	beq.n	80068da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <UART_AdvFeatureConfig+0x15c>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	0019      	movs	r1, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ba:	2380      	movs	r3, #128	@ 0x80
 80068bc:	035b      	lsls	r3, r3, #13
 80068be:	429a      	cmp	r2, r3
 80068c0:	d10b      	bne.n	80068da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4a15      	ldr	r2, [pc, #84]	@ (8006920 <UART_AdvFeatureConfig+0x160>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	0019      	movs	r1, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	2280      	movs	r2, #128	@ 0x80
 80068e0:	4013      	ands	r3, r2
 80068e2:	d00b      	beq.n	80068fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006924 <UART_AdvFeatureConfig+0x164>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }
}
 80068fc:	46c0      	nop			@ (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b002      	add	sp, #8
 8006902:	bd80      	pop	{r7, pc}
 8006904:	ffff7fff 	.word	0xffff7fff
 8006908:	fffdffff 	.word	0xfffdffff
 800690c:	fffeffff 	.word	0xfffeffff
 8006910:	fffbffff 	.word	0xfffbffff
 8006914:	ffffefff 	.word	0xffffefff
 8006918:	ffffdfff 	.word	0xffffdfff
 800691c:	ffefffff 	.word	0xffefffff
 8006920:	ff9fffff 	.word	0xff9fffff
 8006924:	fff7ffff 	.word	0xfff7ffff

08006928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b092      	sub	sp, #72	@ 0x48
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2290      	movs	r2, #144	@ 0x90
 8006934:	2100      	movs	r1, #0
 8006936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006938:	f7fb f88c 	bl	8001a54 <HAL_GetTick>
 800693c:	0003      	movs	r3, r0
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2208      	movs	r2, #8
 8006948:	4013      	ands	r3, r2
 800694a:	2b08      	cmp	r3, #8
 800694c:	d12d      	bne.n	80069aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800694e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006950:	2280      	movs	r2, #128	@ 0x80
 8006952:	0391      	lsls	r1, r2, #14
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4a47      	ldr	r2, [pc, #284]	@ (8006a74 <UART_CheckIdleState+0x14c>)
 8006958:	9200      	str	r2, [sp, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	f000 f88e 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 8006960:	1e03      	subs	r3, r0, #0
 8006962:	d022      	beq.n	80069aa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006964:	f3ef 8310 	mrs	r3, PRIMASK
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800696e:	2301      	movs	r3, #1
 8006970:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006974:	f383 8810 	msr	PRIMASK, r3
}
 8006978:	46c0      	nop			@ (mov r8, r8)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2180      	movs	r1, #128	@ 0x80
 8006986:	438a      	bics	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	f383 8810 	msr	PRIMASK, r3
}
 8006994:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2288      	movs	r2, #136	@ 0x88
 800699a:	2120      	movs	r1, #32
 800699c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2284      	movs	r2, #132	@ 0x84
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e060      	b.n	8006a6c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2204      	movs	r2, #4
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d146      	bne.n	8006a46 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ba:	2280      	movs	r2, #128	@ 0x80
 80069bc:	03d1      	lsls	r1, r2, #15
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006a74 <UART_CheckIdleState+0x14c>)
 80069c2:	9200      	str	r2, [sp, #0]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f000 f859 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 80069ca:	1e03      	subs	r3, r0, #0
 80069cc:	d03b      	beq.n	8006a46 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ce:	f3ef 8310 	mrs	r3, PRIMASK
 80069d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80069d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d8:	2301      	movs	r3, #1
 80069da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f383 8810 	msr	PRIMASK, r3
}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4922      	ldr	r1, [pc, #136]	@ (8006a78 <UART_CheckIdleState+0x150>)
 80069f0:	400a      	ands	r2, r1
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f383 8810 	msr	PRIMASK, r3
}
 80069fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a00:	f3ef 8310 	mrs	r3, PRIMASK
 8006a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a06:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f383 8810 	msr	PRIMASK, r3
}
 8006a14:	46c0      	nop			@ (mov r8, r8)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2101      	movs	r1, #1
 8006a22:	438a      	bics	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	228c      	movs	r2, #140	@ 0x8c
 8006a36:	2120      	movs	r1, #32
 8006a38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2284      	movs	r2, #132	@ 0x84
 8006a3e:	2100      	movs	r1, #0
 8006a40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e012      	b.n	8006a6c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2288      	movs	r2, #136	@ 0x88
 8006a4a:	2120      	movs	r1, #32
 8006a4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	228c      	movs	r2, #140	@ 0x8c
 8006a52:	2120      	movs	r1, #32
 8006a54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2284      	movs	r2, #132	@ 0x84
 8006a66:	2100      	movs	r1, #0
 8006a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b010      	add	sp, #64	@ 0x40
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	01ffffff 	.word	0x01ffffff
 8006a78:	fffffedf 	.word	0xfffffedf

08006a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	1dfb      	adds	r3, r7, #7
 8006a8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8c:	e051      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3301      	adds	r3, #1
 8006a92:	d04e      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a94:	f7fa ffde 	bl	8001a54 <HAL_GetTick>
 8006a98:	0002      	movs	r2, r0
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e051      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b80      	cmp	r3, #128	@ 0x80
 8006abe:	d038      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d035      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2208      	movs	r2, #8
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d111      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2208      	movs	r2, #8
 8006ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f000 f83c 	bl	8006b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2290      	movs	r2, #144	@ 0x90
 8006ae8:	2108      	movs	r1, #8
 8006aea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2284      	movs	r2, #132	@ 0x84
 8006af0:	2100      	movs	r1, #0
 8006af2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e02c      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	2380      	movs	r3, #128	@ 0x80
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	401a      	ands	r2, r3
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d112      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2280      	movs	r2, #128	@ 0x80
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f000 f81f 	bl	8006b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2290      	movs	r2, #144	@ 0x90
 8006b22:	2120      	movs	r1, #32
 8006b24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2284      	movs	r2, #132	@ 0x84
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e00f      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	425a      	negs	r2, r3
 8006b42:	4153      	adcs	r3, r2
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	001a      	movs	r2, r3
 8006b48:	1dfb      	adds	r3, r7, #7
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d09e      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	0018      	movs	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b004      	add	sp, #16
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	@ 0x38
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b64:	f3ef 8310 	mrs	r3, PRIMASK
 8006b68:	617b      	str	r3, [r7, #20]
  return(result);
 8006b6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6e:	2301      	movs	r3, #1
 8006b70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f383 8810 	msr	PRIMASK, r3
}
 8006b78:	46c0      	nop			@ (mov r8, r8)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4926      	ldr	r1, [pc, #152]	@ (8006c20 <UART_EndRxTransfer+0xc4>)
 8006b86:	400a      	ands	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f383 8810 	msr	PRIMASK, r3
}
 8006b94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b96:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9a:	623b      	str	r3, [r7, #32]
  return(result);
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	f383 8810 	msr	PRIMASK, r3
}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	491b      	ldr	r1, [pc, #108]	@ (8006c24 <UART_EndRxTransfer+0xc8>)
 8006bb8:	400a      	ands	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	f383 8810 	msr	PRIMASK, r3
}
 8006bc6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d118      	bne.n	8006c02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bda:	2301      	movs	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f383 8810 	msr	PRIMASK, r3
}
 8006be4:	46c0      	nop			@ (mov r8, r8)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2110      	movs	r1, #16
 8006bf2:	438a      	bics	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f383 8810 	msr	PRIMASK, r3
}
 8006c00:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	228c      	movs	r2, #140	@ 0x8c
 8006c06:	2120      	movs	r1, #32
 8006c08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b00e      	add	sp, #56	@ 0x38
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	fffffedf 	.word	0xfffffedf
 8006c24:	effffffe 	.word	0xeffffffe

08006c28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2284      	movs	r2, #132	@ 0x84
 8006c34:	5c9b      	ldrb	r3, [r3, r2]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e027      	b.n	8006c8e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2284      	movs	r2, #132	@ 0x84
 8006c42:	2101      	movs	r1, #1
 8006c44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2288      	movs	r2, #136	@ 0x88
 8006c4a:	2124      	movs	r1, #36	@ 0x24
 8006c4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2101      	movs	r1, #1
 8006c62:	438a      	bics	r2, r1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a0b      	ldr	r2, [pc, #44]	@ (8006c98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2288      	movs	r2, #136	@ 0x88
 8006c80:	2120      	movs	r1, #32
 8006c82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2284      	movs	r2, #132	@ 0x84
 8006c88:	2100      	movs	r1, #0
 8006c8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	0018      	movs	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b004      	add	sp, #16
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	46c0      	nop			@ (mov r8, r8)
 8006c98:	dfffffff 	.word	0xdfffffff

08006c9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2284      	movs	r2, #132	@ 0x84
 8006caa:	5c9b      	ldrb	r3, [r3, r2]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e02e      	b.n	8006d12 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2284      	movs	r2, #132	@ 0x84
 8006cb8:	2101      	movs	r1, #1
 8006cba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2288      	movs	r2, #136	@ 0x88
 8006cc0:	2124      	movs	r1, #36	@ 0x24
 8006cc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	438a      	bics	r2, r1
 8006cda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	08d9      	lsrs	r1, r3, #3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 f854 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2288      	movs	r2, #136	@ 0x88
 8006d04:	2120      	movs	r1, #32
 8006d06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2284      	movs	r2, #132	@ 0x84
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	0018      	movs	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b004      	add	sp, #16
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2284      	movs	r2, #132	@ 0x84
 8006d2a:	5c9b      	ldrb	r3, [r3, r2]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e02f      	b.n	8006d94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2284      	movs	r2, #132	@ 0x84
 8006d38:	2101      	movs	r1, #1
 8006d3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2288      	movs	r2, #136	@ 0x88
 8006d40:	2124      	movs	r1, #36	@ 0x24
 8006d42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2101      	movs	r1, #1
 8006d58:	438a      	bics	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	4a0e      	ldr	r2, [pc, #56]	@ (8006d9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	0019      	movs	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	0018      	movs	r0, r3
 8006d76:	f000 f813 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2288      	movs	r2, #136	@ 0x88
 8006d86:	2120      	movs	r1, #32
 8006d88:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2284      	movs	r2, #132	@ 0x84
 8006d8e:	2100      	movs	r1, #0
 8006d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b004      	add	sp, #16
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	f1ffffff 	.word	0xf1ffffff

08006da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	226a      	movs	r2, #106	@ 0x6a
 8006db4:	2101      	movs	r1, #1
 8006db6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2268      	movs	r2, #104	@ 0x68
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dc0:	e043      	b.n	8006e4a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dc2:	260f      	movs	r6, #15
 8006dc4:	19bb      	adds	r3, r7, r6
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dca:	200e      	movs	r0, #14
 8006dcc:	183b      	adds	r3, r7, r0
 8006dce:	2208      	movs	r2, #8
 8006dd0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	0e5b      	lsrs	r3, r3, #25
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	240d      	movs	r4, #13
 8006dde:	193b      	adds	r3, r7, r4
 8006de0:	2107      	movs	r1, #7
 8006de2:	400a      	ands	r2, r1
 8006de4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	0f5b      	lsrs	r3, r3, #29
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	250c      	movs	r5, #12
 8006df2:	197b      	adds	r3, r7, r5
 8006df4:	2107      	movs	r1, #7
 8006df6:	400a      	ands	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfa:	183b      	adds	r3, r7, r0
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	197a      	adds	r2, r7, r5
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	4914      	ldr	r1, [pc, #80]	@ (8006e54 <UARTEx_SetNbDataToProcess+0xb4>)
 8006e04:	5c8a      	ldrb	r2, [r1, r2]
 8006e06:	435a      	muls	r2, r3
 8006e08:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e0a:	197b      	adds	r3, r7, r5
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	4a12      	ldr	r2, [pc, #72]	@ (8006e58 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e12:	0019      	movs	r1, r3
 8006e14:	f7f9 fa00 	bl	8000218 <__divsi3>
 8006e18:	0003      	movs	r3, r0
 8006e1a:	b299      	uxth	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	226a      	movs	r2, #106	@ 0x6a
 8006e20:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e22:	19bb      	adds	r3, r7, r6
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	193a      	adds	r2, r7, r4
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	490a      	ldr	r1, [pc, #40]	@ (8006e54 <UARTEx_SetNbDataToProcess+0xb4>)
 8006e2c:	5c8a      	ldrb	r2, [r1, r2]
 8006e2e:	435a      	muls	r2, r3
 8006e30:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e32:	193b      	adds	r3, r7, r4
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	4a08      	ldr	r2, [pc, #32]	@ (8006e58 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e38:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	f7f9 f9ec 	bl	8000218 <__divsi3>
 8006e40:	0003      	movs	r3, r0
 8006e42:	b299      	uxth	r1, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2268      	movs	r2, #104	@ 0x68
 8006e48:	5299      	strh	r1, [r3, r2]
}
 8006e4a:	46c0      	nop			@ (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b005      	add	sp, #20
 8006e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e52:	46c0      	nop			@ (mov r8, r8)
 8006e54:	08006f98 	.word	0x08006f98
 8006e58:	08006fa0 	.word	0x08006fa0

08006e5c <memset>:
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	1882      	adds	r2, r0, r2
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d100      	bne.n	8006e66 <memset+0xa>
 8006e64:	4770      	bx	lr
 8006e66:	7019      	strb	r1, [r3, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	e7f9      	b.n	8006e60 <memset+0x4>

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	2600      	movs	r6, #0
 8006e70:	4c0c      	ldr	r4, [pc, #48]	@ (8006ea4 <__libc_init_array+0x38>)
 8006e72:	4d0d      	ldr	r5, [pc, #52]	@ (8006ea8 <__libc_init_array+0x3c>)
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	f000 f819 	bl	8006eb4 <_init>
 8006e82:	4c0a      	ldr	r4, [pc, #40]	@ (8006eac <__libc_init_array+0x40>)
 8006e84:	4d0a      	ldr	r5, [pc, #40]	@ (8006eb0 <__libc_init_array+0x44>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	00b3      	lsls	r3, r6, #2
 8006e92:	58eb      	ldr	r3, [r5, r3]
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	00b3      	lsls	r3, r6, #2
 8006e9c:	58eb      	ldr	r3, [r5, r3]
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08006fb0 	.word	0x08006fb0
 8006ea8:	08006fb0 	.word	0x08006fb0
 8006eac:	08006fb4 	.word	0x08006fb4
 8006eb0:	08006fb0 	.word	0x08006fb0

08006eb4 <_init>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	46c0      	nop			@ (mov r8, r8)
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr

08006ec0 <_fini>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	46c0      	nop			@ (mov r8, r8)
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr
