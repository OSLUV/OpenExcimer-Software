
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092fc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009670  08009670  0000b0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009670  08009670  0000a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009678  08009678  0000b0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009678  08009678  0000a678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08009680  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200000a4  08009724  0000b0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08009724  0000b5b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162d9  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee2  00000000  00000000  000213a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00024288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b746  00000000  00000000  000255f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017c9f  00000000  00000000  00040d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b13a4  00000000  00000000  000589dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00109d81  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f1f  00000000  00000000  00109dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c68  00000000  00000000  0010ace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0010f94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a4 	.word	0x200000a4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080093a0 	.word	0x080093a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a8 	.word	0x200000a8
 8000100:	080093a0 	.word	0x080093a0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_UART_RxCpltCallback>:
//
//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b089      	sub	sp, #36	@ 0x24
 8000644:	af06      	add	r7, sp, #24
 8000646:	6078      	str	r0, [r7, #4]


	if (huart->Instance == USART2) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4abe      	ldr	r2, [pc, #760]	@ (8000948 <HAL_UART_RxCpltCallback+0x308>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d000      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x14>
 8000652:	e175      	b.n	8000940 <HAL_UART_RxCpltCallback+0x300>

		if (uart_rx_byte == '\n' || uart_rx_byte == '\r')  // End of input
 8000654:	4bbd      	ldr	r3, [pc, #756]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d004      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 800065c:	4bbb      	ldr	r3, [pc, #748]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0d      	cmp	r3, #13
 8000662:	d000      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 8000664:	e157      	b.n	8000916 <HAL_UART_RxCpltCallback+0x2d6>
		{
			uart_rx_buffer[uart_index] = '\0';
 8000666:	4bba      	ldr	r3, [pc, #744]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	001a      	movs	r2, r3
 800066c:	4bb9      	ldr	r3, [pc, #740]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // enable status LED
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	4ab8      	ldr	r2, [pc, #736]	@ (8000958 <HAL_UART_RxCpltCallback+0x318>)
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f003 fc3c 	bl	8003ef8 <HAL_GPIO_TogglePin>

			if (uart_rx_buffer[0]=='F') // Change frequency
 8000680:	4bb4      	ldr	r3, [pc, #720]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b46      	cmp	r3, #70	@ 0x46
 8000686:	d141      	bne.n	800070c <HAL_UART_RxCpltCallback+0xcc>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 8000688:	4ab4      	ldr	r2, [pc, #720]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 800068a:	4bb5      	ldr	r3, [pc, #724]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f008 fa38 	bl	8008b04 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000694:	4bb2      	ldr	r3, [pc, #712]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000696:	0018      	movs	r0, r3
 8000698:	f008 f92e 	bl	80088f8 <atoi>
 800069c:	0002      	movs	r2, r0
 800069e:	4bb1      	ldr	r3, [pc, #708]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006a0:	601a      	str	r2, [r3, #0]
				if (value>=FREQ_MIN && value <=FREQ_MAX) { // limit frequency to between 10 - 120 kHz
 80006a2:	4bb0      	ldr	r3, [pc, #704]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b09      	cmp	r3, #9
 80006a8:	dc00      	bgt.n	80006ac <HAL_UART_RxCpltCallback+0x6c>
 80006aa:	e130      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
 80006ac:	4bad      	ldr	r3, [pc, #692]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b78      	cmp	r3, #120	@ 0x78
 80006b2:	dd00      	ble.n	80006b6 <HAL_UART_RxCpltCallback+0x76>
 80006b4:	e12b      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
					operationFrequency = (uint16_t)((TMR_COUNTER + value / 2) / value);
 80006b6:	4bab      	ldr	r3, [pc, #684]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	da00      	bge.n	80006c0 <HAL_UART_RxCpltCallback+0x80>
 80006be:	3301      	adds	r3, #1
 80006c0:	105b      	asrs	r3, r3, #1
 80006c2:	22fa      	movs	r2, #250	@ 0xfa
 80006c4:	01d2      	lsls	r2, r2, #7
 80006c6:	189a      	adds	r2, r3, r2
 80006c8:	4ba6      	ldr	r3, [pc, #664]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f7ff fdb4 	bl	800023c <__divsi3>
 80006d4:	0003      	movs	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4ba3      	ldr	r3, [pc, #652]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 80006da:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Freq:%d kHz ARR:%d\r\n", value, operationFrequency);
 80006dc:	4ba1      	ldr	r3, [pc, #644]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	4ba1      	ldr	r3, [pc, #644]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	4aa1      	ldr	r2, [pc, #644]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 80006e8:	48a1      	ldr	r0, [pc, #644]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	000b      	movs	r3, r1
 80006ee:	213c      	movs	r1, #60	@ 0x3c
 80006f0:	f008 f99e 	bl	8008a30 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80006f4:	4b9e      	ldr	r3, [pc, #632]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fd04 	bl	8000104 <strlen>
 80006fc:	0003      	movs	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	499b      	ldr	r1, [pc, #620]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000702:	489c      	ldr	r0, [pc, #624]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000704:	230a      	movs	r3, #10
 8000706:	f006 f817 	bl	8006738 <HAL_UART_Transmit>
 800070a:	e100      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				}
			}
			else if (uart_rx_buffer[0]=='A') // Change ARR directly -> frequency
 800070c:	4b91      	ldr	r3, [pc, #580]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b41      	cmp	r3, #65	@ 0x41
 8000712:	d137      	bne.n	8000784 <HAL_UART_RxCpltCallback+0x144>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 8000714:	4a91      	ldr	r2, [pc, #580]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000716:	4b92      	ldr	r3, [pc, #584]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f008 f9f2 	bl	8008b04 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000720:	4b8f      	ldr	r3, [pc, #572]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000722:	0018      	movs	r0, r3
 8000724:	f008 f8e8 	bl	80088f8 <atoi>
 8000728:	0002      	movs	r2, r0
 800072a:	4b8e      	ldr	r3, [pc, #568]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800072c:	601a      	str	r2, [r3, #0]
				if (value>=ARR_MIN && value <=ARR_MAX) { // limit frequency to between 10 - 120 kHz
 800072e:	4b8d      	ldr	r3, [pc, #564]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	2382      	movs	r3, #130	@ 0x82
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	429a      	cmp	r2, r3
 8000738:	da00      	bge.n	800073c <HAL_UART_RxCpltCallback+0xfc>
 800073a:	e0e8      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
 800073c:	4b89      	ldr	r3, [pc, #548]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	23fa      	movs	r3, #250	@ 0xfa
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	429a      	cmp	r2, r3
 8000746:	dd00      	ble.n	800074a <HAL_UART_RxCpltCallback+0x10a>
 8000748:	e0e1      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
					operationFrequency = value;
 800074a:	4b86      	ldr	r3, [pc, #536]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b85      	ldr	r3, [pc, #532]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 8000752:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "ARR: %d Freq: %d\r\n", value, operationFrequency);
 8000754:	4b83      	ldr	r3, [pc, #524]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	4b83      	ldr	r3, [pc, #524]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4a86      	ldr	r2, [pc, #536]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 8000760:	4883      	ldr	r0, [pc, #524]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	000b      	movs	r3, r1
 8000766:	213c      	movs	r1, #60	@ 0x3c
 8000768:	f008 f962 	bl	8008a30 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 800076c:	4b80      	ldr	r3, [pc, #512]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fcc8 	bl	8000104 <strlen>
 8000774:	0003      	movs	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	497d      	ldr	r1, [pc, #500]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800077a:	487e      	ldr	r0, [pc, #504]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 800077c:	230a      	movs	r3, #10
 800077e:	f005 ffdb 	bl	8006738 <HAL_UART_Transmit>
 8000782:	e0c4      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				}
			}
			else if (uart_rx_buffer[0]=='C') // change CCR -> charge time
 8000784:	4b73      	ldr	r3, [pc, #460]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b43      	cmp	r3, #67	@ 0x43
 800078a:	d12e      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x1aa>
			{
				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 800078c:	4a73      	ldr	r2, [pc, #460]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 800078e:	4b74      	ldr	r3, [pc, #464]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f008 f9b6 	bl	8008b04 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000798:	4b71      	ldr	r3, [pc, #452]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 800079a:	0018      	movs	r0, r3
 800079c:	f008 f8ac 	bl	80088f8 <atoi>
 80007a0:	0002      	movs	r2, r0
 80007a2:	4b70      	ldr	r3, [pc, #448]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007a4:	601a      	str	r2, [r3, #0]
				if (value>=CCR_MIN && value <=CCR_MAX) { // limit charge time to between 3 - 5 µs
 80007a6:	4b6f      	ldr	r3, [pc, #444]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b63      	cmp	r3, #99	@ 0x63
 80007ac:	dc00      	bgt.n	80007b0 <HAL_UART_RxCpltCallback+0x170>
 80007ae:	e0ae      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
 80007b0:	4b6c      	ldr	r3, [pc, #432]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80007b6:	dd00      	ble.n	80007ba <HAL_UART_RxCpltCallback+0x17a>
 80007b8:	e0a9      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
					dutyMax = value;
 80007ba:	4b6a      	ldr	r3, [pc, #424]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b6e      	ldr	r3, [pc, #440]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80007c2:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Charge: %d\r\n", value);
 80007c4:	4b67      	ldr	r3, [pc, #412]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a6d      	ldr	r2, [pc, #436]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 80007ca:	4869      	ldr	r0, [pc, #420]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007cc:	213c      	movs	r1, #60	@ 0x3c
 80007ce:	f008 f92f 	bl	8008a30 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80007d2:	4b67      	ldr	r3, [pc, #412]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff fc95 	bl	8000104 <strlen>
 80007da:	0003      	movs	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4964      	ldr	r1, [pc, #400]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007e0:	4864      	ldr	r0, [pc, #400]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 80007e2:	230a      	movs	r3, #10
 80007e4:	f005 ffa8 	bl	8006738 <HAL_UART_Transmit>
 80007e8:	e091      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				}

			}
			else if (uart_rx_buffer[0]=='D') // report ADC DATA
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b44      	cmp	r3, #68	@ 0x44
 80007f0:	d12d      	bne.n	800084e <HAL_UART_RxCpltCallback+0x20e>
			{
//				snprintf(msg, sizeof(msg), "Ui %04d, T %04d, Ul %04d, Il %04d, Li %04d, Ii %04d\r\n",  adc_buffer[0][1], adc_buffer[1][1], adc_buffer[2][1], adc_buffer[3][1], adc_buffer[4][1], adc_buffer[5][1]);
				snprintf(msg, sizeof(msg), "Ui %04d, T %04d, Ul %04d, Il %04d, Li %04d, Ii %04d\r\n",  adc_buffer[0], adc_buffer[1], adc_buffer[2], adc_buffer[3], adc_buffer[4], adc_buffer[5]);
 80007f2:	4b64      	ldr	r3, [pc, #400]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	469c      	mov	ip, r3
 80007fa:	4b62      	ldr	r3, [pc, #392]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	0019      	movs	r1, r3
 8000802:	4b60      	ldr	r3, [pc, #384]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 8000804:	889b      	ldrh	r3, [r3, #4]
 8000806:	b29b      	uxth	r3, r3
 8000808:	001c      	movs	r4, r3
 800080a:	4b5e      	ldr	r3, [pc, #376]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 800080c:	88db      	ldrh	r3, [r3, #6]
 800080e:	b29b      	uxth	r3, r3
 8000810:	001d      	movs	r5, r3
 8000812:	4b5c      	ldr	r3, [pc, #368]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 8000814:	891b      	ldrh	r3, [r3, #8]
 8000816:	b29b      	uxth	r3, r3
 8000818:	001e      	movs	r6, r3
 800081a:	4b5a      	ldr	r3, [pc, #360]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 800081c:	895b      	ldrh	r3, [r3, #10]
 800081e:	b29b      	uxth	r3, r3
 8000820:	4a59      	ldr	r2, [pc, #356]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000822:	4853      	ldr	r0, [pc, #332]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000824:	9304      	str	r3, [sp, #16]
 8000826:	9603      	str	r6, [sp, #12]
 8000828:	9502      	str	r5, [sp, #8]
 800082a:	9401      	str	r4, [sp, #4]
 800082c:	9100      	str	r1, [sp, #0]
 800082e:	4663      	mov	r3, ip
 8000830:	213c      	movs	r1, #60	@ 0x3c
 8000832:	f008 f8fd 	bl	8008a30 <sniprintf>

				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000836:	4b4e      	ldr	r3, [pc, #312]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fc63 	bl	8000104 <strlen>
 800083e:	0003      	movs	r3, r0
 8000840:	b29a      	uxth	r2, r3
 8000842:	494b      	ldr	r1, [pc, #300]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000844:	484b      	ldr	r0, [pc, #300]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000846:	230a      	movs	r3, #10
 8000848:	f005 ff76 	bl	8006738 <HAL_UART_Transmit>
 800084c:	e05f      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
			}
			else if (uart_rx_buffer[0]=='T') // report TIMER data
 800084e:	4b41      	ldr	r3, [pc, #260]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b54      	cmp	r3, #84	@ 0x54
 8000854:	d119      	bne.n	800088a <HAL_UART_RxCpltCallback+0x24a>
			{
				snprintf(msg, sizeof(msg), "ARR: %d, CCR: %d\r\n",  operationFrequency, dutyMax);
 8000856:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b29b      	uxth	r3, r3
 800085c:	0019      	movs	r1, r3
 800085e:	4b47      	ldr	r3, [pc, #284]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4a49      	ldr	r2, [pc, #292]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 8000866:	4842      	ldr	r0, [pc, #264]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	000b      	movs	r3, r1
 800086c:	213c      	movs	r1, #60	@ 0x3c
 800086e:	f008 f8df 	bl	8008a30 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000872:	4b3f      	ldr	r3, [pc, #252]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fc45 	bl	8000104 <strlen>
 800087a:	0003      	movs	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	493c      	ldr	r1, [pc, #240]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000880:	483c      	ldr	r0, [pc, #240]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000882:	230a      	movs	r3, #10
 8000884:	f005 ff58 	bl	8006738 <HAL_UART_Transmit>
 8000888:	e041      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
			}
			else { // dimming levels
				value = atoi(uart_rx_buffer);
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 800088c:	0018      	movs	r0, r3
 800088e:	f008 f833 	bl	80088f8 <atoi>
 8000892:	0002      	movs	r2, r0
 8000894:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 8000896:	601a      	str	r2, [r3, #0]

				if (value <= 10)
 8000898:	4b32      	ldr	r3, [pc, #200]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b0a      	cmp	r3, #10
 800089e:	dc36      	bgt.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				{
					if (value < 1)
 80008a0:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dc06      	bgt.n	80008b6 <HAL_UART_RxCpltCallback+0x276>
					{
						uartEnableFlag = 0; // turn off if zero
 80008a8:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
						powerLevel = 1; // clip lowest value
 80008ae:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_UART_RxCpltCallback+0x286>
					}
					else {
						uartEnableFlag = 1; // turn on for all other valuesw
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
						powerLevel = (uint8_t)value;
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b34      	ldr	r3, [pc, #208]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008c4:	701a      	strb	r2, [r3, #0]

					}
					snprintf(msg, sizeof(msg), "Set: %d\r\n", powerLevel);
 80008c6:	4b33      	ldr	r3, [pc, #204]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4a33      	ldr	r2, [pc, #204]	@ (8000998 <HAL_UART_RxCpltCallback+0x358>)
 80008cc:	4828      	ldr	r0, [pc, #160]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008ce:	213c      	movs	r1, #60	@ 0x3c
 80008d0:	f008 f8ae 	bl	8008a30 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80008d4:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fc14 	bl	8000104 <strlen>
 80008dc:	0003      	movs	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4923      	ldr	r1, [pc, #140]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008e2:	4824      	ldr	r0, [pc, #144]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 80008e4:	230a      	movs	r3, #10
 80008e6:	f005 ff27 	bl	8006738 <HAL_UART_Transmit>
					dutyMax = operationPoints[powerLevel-1][0];
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	5ad2      	ldrh	r2, [r2, r3]
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80008f8:	801a      	strh	r2, [r3, #0]
					operationFrequency = operationPoints[powerLevel-1][1];
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	4a26      	ldr	r2, [pc, #152]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	3302      	adds	r3, #2
 8000908:	881a      	ldrh	r2, [r3, #0]
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800090c:	801a      	strh	r2, [r3, #0]
				{
					// do nothing
				}
			}

			uart_index = 0;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e00e      	b.n	8000934 <HAL_UART_RxCpltCallback+0x2f4>
		}
		else
		{


			if (uart_index < RX_BUFFER_SIZE - 1)
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b08      	cmp	r3, #8
 800091c:	d80a      	bhi.n	8000934 <HAL_UART_RxCpltCallback+0x2f4>
			{
				uart_rx_buffer[uart_index++] = uart_rx_byte;
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	b2d1      	uxtb	r1, r2
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000928:	7011      	strb	r1, [r2, #0]
 800092a:	001a      	movs	r2, r3
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800092e:	7819      	ldrb	r1, [r3, #0]
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000932:	5499      	strb	r1, [r3, r2]
			}
		}

		HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000934:	4905      	ldr	r1, [pc, #20]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000938:	2201      	movs	r2, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f005 ffa0 	bl	8006880 <HAL_UART_Receive_IT>
	}
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b003      	add	sp, #12
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	20000417 	.word	0x20000417
 8000950:	20000416 	.word	0x20000416
 8000954:	20000400 	.word	0x20000400
 8000958:	50000800 	.word	0x50000800
 800095c:	20000401 	.word	0x20000401
 8000960:	2000040c 	.word	0x2000040c
 8000964:	20000454 	.word	0x20000454
 8000968:	2000000a 	.word	0x2000000a
 800096c:	080093b8 	.word	0x080093b8
 8000970:	20000418 	.word	0x20000418
 8000974:	2000036c 	.word	0x2000036c
 8000978:	080093d0 	.word	0x080093d0
 800097c:	20000006 	.word	0x20000006
 8000980:	080093e4 	.word	0x080093e4
 8000984:	200000d4 	.word	0x200000d4
 8000988:	080093f4 	.word	0x080093f4
 800098c:	0800942c 	.word	0x0800942c
 8000990:	2000000c 	.word	0x2000000c
 8000994:	2000000d 	.word	0x2000000d
 8000998:	08009440 	.word	0x08009440
 800099c:	20000010 	.word	0x20000010

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f001 fc0d 	bl	80021c4 <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_Delay(100);
 80009aa:	2064      	movs	r0, #100	@ 0x64
 80009ac:	f001 fc90 	bl	80022d0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 fa56 	bl	8000e60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 80009b4:	2064      	movs	r0, #100	@ 0x64
 80009b6:	f001 fc8b 	bl	80022d0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f000 fedd 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 80009be:	f000 fec5 	bl	800174c <MX_DMA_Init>
  MX_ADC1_Init();
 80009c2:	f000 fad1 	bl	8000f68 <MX_ADC1_Init>
  MX_COMP2_Init();
 80009c6:	f000 fb93 	bl	80010f0 <MX_COMP2_Init>
  MX_TIM1_Init();
 80009ca:	f000 fbf7 	bl	80011bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009ce:	f000 fcbd 	bl	800134c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009d2:	f000 fd1b 	bl	800140c <MX_TIM3_Init>
  MX_TIM16_Init();
 80009d6:	f000 fde3 	bl	80015a0 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80009da:	f000 fe69 	bl	80016b0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009de:	f000 fda5 	bl	800152c <MX_TIM6_Init>
  MX_DAC1_Init();
 80009e2:	f000 fbb5 	bl	8001150 <MX_DAC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009e6:	f000 fa99 	bl	8000f1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


	// synchronous timing interrupts
	TIM6->ARR = 1000;
 80009ea:	4bd1      	ldr	r3, [pc, #836]	@ (8000d30 <main+0x390>)
 80009ec:	22fa      	movs	r2, #250	@ 0xfa
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 80009f2:	4bd0      	ldr	r3, [pc, #832]	@ (8000d34 <main+0x394>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 f9bb 	bl	8004d70 <HAL_TIM_Base_Start_IT>



	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 80009fa:	4bcf      	ldr	r3, [pc, #828]	@ (8000d38 <main+0x398>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4bce      	ldr	r3, [pc, #824]	@ (8000d38 <main+0x398>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	430a      	orrs	r2, r1
 8000a04:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 8000a06:	4bcc      	ldr	r3, [pc, #816]	@ (8000d38 <main+0x398>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4bcb      	ldr	r3, [pc, #812]	@ (8000d38 <main+0x398>)
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 8000a12:	4bca      	ldr	r3, [pc, #808]	@ (8000d3c <main+0x39c>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f004 fa5e 	bl	8004ed8 <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 8000a1c:	4bc7      	ldr	r3, [pc, #796]	@ (8000d3c <main+0x39c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a22:	4bc6      	ldr	r3, [pc, #792]	@ (8000d3c <main+0x39c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	0209      	lsls	r1, r1, #8
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	645a      	str	r2, [r3, #68]	@ 0x44



	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 8000a2e:	4bc4      	ldr	r3, [pc, #784]	@ (8000d40 <main+0x3a0>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fc4f 	bl	80032d6 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 8000a38:	4bc2      	ldr	r3, [pc, #776]	@ (8000d44 <main+0x3a4>)
 8000a3a:	48c1      	ldr	r0, [pc, #772]	@ (8000d40 <main+0x3a0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f002 fcfc 	bl	800343c <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 8000a44:	4bc0      	ldr	r3, [pc, #768]	@ (8000d48 <main+0x3a8>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 faf2 	bl	8003030 <HAL_COMP_Start>
	 * 3 = Ch8: Isense_Lamp
	 * 4 = Ch9: Lamp Intensity
	 * 5 = Ch10: Isense_In
	 */

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4abe      	ldr	r2, [pc, #760]	@ (8000d4c <main+0x3ac>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f003 fa4f 	bl	8003ef8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a5a:	23fa      	movs	r3, #250	@ 0xfa
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fc36 	bl	80022d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4ab8      	ldr	r2, [pc, #736]	@ (8000d4c <main+0x3ac>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f003 fa43 	bl	8003ef8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a72:	23fa      	movs	r3, #250	@ 0xfa
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 fc2a 	bl	80022d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	4ab2      	ldr	r2, [pc, #712]	@ (8000d4c <main+0x3ac>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f003 fa37 	bl	8003ef8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a8a:	23fa      	movs	r3, #250	@ 0xfa
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fc1e 	bl	80022d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	4aac      	ldr	r2, [pc, #688]	@ (8000d4c <main+0x3ac>)
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f003 fa2b 	bl	8003ef8 <HAL_GPIO_TogglePin>


	HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000aa2:	49ab      	ldr	r1, [pc, #684]	@ (8000d50 <main+0x3b0>)
 8000aa4:	4bab      	ldr	r3, [pc, #684]	@ (8000d54 <main+0x3b4>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f005 fee9 	bl	8006880 <HAL_UART_Receive_IT>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request) {
 8000ab4:	4ba8      	ldr	r3, [pc, #672]	@ (8000d58 <main+0x3b8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d009      	beq.n	8000ad2 <main+0x132>
			tim6_slowIrq_request = 0;
 8000abe:	4ba6      	ldr	r3, [pc, #664]	@ (8000d58 <main+0x3b8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // enable status LED
 8000ac4:	2380      	movs	r3, #128	@ 0x80
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	4aa0      	ldr	r2, [pc, #640]	@ (8000d4c <main+0x3ac>)
 8000aca:	0019      	movs	r1, r3
 8000acc:	0010      	movs	r0, r2
 8000ace:	f003 fa13 	bl	8003ef8 <HAL_GPIO_TogglePin>
			//sendInt16UART();
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 8000ad2:	4ba2      	ldr	r3, [pc, #648]	@ (8000d5c <main+0x3bc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d059      	beq.n	8000b90 <main+0x1f0>
			tim6_irq_request = 0;
 8000adc:	4b9f      	ldr	r3, [pc, #636]	@ (8000d5c <main+0x3bc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) && uartEnableFlag; //pull low for enabling
 8000ae2:	2380      	movs	r3, #128	@ 0x80
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4a9e      	ldr	r2, [pc, #632]	@ (8000d60 <main+0x3c0>)
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0010      	movs	r0, r2
 8000aec:	f003 f9ca 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d105      	bne.n	8000b00 <main+0x160>
 8000af4:	4b9b      	ldr	r3, [pc, #620]	@ (8000d64 <main+0x3c4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <main+0x160>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <main+0x162>
 8000b00:	2300      	movs	r3, #0
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b98      	ldr	r3, [pc, #608]	@ (8000d68 <main+0x3c8>)
 8000b06:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 8000b08:	4b97      	ldr	r3, [pc, #604]	@ (8000d68 <main+0x3c8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d009      	beq.n	8000b26 <main+0x186>
 8000b12:	4b96      	ldr	r3, [pc, #600]	@ (8000d6c <main+0x3cc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d105      	bne.n	8000b26 <main+0x186>
				ignitionCounter++;
 8000b1a:	4b95      	ldr	r3, [pc, #596]	@ (8000d70 <main+0x3d0>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b93      	ldr	r3, [pc, #588]	@ (8000d70 <main+0x3d0>)
 8000b24:	801a      	strh	r2, [r3, #0]


			// check lamp voltage

			// check supply voltage
			if ((adc_24V < upper_24Vsupply) && (adc_24V > lower_24Vsupply)) {
 8000b26:	4b93      	ldr	r3, [pc, #588]	@ (8000d74 <main+0x3d4>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b92      	ldr	r3, [pc, #584]	@ (8000d78 <main+0x3d8>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d20b      	bcs.n	8000b4e <main+0x1ae>
 8000b36:	4b8f      	ldr	r3, [pc, #572]	@ (8000d74 <main+0x3d4>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d7c <main+0x3dc>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d903      	bls.n	8000b4e <main+0x1ae>
				supplyOKFlag = 1;
 8000b46:	4b8e      	ldr	r3, [pc, #568]	@ (8000d80 <main+0x3e0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e002      	b.n	8000b54 <main+0x1b4>
			}
			else {
				supplyOKFlag = 0;
 8000b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8000d80 <main+0x3e0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > upper_tempMOSFET) {
 8000b54:	4b8b      	ldr	r3, [pc, #556]	@ (8000d84 <main+0x3e4>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d88 <main+0x3e8>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d903      	bls.n	8000b6c <main+0x1cc>
				OT_flag = 1;
 8000b64:	4b89      	ldr	r3, [pc, #548]	@ (8000d8c <main+0x3ec>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e002      	b.n	8000b72 <main+0x1d2>
			}
			else {
				OT_flag = 0;
 8000b6c:	4b87      	ldr	r3, [pc, #540]	@ (8000d8c <main+0x3ec>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > upper_iIn) {
 8000b72:	4b87      	ldr	r3, [pc, #540]	@ (8000d90 <main+0x3f0>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b86      	ldr	r3, [pc, #536]	@ (8000d94 <main+0x3f4>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d903      	bls.n	8000b8a <main+0x1ea>
				OCPinFlag = 1;
 8000b82:	4b85      	ldr	r3, [pc, #532]	@ (8000d98 <main+0x3f8>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e002      	b.n	8000b90 <main+0x1f0>
			}
			else {
				OCPinFlag = 0;
 8000b8a:	4b83      	ldr	r3, [pc, #524]	@ (8000d98 <main+0x3f8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]


		}

		// ------------ ASM -----------------------
		switch (state) {
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d88d      	bhi.n	8000ab4 <main+0x114>
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	4b80      	ldr	r3, [pc, #512]	@ (8000d9c <main+0x3fc>)
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 8000ba2:	4b72      	ldr	r3, [pc, #456]	@ (8000d6c <main+0x3cc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 8000ba8:	4b71      	ldr	r3, [pc, #452]	@ (8000d70 <main+0x3d0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	4866      	ldr	r0, [pc, #408]	@ (8000d4c <main+0x3ac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	f003 f981 	bl	8003ebe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 8000bbc:	4b68      	ldr	r3, [pc, #416]	@ (8000d60 <main+0x3c0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	@ 0x40
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 f97b 	bl	8003ebe <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8000d3c <main+0x39c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->ARR=ignFrequency; //50 kHz
 8000bd0:	4b73      	ldr	r3, [pc, #460]	@ (8000da0 <main+0x400>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b58      	ldr	r3, [pc, #352]	@ (8000d38 <main+0x398>)
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

			// exit conditions
			if (errorFlag) {
 8000bda:	4b72      	ldr	r3, [pc, #456]	@ (8000da4 <main+0x404>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <main+0x24a>
				state = ERROR_state;
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag  && supplyOKFlag ) {
 8000bea:	4b5f      	ldr	r3, [pc, #380]	@ (8000d68 <main+0x3c8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <main+0x256>
 8000bf4:	e11a      	b.n	8000e2c <main+0x48c>
 8000bf6:	4b62      	ldr	r3, [pc, #392]	@ (8000d80 <main+0x3e0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <main+0x262>
 8000c00:	e114      	b.n	8000e2c <main+0x48c>
				state = IGNITE;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c08:	e110      	b.n	8000e2c <main+0x48c>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 8000c0a:	4b67      	ldr	r3, [pc, #412]	@ (8000da8 <main+0x408>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b67      	ldr	r3, [pc, #412]	@ (8000dac <main+0x40c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d903      	bls.n	8000c1e <main+0x27e>
				state = ERROR_state;
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	2204      	movs	r2, #4
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e03d      	b.n	8000c9a <main+0x2fa>
			}
			else if (!ignitionFlag) {
 8000c1e:	4b53      	ldr	r3, [pc, #332]	@ (8000d6c <main+0x3cc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d139      	bne.n	8000c9a <main+0x2fa>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 8000c26:	4b52      	ldr	r3, [pc, #328]	@ (8000d70 <main+0x3d0>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	4b61      	ldr	r3, [pc, #388]	@ (8000db0 <main+0x410>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d22a      	bcs.n	8000c88 <main+0x2e8>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	4845      	ldr	r0, [pc, #276]	@ (8000d4c <main+0x3ac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	f003 f93f 	bl	8003ebe <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 8000c40:	4b5c      	ldr	r3, [pc, #368]	@ (8000db4 <main+0x414>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <main+0x39c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM1->ARR = ignFrequency;
 8000c4c:	4b54      	ldr	r3, [pc, #336]	@ (8000da0 <main+0x400>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b39      	ldr	r3, [pc, #228]	@ (8000d38 <main+0x398>)
 8000c54:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 8000c56:	4b42      	ldr	r3, [pc, #264]	@ (8000d60 <main+0x3c0>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	@ 0x40
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 f92e 	bl	8003ebe <HAL_GPIO_WritePin>
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && ignitionCounter > 1000) { // minimum ignition time 1000 ms
					if ( ignitionCounter > 1000) { // minimum ignition time 1000 ms
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <main+0x3d0>)
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	23fa      	movs	r3, #250	@ 0xfa
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d915      	bls.n	8000c9a <main+0x2fa>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d60 <main+0x3c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	2140      	movs	r1, #64	@ 0x40
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 f922 	bl	8003ebe <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 8000c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d6c <main+0x3cc>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
						state = RUN;
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e008      	b.n	8000c9a <main+0x2fa>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 8000c88:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <main+0x410>)
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <main+0x3d0>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d802      	bhi.n	8000c9a <main+0x2fa>
					state = IGN_FAIL;
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	2203      	movs	r2, #3
 8000c98:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <main+0x3c8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d000      	beq.n	8000ca6 <main+0x306>
 8000ca4:	e0c4      	b.n	8000e30 <main+0x490>
				state = INIT;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000cac:	e0c0      	b.n	8000e30 <main+0x490>
		case IGN_FAIL:
			ignitionFlag = 0;
 8000cae:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <main+0x3cc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <main+0x3c0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f003 f8ff 	bl	8003ebe <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x39c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d4c <main+0x3ac>)
 8000cce:	0019      	movs	r1, r3
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	f003 f911 	bl	8003ef8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f001 fafa 	bl	80022d0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000cdc:	2380      	movs	r3, #128	@ 0x80
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <main+0x3ac>)
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	f003 f907 	bl	8003ef8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000cea:	2064      	movs	r0, #100	@ 0x64
 8000cec:	f001 faf0 	bl	80022d0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	4a15      	ldr	r2, [pc, #84]	@ (8000d4c <main+0x3ac>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f003 f8fd 	bl	8003ef8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000cfe:	2064      	movs	r0, #100	@ 0x64
 8000d00:	f001 fae6 	bl	80022d0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000d04:	2380      	movs	r3, #128	@ 0x80
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	4a10      	ldr	r2, [pc, #64]	@ (8000d4c <main+0x3ac>)
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f003 f8f3 	bl	8003ef8 <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <main+0x418>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fada 	bl	80022d0 <HAL_Delay>
			failedIgnitionCounter++;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <main+0x408>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <main+0x408>)
 8000d26:	701a      	strb	r2, [r3, #0]
			state = INIT;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
			break;
 8000d2e:	e082      	b.n	8000e36 <main+0x496>
 8000d30:	40001000 	.word	0x40001000
 8000d34:	200002d4 	.word	0x200002d4
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	200001f0 	.word	0x200001f0
 8000d40:	200001dc 	.word	0x200001dc
 8000d44:	00000fff 	.word	0x00000fff
 8000d48:	200001ac 	.word	0x200001ac
 8000d4c:	50000800 	.word	0x50000800
 8000d50:	20000417 	.word	0x20000417
 8000d54:	2000036c 	.word	0x2000036c
 8000d58:	200000c6 	.word	0x200000c6
 8000d5c:	200000c5 	.word	0x200000c5
 8000d60:	50000400 	.word	0x50000400
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	200000c0 	.word	0x200000c0
 8000d6c:	2000045a 	.word	0x2000045a
 8000d70:	20000458 	.word	0x20000458
 8000d74:	200000e0 	.word	0x200000e0
 8000d78:	2000003e 	.word	0x2000003e
 8000d7c:	20000040 	.word	0x20000040
 8000d80:	200000c1 	.word	0x200000c1
 8000d84:	200000e2 	.word	0x200000e2
 8000d88:	20000042 	.word	0x20000042
 8000d8c:	200000c3 	.word	0x200000c3
 8000d90:	200000ea 	.word	0x200000ea
 8000d94:	20000044 	.word	0x20000044
 8000d98:	200000c4 	.word	0x200000c4
 8000d9c:	0800944c 	.word	0x0800944c
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200000c2 	.word	0x200000c2
 8000da8:	2000045b 	.word	0x2000045b
 8000dac:	2000003c 	.word	0x2000003c
 8000db0:	20000038 	.word	0x20000038
 8000db4:	20000004 	.word	0x20000004
 8000db8:	2000003a 	.word	0x2000003a


		case RUN:
			// RUN code
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
			TIM1->ARR=operationFrequency;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <main+0x498>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <main+0x49c>)
 8000dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMax); // max. duty cycle limiting
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <main+0x4a0>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <main+0x4a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <main+0x4a8>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <main+0x4ac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f002 fb2d 	bl	800343c <HAL_DAC_SetValue>

			// exit conditions

			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <main+0x4b0>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <main+0x456>
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <main+0x4b4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <main+0x45c>
				state = INIT;
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
			}

			/*if (OT_flag || errorFlag || (adc_uSenseLamp>adc_uSenseLampOpenCircuit)) {
				state = ERROR_state;
			}*/
			if (OT_flag ) {
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <main+0x4b8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d016      	beq.n	8000e34 <main+0x494>
				state = ERROR_state;
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	2204      	movs	r2, #4
 8000e0a:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000e0c:	e012      	b.n	8000e34 <main+0x494>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <main+0x4a4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34


			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <main+0x4bc>)
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	0010      	movs	r0, r2
 8000e20:	f003 f86a 	bl	8003ef8 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000e24:	20c8      	movs	r0, #200	@ 0xc8
 8000e26:	f001 fa53 	bl	80022d0 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000e2a:	e004      	b.n	8000e36 <main+0x496>
			break;
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	e641      	b.n	8000ab4 <main+0x114>
			break;
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	e63f      	b.n	8000ab4 <main+0x114>
			break;
 8000e34:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request) {
 8000e36:	e63d      	b.n	8000ab4 <main+0x114>
 8000e38:	2000000a 	.word	0x2000000a
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	20000006 	.word	0x20000006
 8000e44:	200001f0 	.word	0x200001f0
 8000e48:	20000002 	.word	0x20000002
 8000e4c:	200001dc 	.word	0x200001dc
 8000e50:	200000c0 	.word	0x200000c0
 8000e54:	200000c1 	.word	0x200000c1
 8000e58:	200000c3 	.word	0x200000c3
 8000e5c:	50000800 	.word	0x50000800

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b093      	sub	sp, #76	@ 0x4c
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	2410      	movs	r4, #16
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2338      	movs	r3, #56	@ 0x38
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f007 fe13 	bl	8008a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e76:	003b      	movs	r3, r7
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f007 fe0c 	bl	8008a9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f003 f851 	bl	8003f30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	0052      	lsls	r2, r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2240      	movs	r2, #64	@ 0x40
 8000ea8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2202      	movs	r2, #2
 8000eae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	0292      	lsls	r2, r2, #10
 8000ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	22c0      	movs	r2, #192	@ 0xc0
 8000ece:	04d2      	lsls	r2, r2, #19
 8000ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2280      	movs	r2, #128	@ 0x80
 8000ed6:	0592      	lsls	r2, r2, #22
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	0018      	movs	r0, r3
 8000ede:	f003 f873 	bl	8003fc8 <HAL_RCC_OscConfig>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ee6:	f000 fcf1 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	003b      	movs	r3, r7
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	003b      	movs	r3, r7
 8000f04:	2100      	movs	r1, #0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f003 fb78 	bl	80045fc <HAL_RCC_ClockConfig>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f10:	f000 fcdc 	bl	80018cc <Error_Handler>
  }
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b013      	add	sp, #76	@ 0x4c
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2011      	movs	r0, #17
 8000f26:	f002 f981 	bl	800322c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000f2a:	2011      	movs	r0, #17
 8000f2c:	f002 f993 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2100      	movs	r1, #0
 8000f34:	2009      	movs	r0, #9
 8000f36:	f002 f979 	bl	800322c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f3a:	2009      	movs	r0, #9
 8000f3c:	f002 f98b 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2010      	movs	r0, #16
 8000f46:	f002 f971 	bl	800322c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f4a:	2010      	movs	r0, #16
 8000f4c:	f002 f983 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	201c      	movs	r0, #28
 8000f56:	f002 f969 	bl	800322c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f002 f97b 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	0018      	movs	r0, r3
 8000f72:	230c      	movs	r3, #12
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f007 fd90 	bl	8008a9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7c:	4b55      	ldr	r3, [pc, #340]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f7e:	4a56      	ldr	r2, [pc, #344]	@ (80010d8 <MX_ADC1_Init+0x170>)
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000f82:	4b54      	ldr	r3, [pc, #336]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f84:	22a0      	movs	r2, #160	@ 0xa0
 8000f86:	0352      	lsls	r2, r2, #13
 8000f88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8a:	4b52      	ldr	r3, [pc, #328]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b50      	ldr	r3, [pc, #320]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f96:	4b4f      	ldr	r3, [pc, #316]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0392      	lsls	r2, r2, #14
 8000f9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000faa:	4b4a      	ldr	r3, [pc, #296]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb0:	4b48      	ldr	r3, [pc, #288]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 6;
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fb8:	2206      	movs	r2, #6
 8000fba:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000fbc:	4b45      	ldr	r3, [pc, #276]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fbe:	22a8      	movs	r2, #168	@ 0xa8
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fc4:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fcc:	4b41      	ldr	r3, [pc, #260]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fce:	222c      	movs	r2, #44	@ 0x2c
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000fda:	4b3e      	ldr	r3, [pc, #248]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fdc:	2205      	movs	r2, #5
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fe8:	223c      	movs	r2, #60	@ 0x3c
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fee:	4b39      	ldr	r3, [pc, #228]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff4:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 fa8c 	bl	8002514 <HAL_ADC_Init>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001000:	f000 fc64 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f001 fc21 	bl	8002864 <HAL_ADC_ConfigChannel>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001026:	f000 fc51 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4a2b      	ldr	r2, [pc, #172]	@ (80010dc <MX_ADC1_Init+0x174>)
 800102e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2204      	movs	r2, #4
 8001034:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fc11 	bl	8002864 <HAL_ADC_ConfigChannel>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001046:	f000 fc41 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <MX_ADC1_Init+0x178>)
 800104e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2208      	movs	r2, #8
 8001054:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	1d3a      	adds	r2, r7, #4
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fc01 	bl	8002864 <HAL_ADC_ConfigChannel>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001066:	f000 fc31 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <MX_ADC1_Init+0x17c>)
 800106e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	220c      	movs	r2, #12
 8001074:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fbf1 	bl	8002864 <HAL_ADC_ConfigChannel>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001086:	f000 fc21 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4a16      	ldr	r2, [pc, #88]	@ (80010e8 <MX_ADC1_Init+0x180>)
 800108e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2210      	movs	r2, #16
 8001094:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	1d3a      	adds	r2, r7, #4
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f001 fbe1 	bl	8002864 <HAL_ADC_ConfigChannel>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80010a6:	f000 fc11 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <MX_ADC1_Init+0x184>)
 80010ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2214      	movs	r2, #20
 80010b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b6:	1d3a      	adds	r2, r7, #4
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 fbd1 	bl	8002864 <HAL_ADC_ConfigChannel>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80010c6:	f000 fc01 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	200000ec 	.word	0x200000ec
 80010d8:	40012400 	.word	0x40012400
 80010dc:	04000002 	.word	0x04000002
 80010e0:	0c000008 	.word	0x0c000008
 80010e4:	20000100 	.word	0x20000100
 80010e8:	24000200 	.word	0x24000200
 80010ec:	28000400 	.word	0x28000400

080010f0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_COMP2_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	@ (800114c <MX_COMP2_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_COMP2_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001102:	2240      	movs	r2, #64	@ 0x40
 8001104:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_COMP2_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_COMP2_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_COMP2_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fe1a 	bl	8002d6c <HAL_COMP_Init>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_COMP2_Init+0x50>
  {
    Error_Handler();
 800113c:	f000 fbc6 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	200001ac 	.word	0x200001ac
 800114c:	40010204 	.word	0x40010204

08001150 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	0018      	movs	r0, r3
 800115a:	2324      	movs	r3, #36	@ 0x24
 800115c:	001a      	movs	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	f007 fc9c 	bl	8008a9c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_DAC1_Init+0x64>)
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <MX_DAC1_Init+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_DAC1_Init+0x64>)
 800116c:	0018      	movs	r0, r3
 800116e:	f002 f88f 	bl	8003290 <HAL_DAC_Init>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8001176:	f000 fba9 	bl	80018cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2202      	movs	r2, #2
 800118a:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2201      	movs	r2, #1
 8001190:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001198:	1d39      	adds	r1, r7, #4
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_DAC1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 f97c 	bl	800349c <HAL_DAC_ConfigChannel>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fb90 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b00a      	add	sp, #40	@ 0x28
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001dc 	.word	0x200001dc
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09a      	sub	sp, #104	@ 0x68
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	235c      	movs	r3, #92	@ 0x5c
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	0018      	movs	r0, r3
 80011c8:	230c      	movs	r3, #12
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f007 fc65 	bl	8008a9c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80011d2:	2350      	movs	r3, #80	@ 0x50
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	0018      	movs	r0, r3
 80011d8:	230c      	movs	r3, #12
 80011da:	001a      	movs	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	f007 fc5d 	bl	8008a9c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	2334      	movs	r3, #52	@ 0x34
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	0018      	movs	r0, r3
 80011e8:	231c      	movs	r3, #28
 80011ea:	001a      	movs	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f007 fc55 	bl	8008a9c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f2:	003b      	movs	r3, r7
 80011f4:	0018      	movs	r0, r3
 80011f6:	2334      	movs	r3, #52	@ 0x34
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f007 fc4e 	bl	8008a9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001200:	4b50      	ldr	r3, [pc, #320]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001202:	4a51      	ldr	r2, [pc, #324]	@ (8001348 <MX_TIM1_Init+0x18c>)
 8001204:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001206:	4b4f      	ldr	r3, [pc, #316]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b4d      	ldr	r3, [pc, #308]	@ (8001344 <MX_TIM1_Init+0x188>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320;
 8001212:	4b4c      	ldr	r3, [pc, #304]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001214:	22a0      	movs	r2, #160	@ 0xa0
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b4a      	ldr	r3, [pc, #296]	@ (8001344 <MX_TIM1_Init+0x188>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001220:	4b48      	ldr	r3, [pc, #288]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001226:	4b47      	ldr	r3, [pc, #284]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800122c:	4b45      	ldr	r3, [pc, #276]	@ (8001344 <MX_TIM1_Init+0x188>)
 800122e:	0018      	movs	r0, r3
 8001230:	f003 fdfa 	bl	8004e28 <HAL_TIM_PWM_Init>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001238:	f000 fb48 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	215c      	movs	r1, #92	@ 0x5c
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001250:	187a      	adds	r2, r7, r1
 8001252:	4b3c      	ldr	r3, [pc, #240]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f005 f84a 	bl	80062f0 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001260:	f000 fb34 	bl	80018cc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001264:	2150      	movs	r1, #80	@ 0x50
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2201      	movs	r2, #1
 8001270:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001278:	187a      	adds	r2, r7, r1
 800127a:	4b32      	ldr	r3, [pc, #200]	@ (8001344 <MX_TIM1_Init+0x188>)
 800127c:	2101      	movs	r1, #1
 800127e:	0018      	movs	r0, r3
 8001280:	f005 f940 	bl	8006504 <HAL_TIMEx_ConfigBreakInput>
 8001284:	1e03      	subs	r3, r0, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001288:	f000 fb20 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2134      	movs	r1, #52	@ 0x34
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2260      	movs	r2, #96	@ 0x60
 8001292:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	1879      	adds	r1, r7, r1
 80012ba:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_TIM1_Init+0x188>)
 80012bc:	2200      	movs	r2, #0
 80012be:	0018      	movs	r0, r3
 80012c0:	f004 f8f8 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012c8:	f000 fb00 	bl	80018cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012cc:	003b      	movs	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d2:	003b      	movs	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d8:	003b      	movs	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012de:	003b      	movs	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	0152      	lsls	r2, r2, #5
 80012ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80012ec:	003b      	movs	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012f2:	003b      	movs	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012f8:	003b      	movs	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012fe:	003b      	movs	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001304:	003b      	movs	r3, r7
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	0492      	lsls	r2, r2, #18
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800130c:	003b      	movs	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001312:	003b      	movs	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001318:	003b      	movs	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800131e:	003a      	movs	r2, r7
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f005 f851 	bl	80063cc <HAL_TIMEx_ConfigBreakDeadTime>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 800132e:	f000 facd 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <MX_TIM1_Init+0x188>)
 8001334:	0018      	movs	r0, r3
 8001336:	f000 fcfb 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b01a      	add	sp, #104	@ 0x68
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	200001f0 	.word	0x200001f0
 8001348:	40012c00 	.word	0x40012c00

0800134c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	231c      	movs	r3, #28
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	0018      	movs	r0, r3
 8001358:	230c      	movs	r3, #12
 800135a:	001a      	movs	r2, r3
 800135c:	2100      	movs	r1, #0
 800135e:	f007 fb9d 	bl	8008a9c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	003b      	movs	r3, r7
 8001364:	0018      	movs	r0, r3
 8001366:	231c      	movs	r3, #28
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f007 fb96 	bl	8008a9c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <MX_TIM2_Init+0xbc>)
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	05d2      	lsls	r2, r2, #23
 8001376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <MX_TIM2_Init+0xbc>)
 800137a:	2210      	movs	r2, #16
 800137c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_TIM2_Init+0xbc>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <MX_TIM2_Init+0xbc>)
 8001386:	22fa      	movs	r2, #250	@ 0xfa
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <MX_TIM2_Init+0xbc>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_TIM2_Init+0xbc>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_TIM2_Init+0xbc>)
 800139a:	0018      	movs	r0, r3
 800139c:	f003 fd44 	bl	8004e28 <HAL_TIM_PWM_Init>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 fa92 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	211c      	movs	r1, #28
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b6:	187a      	adds	r2, r7, r1
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_TIM2_Init+0xbc>)
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f004 ff97 	bl	80062f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013c6:	f000 fa81 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	003b      	movs	r3, r7
 80013cc:	2260      	movs	r2, #96	@ 0x60
 80013ce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80013d0:	003b      	movs	r3, r7
 80013d2:	22fa      	movs	r2, #250	@ 0xfa
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	003b      	movs	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	003b      	movs	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e4:	0039      	movs	r1, r7
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_TIM2_Init+0xbc>)
 80013e8:	2208      	movs	r2, #8
 80013ea:	0018      	movs	r0, r3
 80013ec:	f004 f862 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013f4:	f000 fa6a 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <MX_TIM2_Init+0xbc>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 fc98 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b00a      	add	sp, #40	@ 0x28
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000023c 	.word	0x2000023c

0800140c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	@ 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001412:	231c      	movs	r3, #28
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	0018      	movs	r0, r3
 8001418:	2314      	movs	r3, #20
 800141a:	001a      	movs	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f007 fb3d 	bl	8008a9c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001422:	230c      	movs	r3, #12
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	0018      	movs	r0, r3
 8001428:	2310      	movs	r3, #16
 800142a:	001a      	movs	r2, r3
 800142c:	2100      	movs	r1, #0
 800142e:	f007 fb35 	bl	8008a9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001432:	003b      	movs	r3, r7
 8001434:	0018      	movs	r0, r3
 8001436:	230c      	movs	r3, #12
 8001438:	001a      	movs	r2, r3
 800143a:	2100      	movs	r1, #0
 800143c:	f007 fb2e 	bl	8008a9c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001442:	4a38      	ldr	r2, [pc, #224]	@ (8001524 <MX_TIM3_Init+0x118>)
 8001444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <MX_TIM3_Init+0x114>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001454:	4a34      	ldr	r2, [pc, #208]	@ (8001528 <MX_TIM3_Init+0x11c>)
 8001456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <MX_TIM3_Init+0x114>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001464:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001466:	0018      	movs	r0, r3
 8001468:	f003 fe20 	bl	80050ac <HAL_TIM_IC_Init>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001470:	f000 fa2c 	bl	80018cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001474:	211c      	movs	r1, #28
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2204      	movs	r2, #4
 800147a:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2260      	movs	r2, #96	@ 0x60
 8001480:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001494:	187a      	adds	r2, r7, r1
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001498:	0011      	movs	r1, r2
 800149a:	0018      	movs	r0, r3
 800149c:	f004 f90a 	bl	80056b4 <HAL_TIM_SlaveConfigSynchro>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014a4:	f000 fa12 	bl	80018cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014a8:	210c      	movs	r1, #12
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2202      	movs	r2, #2
 80014b4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c2:	1879      	adds	r1, r7, r1
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_TIM3_Init+0x114>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	0018      	movs	r0, r3
 80014ca:	f003 ff4f 	bl	800536c <HAL_TIM_IC_ConfigChannel>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80014d2:	f000 f9fb 	bl	80018cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014d6:	210c      	movs	r1, #12
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2201      	movs	r2, #1
 80014e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	1879      	adds	r1, r7, r1
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_TIM3_Init+0x114>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 ff3e 	bl	800536c <HAL_TIM_IC_ConfigChannel>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014f4:	f000 f9ea 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	003b      	movs	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	003b      	movs	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001504:	003a      	movs	r2, r7
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_TIM3_Init+0x114>)
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f004 fef0 	bl	80062f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8001514:	f000 f9da 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b00c      	add	sp, #48	@ 0x30
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000288 	.word	0x20000288
 8001524:	40000400 	.word	0x40000400
 8001528:	0000ffff 	.word	0x0000ffff

0800152c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	0018      	movs	r0, r3
 8001536:	230c      	movs	r3, #12
 8001538:	001a      	movs	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f007 faae 	bl	8008a9c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <MX_TIM6_Init+0x6c>)
 8001542:	4a16      	ldr	r2, [pc, #88]	@ (800159c <MX_TIM6_Init+0x70>)
 8001544:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_TIM6_Init+0x6c>)
 8001548:	2210      	movs	r2, #16
 800154a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_TIM6_Init+0x6c>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_TIM6_Init+0x6c>)
 8001554:	22fa      	movs	r2, #250	@ 0xfa
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_TIM6_Init+0x6c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <MX_TIM6_Init+0x6c>)
 8001562:	0018      	movs	r0, r3
 8001564:	f003 fbac 	bl	8004cc0 <HAL_TIM_Base_Init>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800156c:	f000 f9ae 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2220      	movs	r2, #32
 8001574:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800157c:	1d3a      	adds	r2, r7, #4
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_TIM6_Init+0x6c>)
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f004 feb4 	bl	80062f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	1e03      	subs	r3, r0, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800158c:	f000 f99e 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001590:	46c0      	nop			@ (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200002d4 	.word	0x200002d4
 800159c:	40001000 	.word	0x40001000

080015a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	@ 0x50
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	2334      	movs	r3, #52	@ 0x34
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	0018      	movs	r0, r3
 80015ac:	231c      	movs	r3, #28
 80015ae:	001a      	movs	r2, r3
 80015b0:	2100      	movs	r1, #0
 80015b2:	f007 fa73 	bl	8008a9c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b6:	003b      	movs	r3, r7
 80015b8:	0018      	movs	r0, r3
 80015ba:	2334      	movs	r3, #52	@ 0x34
 80015bc:	001a      	movs	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	f007 fa6c 	bl	8008a9c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015c4:	4b37      	ldr	r3, [pc, #220]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015c6:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <MX_TIM16_Init+0x108>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80015ca:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80015d6:	4b33      	ldr	r3, [pc, #204]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015d8:	4a34      	ldr	r2, [pc, #208]	@ (80016ac <MX_TIM16_Init+0x10c>)
 80015da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015e2:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <MX_TIM16_Init+0x104>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f003 fb65 	bl	8004cc0 <HAL_TIM_Base_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80015fa:	f000 f967 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80015fe:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <MX_TIM16_Init+0x104>)
 8001600:	0018      	movs	r0, r3
 8001602:	f003 fc11 	bl	8004e28 <HAL_TIM_PWM_Init>
 8001606:	1e03      	subs	r3, r0, #0
 8001608:	d001      	beq.n	800160e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800160a:	f000 f95f 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2134      	movs	r1, #52	@ 0x34
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2260      	movs	r2, #96	@ 0x60
 8001614:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163a:	1879      	adds	r1, r7, r1
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <MX_TIM16_Init+0x104>)
 800163e:	2200      	movs	r2, #0
 8001640:	0018      	movs	r0, r3
 8001642:	f003 ff37 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800164a:	f000 f93f 	bl	80018cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800164e:	003b      	movs	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001654:	003b      	movs	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800165a:	003b      	movs	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001660:	003b      	movs	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001666:	003b      	movs	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800166c:	003b      	movs	r3, r7
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	0192      	lsls	r2, r2, #6
 8001672:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001674:	003b      	movs	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167a:	003b      	movs	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001680:	003a      	movs	r2, r7
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_TIM16_Init+0x104>)
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f004 fea0 	bl	80063cc <HAL_TIMEx_ConfigBreakDeadTime>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001690:	f000 f91c 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <MX_TIM16_Init+0x104>)
 8001696:	0018      	movs	r0, r3
 8001698:	f000 fb4a 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b014      	add	sp, #80	@ 0x50
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000320 	.word	0x20000320
 80016a8:	40014400 	.word	0x40014400
 80016ac:	0000ffff 	.word	0x0000ffff

080016b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b4:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016b6:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <MX_USART2_UART_Init+0x98>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016bc:	22e1      	movs	r2, #225	@ 0xe1
 80016be:	0252      	lsls	r2, r2, #9
 80016c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f004 ffc6 	bl	800668c <HAL_UART_Init>
 8001700:	1e03      	subs	r3, r0, #0
 8001702:	d001      	beq.n	8001708 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 f8e2 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 800170a:	2100      	movs	r1, #0
 800170c:	0018      	movs	r0, r3
 800170e:	f007 f813 	bl	8008738 <HAL_UARTEx_SetTxFifoThreshold>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001716:	f000 f8d9 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 800171c:	2100      	movs	r1, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f007 f84a 	bl	80087b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001724:	1e03      	subs	r3, r0, #0
 8001726:	d001      	beq.n	800172c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001728:	f000 f8d0 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <MX_USART2_UART_Init+0x94>)
 800172e:	0018      	movs	r0, r3
 8001730:	f006 ffc8 	bl	80086c4 <HAL_UARTEx_DisableFifoMode>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d001      	beq.n	800173c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001738:	f000 f8c8 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	2000036c 	.word	0x2000036c
 8001748:	40004400 	.word	0x40004400

0800174c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_DMA_Init+0x28>)
 8001754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <MX_DMA_Init+0x28>)
 8001758:	2101      	movs	r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	639a      	str	r2, [r3, #56]	@ 0x38
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <MX_DMA_Init+0x28>)
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	40021000 	.word	0x40021000

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	240c      	movs	r4, #12
 8001780:	193b      	adds	r3, r7, r4
 8001782:	0018      	movs	r0, r3
 8001784:	2314      	movs	r3, #20
 8001786:	001a      	movs	r2, r3
 8001788:	2100      	movs	r1, #0
 800178a:	f007 f987 	bl	8008a9c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b4c      	ldr	r3, [pc, #304]	@ (80018c0 <MX_GPIO_Init+0x148>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001792:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <MX_GPIO_Init+0x148>)
 8001794:	2102      	movs	r1, #2
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <MX_GPIO_Init+0x148>)
 800179c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b46      	ldr	r3, [pc, #280]	@ (80018c0 <MX_GPIO_Init+0x148>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017aa:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <MX_GPIO_Init+0x148>)
 80017ac:	2104      	movs	r1, #4
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017b2:	4b43      	ldr	r3, [pc, #268]	@ (80018c0 <MX_GPIO_Init+0x148>)
 80017b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b6:	2204      	movs	r2, #4
 80017b8:	4013      	ands	r3, r2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <MX_GPIO_Init+0x148>)
 80017c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017c2:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <MX_GPIO_Init+0x148>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ca:	4b3d      	ldr	r3, [pc, #244]	@ (80018c0 <MX_GPIO_Init+0x148>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017d6:	2380      	movs	r3, #128	@ 0x80
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	483a      	ldr	r0, [pc, #232]	@ (80018c4 <MX_GPIO_Init+0x14c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	0019      	movs	r1, r3
 80017e0:	f002 fb6d 	bl	8003ebe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 80017e4:	23a0      	movs	r3, #160	@ 0xa0
 80017e6:	05db      	lsls	r3, r3, #23
 80017e8:	2200      	movs	r2, #0
 80017ea:	2180      	movs	r1, #128	@ 0x80
 80017ec:	0018      	movs	r0, r3
 80017ee:	f002 fb66 	bl	8003ebe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 80017f2:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <MX_GPIO_Init+0x150>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	2140      	movs	r1, #64	@ 0x40
 80017f8:	0018      	movs	r0, r3
 80017fa:	f002 fb60 	bl	8003ebe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCU_Remote_Pin */
  GPIO_InitStruct.Pin = MCU_Remote_Pin;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180c:	193b      	adds	r3, r7, r4
 800180e:	2201      	movs	r2, #1
 8001810:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 8001812:	193b      	adds	r3, r7, r4
 8001814:	4a2c      	ldr	r2, [pc, #176]	@ (80018c8 <MX_GPIO_Init+0x150>)
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f002 f9cf 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800181e:	0021      	movs	r1, r4
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2280      	movs	r2, #128	@ 0x80
 8001824:	0212      	lsls	r2, r2, #8
 8001826:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	000c      	movs	r4, r1
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2201      	movs	r2, #1
 800182e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800183c:	193b      	adds	r3, r7, r4
 800183e:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <MX_GPIO_Init+0x14c>)
 8001840:	0019      	movs	r1, r3
 8001842:	0010      	movs	r0, r2
 8001844:	f002 f9ba 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_Pin */
  GPIO_InitStruct.Pin = Status_Pin;
 8001848:	193b      	adds	r3, r7, r4
 800184a:	2280      	movs	r2, #128	@ 0x80
 800184c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2201      	movs	r2, #1
 8001852:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	193b      	adds	r3, r7, r4
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 8001860:	193a      	adds	r2, r7, r4
 8001862:	23a0      	movs	r3, #160	@ 0xa0
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f002 f9a7 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	2280      	movs	r2, #128	@ 0x80
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	193b      	adds	r3, r7, r4
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	193b      	adds	r3, r7, r4
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001882:	193a      	adds	r2, r7, r4
 8001884:	23a0      	movs	r3, #160	@ 0xa0
 8001886:	05db      	lsls	r3, r3, #23
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f002 f996 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : UV_LED_Pin */
  GPIO_InitStruct.Pin = UV_LED_Pin;
 8001890:	0021      	movs	r1, r4
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2240      	movs	r2, #64	@ 0x40
 8001896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2201      	movs	r2, #1
 800189c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <MX_GPIO_Init+0x150>)
 80018ae:	0019      	movs	r1, r3
 80018b0:	0010      	movs	r0, r2
 80018b2:	f002 f983 	bl	8003bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b009      	add	sp, #36	@ 0x24
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000
 80018c4:	50000800 	.word	0x50000800
 80018c8:	50000400 	.word	0x50000400

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <Error_Handler+0x24>)
 80018da:	0019      	movs	r1, r3
 80018dc:	0010      	movs	r0, r2
 80018de:	f002 fb0b 	bl	8003ef8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80018e2:	23fa      	movs	r3, #250	@ 0xfa
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 fcf2 	bl	80022d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80018ec:	46c0      	nop			@ (mov r8, r8)
 80018ee:	e7f1      	b.n	80018d4 <Error_Handler+0x8>
 80018f0:	50000800 	.word	0x50000800

080018f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_MspInit+0x44>)
 80018fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_MspInit+0x44>)
 8001900:	2101      	movs	r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <HAL_MspInit+0x44>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	2201      	movs	r2, #1
 800190c:	4013      	ands	r3, r2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_MspInit+0x44>)
 8001914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_MspInit+0x44>)
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	0549      	lsls	r1, r1, #21
 800191c:	430a      	orrs	r2, r1
 800191e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_MspInit+0x44>)
 8001922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	055b      	lsls	r3, r3, #21
 8001928:	4013      	ands	r3, r2
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b099      	sub	sp, #100	@ 0x64
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	234c      	movs	r3, #76	@ 0x4c
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	0018      	movs	r0, r3
 800194a:	2314      	movs	r3, #20
 800194c:	001a      	movs	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	f007 f8a4 	bl	8008a9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001954:	2418      	movs	r4, #24
 8001956:	193b      	adds	r3, r7, r4
 8001958:	0018      	movs	r0, r3
 800195a:	2334      	movs	r3, #52	@ 0x34
 800195c:	001a      	movs	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	f007 f89c 	bl	8008a9c <memset>
  if(hadc->Instance==ADC1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a44      	ldr	r2, [pc, #272]	@ (8001a7c <HAL_ADC_MspInit+0x140>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d000      	beq.n	8001970 <HAL_ADC_MspInit+0x34>
 800196e:	e080      	b.n	8001a72 <HAL_ADC_MspInit+0x136>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	01d2      	lsls	r2, r2, #7
 8001976:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8001978:	193b      	adds	r3, r7, r4
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	05d2      	lsls	r2, r2, #23
 800197e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001980:	193b      	adds	r3, r7, r4
 8001982:	0018      	movs	r0, r3
 8001984:	f002 ffe4 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 800198c:	f7ff ff9e 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001990:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 8001992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001994:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 8001996:	2180      	movs	r1, #128	@ 0x80
 8001998:	0349      	lsls	r1, r1, #13
 800199a:	430a      	orrs	r2, r1
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
 800199e:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	035b      	lsls	r3, r3, #13
 80019a6:	4013      	ands	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b0:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b8:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019ca:	2102      	movs	r1, #2
 80019cc:	430a      	orrs	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_ADC_MspInit+0x144>)
 80019d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 80019dc:	244c      	movs	r4, #76	@ 0x4c
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	220b      	movs	r2, #11
 80019e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	2203      	movs	r2, #3
 80019e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	193a      	adds	r2, r7, r4
 80019f2:	23a0      	movs	r3, #160	@ 0xa0
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f002 f8df 	bl	8003bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2203      	movs	r2, #3
 8001a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_ADC_MspInit+0x148>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f002 f8d0 	bl	8003bbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <HAL_ADC_MspInit+0x150>)
 8001a20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a24:	2205      	movs	r2, #5
 8001a26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a36:	2280      	movs	r2, #128	@ 0x80
 8001a38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	0052      	lsls	r2, r2, #1
 8001a40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	00d2      	lsls	r2, r2, #3
 8001a48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f001 fe57 	bl	800370c <HAL_DMA_Init>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001a62:	f7ff ff33 	bl	80018cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b019      	add	sp, #100	@ 0x64
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	40012400 	.word	0x40012400
 8001a80:	40021000 	.word	0x40021000
 8001a84:	50000400 	.word	0x50000400
 8001a88:	20000150 	.word	0x20000150
 8001a8c:	40020008 	.word	0x40020008

08001a90 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	240c      	movs	r4, #12
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	2314      	movs	r3, #20
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f006 fffa 	bl	8008a9c <memset>
  if(hcomp->Instance==COMP2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a10      	ldr	r2, [pc, #64]	@ (8001af0 <HAL_COMP_MspInit+0x60>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d11a      	bne.n	8001ae8 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_COMP_MspInit+0x64>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_COMP_MspInit+0x64>)
 8001ab8:	2102      	movs	r1, #2
 8001aba:	430a      	orrs	r2, r1
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001abe:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <HAL_COMP_MspInit+0x64>)
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	2210      	movs	r2, #16
 8001ace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	4a06      	ldr	r2, [pc, #24]	@ (8001af8 <HAL_COMP_MspInit+0x68>)
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	f002 f86a 	bl	8003bbc <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b009      	add	sp, #36	@ 0x24
 8001aee:	bd90      	pop	{r4, r7, pc}
 8001af0:	40010204 	.word	0x40010204
 8001af4:	40021000 	.word	0x40021000
 8001af8:	50000400 	.word	0x50000400

08001afc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_DAC_MspInit+0x38>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_DAC_MspInit+0x2e>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_DAC_MspInit+0x3c>)
 8001b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_DAC_MspInit+0x3c>)
 8001b14:	2180      	movs	r1, #128	@ 0x80
 8001b16:	0589      	lsls	r1, r1, #22
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_DAC_MspInit+0x3c>)
 8001b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	059b      	lsls	r3, r3, #22
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	40007400 	.word	0x40007400
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b099      	sub	sp, #100	@ 0x64
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	234c      	movs	r3, #76	@ 0x4c
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	0018      	movs	r0, r3
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f006 ffa4 	bl	8008a9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b54:	2418      	movs	r4, #24
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	0018      	movs	r0, r3
 8001b5a:	2334      	movs	r3, #52	@ 0x34
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f006 ff9c 	bl	8008a9c <memset>
  if(htim_pwm->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d140      	bne.n	8001bf0 <HAL_TIM_PWM_MspInit+0xb4>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	0392      	lsls	r2, r2, #14
 8001b74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f002 fee6 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 8001b88:	f7ff fea0 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b90:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	0109      	lsls	r1, r1, #4
 8001b96:	430a      	orrs	r2, r1
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bc0:	214c      	movs	r1, #76	@ 0x4c
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2240      	movs	r2, #64	@ 0x40
 8001bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2212      	movs	r2, #18
 8001bcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2202      	movs	r2, #2
 8001bde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	187a      	adds	r2, r7, r1
 8001be2:	23a0      	movs	r3, #160	@ 0xa0
 8001be4:	05db      	lsls	r3, r3, #23
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f001 ffe7 	bl	8003bbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bee:	e011      	b.n	8001c14 <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	05db      	lsls	r3, r3, #23
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10b      	bne.n	8001c14 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c00:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_TIM_PWM_MspInit+0xe4>)
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b019      	add	sp, #100	@ 0x64
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08b      	sub	sp, #44	@ 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	2414      	movs	r4, #20
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	0018      	movs	r0, r3
 8001c32:	2314      	movs	r3, #20
 8001c34:	001a      	movs	r2, r3
 8001c36:	2100      	movs	r1, #0
 8001c38:	f006 ff30 	bl	8008a9c <memset>
  if(htim_ic->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <HAL_TIM_IC_MspInit+0x88>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12d      	bne.n	8001ca2 <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001c64:	2102      	movs	r1, #2
 8001c66:	430a      	orrs	r2, r1
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8001c76:	0021      	movs	r1, r4
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2202      	movs	r2, #2
 8001c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2201      	movs	r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_TIM_IC_MspInit+0x90>)
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	f001 ff8d 	bl	8003bbc <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b00b      	add	sp, #44	@ 0x2c
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	50000400 	.word	0x50000400

08001cb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_TIM_Base_MspInit+0x70>)
 8001ccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_TIM_Base_MspInit+0x70>)
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_TIM_Base_MspInit+0x70>)
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cda:	2210      	movs	r2, #16
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ce2:	e01a      	b.n	8001d1a <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_TIM_Base_MspInit+0x74>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d115      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_TIM_Base_MspInit+0x70>)
 8001cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_TIM_Base_MspInit+0x70>)
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	0289      	lsls	r1, r1, #10
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_TIM_Base_MspInit+0x70>)
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	029b      	lsls	r3, r3, #10
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2015      	movs	r0, #21
 8001d10:	f001 fa8c 	bl	800322c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001d14:	2015      	movs	r0, #21
 8001d16:	f001 fa9e 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	40001000 	.word	0x40001000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40014400 	.word	0x40014400

08001d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	2414      	movs	r4, #20
 8001d3a:	193b      	adds	r3, r7, r4
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	2314      	movs	r3, #20
 8001d40:	001a      	movs	r2, r3
 8001d42:	2100      	movs	r1, #0
 8001d44:	f006 feaa 	bl	8008a9c <memset>
  if(htim->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e48 <HAL_TIM_MspPostInit+0x118>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d124      	bne.n	8001d9c <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	2280      	movs	r2, #128	@ 0x80
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	0021      	movs	r1, r4
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2202      	movs	r2, #2
 8001d78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2203      	movs	r2, #3
 8001d84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2202      	movs	r2, #2
 8001d8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	187a      	adds	r2, r7, r1
 8001d8e:	23a0      	movs	r3, #160	@ 0xa0
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	0011      	movs	r1, r2
 8001d94:	0018      	movs	r0, r3
 8001d96:	f001 ff11 	bl	8003bbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM16_MspPostInit 1 */

    /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001d9a:	e050      	b.n	8001e3e <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	05db      	lsls	r3, r3, #23
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d122      	bne.n	8001dee <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001dae:	2104      	movs	r1, #4
 8001db0:	430a      	orrs	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001dc0:	2114      	movs	r1, #20
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2240      	movs	r2, #64	@ 0x40
 8001dc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2202      	movs	r2, #2
 8001dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2202      	movs	r2, #2
 8001dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <HAL_TIM_MspPostInit+0x120>)
 8001de4:	0019      	movs	r1, r3
 8001de6:	0010      	movs	r0, r2
 8001de8:	f001 fee8 	bl	8003bbc <HAL_GPIO_Init>
}
 8001dec:	e027      	b.n	8001e3e <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM16)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a18      	ldr	r2, [pc, #96]	@ (8001e54 <HAL_TIM_MspPostInit+0x124>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d122      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001dfe:	2102      	movs	r1, #2
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_TIM_MspPostInit+0x11c>)
 8001e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MASK_Pin;
 8001e10:	2114      	movs	r1, #20
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	0052      	lsls	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2202      	movs	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MASK_GPIO_Port, &GPIO_InitStruct);
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	4a08      	ldr	r2, [pc, #32]	@ (8001e58 <HAL_TIM_MspPostInit+0x128>)
 8001e36:	0019      	movs	r1, r3
 8001e38:	0010      	movs	r0, r2
 8001e3a:	f001 febf 	bl	8003bbc <HAL_GPIO_Init>
}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b00b      	add	sp, #44	@ 0x2c
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	50000800 	.word	0x50000800
 8001e54:	40014400 	.word	0x40014400
 8001e58:	50000400 	.word	0x50000400

08001e5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b097      	sub	sp, #92	@ 0x5c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	2344      	movs	r3, #68	@ 0x44
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	0018      	movs	r0, r3
 8001e6a:	2314      	movs	r3, #20
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f006 fe14 	bl	8008a9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e74:	2410      	movs	r4, #16
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	0018      	movs	r0, r3
 8001e7a:	2334      	movs	r3, #52	@ 0x34
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f006 fe0c 	bl	8008a9c <memset>
  if(huart->Instance==USART2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_UART_MspInit+0xb8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d13e      	bne.n	8001f0c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	2208      	movs	r2, #8
 8001e98:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f002 fd57 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ea6:	f7ff fd11 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eae:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	0289      	lsls	r1, r1, #10
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001ede:	2144      	movs	r1, #68	@ 0x44
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <HAL_UART_MspInit+0xc0>)
 8001ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2202      	movs	r2, #2
 8001eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2201      	movs	r2, #1
 8001efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	187a      	adds	r2, r7, r1
 8001f00:	23a0      	movs	r3, #160	@ 0xa0
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 fe58 	bl	8003bbc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b017      	add	sp, #92	@ 0x5c
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	00008004 	.word	0x00008004

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	e7fd      	b.n	8001f2c <HardFault_Handler+0x4>

08001f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 f9a6 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f5a:	4b30      	ldr	r3, [pc, #192]	@ (800201c <DMA1_Channel1_IRQHandler+0xc8>)
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f001 fd2b 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
  for (iADCchannels = 0; iADCchannels < numberADCchannels; iADCchannels++) {
 8001f62:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e02f      	b.n	8001fca <DMA1_Channel1_IRQHandler+0x76>
	    uint32_t old_val = adc_buffer[iADCchannels];
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	001a      	movs	r2, r3
 8001f70:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8001f72:	0052      	lsls	r2, r2, #1
 8001f74:	5ad3      	ldrh	r3, [r2, r3]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	607b      	str	r3, [r7, #4]
	    uint32_t new_val = adc_DMA[iADCchannels];
 8001f7a:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <DMA1_Channel1_IRQHandler+0xd4>)
 8001f82:	0052      	lsls	r2, r2, #1
 8001f84:	5ad3      	ldrh	r3, [r2, r3]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	603b      	str	r3, [r7, #0]

	    // "second order" EMA
	    old_val = (old_val * 7 + new_val+4) >> 3;  // Weighted average: (old_val * 7/8 + new_val*1/8)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9a      	subs	r2, r3, r2
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	3304      	adds	r3, #4
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	607b      	str	r3, [r7, #4]
	    old_val = (old_val * 7 + new_val+4) >> 3;  // Weighted average: (old_val * 7/8 + new_val*1/8)
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a9a      	subs	r2, r3, r2
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	18d3      	adds	r3, r2, r3
 8001fa8:	3304      	adds	r3, #4
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	607b      	str	r3, [r7, #4]
	    adc_buffer[iADCchannels] = (uint16_t)old_val;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	b299      	uxth	r1, r3
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8001fba:	0052      	lsls	r2, r2, #1
 8001fbc:	52d1      	strh	r1, [r2, r3]
  for (iADCchannels = 0; iADCchannels < numberADCchannels; iADCchannels++) {
 8001fbe:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <DMA1_Channel1_IRQHandler+0xd8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3c8      	bcc.n	8001f6a <DMA1_Channel1_IRQHandler+0x16>
//	  weightedOldValue = (adc_buffer[iADCchannels][0]*3)>>2; // multiply with 3/4
//	  adc_buffer[iADCchannels][1] = currentMeasurement + weightedOldValue; // new averaged value
//	  adc_buffer[iADCchannels][0] = adc_buffer[iADCchannels][1]; // transfer value from current to old
  }

	adc_24V = adc_buffer[0]; // 4095 = 36.3 V
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <DMA1_Channel1_IRQHandler+0xdc>)
 8001fe0:	801a      	strh	r2, [r3, #0]
	adc_tempMOSFET = adc_buffer[1]; // 2482 = 2V = 90°C
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8001fe4:	885b      	ldrh	r3, [r3, #2]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <DMA1_Channel1_IRQHandler+0xe0>)
 8001fea:	801a      	strh	r2, [r3, #0]
	adc_uSenseLamp = adc_buffer[2];
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8001fee:	889b      	ldrh	r3, [r3, #4]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <DMA1_Channel1_IRQHandler+0xe4>)
 8001ff4:	801a      	strh	r2, [r3, #0]
	adc_iSenseLamp = adc_buffer[3];
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8001ff8:	88db      	ldrh	r3, [r3, #6]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <DMA1_Channel1_IRQHandler+0xe8>)
 8001ffe:	801a      	strh	r2, [r3, #0]
	adc_lampIntensity = adc_buffer[4];
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 8002002:	891b      	ldrh	r3, [r3, #8]
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <DMA1_Channel1_IRQHandler+0xec>)
 8002008:	801a      	strh	r2, [r3, #0]
	adc_iSenseIn = adc_buffer[5]; // 2707 = 24V,  4095 = 0.825 A
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd0>)
 800200c:	895b      	ldrh	r3, [r3, #10]
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <DMA1_Channel1_IRQHandler+0xf0>)
 8002012:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000150 	.word	0x20000150
 8002020:	2000045e 	.word	0x2000045e
 8002024:	200000d4 	.word	0x200000d4
 8002028:	200000c8 	.word	0x200000c8
 800202c:	20000000 	.word	0x20000000
 8002030:	200000e0 	.word	0x200000e0
 8002034:	200000e2 	.word	0x200000e2
 8002038:	200000e4 	.word	0x200000e4
 800203c:	200000e6 	.word	0x200000e6
 8002040:	200000e8 	.word	0x200000e8
 8002044:	200000ea 	.word	0x200000ea

08002048 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <TIM3_IRQHandler+0x14>)
 800204e:	0018      	movs	r0, r3
 8002050:	f003 f884 	bl	800515c <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	20000288 	.word	0x20000288

08002060 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 8002066:	0018      	movs	r0, r3
 8002068:	f003 f878 	bl	800515c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 800206e:	0018      	movs	r0, r3
 8002070:	f001 f988 	bl	8003384 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800207c:	881a      	ldrh	r2, [r3, #0]
 800207e:	23fa      	movs	r3, #250	@ 0xfa
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	429a      	cmp	r2, r3
 8002084:	d206      	bcs.n	8002094 <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002090:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002092:	e00b      	b.n	80020ac <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002096:	881a      	ldrh	r2, [r3, #0]
 8002098:	23fa      	movs	r3, #250	@ 0xfa
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d305      	bcc.n	80020ac <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 80020a6:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
}
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	200002d4 	.word	0x200002d4
 80020b8:	200001dc 	.word	0x200001dc
 80020bc:	200000c5 	.word	0x200000c5
 80020c0:	2000045c 	.word	0x2000045c
 80020c4:	200000c6 	.word	0x200000c6

080020c8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <TIM16_IRQHandler+0x14>)
 80020ce:	0018      	movs	r0, r3
 80020d0:	f003 f844 	bl	800515c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	20000320 	.word	0x20000320

080020e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <USART2_IRQHandler+0x14>)
 80020e6:	0018      	movs	r0, r3
 80020e8:	f004 fc28 	bl	800693c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	2000036c 	.word	0x2000036c

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	18d3      	adds	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f006 fcc0 	bl	8008aac <__errno>
 800212c:	0003      	movs	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	2301      	movs	r3, #1
 8002134:	425b      	negs	r3, r3
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	18d2      	adds	r2, r2, r3
 8002146:	4b05      	ldr	r3, [pc, #20]	@ (800215c <_sbrk+0x64>)
 8002148:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b006      	add	sp, #24
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20009000 	.word	0x20009000
 8002158:	00000400 	.word	0x00000400
 800215c:	20000460 	.word	0x20000460
 8002160:	200005b0 	.word	0x200005b0

08002164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002170:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002172:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002174:	f7ff fff6 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopForever+0x6>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopForever+0xe>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopForever+0x16>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800219e:	f006 fc8b 	bl	8008ab8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021a2:	f7fe fbfd 	bl	80009a0 <main>

080021a6 <LoopForever>:

LoopForever:
  b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   r0, =_estack
 80021a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80021b4:	08009680 	.word	0x08009680
  ldr r2, =_sbss
 80021b8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80021bc:	200005b0 	.word	0x200005b0

080021c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_COMP_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_Init+0x3c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_Init+0x3c>)
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	0049      	lsls	r1, r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021de:	2003      	movs	r0, #3
 80021e0:	f000 f810 	bl	8002204 <HAL_InitTick>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e001      	b.n	80021f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021f0:	f7ff fb80 	bl	80018f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781b      	ldrb	r3, [r3, #0]
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002214:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <HAL_InitTick+0x88>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02b      	beq.n	8002274 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800221c:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <HAL_InitTick+0x8c>)
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_InitTick+0x88>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	0019      	movs	r1, r3
 8002226:	23fa      	movs	r3, #250	@ 0xfa
 8002228:	0098      	lsls	r0, r3, #2
 800222a:	f7fd ff7d 	bl	8000128 <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	0019      	movs	r1, r3
 8002232:	0020      	movs	r0, r4
 8002234:	f7fd ff78 	bl	8000128 <__udivsi3>
 8002238:	0003      	movs	r3, r0
 800223a:	0018      	movs	r0, r3
 800223c:	f001 f81b 	bl	8003276 <HAL_SYSTICK_Config>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d112      	bne.n	800226a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d80a      	bhi.n	8002260 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	2301      	movs	r3, #1
 800224e:	425b      	negs	r3, r3
 8002250:	2200      	movs	r2, #0
 8002252:	0018      	movs	r0, r3
 8002254:	f000 ffea 	bl	800322c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <HAL_InitTick+0x90>)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e00d      	b.n	800227c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002260:	230f      	movs	r3, #15
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e008      	b.n	800227c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800226a:	230f      	movs	r3, #15
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e003      	b.n	800227c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800227c:	230f      	movs	r3, #15
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b005      	add	sp, #20
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	20000050 	.word	0x20000050
 8002290:	20000048 	.word	0x20000048
 8002294:	2000004c 	.word	0x2000004c

08002298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <HAL_IncTick+0x1c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	001a      	movs	r2, r3
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_IncTick+0x20>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	18d2      	adds	r2, r2, r3
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_IncTick+0x20>)
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	20000050 	.word	0x20000050
 80022b8:	20000464 	.word	0x20000464

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b02      	ldr	r3, [pc, #8]	@ (80022cc <HAL_GetTick+0x10>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	20000464 	.word	0x20000464

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff fff0 	bl	80022bc <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	001a      	movs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	f7ff ffe0 	bl	80022bc <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b004      	add	sp, #16
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	20000050 	.word	0x20000050

08002318 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002328:	401a      	ands	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	fe3fffff 	.word	0xfe3fffff

08002340 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	23e0      	movs	r3, #224	@ 0xe0
 800234e:	045b      	lsls	r3, r3, #17
 8002350:	4013      	ands	r3, r2
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}

0800235a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	2104      	movs	r1, #4
 800236e:	400a      	ands	r2, r1
 8002370:	2107      	movs	r1, #7
 8002372:	4091      	lsls	r1, r2
 8002374:	000a      	movs	r2, r1
 8002376:	43d2      	mvns	r2, r2
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2104      	movs	r1, #4
 800237e:	400b      	ands	r3, r1
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4099      	lsls	r1, r3
 8002384:	000b      	movs	r3, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800238c:	46c0      	nop			@ (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}

08002394 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	2104      	movs	r1, #4
 80023a6:	400a      	ands	r2, r1
 80023a8:	2107      	movs	r1, #7
 80023aa:	4091      	lsls	r1, r2
 80023ac:	000a      	movs	r2, r1
 80023ae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2104      	movs	r1, #4
 80023b4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	0013      	movs	r3, r2
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	211f      	movs	r1, #31
 80023d6:	400a      	ands	r2, r1
 80023d8:	210f      	movs	r1, #15
 80023da:	4091      	lsls	r1, r2
 80023dc:	000a      	movs	r2, r1
 80023de:	43d2      	mvns	r2, r2
 80023e0:	401a      	ands	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	210f      	movs	r1, #15
 80023e8:	4019      	ands	r1, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	201f      	movs	r0, #31
 80023ee:	4003      	ands	r3, r0
 80023f0:	4099      	lsls	r1, r3
 80023f2:	000b      	movs	r3, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}

08002402 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	035b      	lsls	r3, r3, #13
 8002414:	0b5b      	lsrs	r3, r3, #13
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}

08002424 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	0352      	lsls	r2, r2, #13
 8002436:	0b52      	lsrs	r2, r2, #13
 8002438:	43d2      	mvns	r2, r2
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	0212      	lsls	r2, r2, #8
 800245c:	43d2      	mvns	r2, r2
 800245e:	401a      	ands	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	400b      	ands	r3, r1
 8002468:	4904      	ldr	r1, [pc, #16]	@ (800247c <LL_ADC_SetChannelSamplingTime+0x34>)
 800246a:	400b      	ands	r3, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	07ffff00 	.word	0x07ffff00

08002480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800248e:	4013      	ands	r3, r2
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	0552      	lsls	r2, r2, #21
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	6fffffe8 	.word	0x6fffffe8

080024a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	401a      	ands	r2, r3
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	055b      	lsls	r3, r3, #21
 80024be:	429a      	cmp	r2, r3
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <LL_ADC_IsEnabled+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_ADC_IsEnabled+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b002      	add	sp, #8
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d101      	bne.n	800250a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800250a:	2300      	movs	r3, #0
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	231f      	movs	r3, #31
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e17f      	b.n	800283a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff f9f9 	bl	800193c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2254      	movs	r2, #84	@ 0x54
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff ffa3 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d115      	bne.n	8002592 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff ff88 	bl	8002480 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002570:	4bb4      	ldr	r3, [pc, #720]	@ (8002844 <HAL_ADC_Init+0x330>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	49b4      	ldr	r1, [pc, #720]	@ (8002848 <HAL_ADC_Init+0x334>)
 8002576:	0018      	movs	r0, r3
 8002578:	f7fd fdd6 	bl	8000128 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002584:	e002      	b.n	800258c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0018      	movs	r0, r3
 8002598:	f7ff ff86 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	2210      	movs	r2, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b0:	2201      	movs	r2, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025b8:	231f      	movs	r3, #31
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff ff94 	bl	80024f2 <LL_ADC_REG_IsConversionOngoing>
 80025ca:	0003      	movs	r3, r0
 80025cc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	2210      	movs	r2, #16
 80025d4:	4013      	ands	r3, r2
 80025d6:	d000      	beq.n	80025da <HAL_ADC_Init+0xc6>
 80025d8:	e122      	b.n	8002820 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d000      	beq.n	80025e2 <HAL_ADC_Init+0xce>
 80025e0:	e11e      	b.n	8002820 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	4a99      	ldr	r2, [pc, #612]	@ (800284c <HAL_ADC_Init+0x338>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	2202      	movs	r2, #2
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7ff ff6a 	bl	80024d0 <LL_ADC_IsEnabled>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d000      	beq.n	8002602 <HAL_ADC_Init+0xee>
 8002600:	e0ad      	b.n	800275e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7e1b      	ldrb	r3, [r3, #24]
 800260a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800260c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7e5b      	ldrb	r3, [r3, #25]
 8002612:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002614:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7e9b      	ldrb	r3, [r3, #26]
 800261a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800261c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_ADC_Init+0x118>
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	015b      	lsls	r3, r3, #5
 800262a:	e000      	b.n	800262e <HAL_ADC_Init+0x11a>
 800262c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800262e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002634:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da04      	bge.n	8002648 <HAL_ADC_Init+0x134>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	e001      	b.n	800264c <HAL_ADC_Init+0x138>
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800264c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	212c      	movs	r1, #44	@ 0x2c
 8002652:	5c5b      	ldrb	r3, [r3, r1]
 8002654:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002656:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d115      	bne.n	8002694 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7e9b      	ldrb	r3, [r3, #26]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	0252      	lsls	r2, r2, #9
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e00b      	b.n	8002694 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	2220      	movs	r2, #32
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2201      	movs	r2, #1
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a0:	23e0      	movs	r3, #224	@ 0xe0
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026aa:	4313      	orrs	r3, r2
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a65      	ldr	r2, [pc, #404]	@ (8002850 <HAL_ADC_Init+0x33c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0f9b      	lsrs	r3, r3, #30
 80026ce:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026d4:	4313      	orrs	r3, r2
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	223c      	movs	r2, #60	@ 0x3c
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d111      	bne.n	800270a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0f9b      	lsrs	r3, r3, #30
 80026ec:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026f2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80026f8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80026fe:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	2201      	movs	r2, #1
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_ADC_Init+0x340>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	430a      	orrs	r2, r1
 800271e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	23c0      	movs	r3, #192	@ 0xc0
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	429a      	cmp	r2, r3
 800272a:	d018      	beq.n	800275e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	05db      	lsls	r3, r3, #23
 8002734:	429a      	cmp	r2, r3
 8002736:	d012      	beq.n	800275e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800273c:	2380      	movs	r3, #128	@ 0x80
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	429a      	cmp	r2, r3
 8002742:	d00c      	beq.n	800275e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002744:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <HAL_ADC_Init+0x344>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a44      	ldr	r2, [pc, #272]	@ (800285c <HAL_ADC_Init+0x348>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	23f0      	movs	r3, #240	@ 0xf0
 8002754:	039b      	lsls	r3, r3, #14
 8002756:	401a      	ands	r2, r3
 8002758:	4b3f      	ldr	r3, [pc, #252]	@ (8002858 <HAL_ADC_Init+0x344>)
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002766:	001a      	movs	r2, r3
 8002768:	2100      	movs	r1, #0
 800276a:	f7ff fdf6 	bl	800235a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	493a      	ldr	r1, [pc, #232]	@ (8002860 <HAL_ADC_Init+0x34c>)
 8002778:	001a      	movs	r2, r3
 800277a:	f7ff fdee 	bl	800235a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2110      	movs	r1, #16
 8002792:	4249      	negs	r1, r1
 8002794:	430a      	orrs	r2, r1
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28
 8002798:	e018      	b.n	80027cc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	039b      	lsls	r3, r3, #14
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d112      	bne.n	80027cc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	221c      	movs	r2, #28
 80027b6:	4013      	ands	r3, r2
 80027b8:	2210      	movs	r2, #16
 80027ba:	4252      	negs	r2, r2
 80027bc:	409a      	lsls	r2, r3
 80027be:	0011      	movs	r1, r2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2100      	movs	r1, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7ff fdde 	bl	8002394 <LL_ADC_GetSamplingTimeCommonChannels>
 80027d8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d10b      	bne.n	80027fa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	2203      	movs	r2, #3
 80027ee:	4393      	bics	r3, r2
 80027f0:	2201      	movs	r2, #1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027f8:	e01c      	b.n	8002834 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	2212      	movs	r2, #18
 8002800:	4393      	bics	r3, r2
 8002802:	2210      	movs	r2, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	2201      	movs	r2, #1
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002816:	231f      	movs	r3, #31
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800281e:	e009      	b.n	8002834 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	2210      	movs	r2, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800282c:	231f      	movs	r3, #31
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002834:	231f      	movs	r3, #31
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b008      	add	sp, #32
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	20000048 	.word	0x20000048
 8002848:	00030d40 	.word	0x00030d40
 800284c:	fffffefd 	.word	0xfffffefd
 8002850:	ffde0201 	.word	0xffde0201
 8002854:	1ffffc02 	.word	0x1ffffc02
 8002858:	40012708 	.word	0x40012708
 800285c:	ffc3ffff 	.word	0xffc3ffff
 8002860:	07ffff04 	.word	0x07ffff04

08002864 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286e:	2317      	movs	r3, #23
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2254      	movs	r2, #84	@ 0x54
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x24>
 8002884:	2302      	movs	r3, #2
 8002886:	e1c0      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x3a6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2254      	movs	r2, #84	@ 0x54
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff fe2c 	bl	80024f2 <LL_ADC_REG_IsConversionOngoing>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d000      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x3c>
 800289e:	e1a3      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d100      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x46>
 80028a8:	e143      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d004      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028ba:	4ac1      	ldr	r2, [pc, #772]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x35c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0019      	movs	r1, r3
 80028ca:	0010      	movs	r0, r2
 80028cc:	f7ff fd99 	bl	8002402 <LL_ADC_REG_SetSequencerChAdd>
 80028d0:	e0c9      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	211f      	movs	r1, #31
 80028dc:	400b      	ands	r3, r1
 80028de:	210f      	movs	r1, #15
 80028e0:	4099      	lsls	r1, r3
 80028e2:	000b      	movs	r3, r1
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	035b      	lsls	r3, r3, #13
 80028f0:	0b5b      	lsrs	r3, r3, #13
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x9c>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	221f      	movs	r2, #31
 80028fc:	4013      	ands	r3, r2
 80028fe:	e098      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	4013      	ands	r3, r2
 8002908:	d000      	beq.n	800290c <HAL_ADC_ConfigChannel+0xa8>
 800290a:	e091      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1cc>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d000      	beq.n	8002918 <HAL_ADC_ConfigChannel+0xb4>
 8002916:	e089      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x1c8>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	4013      	ands	r3, r2
 8002920:	d000      	beq.n	8002924 <HAL_ADC_ConfigChannel+0xc0>
 8002922:	e081      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1c4>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2208      	movs	r2, #8
 800292a:	4013      	ands	r3, r2
 800292c:	d000      	beq.n	8002930 <HAL_ADC_ConfigChannel+0xcc>
 800292e:	e079      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x1c0>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d000      	beq.n	800293c <HAL_ADC_ConfigChannel+0xd8>
 800293a:	e071      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x1bc>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2220      	movs	r2, #32
 8002942:	4013      	ands	r3, r2
 8002944:	d000      	beq.n	8002948 <HAL_ADC_ConfigChannel+0xe4>
 8002946:	e069      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x1b8>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2240      	movs	r2, #64	@ 0x40
 800294e:	4013      	ands	r3, r2
 8002950:	d000      	beq.n	8002954 <HAL_ADC_ConfigChannel+0xf0>
 8002952:	e061      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1b4>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	4013      	ands	r3, r2
 800295c:	d000      	beq.n	8002960 <HAL_ADC_ConfigChannel+0xfc>
 800295e:	e059      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x1b0>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4013      	ands	r3, r2
 800296a:	d151      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1ac>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d149      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4013      	ands	r3, r2
 8002982:	d141      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1a4>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d139      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1a0>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	4013      	ands	r3, r2
 800299a:	d131      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x19c>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	019b      	lsls	r3, r3, #6
 80029a4:	4013      	ands	r3, r2
 80029a6:	d129      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x198>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	01db      	lsls	r3, r3, #7
 80029b0:	4013      	ands	r3, r2
 80029b2:	d121      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x194>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	4013      	ands	r3, r2
 80029be:	d119      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x190>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	4013      	ands	r3, r2
 80029ca:	d111      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x18c>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x188>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	02db      	lsls	r3, r3, #11
 80029e0:	4013      	ands	r3, r2
 80029e2:	d001      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x184>
 80029e4:	2312      	movs	r3, #18
 80029e6:	e024      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 80029e8:	2300      	movs	r3, #0
 80029ea:	e022      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 80029ec:	2311      	movs	r3, #17
 80029ee:	e020      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 80029f0:	2310      	movs	r3, #16
 80029f2:	e01e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 80029f4:	230f      	movs	r3, #15
 80029f6:	e01c      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 80029f8:	230e      	movs	r3, #14
 80029fa:	e01a      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 80029fc:	230d      	movs	r3, #13
 80029fe:	e018      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a00:	230c      	movs	r3, #12
 8002a02:	e016      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a04:	230b      	movs	r3, #11
 8002a06:	e014      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a08:	230a      	movs	r3, #10
 8002a0a:	e012      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a0c:	2309      	movs	r3, #9
 8002a0e:	e010      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a10:	2308      	movs	r3, #8
 8002a12:	e00e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a14:	2307      	movs	r3, #7
 8002a16:	e00c      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a18:	2306      	movs	r3, #6
 8002a1a:	e00a      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	e008      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e006      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a24:	2303      	movs	r3, #3
 8002a26:	e004      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e002      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x1ce>
 8002a30:	2300      	movs	r3, #0
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6852      	ldr	r2, [r2, #4]
 8002a36:	201f      	movs	r0, #31
 8002a38:	4002      	ands	r2, r0
 8002a3a:	4093      	lsls	r3, r2
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d808      	bhi.n	8002a66 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	001a      	movs	r2, r3
 8002a62:	f7ff fcae 	bl	80023c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	001a      	movs	r2, r3
 8002a74:	f7ff fce8 	bl	8002448 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db00      	blt.n	8002a82 <HAL_ADC_ConfigChannel+0x21e>
 8002a80:	e0bc      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a82:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff fc5b 	bl	8002340 <LL_ADC_GetCommonPathInternalCh>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x364>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d122      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aa0:	d11d      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	0412      	lsls	r2, r2, #16
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002aac:	0019      	movs	r1, r3
 8002aae:	0010      	movs	r0, r2
 8002ab0:	f7ff fc32 	bl	8002318 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab4:	4b45      	ldr	r3, [pc, #276]	@ (8002bcc <HAL_ADC_ConfigChannel+0x368>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4945      	ldr	r1, [pc, #276]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x36c>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd fb34 	bl	8000128 <__udivsi3>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ace:	e002      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f9      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002adc:	e08e      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3c      	ldr	r2, [pc, #240]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x370>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10e      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	045b      	lsls	r3, r3, #17
 8002aee:	4013      	ands	r3, r2
 8002af0:	d109      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	0452      	lsls	r2, r2, #17
 8002af8:	4313      	orrs	r3, r2
 8002afa:	4a32      	ldr	r2, [pc, #200]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002afc:	0019      	movs	r1, r3
 8002afe:	0010      	movs	r0, r2
 8002b00:	f7ff fc0a 	bl	8002318 <LL_ADC_SetCommonPathInternalCh>
 8002b04:	e07a      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x374>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d000      	beq.n	8002b12 <HAL_ADC_ConfigChannel+0x2ae>
 8002b10:	e074      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	03db      	lsls	r3, r3, #15
 8002b18:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b1a:	d000      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x2ba>
 8002b1c:	e06e      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2280      	movs	r2, #128	@ 0x80
 8002b22:	03d2      	lsls	r2, r2, #15
 8002b24:	4313      	orrs	r3, r2
 8002b26:	4a27      	ldr	r2, [pc, #156]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002b28:	0019      	movs	r1, r3
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	f7ff fbf4 	bl	8002318 <LL_ADC_SetCommonPathInternalCh>
 8002b30:	e064      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b42:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x35c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d107      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0019      	movs	r1, r3
 8002b52:	0010      	movs	r0, r2
 8002b54:	f7ff fc66 	bl	8002424 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da4d      	bge.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7ff fbec 	bl	8002340 <LL_ADC_GetCommonPathInternalCh>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x364>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_ADC_ConfigChannel+0x378>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002b7e:	0019      	movs	r1, r3
 8002b80:	0010      	movs	r0, r2
 8002b82:	f7ff fbc9 	bl	8002318 <LL_ADC_SetCommonPathInternalCh>
 8002b86:	e039      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a11      	ldr	r2, [pc, #68]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x370>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d108      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <HAL_ADC_ConfigChannel+0x37c>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	f7ff fbbb 	bl	8002318 <LL_ADC_SetCommonPathInternalCh>
 8002ba2:	e02b      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x374>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d126      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <HAL_ADC_ConfigChannel+0x380>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	4a03      	ldr	r2, [pc, #12]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x360>)
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	0010      	movs	r0, r2
 8002bba:	f7ff fbad 	bl	8002318 <LL_ADC_SetCommonPathInternalCh>
 8002bbe:	e01d      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x398>
 8002bc0:	80000004 	.word	0x80000004
 8002bc4:	40012708 	.word	0x40012708
 8002bc8:	b0001000 	.word	0xb0001000
 8002bcc:	20000048 	.word	0x20000048
 8002bd0:	00030d40 	.word	0x00030d40
 8002bd4:	b8004000 	.word	0xb8004000
 8002bd8:	b4002000 	.word	0xb4002000
 8002bdc:	ff7fffff 	.word	0xff7fffff
 8002be0:	feffffff 	.word	0xfeffffff
 8002be4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	2220      	movs	r2, #32
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002bf4:	2317      	movs	r3, #23
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2254      	movs	r2, #84	@ 0x54
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002c04:	2317      	movs	r3, #23
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)

08002c14 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c1c:	4a05      	ldr	r2, [pc, #20]	@ (8002c34 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	58d2      	ldr	r2, [r2, r3]
 8002c22:	4904      	ldr	r1, [pc, #16]	@ (8002c34 <LL_EXTI_EnableIT_0_31+0x20>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	2280      	movs	r2, #128	@ 0x80
 8002c2a:	508b      	str	r3, [r1, r2]
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021800 	.word	0x40021800

08002c38 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002c40:	4a06      	ldr	r2, [pc, #24]	@ (8002c5c <LL_EXTI_DisableIT_0_31+0x24>)
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	58d3      	ldr	r3, [r2, r3]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	43d2      	mvns	r2, r2
 8002c4a:	4904      	ldr	r1, [pc, #16]	@ (8002c5c <LL_EXTI_DisableIT_0_31+0x24>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	508b      	str	r3, [r1, r2]
}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b002      	add	sp, #8
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	40021800 	.word	0x40021800

08002c60 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002c68:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c6a:	2384      	movs	r3, #132	@ 0x84
 8002c6c:	58d2      	ldr	r2, [r2, r3]
 8002c6e:	4904      	ldr	r1, [pc, #16]	@ (8002c80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	2284      	movs	r2, #132	@ 0x84
 8002c76:	508b      	str	r3, [r1, r2]

}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021800 	.word	0x40021800

08002c84 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002c8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c8e:	2384      	movs	r3, #132	@ 0x84
 8002c90:	58d3      	ldr	r3, [r2, r3]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	43d2      	mvns	r2, r2
 8002c96:	4904      	ldr	r1, [pc, #16]	@ (8002ca8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2284      	movs	r2, #132	@ 0x84
 8002c9c:	508b      	str	r3, [r1, r2]
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	40021800 	.word	0x40021800

08002cac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021800 	.word	0x40021800

08002ccc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002cde:	400a      	ands	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	40021800 	.word	0x40021800

08002cf0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002cf8:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
}
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021800 	.word	0x40021800

08002d10 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002d22:	400a      	ands	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	40021800 	.word	0x40021800

08002d34 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	40021800 	.word	0x40021800

08002d50 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	40021800 	.word	0x40021800

08002d6c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	211f      	movs	r1, #31
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e13d      	b.n	800300a <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0fdb      	lsrs	r3, r3, #31
 8002d96:	07da      	lsls	r2, r3, #31
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d104      	bne.n	8002daa <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8002da0:	231f      	movs	r3, #31
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e12f      	b.n	800300a <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2229      	movs	r2, #41	@ 0x29
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2228      	movs	r2, #40	@ 0x28
 8002dba:	2100      	movs	r1, #0
 8002dbc:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7fe fe62 	bl	8001a90 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2230      	movs	r2, #48	@ 0x30
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a85      	ldr	r2, [pc, #532]	@ (8003018 <HAL_COMP_Init+0x2ac>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10d      	bne.n	8002e3a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b7e      	ldr	r3, [pc, #504]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e24:	497e      	ldr	r1, [pc, #504]	@ (8003020 <HAL_COMP_Init+0x2b4>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4b7b      	ldr	r3, [pc, #492]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e30:	2180      	movs	r1, #128	@ 0x80
 8002e32:	0109      	lsls	r1, r1, #4
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	e01f      	b.n	8002e7a <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	23c0      	movs	r3, #192	@ 0xc0
 8002e40:	015b      	lsls	r3, r3, #5
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e46:	4b75      	ldr	r3, [pc, #468]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b74      	ldr	r3, [pc, #464]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	0109      	lsls	r1, r1, #4
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e54:	4b71      	ldr	r3, [pc, #452]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4b70      	ldr	r3, [pc, #448]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e5a:	4971      	ldr	r1, [pc, #452]	@ (8003020 <HAL_COMP_Init+0x2b4>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	e00b      	b.n	8002e7a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e62:	4b6e      	ldr	r3, [pc, #440]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b6d      	ldr	r3, [pc, #436]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e68:	496d      	ldr	r1, [pc, #436]	@ (8003020 <HAL_COMP_Init+0x2b4>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e74:	496a      	ldr	r1, [pc, #424]	@ (8003020 <HAL_COMP_Init+0x2b4>)
 8002e76:	400a      	ands	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	22a0      	movs	r2, #160	@ 0xa0
 8002e80:	01d2      	lsls	r2, r2, #7
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d017      	beq.n	8002eb6 <HAL_COMP_Init+0x14a>
 8002e86:	22a0      	movs	r2, #160	@ 0xa0
 8002e88:	01d2      	lsls	r2, r2, #7
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d830      	bhi.n	8002ef0 <HAL_COMP_Init+0x184>
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d01f      	beq.n	8002ed2 <HAL_COMP_Init+0x166>
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	01d2      	lsls	r2, r2, #7
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12a      	bne.n	8002ef0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002e9a:	4b60      	ldr	r3, [pc, #384]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	01c9      	lsls	r1, r1, #7
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4b5b      	ldr	r3, [pc, #364]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002eae:	495d      	ldr	r1, [pc, #372]	@ (8003024 <HAL_COMP_Init+0x2b8>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
        break;
 8002eb4:	e029      	b.n	8002f0a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002eb6:	4b59      	ldr	r3, [pc, #356]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b58      	ldr	r3, [pc, #352]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ebc:	4959      	ldr	r1, [pc, #356]	@ (8003024 <HAL_COMP_Init+0x2b8>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ec2:	4b56      	ldr	r3, [pc, #344]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b55      	ldr	r3, [pc, #340]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ec8:	2180      	movs	r1, #128	@ 0x80
 8002eca:	01c9      	lsls	r1, r1, #7
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
        break;
 8002ed0:	e01b      	b.n	8002f0a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002ed2:	4b52      	ldr	r3, [pc, #328]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b51      	ldr	r3, [pc, #324]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	01c9      	lsls	r1, r1, #7
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	01c9      	lsls	r1, r1, #7
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
        break;
 8002eee:	e00c      	b.n	8002f0a <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b49      	ldr	r3, [pc, #292]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002ef6:	494b      	ldr	r1, [pc, #300]	@ (8003024 <HAL_COMP_Init+0x2b8>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002efc:	4b47      	ldr	r3, [pc, #284]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	4b46      	ldr	r3, [pc, #280]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002f02:	4948      	ldr	r1, [pc, #288]	@ (8003024 <HAL_COMP_Init+0x2b8>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
        break;
 8002f08:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2230      	movs	r2, #48	@ 0x30
 8002f12:	4013      	ands	r3, r2
 8002f14:	d016      	beq.n	8002f44 <HAL_COMP_Init+0x1d8>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d113      	bne.n	8002f44 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1c:	4b42      	ldr	r3, [pc, #264]	@ (8003028 <HAL_COMP_Init+0x2bc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4942      	ldr	r1, [pc, #264]	@ (800302c <HAL_COMP_Init+0x2c0>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd f900 	bl	8000128 <__udivsi3>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	189b      	adds	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002f36:	e002      	b.n	8002f3e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a34      	ldr	r2, [pc, #208]	@ (800301c <HAL_COMP_Init+0x2b0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d102      	bne.n	8002f54 <HAL_COMP_Init+0x1e8>
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	029b      	lsls	r3, r3, #10
 8002f52:	e001      	b.n	8002f58 <HAL_COMP_Init+0x1ec>
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	02db      	lsls	r3, r3, #11
 8002f58:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	2203      	movs	r2, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	d040      	beq.n	8002fe6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	2210      	movs	r2, #16
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff fe9b 	bl	8002cac <LL_EXTI_EnableRisingTrig_0_31>
 8002f76:	e003      	b.n	8002f80 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff fea6 	bl	8002ccc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	2220      	movs	r2, #32
 8002f86:	4013      	ands	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff feaf 	bl	8002cf0 <LL_EXTI_EnableFallingTrig_0_31>
 8002f92:	e003      	b.n	8002f9c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff feba 	bl	8002d10 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff fed6 	bl	8002d50 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7ff fec4 	bl	8002d34 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7ff fe51 	bl	8002c60 <LL_EXTI_EnableEvent_0_31>
 8002fbe:	e003      	b.n	8002fc8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7ff fe5e 	bl	8002c84 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fe1d 	bl	8002c14 <LL_EXTI_EnableIT_0_31>
 8002fda:	e00c      	b.n	8002ff6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff fe2a 	bl	8002c38 <LL_EXTI_DisableIT_0_31>
 8002fe4:	e007      	b.n	8002ff6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fe4b 	bl	8002c84 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fe21 	bl	8002c38 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2229      	movs	r2, #41	@ 0x29
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2229      	movs	r2, #41	@ 0x29
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800300a:	231f      	movs	r3, #31
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	781b      	ldrb	r3, [r3, #0]
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b008      	add	sp, #32
 8003016:	bd80      	pop	{r7, pc}
 8003018:	fe00740f 	.word	0xfe00740f
 800301c:	40010200 	.word	0x40010200
 8003020:	fffff7ff 	.word	0xfffff7ff
 8003024:	ffffbfff 	.word	0xffffbfff
 8003028:	20000048 	.word	0x20000048
 800302c:	00030d40 	.word	0x00030d40

08003030 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	210f      	movs	r1, #15
 800303e:	187b      	adds	r3, r7, r1
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800304a:	187b      	adds	r3, r7, r1
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e035      	b.n	80030be <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0fdb      	lsrs	r3, r3, #31
 800305a:	07da      	lsls	r2, r3, #31
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	429a      	cmp	r2, r3
 8003062:	d104      	bne.n	800306e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e027      	b.n	80030be <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2229      	movs	r2, #41	@ 0x29
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d11d      	bne.n	80030b6 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2229      	movs	r2, #41	@ 0x29
 800308e:	2102      	movs	r1, #2
 8003090:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <HAL_COMP_Start+0x9c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_COMP_Start+0xa0>)
 8003098:	0018      	movs	r0, r3
 800309a:	f7fd f845 	bl	8000128 <__udivsi3>
 800309e:	0003      	movs	r3, r0
 80030a0:	3301      	adds	r3, #1
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030a6:	e002      	b.n	80030ae <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <HAL_COMP_Start+0x78>
 80030b4:	e003      	b.n	80030be <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030b6:	230f      	movs	r3, #15
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80030be:	230f      	movs	r3, #15
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000048 	.word	0x20000048
 80030d0:	00030d40 	.word	0x00030d40

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	0002      	movs	r2, r0
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80030e6:	d809      	bhi.n	80030fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	001a      	movs	r2, r3
 80030ee:	231f      	movs	r3, #31
 80030f0:	401a      	ands	r2, r3
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <__NVIC_EnableIRQ+0x30>)
 80030f4:	2101      	movs	r1, #1
 80030f6:	4091      	lsls	r1, r2
 80030f8:	000a      	movs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	0002      	movs	r2, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b7f      	cmp	r3, #127	@ 0x7f
 800311c:	d828      	bhi.n	8003170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800311e:	4a2f      	ldr	r2, [pc, #188]	@ (80031dc <__NVIC_SetPriority+0xd4>)
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b25b      	sxtb	r3, r3
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	33c0      	adds	r3, #192	@ 0xc0
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	589b      	ldr	r3, [r3, r2]
 800312e:	1dfa      	adds	r2, r7, #7
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	0011      	movs	r1, r2
 8003134:	2203      	movs	r2, #3
 8003136:	400a      	ands	r2, r1
 8003138:	00d2      	lsls	r2, r2, #3
 800313a:	21ff      	movs	r1, #255	@ 0xff
 800313c:	4091      	lsls	r1, r2
 800313e:	000a      	movs	r2, r1
 8003140:	43d2      	mvns	r2, r2
 8003142:	401a      	ands	r2, r3
 8003144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	22ff      	movs	r2, #255	@ 0xff
 800314c:	401a      	ands	r2, r3
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	0018      	movs	r0, r3
 8003154:	2303      	movs	r3, #3
 8003156:	4003      	ands	r3, r0
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800315c:	481f      	ldr	r0, [pc, #124]	@ (80031dc <__NVIC_SetPriority+0xd4>)
 800315e:	1dfb      	adds	r3, r7, #7
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b25b      	sxtb	r3, r3
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	430a      	orrs	r2, r1
 8003168:	33c0      	adds	r3, #192	@ 0xc0
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800316e:	e031      	b.n	80031d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003170:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <__NVIC_SetPriority+0xd8>)
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	0019      	movs	r1, r3
 8003178:	230f      	movs	r3, #15
 800317a:	400b      	ands	r3, r1
 800317c:	3b08      	subs	r3, #8
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	3306      	adds	r3, #6
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	18d3      	adds	r3, r2, r3
 8003186:	3304      	adds	r3, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1dfa      	adds	r2, r7, #7
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	0011      	movs	r1, r2
 8003190:	2203      	movs	r2, #3
 8003192:	400a      	ands	r2, r1
 8003194:	00d2      	lsls	r2, r2, #3
 8003196:	21ff      	movs	r1, #255	@ 0xff
 8003198:	4091      	lsls	r1, r2
 800319a:	000a      	movs	r2, r1
 800319c:	43d2      	mvns	r2, r2
 800319e:	401a      	ands	r2, r3
 80031a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	22ff      	movs	r2, #255	@ 0xff
 80031a8:	401a      	ands	r2, r3
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	0018      	movs	r0, r3
 80031b0:	2303      	movs	r3, #3
 80031b2:	4003      	ands	r3, r0
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031b8:	4809      	ldr	r0, [pc, #36]	@ (80031e0 <__NVIC_SetPriority+0xd8>)
 80031ba:	1dfb      	adds	r3, r7, #7
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	001c      	movs	r4, r3
 80031c0:	230f      	movs	r3, #15
 80031c2:	4023      	ands	r3, r4
 80031c4:	3b08      	subs	r3, #8
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	430a      	orrs	r2, r1
 80031ca:	3306      	adds	r3, #6
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	18c3      	adds	r3, r0, r3
 80031d0:	3304      	adds	r3, #4
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b003      	add	sp, #12
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1e5a      	subs	r2, r3, #1
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	045b      	lsls	r3, r3, #17
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d301      	bcc.n	80031fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f8:	2301      	movs	r3, #1
 80031fa:	e010      	b.n	800321e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <SysTick_Config+0x44>)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	3a01      	subs	r2, #1
 8003202:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003204:	2301      	movs	r3, #1
 8003206:	425b      	negs	r3, r3
 8003208:	2103      	movs	r1, #3
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff ff7c 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <SysTick_Config+0x44>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <SysTick_Config+0x44>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	210f      	movs	r1, #15
 8003238:	187b      	adds	r3, r7, r1
 800323a:	1c02      	adds	r2, r0, #0
 800323c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	187b      	adds	r3, r7, r1
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b25b      	sxtb	r3, r3
 8003246:	0011      	movs	r1, r2
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff ff5d 	bl	8003108 <__NVIC_SetPriority>
}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b004      	add	sp, #16
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	0002      	movs	r2, r0
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b25b      	sxtb	r3, r3
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ff33 	bl	80030d4 <__NVIC_EnableIRQ>
}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff ffaf 	bl	80031e4 <SysTick_Config>
 8003286:	0003      	movs	r3, r0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e015      	b.n	80032ce <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fe fc21 	bl	8001afc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b002      	add	sp, #8
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e047      	b.n	800337a <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	795b      	ldrb	r3, [r3, #5]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_DAC_Start+0x20>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e041      	b.n	800337a <HAL_DAC_Start+0xa4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	4013      	ands	r3, r2
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10f      	bne.n	8003340 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	223e      	movs	r2, #62	@ 0x3e
 8003328:	4013      	ands	r3, r2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d11e      	bne.n	800336c <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2101      	movs	r1, #1
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	e015      	b.n	800336c <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	23f8      	movs	r3, #248	@ 0xf8
 8003348:	039b      	lsls	r3, r3, #14
 800334a:	401a      	ands	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2110      	movs	r1, #16
 8003350:	400b      	ands	r3, r1
 8003352:	2102      	movs	r1, #2
 8003354:	4099      	lsls	r1, r3
 8003356:	000b      	movs	r3, r1
 8003358:	429a      	cmp	r2, r3
 800335a:	d107      	bne.n	800336c <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2102      	movs	r1, #2
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	2380      	movs	r3, #128	@ 0x80
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	4013      	ands	r3, r2
 80033a4:	d01e      	beq.n	80033e4 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	4013      	ands	r3, r2
 80033ae:	d019      	beq.n	80033e4 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2204      	movs	r2, #4
 80033b4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2201      	movs	r2, #1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2280      	movs	r2, #128	@ 0x80
 80033c8:	0192      	lsls	r2, r2, #6
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4917      	ldr	r1, [pc, #92]	@ (8003434 <HAL_DAC_IRQHandler+0xb0>)
 80033d8:	400a      	ands	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 f853 	bl	800348a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	059b      	lsls	r3, r3, #22
 80033ea:	4013      	ands	r3, r2
 80033ec:	d01e      	beq.n	800342c <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	059b      	lsls	r3, r3, #22
 80033f4:	4013      	ands	r3, r2
 80033f6:	d019      	beq.n	800342c <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2204      	movs	r2, #4
 80033fc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2202      	movs	r2, #2
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2280      	movs	r2, #128	@ 0x80
 8003410:	0592      	lsls	r2, r2, #22
 8003412:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4906      	ldr	r1, [pc, #24]	@ (8003438 <HAL_DAC_IRQHandler+0xb4>)
 8003420:	400a      	ands	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f968 	bl	80036fc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b004      	add	sp, #16
 8003432:	bd80      	pop	{r7, pc}
 8003434:	ffffefff 	.word	0xffffefff
 8003438:	efffffff 	.word	0xefffffff

0800343c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e014      	b.n	8003482 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	3308      	adds	r3, #8
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e004      	b.n	800347a <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	3314      	adds	r3, #20
 8003478:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b006      	add	sp, #24
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	231f      	movs	r3, #31
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_DAC_ConfigChannel+0x20>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e115      	b.n	80036ec <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	795b      	ldrb	r3, [r3, #5]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_DAC_ConfigChannel+0x30>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e10f      	b.n	80036ec <HAL_DAC_ConfigChannel+0x250>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2202      	movs	r2, #2
 80034d6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d000      	beq.n	80034e2 <HAL_DAC_ConfigChannel+0x46>
 80034e0:	e07a      	b.n	80035d8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034e2:	f7fe feeb 	bl	80022bc <HAL_GetTick>
 80034e6:	0003      	movs	r3, r0
 80034e8:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13d      	bne.n	800356c <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f0:	e018      	b.n	8003524 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034f2:	f7fe fee3 	bl	80022bc <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d911      	bls.n	8003524 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003506:	2380      	movs	r3, #128	@ 0x80
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	4013      	ands	r3, r2
 800350c:	d00a      	beq.n	8003524 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2208      	movs	r2, #8
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2203      	movs	r2, #3
 800351e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0e3      	b.n	80036ec <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	4013      	ands	r3, r2
 8003530:	d1df      	bne.n	80034f2 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	6992      	ldr	r2, [r2, #24]
 800353a:	641a      	str	r2, [r3, #64]	@ 0x40
 800353c:	e020      	b.n	8003580 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800353e:	f7fe febd 	bl	80022bc <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d90f      	bls.n	800356c <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	2b00      	cmp	r3, #0
 8003554:	da0a      	bge.n	800356c <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2208      	movs	r2, #8
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2203      	movs	r2, #3
 8003566:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0bf      	b.n	80036ec <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003572:	2b00      	cmp	r3, #0
 8003574:	dbe3      	blt.n	800353e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	6992      	ldr	r2, [r2, #24]
 800357e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	2110      	movs	r1, #16
 800358a:	400a      	ands	r2, r1
 800358c:	4959      	ldr	r1, [pc, #356]	@ (80036f4 <HAL_DAC_ConfigChannel+0x258>)
 800358e:	4091      	lsls	r1, r2
 8003590:	000a      	movs	r2, r1
 8003592:	43d2      	mvns	r2, r2
 8003594:	401a      	ands	r2, r3
 8003596:	0011      	movs	r1, r2
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2010      	movs	r0, #16
 80035a0:	4003      	ands	r3, r0
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	2110      	movs	r1, #16
 80035b6:	400a      	ands	r2, r1
 80035b8:	21ff      	movs	r1, #255	@ 0xff
 80035ba:	4091      	lsls	r1, r2
 80035bc:	000a      	movs	r2, r1
 80035be:	43d2      	mvns	r2, r2
 80035c0:	401a      	ands	r2, r3
 80035c2:	0011      	movs	r1, r2
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2010      	movs	r0, #16
 80035cc:	4003      	ands	r3, r0
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d11d      	bne.n	800361c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2210      	movs	r2, #16
 80035ec:	4013      	ands	r3, r2
 80035ee:	221f      	movs	r2, #31
 80035f0:	409a      	lsls	r2, r3
 80035f2:	0013      	movs	r3, r2
 80035f4:	43da      	mvns	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2210      	movs	r2, #16
 8003606:	4013      	ands	r3, r2
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	409a      	lsls	r2, r3
 800360c:	0013      	movs	r3, r2
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003622:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2210      	movs	r2, #16
 8003628:	4013      	ands	r3, r2
 800362a:	2207      	movs	r2, #7
 800362c:	409a      	lsls	r2, r3
 800362e:	0013      	movs	r3, r2
 8003630:	43da      	mvns	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4013      	ands	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	431a      	orrs	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2110      	movs	r1, #16
 800366e:	400b      	ands	r3, r1
 8003670:	2180      	movs	r1, #128	@ 0x80
 8003672:	01c9      	lsls	r1, r1, #7
 8003674:	4099      	lsls	r1, r3
 8003676:	000b      	movs	r3, r1
 8003678:	43d9      	mvns	r1, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	400a      	ands	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2210      	movs	r2, #16
 800368e:	4013      	ands	r3, r2
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_DAC_ConfigChannel+0x25c>)
 8003692:	409a      	lsls	r2, r3
 8003694:	0013      	movs	r3, r2
 8003696:	43da      	mvns	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	4013      	ands	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2210      	movs	r2, #16
 80036a8:	4013      	ands	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	409a      	lsls	r2, r3
 80036ae:	0013      	movs	r3, r2
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2110      	movs	r1, #16
 80036c8:	400b      	ands	r3, r1
 80036ca:	21c0      	movs	r1, #192	@ 0xc0
 80036cc:	4099      	lsls	r1, r3
 80036ce:	000b      	movs	r3, r1
 80036d0:	43d9      	mvns	r1, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	400a      	ands	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80036e6:	231f      	movs	r3, #31
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b008      	add	sp, #32
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	000003ff 	.word	0x000003ff
 80036f8:	00000ffe 	.word	0x00000ffe

080036fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e077      	b.n	800380e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3d      	ldr	r2, [pc, #244]	@ (8003818 <HAL_DMA_Init+0x10c>)
 8003724:	4694      	mov	ip, r2
 8003726:	4463      	add	r3, ip
 8003728:	2114      	movs	r1, #20
 800372a:	0018      	movs	r0, r3
 800372c:	f7fc fcfc 	bl	8000128 <__udivsi3>
 8003730:	0003      	movs	r3, r0
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2225      	movs	r2, #37	@ 0x25
 800373c:	2102      	movs	r1, #2
 800373e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4934      	ldr	r1, [pc, #208]	@ (800381c <HAL_DMA_Init+0x110>)
 800374c:	400a      	ands	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f9c7 	bl	8003b1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	01db      	lsls	r3, r3, #7
 8003796:	429a      	cmp	r2, r3
 8003798:	d102      	bne.n	80037a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	213f      	movs	r1, #63	@ 0x3f
 80037aa:	400a      	ands	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d011      	beq.n	80037e4 <HAL_DMA_Init+0xd8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d80d      	bhi.n	80037e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f9d2 	bl	8003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	e008      	b.n	80037f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2225      	movs	r2, #37	@ 0x25
 8003800:	2101      	movs	r1, #1
 8003802:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	@ 0x24
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	bffdfff8 	.word	0xbffdfff8
 800381c:	ffff800f 	.word	0xffff800f

08003820 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e050      	b.n	80038d4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2225      	movs	r2, #37	@ 0x25
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d008      	beq.n	8003850 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	@ 0x24
 8003848:	2100      	movs	r1, #0
 800384a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e041      	b.n	80038d4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	210e      	movs	r1, #14
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	491c      	ldr	r1, [pc, #112]	@ (80038dc <HAL_DMA_Abort+0xbc>)
 800386c:	400a      	ands	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003880:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <HAL_DMA_Abort+0xc0>)
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	221c      	movs	r2, #28
 800388a:	4013      	ands	r3, r2
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <HAL_DMA_Abort+0xc0>)
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800389e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	490a      	ldr	r1, [pc, #40]	@ (80038dc <HAL_DMA_Abort+0xbc>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80038c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2225      	movs	r2, #37	@ 0x25
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2224      	movs	r2, #36	@ 0x24
 80038ce:	2100      	movs	r1, #0
 80038d0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fffffeff 	.word	0xfffffeff
 80038e0:	40020000 	.word	0x40020000

080038e4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	210f      	movs	r1, #15
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2225      	movs	r2, #37	@ 0x25
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d006      	beq.n	800390e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2204      	movs	r2, #4
 8003904:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e049      	b.n	80039a2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	210e      	movs	r1, #14
 800391a:	438a      	bics	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	438a      	bics	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	491d      	ldr	r1, [pc, #116]	@ (80039b0 <HAL_DMA_Abort_IT+0xcc>)
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800393e:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HAL_DMA_Abort_IT+0xd0>)
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	221c      	movs	r2, #28
 8003948:	4013      	ands	r3, r2
 800394a:	2201      	movs	r2, #1
 800394c:	409a      	lsls	r2, r3
 800394e:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <HAL_DMA_Abort_IT+0xd0>)
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800395c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003970:	490f      	ldr	r1, [pc, #60]	@ (80039b0 <HAL_DMA_Abort_IT+0xcc>)
 8003972:	400a      	ands	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800397e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2225      	movs	r2, #37	@ 0x25
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	0010      	movs	r0, r2
 80039a0:	4798      	blx	r3
    }
  }
  return status;
 80039a2:	230f      	movs	r3, #15
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	781b      	ldrb	r3, [r3, #0]
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	fffffeff 	.word	0xfffffeff
 80039b4:	40020000 	.word	0x40020000

080039b8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80039c0:	4b55      	ldr	r3, [pc, #340]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	221c      	movs	r2, #28
 80039d4:	4013      	ands	r3, r2
 80039d6:	2204      	movs	r2, #4
 80039d8:	409a      	lsls	r2, r3
 80039da:	0013      	movs	r3, r2
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x7a>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2204      	movs	r2, #4
 80039e6:	4013      	ands	r3, r2
 80039e8:	d023      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2220      	movs	r2, #32
 80039f2:	4013      	ands	r3, r2
 80039f4:	d107      	bne.n	8003a06 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2104      	movs	r1, #4
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003a06:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	221c      	movs	r2, #28
 8003a10:	4013      	ands	r3, r2
 8003a12:	2204      	movs	r2, #4
 8003a14:	409a      	lsls	r2, r3
 8003a16:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d100      	bne.n	8003a26 <HAL_DMA_IRQHandler+0x6e>
 8003a24:	e073      	b.n	8003b0e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	0010      	movs	r0, r2
 8003a2e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003a30:	e06d      	b.n	8003b0e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	221c      	movs	r2, #28
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	0013      	movs	r3, r2
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	d02e      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xec>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2220      	movs	r2, #32
 8003a56:	4013      	ands	r3, r2
 8003a58:	d10b      	bne.n	8003a72 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	210a      	movs	r1, #10
 8003a66:	438a      	bics	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2225      	movs	r2, #37	@ 0x25
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a72:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	221c      	movs	r2, #28
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2202      	movs	r2, #2
 8003a80:	409a      	lsls	r2, r3
 8003a82:	4b25      	ldr	r3, [pc, #148]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	@ 0x24
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d03a      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	0010      	movs	r0, r2
 8003aa0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003aa2:	e034      	b.n	8003b0e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	221c      	movs	r2, #28
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2208      	movs	r2, #8
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	0013      	movs	r3, r2
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d02b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x158>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2208      	movs	r2, #8
 8003abc:	4013      	ands	r3, r2
 8003abe:	d027      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	210e      	movs	r1, #14
 8003acc:	438a      	bics	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ad0:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	221c      	movs	r2, #28
 8003ada:	4013      	ands	r3, r2
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <HAL_DMA_IRQHandler+0x160>)
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2225      	movs	r2, #37	@ 0x25
 8003af0:	2101      	movs	r1, #1
 8003af2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	2100      	movs	r1, #0
 8003afa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	0010      	movs	r0, r2
 8003b0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	46c0      	nop			@ (mov r8, r8)
}
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40020000 	.word	0x40020000

08003b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	4a10      	ldr	r2, [pc, #64]	@ (8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003b2c:	4694      	mov	ip, r2
 8003b2e:	4463      	add	r3, ip
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	001a      	movs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	23ff      	movs	r3, #255	@ 0xff
 8003b40:	4013      	ands	r3, r2
 8003b42:	3b08      	subs	r3, #8
 8003b44:	2114      	movs	r1, #20
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7fc faee 	bl	8000128 <__udivsi3>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a07      	ldr	r2, [pc, #28]	@ (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	221f      	movs	r2, #31
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b004      	add	sp, #16
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	10008200 	.word	0x10008200
 8003b70:	40020880 	.word	0x40020880

08003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	223f      	movs	r2, #63	@ 0x3f
 8003b82:	4013      	ands	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b8a:	4694      	mov	ip, r2
 8003b8c:	4463      	add	r3, ip
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	001a      	movs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a07      	ldr	r2, [pc, #28]	@ (8003bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	1000823f 	.word	0x1000823f
 8003bb8:	40020940 	.word	0x40020940

08003bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bca:	e147      	b.n	8003e5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4091      	lsls	r1, r2
 8003bd6:	000a      	movs	r2, r1
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d100      	bne.n	8003be4 <HAL_GPIO_Init+0x28>
 8003be2:	e138      	b.n	8003e56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d005      	beq.n	8003bfc <HAL_GPIO_Init+0x40>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d130      	bne.n	8003c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	0013      	movs	r3, r2
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	0013      	movs	r3, r2
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c32:	2201      	movs	r2, #1
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	409a      	lsls	r2, r3
 8003c38:	0013      	movs	r3, r2
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	2201      	movs	r2, #1
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2203      	movs	r2, #3
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d017      	beq.n	8003c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2203      	movs	r2, #3
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d123      	bne.n	8003cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	08da      	lsrs	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3208      	adds	r2, #8
 8003cae:	0092      	lsls	r2, r2, #2
 8003cb0:	58d3      	ldr	r3, [r2, r3]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	4013      	ands	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	0013      	movs	r3, r2
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2107      	movs	r1, #7
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	08da      	lsrs	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3208      	adds	r2, #8
 8003ce8:	0092      	lsls	r2, r2, #2
 8003cea:	6939      	ldr	r1, [r7, #16]
 8003cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	0013      	movs	r3, r2
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	23c0      	movs	r3, #192	@ 0xc0
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d100      	bne.n	8003d30 <HAL_GPIO_Init+0x174>
 8003d2e:	e092      	b.n	8003e56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d30:	4a50      	ldr	r2, [pc, #320]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	089b      	lsrs	r3, r3, #2
 8003d36:	3318      	adds	r3, #24
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	589b      	ldr	r3, [r3, r2]
 8003d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2203      	movs	r2, #3
 8003d42:	4013      	ands	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	220f      	movs	r2, #15
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	0013      	movs	r3, r2
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	23a0      	movs	r3, #160	@ 0xa0
 8003d58:	05db      	lsls	r3, r3, #23
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d013      	beq.n	8003d86 <HAL_GPIO_Init+0x1ca>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a45      	ldr	r2, [pc, #276]	@ (8003e78 <HAL_GPIO_Init+0x2bc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00d      	beq.n	8003d82 <HAL_GPIO_Init+0x1c6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a44      	ldr	r2, [pc, #272]	@ (8003e7c <HAL_GPIO_Init+0x2c0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d007      	beq.n	8003d7e <HAL_GPIO_Init+0x1c2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a43      	ldr	r2, [pc, #268]	@ (8003e80 <HAL_GPIO_Init+0x2c4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_GPIO_Init+0x1be>
 8003d76:	2303      	movs	r3, #3
 8003d78:	e006      	b.n	8003d88 <HAL_GPIO_Init+0x1cc>
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	e004      	b.n	8003d88 <HAL_GPIO_Init+0x1cc>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e002      	b.n	8003d88 <HAL_GPIO_Init+0x1cc>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_GPIO_Init+0x1cc>
 8003d86:	2300      	movs	r3, #0
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	00d2      	lsls	r2, r2, #3
 8003d90:	4093      	lsls	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d98:	4936      	ldr	r1, [pc, #216]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	3318      	adds	r3, #24
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003da6:	4b33      	ldr	r3, [pc, #204]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43da      	mvns	r2, r3
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	2380      	movs	r3, #128	@ 0x80
 8003dbc:	035b      	lsls	r3, r3, #13
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dca:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003dd0:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	039b      	lsls	r3, r3, #14
 8003de8:	4013      	ands	r3, r2
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003df4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003dfc:	2384      	movs	r3, #132	@ 0x84
 8003dfe:	58d3      	ldr	r3, [r2, r3]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	4013      	ands	r3, r2
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e20:	4914      	ldr	r1, [pc, #80]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003e22:	2284      	movs	r2, #132	@ 0x84
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e28:	4a12      	ldr	r2, [pc, #72]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	58d3      	ldr	r3, [r2, r3]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	43da      	mvns	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	2380      	movs	r3, #128	@ 0x80
 8003e40:	025b      	lsls	r3, r3, #9
 8003e42:	4013      	ands	r3, r2
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e4e:	4909      	ldr	r1, [pc, #36]	@ (8003e74 <HAL_GPIO_Init+0x2b8>)
 8003e50:	2280      	movs	r2, #128	@ 0x80
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	40da      	lsrs	r2, r3
 8003e64:	1e13      	subs	r3, r2, #0
 8003e66:	d000      	beq.n	8003e6a <HAL_GPIO_Init+0x2ae>
 8003e68:	e6b0      	b.n	8003bcc <HAL_GPIO_Init+0x10>
  }
}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b006      	add	sp, #24
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021800 	.word	0x40021800
 8003e78:	50000400 	.word	0x50000400
 8003e7c:	50000800 	.word	0x50000800
 8003e80:	50000c00 	.word	0x50000c00

08003e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	000a      	movs	r2, r1
 8003e8e:	1cbb      	adds	r3, r7, #2
 8003e90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	1cba      	adds	r2, r7, #2
 8003e98:	8812      	ldrh	r2, [r2, #0]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e9e:	230f      	movs	r3, #15
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e003      	b.n	8003eb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003eb0:	230f      	movs	r3, #15
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	0008      	movs	r0, r1
 8003ec8:	0011      	movs	r1, r2
 8003eca:	1cbb      	adds	r3, r7, #2
 8003ecc:	1c02      	adds	r2, r0, #0
 8003ece:	801a      	strh	r2, [r3, #0]
 8003ed0:	1c7b      	adds	r3, r7, #1
 8003ed2:	1c0a      	adds	r2, r1, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed6:	1c7b      	adds	r3, r7, #1
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ede:	1cbb      	adds	r3, r7, #2
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee6:	e003      	b.n	8003ef0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee8:	1cbb      	adds	r3, r7, #2
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	000a      	movs	r2, r1
 8003f02:	1cbb      	adds	r3, r7, #2
 8003f04:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f0c:	1cbb      	adds	r3, r7, #2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4013      	ands	r3, r2
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	1cb9      	adds	r1, r7, #2
 8003f1c:	8809      	ldrh	r1, [r1, #0]
 8003f1e:	400b      	ands	r3, r1
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a19      	ldr	r2, [pc, #100]	@ (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	2380      	movs	r3, #128	@ 0x80
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d11f      	bne.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	0013      	movs	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4912      	ldr	r1, [pc, #72]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7fc f8e0 	bl	8000128 <__udivsi3>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6e:	e008      	b.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e001      	b.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e009      	b.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d0ed      	beq.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	0018      	movs	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b004      	add	sp, #16
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	fffff9ff 	.word	0xfffff9ff
 8003fa8:	20000048 	.word	0x20000048
 8003fac:	000f4240 	.word	0x000f4240

08003fb0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	23e0      	movs	r3, #224	@ 0xe0
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	4013      	ands	r3, r2
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e2fe      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x1e>
 8003fe4:	e07c      	b.n	80040e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe6:	4bc3      	ldr	r3, [pc, #780]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2238      	movs	r2, #56	@ 0x38
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff0:	4bc0      	ldr	r3, [pc, #768]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_OscConfig+0x3e>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d002      	beq.n	800400c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d10b      	bne.n	8004024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	4bb9      	ldr	r3, [pc, #740]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	029b      	lsls	r3, r3, #10
 8004014:	4013      	ands	r3, r2
 8004016:	d062      	beq.n	80040de <HAL_RCC_OscConfig+0x116>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d15e      	bne.n	80040de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e2d9      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	2380      	movs	r3, #128	@ 0x80
 800402a:	025b      	lsls	r3, r3, #9
 800402c:	429a      	cmp	r2, r3
 800402e:	d107      	bne.n	8004040 <HAL_RCC_OscConfig+0x78>
 8004030:	4bb0      	ldr	r3, [pc, #704]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4baf      	ldr	r3, [pc, #700]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004036:	2180      	movs	r1, #128	@ 0x80
 8004038:	0249      	lsls	r1, r1, #9
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e020      	b.n	8004082 <HAL_RCC_OscConfig+0xba>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	23a0      	movs	r3, #160	@ 0xa0
 8004046:	02db      	lsls	r3, r3, #11
 8004048:	429a      	cmp	r2, r3
 800404a:	d10e      	bne.n	800406a <HAL_RCC_OscConfig+0xa2>
 800404c:	4ba9      	ldr	r3, [pc, #676]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4ba8      	ldr	r3, [pc, #672]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004052:	2180      	movs	r1, #128	@ 0x80
 8004054:	02c9      	lsls	r1, r1, #11
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4ba6      	ldr	r3, [pc, #664]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4ba5      	ldr	r3, [pc, #660]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004060:	2180      	movs	r1, #128	@ 0x80
 8004062:	0249      	lsls	r1, r1, #9
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e00b      	b.n	8004082 <HAL_RCC_OscConfig+0xba>
 800406a:	4ba2      	ldr	r3, [pc, #648]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4ba1      	ldr	r3, [pc, #644]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004070:	49a1      	ldr	r1, [pc, #644]	@ (80042f8 <HAL_RCC_OscConfig+0x330>)
 8004072:	400a      	ands	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	4b9f      	ldr	r3, [pc, #636]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b9e      	ldr	r3, [pc, #632]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800407c:	499f      	ldr	r1, [pc, #636]	@ (80042fc <HAL_RCC_OscConfig+0x334>)
 800407e:	400a      	ands	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d014      	beq.n	80040b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe f917 	bl	80022bc <HAL_GetTick>
 800408e:	0003      	movs	r3, r0
 8004090:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe f912 	bl	80022bc <HAL_GetTick>
 8004098:	0002      	movs	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e298      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a6:	4b93      	ldr	r3, [pc, #588]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	4013      	ands	r3, r2
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0xcc>
 80040b2:	e015      	b.n	80040e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe f902 	bl	80022bc <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040be:	f7fe f8fd 	bl	80022bc <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	@ 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e283      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d0:	4b88      	ldr	r3, [pc, #544]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	4013      	ands	r3, r2
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0xf6>
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2202      	movs	r2, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	d100      	bne.n	80040ec <HAL_RCC_OscConfig+0x124>
 80040ea:	e099      	b.n	8004220 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ec:	4b81      	ldr	r3, [pc, #516]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2238      	movs	r2, #56	@ 0x38
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f6:	4b7f      	ldr	r3, [pc, #508]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2203      	movs	r2, #3
 80040fc:	4013      	ands	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0x144>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d002      	beq.n	8004112 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d135      	bne.n	800417e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004112:	4b78      	ldr	r3, [pc, #480]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4013      	ands	r3, r2
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x162>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e256      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4b72      	ldr	r3, [pc, #456]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4a74      	ldr	r2, [pc, #464]	@ (8004300 <HAL_RCC_OscConfig+0x338>)
 8004130:	4013      	ands	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	021a      	lsls	r2, r3, #8
 800413a:	4b6e      	ldr	r3, [pc, #440]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d112      	bne.n	800416c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004146:	4b6b      	ldr	r3, [pc, #428]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6e      	ldr	r2, [pc, #440]	@ (8004304 <HAL_RCC_OscConfig+0x33c>)
 800414c:	4013      	ands	r3, r2
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	4b67      	ldr	r3, [pc, #412]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800415a:	4b66      	ldr	r3, [pc, #408]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	2207      	movs	r2, #7
 8004162:	4013      	ands	r3, r2
 8004164:	4a68      	ldr	r2, [pc, #416]	@ (8004308 <HAL_RCC_OscConfig+0x340>)
 8004166:	40da      	lsrs	r2, r3
 8004168:	4b68      	ldr	r3, [pc, #416]	@ (800430c <HAL_RCC_OscConfig+0x344>)
 800416a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800416c:	4b68      	ldr	r3, [pc, #416]	@ (8004310 <HAL_RCC_OscConfig+0x348>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0018      	movs	r0, r3
 8004172:	f7fe f847 	bl	8002204 <HAL_InitTick>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d051      	beq.n	800421e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e22c      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d030      	beq.n	80041e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004186:	4b5b      	ldr	r3, [pc, #364]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a5e      	ldr	r2, [pc, #376]	@ (8004304 <HAL_RCC_OscConfig+0x33c>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	4b57      	ldr	r3, [pc, #348]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800419a:	4b56      	ldr	r3, [pc, #344]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b55      	ldr	r3, [pc, #340]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80041a0:	2180      	movs	r1, #128	@ 0x80
 80041a2:	0049      	lsls	r1, r1, #1
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fe f888 	bl	80022bc <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fe f883 	bl	80022bc <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e209      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c4:	4b4b      	ldr	r3, [pc, #300]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4013      	ands	r3, r2
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b48      	ldr	r3, [pc, #288]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004300 <HAL_RCC_OscConfig+0x338>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	4b44      	ldr	r3, [pc, #272]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80041e8:	4b42      	ldr	r3, [pc, #264]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b41      	ldr	r3, [pc, #260]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	4949      	ldr	r1, [pc, #292]	@ (8004314 <HAL_RCC_OscConfig+0x34c>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe f862 	bl	80022bc <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe f85d 	bl	80022bc <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1e3      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004210:	4b38      	ldr	r3, [pc, #224]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4013      	ands	r3, r2
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x236>
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800421e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2208      	movs	r2, #8
 8004226:	4013      	ands	r3, r2
 8004228:	d047      	beq.n	80042ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800422a:	4b32      	ldr	r3, [pc, #200]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2238      	movs	r2, #56	@ 0x38
 8004230:	4013      	ands	r3, r2
 8004232:	2b18      	cmp	r3, #24
 8004234:	d10a      	bne.n	800424c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004236:	4b2f      	ldr	r3, [pc, #188]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	2202      	movs	r2, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d03c      	beq.n	80042ba <HAL_RCC_OscConfig+0x2f2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d138      	bne.n	80042ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e1c5      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d019      	beq.n	8004288 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004254:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 8004256:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004258:	4b26      	ldr	r3, [pc, #152]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800425a:	2101      	movs	r1, #1
 800425c:	430a      	orrs	r2, r1
 800425e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fe f82c 	bl	80022bc <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426a:	f7fe f827 	bl	80022bc <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1ad      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800427e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d0f1      	beq.n	800426a <HAL_RCC_OscConfig+0x2a2>
 8004286:	e018      	b.n	80042ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800428a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800428c:	4b19      	ldr	r3, [pc, #100]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 800428e:	2101      	movs	r1, #1
 8004290:	438a      	bics	r2, r1
 8004292:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f812 	bl	80022bc <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429e:	f7fe f80d 	bl	80022bc <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e193      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80042b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b4:	2202      	movs	r2, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f1      	bne.n	800429e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2204      	movs	r2, #4
 80042c0:	4013      	ands	r3, r2
 80042c2:	d100      	bne.n	80042c6 <HAL_RCC_OscConfig+0x2fe>
 80042c4:	e0c6      	b.n	8004454 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c6:	231f      	movs	r3, #31
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042ce:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2238      	movs	r2, #56	@ 0x38
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d11e      	bne.n	8004318 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <HAL_RCC_OscConfig+0x32c>)
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	2202      	movs	r2, #2
 80042e0:	4013      	ands	r3, r2
 80042e2:	d100      	bne.n	80042e6 <HAL_RCC_OscConfig+0x31e>
 80042e4:	e0b6      	b.n	8004454 <HAL_RCC_OscConfig+0x48c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d000      	beq.n	80042f0 <HAL_RCC_OscConfig+0x328>
 80042ee:	e0b1      	b.n	8004454 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e171      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
 80042f4:	40021000 	.word	0x40021000
 80042f8:	fffeffff 	.word	0xfffeffff
 80042fc:	fffbffff 	.word	0xfffbffff
 8004300:	ffff80ff 	.word	0xffff80ff
 8004304:	ffffc7ff 	.word	0xffffc7ff
 8004308:	00f42400 	.word	0x00f42400
 800430c:	20000048 	.word	0x20000048
 8004310:	2000004c 	.word	0x2000004c
 8004314:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004318:	4bb1      	ldr	r3, [pc, #708]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800431a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800431c:	2380      	movs	r3, #128	@ 0x80
 800431e:	055b      	lsls	r3, r3, #21
 8004320:	4013      	ands	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_RCC_OscConfig+0x360>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x362>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d011      	beq.n	8004352 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4bac      	ldr	r3, [pc, #688]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004330:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004332:	4bab      	ldr	r3, [pc, #684]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004334:	2180      	movs	r1, #128	@ 0x80
 8004336:	0549      	lsls	r1, r1, #21
 8004338:	430a      	orrs	r2, r1
 800433a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800433c:	4ba8      	ldr	r3, [pc, #672]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800433e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	055b      	lsls	r3, r3, #21
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800434a:	231f      	movs	r3, #31
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004352:	4ba4      	ldr	r3, [pc, #656]	@ (80045e4 <HAL_RCC_OscConfig+0x61c>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4013      	ands	r3, r2
 800435c:	d11a      	bne.n	8004394 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435e:	4ba1      	ldr	r3, [pc, #644]	@ (80045e4 <HAL_RCC_OscConfig+0x61c>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4ba0      	ldr	r3, [pc, #640]	@ (80045e4 <HAL_RCC_OscConfig+0x61c>)
 8004364:	2180      	movs	r1, #128	@ 0x80
 8004366:	0049      	lsls	r1, r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800436c:	f7fd ffa6 	bl	80022bc <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004376:	f7fd ffa1 	bl	80022bc <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e127      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004388:	4b96      	ldr	r3, [pc, #600]	@ (80045e4 <HAL_RCC_OscConfig+0x61c>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	2380      	movs	r3, #128	@ 0x80
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4013      	ands	r3, r2
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x3e2>
 800439c:	4b90      	ldr	r3, [pc, #576]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800439e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043a0:	4b8f      	ldr	r3, [pc, #572]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043a2:	2101      	movs	r1, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043a8:	e01c      	b.n	80043e4 <HAL_RCC_OscConfig+0x41c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x404>
 80043b2:	4b8b      	ldr	r3, [pc, #556]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043b6:	4b8a      	ldr	r3, [pc, #552]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043b8:	2104      	movs	r1, #4
 80043ba:	430a      	orrs	r2, r1
 80043bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043be:	4b88      	ldr	r3, [pc, #544]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043c2:	4b87      	ldr	r3, [pc, #540]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043c4:	2101      	movs	r1, #1
 80043c6:	430a      	orrs	r2, r1
 80043c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0x41c>
 80043cc:	4b84      	ldr	r3, [pc, #528]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043d0:	4b83      	ldr	r3, [pc, #524]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043d8:	4b81      	ldr	r3, [pc, #516]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043dc:	4b80      	ldr	r3, [pc, #512]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80043de:	2104      	movs	r1, #4
 80043e0:	438a      	bics	r2, r1
 80043e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d014      	beq.n	8004416 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd ff66 	bl	80022bc <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f4:	e009      	b.n	800440a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fd ff61 	bl	80022bc <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	4a79      	ldr	r2, [pc, #484]	@ (80045e8 <HAL_RCC_OscConfig+0x620>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0e6      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440a:	4b75      	ldr	r3, [pc, #468]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800440c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440e:	2202      	movs	r2, #2
 8004410:	4013      	ands	r3, r2
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x42e>
 8004414:	e013      	b.n	800443e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fd ff51 	bl	80022bc <HAL_GetTick>
 800441a:	0003      	movs	r3, r0
 800441c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800441e:	e009      	b.n	8004434 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd ff4c 	bl	80022bc <HAL_GetTick>
 8004424:	0002      	movs	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	4a6f      	ldr	r2, [pc, #444]	@ (80045e8 <HAL_RCC_OscConfig+0x620>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0d1      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	4b6a      	ldr	r3, [pc, #424]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004438:	2202      	movs	r2, #2
 800443a:	4013      	ands	r3, r2
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800443e:	231f      	movs	r3, #31
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b65      	ldr	r3, [pc, #404]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800444a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800444c:	4b64      	ldr	r3, [pc, #400]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800444e:	4967      	ldr	r1, [pc, #412]	@ (80045ec <HAL_RCC_OscConfig+0x624>)
 8004450:	400a      	ands	r2, r1
 8004452:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d100      	bne.n	800445e <HAL_RCC_OscConfig+0x496>
 800445c:	e0bb      	b.n	80045d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445e:	4b60      	ldr	r3, [pc, #384]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2238      	movs	r2, #56	@ 0x38
 8004464:	4013      	ands	r3, r2
 8004466:	2b10      	cmp	r3, #16
 8004468:	d100      	bne.n	800446c <HAL_RCC_OscConfig+0x4a4>
 800446a:	e07b      	b.n	8004564 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d156      	bne.n	8004522 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004474:	4b5a      	ldr	r3, [pc, #360]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b59      	ldr	r3, [pc, #356]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800447a:	495d      	ldr	r1, [pc, #372]	@ (80045f0 <HAL_RCC_OscConfig+0x628>)
 800447c:	400a      	ands	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd ff1c 	bl	80022bc <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448a:	f7fd ff17 	bl	80022bc <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e09d      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449c:	4b50      	ldr	r3, [pc, #320]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	049b      	lsls	r3, r3, #18
 80044a4:	4013      	ands	r3, r2
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a8:	4b4d      	ldr	r3, [pc, #308]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a51      	ldr	r2, [pc, #324]	@ (80045f4 <HAL_RCC_OscConfig+0x62c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d4:	431a      	orrs	r2, r3
 80044d6:	4b42      	ldr	r3, [pc, #264]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044dc:	4b40      	ldr	r3, [pc, #256]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b3f      	ldr	r3, [pc, #252]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80044e2:	2180      	movs	r1, #128	@ 0x80
 80044e4:	0449      	lsls	r1, r1, #17
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80044ea:	4b3d      	ldr	r3, [pc, #244]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4b3c      	ldr	r3, [pc, #240]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 80044f0:	2180      	movs	r1, #128	@ 0x80
 80044f2:	0549      	lsls	r1, r1, #21
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fee0 	bl	80022bc <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004502:	f7fd fedb 	bl	80022bc <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e061      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004514:	4b32      	ldr	r3, [pc, #200]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	049b      	lsls	r3, r3, #18
 800451c:	4013      	ands	r3, r2
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x53a>
 8004520:	e059      	b.n	80045d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b2f      	ldr	r3, [pc, #188]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b2e      	ldr	r3, [pc, #184]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004528:	4931      	ldr	r1, [pc, #196]	@ (80045f0 <HAL_RCC_OscConfig+0x628>)
 800452a:	400a      	ands	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fec5 	bl	80022bc <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fd fec0 	bl	80022bc <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e046      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454a:	4b25      	ldr	r3, [pc, #148]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	2380      	movs	r3, #128	@ 0x80
 8004550:	049b      	lsls	r3, r3, #18
 8004552:	4013      	ands	r3, r2
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004556:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b21      	ldr	r3, [pc, #132]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 800455c:	4926      	ldr	r1, [pc, #152]	@ (80045f8 <HAL_RCC_OscConfig+0x630>)
 800455e:	400a      	ands	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	e038      	b.n	80045d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e033      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004570:	4b1b      	ldr	r3, [pc, #108]	@ (80045e0 <HAL_RCC_OscConfig+0x618>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2203      	movs	r2, #3
 800457a:	401a      	ands	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	429a      	cmp	r2, r3
 8004582:	d126      	bne.n	80045d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2270      	movs	r2, #112	@ 0x70
 8004588:	401a      	ands	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d11f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	23fe      	movs	r3, #254	@ 0xfe
 8004596:	01db      	lsls	r3, r3, #7
 8004598:	401a      	ands	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d116      	bne.n	80045d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	23f8      	movs	r3, #248	@ 0xf8
 80045a8:	039b      	lsls	r3, r3, #14
 80045aa:	401a      	ands	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d10e      	bne.n	80045d2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	23e0      	movs	r3, #224	@ 0xe0
 80045b8:	051b      	lsls	r3, r3, #20
 80045ba:	401a      	ands	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	0f5b      	lsrs	r3, r3, #29
 80045c8:	075a      	lsls	r2, r3, #29
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b008      	add	sp, #32
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40007000 	.word	0x40007000
 80045e8:	00001388 	.word	0x00001388
 80045ec:	efffffff 	.word	0xefffffff
 80045f0:	feffffff 	.word	0xfeffffff
 80045f4:	11c1808c 	.word	0x11c1808c
 80045f8:	eefefffc 	.word	0xeefefffc

080045fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0e9      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b76      	ldr	r3, [pc, #472]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2207      	movs	r2, #7
 8004616:	4013      	ands	r3, r2
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d91e      	bls.n	800465c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b73      	ldr	r3, [pc, #460]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2207      	movs	r2, #7
 8004624:	4393      	bics	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	4b70      	ldr	r3, [pc, #448]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004630:	f7fd fe44 	bl	80022bc <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004638:	e009      	b.n	800464e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463a:	f7fd fe3f 	bl	80022bc <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	4a6a      	ldr	r2, [pc, #424]	@ (80047f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0ca      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800464e:	4b67      	ldr	r3, [pc, #412]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2207      	movs	r2, #7
 8004654:	4013      	ands	r3, r2
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d1ee      	bne.n	800463a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2202      	movs	r2, #2
 8004662:	4013      	ands	r3, r2
 8004664:	d015      	beq.n	8004692 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2204      	movs	r2, #4
 800466c:	4013      	ands	r3, r2
 800466e:	d006      	beq.n	800467e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004670:	4b60      	ldr	r3, [pc, #384]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	4b5f      	ldr	r3, [pc, #380]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	21e0      	movs	r1, #224	@ 0xe0
 8004678:	01c9      	lsls	r1, r1, #7
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467e:	4b5d      	ldr	r3, [pc, #372]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4a5d      	ldr	r2, [pc, #372]	@ (80047f8 <HAL_RCC_ClockConfig+0x1fc>)
 8004684:	4013      	ands	r3, r2
 8004686:	0019      	movs	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	4b59      	ldr	r3, [pc, #356]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	4013      	ands	r3, r2
 800469a:	d057      	beq.n	800474c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a4:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	029b      	lsls	r3, r3, #10
 80046ac:	4013      	ands	r3, r2
 80046ae:	d12b      	bne.n	8004708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e097      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046bc:	4b4d      	ldr	r3, [pc, #308]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	049b      	lsls	r3, r3, #18
 80046c4:	4013      	ands	r3, r2
 80046c6:	d11f      	bne.n	8004708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e08b      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d4:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4013      	ands	r3, r2
 80046de:	d113      	bne.n	8004708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e07f      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ec:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80046ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f0:	2202      	movs	r2, #2
 80046f2:	4013      	ands	r3, r2
 80046f4:	d108      	bne.n	8004708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e074      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fa:	4b3e      	ldr	r3, [pc, #248]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80046fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fe:	2202      	movs	r2, #2
 8004700:	4013      	ands	r3, r2
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06d      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004708:	4b3a      	ldr	r3, [pc, #232]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2207      	movs	r2, #7
 800470e:	4393      	bics	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4b37      	ldr	r3, [pc, #220]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fd fdce 	bl	80022bc <HAL_GetTick>
 8004720:	0003      	movs	r3, r0
 8004722:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004724:	e009      	b.n	800473a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004726:	f7fd fdc9 	bl	80022bc <HAL_GetTick>
 800472a:	0002      	movs	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e054      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b2e      	ldr	r3, [pc, #184]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2238      	movs	r2, #56	@ 0x38
 8004740:	401a      	ands	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	429a      	cmp	r2, r3
 800474a:	d1ec      	bne.n	8004726 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b27      	ldr	r3, [pc, #156]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2207      	movs	r2, #7
 8004752:	4013      	ands	r3, r2
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d21e      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b24      	ldr	r3, [pc, #144]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2207      	movs	r2, #7
 8004760:	4393      	bics	r3, r2
 8004762:	0019      	movs	r1, r3
 8004764:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800476c:	f7fd fda6 	bl	80022bc <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004774:	e009      	b.n	800478a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004776:	f7fd fda1 	bl	80022bc <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e02c      	b.n	80047e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800478a:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <HAL_RCC_ClockConfig+0x1f0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2207      	movs	r2, #7
 8004790:	4013      	ands	r3, r2
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d1ee      	bne.n	8004776 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	4013      	ands	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047a2:	4b14      	ldr	r3, [pc, #80]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <HAL_RCC_ClockConfig+0x200>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047b6:	f000 f829 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047ba:	0001      	movs	r1, r0
 80047bc:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <HAL_RCC_ClockConfig+0x1f8>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	220f      	movs	r2, #15
 80047c4:	401a      	ands	r2, r3
 80047c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <HAL_RCC_ClockConfig+0x204>)
 80047c8:	0092      	lsls	r2, r2, #2
 80047ca:	58d3      	ldr	r3, [r2, r3]
 80047cc:	221f      	movs	r2, #31
 80047ce:	4013      	ands	r3, r2
 80047d0:	000a      	movs	r2, r1
 80047d2:	40da      	lsrs	r2, r3
 80047d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <HAL_RCC_ClockConfig+0x208>)
 80047d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <HAL_RCC_ClockConfig+0x20c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0018      	movs	r0, r3
 80047de:	f7fd fd11 	bl	8002204 <HAL_InitTick>
 80047e2:	0003      	movs	r3, r0
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b004      	add	sp, #16
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40022000 	.word	0x40022000
 80047f0:	00001388 	.word	0x00001388
 80047f4:	40021000 	.word	0x40021000
 80047f8:	fffff0ff 	.word	0xfffff0ff
 80047fc:	ffff8fff 	.word	0xffff8fff
 8004800:	08009460 	.word	0x08009460
 8004804:	20000048 	.word	0x20000048
 8004808:	2000004c 	.word	0x2000004c

0800480c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004812:	4b3c      	ldr	r3, [pc, #240]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2238      	movs	r2, #56	@ 0x38
 8004818:	4013      	ands	r3, r2
 800481a:	d10f      	bne.n	800483c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800481c:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0adb      	lsrs	r3, r3, #11
 8004822:	2207      	movs	r2, #7
 8004824:	4013      	ands	r3, r2
 8004826:	2201      	movs	r2, #1
 8004828:	409a      	lsls	r2, r3
 800482a:	0013      	movs	r3, r2
 800482c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	4835      	ldr	r0, [pc, #212]	@ (8004908 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004832:	f7fb fc79 	bl	8000128 <__udivsi3>
 8004836:	0003      	movs	r3, r0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	e05d      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800483c:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2238      	movs	r2, #56	@ 0x38
 8004842:	4013      	ands	r3, r2
 8004844:	2b08      	cmp	r3, #8
 8004846:	d102      	bne.n	800484e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004848:	4b30      	ldr	r3, [pc, #192]	@ (800490c <HAL_RCC_GetSysClockFreq+0x100>)
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	e054      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484e:	4b2d      	ldr	r3, [pc, #180]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2238      	movs	r2, #56	@ 0x38
 8004854:	4013      	ands	r3, r2
 8004856:	2b10      	cmp	r3, #16
 8004858:	d138      	bne.n	80048cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800485a:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2203      	movs	r2, #3
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004864:	4b27      	ldr	r3, [pc, #156]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	2207      	movs	r2, #7
 800486c:	4013      	ands	r3, r2
 800486e:	3301      	adds	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d10d      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4824      	ldr	r0, [pc, #144]	@ (800490c <HAL_RCC_GetSysClockFreq+0x100>)
 800487c:	f7fb fc54 	bl	8000128 <__udivsi3>
 8004880:	0003      	movs	r3, r0
 8004882:	0019      	movs	r1, r3
 8004884:	4b1f      	ldr	r3, [pc, #124]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	227f      	movs	r2, #127	@ 0x7f
 800488c:	4013      	ands	r3, r2
 800488e:	434b      	muls	r3, r1
 8004890:	617b      	str	r3, [r7, #20]
        break;
 8004892:	e00d      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	481c      	ldr	r0, [pc, #112]	@ (8004908 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004898:	f7fb fc46 	bl	8000128 <__udivsi3>
 800489c:	0003      	movs	r3, r0
 800489e:	0019      	movs	r1, r3
 80048a0:	4b18      	ldr	r3, [pc, #96]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	227f      	movs	r2, #127	@ 0x7f
 80048a8:	4013      	ands	r3, r2
 80048aa:	434b      	muls	r3, r1
 80048ac:	617b      	str	r3, [r7, #20]
        break;
 80048ae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	0f5b      	lsrs	r3, r3, #29
 80048b6:	2207      	movs	r2, #7
 80048b8:	4013      	ands	r3, r2
 80048ba:	3301      	adds	r3, #1
 80048bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	6978      	ldr	r0, [r7, #20]
 80048c2:	f7fb fc31 	bl	8000128 <__udivsi3>
 80048c6:	0003      	movs	r3, r0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	e015      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80048cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2238      	movs	r2, #56	@ 0x38
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d103      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048e0:	4b08      	ldr	r3, [pc, #32]	@ (8004904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2238      	movs	r2, #56	@ 0x38
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b18      	cmp	r3, #24
 80048ea:	d103      	bne.n	80048f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80048ec:	23fa      	movs	r3, #250	@ 0xfa
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e001      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048f8:	693b      	ldr	r3, [r7, #16]
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b006      	add	sp, #24
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	40021000 	.word	0x40021000
 8004908:	00f42400 	.word	0x00f42400
 800490c:	007a1200 	.word	0x007a1200

08004910 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004914:	4b02      	ldr	r3, [pc, #8]	@ (8004920 <HAL_RCC_GetHCLKFreq+0x10>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	20000048 	.word	0x20000048

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b5b0      	push	{r4, r5, r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004928:	f7ff fff2 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 800492c:	0004      	movs	r4, r0
 800492e:	f7ff fb3f 	bl	8003fb0 <LL_RCC_GetAPB1Prescaler>
 8004932:	0003      	movs	r3, r0
 8004934:	0b1a      	lsrs	r2, r3, #12
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004938:	0092      	lsls	r2, r2, #2
 800493a:	58d3      	ldr	r3, [r2, r3]
 800493c:	221f      	movs	r2, #31
 800493e:	4013      	ands	r3, r2
 8004940:	40dc      	lsrs	r4, r3
 8004942:	0023      	movs	r3, r4
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	bdb0      	pop	{r4, r5, r7, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	080094a0 	.word	0x080094a0

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004958:	2313      	movs	r3, #19
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004960:	2312      	movs	r3, #18
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	4013      	ands	r3, r2
 8004972:	d100      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004974:	e0a3      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2011      	movs	r0, #17
 8004978:	183b      	adds	r3, r7, r0
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4bc3      	ldr	r3, [pc, #780]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	055b      	lsls	r3, r3, #21
 8004986:	4013      	ands	r3, r2
 8004988:	d110      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4bc0      	ldr	r3, [pc, #768]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800498c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800498e:	4bbf      	ldr	r3, [pc, #764]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004990:	2180      	movs	r1, #128	@ 0x80
 8004992:	0549      	lsls	r1, r1, #21
 8004994:	430a      	orrs	r2, r1
 8004996:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004998:	4bbc      	ldr	r3, [pc, #752]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800499a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	055b      	lsls	r3, r3, #21
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	183b      	adds	r3, r7, r0
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ac:	4bb8      	ldr	r3, [pc, #736]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	4bb7      	ldr	r3, [pc, #732]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	0049      	lsls	r1, r1, #1
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ba:	f7fd fc7f 	bl	80022bc <HAL_GetTick>
 80049be:	0003      	movs	r3, r0
 80049c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c2:	e00b      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c4:	f7fd fc7a 	bl	80022bc <HAL_GetTick>
 80049c8:	0002      	movs	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d904      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80049d2:	2313      	movs	r3, #19
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	2203      	movs	r2, #3
 80049d8:	701a      	strb	r2, [r3, #0]
        break;
 80049da:	e005      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049dc:	4bac      	ldr	r3, [pc, #688]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	@ 0x80
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4013      	ands	r3, r2
 80049e6:	d0ed      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80049e8:	2313      	movs	r3, #19
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d154      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049f2:	4ba6      	ldr	r3, [pc, #664]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049f6:	23c0      	movs	r3, #192	@ 0xc0
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4013      	ands	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d019      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d014      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a12:	4aa0      	ldr	r2, [pc, #640]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a18:	4b9c      	ldr	r3, [pc, #624]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a1c:	4b9b      	ldr	r3, [pc, #620]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1e:	2180      	movs	r1, #128	@ 0x80
 8004a20:	0249      	lsls	r1, r1, #9
 8004a22:	430a      	orrs	r2, r1
 8004a24:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a26:	4b99      	ldr	r3, [pc, #612]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a2a:	4b98      	ldr	r3, [pc, #608]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2c:	499a      	ldr	r1, [pc, #616]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a32:	4b96      	ldr	r3, [pc, #600]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d016      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fd fc3c 	bl	80022bc <HAL_GetTick>
 8004a44:	0003      	movs	r3, r0
 8004a46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a48:	e00c      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fd fc37 	bl	80022bc <HAL_GetTick>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	4a91      	ldr	r2, [pc, #580]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d904      	bls.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a5a:	2313      	movs	r3, #19
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2203      	movs	r2, #3
 8004a60:	701a      	strb	r2, [r3, #0]
            break;
 8004a62:	e004      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a64:	4b89      	ldr	r3, [pc, #548]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d0ed      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a6e:	2313      	movs	r3, #19
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a78:	4b84      	ldr	r3, [pc, #528]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	4a85      	ldr	r2, [pc, #532]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a86:	4b81      	ldr	r3, [pc, #516]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a8c:	e00c      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a8e:	2312      	movs	r3, #18
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	2213      	movs	r2, #19
 8004a94:	18ba      	adds	r2, r7, r2
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e005      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	2312      	movs	r3, #18
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	2213      	movs	r2, #19
 8004aa2:	18ba      	adds	r2, r7, r2
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aa8:	2311      	movs	r3, #17
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d105      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab2:	4b76      	ldr	r3, [pc, #472]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab6:	4b75      	ldr	r3, [pc, #468]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab8:	4979      	ldr	r1, [pc, #484]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac8:	4b70      	ldr	r3, [pc, #448]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	2203      	movs	r2, #3
 8004ace:	4393      	bics	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae6:	4b69      	ldr	r3, [pc, #420]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aea:	220c      	movs	r2, #12
 8004aec:	4393      	bics	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	4b65      	ldr	r3, [pc, #404]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af6:	430a      	orrs	r2, r1
 8004af8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2210      	movs	r2, #16
 8004b00:	4013      	ands	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b04:	4b61      	ldr	r3, [pc, #388]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	4a66      	ldr	r2, [pc, #408]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	4b5e      	ldr	r3, [pc, #376]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b14:	430a      	orrs	r2, r1
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	@ 0x80
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4013      	ands	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b24:	4b59      	ldr	r3, [pc, #356]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b28:	4a5f      	ldr	r2, [pc, #380]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	4b56      	ldr	r3, [pc, #344]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b34:	430a      	orrs	r2, r1
 8004b36:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4013      	ands	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b44:	4b51      	ldr	r3, [pc, #324]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	4a58      	ldr	r2, [pc, #352]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	4b4e      	ldr	r3, [pc, #312]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b54:	430a      	orrs	r2, r1
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b62:	4b4a      	ldr	r3, [pc, #296]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b66:	4a52      	ldr	r2, [pc, #328]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	4b46      	ldr	r3, [pc, #280]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	01db      	lsls	r3, r3, #7
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d015      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b82:	4b42      	ldr	r3, [pc, #264]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	0899      	lsrs	r1, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b90:	430a      	orrs	r2, r1
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	2380      	movs	r3, #128	@ 0x80
 8004b9a:	05db      	lsls	r3, r3, #23
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d106      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	4b39      	ldr	r3, [pc, #228]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba6:	2180      	movs	r1, #128	@ 0x80
 8004ba8:	0249      	lsls	r1, r1, #9
 8004baa:	430a      	orrs	r2, r1
 8004bac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	031b      	lsls	r3, r3, #12
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bba:	4b34      	ldr	r3, [pc, #208]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	2240      	movs	r2, #64	@ 0x40
 8004bc0:	4393      	bics	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bc8:	4b30      	ldr	r3, [pc, #192]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	039b      	lsls	r3, r3, #14
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bda:	4b2c      	ldr	r3, [pc, #176]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bde:	4a35      	ldr	r2, [pc, #212]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	0019      	movs	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004be8:	4b28      	ldr	r3, [pc, #160]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bea:	430a      	orrs	r2, r1
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	03db      	lsls	r3, r3, #15
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bfa:	4b24      	ldr	r3, [pc, #144]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	4b23      	ldr	r3, [pc, #140]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c00:	2180      	movs	r1, #128	@ 0x80
 8004c02:	0449      	lsls	r1, r1, #17
 8004c04:	430a      	orrs	r2, r1
 8004c06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	03db      	lsls	r3, r3, #15
 8004c10:	4013      	ands	r3, r2
 8004c12:	d016      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c18:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	4b1a      	ldr	r3, [pc, #104]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2c:	2380      	movs	r3, #128	@ 0x80
 8004c2e:	045b      	lsls	r3, r3, #17
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d106      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c34:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c3a:	2180      	movs	r1, #128	@ 0x80
 8004c3c:	0449      	lsls	r1, r1, #17
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d016      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	01db      	lsls	r3, r3, #7
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c6e:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c74:	2180      	movs	r1, #128	@ 0x80
 8004c76:	0249      	lsls	r1, r1, #9
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c7c:	2312      	movs	r3, #18
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	781b      	ldrb	r3, [r3, #0]
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b006      	add	sp, #24
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40007000 	.word	0x40007000
 8004c94:	fffffcff 	.word	0xfffffcff
 8004c98:	fffeffff 	.word	0xfffeffff
 8004c9c:	00001388 	.word	0x00001388
 8004ca0:	efffffff 	.word	0xefffffff
 8004ca4:	fffff3ff 	.word	0xfffff3ff
 8004ca8:	fff3ffff 	.word	0xfff3ffff
 8004cac:	ffcfffff 	.word	0xffcfffff
 8004cb0:	ffffcfff 	.word	0xffffcfff
 8004cb4:	ffbfffff 	.word	0xffbfffff
 8004cb8:	feffffff 	.word	0xfeffffff
 8004cbc:	ffff3fff 	.word	0xffff3fff

08004cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e04a      	b.n	8004d68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	223d      	movs	r2, #61	@ 0x3d
 8004cd6:	5c9b      	ldrb	r3, [r3, r2]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	223c      	movs	r2, #60	@ 0x3c
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f7fc ffe5 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	223d      	movs	r2, #61	@ 0x3d
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	0019      	movs	r1, r3
 8004d00:	0010      	movs	r0, r2
 8004d02:	f000 fd45 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2248      	movs	r2, #72	@ 0x48
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223e      	movs	r2, #62	@ 0x3e
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	223f      	movs	r2, #63	@ 0x3f
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2240      	movs	r2, #64	@ 0x40
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2241      	movs	r2, #65	@ 0x41
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2242      	movs	r2, #66	@ 0x42
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2243      	movs	r2, #67	@ 0x43
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2244      	movs	r2, #68	@ 0x44
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2245      	movs	r2, #69	@ 0x45
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2246      	movs	r2, #70	@ 0x46
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2247      	movs	r2, #71	@ 0x47
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	223d      	movs	r2, #61	@ 0x3d
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	223d      	movs	r2, #61	@ 0x3d
 8004d7c:	5c9b      	ldrb	r3, [r3, r2]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d001      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e042      	b.n	8004e0e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	223d      	movs	r2, #61	@ 0x3d
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xa8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0x5a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	05db      	lsls	r3, r3, #23
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d009      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0x5a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a18      	ldr	r2, [pc, #96]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xac>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_TIM_Base_Start_IT+0x5a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a16      	ldr	r2, [pc, #88]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d116      	bne.n	8004df8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a14      	ldr	r2, [pc, #80]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xb4>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d016      	beq.n	8004e0a <HAL_TIM_Base_Start_IT+0x9a>
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	2380      	movs	r3, #128	@ 0x80
 8004de0:	025b      	lsls	r3, r3, #9
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d011      	beq.n	8004e0a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	e008      	b.n	8004e0a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2101      	movs	r1, #1
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b004      	add	sp, #16
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	00010007 	.word	0x00010007

08004e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e04a      	b.n	8004ed0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	223d      	movs	r2, #61	@ 0x3d
 8004e3e:	5c9b      	ldrb	r3, [r3, r2]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	223c      	movs	r2, #60	@ 0x3c
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fc fe73 	bl	8001b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	223d      	movs	r2, #61	@ 0x3d
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3304      	adds	r3, #4
 8004e66:	0019      	movs	r1, r3
 8004e68:	0010      	movs	r0, r2
 8004e6a:	f000 fc91 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2248      	movs	r2, #72	@ 0x48
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	223e      	movs	r2, #62	@ 0x3e
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	223f      	movs	r2, #63	@ 0x3f
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2240      	movs	r2, #64	@ 0x40
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2241      	movs	r2, #65	@ 0x41
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2242      	movs	r2, #66	@ 0x42
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2243      	movs	r2, #67	@ 0x43
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2244      	movs	r2, #68	@ 0x44
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2245      	movs	r2, #69	@ 0x45
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2246      	movs	r2, #70	@ 0x46
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2247      	movs	r2, #71	@ 0x47
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	223d      	movs	r2, #61	@ 0x3d
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d108      	bne.n	8004efa <HAL_TIM_PWM_Start+0x22>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	223e      	movs	r2, #62	@ 0x3e
 8004eec:	5c9b      	ldrb	r3, [r3, r2]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	4193      	sbcs	r3, r2
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e037      	b.n	8004f6a <HAL_TIM_PWM_Start+0x92>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d108      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x3a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223f      	movs	r2, #63	@ 0x3f
 8004f04:	5c9b      	ldrb	r3, [r3, r2]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	1e5a      	subs	r2, r3, #1
 8004f0c:	4193      	sbcs	r3, r2
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e02b      	b.n	8004f6a <HAL_TIM_PWM_Start+0x92>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d108      	bne.n	8004f2a <HAL_TIM_PWM_Start+0x52>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2240      	movs	r2, #64	@ 0x40
 8004f1c:	5c9b      	ldrb	r3, [r3, r2]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	1e5a      	subs	r2, r3, #1
 8004f24:	4193      	sbcs	r3, r2
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e01f      	b.n	8004f6a <HAL_TIM_PWM_Start+0x92>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d108      	bne.n	8004f42 <HAL_TIM_PWM_Start+0x6a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2241      	movs	r2, #65	@ 0x41
 8004f34:	5c9b      	ldrb	r3, [r3, r2]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	1e5a      	subs	r2, r3, #1
 8004f3c:	4193      	sbcs	r3, r2
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	e013      	b.n	8004f6a <HAL_TIM_PWM_Start+0x92>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d108      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x82>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2242      	movs	r2, #66	@ 0x42
 8004f4c:	5c9b      	ldrb	r3, [r3, r2]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	1e5a      	subs	r2, r3, #1
 8004f54:	4193      	sbcs	r3, r2
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e007      	b.n	8004f6a <HAL_TIM_PWM_Start+0x92>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2243      	movs	r2, #67	@ 0x43
 8004f5e:	5c9b      	ldrb	r3, [r3, r2]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	1e5a      	subs	r2, r3, #1
 8004f66:	4193      	sbcs	r3, r2
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e08b      	b.n	800508a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_PWM_Start+0xaa>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	223e      	movs	r2, #62	@ 0x3e
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	5499      	strb	r1, [r3, r2]
 8004f80:	e023      	b.n	8004fca <HAL_TIM_PWM_Start+0xf2>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_PWM_Start+0xba>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	223f      	movs	r2, #63	@ 0x3f
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	5499      	strb	r1, [r3, r2]
 8004f90:	e01b      	b.n	8004fca <HAL_TIM_PWM_Start+0xf2>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0xca>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2240      	movs	r2, #64	@ 0x40
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	5499      	strb	r1, [r3, r2]
 8004fa0:	e013      	b.n	8004fca <HAL_TIM_PWM_Start+0xf2>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0xda>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2241      	movs	r2, #65	@ 0x41
 8004fac:	2102      	movs	r1, #2
 8004fae:	5499      	strb	r1, [r3, r2]
 8004fb0:	e00b      	b.n	8004fca <HAL_TIM_PWM_Start+0xf2>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_PWM_Start+0xea>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2242      	movs	r2, #66	@ 0x42
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	5499      	strb	r1, [r3, r2]
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_PWM_Start+0xf2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2243      	movs	r2, #67	@ 0x43
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f001 f968 	bl	80062a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8005094 <HAL_TIM_PWM_Start+0x1bc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_PWM_Start+0x128>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <HAL_TIM_PWM_Start+0x1c0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_PWM_Start+0x128>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800509c <HAL_TIM_PWM_Start+0x1c4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start+0x128>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a29      	ldr	r2, [pc, #164]	@ (80050a0 <HAL_TIM_PWM_Start+0x1c8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_PWM_Start+0x12c>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_Start+0x12e>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	@ 0x80
 8005016:	0209      	lsls	r1, r1, #8
 8005018:	430a      	orrs	r2, r1
 800501a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <HAL_TIM_PWM_Start+0x1bc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <HAL_TIM_PWM_Start+0x16e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	@ 0x80
 800502c:	05db      	lsls	r3, r3, #23
 800502e:	429a      	cmp	r2, r3
 8005030:	d009      	beq.n	8005046 <HAL_TIM_PWM_Start+0x16e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <HAL_TIM_PWM_Start+0x1cc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_PWM_Start+0x16e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <HAL_TIM_PWM_Start+0x1c0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d116      	bne.n	8005074 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <HAL_TIM_PWM_Start+0x1d0>)
 800504e:	4013      	ands	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d016      	beq.n	8005086 <HAL_TIM_PWM_Start+0x1ae>
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	025b      	lsls	r3, r3, #9
 800505e:	429a      	cmp	r2, r3
 8005060:	d011      	beq.n	8005086 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005072:	e008      	b.n	8005086 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2101      	movs	r1, #1
 8005080:	430a      	orrs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e000      	b.n	8005088 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005086:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	0018      	movs	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800
 80050a4:	40000400 	.word	0x40000400
 80050a8:	00010007 	.word	0x00010007

080050ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e04a      	b.n	8005154 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	223d      	movs	r2, #61	@ 0x3d
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	223c      	movs	r2, #60	@ 0x3c
 80050ce:	2100      	movs	r1, #0
 80050d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7fc fda5 	bl	8001c24 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	223d      	movs	r2, #61	@ 0x3d
 80050de:	2102      	movs	r1, #2
 80050e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3304      	adds	r3, #4
 80050ea:	0019      	movs	r1, r3
 80050ec:	0010      	movs	r0, r2
 80050ee:	f000 fb4f 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2248      	movs	r2, #72	@ 0x48
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	223e      	movs	r2, #62	@ 0x3e
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	223f      	movs	r2, #63	@ 0x3f
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2240      	movs	r2, #64	@ 0x40
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2241      	movs	r2, #65	@ 0x41
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2242      	movs	r2, #66	@ 0x42
 800511e:	2101      	movs	r1, #1
 8005120:	5499      	strb	r1, [r3, r2]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2243      	movs	r2, #67	@ 0x43
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2244      	movs	r2, #68	@ 0x44
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2245      	movs	r2, #69	@ 0x45
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2246      	movs	r2, #70	@ 0x46
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2247      	movs	r2, #71	@ 0x47
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	223d      	movs	r2, #61	@ 0x3d
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d021      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2203      	movs	r2, #3
 800518a:	4252      	negs	r2, r2
 800518c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2203      	movs	r2, #3
 800519c:	4013      	ands	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 fadc 	bl	8005760 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e007      	b.n	80051ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 facf 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 fadb 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2204      	movs	r2, #4
 80051cc:	4013      	ands	r3, r2
 80051ce:	d01e      	beq.n	800520e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2205      	movs	r2, #5
 80051d6:	4252      	negs	r2, r2
 80051d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	23c0      	movs	r3, #192	@ 0xc0
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4013      	ands	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 fab5 	bl	8005760 <HAL_TIM_IC_CaptureCallback>
 80051f6:	e007      	b.n	8005208 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 faa8 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 fab4 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2208      	movs	r2, #8
 8005212:	4013      	ands	r3, r2
 8005214:	d021      	beq.n	800525a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2208      	movs	r2, #8
 800521a:	4013      	ands	r3, r2
 800521c:	d01d      	beq.n	800525a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2209      	movs	r2, #9
 8005224:	4252      	negs	r2, r2
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	2203      	movs	r2, #3
 8005236:	4013      	ands	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fa8f 	bl	8005760 <HAL_TIM_IC_CaptureCallback>
 8005242:	e007      	b.n	8005254 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0018      	movs	r0, r3
 8005248:	f000 fa82 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0018      	movs	r0, r3
 8005250:	f000 fa8e 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d022      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2210      	movs	r2, #16
 8005266:	4013      	ands	r3, r2
 8005268:	d01e      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2211      	movs	r2, #17
 8005270:	4252      	negs	r2, r2
 8005272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2208      	movs	r2, #8
 8005278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	23c0      	movs	r3, #192	@ 0xc0
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4013      	ands	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 fa68 	bl	8005760 <HAL_TIM_IC_CaptureCallback>
 8005290:	e007      	b.n	80052a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fa5b 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fa67 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d00c      	beq.n	80052ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4013      	ands	r3, r2
 80052b6:	d008      	beq.n	80052ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2202      	movs	r2, #2
 80052be:	4252      	negs	r2, r2
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 fa3b 	bl	8005740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2280      	movs	r2, #128	@ 0x80
 80052ce:	4013      	ands	r3, r2
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	019b      	lsls	r3, r3, #6
 80052d8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052da:	d00b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2280      	movs	r2, #128	@ 0x80
 80052e0:	4013      	ands	r3, r2
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <HAL_TIM_IRQHandler+0x208>)
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	0018      	movs	r0, r3
 80052f0:	f001 f9bb 	bl	800666a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	d00b      	beq.n	8005316 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	4013      	ands	r3, r2
 8005304:	d007      	beq.n	8005316 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <HAL_TIM_IRQHandler+0x20c>)
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0018      	movs	r0, r3
 8005312:	f001 f9b2 	bl	800667a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	4013      	ands	r3, r2
 800531c:	d00c      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2240      	movs	r2, #64	@ 0x40
 8005322:	4013      	ands	r3, r2
 8005324:	d008      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2241      	movs	r2, #65	@ 0x41
 800532c:	4252      	negs	r2, r2
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fa24 	bl	8005780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2220      	movs	r2, #32
 800533c:	4013      	ands	r3, r2
 800533e:	d00c      	beq.n	800535a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	4013      	ands	r3, r2
 8005346:	d008      	beq.n	800535a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2221      	movs	r2, #33	@ 0x21
 800534e:	4252      	negs	r2, r2
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f001 f980 	bl	800665a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	ffffdf7f 	.word	0xffffdf7f
 8005368:	fffffeff 	.word	0xfffffeff

0800536c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	2317      	movs	r3, #23
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	223c      	movs	r2, #60	@ 0x3c
 8005384:	5c9b      	ldrb	r3, [r3, r2]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_TIM_IC_ConfigChannel+0x22>
 800538a:	2302      	movs	r3, #2
 800538c:	e08c      	b.n	80054a8 <HAL_TIM_IC_ConfigChannel+0x13c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	223c      	movs	r2, #60	@ 0x3c
 8005392:	2101      	movs	r1, #1
 8005394:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053ac:	f000 fdd8 	bl	8005f60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	210c      	movs	r1, #12
 80053bc:	438a      	bics	r2, r1
 80053be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	619a      	str	r2, [r3, #24]
 80053d2:	e062      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d11c      	bne.n	8005414 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80053ea:	f000 fe43 	bl	8006074 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	492d      	ldr	r1, [pc, #180]	@ (80054b0 <HAL_TIM_IC_ConfigChannel+0x144>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6999      	ldr	r1, [r3, #24]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	021a      	lsls	r2, r3, #8
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	619a      	str	r2, [r3, #24]
 8005412:	e042      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b08      	cmp	r3, #8
 8005418:	d11b      	bne.n	8005452 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800542a:	f000 fe97 	bl	800615c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	210c      	movs	r1, #12
 800543a:	438a      	bics	r2, r1
 800543c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
 8005450:	e023      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b0c      	cmp	r3, #12
 8005456:	d11c      	bne.n	8005492 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005468:	f000 feb8 	bl	80061dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	490e      	ldr	r1, [pc, #56]	@ (80054b0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005478:	400a      	ands	r2, r1
 800547a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69d9      	ldr	r1, [r3, #28]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
 8005490:	e003      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005492:	2317      	movs	r3, #23
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	223c      	movs	r2, #60	@ 0x3c
 800549e:	2100      	movs	r1, #0
 80054a0:	5499      	strb	r1, [r3, r2]

  return status;
 80054a2:	2317      	movs	r3, #23
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	781b      	ldrb	r3, [r3, #0]
}
 80054a8:	0018      	movs	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b006      	add	sp, #24
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	fffff3ff 	.word	0xfffff3ff

080054b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2317      	movs	r3, #23
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	223c      	movs	r2, #60	@ 0x3c
 80054cc:	5c9b      	ldrb	r3, [r3, r2]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e0e5      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	223c      	movs	r2, #60	@ 0x3c
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b14      	cmp	r3, #20
 80054e2:	d900      	bls.n	80054e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80054e4:	e0d1      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	009a      	lsls	r2, r3, #2
 80054ea:	4b70      	ldr	r3, [pc, #448]	@ (80056ac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	0011      	movs	r1, r2
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 f9d6 	bl	80058ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2108      	movs	r1, #8
 800550c:	430a      	orrs	r2, r1
 800550e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2104      	movs	r1, #4
 800551c:	438a      	bics	r2, r1
 800551e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6999      	ldr	r1, [r3, #24]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	619a      	str	r2, [r3, #24]
      break;
 8005532:	e0af      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	0011      	movs	r1, r2
 800553c:	0018      	movs	r0, r3
 800553e:	f000 fa3f 	bl	80059c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2180      	movs	r1, #128	@ 0x80
 800554e:	0109      	lsls	r1, r1, #4
 8005550:	430a      	orrs	r2, r1
 8005552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4954      	ldr	r1, [pc, #336]	@ (80056b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005560:	400a      	ands	r2, r1
 8005562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]
      break;
 8005578:	e08c      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	0011      	movs	r1, r2
 8005582:	0018      	movs	r0, r3
 8005584:	f000 faa0 	bl	8005ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2108      	movs	r1, #8
 8005594:	430a      	orrs	r2, r1
 8005596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2104      	movs	r1, #4
 80055a4:	438a      	bics	r2, r1
 80055a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69d9      	ldr	r1, [r3, #28]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	61da      	str	r2, [r3, #28]
      break;
 80055ba:	e06b      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	0011      	movs	r1, r2
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 fb07 	bl	8005bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2180      	movs	r1, #128	@ 0x80
 80055d6:	0109      	lsls	r1, r1, #4
 80055d8:	430a      	orrs	r2, r1
 80055da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4932      	ldr	r1, [pc, #200]	@ (80056b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80055e8:	400a      	ands	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69d9      	ldr	r1, [r3, #28]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
      break;
 8005600:	e048      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0011      	movs	r1, r2
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fb4e 	bl	8005cac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2108      	movs	r1, #8
 800561c:	430a      	orrs	r2, r1
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2104      	movs	r1, #4
 800562c:	438a      	bics	r2, r1
 800562e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005642:	e027      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	0011      	movs	r1, r2
 800564c:	0018      	movs	r0, r3
 800564e:	f000 fb8d 	bl	8005d6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2180      	movs	r1, #128	@ 0x80
 800565e:	0109      	lsls	r1, r1, #4
 8005660:	430a      	orrs	r2, r1
 8005662:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4910      	ldr	r1, [pc, #64]	@ (80056b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005670:	400a      	ands	r2, r1
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005688:	e004      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800568a:	2317      	movs	r3, #23
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
      break;
 8005692:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	223c      	movs	r2, #60	@ 0x3c
 8005698:	2100      	movs	r1, #0
 800569a:	5499      	strb	r1, [r3, r2]

  return status;
 800569c:	2317      	movs	r3, #23
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	781b      	ldrb	r3, [r3, #0]
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b006      	add	sp, #24
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	080094c0 	.word	0x080094c0
 80056b0:	fffffbff 	.word	0xfffffbff

080056b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	223c      	movs	r2, #60	@ 0x3c
 80056c2:	5c9b      	ldrb	r3, [r3, r2]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e032      	b.n	8005732 <HAL_TIM_SlaveConfigSynchro+0x7e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	223c      	movs	r2, #60	@ 0x3c
 80056d0:	2101      	movs	r1, #1
 80056d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	223d      	movs	r2, #61	@ 0x3d
 80056d8:	2102      	movs	r1, #2
 80056da:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0011      	movs	r1, r2
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 fba6 	bl	8005e34 <TIM_SlaveTimer_SetConfig>
 80056e8:	1e03      	subs	r3, r0, #0
 80056ea:	d009      	beq.n	8005700 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	223d      	movs	r2, #61	@ 0x3d
 80056f0:	2101      	movs	r1, #1
 80056f2:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	223c      	movs	r2, #60	@ 0x3c
 80056f8:	2100      	movs	r1, #0
 80056fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e018      	b.n	8005732 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2140      	movs	r1, #64	@ 0x40
 800570c:	438a      	bics	r2, r1
 800570e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4908      	ldr	r1, [pc, #32]	@ (800573c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800571c:	400a      	ands	r2, r1
 800571e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	223d      	movs	r2, #61	@ 0x3d
 8005724:	2101      	movs	r1, #1
 8005726:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	223c      	movs	r2, #60	@ 0x3c
 800572c:	2100      	movs	r1, #0
 800572e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b002      	add	sp, #8
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	ffffbfff 	.word	0xffffbfff

08005740 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005748:	46c0      	nop			@ (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b002      	add	sp, #8
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	46bd      	mov	sp, r7
 800575c:	b002      	add	sp, #8
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005768:	46c0      	nop			@ (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b002      	add	sp, #8
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005778:	46c0      	nop			@ (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	b002      	add	sp, #8
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005788:	46c0      	nop			@ (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005890 <TIM_Base_SetConfig+0x100>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d008      	beq.n	80057ba <TIM_Base_SetConfig+0x2a>
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	2380      	movs	r3, #128	@ 0x80
 80057ac:	05db      	lsls	r3, r3, #23
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d003      	beq.n	80057ba <TIM_Base_SetConfig+0x2a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a37      	ldr	r2, [pc, #220]	@ (8005894 <TIM_Base_SetConfig+0x104>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d108      	bne.n	80057cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2270      	movs	r2, #112	@ 0x70
 80057be:	4393      	bics	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a30      	ldr	r2, [pc, #192]	@ (8005890 <TIM_Base_SetConfig+0x100>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <TIM_Base_SetConfig+0x76>
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	2380      	movs	r3, #128	@ 0x80
 80057d8:	05db      	lsls	r3, r3, #23
 80057da:	429a      	cmp	r2, r3
 80057dc:	d013      	beq.n	8005806 <TIM_Base_SetConfig+0x76>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005894 <TIM_Base_SetConfig+0x104>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_Base_SetConfig+0x76>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005898 <TIM_Base_SetConfig+0x108>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0x76>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2a      	ldr	r2, [pc, #168]	@ (800589c <TIM_Base_SetConfig+0x10c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0x76>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a29      	ldr	r2, [pc, #164]	@ (80058a0 <TIM_Base_SetConfig+0x110>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a28      	ldr	r2, [pc, #160]	@ (80058a4 <TIM_Base_SetConfig+0x114>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d108      	bne.n	8005818 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a27      	ldr	r2, [pc, #156]	@ (80058a8 <TIM_Base_SetConfig+0x118>)
 800580a:	4013      	ands	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2280      	movs	r2, #128	@ 0x80
 800581c:	4393      	bics	r3, r2
 800581e:	001a      	movs	r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a13      	ldr	r2, [pc, #76]	@ (8005890 <TIM_Base_SetConfig+0x100>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00b      	beq.n	800585e <TIM_Base_SetConfig+0xce>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a14      	ldr	r2, [pc, #80]	@ (800589c <TIM_Base_SetConfig+0x10c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d007      	beq.n	800585e <TIM_Base_SetConfig+0xce>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a13      	ldr	r2, [pc, #76]	@ (80058a0 <TIM_Base_SetConfig+0x110>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_Base_SetConfig+0xce>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <TIM_Base_SetConfig+0x114>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d103      	bne.n	8005866 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2201      	movs	r2, #1
 800587e:	4393      	bics	r3, r2
 8005880:	001a      	movs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	611a      	str	r2, [r3, #16]
  }
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b004      	add	sp, #16
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40000400 	.word	0x40000400
 8005898:	40002000 	.word	0x40002000
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800
 80058a8:	fffffcff 	.word	0xfffffcff

080058ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	2201      	movs	r2, #1
 80058c2:	4393      	bics	r3, r2
 80058c4:	001a      	movs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a32      	ldr	r2, [pc, #200]	@ (80059a4 <TIM_OC1_SetConfig+0xf8>)
 80058da:	4013      	ands	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2203      	movs	r2, #3
 80058e2:	4393      	bics	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2202      	movs	r2, #2
 80058f4:	4393      	bics	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a28      	ldr	r2, [pc, #160]	@ (80059a8 <TIM_OC1_SetConfig+0xfc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_OC1_SetConfig+0x76>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a27      	ldr	r2, [pc, #156]	@ (80059ac <TIM_OC1_SetConfig+0x100>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC1_SetConfig+0x76>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a26      	ldr	r2, [pc, #152]	@ (80059b0 <TIM_OC1_SetConfig+0x104>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC1_SetConfig+0x76>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a25      	ldr	r2, [pc, #148]	@ (80059b4 <TIM_OC1_SetConfig+0x108>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10c      	bne.n	800593c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2208      	movs	r2, #8
 8005926:	4393      	bics	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2204      	movs	r2, #4
 8005938:	4393      	bics	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1a      	ldr	r2, [pc, #104]	@ (80059a8 <TIM_OC1_SetConfig+0xfc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00b      	beq.n	800595c <TIM_OC1_SetConfig+0xb0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <TIM_OC1_SetConfig+0x100>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d007      	beq.n	800595c <TIM_OC1_SetConfig+0xb0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a18      	ldr	r2, [pc, #96]	@ (80059b0 <TIM_OC1_SetConfig+0x104>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC1_SetConfig+0xb0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a17      	ldr	r2, [pc, #92]	@ (80059b4 <TIM_OC1_SetConfig+0x108>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d111      	bne.n	8005980 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4a16      	ldr	r2, [pc, #88]	@ (80059b8 <TIM_OC1_SetConfig+0x10c>)
 8005960:	4013      	ands	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4a15      	ldr	r2, [pc, #84]	@ (80059bc <TIM_OC1_SetConfig+0x110>)
 8005968:	4013      	ands	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	46bd      	mov	sp, r7
 800599e:	b006      	add	sp, #24
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	fffeff8f 	.word	0xfffeff8f
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	fffffeff 	.word	0xfffffeff
 80059bc:	fffffdff 	.word	0xfffffdff

080059c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	2210      	movs	r2, #16
 80059d6:	4393      	bics	r3, r2
 80059d8:	001a      	movs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa8 <TIM_OC2_SetConfig+0xe8>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	@ (8005aac <TIM_OC2_SetConfig+0xec>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	@ (8005ab0 <TIM_OC2_SetConfig+0xf0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10d      	bne.n	8005a3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2280      	movs	r2, #128	@ 0x80
 8005a26:	4393      	bics	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2240      	movs	r2, #64	@ 0x40
 8005a3a:	4393      	bics	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <TIM_OC2_SetConfig+0xf0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_OC2_SetConfig+0x9e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <TIM_OC2_SetConfig+0xf4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_OC2_SetConfig+0x9e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <TIM_OC2_SetConfig+0xf8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC2_SetConfig+0x9e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a18      	ldr	r2, [pc, #96]	@ (8005abc <TIM_OC2_SetConfig+0xfc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d113      	bne.n	8005a86 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <TIM_OC2_SetConfig+0x100>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <TIM_OC2_SetConfig+0x104>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	46c0      	nop			@ (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b006      	add	sp, #24
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	feff8fff 	.word	0xfeff8fff
 8005aac:	fffffcff 	.word	0xfffffcff
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800
 8005ac0:	fffffbff 	.word	0xfffffbff
 8005ac4:	fffff7ff 	.word	0xfffff7ff

08005ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4a33      	ldr	r2, [pc, #204]	@ (8005bac <TIM_OC3_SetConfig+0xe4>)
 8005ade:	401a      	ands	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a2f      	ldr	r2, [pc, #188]	@ (8005bb0 <TIM_OC3_SetConfig+0xe8>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2203      	movs	r2, #3
 8005afc:	4393      	bics	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4a29      	ldr	r2, [pc, #164]	@ (8005bb4 <TIM_OC3_SetConfig+0xec>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a25      	ldr	r2, [pc, #148]	@ (8005bb8 <TIM_OC3_SetConfig+0xf0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10d      	bne.n	8005b42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4a24      	ldr	r2, [pc, #144]	@ (8005bbc <TIM_OC3_SetConfig+0xf4>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4a20      	ldr	r2, [pc, #128]	@ (8005bc0 <TIM_OC3_SetConfig+0xf8>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb8 <TIM_OC3_SetConfig+0xf0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00b      	beq.n	8005b62 <TIM_OC3_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc4 <TIM_OC3_SetConfig+0xfc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <TIM_OC3_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc8 <TIM_OC3_SetConfig+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_OC3_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bcc <TIM_OC3_SetConfig+0x104>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d113      	bne.n	8005b8a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd0 <TIM_OC3_SetConfig+0x108>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	@ (8005bd4 <TIM_OC3_SetConfig+0x10c>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	46c0      	nop			@ (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b006      	add	sp, #24
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	fffffeff 	.word	0xfffffeff
 8005bb0:	fffeff8f 	.word	0xfffeff8f
 8005bb4:	fffffdff 	.word	0xfffffdff
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	fffff7ff 	.word	0xfffff7ff
 8005bc0:	fffffbff 	.word	0xfffffbff
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800
 8005bd0:	ffffefff 	.word	0xffffefff
 8005bd4:	ffffdfff 	.word	0xffffdfff

08005bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	4a26      	ldr	r2, [pc, #152]	@ (8005c88 <TIM_OC4_SetConfig+0xb0>)
 8005bee:	401a      	ands	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a22      	ldr	r2, [pc, #136]	@ (8005c8c <TIM_OC4_SetConfig+0xb4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a21      	ldr	r2, [pc, #132]	@ (8005c90 <TIM_OC4_SetConfig+0xb8>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <TIM_OC4_SetConfig+0xbc>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <TIM_OC4_SetConfig+0xc0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_OC4_SetConfig+0x78>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <TIM_OC4_SetConfig+0xc4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_OC4_SetConfig+0x78>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a17      	ldr	r2, [pc, #92]	@ (8005ca0 <TIM_OC4_SetConfig+0xc8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC4_SetConfig+0x78>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a16      	ldr	r2, [pc, #88]	@ (8005ca4 <TIM_OC4_SetConfig+0xcc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d109      	bne.n	8005c64 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4a15      	ldr	r2, [pc, #84]	@ (8005ca8 <TIM_OC4_SetConfig+0xd0>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b006      	add	sp, #24
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	ffffefff 	.word	0xffffefff
 8005c8c:	feff8fff 	.word	0xfeff8fff
 8005c90:	fffffcff 	.word	0xfffffcff
 8005c94:	ffffdfff 	.word	0xffffdfff
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800
 8005ca8:	ffffbfff 	.word	0xffffbfff

08005cac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	@ (8005d50 <TIM_OC5_SetConfig+0xa4>)
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d54 <TIM_OC5_SetConfig+0xa8>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <TIM_OC5_SetConfig+0xac>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	@ (8005d5c <TIM_OC5_SetConfig+0xb0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_OC5_SetConfig+0x6e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a16      	ldr	r2, [pc, #88]	@ (8005d60 <TIM_OC5_SetConfig+0xb4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_OC5_SetConfig+0x6e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <TIM_OC5_SetConfig+0xb8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_OC5_SetConfig+0x6e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a14      	ldr	r2, [pc, #80]	@ (8005d68 <TIM_OC5_SetConfig+0xbc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d109      	bne.n	8005d2e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d50 <TIM_OC5_SetConfig+0xa4>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b006      	add	sp, #24
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	fffeffff 	.word	0xfffeffff
 8005d54:	fffeff8f 	.word	0xfffeff8f
 8005d58:	fffdffff 	.word	0xfffdffff
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800

08005d6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	4a24      	ldr	r2, [pc, #144]	@ (8005e14 <TIM_OC6_SetConfig+0xa8>)
 8005d82:	401a      	ands	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a20      	ldr	r2, [pc, #128]	@ (8005e18 <TIM_OC6_SetConfig+0xac>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4a1c      	ldr	r2, [pc, #112]	@ (8005e1c <TIM_OC6_SetConfig+0xb0>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	051b      	lsls	r3, r3, #20
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	@ (8005e20 <TIM_OC6_SetConfig+0xb4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00b      	beq.n	8005ddc <TIM_OC6_SetConfig+0x70>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a17      	ldr	r2, [pc, #92]	@ (8005e24 <TIM_OC6_SetConfig+0xb8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d007      	beq.n	8005ddc <TIM_OC6_SetConfig+0x70>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a16      	ldr	r2, [pc, #88]	@ (8005e28 <TIM_OC6_SetConfig+0xbc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC6_SetConfig+0x70>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a15      	ldr	r2, [pc, #84]	@ (8005e2c <TIM_OC6_SetConfig+0xc0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4a14      	ldr	r2, [pc, #80]	@ (8005e30 <TIM_OC6_SetConfig+0xc4>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b006      	add	sp, #24
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	ffefffff 	.word	0xffefffff
 8005e18:	feff8fff 	.word	0xfeff8fff
 8005e1c:	ffdfffff 	.word	0xffdfffff
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40014400 	.word	0x40014400
 8005e2c:	40014800 	.word	0x40014800
 8005e30:	fffbffff 	.word	0xfffbffff

08005e34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2317      	movs	r3, #23
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4a41      	ldr	r2, [pc, #260]	@ (8005f58 <TIM_SlaveTimer_SetConfig+0x124>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4a3e      	ldr	r2, [pc, #248]	@ (8005f5c <TIM_SlaveTimer_SetConfig+0x128>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b70      	cmp	r3, #112	@ 0x70
 8005e80:	d015      	beq.n	8005eae <TIM_SlaveTimer_SetConfig+0x7a>
 8005e82:	d900      	bls.n	8005e86 <TIM_SlaveTimer_SetConfig+0x52>
 8005e84:	e05b      	b.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
 8005e86:	2b60      	cmp	r3, #96	@ 0x60
 8005e88:	d04f      	beq.n	8005f2a <TIM_SlaveTimer_SetConfig+0xf6>
 8005e8a:	d858      	bhi.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
 8005e8c:	2b50      	cmp	r3, #80	@ 0x50
 8005e8e:	d042      	beq.n	8005f16 <TIM_SlaveTimer_SetConfig+0xe2>
 8005e90:	d855      	bhi.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d016      	beq.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x90>
 8005e96:	d852      	bhi.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
 8005e98:	2b30      	cmp	r3, #48	@ 0x30
 8005e9a:	d055      	beq.n	8005f48 <TIM_SlaveTimer_SetConfig+0x114>
 8005e9c:	d84f      	bhi.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d052      	beq.n	8005f48 <TIM_SlaveTimer_SetConfig+0x114>
 8005ea2:	d84c      	bhi.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d04f      	beq.n	8005f48 <TIM_SlaveTimer_SetConfig+0x114>
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d04d      	beq.n	8005f48 <TIM_SlaveTimer_SetConfig+0x114>
 8005eac:	e047      	b.n	8005f3e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005ebe:	f000 f9d3 	bl	8006268 <TIM_ETR_SetConfig>
      break;
 8005ec2:	e042      	b.n	8005f4a <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d101      	bne.n	8005ed0 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e03f      	b.n	8005f50 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a1a      	ldr	r2, [r3, #32]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	438a      	bics	r2, r1
 8005ee6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	22f0      	movs	r2, #240	@ 0xf0
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	621a      	str	r2, [r3, #32]
      break;
 8005f14:	e019      	b.n	8005f4a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f22:	001a      	movs	r2, r3
 8005f24:	f000 f878 	bl	8006018 <TIM_TI1_ConfigInputStage>
      break;
 8005f28:	e00f      	b.n	8005f4a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f36:	001a      	movs	r2, r3
 8005f38:	f000 f8de 	bl	80060f8 <TIM_TI2_ConfigInputStage>
      break;
 8005f3c:	e005      	b.n	8005f4a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f3e:	2317      	movs	r3, #23
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	2201      	movs	r2, #1
 8005f44:	701a      	strb	r2, [r3, #0]
      break;
 8005f46:	e000      	b.n	8005f4a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005f48:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8005f4a:	2317      	movs	r3, #23
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b006      	add	sp, #24
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	ffcfff8f 	.word	0xffcfff8f
 8005f5c:	fffefff8 	.word	0xfffefff8

08005f60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	4393      	bics	r3, r2
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a20      	ldr	r2, [pc, #128]	@ (800600c <TIM_TI1_SetConfig+0xac>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00c      	beq.n	8005faa <TIM_TI1_SetConfig+0x4a>
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	2380      	movs	r3, #128	@ 0x80
 8005f94:	05db      	lsls	r3, r3, #23
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d007      	beq.n	8005faa <TIM_TI1_SetConfig+0x4a>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006010 <TIM_TI1_SetConfig+0xb0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_TI1_SetConfig+0x4a>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8006014 <TIM_TI1_SetConfig+0xb4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d101      	bne.n	8005fae <TIM_TI1_SetConfig+0x4e>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <TIM_TI1_SetConfig+0x50>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	4393      	bics	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e003      	b.n	8005fce <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	22f0      	movs	r2, #240	@ 0xf0
 8005fd2:	4393      	bics	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	22ff      	movs	r2, #255	@ 0xff
 8005fdc:	4013      	ands	r3, r2
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	220a      	movs	r2, #10
 8005fe8:	4393      	bics	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	220a      	movs	r2, #10
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	46c0      	nop			@ (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	b006      	add	sp, #24
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40000400 	.word	0x40000400
 8006014:	40014000 	.word	0x40014000

08006018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	2201      	movs	r2, #1
 8006030:	4393      	bics	r3, r2
 8006032:	001a      	movs	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	22f0      	movs	r2, #240	@ 0xf0
 8006042:	4393      	bics	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	220a      	movs	r2, #10
 8006054:	4393      	bics	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	46c0      	nop			@ (mov r8, r8)
 800606e:	46bd      	mov	sp, r7
 8006070:	b006      	add	sp, #24
 8006072:	bd80      	pop	{r7, pc}

08006074 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	2210      	movs	r2, #16
 800608e:	4393      	bics	r3, r2
 8006090:	001a      	movs	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4a14      	ldr	r2, [pc, #80]	@ (80060f0 <TIM_TI2_SetConfig+0x7c>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4a10      	ldr	r2, [pc, #64]	@ (80060f4 <TIM_TI2_SetConfig+0x80>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	031b      	lsls	r3, r3, #12
 80060ba:	041b      	lsls	r3, r3, #16
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	22a0      	movs	r2, #160	@ 0xa0
 80060c8:	4393      	bics	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	22a0      	movs	r2, #160	@ 0xa0
 80060d2:	4013      	ands	r3, r2
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b006      	add	sp, #24
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	fffffcff 	.word	0xfffffcff
 80060f4:	ffff0fff 	.word	0xffff0fff

080060f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	2210      	movs	r2, #16
 8006110:	4393      	bics	r3, r2
 8006112:	001a      	movs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4a0d      	ldr	r2, [pc, #52]	@ (8006158 <TIM_TI2_ConfigInputStage+0x60>)
 8006122:	4013      	ands	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	031b      	lsls	r3, r3, #12
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	22a0      	movs	r2, #160	@ 0xa0
 8006134:	4393      	bics	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	46c0      	nop			@ (mov r8, r8)
 8006150:	46bd      	mov	sp, r7
 8006152:	b006      	add	sp, #24
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	ffff0fff 	.word	0xffff0fff

0800615c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	4a17      	ldr	r2, [pc, #92]	@ (80061d4 <TIM_TI3_SetConfig+0x78>)
 8006176:	401a      	ands	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2203      	movs	r2, #3
 8006186:	4393      	bics	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	22f0      	movs	r2, #240	@ 0xf0
 8006196:	4393      	bics	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	22ff      	movs	r2, #255	@ 0xff
 80061a0:	4013      	ands	r3, r2
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	4a0b      	ldr	r2, [pc, #44]	@ (80061d8 <TIM_TI3_SetConfig+0x7c>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	021a      	lsls	r2, r3, #8
 80061b4:	23a0      	movs	r3, #160	@ 0xa0
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4013      	ands	r3, r2
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	46c0      	nop			@ (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b006      	add	sp, #24
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	fffffeff 	.word	0xfffffeff
 80061d8:	fffff5ff 	.word	0xfffff5ff

080061dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <TIM_TI4_SetConfig+0x7c>)
 80061f6:	401a      	ands	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4a15      	ldr	r2, [pc, #84]	@ (800625c <TIM_TI4_SetConfig+0x80>)
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4a12      	ldr	r2, [pc, #72]	@ (8006260 <TIM_TI4_SetConfig+0x84>)
 8006218:	4013      	ands	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	031b      	lsls	r3, r3, #12
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	0c1b      	lsrs	r3, r3, #16
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4a0d      	ldr	r2, [pc, #52]	@ (8006264 <TIM_TI4_SetConfig+0x88>)
 800622e:	4013      	ands	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	031a      	lsls	r2, r3, #12
 8006236:	23a0      	movs	r3, #160	@ 0xa0
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	4013      	ands	r3, r2
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	46bd      	mov	sp, r7
 8006252:	b006      	add	sp, #24
 8006254:	bd80      	pop	{r7, pc}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	ffffefff 	.word	0xffffefff
 800625c:	fffffcff 	.word	0xfffffcff
 8006260:	ffff0fff 	.word	0xffff0fff
 8006264:	ffff5fff 	.word	0xffff5fff

08006268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <TIM_ETR_SetConfig+0x3c>)
 8006280:	4013      	ands	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	431a      	orrs	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	609a      	str	r2, [r3, #8]
}
 800629c:	46c0      	nop			@ (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b006      	add	sp, #24
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	ffff00ff 	.word	0xffff00ff

080062a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	221f      	movs	r2, #31
 80062b8:	4013      	ands	r3, r2
 80062ba:	2201      	movs	r2, #1
 80062bc:	409a      	lsls	r2, r3
 80062be:	0013      	movs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	43d2      	mvns	r2, r2
 80062ca:	401a      	ands	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1a      	ldr	r2, [r3, #32]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	211f      	movs	r1, #31
 80062d8:	400b      	ands	r3, r1
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	4099      	lsls	r1, r3
 80062de:	000b      	movs	r3, r1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b006      	add	sp, #24
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	223c      	movs	r2, #60	@ 0x3c
 80062fe:	5c9b      	ldrb	r3, [r3, r2]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006304:	2302      	movs	r3, #2
 8006306:	e055      	b.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	223c      	movs	r2, #60	@ 0x3c
 800630c:	2101      	movs	r1, #1
 800630e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	223d      	movs	r2, #61	@ 0x3d
 8006314:	2102      	movs	r1, #2
 8006316:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a23      	ldr	r2, [pc, #140]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d108      	bne.n	8006344 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a22      	ldr	r2, [pc, #136]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006336:	4013      	ands	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2270      	movs	r2, #112	@ 0x70
 8006348:	4393      	bics	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00f      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	2380      	movs	r3, #128	@ 0x80
 800636e:	05db      	lsls	r3, r3, #23
 8006370:	429a      	cmp	r2, r3
 8006372:	d009      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a12      	ldr	r2, [pc, #72]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a11      	ldr	r2, [pc, #68]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10c      	bne.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2280      	movs	r2, #128	@ 0x80
 800638c:	4393      	bics	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4313      	orrs	r3, r2
 8006398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	223d      	movs	r2, #61	@ 0x3d
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	223c      	movs	r2, #60	@ 0x3c
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	0018      	movs	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b004      	add	sp, #16
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	ff0fffff 	.word	0xff0fffff
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40014000 	.word	0x40014000

080063cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	223c      	movs	r2, #60	@ 0x3c
 80063de:	5c9b      	ldrb	r3, [r3, r2]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e06f      	b.n	80064c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	223c      	movs	r2, #60	@ 0x3c
 80063ec:	2101      	movs	r1, #1
 80063ee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	22ff      	movs	r2, #255	@ 0xff
 80063f4:	4393      	bics	r3, r2
 80063f6:	001a      	movs	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a33      	ldr	r2, [pc, #204]	@ (80064d0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006404:	401a      	ands	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a30      	ldr	r2, [pc, #192]	@ (80064d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006412:	401a      	ands	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a2e      	ldr	r2, [pc, #184]	@ (80064d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006420:	401a      	ands	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a2b      	ldr	r2, [pc, #172]	@ (80064dc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800642e:	401a      	ands	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a29      	ldr	r2, [pc, #164]	@ (80064e0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800643c:	401a      	ands	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a26      	ldr	r2, [pc, #152]	@ (80064e4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800644a:	401a      	ands	r2, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a24      	ldr	r2, [pc, #144]	@ (80064e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006458:	401a      	ands	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006468:	401a      	ands	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1e      	ldr	r2, [pc, #120]	@ (80064f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d11c      	bne.n	80064b6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006480:	401a      	ands	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006486:	051b      	lsls	r3, r3, #20
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a1a      	ldr	r2, [pc, #104]	@ (80064f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006490:	401a      	ands	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800649e:	401a      	ands	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80064ac:	401a      	ands	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	223c      	movs	r2, #60	@ 0x3c
 80064c2:	2100      	movs	r1, #0
 80064c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b004      	add	sp, #16
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	fffffcff 	.word	0xfffffcff
 80064d4:	fffffbff 	.word	0xfffffbff
 80064d8:	fffff7ff 	.word	0xfffff7ff
 80064dc:	ffffefff 	.word	0xffffefff
 80064e0:	ffffdfff 	.word	0xffffdfff
 80064e4:	ffffbfff 	.word	0xffffbfff
 80064e8:	fff0ffff 	.word	0xfff0ffff
 80064ec:	efffffff 	.word	0xefffffff
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	ff0fffff 	.word	0xff0fffff
 80064f8:	feffffff 	.word	0xfeffffff
 80064fc:	fdffffff 	.word	0xfdffffff
 8006500:	dfffffff 	.word	0xdfffffff

08006504 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	@ 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006510:	2327      	movs	r3, #39	@ 0x27
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	223c      	movs	r2, #60	@ 0x3c
 800651c:	5c9b      	ldrb	r3, [r3, r2]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_TIMEx_ConfigBreakInput+0x22>
 8006522:	2302      	movs	r3, #2
 8006524:	e095      	b.n	8006652 <HAL_TIMEx_ConfigBreakInput+0x14e>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	223c      	movs	r2, #60	@ 0x3c
 800652a:	2101      	movs	r1, #1
 800652c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d019      	beq.n	800656a <HAL_TIMEx_ConfigBreakInput+0x66>
 8006536:	d822      	bhi.n	800657e <HAL_TIMEx_ConfigBreakInput+0x7a>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d002      	beq.n	8006542 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800653c:	2b02      	cmp	r3, #2
 800653e:	d00a      	beq.n	8006556 <HAL_TIMEx_ConfigBreakInput+0x52>
 8006540:	e01d      	b.n	800657e <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006542:	2301      	movs	r3, #1
 8006544:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800654a:	2380      	movs	r3, #128	@ 0x80
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006550:	2309      	movs	r3, #9
 8006552:	617b      	str	r3, [r7, #20]
      break;
 8006554:	e01c      	b.n	8006590 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006556:	2302      	movs	r3, #2
 8006558:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800655a:	2301      	movs	r3, #1
 800655c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006564:	230a      	movs	r3, #10
 8006566:	617b      	str	r3, [r7, #20]
      break;
 8006568:	e012      	b.n	8006590 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800656a:	2304      	movs	r3, #4
 800656c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800656e:	2302      	movs	r3, #2
 8006570:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006578:	230b      	movs	r3, #11
 800657a:	617b      	str	r3, [r7, #20]
      break;
 800657c:	e008      	b.n	8006590 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
      break;
 800658e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  switch (BreakInput)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d003      	beq.n	800659e <HAL_TIMEx_ConfigBreakInput+0x9a>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d027      	beq.n	80065ec <HAL_TIMEx_ConfigBreakInput+0xe8>
 800659c:	e04d      	b.n	800663a <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	43da      	mvns	r2, r3
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	409a      	lsls	r2, r3
 80065b8:	0013      	movs	r3, r2
 80065ba:	6a3a      	ldr	r2, [r7, #32]
 80065bc:	4013      	ands	r3, r2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	43da      	mvns	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4013      	ands	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	409a      	lsls	r2, r3
 80065d6:	0013      	movs	r3, r2
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	4013      	ands	r3, r2
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80065ea:	e02b      	b.n	8006644 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f2:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	43da      	mvns	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4013      	ands	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	409a      	lsls	r2, r3
 8006606:	0013      	movs	r3, r2
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	4013      	ands	r3, r2
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	43da      	mvns	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4013      	ands	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	409a      	lsls	r2, r3
 8006624:	0013      	movs	r3, r2
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	4013      	ands	r3, r2
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006638:	e004      	b.n	8006644 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800663a:	2327      	movs	r3, #39	@ 0x27
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	2201      	movs	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
      break;
 8006642:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	223c      	movs	r2, #60	@ 0x3c
 8006648:	2100      	movs	r1, #0
 800664a:	5499      	strb	r1, [r3, r2]

  return status;
 800664c:	2327      	movs	r3, #39	@ 0x27
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	781b      	ldrb	r3, [r3, #0]
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b00a      	add	sp, #40	@ 0x28
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	46bd      	mov	sp, r7
 8006666:	b002      	add	sp, #8
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	46bd      	mov	sp, r7
 8006676:	b002      	add	sp, #8
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006682:	46c0      	nop			@ (mov r8, r8)
 8006684:	46bd      	mov	sp, r7
 8006686:	b002      	add	sp, #8
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e046      	b.n	800672c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2288      	movs	r2, #136	@ 0x88
 80066a2:	589b      	ldr	r3, [r3, r2]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2284      	movs	r2, #132	@ 0x84
 80066ac:	2100      	movs	r1, #0
 80066ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	0018      	movs	r0, r3
 80066b4:	f7fb fbd2 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2288      	movs	r2, #136	@ 0x88
 80066bc:	2124      	movs	r1, #36	@ 0x24
 80066be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2101      	movs	r1, #1
 80066cc:	438a      	bics	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 ff2e 	bl	800753c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	0018      	movs	r0, r3
 80066e4:	f000 fc6c 	bl	8006fc0 <UART_SetConfig>
 80066e8:	0003      	movs	r3, r0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e01c      	b.n	800672c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	490d      	ldr	r1, [pc, #52]	@ (8006734 <HAL_UART_Init+0xa8>)
 80066fe:	400a      	ands	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	212a      	movs	r1, #42	@ 0x2a
 800670e:	438a      	bics	r2, r1
 8006710:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2101      	movs	r1, #1
 800671e:	430a      	orrs	r2, r1
 8006720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0018      	movs	r0, r3
 8006726:	f000 ffbd 	bl	80076a4 <UART_CheckIdleState>
 800672a:	0003      	movs	r3, r0
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}
 8006734:	ffffb7ff 	.word	0xffffb7ff

08006738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	@ 0x28
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	1dbb      	adds	r3, r7, #6
 8006746:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2288      	movs	r2, #136	@ 0x88
 800674c:	589b      	ldr	r3, [r3, r2]
 800674e:	2b20      	cmp	r3, #32
 8006750:	d000      	beq.n	8006754 <HAL_UART_Transmit+0x1c>
 8006752:	e090      	b.n	8006876 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_UART_Transmit+0x2a>
 800675a:	1dbb      	adds	r3, r7, #6
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e088      	b.n	8006878 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	2380      	movs	r3, #128	@ 0x80
 800676c:	015b      	lsls	r3, r3, #5
 800676e:	429a      	cmp	r2, r3
 8006770:	d109      	bne.n	8006786 <HAL_UART_Transmit+0x4e>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2201      	movs	r2, #1
 800677e:	4013      	ands	r3, r2
 8006780:	d001      	beq.n	8006786 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e078      	b.n	8006878 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2290      	movs	r2, #144	@ 0x90
 800678a:	2100      	movs	r1, #0
 800678c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2288      	movs	r2, #136	@ 0x88
 8006792:	2121      	movs	r1, #33	@ 0x21
 8006794:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006796:	f7fb fd91 	bl	80022bc <HAL_GetTick>
 800679a:	0003      	movs	r3, r0
 800679c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1dba      	adds	r2, r7, #6
 80067a2:	2154      	movs	r1, #84	@ 0x54
 80067a4:	8812      	ldrh	r2, [r2, #0]
 80067a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1dba      	adds	r2, r7, #6
 80067ac:	2156      	movs	r1, #86	@ 0x56
 80067ae:	8812      	ldrh	r2, [r2, #0]
 80067b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	2380      	movs	r3, #128	@ 0x80
 80067b8:	015b      	lsls	r3, r3, #5
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d108      	bne.n	80067d0 <HAL_UART_Transmit+0x98>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e003      	b.n	80067d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067d8:	e030      	b.n	800683c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	0013      	movs	r3, r2
 80067e4:	2200      	movs	r2, #0
 80067e6:	2180      	movs	r1, #128	@ 0x80
 80067e8:	f001 f806 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 80067ec:	1e03      	subs	r3, r0, #0
 80067ee:	d005      	beq.n	80067fc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2288      	movs	r2, #136	@ 0x88
 80067f4:	2120      	movs	r1, #32
 80067f6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e03d      	b.n	8006878 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	001a      	movs	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	05d2      	lsls	r2, r2, #23
 800680e:	0dd2      	lsrs	r2, r2, #23
 8006810:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	3302      	adds	r3, #2
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	e007      	b.n	800682a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3301      	adds	r3, #1
 8006828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2256      	movs	r2, #86	@ 0x56
 800682e:	5a9b      	ldrh	r3, [r3, r2]
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b299      	uxth	r1, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2256      	movs	r2, #86	@ 0x56
 800683a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2256      	movs	r2, #86	@ 0x56
 8006840:	5a9b      	ldrh	r3, [r3, r2]
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1c8      	bne.n	80067da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	0013      	movs	r3, r2
 8006852:	2200      	movs	r2, #0
 8006854:	2140      	movs	r1, #64	@ 0x40
 8006856:	f000 ffcf 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 800685a:	1e03      	subs	r3, r0, #0
 800685c:	d005      	beq.n	800686a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2288      	movs	r2, #136	@ 0x88
 8006862:	2120      	movs	r1, #32
 8006864:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e006      	b.n	8006878 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2288      	movs	r2, #136	@ 0x88
 800686e:	2120      	movs	r1, #32
 8006870:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	e000      	b.n	8006878 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006876:	2302      	movs	r3, #2
  }
}
 8006878:	0018      	movs	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	b008      	add	sp, #32
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	1dbb      	adds	r3, r7, #6
 800688c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	228c      	movs	r2, #140	@ 0x8c
 8006892:	589b      	ldr	r3, [r3, r2]
 8006894:	2b20      	cmp	r3, #32
 8006896:	d14a      	bne.n	800692e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_UART_Receive_IT+0x26>
 800689e:	1dbb      	adds	r3, r7, #6
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e042      	b.n	8006930 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	2380      	movs	r3, #128	@ 0x80
 80068b0:	015b      	lsls	r3, r3, #5
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d109      	bne.n	80068ca <HAL_UART_Receive_IT+0x4a>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d105      	bne.n	80068ca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2201      	movs	r2, #1
 80068c2:	4013      	ands	r3, r2
 80068c4:	d001      	beq.n	80068ca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e032      	b.n	8006930 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <HAL_UART_Receive_IT+0xb8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d020      	beq.n	800691c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	2380      	movs	r3, #128	@ 0x80
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	4013      	ands	r3, r2
 80068e6:	d019      	beq.n	800691c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ec:	613b      	str	r3, [r7, #16]
  return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	2301      	movs	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f383 8810 	msr	PRIMASK, r3
}
 80068fc:	46c0      	nop			@ (mov r8, r8)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2180      	movs	r1, #128	@ 0x80
 800690a:	04c9      	lsls	r1, r1, #19
 800690c:	430a      	orrs	r2, r1
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800691c:	1dbb      	adds	r3, r7, #6
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	0018      	movs	r0, r3
 8006926:	f000 ffd7 	bl	80078d8 <UART_Start_Receive_IT>
 800692a:	0003      	movs	r3, r0
 800692c:	e000      	b.n	8006930 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800692e:	2302      	movs	r3, #2
  }
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	b008      	add	sp, #32
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40008000 	.word	0x40008000

0800693c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800693c:	b5b0      	push	{r4, r5, r7, lr}
 800693e:	b0aa      	sub	sp, #168	@ 0xa8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	22a4      	movs	r2, #164	@ 0xa4
 800694c:	18b9      	adds	r1, r7, r2
 800694e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	20a0      	movs	r0, #160	@ 0xa0
 8006958:	1839      	adds	r1, r7, r0
 800695a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	249c      	movs	r4, #156	@ 0x9c
 8006964:	1939      	adds	r1, r7, r4
 8006966:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006968:	0011      	movs	r1, r2
 800696a:	18bb      	adds	r3, r7, r2
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4aa2      	ldr	r2, [pc, #648]	@ (8006bf8 <HAL_UART_IRQHandler+0x2bc>)
 8006970:	4013      	ands	r3, r2
 8006972:	2298      	movs	r2, #152	@ 0x98
 8006974:	18bd      	adds	r5, r7, r2
 8006976:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006978:	18bb      	adds	r3, r7, r2
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11a      	bne.n	80069b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006980:	187b      	adds	r3, r7, r1
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2220      	movs	r2, #32
 8006986:	4013      	ands	r3, r2
 8006988:	d015      	beq.n	80069b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800698a:	183b      	adds	r3, r7, r0
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2220      	movs	r2, #32
 8006990:	4013      	ands	r3, r2
 8006992:	d105      	bne.n	80069a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006994:	193b      	adds	r3, r7, r4
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	055b      	lsls	r3, r3, #21
 800699c:	4013      	ands	r3, r2
 800699e:	d00a      	beq.n	80069b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d100      	bne.n	80069aa <HAL_UART_IRQHandler+0x6e>
 80069a8:	e2dc      	b.n	8006f64 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	0010      	movs	r0, r2
 80069b2:	4798      	blx	r3
      }
      return;
 80069b4:	e2d6      	b.n	8006f64 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069b6:	2398      	movs	r3, #152	@ 0x98
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d100      	bne.n	80069c2 <HAL_UART_IRQHandler+0x86>
 80069c0:	e122      	b.n	8006c08 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069c2:	239c      	movs	r3, #156	@ 0x9c
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a8c      	ldr	r2, [pc, #560]	@ (8006bfc <HAL_UART_IRQHandler+0x2c0>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	d106      	bne.n	80069dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069ce:	23a0      	movs	r3, #160	@ 0xa0
 80069d0:	18fb      	adds	r3, r7, r3
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a8a      	ldr	r2, [pc, #552]	@ (8006c00 <HAL_UART_IRQHandler+0x2c4>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	d100      	bne.n	80069dc <HAL_UART_IRQHandler+0xa0>
 80069da:	e115      	b.n	8006c08 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069dc:	23a4      	movs	r3, #164	@ 0xa4
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	4013      	ands	r3, r2
 80069e6:	d012      	beq.n	8006a0e <HAL_UART_IRQHandler+0xd2>
 80069e8:	23a0      	movs	r3, #160	@ 0xa0
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	2380      	movs	r3, #128	@ 0x80
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4013      	ands	r3, r2
 80069f4:	d00b      	beq.n	8006a0e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2201      	movs	r2, #1
 80069fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2290      	movs	r2, #144	@ 0x90
 8006a02:	589b      	ldr	r3, [r3, r2]
 8006a04:	2201      	movs	r2, #1
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2190      	movs	r1, #144	@ 0x90
 8006a0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a0e:	23a4      	movs	r3, #164	@ 0xa4
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2202      	movs	r2, #2
 8006a16:	4013      	ands	r3, r2
 8006a18:	d011      	beq.n	8006a3e <HAL_UART_IRQHandler+0x102>
 8006a1a:	239c      	movs	r3, #156	@ 0x9c
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2201      	movs	r2, #1
 8006a22:	4013      	ands	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2290      	movs	r2, #144	@ 0x90
 8006a32:	589b      	ldr	r3, [r3, r2]
 8006a34:	2204      	movs	r2, #4
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2190      	movs	r1, #144	@ 0x90
 8006a3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a3e:	23a4      	movs	r3, #164	@ 0xa4
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2204      	movs	r2, #4
 8006a46:	4013      	ands	r3, r2
 8006a48:	d011      	beq.n	8006a6e <HAL_UART_IRQHandler+0x132>
 8006a4a:	239c      	movs	r3, #156	@ 0x9c
 8006a4c:	18fb      	adds	r3, r7, r3
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2201      	movs	r2, #1
 8006a52:	4013      	ands	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2290      	movs	r2, #144	@ 0x90
 8006a62:	589b      	ldr	r3, [r3, r2]
 8006a64:	2202      	movs	r2, #2
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2190      	movs	r1, #144	@ 0x90
 8006a6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a6e:	23a4      	movs	r3, #164	@ 0xa4
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2208      	movs	r2, #8
 8006a76:	4013      	ands	r3, r2
 8006a78:	d017      	beq.n	8006aaa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a7a:	23a0      	movs	r3, #160	@ 0xa0
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2220      	movs	r2, #32
 8006a82:	4013      	ands	r3, r2
 8006a84:	d105      	bne.n	8006a92 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a86:	239c      	movs	r3, #156	@ 0x9c
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a5b      	ldr	r2, [pc, #364]	@ (8006bfc <HAL_UART_IRQHandler+0x2c0>)
 8006a8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a90:	d00b      	beq.n	8006aaa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2208      	movs	r2, #8
 8006a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2290      	movs	r2, #144	@ 0x90
 8006a9e:	589b      	ldr	r3, [r3, r2]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2190      	movs	r1, #144	@ 0x90
 8006aa8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006aaa:	23a4      	movs	r3, #164	@ 0xa4
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	2380      	movs	r3, #128	@ 0x80
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d013      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x1a4>
 8006ab8:	23a0      	movs	r3, #160	@ 0xa0
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	2380      	movs	r3, #128	@ 0x80
 8006ac0:	04db      	lsls	r3, r3, #19
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2280      	movs	r2, #128	@ 0x80
 8006acc:	0112      	lsls	r2, r2, #4
 8006ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2290      	movs	r2, #144	@ 0x90
 8006ad4:	589b      	ldr	r3, [r3, r2]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2190      	movs	r1, #144	@ 0x90
 8006ade:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2290      	movs	r2, #144	@ 0x90
 8006ae4:	589b      	ldr	r3, [r3, r2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d100      	bne.n	8006aec <HAL_UART_IRQHandler+0x1b0>
 8006aea:	e23d      	b.n	8006f68 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006aec:	23a4      	movs	r3, #164	@ 0xa4
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2220      	movs	r2, #32
 8006af4:	4013      	ands	r3, r2
 8006af6:	d015      	beq.n	8006b24 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006af8:	23a0      	movs	r3, #160	@ 0xa0
 8006afa:	18fb      	adds	r3, r7, r3
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2220      	movs	r2, #32
 8006b00:	4013      	ands	r3, r2
 8006b02:	d106      	bne.n	8006b12 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b04:	239c      	movs	r3, #156	@ 0x9c
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	055b      	lsls	r3, r3, #21
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d008      	beq.n	8006b24 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	0010      	movs	r0, r2
 8006b22:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2290      	movs	r2, #144	@ 0x90
 8006b28:	589b      	ldr	r3, [r3, r2]
 8006b2a:	2194      	movs	r1, #148	@ 0x94
 8006b2c:	187a      	adds	r2, r7, r1
 8006b2e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2240      	movs	r2, #64	@ 0x40
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b40      	cmp	r3, #64	@ 0x40
 8006b3c:	d004      	beq.n	8006b48 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b3e:	187b      	adds	r3, r7, r1
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2228      	movs	r2, #40	@ 0x28
 8006b44:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b46:	d04c      	beq.n	8006be2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f000 ffe8 	bl	8007b20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2240      	movs	r2, #64	@ 0x40
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b40      	cmp	r3, #64	@ 0x40
 8006b5c:	d13c      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b62:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006b64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	2090      	movs	r0, #144	@ 0x90
 8006b68:	183a      	adds	r2, r7, r0
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2140      	movs	r1, #64	@ 0x40
 8006b84:	438a      	bics	r2, r1
 8006b86:	609a      	str	r2, [r3, #8]
 8006b88:	183b      	adds	r3, r7, r0
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b90:	f383 8810 	msr	PRIMASK, r3
}
 8006b94:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2280      	movs	r2, #128	@ 0x80
 8006b9a:	589b      	ldr	r3, [r3, r2]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d016      	beq.n	8006bce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2280      	movs	r2, #128	@ 0x80
 8006ba4:	589b      	ldr	r3, [r3, r2]
 8006ba6:	4a17      	ldr	r2, [pc, #92]	@ (8006c04 <HAL_UART_IRQHandler+0x2c8>)
 8006ba8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2280      	movs	r2, #128	@ 0x80
 8006bae:	589b      	ldr	r3, [r3, r2]
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7fc fe97 	bl	80038e4 <HAL_DMA_Abort_IT>
 8006bb6:	1e03      	subs	r3, r0, #0
 8006bb8:	d01c      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2280      	movs	r2, #128	@ 0x80
 8006bbe:	589b      	ldr	r3, [r3, r2]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	2180      	movs	r1, #128	@ 0x80
 8006bc6:	5852      	ldr	r2, [r2, r1]
 8006bc8:	0010      	movs	r0, r2
 8006bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bcc:	e012      	b.n	8006bf4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f000 f9e1 	bl	8006f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd6:	e00d      	b.n	8006bf4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 f9dc 	bl	8006f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e008      	b.n	8006bf4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 f9d7 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2290      	movs	r2, #144	@ 0x90
 8006bee:	2100      	movs	r1, #0
 8006bf0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006bf2:	e1b9      	b.n	8006f68 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf4:	46c0      	nop			@ (mov r8, r8)
    return;
 8006bf6:	e1b7      	b.n	8006f68 <HAL_UART_IRQHandler+0x62c>
 8006bf8:	0000080f 	.word	0x0000080f
 8006bfc:	10000001 	.word	0x10000001
 8006c00:	04000120 	.word	0x04000120
 8006c04:	08007bed 	.word	0x08007bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d000      	beq.n	8006c12 <HAL_UART_IRQHandler+0x2d6>
 8006c10:	e13e      	b.n	8006e90 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c12:	23a4      	movs	r3, #164	@ 0xa4
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2210      	movs	r2, #16
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d100      	bne.n	8006c20 <HAL_UART_IRQHandler+0x2e4>
 8006c1e:	e137      	b.n	8006e90 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c20:	23a0      	movs	r3, #160	@ 0xa0
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2210      	movs	r2, #16
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d100      	bne.n	8006c2e <HAL_UART_IRQHandler+0x2f2>
 8006c2c:	e130      	b.n	8006e90 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2210      	movs	r2, #16
 8006c34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2240      	movs	r2, #64	@ 0x40
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b40      	cmp	r3, #64	@ 0x40
 8006c42:	d000      	beq.n	8006c46 <HAL_UART_IRQHandler+0x30a>
 8006c44:	e0a4      	b.n	8006d90 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2280      	movs	r2, #128	@ 0x80
 8006c4a:	589b      	ldr	r3, [r3, r2]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	217e      	movs	r1, #126	@ 0x7e
 8006c52:	187b      	adds	r3, r7, r1
 8006c54:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006c56:	187b      	adds	r3, r7, r1
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d100      	bne.n	8006c60 <HAL_UART_IRQHandler+0x324>
 8006c5e:	e185      	b.n	8006f6c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	225c      	movs	r2, #92	@ 0x5c
 8006c64:	5a9b      	ldrh	r3, [r3, r2]
 8006c66:	187a      	adds	r2, r7, r1
 8006c68:	8812      	ldrh	r2, [r2, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d300      	bcc.n	8006c70 <HAL_UART_IRQHandler+0x334>
 8006c6e:	e17d      	b.n	8006f6c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	187a      	adds	r2, r7, r1
 8006c74:	215e      	movs	r1, #94	@ 0x5e
 8006c76:	8812      	ldrh	r2, [r2, #0]
 8006c78:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2280      	movs	r2, #128	@ 0x80
 8006c7e:	589b      	ldr	r3, [r3, r2]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2220      	movs	r2, #32
 8006c86:	4013      	ands	r3, r2
 8006c88:	d170      	bne.n	8006d6c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c94:	2301      	movs	r3, #1
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	f383 8810 	msr	PRIMASK, r3
}
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	49b4      	ldr	r1, [pc, #720]	@ (8006f7c <HAL_UART_IRQHandler+0x640>)
 8006cac:	400a      	ands	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb6:	f383 8810 	msr	PRIMASK, r3
}
 8006cba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ccc:	f383 8810 	msr	PRIMASK, r3
}
 8006cd0:	46c0      	nop			@ (mov r8, r8)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2101      	movs	r1, #1
 8006cde:	438a      	bics	r2, r1
 8006ce0:	609a      	str	r2, [r3, #8]
 8006ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce8:	f383 8810 	msr	PRIMASK, r3
}
 8006cec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cee:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2140      	movs	r1, #64	@ 0x40
 8006d10:	438a      	bics	r2, r1
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d16:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d1a:	f383 8810 	msr	PRIMASK, r3
}
 8006d1e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	228c      	movs	r2, #140	@ 0x8c
 8006d24:	2120      	movs	r1, #32
 8006d26:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d32:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d38:	2301      	movs	r3, #1
 8006d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d3e:	f383 8810 	msr	PRIMASK, r3
}
 8006d42:	46c0      	nop			@ (mov r8, r8)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2110      	movs	r1, #16
 8006d50:	438a      	bics	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d5a:	f383 8810 	msr	PRIMASK, r3
}
 8006d5e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2280      	movs	r2, #128	@ 0x80
 8006d64:	589b      	ldr	r3, [r3, r2]
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7fc fd5a 	bl	8003820 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	225c      	movs	r2, #92	@ 0x5c
 8006d76:	5a9a      	ldrh	r2, [r3, r2]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	215e      	movs	r1, #94	@ 0x5e
 8006d7c:	5a5b      	ldrh	r3, [r3, r1]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	0011      	movs	r1, r2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f000 f90d 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d8e:	e0ed      	b.n	8006f6c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	225c      	movs	r2, #92	@ 0x5c
 8006d94:	5a99      	ldrh	r1, [r3, r2]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	225e      	movs	r2, #94	@ 0x5e
 8006d9a:	5a9b      	ldrh	r3, [r3, r2]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	208e      	movs	r0, #142	@ 0x8e
 8006da0:	183b      	adds	r3, r7, r0
 8006da2:	1a8a      	subs	r2, r1, r2
 8006da4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	225e      	movs	r2, #94	@ 0x5e
 8006daa:	5a9b      	ldrh	r3, [r3, r2]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d100      	bne.n	8006db4 <HAL_UART_IRQHandler+0x478>
 8006db2:	e0dd      	b.n	8006f70 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006db4:	183b      	adds	r3, r7, r0
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d100      	bne.n	8006dbe <HAL_UART_IRQHandler+0x482>
 8006dbc:	e0d8      	b.n	8006f70 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dc6:	2488      	movs	r4, #136	@ 0x88
 8006dc8:	193a      	adds	r2, r7, r4
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	2301      	movs	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f383 8810 	msr	PRIMASK, r3
}
 8006dd6:	46c0      	nop			@ (mov r8, r8)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4967      	ldr	r1, [pc, #412]	@ (8006f80 <HAL_UART_IRQHandler+0x644>)
 8006de4:	400a      	ands	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	193b      	adds	r3, r7, r4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfa:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dfc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dfe:	2484      	movs	r4, #132	@ 0x84
 8006e00:	193a      	adds	r2, r7, r4
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	2301      	movs	r3, #1
 8006e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f383 8810 	msr	PRIMASK, r3
}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	495a      	ldr	r1, [pc, #360]	@ (8006f84 <HAL_UART_IRQHandler+0x648>)
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	f383 8810 	msr	PRIMASK, r3
}
 8006e2c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	228c      	movs	r2, #140	@ 0x8c
 8006e32:	2120      	movs	r1, #32
 8006e34:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e42:	f3ef 8310 	mrs	r3, PRIMASK
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4a:	2480      	movs	r4, #128	@ 0x80
 8006e4c:	193a      	adds	r2, r7, r4
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	2301      	movs	r3, #1
 8006e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	f383 8810 	msr	PRIMASK, r3
}
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2110      	movs	r1, #16
 8006e68:	438a      	bics	r2, r1
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	193b      	adds	r3, r7, r4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e74:	f383 8810 	msr	PRIMASK, r3
}
 8006e78:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e80:	183b      	adds	r3, r7, r0
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	0011      	movs	r1, r2
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 f88d 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e8e:	e06f      	b.n	8006f70 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e90:	23a4      	movs	r3, #164	@ 0xa4
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	035b      	lsls	r3, r3, #13
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d010      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x584>
 8006e9e:	239c      	movs	r3, #156	@ 0x9c
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	2380      	movs	r3, #128	@ 0x80
 8006ea6:	03db      	lsls	r3, r3, #15
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2280      	movs	r2, #128	@ 0x80
 8006eb2:	0352      	lsls	r2, r2, #13
 8006eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f001 fbeb 	bl	8008694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ebe:	e05a      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ec0:	23a4      	movs	r3, #164	@ 0xa4
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2280      	movs	r2, #128	@ 0x80
 8006ec8:	4013      	ands	r3, r2
 8006eca:	d016      	beq.n	8006efa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ecc:	23a0      	movs	r3, #160	@ 0xa0
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2280      	movs	r2, #128	@ 0x80
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	d106      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ed8:	239c      	movs	r3, #156	@ 0x9c
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d042      	beq.n	8006f74 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	0010      	movs	r0, r2
 8006ef6:	4798      	blx	r3
    }
    return;
 8006ef8:	e03c      	b.n	8006f74 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006efa:	23a4      	movs	r3, #164	@ 0xa4
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2240      	movs	r2, #64	@ 0x40
 8006f02:	4013      	ands	r3, r2
 8006f04:	d00a      	beq.n	8006f1c <HAL_UART_IRQHandler+0x5e0>
 8006f06:	23a0      	movs	r3, #160	@ 0xa0
 8006f08:	18fb      	adds	r3, r7, r3
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2240      	movs	r2, #64	@ 0x40
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f000 fe80 	bl	8007c1a <UART_EndTransmit_IT>
    return;
 8006f1a:	e02c      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f1c:	23a4      	movs	r3, #164	@ 0xa4
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	2380      	movs	r3, #128	@ 0x80
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	4013      	ands	r3, r2
 8006f28:	d00b      	beq.n	8006f42 <HAL_UART_IRQHandler+0x606>
 8006f2a:	23a0      	movs	r3, #160	@ 0xa0
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	2380      	movs	r3, #128	@ 0x80
 8006f32:	05db      	lsls	r3, r3, #23
 8006f34:	4013      	ands	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f001 fbba 	bl	80086b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f40:	e019      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f42:	23a4      	movs	r3, #164	@ 0xa4
 8006f44:	18fb      	adds	r3, r7, r3
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2380      	movs	r3, #128	@ 0x80
 8006f4a:	045b      	lsls	r3, r3, #17
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d012      	beq.n	8006f76 <HAL_UART_IRQHandler+0x63a>
 8006f50:	23a0      	movs	r3, #160	@ 0xa0
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da0d      	bge.n	8006f76 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f001 fba1 	bl	80086a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f62:	e008      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
      return;
 8006f64:	46c0      	nop			@ (mov r8, r8)
 8006f66:	e006      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
    return;
 8006f68:	46c0      	nop			@ (mov r8, r8)
 8006f6a:	e004      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
      return;
 8006f6c:	46c0      	nop			@ (mov r8, r8)
 8006f6e:	e002      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
      return;
 8006f70:	46c0      	nop			@ (mov r8, r8)
 8006f72:	e000      	b.n	8006f76 <HAL_UART_IRQHandler+0x63a>
    return;
 8006f74:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b02a      	add	sp, #168	@ 0xa8
 8006f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7c:	fffffeff 	.word	0xfffffeff
 8006f80:	fffffedf 	.word	0xfffffedf
 8006f84:	effffffe 	.word	0xeffffffe

08006f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f90:	46c0      	nop			@ (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b002      	add	sp, #8
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fa0:	46c0      	nop			@ (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b002      	add	sp, #8
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	000a      	movs	r2, r1
 8006fb2:	1cbb      	adds	r3, r7, #2
 8006fb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb6:	46c0      	nop			@ (mov r8, r8)
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b002      	add	sp, #8
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b090      	sub	sp, #64	@ 0x40
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc8:	231a      	movs	r3, #26
 8006fca:	2220      	movs	r2, #32
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	19db      	adds	r3, r3, r7
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4aaf      	ldr	r2, [pc, #700]	@ (80072b0 <UART_SetConfig+0x2f0>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffe:	430b      	orrs	r3, r1
 8007000:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4aaa      	ldr	r2, [pc, #680]	@ (80072b4 <UART_SetConfig+0x2f4>)
 800700a:	4013      	ands	r3, r2
 800700c:	0018      	movs	r0, r3
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	68d9      	ldr	r1, [r3, #12]
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	0003      	movs	r3, r0
 8007018:	430b      	orrs	r3, r1
 800701a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4aa4      	ldr	r2, [pc, #656]	@ (80072b8 <UART_SetConfig+0x2f8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d004      	beq.n	8007036 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007032:	4313      	orrs	r3, r2
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	4a9f      	ldr	r2, [pc, #636]	@ (80072bc <UART_SetConfig+0x2fc>)
 800703e:	4013      	ands	r3, r2
 8007040:	0019      	movs	r1, r3
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007048:	430b      	orrs	r3, r1
 800704a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007052:	220f      	movs	r2, #15
 8007054:	4393      	bics	r3, r2
 8007056:	0018      	movs	r0, r3
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	0003      	movs	r3, r0
 8007062:	430b      	orrs	r3, r1
 8007064:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a95      	ldr	r2, [pc, #596]	@ (80072c0 <UART_SetConfig+0x300>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d131      	bne.n	80070d4 <UART_SetConfig+0x114>
 8007070:	4b94      	ldr	r3, [pc, #592]	@ (80072c4 <UART_SetConfig+0x304>)
 8007072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007074:	2203      	movs	r2, #3
 8007076:	4013      	ands	r3, r2
 8007078:	2b03      	cmp	r3, #3
 800707a:	d01d      	beq.n	80070b8 <UART_SetConfig+0xf8>
 800707c:	d823      	bhi.n	80070c6 <UART_SetConfig+0x106>
 800707e:	2b02      	cmp	r3, #2
 8007080:	d00c      	beq.n	800709c <UART_SetConfig+0xdc>
 8007082:	d820      	bhi.n	80070c6 <UART_SetConfig+0x106>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <UART_SetConfig+0xce>
 8007088:	2b01      	cmp	r3, #1
 800708a:	d00e      	beq.n	80070aa <UART_SetConfig+0xea>
 800708c:	e01b      	b.n	80070c6 <UART_SetConfig+0x106>
 800708e:	231b      	movs	r3, #27
 8007090:	2220      	movs	r2, #32
 8007092:	189b      	adds	r3, r3, r2
 8007094:	19db      	adds	r3, r3, r7
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e0b4      	b.n	8007206 <UART_SetConfig+0x246>
 800709c:	231b      	movs	r3, #27
 800709e:	2220      	movs	r2, #32
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	19db      	adds	r3, r3, r7
 80070a4:	2202      	movs	r2, #2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	e0ad      	b.n	8007206 <UART_SetConfig+0x246>
 80070aa:	231b      	movs	r3, #27
 80070ac:	2220      	movs	r2, #32
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	19db      	adds	r3, r3, r7
 80070b2:	2204      	movs	r2, #4
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e0a6      	b.n	8007206 <UART_SetConfig+0x246>
 80070b8:	231b      	movs	r3, #27
 80070ba:	2220      	movs	r2, #32
 80070bc:	189b      	adds	r3, r3, r2
 80070be:	19db      	adds	r3, r3, r7
 80070c0:	2208      	movs	r2, #8
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e09f      	b.n	8007206 <UART_SetConfig+0x246>
 80070c6:	231b      	movs	r3, #27
 80070c8:	2220      	movs	r2, #32
 80070ca:	189b      	adds	r3, r3, r2
 80070cc:	19db      	adds	r3, r3, r7
 80070ce:	2210      	movs	r2, #16
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e098      	b.n	8007206 <UART_SetConfig+0x246>
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a7b      	ldr	r2, [pc, #492]	@ (80072c8 <UART_SetConfig+0x308>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d131      	bne.n	8007142 <UART_SetConfig+0x182>
 80070de:	4b79      	ldr	r3, [pc, #484]	@ (80072c4 <UART_SetConfig+0x304>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	220c      	movs	r2, #12
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b0c      	cmp	r3, #12
 80070e8:	d01d      	beq.n	8007126 <UART_SetConfig+0x166>
 80070ea:	d823      	bhi.n	8007134 <UART_SetConfig+0x174>
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d00c      	beq.n	800710a <UART_SetConfig+0x14a>
 80070f0:	d820      	bhi.n	8007134 <UART_SetConfig+0x174>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <UART_SetConfig+0x13c>
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d00e      	beq.n	8007118 <UART_SetConfig+0x158>
 80070fa:	e01b      	b.n	8007134 <UART_SetConfig+0x174>
 80070fc:	231b      	movs	r3, #27
 80070fe:	2220      	movs	r2, #32
 8007100:	189b      	adds	r3, r3, r2
 8007102:	19db      	adds	r3, r3, r7
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e07d      	b.n	8007206 <UART_SetConfig+0x246>
 800710a:	231b      	movs	r3, #27
 800710c:	2220      	movs	r2, #32
 800710e:	189b      	adds	r3, r3, r2
 8007110:	19db      	adds	r3, r3, r7
 8007112:	2202      	movs	r2, #2
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e076      	b.n	8007206 <UART_SetConfig+0x246>
 8007118:	231b      	movs	r3, #27
 800711a:	2220      	movs	r2, #32
 800711c:	189b      	adds	r3, r3, r2
 800711e:	19db      	adds	r3, r3, r7
 8007120:	2204      	movs	r2, #4
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e06f      	b.n	8007206 <UART_SetConfig+0x246>
 8007126:	231b      	movs	r3, #27
 8007128:	2220      	movs	r2, #32
 800712a:	189b      	adds	r3, r3, r2
 800712c:	19db      	adds	r3, r3, r7
 800712e:	2208      	movs	r2, #8
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e068      	b.n	8007206 <UART_SetConfig+0x246>
 8007134:	231b      	movs	r3, #27
 8007136:	2220      	movs	r2, #32
 8007138:	189b      	adds	r3, r3, r2
 800713a:	19db      	adds	r3, r3, r7
 800713c:	2210      	movs	r2, #16
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e061      	b.n	8007206 <UART_SetConfig+0x246>
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a61      	ldr	r2, [pc, #388]	@ (80072cc <UART_SetConfig+0x30c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d106      	bne.n	800715a <UART_SetConfig+0x19a>
 800714c:	231b      	movs	r3, #27
 800714e:	2220      	movs	r2, #32
 8007150:	189b      	adds	r3, r3, r2
 8007152:	19db      	adds	r3, r3, r7
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	e055      	b.n	8007206 <UART_SetConfig+0x246>
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a5c      	ldr	r2, [pc, #368]	@ (80072d0 <UART_SetConfig+0x310>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d106      	bne.n	8007172 <UART_SetConfig+0x1b2>
 8007164:	231b      	movs	r3, #27
 8007166:	2220      	movs	r2, #32
 8007168:	189b      	adds	r3, r3, r2
 800716a:	19db      	adds	r3, r3, r7
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e049      	b.n	8007206 <UART_SetConfig+0x246>
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a50      	ldr	r2, [pc, #320]	@ (80072b8 <UART_SetConfig+0x2f8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d13e      	bne.n	80071fa <UART_SetConfig+0x23a>
 800717c:	4b51      	ldr	r3, [pc, #324]	@ (80072c4 <UART_SetConfig+0x304>)
 800717e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007180:	23c0      	movs	r3, #192	@ 0xc0
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	4013      	ands	r3, r2
 8007186:	22c0      	movs	r2, #192	@ 0xc0
 8007188:	0112      	lsls	r2, r2, #4
 800718a:	4293      	cmp	r3, r2
 800718c:	d027      	beq.n	80071de <UART_SetConfig+0x21e>
 800718e:	22c0      	movs	r2, #192	@ 0xc0
 8007190:	0112      	lsls	r2, r2, #4
 8007192:	4293      	cmp	r3, r2
 8007194:	d82a      	bhi.n	80071ec <UART_SetConfig+0x22c>
 8007196:	2280      	movs	r2, #128	@ 0x80
 8007198:	0112      	lsls	r2, r2, #4
 800719a:	4293      	cmp	r3, r2
 800719c:	d011      	beq.n	80071c2 <UART_SetConfig+0x202>
 800719e:	2280      	movs	r2, #128	@ 0x80
 80071a0:	0112      	lsls	r2, r2, #4
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d822      	bhi.n	80071ec <UART_SetConfig+0x22c>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <UART_SetConfig+0x1f4>
 80071aa:	2280      	movs	r2, #128	@ 0x80
 80071ac:	00d2      	lsls	r2, r2, #3
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00e      	beq.n	80071d0 <UART_SetConfig+0x210>
 80071b2:	e01b      	b.n	80071ec <UART_SetConfig+0x22c>
 80071b4:	231b      	movs	r3, #27
 80071b6:	2220      	movs	r2, #32
 80071b8:	189b      	adds	r3, r3, r2
 80071ba:	19db      	adds	r3, r3, r7
 80071bc:	2200      	movs	r2, #0
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	e021      	b.n	8007206 <UART_SetConfig+0x246>
 80071c2:	231b      	movs	r3, #27
 80071c4:	2220      	movs	r2, #32
 80071c6:	189b      	adds	r3, r3, r2
 80071c8:	19db      	adds	r3, r3, r7
 80071ca:	2202      	movs	r2, #2
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e01a      	b.n	8007206 <UART_SetConfig+0x246>
 80071d0:	231b      	movs	r3, #27
 80071d2:	2220      	movs	r2, #32
 80071d4:	189b      	adds	r3, r3, r2
 80071d6:	19db      	adds	r3, r3, r7
 80071d8:	2204      	movs	r2, #4
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	e013      	b.n	8007206 <UART_SetConfig+0x246>
 80071de:	231b      	movs	r3, #27
 80071e0:	2220      	movs	r2, #32
 80071e2:	189b      	adds	r3, r3, r2
 80071e4:	19db      	adds	r3, r3, r7
 80071e6:	2208      	movs	r2, #8
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e00c      	b.n	8007206 <UART_SetConfig+0x246>
 80071ec:	231b      	movs	r3, #27
 80071ee:	2220      	movs	r2, #32
 80071f0:	189b      	adds	r3, r3, r2
 80071f2:	19db      	adds	r3, r3, r7
 80071f4:	2210      	movs	r2, #16
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	e005      	b.n	8007206 <UART_SetConfig+0x246>
 80071fa:	231b      	movs	r3, #27
 80071fc:	2220      	movs	r2, #32
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	19db      	adds	r3, r3, r7
 8007202:	2210      	movs	r2, #16
 8007204:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a2b      	ldr	r2, [pc, #172]	@ (80072b8 <UART_SetConfig+0x2f8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d000      	beq.n	8007212 <UART_SetConfig+0x252>
 8007210:	e0a9      	b.n	8007366 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007212:	231b      	movs	r3, #27
 8007214:	2220      	movs	r2, #32
 8007216:	189b      	adds	r3, r3, r2
 8007218:	19db      	adds	r3, r3, r7
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d015      	beq.n	800724c <UART_SetConfig+0x28c>
 8007220:	dc18      	bgt.n	8007254 <UART_SetConfig+0x294>
 8007222:	2b04      	cmp	r3, #4
 8007224:	d00d      	beq.n	8007242 <UART_SetConfig+0x282>
 8007226:	dc15      	bgt.n	8007254 <UART_SetConfig+0x294>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <UART_SetConfig+0x272>
 800722c:	2b02      	cmp	r3, #2
 800722e:	d005      	beq.n	800723c <UART_SetConfig+0x27c>
 8007230:	e010      	b.n	8007254 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007232:	f7fd fb77 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8007236:	0003      	movs	r3, r0
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800723a:	e014      	b.n	8007266 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800723c:	4b25      	ldr	r3, [pc, #148]	@ (80072d4 <UART_SetConfig+0x314>)
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007240:	e011      	b.n	8007266 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007242:	f7fd fae3 	bl	800480c <HAL_RCC_GetSysClockFreq>
 8007246:	0003      	movs	r3, r0
 8007248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800724a:	e00c      	b.n	8007266 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724c:	2380      	movs	r3, #128	@ 0x80
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007252:	e008      	b.n	8007266 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007258:	231a      	movs	r3, #26
 800725a:	2220      	movs	r2, #32
 800725c:	189b      	adds	r3, r3, r2
 800725e:	19db      	adds	r3, r3, r7
 8007260:	2201      	movs	r2, #1
 8007262:	701a      	strb	r2, [r3, #0]
        break;
 8007264:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007268:	2b00      	cmp	r3, #0
 800726a:	d100      	bne.n	800726e <UART_SetConfig+0x2ae>
 800726c:	e14b      	b.n	8007506 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007272:	4b19      	ldr	r3, [pc, #100]	@ (80072d8 <UART_SetConfig+0x318>)
 8007274:	0052      	lsls	r2, r2, #1
 8007276:	5ad3      	ldrh	r3, [r2, r3]
 8007278:	0019      	movs	r1, r3
 800727a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800727c:	f7f8 ff54 	bl	8000128 <__udivsi3>
 8007280:	0003      	movs	r3, r0
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	0013      	movs	r3, r2
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	189b      	adds	r3, r3, r2
 800728e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007290:	429a      	cmp	r2, r3
 8007292:	d305      	bcc.n	80072a0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800729a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800729c:	429a      	cmp	r2, r3
 800729e:	d91d      	bls.n	80072dc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80072a0:	231a      	movs	r3, #26
 80072a2:	2220      	movs	r2, #32
 80072a4:	189b      	adds	r3, r3, r2
 80072a6:	19db      	adds	r3, r3, r7
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e12b      	b.n	8007506 <UART_SetConfig+0x546>
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	cfff69f3 	.word	0xcfff69f3
 80072b4:	ffffcfff 	.word	0xffffcfff
 80072b8:	40008000 	.word	0x40008000
 80072bc:	11fff4ff 	.word	0x11fff4ff
 80072c0:	40013800 	.word	0x40013800
 80072c4:	40021000 	.word	0x40021000
 80072c8:	40004400 	.word	0x40004400
 80072cc:	40004800 	.word	0x40004800
 80072d0:	40004c00 	.word	0x40004c00
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	08009514 	.word	0x08009514
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072e8:	4b92      	ldr	r3, [pc, #584]	@ (8007534 <UART_SetConfig+0x574>)
 80072ea:	0052      	lsls	r2, r2, #1
 80072ec:	5ad3      	ldrh	r3, [r2, r3]
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	69b8      	ldr	r0, [r7, #24]
 80072fa:	69f9      	ldr	r1, [r7, #28]
 80072fc:	f7f9 f88a 	bl	8000414 <__aeabi_uldivmod>
 8007300:	0002      	movs	r2, r0
 8007302:	000b      	movs	r3, r1
 8007304:	0e11      	lsrs	r1, r2, #24
 8007306:	021d      	lsls	r5, r3, #8
 8007308:	430d      	orrs	r5, r1
 800730a:	0214      	lsls	r4, r2, #8
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	68b8      	ldr	r0, [r7, #8]
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	1900      	adds	r0, r0, r4
 800731e:	4169      	adcs	r1, r5
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	2300      	movs	r3, #0
 8007328:	607b      	str	r3, [r7, #4]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f7f9 f871 	bl	8000414 <__aeabi_uldivmod>
 8007332:	0002      	movs	r2, r0
 8007334:	000b      	movs	r3, r1
 8007336:	0013      	movs	r3, r2
 8007338:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800733a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733c:	23c0      	movs	r3, #192	@ 0xc0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	429a      	cmp	r2, r3
 8007342:	d309      	bcc.n	8007358 <UART_SetConfig+0x398>
 8007344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007346:	2380      	movs	r3, #128	@ 0x80
 8007348:	035b      	lsls	r3, r3, #13
 800734a:	429a      	cmp	r2, r3
 800734c:	d204      	bcs.n	8007358 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007354:	60da      	str	r2, [r3, #12]
 8007356:	e0d6      	b.n	8007506 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007358:	231a      	movs	r3, #26
 800735a:	2220      	movs	r2, #32
 800735c:	189b      	adds	r3, r3, r2
 800735e:	19db      	adds	r3, r3, r7
 8007360:	2201      	movs	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e0cf      	b.n	8007506 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	69da      	ldr	r2, [r3, #28]
 800736a:	2380      	movs	r3, #128	@ 0x80
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	429a      	cmp	r2, r3
 8007370:	d000      	beq.n	8007374 <UART_SetConfig+0x3b4>
 8007372:	e070      	b.n	8007456 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007374:	231b      	movs	r3, #27
 8007376:	2220      	movs	r2, #32
 8007378:	189b      	adds	r3, r3, r2
 800737a:	19db      	adds	r3, r3, r7
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b08      	cmp	r3, #8
 8007380:	d015      	beq.n	80073ae <UART_SetConfig+0x3ee>
 8007382:	dc18      	bgt.n	80073b6 <UART_SetConfig+0x3f6>
 8007384:	2b04      	cmp	r3, #4
 8007386:	d00d      	beq.n	80073a4 <UART_SetConfig+0x3e4>
 8007388:	dc15      	bgt.n	80073b6 <UART_SetConfig+0x3f6>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <UART_SetConfig+0x3d4>
 800738e:	2b02      	cmp	r3, #2
 8007390:	d005      	beq.n	800739e <UART_SetConfig+0x3de>
 8007392:	e010      	b.n	80073b6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007394:	f7fd fac6 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8007398:	0003      	movs	r3, r0
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800739c:	e014      	b.n	80073c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800739e:	4b66      	ldr	r3, [pc, #408]	@ (8007538 <UART_SetConfig+0x578>)
 80073a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073a2:	e011      	b.n	80073c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a4:	f7fd fa32 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80073a8:	0003      	movs	r3, r0
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ac:	e00c      	b.n	80073c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ae:	2380      	movs	r3, #128	@ 0x80
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b4:	e008      	b.n	80073c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80073ba:	231a      	movs	r3, #26
 80073bc:	2220      	movs	r2, #32
 80073be:	189b      	adds	r3, r3, r2
 80073c0:	19db      	adds	r3, r3, r7
 80073c2:	2201      	movs	r2, #1
 80073c4:	701a      	strb	r2, [r3, #0]
        break;
 80073c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d100      	bne.n	80073d0 <UART_SetConfig+0x410>
 80073ce:	e09a      	b.n	8007506 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073d4:	4b57      	ldr	r3, [pc, #348]	@ (8007534 <UART_SetConfig+0x574>)
 80073d6:	0052      	lsls	r2, r2, #1
 80073d8:	5ad3      	ldrh	r3, [r2, r3]
 80073da:	0019      	movs	r1, r3
 80073dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80073de:	f7f8 fea3 	bl	8000128 <__udivsi3>
 80073e2:	0003      	movs	r3, r0
 80073e4:	005a      	lsls	r2, r3, #1
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	085b      	lsrs	r3, r3, #1
 80073ec:	18d2      	adds	r2, r2, r3
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	0019      	movs	r1, r3
 80073f4:	0010      	movs	r0, r2
 80073f6:	f7f8 fe97 	bl	8000128 <__udivsi3>
 80073fa:	0003      	movs	r3, r0
 80073fc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b0f      	cmp	r3, #15
 8007402:	d921      	bls.n	8007448 <UART_SetConfig+0x488>
 8007404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007406:	2380      	movs	r3, #128	@ 0x80
 8007408:	025b      	lsls	r3, r3, #9
 800740a:	429a      	cmp	r2, r3
 800740c:	d21c      	bcs.n	8007448 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	b29a      	uxth	r2, r3
 8007412:	200e      	movs	r0, #14
 8007414:	2420      	movs	r4, #32
 8007416:	1903      	adds	r3, r0, r4
 8007418:	19db      	adds	r3, r3, r7
 800741a:	210f      	movs	r1, #15
 800741c:	438a      	bics	r2, r1
 800741e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	2207      	movs	r2, #7
 8007428:	4013      	ands	r3, r2
 800742a:	b299      	uxth	r1, r3
 800742c:	1903      	adds	r3, r0, r4
 800742e:	19db      	adds	r3, r3, r7
 8007430:	1902      	adds	r2, r0, r4
 8007432:	19d2      	adds	r2, r2, r7
 8007434:	8812      	ldrh	r2, [r2, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1902      	adds	r2, r0, r4
 8007440:	19d2      	adds	r2, r2, r7
 8007442:	8812      	ldrh	r2, [r2, #0]
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	e05e      	b.n	8007506 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007448:	231a      	movs	r3, #26
 800744a:	2220      	movs	r2, #32
 800744c:	189b      	adds	r3, r3, r2
 800744e:	19db      	adds	r3, r3, r7
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	e057      	b.n	8007506 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007456:	231b      	movs	r3, #27
 8007458:	2220      	movs	r2, #32
 800745a:	189b      	adds	r3, r3, r2
 800745c:	19db      	adds	r3, r3, r7
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b08      	cmp	r3, #8
 8007462:	d015      	beq.n	8007490 <UART_SetConfig+0x4d0>
 8007464:	dc18      	bgt.n	8007498 <UART_SetConfig+0x4d8>
 8007466:	2b04      	cmp	r3, #4
 8007468:	d00d      	beq.n	8007486 <UART_SetConfig+0x4c6>
 800746a:	dc15      	bgt.n	8007498 <UART_SetConfig+0x4d8>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <UART_SetConfig+0x4b6>
 8007470:	2b02      	cmp	r3, #2
 8007472:	d005      	beq.n	8007480 <UART_SetConfig+0x4c0>
 8007474:	e010      	b.n	8007498 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fd fa55 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 800747a:	0003      	movs	r3, r0
 800747c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800747e:	e014      	b.n	80074aa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b2d      	ldr	r3, [pc, #180]	@ (8007538 <UART_SetConfig+0x578>)
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007484:	e011      	b.n	80074aa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fd f9c1 	bl	800480c <HAL_RCC_GetSysClockFreq>
 800748a:	0003      	movs	r3, r0
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800748e:	e00c      	b.n	80074aa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007490:	2380      	movs	r3, #128	@ 0x80
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007496:	e008      	b.n	80074aa <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800749c:	231a      	movs	r3, #26
 800749e:	2220      	movs	r2, #32
 80074a0:	189b      	adds	r3, r3, r2
 80074a2:	19db      	adds	r3, r3, r7
 80074a4:	2201      	movs	r2, #1
 80074a6:	701a      	strb	r2, [r3, #0]
        break;
 80074a8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80074aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02a      	beq.n	8007506 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007534 <UART_SetConfig+0x574>)
 80074b6:	0052      	lsls	r2, r2, #1
 80074b8:	5ad3      	ldrh	r3, [r2, r3]
 80074ba:	0019      	movs	r1, r3
 80074bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80074be:	f7f8 fe33 	bl	8000128 <__udivsi3>
 80074c2:	0003      	movs	r3, r0
 80074c4:	001a      	movs	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	18d2      	adds	r2, r2, r3
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	0019      	movs	r1, r3
 80074d4:	0010      	movs	r0, r2
 80074d6:	f7f8 fe27 	bl	8000128 <__udivsi3>
 80074da:	0003      	movs	r3, r0
 80074dc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	2b0f      	cmp	r3, #15
 80074e2:	d90a      	bls.n	80074fa <UART_SetConfig+0x53a>
 80074e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e6:	2380      	movs	r3, #128	@ 0x80
 80074e8:	025b      	lsls	r3, r3, #9
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d205      	bcs.n	80074fa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60da      	str	r2, [r3, #12]
 80074f8:	e005      	b.n	8007506 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80074fa:	231a      	movs	r3, #26
 80074fc:	2220      	movs	r2, #32
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	19db      	adds	r3, r3, r7
 8007502:	2201      	movs	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	226a      	movs	r2, #106	@ 0x6a
 800750a:	2101      	movs	r1, #1
 800750c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	2268      	movs	r2, #104	@ 0x68
 8007512:	2101      	movs	r1, #1
 8007514:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	2200      	movs	r2, #0
 800751a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	2200      	movs	r2, #0
 8007520:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007522:	231a      	movs	r3, #26
 8007524:	2220      	movs	r2, #32
 8007526:	189b      	adds	r3, r3, r2
 8007528:	19db      	adds	r3, r3, r7
 800752a:	781b      	ldrb	r3, [r3, #0]
}
 800752c:	0018      	movs	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	b010      	add	sp, #64	@ 0x40
 8007532:	bdb0      	pop	{r4, r5, r7, pc}
 8007534:	08009514 	.word	0x08009514
 8007538:	00f42400 	.word	0x00f42400

0800753c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007548:	2208      	movs	r2, #8
 800754a:	4013      	ands	r3, r2
 800754c:	d00b      	beq.n	8007566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4a4a      	ldr	r2, [pc, #296]	@ (8007680 <UART_AdvFeatureConfig+0x144>)
 8007556:	4013      	ands	r3, r2
 8007558:	0019      	movs	r1, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756a:	2201      	movs	r2, #1
 800756c:	4013      	ands	r3, r2
 800756e:	d00b      	beq.n	8007588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4a43      	ldr	r2, [pc, #268]	@ (8007684 <UART_AdvFeatureConfig+0x148>)
 8007578:	4013      	ands	r3, r2
 800757a:	0019      	movs	r1, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	2202      	movs	r2, #2
 800758e:	4013      	ands	r3, r2
 8007590:	d00b      	beq.n	80075aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a3b      	ldr	r2, [pc, #236]	@ (8007688 <UART_AdvFeatureConfig+0x14c>)
 800759a:	4013      	ands	r3, r2
 800759c:	0019      	movs	r1, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	2204      	movs	r2, #4
 80075b0:	4013      	ands	r3, r2
 80075b2:	d00b      	beq.n	80075cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4a34      	ldr	r2, [pc, #208]	@ (800768c <UART_AdvFeatureConfig+0x150>)
 80075bc:	4013      	ands	r3, r2
 80075be:	0019      	movs	r1, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	2210      	movs	r2, #16
 80075d2:	4013      	ands	r3, r2
 80075d4:	d00b      	beq.n	80075ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007690 <UART_AdvFeatureConfig+0x154>)
 80075de:	4013      	ands	r3, r2
 80075e0:	0019      	movs	r1, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	2220      	movs	r2, #32
 80075f4:	4013      	ands	r3, r2
 80075f6:	d00b      	beq.n	8007610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	4a25      	ldr	r2, [pc, #148]	@ (8007694 <UART_AdvFeatureConfig+0x158>)
 8007600:	4013      	ands	r3, r2
 8007602:	0019      	movs	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007614:	2240      	movs	r2, #64	@ 0x40
 8007616:	4013      	ands	r3, r2
 8007618:	d01d      	beq.n	8007656 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	4a1d      	ldr	r2, [pc, #116]	@ (8007698 <UART_AdvFeatureConfig+0x15c>)
 8007622:	4013      	ands	r3, r2
 8007624:	0019      	movs	r1, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007636:	2380      	movs	r3, #128	@ 0x80
 8007638:	035b      	lsls	r3, r3, #13
 800763a:	429a      	cmp	r2, r3
 800763c:	d10b      	bne.n	8007656 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4a15      	ldr	r2, [pc, #84]	@ (800769c <UART_AdvFeatureConfig+0x160>)
 8007646:	4013      	ands	r3, r2
 8007648:	0019      	movs	r1, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765a:	2280      	movs	r2, #128	@ 0x80
 800765c:	4013      	ands	r3, r2
 800765e:	d00b      	beq.n	8007678 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4a0e      	ldr	r2, [pc, #56]	@ (80076a0 <UART_AdvFeatureConfig+0x164>)
 8007668:	4013      	ands	r3, r2
 800766a:	0019      	movs	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	605a      	str	r2, [r3, #4]
  }
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b002      	add	sp, #8
 800767e:	bd80      	pop	{r7, pc}
 8007680:	ffff7fff 	.word	0xffff7fff
 8007684:	fffdffff 	.word	0xfffdffff
 8007688:	fffeffff 	.word	0xfffeffff
 800768c:	fffbffff 	.word	0xfffbffff
 8007690:	ffffefff 	.word	0xffffefff
 8007694:	ffffdfff 	.word	0xffffdfff
 8007698:	ffefffff 	.word	0xffefffff
 800769c:	ff9fffff 	.word	0xff9fffff
 80076a0:	fff7ffff 	.word	0xfff7ffff

080076a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b092      	sub	sp, #72	@ 0x48
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2290      	movs	r2, #144	@ 0x90
 80076b0:	2100      	movs	r1, #0
 80076b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076b4:	f7fa fe02 	bl	80022bc <HAL_GetTick>
 80076b8:	0003      	movs	r3, r0
 80076ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2208      	movs	r2, #8
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d12d      	bne.n	8007726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076cc:	2280      	movs	r2, #128	@ 0x80
 80076ce:	0391      	lsls	r1, r2, #14
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4a47      	ldr	r2, [pc, #284]	@ (80077f0 <UART_CheckIdleState+0x14c>)
 80076d4:	9200      	str	r2, [sp, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f000 f88e 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d022      	beq.n	8007726 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e0:	f3ef 8310 	mrs	r3, PRIMASK
 80076e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076ea:	2301      	movs	r3, #1
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	f383 8810 	msr	PRIMASK, r3
}
 80076f4:	46c0      	nop			@ (mov r8, r8)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2180      	movs	r1, #128	@ 0x80
 8007702:	438a      	bics	r2, r1
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	f383 8810 	msr	PRIMASK, r3
}
 8007710:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2288      	movs	r2, #136	@ 0x88
 8007716:	2120      	movs	r1, #32
 8007718:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2284      	movs	r2, #132	@ 0x84
 800771e:	2100      	movs	r1, #0
 8007720:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e060      	b.n	80077e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2204      	movs	r2, #4
 800772e:	4013      	ands	r3, r2
 8007730:	2b04      	cmp	r3, #4
 8007732:	d146      	bne.n	80077c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007736:	2280      	movs	r2, #128	@ 0x80
 8007738:	03d1      	lsls	r1, r2, #15
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4a2c      	ldr	r2, [pc, #176]	@ (80077f0 <UART_CheckIdleState+0x14c>)
 800773e:	9200      	str	r2, [sp, #0]
 8007740:	2200      	movs	r2, #0
 8007742:	f000 f859 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 8007746:	1e03      	subs	r3, r0, #0
 8007748:	d03b      	beq.n	80077c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774a:	f3ef 8310 	mrs	r3, PRIMASK
 800774e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007750:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
 8007754:	2301      	movs	r3, #1
 8007756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f383 8810 	msr	PRIMASK, r3
}
 800775e:	46c0      	nop			@ (mov r8, r8)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4922      	ldr	r1, [pc, #136]	@ (80077f4 <UART_CheckIdleState+0x150>)
 800776c:	400a      	ands	r2, r1
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f383 8810 	msr	PRIMASK, r3
}
 800777a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800777c:	f3ef 8310 	mrs	r3, PRIMASK
 8007780:	61bb      	str	r3, [r7, #24]
  return(result);
 8007782:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007784:	633b      	str	r3, [r7, #48]	@ 0x30
 8007786:	2301      	movs	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f383 8810 	msr	PRIMASK, r3
}
 8007790:	46c0      	nop			@ (mov r8, r8)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2101      	movs	r1, #1
 800779e:	438a      	bics	r2, r1
 80077a0:	609a      	str	r2, [r3, #8]
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f383 8810 	msr	PRIMASK, r3
}
 80077ac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	228c      	movs	r2, #140	@ 0x8c
 80077b2:	2120      	movs	r1, #32
 80077b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2284      	movs	r2, #132	@ 0x84
 80077ba:	2100      	movs	r1, #0
 80077bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e012      	b.n	80077e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2288      	movs	r2, #136	@ 0x88
 80077c6:	2120      	movs	r1, #32
 80077c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	228c      	movs	r2, #140	@ 0x8c
 80077ce:	2120      	movs	r1, #32
 80077d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2284      	movs	r2, #132	@ 0x84
 80077e2:	2100      	movs	r1, #0
 80077e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b010      	add	sp, #64	@ 0x40
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	01ffffff 	.word	0x01ffffff
 80077f4:	fffffedf 	.word	0xfffffedf

080077f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	1dfb      	adds	r3, r7, #7
 8007806:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007808:	e051      	b.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	3301      	adds	r3, #1
 800780e:	d04e      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007810:	f7fa fd54 	bl	80022bc <HAL_GetTick>
 8007814:	0002      	movs	r2, r0
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	429a      	cmp	r2, r3
 800781e:	d302      	bcc.n	8007826 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e051      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2204      	movs	r2, #4
 8007832:	4013      	ands	r3, r2
 8007834:	d03b      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb6>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b80      	cmp	r3, #128	@ 0x80
 800783a:	d038      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb6>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b40      	cmp	r3, #64	@ 0x40
 8007840:	d035      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	2208      	movs	r2, #8
 800784a:	4013      	ands	r3, r2
 800784c:	2b08      	cmp	r3, #8
 800784e:	d111      	bne.n	8007874 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2208      	movs	r2, #8
 8007856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0018      	movs	r0, r3
 800785c:	f000 f960 	bl	8007b20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2290      	movs	r2, #144	@ 0x90
 8007864:	2108      	movs	r1, #8
 8007866:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2284      	movs	r2, #132	@ 0x84
 800786c:	2100      	movs	r1, #0
 800786e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e02c      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69da      	ldr	r2, [r3, #28]
 800787a:	2380      	movs	r3, #128	@ 0x80
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	401a      	ands	r2, r3
 8007880:	2380      	movs	r3, #128	@ 0x80
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	429a      	cmp	r2, r3
 8007886:	d112      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2280      	movs	r2, #128	@ 0x80
 800788e:	0112      	lsls	r2, r2, #4
 8007890:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	0018      	movs	r0, r3
 8007896:	f000 f943 	bl	8007b20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2290      	movs	r2, #144	@ 0x90
 800789e:	2120      	movs	r1, #32
 80078a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2284      	movs	r2, #132	@ 0x84
 80078a6:	2100      	movs	r1, #0
 80078a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e00f      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	4013      	ands	r3, r2
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	425a      	negs	r2, r3
 80078be:	4153      	adcs	r3, r2
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	001a      	movs	r2, r3
 80078c4:	1dfb      	adds	r3, r7, #7
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d09e      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b004      	add	sp, #16
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b098      	sub	sp, #96	@ 0x60
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	1dbb      	adds	r3, r7, #6
 80078e4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	1dba      	adds	r2, r7, #6
 80078f0:	215c      	movs	r1, #92	@ 0x5c
 80078f2:	8812      	ldrh	r2, [r2, #0]
 80078f4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1dba      	adds	r2, r7, #6
 80078fa:	215e      	movs	r1, #94	@ 0x5e
 80078fc:	8812      	ldrh	r2, [r2, #0]
 80078fe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	2380      	movs	r3, #128	@ 0x80
 800790c:	015b      	lsls	r3, r3, #5
 800790e:	429a      	cmp	r2, r3
 8007910:	d10d      	bne.n	800792e <UART_Start_Receive_IT+0x56>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <UART_Start_Receive_IT+0x4c>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2260      	movs	r2, #96	@ 0x60
 800791e:	497b      	ldr	r1, [pc, #492]	@ (8007b0c <UART_Start_Receive_IT+0x234>)
 8007920:	5299      	strh	r1, [r3, r2]
 8007922:	e02e      	b.n	8007982 <UART_Start_Receive_IT+0xaa>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2260      	movs	r2, #96	@ 0x60
 8007928:	21ff      	movs	r1, #255	@ 0xff
 800792a:	5299      	strh	r1, [r3, r2]
 800792c:	e029      	b.n	8007982 <UART_Start_Receive_IT+0xaa>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <UART_Start_Receive_IT+0x7a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <UART_Start_Receive_IT+0x70>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2260      	movs	r2, #96	@ 0x60
 8007942:	21ff      	movs	r1, #255	@ 0xff
 8007944:	5299      	strh	r1, [r3, r2]
 8007946:	e01c      	b.n	8007982 <UART_Start_Receive_IT+0xaa>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2260      	movs	r2, #96	@ 0x60
 800794c:	217f      	movs	r1, #127	@ 0x7f
 800794e:	5299      	strh	r1, [r3, r2]
 8007950:	e017      	b.n	8007982 <UART_Start_Receive_IT+0xaa>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	2380      	movs	r3, #128	@ 0x80
 8007958:	055b      	lsls	r3, r3, #21
 800795a:	429a      	cmp	r2, r3
 800795c:	d10d      	bne.n	800797a <UART_Start_Receive_IT+0xa2>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d104      	bne.n	8007970 <UART_Start_Receive_IT+0x98>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2260      	movs	r2, #96	@ 0x60
 800796a:	217f      	movs	r1, #127	@ 0x7f
 800796c:	5299      	strh	r1, [r3, r2]
 800796e:	e008      	b.n	8007982 <UART_Start_Receive_IT+0xaa>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2260      	movs	r2, #96	@ 0x60
 8007974:	213f      	movs	r1, #63	@ 0x3f
 8007976:	5299      	strh	r1, [r3, r2]
 8007978:	e003      	b.n	8007982 <UART_Start_Receive_IT+0xaa>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2260      	movs	r2, #96	@ 0x60
 800797e:	2100      	movs	r1, #0
 8007980:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2290      	movs	r2, #144	@ 0x90
 8007986:	2100      	movs	r1, #0
 8007988:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	228c      	movs	r2, #140	@ 0x8c
 800798e:	2122      	movs	r1, #34	@ 0x22
 8007990:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007992:	f3ef 8310 	mrs	r3, PRIMASK
 8007996:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8007998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800799c:	2301      	movs	r3, #1
 800799e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079a2:	f383 8810 	msr	PRIMASK, r3
}
 80079a6:	46c0      	nop			@ (mov r8, r8)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2101      	movs	r1, #1
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079be:	f383 8810 	msr	PRIMASK, r3
}
 80079c2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079c8:	2380      	movs	r3, #128	@ 0x80
 80079ca:	059b      	lsls	r3, r3, #22
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d150      	bne.n	8007a72 <UART_Start_Receive_IT+0x19a>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2268      	movs	r2, #104	@ 0x68
 80079d4:	5a9b      	ldrh	r3, [r3, r2]
 80079d6:	1dba      	adds	r2, r7, #6
 80079d8:	8812      	ldrh	r2, [r2, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d349      	bcc.n	8007a72 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	2380      	movs	r3, #128	@ 0x80
 80079e4:	015b      	lsls	r3, r3, #5
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d107      	bne.n	80079fa <UART_Start_Receive_IT+0x122>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a46      	ldr	r2, [pc, #280]	@ (8007b10 <UART_Start_Receive_IT+0x238>)
 80079f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80079f8:	e002      	b.n	8007a00 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a45      	ldr	r2, [pc, #276]	@ (8007b14 <UART_Start_Receive_IT+0x23c>)
 80079fe:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d019      	beq.n	8007a3c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a08:	f3ef 8310 	mrs	r3, PRIMASK
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a12:	2301      	movs	r3, #1
 8007a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	f383 8810 	msr	PRIMASK, r3
}
 8007a1c:	46c0      	nop			@ (mov r8, r8)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2180      	movs	r1, #128	@ 0x80
 8007a2a:	0049      	lsls	r1, r1, #1
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a36:	f383 8810 	msr	PRIMASK, r3
}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a46:	2301      	movs	r3, #1
 8007a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	f383 8810 	msr	PRIMASK, r3
}
 8007a50:	46c0      	nop			@ (mov r8, r8)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2180      	movs	r1, #128	@ 0x80
 8007a5e:	0549      	lsls	r1, r1, #21
 8007a60:	430a      	orrs	r2, r1
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a66:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	f383 8810 	msr	PRIMASK, r3
}
 8007a6e:	46c0      	nop			@ (mov r8, r8)
 8007a70:	e047      	b.n	8007b02 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	2380      	movs	r3, #128	@ 0x80
 8007a78:	015b      	lsls	r3, r3, #5
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d107      	bne.n	8007a8e <UART_Start_Receive_IT+0x1b6>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4a23      	ldr	r2, [pc, #140]	@ (8007b18 <UART_Start_Receive_IT+0x240>)
 8007a8a:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a8c:	e002      	b.n	8007a94 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4a22      	ldr	r2, [pc, #136]	@ (8007b1c <UART_Start_Receive_IT+0x244>)
 8007a92:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d019      	beq.n	8007ad0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007aa2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	f383 8810 	msr	PRIMASK, r3
}
 8007ab0:	46c0      	nop			@ (mov r8, r8)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2190      	movs	r1, #144	@ 0x90
 8007abe:	0049      	lsls	r1, r1, #1
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	f383 8810 	msr	PRIMASK, r3
}
 8007ace:	e018      	b.n	8007b02 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ad6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ad8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ada:	2301      	movs	r3, #1
 8007adc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f383 8810 	msr	PRIMASK, r3
}
 8007ae4:	46c0      	nop			@ (mov r8, r8)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2120      	movs	r1, #32
 8007af2:	430a      	orrs	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f383 8810 	msr	PRIMASK, r3
}
 8007b00:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	0018      	movs	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b018      	add	sp, #96	@ 0x60
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	000001ff 	.word	0x000001ff
 8007b10:	0800833d 	.word	0x0800833d
 8007b14:	08007ffd 	.word	0x08007ffd
 8007b18:	08007e39 	.word	0x08007e39
 8007b1c:	08007c75 	.word	0x08007c75

08007b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	@ 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b28:	f3ef 8310 	mrs	r3, PRIMASK
 8007b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b32:	2301      	movs	r3, #1
 8007b34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f383 8810 	msr	PRIMASK, r3
}
 8007b3c:	46c0      	nop			@ (mov r8, r8)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4926      	ldr	r1, [pc, #152]	@ (8007be4 <UART_EndRxTransfer+0xc4>)
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f383 8810 	msr	PRIMASK, r3
}
 8007b58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b5e:	623b      	str	r3, [r7, #32]
  return(result);
 8007b60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b62:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b64:	2301      	movs	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	f383 8810 	msr	PRIMASK, r3
}
 8007b6e:	46c0      	nop			@ (mov r8, r8)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	491b      	ldr	r1, [pc, #108]	@ (8007be8 <UART_EndRxTransfer+0xc8>)
 8007b7c:	400a      	ands	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b86:	f383 8810 	msr	PRIMASK, r3
}
 8007b8a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d118      	bne.n	8007bc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b94:	f3ef 8310 	mrs	r3, PRIMASK
 8007b98:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2110      	movs	r1, #16
 8007bb6:	438a      	bics	r2, r1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f383 8810 	msr	PRIMASK, r3
}
 8007bc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	228c      	movs	r2, #140	@ 0x8c
 8007bca:	2120      	movs	r1, #32
 8007bcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bda:	46c0      	nop			@ (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b00e      	add	sp, #56	@ 0x38
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	46c0      	nop			@ (mov r8, r8)
 8007be4:	fffffedf 	.word	0xfffffedf
 8007be8:	effffffe 	.word	0xeffffffe

08007bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	225e      	movs	r2, #94	@ 0x5e
 8007bfe:	2100      	movs	r1, #0
 8007c00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2256      	movs	r2, #86	@ 0x56
 8007c06:	2100      	movs	r1, #0
 8007c08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f7ff f9c3 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b004      	add	sp, #16
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c22:	f3ef 8310 	mrs	r3, PRIMASK
 8007c26:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f383 8810 	msr	PRIMASK, r3
}
 8007c36:	46c0      	nop			@ (mov r8, r8)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2140      	movs	r1, #64	@ 0x40
 8007c44:	438a      	bics	r2, r1
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f383 8810 	msr	PRIMASK, r3
}
 8007c52:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2288      	movs	r2, #136	@ 0x88
 8007c58:	2120      	movs	r1, #32
 8007c5a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	0018      	movs	r0, r3
 8007c66:	f7ff f98f 	bl	8006f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b006      	add	sp, #24
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b094      	sub	sp, #80	@ 0x50
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c7c:	204e      	movs	r0, #78	@ 0x4e
 8007c7e:	183b      	adds	r3, r7, r0
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	2160      	movs	r1, #96	@ 0x60
 8007c84:	5a52      	ldrh	r2, [r2, r1]
 8007c86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	228c      	movs	r2, #140	@ 0x8c
 8007c8c:	589b      	ldr	r3, [r3, r2]
 8007c8e:	2b22      	cmp	r3, #34	@ 0x22
 8007c90:	d000      	beq.n	8007c94 <UART_RxISR_8BIT+0x20>
 8007c92:	e0bf      	b.n	8007e14 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c9a:	214c      	movs	r1, #76	@ 0x4c
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ca0:	187b      	adds	r3, r7, r1
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	183b      	adds	r3, r7, r0
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b2d9      	uxtb	r1, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb0:	400a      	ands	r2, r1
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	225e      	movs	r2, #94	@ 0x5e
 8007cc4:	5a9b      	ldrh	r3, [r3, r2]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b299      	uxth	r1, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	225e      	movs	r2, #94	@ 0x5e
 8007cd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	225e      	movs	r2, #94	@ 0x5e
 8007cd6:	5a9b      	ldrh	r3, [r3, r2]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d000      	beq.n	8007ce0 <UART_RxISR_8BIT+0x6c>
 8007cde:	e0a1      	b.n	8007e24 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cea:	2301      	movs	r3, #1
 8007cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	f383 8810 	msr	PRIMASK, r3
}
 8007cf4:	46c0      	nop			@ (mov r8, r8)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	494a      	ldr	r1, [pc, #296]	@ (8007e2c <UART_RxISR_8BIT+0x1b8>)
 8007d02:	400a      	ands	r2, r1
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	f383 8810 	msr	PRIMASK, r3
}
 8007d10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d12:	f3ef 8310 	mrs	r3, PRIMASK
 8007d16:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d22:	f383 8810 	msr	PRIMASK, r3
}
 8007d26:	46c0      	nop			@ (mov r8, r8)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2101      	movs	r1, #1
 8007d34:	438a      	bics	r2, r1
 8007d36:	609a      	str	r2, [r3, #8]
 8007d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	f383 8810 	msr	PRIMASK, r3
}
 8007d42:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	228c      	movs	r2, #140	@ 0x8c
 8007d48:	2120      	movs	r1, #32
 8007d4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a34      	ldr	r2, [pc, #208]	@ (8007e30 <UART_RxISR_8BIT+0x1bc>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01f      	beq.n	8007da2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	2380      	movs	r3, #128	@ 0x80
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	d018      	beq.n	8007da2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d70:	f3ef 8310 	mrs	r3, PRIMASK
 8007d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d76:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f383 8810 	msr	PRIMASK, r3
}
 8007d84:	46c0      	nop			@ (mov r8, r8)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4928      	ldr	r1, [pc, #160]	@ (8007e34 <UART_RxISR_8BIT+0x1c0>)
 8007d92:	400a      	ands	r2, r1
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f383 8810 	msr	PRIMASK, r3
}
 8007da0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d12f      	bne.n	8007e0a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db0:	f3ef 8310 	mrs	r3, PRIMASK
 8007db4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007db6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dba:	2301      	movs	r3, #1
 8007dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f383 8810 	msr	PRIMASK, r3
}
 8007dc4:	46c0      	nop			@ (mov r8, r8)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2110      	movs	r1, #16
 8007dd2:	438a      	bics	r2, r1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f383 8810 	msr	PRIMASK, r3
}
 8007de0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2210      	movs	r2, #16
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d103      	bne.n	8007df8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2210      	movs	r2, #16
 8007df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	225c      	movs	r2, #92	@ 0x5c
 8007dfc:	5a9a      	ldrh	r2, [r3, r2]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	0011      	movs	r1, r2
 8007e02:	0018      	movs	r0, r3
 8007e04:	f7ff f8d0 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e08:	e00c      	b.n	8007e24 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f7f8 fc17 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8007e12:	e007      	b.n	8007e24 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2108      	movs	r1, #8
 8007e20:	430a      	orrs	r2, r1
 8007e22:	619a      	str	r2, [r3, #24]
}
 8007e24:	46c0      	nop			@ (mov r8, r8)
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b014      	add	sp, #80	@ 0x50
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	fffffedf 	.word	0xfffffedf
 8007e30:	40008000 	.word	0x40008000
 8007e34:	fbffffff 	.word	0xfbffffff

08007e38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b094      	sub	sp, #80	@ 0x50
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e40:	204e      	movs	r0, #78	@ 0x4e
 8007e42:	183b      	adds	r3, r7, r0
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	2160      	movs	r1, #96	@ 0x60
 8007e48:	5a52      	ldrh	r2, [r2, r1]
 8007e4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	228c      	movs	r2, #140	@ 0x8c
 8007e50:	589b      	ldr	r3, [r3, r2]
 8007e52:	2b22      	cmp	r3, #34	@ 0x22
 8007e54:	d000      	beq.n	8007e58 <UART_RxISR_16BIT+0x20>
 8007e56:	e0bf      	b.n	8007fd8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e5e:	214c      	movs	r1, #76	@ 0x4c
 8007e60:	187b      	adds	r3, r7, r1
 8007e62:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e68:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	183a      	adds	r2, r7, r0
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	8812      	ldrh	r2, [r2, #0]
 8007e72:	4013      	ands	r3, r2
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7e:	1c9a      	adds	r2, r3, #2
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	225e      	movs	r2, #94	@ 0x5e
 8007e88:	5a9b      	ldrh	r3, [r3, r2]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b299      	uxth	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	225e      	movs	r2, #94	@ 0x5e
 8007e94:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	225e      	movs	r2, #94	@ 0x5e
 8007e9a:	5a9b      	ldrh	r3, [r3, r2]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d000      	beq.n	8007ea4 <UART_RxISR_16BIT+0x6c>
 8007ea2:	e0a1      	b.n	8007fe8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea8:	623b      	str	r3, [r7, #32]
  return(result);
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eae:	2301      	movs	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	f383 8810 	msr	PRIMASK, r3
}
 8007eb8:	46c0      	nop			@ (mov r8, r8)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	494a      	ldr	r1, [pc, #296]	@ (8007ff0 <UART_RxISR_16BIT+0x1b8>)
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	f383 8810 	msr	PRIMASK, r3
}
 8007ed4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	f383 8810 	msr	PRIMASK, r3
}
 8007eea:	46c0      	nop			@ (mov r8, r8)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	438a      	bics	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007efe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f02:	f383 8810 	msr	PRIMASK, r3
}
 8007f06:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	228c      	movs	r2, #140	@ 0x8c
 8007f0c:	2120      	movs	r1, #32
 8007f0e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a34      	ldr	r2, [pc, #208]	@ (8007ff4 <UART_RxISR_16BIT+0x1bc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01f      	beq.n	8007f66 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	4013      	ands	r3, r2
 8007f32:	d018      	beq.n	8007f66 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f34:	f3ef 8310 	mrs	r3, PRIMASK
 8007f38:	617b      	str	r3, [r7, #20]
  return(result);
 8007f3a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3e:	2301      	movs	r3, #1
 8007f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			@ (mov r8, r8)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4928      	ldr	r1, [pc, #160]	@ (8007ff8 <UART_RxISR_16BIT+0x1c0>)
 8007f56:	400a      	ands	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d12f      	bne.n	8007fce <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f74:	f3ef 8310 	mrs	r3, PRIMASK
 8007f78:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f7a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f7e:	2301      	movs	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f383 8810 	msr	PRIMASK, r3
}
 8007f88:	46c0      	nop			@ (mov r8, r8)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2110      	movs	r1, #16
 8007f96:	438a      	bics	r2, r1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f383 8810 	msr	PRIMASK, r3
}
 8007fa4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	2210      	movs	r2, #16
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d103      	bne.n	8007fbc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2210      	movs	r2, #16
 8007fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	225c      	movs	r2, #92	@ 0x5c
 8007fc0:	5a9a      	ldrh	r2, [r3, r2]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	0011      	movs	r1, r2
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7fe ffee 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fcc:	e00c      	b.n	8007fe8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f7f8 fb35 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8007fd6:	e007      	b.n	8007fe8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2108      	movs	r1, #8
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	619a      	str	r2, [r3, #24]
}
 8007fe8:	46c0      	nop			@ (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b014      	add	sp, #80	@ 0x50
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	fffffedf 	.word	0xfffffedf
 8007ff4:	40008000 	.word	0x40008000
 8007ff8:	fbffffff 	.word	0xfbffffff

08007ffc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b0a0      	sub	sp, #128	@ 0x80
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008004:	237a      	movs	r3, #122	@ 0x7a
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	2160      	movs	r1, #96	@ 0x60
 800800c:	5a52      	ldrh	r2, [r2, r1]
 800800e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	228c      	movs	r2, #140	@ 0x8c
 800802c:	589b      	ldr	r3, [r3, r2]
 800802e:	2b22      	cmp	r3, #34	@ 0x22
 8008030:	d000      	beq.n	8008034 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008032:	e16a      	b.n	800830a <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008034:	236e      	movs	r3, #110	@ 0x6e
 8008036:	18fb      	adds	r3, r7, r3
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	2168      	movs	r1, #104	@ 0x68
 800803c:	5a52      	ldrh	r2, [r2, r1]
 800803e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008040:	e111      	b.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008048:	216c      	movs	r1, #108	@ 0x6c
 800804a:	187b      	adds	r3, r7, r1
 800804c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800804e:	187b      	adds	r3, r7, r1
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b2da      	uxtb	r2, r3
 8008054:	237a      	movs	r3, #122	@ 0x7a
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b2d9      	uxtb	r1, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008060:	400a      	ands	r2, r1
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	225e      	movs	r2, #94	@ 0x5e
 8008074:	5a9b      	ldrh	r3, [r3, r2]
 8008076:	b29b      	uxth	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	b299      	uxth	r1, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	225e      	movs	r2, #94	@ 0x5e
 8008080:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800808a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800808c:	2207      	movs	r2, #7
 800808e:	4013      	ands	r3, r2
 8008090:	d049      	beq.n	8008126 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008092:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008094:	2201      	movs	r2, #1
 8008096:	4013      	ands	r3, r2
 8008098:	d010      	beq.n	80080bc <UART_RxISR_8BIT_FIFOEN+0xc0>
 800809a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800809c:	2380      	movs	r3, #128	@ 0x80
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	4013      	ands	r3, r2
 80080a2:	d00b      	beq.n	80080bc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2290      	movs	r2, #144	@ 0x90
 80080b0:	589b      	ldr	r3, [r3, r2]
 80080b2:	2201      	movs	r2, #1
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2190      	movs	r1, #144	@ 0x90
 80080ba:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080be:	2202      	movs	r2, #2
 80080c0:	4013      	ands	r3, r2
 80080c2:	d00f      	beq.n	80080e4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80080c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080c6:	2201      	movs	r2, #1
 80080c8:	4013      	ands	r3, r2
 80080ca:	d00b      	beq.n	80080e4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2202      	movs	r2, #2
 80080d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2290      	movs	r2, #144	@ 0x90
 80080d8:	589b      	ldr	r3, [r3, r2]
 80080da:	2204      	movs	r2, #4
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2190      	movs	r1, #144	@ 0x90
 80080e2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080e6:	2204      	movs	r2, #4
 80080e8:	4013      	ands	r3, r2
 80080ea:	d00f      	beq.n	800810c <UART_RxISR_8BIT_FIFOEN+0x110>
 80080ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080ee:	2201      	movs	r2, #1
 80080f0:	4013      	ands	r3, r2
 80080f2:	d00b      	beq.n	800810c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2204      	movs	r2, #4
 80080fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2290      	movs	r2, #144	@ 0x90
 8008100:	589b      	ldr	r3, [r3, r2]
 8008102:	2202      	movs	r2, #2
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2190      	movs	r1, #144	@ 0x90
 800810a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2290      	movs	r2, #144	@ 0x90
 8008110:	589b      	ldr	r3, [r3, r2]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	0018      	movs	r0, r3
 800811a:	f7fe ff3d 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2290      	movs	r2, #144	@ 0x90
 8008122:	2100      	movs	r1, #0
 8008124:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	225e      	movs	r2, #94	@ 0x5e
 800812a:	5a9b      	ldrh	r3, [r3, r2]
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d000      	beq.n	8008134 <UART_RxISR_8BIT_FIFOEN+0x138>
 8008132:	e098      	b.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800813c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800813e:	2301      	movs	r3, #1
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4973      	ldr	r1, [pc, #460]	@ (8008324 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8008156:	400a      	ands	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800815c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008166:	f3ef 8310 	mrs	r3, PRIMASK
 800816a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800816c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800816e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008170:	2301      	movs	r3, #1
 8008172:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008176:	f383 8810 	msr	PRIMASK, r3
}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4968      	ldr	r1, [pc, #416]	@ (8008328 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8008188:	400a      	ands	r2, r1
 800818a:	609a      	str	r2, [r3, #8]
 800818c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800818e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008192:	f383 8810 	msr	PRIMASK, r3
}
 8008196:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	228c      	movs	r2, #140	@ 0x8c
 800819c:	2120      	movs	r1, #32
 800819e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a5e      	ldr	r2, [pc, #376]	@ (800832c <UART_RxISR_8BIT_FIFOEN+0x330>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01f      	beq.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	2380      	movs	r3, #128	@ 0x80
 80081be:	041b      	lsls	r3, r3, #16
 80081c0:	4013      	ands	r3, r2
 80081c2:	d018      	beq.n	80081f6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c4:	f3ef 8310 	mrs	r3, PRIMASK
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80081ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80081ce:	2301      	movs	r3, #1
 80081d0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	f383 8810 	msr	PRIMASK, r3
}
 80081d8:	46c0      	nop			@ (mov r8, r8)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4952      	ldr	r1, [pc, #328]	@ (8008330 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80081e6:	400a      	ands	r2, r1
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	f383 8810 	msr	PRIMASK, r3
}
 80081f4:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d12f      	bne.n	800825e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008204:	f3ef 8310 	mrs	r3, PRIMASK
 8008208:	623b      	str	r3, [r7, #32]
  return(result);
 800820a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800820e:	2301      	movs	r3, #1
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	f383 8810 	msr	PRIMASK, r3
}
 8008218:	46c0      	nop			@ (mov r8, r8)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2110      	movs	r1, #16
 8008226:	438a      	bics	r2, r1
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	f383 8810 	msr	PRIMASK, r3
}
 8008234:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	2210      	movs	r2, #16
 800823e:	4013      	ands	r3, r2
 8008240:	2b10      	cmp	r3, #16
 8008242:	d103      	bne.n	800824c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2210      	movs	r2, #16
 800824a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	225c      	movs	r2, #92	@ 0x5c
 8008250:	5a9a      	ldrh	r2, [r3, r2]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	0011      	movs	r1, r2
 8008256:	0018      	movs	r0, r3
 8008258:	f7fe fea6 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
 800825c:	e003      	b.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0018      	movs	r0, r3
 8008262:	f7f8 f9ed 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008266:	236e      	movs	r3, #110	@ 0x6e
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008272:	2220      	movs	r2, #32
 8008274:	4013      	ands	r3, r2
 8008276:	d000      	beq.n	800827a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008278:	e6e3      	b.n	8008042 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800827a:	205a      	movs	r0, #90	@ 0x5a
 800827c:	183b      	adds	r3, r7, r0
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	215e      	movs	r1, #94	@ 0x5e
 8008282:	5a52      	ldrh	r2, [r2, r1]
 8008284:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008286:	0001      	movs	r1, r0
 8008288:	187b      	adds	r3, r7, r1
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d044      	beq.n	800831a <UART_RxISR_8BIT_FIFOEN+0x31e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2268      	movs	r2, #104	@ 0x68
 8008294:	5a9b      	ldrh	r3, [r3, r2]
 8008296:	187a      	adds	r2, r7, r1
 8008298:	8812      	ldrh	r2, [r2, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d23d      	bcs.n	800831a <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800829e:	f3ef 8310 	mrs	r3, PRIMASK
 80082a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80082a4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f383 8810 	msr	PRIMASK, r3
}
 80082b2:	46c0      	nop			@ (mov r8, r8)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	491d      	ldr	r1, [pc, #116]	@ (8008334 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80082c0:	400a      	ands	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
 80082c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f383 8810 	msr	PRIMASK, r3
}
 80082ce:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a19      	ldr	r2, [pc, #100]	@ (8008338 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80082d4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d6:	f3ef 8310 	mrs	r3, PRIMASK
 80082da:	617b      	str	r3, [r7, #20]
  return(result);
 80082dc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082de:	653b      	str	r3, [r7, #80]	@ 0x50
 80082e0:	2301      	movs	r3, #1
 80082e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f383 8810 	msr	PRIMASK, r3
}
 80082ea:	46c0      	nop			@ (mov r8, r8)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2120      	movs	r1, #32
 80082f8:	430a      	orrs	r2, r1
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f383 8810 	msr	PRIMASK, r3
}
 8008306:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008308:	e007      	b.n	800831a <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2108      	movs	r1, #8
 8008316:	430a      	orrs	r2, r1
 8008318:	619a      	str	r2, [r3, #24]
}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	46bd      	mov	sp, r7
 800831e:	b020      	add	sp, #128	@ 0x80
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	fffffeff 	.word	0xfffffeff
 8008328:	effffffe 	.word	0xeffffffe
 800832c:	40008000 	.word	0x40008000
 8008330:	fbffffff 	.word	0xfbffffff
 8008334:	efffffff 	.word	0xefffffff
 8008338:	08007c75 	.word	0x08007c75

0800833c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b0a2      	sub	sp, #136	@ 0x88
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008344:	2382      	movs	r3, #130	@ 0x82
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	2160      	movs	r1, #96	@ 0x60
 800834c:	5a52      	ldrh	r2, [r2, r1]
 800834e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	2284      	movs	r2, #132	@ 0x84
 8008358:	18ba      	adds	r2, r7, r2
 800835a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	228c      	movs	r2, #140	@ 0x8c
 8008370:	589b      	ldr	r3, [r3, r2]
 8008372:	2b22      	cmp	r3, #34	@ 0x22
 8008374:	d000      	beq.n	8008378 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8008376:	e174      	b.n	8008662 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008378:	2376      	movs	r3, #118	@ 0x76
 800837a:	18fb      	adds	r3, r7, r3
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	2168      	movs	r1, #104	@ 0x68
 8008380:	5a52      	ldrh	r2, [r2, r1]
 8008382:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008384:	e119      	b.n	80085ba <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800838c:	2174      	movs	r1, #116	@ 0x74
 800838e:	187b      	adds	r3, r7, r1
 8008390:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008396:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8008398:	187b      	adds	r3, r7, r1
 800839a:	2282      	movs	r2, #130	@ 0x82
 800839c:	18ba      	adds	r2, r7, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	8812      	ldrh	r2, [r2, #0]
 80083a2:	4013      	ands	r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ae:	1c9a      	adds	r2, r3, #2
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	225e      	movs	r2, #94	@ 0x5e
 80083b8:	5a9b      	ldrh	r3, [r3, r2]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b299      	uxth	r1, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	225e      	movs	r2, #94	@ 0x5e
 80083c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	2184      	movs	r1, #132	@ 0x84
 80083ce:	187a      	adds	r2, r7, r1
 80083d0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083d2:	187b      	adds	r3, r7, r1
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2207      	movs	r2, #7
 80083d8:	4013      	ands	r3, r2
 80083da:	d04e      	beq.n	800847a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2201      	movs	r2, #1
 80083e2:	4013      	ands	r3, r2
 80083e4:	d010      	beq.n	8008408 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80083e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80083e8:	2380      	movs	r3, #128	@ 0x80
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4013      	ands	r3, r2
 80083ee:	d00b      	beq.n	8008408 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2201      	movs	r2, #1
 80083f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2290      	movs	r2, #144	@ 0x90
 80083fc:	589b      	ldr	r3, [r3, r2]
 80083fe:	2201      	movs	r2, #1
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2190      	movs	r1, #144	@ 0x90
 8008406:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008408:	2384      	movs	r3, #132	@ 0x84
 800840a:	18fb      	adds	r3, r7, r3
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2202      	movs	r2, #2
 8008410:	4013      	ands	r3, r2
 8008412:	d00f      	beq.n	8008434 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008416:	2201      	movs	r2, #1
 8008418:	4013      	ands	r3, r2
 800841a:	d00b      	beq.n	8008434 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2202      	movs	r2, #2
 8008422:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2290      	movs	r2, #144	@ 0x90
 8008428:	589b      	ldr	r3, [r3, r2]
 800842a:	2204      	movs	r2, #4
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2190      	movs	r1, #144	@ 0x90
 8008432:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008434:	2384      	movs	r3, #132	@ 0x84
 8008436:	18fb      	adds	r3, r7, r3
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2204      	movs	r2, #4
 800843c:	4013      	ands	r3, r2
 800843e:	d00f      	beq.n	8008460 <UART_RxISR_16BIT_FIFOEN+0x124>
 8008440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008442:	2201      	movs	r2, #1
 8008444:	4013      	ands	r3, r2
 8008446:	d00b      	beq.n	8008460 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2204      	movs	r2, #4
 800844e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2290      	movs	r2, #144	@ 0x90
 8008454:	589b      	ldr	r3, [r3, r2]
 8008456:	2202      	movs	r2, #2
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2190      	movs	r1, #144	@ 0x90
 800845e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2290      	movs	r2, #144	@ 0x90
 8008464:	589b      	ldr	r3, [r3, r2]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	0018      	movs	r0, r3
 800846e:	f7fe fd93 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2290      	movs	r2, #144	@ 0x90
 8008476:	2100      	movs	r1, #0
 8008478:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	225e      	movs	r2, #94	@ 0x5e
 800847e:	5a9b      	ldrh	r3, [r3, r2]
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d000      	beq.n	8008488 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8008486:	e098      	b.n	80085ba <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008488:	f3ef 8310 	mrs	r3, PRIMASK
 800848c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800848e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008492:	2301      	movs	r3, #1
 8008494:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008498:	f383 8810 	msr	PRIMASK, r3
}
 800849c:	46c0      	nop			@ (mov r8, r8)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4974      	ldr	r1, [pc, #464]	@ (800867c <UART_RxISR_16BIT_FIFOEN+0x340>)
 80084aa:	400a      	ands	r2, r1
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b4:	f383 8810 	msr	PRIMASK, r3
}
 80084b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ba:	f3ef 8310 	mrs	r3, PRIMASK
 80084be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80084c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084c4:	2301      	movs	r3, #1
 80084c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ca:	f383 8810 	msr	PRIMASK, r3
}
 80084ce:	46c0      	nop			@ (mov r8, r8)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4969      	ldr	r1, [pc, #420]	@ (8008680 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80084dc:	400a      	ands	r2, r1
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084e2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084e6:	f383 8810 	msr	PRIMASK, r3
}
 80084ea:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	228c      	movs	r2, #140	@ 0x8c
 80084f0:	2120      	movs	r1, #32
 80084f2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a5f      	ldr	r2, [pc, #380]	@ (8008684 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d01f      	beq.n	800854a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	2380      	movs	r3, #128	@ 0x80
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	4013      	ands	r3, r2
 8008516:	d018      	beq.n	800854a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008518:	f3ef 8310 	mrs	r3, PRIMASK
 800851c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008520:	667b      	str	r3, [r7, #100]	@ 0x64
 8008522:	2301      	movs	r3, #1
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	f383 8810 	msr	PRIMASK, r3
}
 800852c:	46c0      	nop			@ (mov r8, r8)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4953      	ldr	r1, [pc, #332]	@ (8008688 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800853a:	400a      	ands	r2, r1
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008540:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008544:	f383 8810 	msr	PRIMASK, r3
}
 8008548:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d12f      	bne.n	80085b2 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008558:	f3ef 8310 	mrs	r3, PRIMASK
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008560:	663b      	str	r3, [r7, #96]	@ 0x60
 8008562:	2301      	movs	r3, #1
 8008564:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	f383 8810 	msr	PRIMASK, r3
}
 800856c:	46c0      	nop			@ (mov r8, r8)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2110      	movs	r1, #16
 800857a:	438a      	bics	r2, r1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008584:	f383 8810 	msr	PRIMASK, r3
}
 8008588:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	2210      	movs	r2, #16
 8008592:	4013      	ands	r3, r2
 8008594:	2b10      	cmp	r3, #16
 8008596:	d103      	bne.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2210      	movs	r2, #16
 800859e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	225c      	movs	r2, #92	@ 0x5c
 80085a4:	5a9a      	ldrh	r2, [r3, r2]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	0011      	movs	r1, r2
 80085aa:	0018      	movs	r0, r3
 80085ac:	f7fe fcfc 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
 80085b0:	e003      	b.n	80085ba <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	0018      	movs	r0, r3
 80085b6:	f7f8 f843 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085ba:	2376      	movs	r3, #118	@ 0x76
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <UART_RxISR_16BIT_FIFOEN+0x296>
 80085c4:	2384      	movs	r3, #132	@ 0x84
 80085c6:	18fb      	adds	r3, r7, r3
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2220      	movs	r2, #32
 80085cc:	4013      	ands	r3, r2
 80085ce:	d000      	beq.n	80085d2 <UART_RxISR_16BIT_FIFOEN+0x296>
 80085d0:	e6d9      	b.n	8008386 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085d2:	205e      	movs	r0, #94	@ 0x5e
 80085d4:	183b      	adds	r3, r7, r0
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	215e      	movs	r1, #94	@ 0x5e
 80085da:	5a52      	ldrh	r2, [r2, r1]
 80085dc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80085de:	0001      	movs	r1, r0
 80085e0:	187b      	adds	r3, r7, r1
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d044      	beq.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x336>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2268      	movs	r2, #104	@ 0x68
 80085ec:	5a9b      	ldrh	r3, [r3, r2]
 80085ee:	187a      	adds	r2, r7, r1
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d23d      	bcs.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f6:	f3ef 8310 	mrs	r3, PRIMASK
 80085fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80085fc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008600:	2301      	movs	r3, #1
 8008602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f383 8810 	msr	PRIMASK, r3
}
 800860a:	46c0      	nop			@ (mov r8, r8)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	491d      	ldr	r1, [pc, #116]	@ (800868c <UART_RxISR_16BIT_FIFOEN+0x350>)
 8008618:	400a      	ands	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
 800861c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800861e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f383 8810 	msr	PRIMASK, r3
}
 8008626:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a19      	ldr	r2, [pc, #100]	@ (8008690 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800862c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800862e:	f3ef 8310 	mrs	r3, PRIMASK
 8008632:	61bb      	str	r3, [r7, #24]
  return(result);
 8008634:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008636:	657b      	str	r3, [r7, #84]	@ 0x54
 8008638:	2301      	movs	r3, #1
 800863a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f383 8810 	msr	PRIMASK, r3
}
 8008642:	46c0      	nop			@ (mov r8, r8)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2120      	movs	r1, #32
 8008650:	430a      	orrs	r2, r1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008656:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	f383 8810 	msr	PRIMASK, r3
}
 800865e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008660:	e007      	b.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699a      	ldr	r2, [r3, #24]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2108      	movs	r1, #8
 800866e:	430a      	orrs	r2, r1
 8008670:	619a      	str	r2, [r3, #24]
}
 8008672:	46c0      	nop			@ (mov r8, r8)
 8008674:	46bd      	mov	sp, r7
 8008676:	b022      	add	sp, #136	@ 0x88
 8008678:	bd80      	pop	{r7, pc}
 800867a:	46c0      	nop			@ (mov r8, r8)
 800867c:	fffffeff 	.word	0xfffffeff
 8008680:	effffffe 	.word	0xeffffffe
 8008684:	40008000 	.word	0x40008000
 8008688:	fbffffff 	.word	0xfbffffff
 800868c:	efffffff 	.word	0xefffffff
 8008690:	08007e39 	.word	0x08007e39

08008694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800869c:	46c0      	nop			@ (mov r8, r8)
 800869e:	46bd      	mov	sp, r7
 80086a0:	b002      	add	sp, #8
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086ac:	46c0      	nop			@ (mov r8, r8)
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b002      	add	sp, #8
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086bc:	46c0      	nop			@ (mov r8, r8)
 80086be:	46bd      	mov	sp, r7
 80086c0:	b002      	add	sp, #8
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2284      	movs	r2, #132	@ 0x84
 80086d0:	5c9b      	ldrb	r3, [r3, r2]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <HAL_UARTEx_DisableFifoMode+0x16>
 80086d6:	2302      	movs	r3, #2
 80086d8:	e027      	b.n	800872a <HAL_UARTEx_DisableFifoMode+0x66>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2284      	movs	r2, #132	@ 0x84
 80086de:	2101      	movs	r1, #1
 80086e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2288      	movs	r2, #136	@ 0x88
 80086e6:	2124      	movs	r1, #36	@ 0x24
 80086e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2101      	movs	r1, #1
 80086fe:	438a      	bics	r2, r1
 8008700:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4a0b      	ldr	r2, [pc, #44]	@ (8008734 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008706:	4013      	ands	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2288      	movs	r2, #136	@ 0x88
 800871c:	2120      	movs	r1, #32
 800871e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2284      	movs	r2, #132	@ 0x84
 8008724:	2100      	movs	r1, #0
 8008726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	0018      	movs	r0, r3
 800872c:	46bd      	mov	sp, r7
 800872e:	b004      	add	sp, #16
 8008730:	bd80      	pop	{r7, pc}
 8008732:	46c0      	nop			@ (mov r8, r8)
 8008734:	dfffffff 	.word	0xdfffffff

08008738 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2284      	movs	r2, #132	@ 0x84
 8008746:	5c9b      	ldrb	r3, [r3, r2]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800874c:	2302      	movs	r3, #2
 800874e:	e02e      	b.n	80087ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2284      	movs	r2, #132	@ 0x84
 8008754:	2101      	movs	r1, #1
 8008756:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2288      	movs	r2, #136	@ 0x88
 800875c:	2124      	movs	r1, #36	@ 0x24
 800875e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2101      	movs	r1, #1
 8008774:	438a      	bics	r2, r1
 8008776:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	08d9      	lsrs	r1, r3, #3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	0018      	movs	r0, r3
 8008790:	f000 f854 	bl	800883c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2288      	movs	r2, #136	@ 0x88
 80087a0:	2120      	movs	r1, #32
 80087a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2284      	movs	r2, #132	@ 0x84
 80087a8:	2100      	movs	r1, #0
 80087aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	0018      	movs	r0, r3
 80087b0:	46bd      	mov	sp, r7
 80087b2:	b004      	add	sp, #16
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2284      	movs	r2, #132	@ 0x84
 80087c6:	5c9b      	ldrb	r3, [r3, r2]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e02f      	b.n	8008830 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2284      	movs	r2, #132	@ 0x84
 80087d4:	2101      	movs	r1, #1
 80087d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2288      	movs	r2, #136	@ 0x88
 80087dc:	2124      	movs	r1, #36	@ 0x24
 80087de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2101      	movs	r1, #1
 80087f4:	438a      	bics	r2, r1
 80087f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008838 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008800:	4013      	ands	r3, r2
 8008802:	0019      	movs	r1, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	0018      	movs	r0, r3
 8008812:	f000 f813 	bl	800883c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2288      	movs	r2, #136	@ 0x88
 8008822:	2120      	movs	r1, #32
 8008824:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2284      	movs	r2, #132	@ 0x84
 800882a:	2100      	movs	r1, #0
 800882c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	0018      	movs	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	b004      	add	sp, #16
 8008836:	bd80      	pop	{r7, pc}
 8008838:	f1ffffff 	.word	0xf1ffffff

0800883c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800883c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008848:	2b00      	cmp	r3, #0
 800884a:	d108      	bne.n	800885e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	226a      	movs	r2, #106	@ 0x6a
 8008850:	2101      	movs	r1, #1
 8008852:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2268      	movs	r2, #104	@ 0x68
 8008858:	2101      	movs	r1, #1
 800885a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800885c:	e043      	b.n	80088e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800885e:	260f      	movs	r6, #15
 8008860:	19bb      	adds	r3, r7, r6
 8008862:	2208      	movs	r2, #8
 8008864:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008866:	200e      	movs	r0, #14
 8008868:	183b      	adds	r3, r7, r0
 800886a:	2208      	movs	r2, #8
 800886c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	0e5b      	lsrs	r3, r3, #25
 8008876:	b2da      	uxtb	r2, r3
 8008878:	240d      	movs	r4, #13
 800887a:	193b      	adds	r3, r7, r4
 800887c:	2107      	movs	r1, #7
 800887e:	400a      	ands	r2, r1
 8008880:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	0f5b      	lsrs	r3, r3, #29
 800888a:	b2da      	uxtb	r2, r3
 800888c:	250c      	movs	r5, #12
 800888e:	197b      	adds	r3, r7, r5
 8008890:	2107      	movs	r1, #7
 8008892:	400a      	ands	r2, r1
 8008894:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008896:	183b      	adds	r3, r7, r0
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	197a      	adds	r2, r7, r5
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	4914      	ldr	r1, [pc, #80]	@ (80088f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80088a0:	5c8a      	ldrb	r2, [r1, r2]
 80088a2:	435a      	muls	r2, r3
 80088a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80088a6:	197b      	adds	r3, r7, r5
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	4a12      	ldr	r2, [pc, #72]	@ (80088f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80088ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ae:	0019      	movs	r1, r3
 80088b0:	f7f7 fcc4 	bl	800023c <__divsi3>
 80088b4:	0003      	movs	r3, r0
 80088b6:	b299      	uxth	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	226a      	movs	r2, #106	@ 0x6a
 80088bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088be:	19bb      	adds	r3, r7, r6
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	193a      	adds	r2, r7, r4
 80088c4:	7812      	ldrb	r2, [r2, #0]
 80088c6:	490a      	ldr	r1, [pc, #40]	@ (80088f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80088c8:	5c8a      	ldrb	r2, [r1, r2]
 80088ca:	435a      	muls	r2, r3
 80088cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80088ce:	193b      	adds	r3, r7, r4
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4a08      	ldr	r2, [pc, #32]	@ (80088f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80088d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088d6:	0019      	movs	r1, r3
 80088d8:	f7f7 fcb0 	bl	800023c <__divsi3>
 80088dc:	0003      	movs	r3, r0
 80088de:	b299      	uxth	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2268      	movs	r2, #104	@ 0x68
 80088e4:	5299      	strh	r1, [r3, r2]
}
 80088e6:	46c0      	nop			@ (mov r8, r8)
 80088e8:	46bd      	mov	sp, r7
 80088ea:	b005      	add	sp, #20
 80088ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	0800952c 	.word	0x0800952c
 80088f4:	08009534 	.word	0x08009534

080088f8 <atoi>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	220a      	movs	r2, #10
 80088fc:	2100      	movs	r1, #0
 80088fe:	f000 f88b 	bl	8008a18 <strtol>
 8008902:	bd10      	pop	{r4, pc}

08008904 <_strtol_l.isra.0>:
 8008904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008906:	b085      	sub	sp, #20
 8008908:	0017      	movs	r7, r2
 800890a:	001e      	movs	r6, r3
 800890c:	9003      	str	r0, [sp, #12]
 800890e:	9101      	str	r1, [sp, #4]
 8008910:	2b24      	cmp	r3, #36	@ 0x24
 8008912:	d823      	bhi.n	800895c <_strtol_l.isra.0+0x58>
 8008914:	000c      	movs	r4, r1
 8008916:	2b01      	cmp	r3, #1
 8008918:	d020      	beq.n	800895c <_strtol_l.isra.0+0x58>
 800891a:	4b3d      	ldr	r3, [pc, #244]	@ (8008a10 <_strtol_l.isra.0+0x10c>)
 800891c:	2208      	movs	r2, #8
 800891e:	469c      	mov	ip, r3
 8008920:	0023      	movs	r3, r4
 8008922:	4661      	mov	r1, ip
 8008924:	781d      	ldrb	r5, [r3, #0]
 8008926:	3401      	adds	r4, #1
 8008928:	5d48      	ldrb	r0, [r1, r5]
 800892a:	0001      	movs	r1, r0
 800892c:	4011      	ands	r1, r2
 800892e:	4210      	tst	r0, r2
 8008930:	d1f6      	bne.n	8008920 <_strtol_l.isra.0+0x1c>
 8008932:	2d2d      	cmp	r5, #45	@ 0x2d
 8008934:	d119      	bne.n	800896a <_strtol_l.isra.0+0x66>
 8008936:	7825      	ldrb	r5, [r4, #0]
 8008938:	1c9c      	adds	r4, r3, #2
 800893a:	2301      	movs	r3, #1
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2210      	movs	r2, #16
 8008940:	0033      	movs	r3, r6
 8008942:	4393      	bics	r3, r2
 8008944:	d11d      	bne.n	8008982 <_strtol_l.isra.0+0x7e>
 8008946:	2d30      	cmp	r5, #48	@ 0x30
 8008948:	d115      	bne.n	8008976 <_strtol_l.isra.0+0x72>
 800894a:	2120      	movs	r1, #32
 800894c:	7823      	ldrb	r3, [r4, #0]
 800894e:	438b      	bics	r3, r1
 8008950:	2b58      	cmp	r3, #88	@ 0x58
 8008952:	d110      	bne.n	8008976 <_strtol_l.isra.0+0x72>
 8008954:	7865      	ldrb	r5, [r4, #1]
 8008956:	3402      	adds	r4, #2
 8008958:	2610      	movs	r6, #16
 800895a:	e012      	b.n	8008982 <_strtol_l.isra.0+0x7e>
 800895c:	f000 f8a6 	bl	8008aac <__errno>
 8008960:	2316      	movs	r3, #22
 8008962:	6003      	str	r3, [r0, #0]
 8008964:	2000      	movs	r0, #0
 8008966:	b005      	add	sp, #20
 8008968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896a:	9100      	str	r1, [sp, #0]
 800896c:	2d2b      	cmp	r5, #43	@ 0x2b
 800896e:	d1e6      	bne.n	800893e <_strtol_l.isra.0+0x3a>
 8008970:	7825      	ldrb	r5, [r4, #0]
 8008972:	1c9c      	adds	r4, r3, #2
 8008974:	e7e3      	b.n	800893e <_strtol_l.isra.0+0x3a>
 8008976:	2e00      	cmp	r6, #0
 8008978:	d1ee      	bne.n	8008958 <_strtol_l.isra.0+0x54>
 800897a:	360a      	adds	r6, #10
 800897c:	2d30      	cmp	r5, #48	@ 0x30
 800897e:	d100      	bne.n	8008982 <_strtol_l.isra.0+0x7e>
 8008980:	3e02      	subs	r6, #2
 8008982:	4a24      	ldr	r2, [pc, #144]	@ (8008a14 <_strtol_l.isra.0+0x110>)
 8008984:	9b00      	ldr	r3, [sp, #0]
 8008986:	4694      	mov	ip, r2
 8008988:	4463      	add	r3, ip
 800898a:	0031      	movs	r1, r6
 800898c:	0018      	movs	r0, r3
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	f7f7 fc50 	bl	8000234 <__aeabi_uidivmod>
 8008994:	2200      	movs	r2, #0
 8008996:	4684      	mov	ip, r0
 8008998:	0010      	movs	r0, r2
 800899a:	002b      	movs	r3, r5
 800899c:	3b30      	subs	r3, #48	@ 0x30
 800899e:	2b09      	cmp	r3, #9
 80089a0:	d811      	bhi.n	80089c6 <_strtol_l.isra.0+0xc2>
 80089a2:	001d      	movs	r5, r3
 80089a4:	42ae      	cmp	r6, r5
 80089a6:	dd1d      	ble.n	80089e4 <_strtol_l.isra.0+0xe0>
 80089a8:	1c53      	adds	r3, r2, #1
 80089aa:	d009      	beq.n	80089c0 <_strtol_l.isra.0+0xbc>
 80089ac:	2201      	movs	r2, #1
 80089ae:	4252      	negs	r2, r2
 80089b0:	4584      	cmp	ip, r0
 80089b2:	d305      	bcc.n	80089c0 <_strtol_l.isra.0+0xbc>
 80089b4:	d101      	bne.n	80089ba <_strtol_l.isra.0+0xb6>
 80089b6:	42a9      	cmp	r1, r5
 80089b8:	db11      	blt.n	80089de <_strtol_l.isra.0+0xda>
 80089ba:	2201      	movs	r2, #1
 80089bc:	4370      	muls	r0, r6
 80089be:	1828      	adds	r0, r5, r0
 80089c0:	7825      	ldrb	r5, [r4, #0]
 80089c2:	3401      	adds	r4, #1
 80089c4:	e7e9      	b.n	800899a <_strtol_l.isra.0+0x96>
 80089c6:	002b      	movs	r3, r5
 80089c8:	3b41      	subs	r3, #65	@ 0x41
 80089ca:	2b19      	cmp	r3, #25
 80089cc:	d801      	bhi.n	80089d2 <_strtol_l.isra.0+0xce>
 80089ce:	3d37      	subs	r5, #55	@ 0x37
 80089d0:	e7e8      	b.n	80089a4 <_strtol_l.isra.0+0xa0>
 80089d2:	002b      	movs	r3, r5
 80089d4:	3b61      	subs	r3, #97	@ 0x61
 80089d6:	2b19      	cmp	r3, #25
 80089d8:	d804      	bhi.n	80089e4 <_strtol_l.isra.0+0xe0>
 80089da:	3d57      	subs	r5, #87	@ 0x57
 80089dc:	e7e2      	b.n	80089a4 <_strtol_l.isra.0+0xa0>
 80089de:	2201      	movs	r2, #1
 80089e0:	4252      	negs	r2, r2
 80089e2:	e7ed      	b.n	80089c0 <_strtol_l.isra.0+0xbc>
 80089e4:	1c53      	adds	r3, r2, #1
 80089e6:	d108      	bne.n	80089fa <_strtol_l.isra.0+0xf6>
 80089e8:	2322      	movs	r3, #34	@ 0x22
 80089ea:	9a03      	ldr	r2, [sp, #12]
 80089ec:	9802      	ldr	r0, [sp, #8]
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	2f00      	cmp	r7, #0
 80089f2:	d0b8      	beq.n	8008966 <_strtol_l.isra.0+0x62>
 80089f4:	1e63      	subs	r3, r4, #1
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	e007      	b.n	8008a0a <_strtol_l.isra.0+0x106>
 80089fa:	9b00      	ldr	r3, [sp, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d000      	beq.n	8008a02 <_strtol_l.isra.0+0xfe>
 8008a00:	4240      	negs	r0, r0
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	d0af      	beq.n	8008966 <_strtol_l.isra.0+0x62>
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	d1f4      	bne.n	80089f4 <_strtol_l.isra.0+0xf0>
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	e7aa      	b.n	8008966 <_strtol_l.isra.0+0x62>
 8008a10:	0800953d 	.word	0x0800953d
 8008a14:	7fffffff 	.word	0x7fffffff

08008a18 <strtol>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	4c04      	ldr	r4, [pc, #16]	@ (8008a2c <strtol+0x14>)
 8008a1c:	0013      	movs	r3, r2
 8008a1e:	000a      	movs	r2, r1
 8008a20:	0001      	movs	r1, r0
 8008a22:	6820      	ldr	r0, [r4, #0]
 8008a24:	f7ff ff6e 	bl	8008904 <_strtol_l.isra.0>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	46c0      	nop			@ (mov r8, r8)
 8008a2c:	20000054 	.word	0x20000054

08008a30 <sniprintf>:
 8008a30:	b40c      	push	{r2, r3}
 8008a32:	b530      	push	{r4, r5, lr}
 8008a34:	4b18      	ldr	r3, [pc, #96]	@ (8008a98 <sniprintf+0x68>)
 8008a36:	000c      	movs	r4, r1
 8008a38:	681d      	ldr	r5, [r3, #0]
 8008a3a:	b09d      	sub	sp, #116	@ 0x74
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	da08      	bge.n	8008a52 <sniprintf+0x22>
 8008a40:	238b      	movs	r3, #139	@ 0x8b
 8008a42:	2001      	movs	r0, #1
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	4240      	negs	r0, r0
 8008a48:	b01d      	add	sp, #116	@ 0x74
 8008a4a:	bc30      	pop	{r4, r5}
 8008a4c:	bc08      	pop	{r3}
 8008a4e:	b002      	add	sp, #8
 8008a50:	4718      	bx	r3
 8008a52:	2382      	movs	r3, #130	@ 0x82
 8008a54:	466a      	mov	r2, sp
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	8293      	strh	r3, [r2, #20]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9002      	str	r0, [sp, #8]
 8008a5e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008a60:	9006      	str	r0, [sp, #24]
 8008a62:	4299      	cmp	r1, r3
 8008a64:	d000      	beq.n	8008a68 <sniprintf+0x38>
 8008a66:	1e4b      	subs	r3, r1, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	9307      	str	r3, [sp, #28]
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	466a      	mov	r2, sp
 8008a70:	425b      	negs	r3, r3
 8008a72:	82d3      	strh	r3, [r2, #22]
 8008a74:	0028      	movs	r0, r5
 8008a76:	ab21      	add	r3, sp, #132	@ 0x84
 8008a78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008a7a:	a902      	add	r1, sp, #8
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	f000 f9a5 	bl	8008dcc <_svfiprintf_r>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	da01      	bge.n	8008a8a <sniprintf+0x5a>
 8008a86:	238b      	movs	r3, #139	@ 0x8b
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d0dc      	beq.n	8008a48 <sniprintf+0x18>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e7d8      	b.n	8008a48 <sniprintf+0x18>
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	20000054 	.word	0x20000054

08008a9c <memset>:
 8008a9c:	0003      	movs	r3, r0
 8008a9e:	1882      	adds	r2, r0, r2
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d100      	bne.n	8008aa6 <memset+0xa>
 8008aa4:	4770      	bx	lr
 8008aa6:	7019      	strb	r1, [r3, #0]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	e7f9      	b.n	8008aa0 <memset+0x4>

08008aac <__errno>:
 8008aac:	4b01      	ldr	r3, [pc, #4]	@ (8008ab4 <__errno+0x8>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	46c0      	nop			@ (mov r8, r8)
 8008ab4:	20000054 	.word	0x20000054

08008ab8 <__libc_init_array>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	2600      	movs	r6, #0
 8008abc:	4c0c      	ldr	r4, [pc, #48]	@ (8008af0 <__libc_init_array+0x38>)
 8008abe:	4d0d      	ldr	r5, [pc, #52]	@ (8008af4 <__libc_init_array+0x3c>)
 8008ac0:	1b64      	subs	r4, r4, r5
 8008ac2:	10a4      	asrs	r4, r4, #2
 8008ac4:	42a6      	cmp	r6, r4
 8008ac6:	d109      	bne.n	8008adc <__libc_init_array+0x24>
 8008ac8:	2600      	movs	r6, #0
 8008aca:	f000 fc69 	bl	80093a0 <_init>
 8008ace:	4c0a      	ldr	r4, [pc, #40]	@ (8008af8 <__libc_init_array+0x40>)
 8008ad0:	4d0a      	ldr	r5, [pc, #40]	@ (8008afc <__libc_init_array+0x44>)
 8008ad2:	1b64      	subs	r4, r4, r5
 8008ad4:	10a4      	asrs	r4, r4, #2
 8008ad6:	42a6      	cmp	r6, r4
 8008ad8:	d105      	bne.n	8008ae6 <__libc_init_array+0x2e>
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	00b3      	lsls	r3, r6, #2
 8008ade:	58eb      	ldr	r3, [r5, r3]
 8008ae0:	4798      	blx	r3
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	e7ee      	b.n	8008ac4 <__libc_init_array+0xc>
 8008ae6:	00b3      	lsls	r3, r6, #2
 8008ae8:	58eb      	ldr	r3, [r5, r3]
 8008aea:	4798      	blx	r3
 8008aec:	3601      	adds	r6, #1
 8008aee:	e7f2      	b.n	8008ad6 <__libc_init_array+0x1e>
 8008af0:	08009678 	.word	0x08009678
 8008af4:	08009678 	.word	0x08009678
 8008af8:	0800967c 	.word	0x0800967c
 8008afc:	08009678 	.word	0x08009678

08008b00 <__retarget_lock_acquire_recursive>:
 8008b00:	4770      	bx	lr

08008b02 <__retarget_lock_release_recursive>:
 8008b02:	4770      	bx	lr

08008b04 <strcpy>:
 8008b04:	0003      	movs	r3, r0
 8008b06:	780a      	ldrb	r2, [r1, #0]
 8008b08:	3101      	adds	r1, #1
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d1f9      	bne.n	8008b06 <strcpy+0x2>
 8008b12:	4770      	bx	lr

08008b14 <_free_r>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	0005      	movs	r5, r0
 8008b18:	1e0c      	subs	r4, r1, #0
 8008b1a:	d010      	beq.n	8008b3e <_free_r+0x2a>
 8008b1c:	3c04      	subs	r4, #4
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	da00      	bge.n	8008b26 <_free_r+0x12>
 8008b24:	18e4      	adds	r4, r4, r3
 8008b26:	0028      	movs	r0, r5
 8008b28:	f000 f8e0 	bl	8008cec <__malloc_lock>
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba4 <_free_r+0x90>)
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <_free_r+0x2c>
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	6014      	str	r4, [r2, #0]
 8008b38:	0028      	movs	r0, r5
 8008b3a:	f000 f8df 	bl	8008cfc <__malloc_unlock>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d908      	bls.n	8008b56 <_free_r+0x42>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	1821      	adds	r1, r4, r0
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	d1f3      	bne.n	8008b34 <_free_r+0x20>
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	1809      	adds	r1, r1, r0
 8008b52:	6021      	str	r1, [r4, #0]
 8008b54:	e7ee      	b.n	8008b34 <_free_r+0x20>
 8008b56:	001a      	movs	r2, r3
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <_free_r+0x4e>
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	d9f9      	bls.n	8008b56 <_free_r+0x42>
 8008b62:	6811      	ldr	r1, [r2, #0]
 8008b64:	1850      	adds	r0, r2, r1
 8008b66:	42a0      	cmp	r0, r4
 8008b68:	d10b      	bne.n	8008b82 <_free_r+0x6e>
 8008b6a:	6820      	ldr	r0, [r4, #0]
 8008b6c:	1809      	adds	r1, r1, r0
 8008b6e:	1850      	adds	r0, r2, r1
 8008b70:	6011      	str	r1, [r2, #0]
 8008b72:	4283      	cmp	r3, r0
 8008b74:	d1e0      	bne.n	8008b38 <_free_r+0x24>
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	1841      	adds	r1, r0, r1
 8008b7c:	6011      	str	r1, [r2, #0]
 8008b7e:	6053      	str	r3, [r2, #4]
 8008b80:	e7da      	b.n	8008b38 <_free_r+0x24>
 8008b82:	42a0      	cmp	r0, r4
 8008b84:	d902      	bls.n	8008b8c <_free_r+0x78>
 8008b86:	230c      	movs	r3, #12
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	e7d5      	b.n	8008b38 <_free_r+0x24>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	d103      	bne.n	8008b9c <_free_r+0x88>
 8008b94:	6819      	ldr	r1, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	1809      	adds	r1, r1, r0
 8008b9a:	6021      	str	r1, [r4, #0]
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6054      	str	r4, [r2, #4]
 8008ba0:	e7ca      	b.n	8008b38 <_free_r+0x24>
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	200005ac 	.word	0x200005ac

08008ba8 <sbrk_aligned>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4e0f      	ldr	r6, [pc, #60]	@ (8008be8 <sbrk_aligned+0x40>)
 8008bac:	000d      	movs	r5, r1
 8008bae:	6831      	ldr	r1, [r6, #0]
 8008bb0:	0004      	movs	r4, r0
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d102      	bne.n	8008bbc <sbrk_aligned+0x14>
 8008bb6:	f000 fb95 	bl	80092e4 <_sbrk_r>
 8008bba:	6030      	str	r0, [r6, #0]
 8008bbc:	0029      	movs	r1, r5
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	f000 fb90 	bl	80092e4 <_sbrk_r>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d103      	bne.n	8008bd0 <sbrk_aligned+0x28>
 8008bc8:	2501      	movs	r5, #1
 8008bca:	426d      	negs	r5, r5
 8008bcc:	0028      	movs	r0, r5
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	1cc5      	adds	r5, r0, #3
 8008bd4:	439d      	bics	r5, r3
 8008bd6:	42a8      	cmp	r0, r5
 8008bd8:	d0f8      	beq.n	8008bcc <sbrk_aligned+0x24>
 8008bda:	1a29      	subs	r1, r5, r0
 8008bdc:	0020      	movs	r0, r4
 8008bde:	f000 fb81 	bl	80092e4 <_sbrk_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	d1f2      	bne.n	8008bcc <sbrk_aligned+0x24>
 8008be6:	e7ef      	b.n	8008bc8 <sbrk_aligned+0x20>
 8008be8:	200005a8 	.word	0x200005a8

08008bec <_malloc_r>:
 8008bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bee:	2203      	movs	r2, #3
 8008bf0:	1ccb      	adds	r3, r1, #3
 8008bf2:	4393      	bics	r3, r2
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	0005      	movs	r5, r0
 8008bf8:	001f      	movs	r7, r3
 8008bfa:	2b0c      	cmp	r3, #12
 8008bfc:	d234      	bcs.n	8008c68 <_malloc_r+0x7c>
 8008bfe:	270c      	movs	r7, #12
 8008c00:	42b9      	cmp	r1, r7
 8008c02:	d833      	bhi.n	8008c6c <_malloc_r+0x80>
 8008c04:	0028      	movs	r0, r5
 8008c06:	f000 f871 	bl	8008cec <__malloc_lock>
 8008c0a:	4e37      	ldr	r6, [pc, #220]	@ (8008ce8 <_malloc_r+0xfc>)
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	001c      	movs	r4, r3
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	d12f      	bne.n	8008c74 <_malloc_r+0x88>
 8008c14:	0039      	movs	r1, r7
 8008c16:	0028      	movs	r0, r5
 8008c18:	f7ff ffc6 	bl	8008ba8 <sbrk_aligned>
 8008c1c:	0004      	movs	r4, r0
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d15f      	bne.n	8008ce2 <_malloc_r+0xf6>
 8008c22:	6834      	ldr	r4, [r6, #0]
 8008c24:	9400      	str	r4, [sp, #0]
 8008c26:	9b00      	ldr	r3, [sp, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d14a      	bne.n	8008cc2 <_malloc_r+0xd6>
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d052      	beq.n	8008cd6 <_malloc_r+0xea>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	0028      	movs	r0, r5
 8008c34:	18e3      	adds	r3, r4, r3
 8008c36:	9900      	ldr	r1, [sp, #0]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	f000 fb53 	bl	80092e4 <_sbrk_r>
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	4283      	cmp	r3, r0
 8008c42:	d148      	bne.n	8008cd6 <_malloc_r+0xea>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	0028      	movs	r0, r5
 8008c48:	1aff      	subs	r7, r7, r3
 8008c4a:	0039      	movs	r1, r7
 8008c4c:	f7ff ffac 	bl	8008ba8 <sbrk_aligned>
 8008c50:	3001      	adds	r0, #1
 8008c52:	d040      	beq.n	8008cd6 <_malloc_r+0xea>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	19db      	adds	r3, r3, r7
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	6833      	ldr	r3, [r6, #0]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	d133      	bne.n	8008cca <_malloc_r+0xde>
 8008c62:	9b00      	ldr	r3, [sp, #0]
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	e019      	b.n	8008c9c <_malloc_r+0xb0>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dac9      	bge.n	8008c00 <_malloc_r+0x14>
 8008c6c:	230c      	movs	r3, #12
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	2000      	movs	r0, #0
 8008c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c74:	6821      	ldr	r1, [r4, #0]
 8008c76:	1bc9      	subs	r1, r1, r7
 8008c78:	d420      	bmi.n	8008cbc <_malloc_r+0xd0>
 8008c7a:	290b      	cmp	r1, #11
 8008c7c:	d90a      	bls.n	8008c94 <_malloc_r+0xa8>
 8008c7e:	19e2      	adds	r2, r4, r7
 8008c80:	6027      	str	r7, [r4, #0]
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	d104      	bne.n	8008c90 <_malloc_r+0xa4>
 8008c86:	6032      	str	r2, [r6, #0]
 8008c88:	6863      	ldr	r3, [r4, #4]
 8008c8a:	6011      	str	r1, [r2, #0]
 8008c8c:	6053      	str	r3, [r2, #4]
 8008c8e:	e005      	b.n	8008c9c <_malloc_r+0xb0>
 8008c90:	605a      	str	r2, [r3, #4]
 8008c92:	e7f9      	b.n	8008c88 <_malloc_r+0x9c>
 8008c94:	6862      	ldr	r2, [r4, #4]
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	d10e      	bne.n	8008cb8 <_malloc_r+0xcc>
 8008c9a:	6032      	str	r2, [r6, #0]
 8008c9c:	0028      	movs	r0, r5
 8008c9e:	f000 f82d 	bl	8008cfc <__malloc_unlock>
 8008ca2:	0020      	movs	r0, r4
 8008ca4:	2207      	movs	r2, #7
 8008ca6:	300b      	adds	r0, #11
 8008ca8:	1d23      	adds	r3, r4, #4
 8008caa:	4390      	bics	r0, r2
 8008cac:	1ac2      	subs	r2, r0, r3
 8008cae:	4298      	cmp	r0, r3
 8008cb0:	d0df      	beq.n	8008c72 <_malloc_r+0x86>
 8008cb2:	1a1b      	subs	r3, r3, r0
 8008cb4:	50a3      	str	r3, [r4, r2]
 8008cb6:	e7dc      	b.n	8008c72 <_malloc_r+0x86>
 8008cb8:	605a      	str	r2, [r3, #4]
 8008cba:	e7ef      	b.n	8008c9c <_malloc_r+0xb0>
 8008cbc:	0023      	movs	r3, r4
 8008cbe:	6864      	ldr	r4, [r4, #4]
 8008cc0:	e7a6      	b.n	8008c10 <_malloc_r+0x24>
 8008cc2:	9c00      	ldr	r4, [sp, #0]
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	e7ad      	b.n	8008c26 <_malloc_r+0x3a>
 8008cca:	001a      	movs	r2, r3
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	d1fb      	bne.n	8008cca <_malloc_r+0xde>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e7da      	b.n	8008c8c <_malloc_r+0xa0>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	0028      	movs	r0, r5
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	f000 f80e 	bl	8008cfc <__malloc_unlock>
 8008ce0:	e7c6      	b.n	8008c70 <_malloc_r+0x84>
 8008ce2:	6007      	str	r7, [r0, #0]
 8008ce4:	e7da      	b.n	8008c9c <_malloc_r+0xb0>
 8008ce6:	46c0      	nop			@ (mov r8, r8)
 8008ce8:	200005ac 	.word	0x200005ac

08008cec <__malloc_lock>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	4802      	ldr	r0, [pc, #8]	@ (8008cf8 <__malloc_lock+0xc>)
 8008cf0:	f7ff ff06 	bl	8008b00 <__retarget_lock_acquire_recursive>
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	46c0      	nop			@ (mov r8, r8)
 8008cf8:	200005a4 	.word	0x200005a4

08008cfc <__malloc_unlock>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	4802      	ldr	r0, [pc, #8]	@ (8008d08 <__malloc_unlock+0xc>)
 8008d00:	f7ff feff 	bl	8008b02 <__retarget_lock_release_recursive>
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	46c0      	nop			@ (mov r8, r8)
 8008d08:	200005a4 	.word	0x200005a4

08008d0c <__ssputs_r>:
 8008d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0e:	688e      	ldr	r6, [r1, #8]
 8008d10:	b085      	sub	sp, #20
 8008d12:	001f      	movs	r7, r3
 8008d14:	000c      	movs	r4, r1
 8008d16:	680b      	ldr	r3, [r1, #0]
 8008d18:	9002      	str	r0, [sp, #8]
 8008d1a:	9203      	str	r2, [sp, #12]
 8008d1c:	42be      	cmp	r6, r7
 8008d1e:	d830      	bhi.n	8008d82 <__ssputs_r+0x76>
 8008d20:	210c      	movs	r1, #12
 8008d22:	5e62      	ldrsh	r2, [r4, r1]
 8008d24:	2190      	movs	r1, #144	@ 0x90
 8008d26:	00c9      	lsls	r1, r1, #3
 8008d28:	420a      	tst	r2, r1
 8008d2a:	d028      	beq.n	8008d7e <__ssputs_r+0x72>
 8008d2c:	2003      	movs	r0, #3
 8008d2e:	6921      	ldr	r1, [r4, #16]
 8008d30:	1a5b      	subs	r3, r3, r1
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	6963      	ldr	r3, [r4, #20]
 8008d36:	4343      	muls	r3, r0
 8008d38:	9801      	ldr	r0, [sp, #4]
 8008d3a:	0fdd      	lsrs	r5, r3, #31
 8008d3c:	18ed      	adds	r5, r5, r3
 8008d3e:	1c7b      	adds	r3, r7, #1
 8008d40:	181b      	adds	r3, r3, r0
 8008d42:	106d      	asrs	r5, r5, #1
 8008d44:	42ab      	cmp	r3, r5
 8008d46:	d900      	bls.n	8008d4a <__ssputs_r+0x3e>
 8008d48:	001d      	movs	r5, r3
 8008d4a:	0552      	lsls	r2, r2, #21
 8008d4c:	d528      	bpl.n	8008da0 <__ssputs_r+0x94>
 8008d4e:	0029      	movs	r1, r5
 8008d50:	9802      	ldr	r0, [sp, #8]
 8008d52:	f7ff ff4b 	bl	8008bec <_malloc_r>
 8008d56:	1e06      	subs	r6, r0, #0
 8008d58:	d02c      	beq.n	8008db4 <__ssputs_r+0xa8>
 8008d5a:	9a01      	ldr	r2, [sp, #4]
 8008d5c:	6921      	ldr	r1, [r4, #16]
 8008d5e:	f000 fade 	bl	800931e <memcpy>
 8008d62:	89a2      	ldrh	r2, [r4, #12]
 8008d64:	4b18      	ldr	r3, [pc, #96]	@ (8008dc8 <__ssputs_r+0xbc>)
 8008d66:	401a      	ands	r2, r3
 8008d68:	2380      	movs	r3, #128	@ 0x80
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	9b01      	ldr	r3, [sp, #4]
 8008d70:	6126      	str	r6, [r4, #16]
 8008d72:	18f6      	adds	r6, r6, r3
 8008d74:	6026      	str	r6, [r4, #0]
 8008d76:	003e      	movs	r6, r7
 8008d78:	6165      	str	r5, [r4, #20]
 8008d7a:	1aed      	subs	r5, r5, r3
 8008d7c:	60a5      	str	r5, [r4, #8]
 8008d7e:	42be      	cmp	r6, r7
 8008d80:	d900      	bls.n	8008d84 <__ssputs_r+0x78>
 8008d82:	003e      	movs	r6, r7
 8008d84:	0032      	movs	r2, r6
 8008d86:	9903      	ldr	r1, [sp, #12]
 8008d88:	6820      	ldr	r0, [r4, #0]
 8008d8a:	f000 fa99 	bl	80092c0 <memmove>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	68a3      	ldr	r3, [r4, #8]
 8008d92:	1b9b      	subs	r3, r3, r6
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	199b      	adds	r3, r3, r6
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	b005      	add	sp, #20
 8008d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da0:	002a      	movs	r2, r5
 8008da2:	9802      	ldr	r0, [sp, #8]
 8008da4:	f000 fac4 	bl	8009330 <_realloc_r>
 8008da8:	1e06      	subs	r6, r0, #0
 8008daa:	d1e0      	bne.n	8008d6e <__ssputs_r+0x62>
 8008dac:	6921      	ldr	r1, [r4, #16]
 8008dae:	9802      	ldr	r0, [sp, #8]
 8008db0:	f7ff feb0 	bl	8008b14 <_free_r>
 8008db4:	230c      	movs	r3, #12
 8008db6:	2001      	movs	r0, #1
 8008db8:	9a02      	ldr	r2, [sp, #8]
 8008dba:	4240      	negs	r0, r0
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	89a2      	ldrh	r2, [r4, #12]
 8008dc0:	3334      	adds	r3, #52	@ 0x34
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7e9      	b.n	8008d9c <__ssputs_r+0x90>
 8008dc8:	fffffb7f 	.word	0xfffffb7f

08008dcc <_svfiprintf_r>:
 8008dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dce:	b0a1      	sub	sp, #132	@ 0x84
 8008dd0:	9003      	str	r0, [sp, #12]
 8008dd2:	001d      	movs	r5, r3
 8008dd4:	898b      	ldrh	r3, [r1, #12]
 8008dd6:	000f      	movs	r7, r1
 8008dd8:	0016      	movs	r6, r2
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	d511      	bpl.n	8008e02 <_svfiprintf_r+0x36>
 8008dde:	690b      	ldr	r3, [r1, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10e      	bne.n	8008e02 <_svfiprintf_r+0x36>
 8008de4:	2140      	movs	r1, #64	@ 0x40
 8008de6:	f7ff ff01 	bl	8008bec <_malloc_r>
 8008dea:	6038      	str	r0, [r7, #0]
 8008dec:	6138      	str	r0, [r7, #16]
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d105      	bne.n	8008dfe <_svfiprintf_r+0x32>
 8008df2:	230c      	movs	r3, #12
 8008df4:	9a03      	ldr	r2, [sp, #12]
 8008df6:	6013      	str	r3, [r2, #0]
 8008df8:	2001      	movs	r0, #1
 8008dfa:	4240      	negs	r0, r0
 8008dfc:	e0cf      	b.n	8008f9e <_svfiprintf_r+0x1d2>
 8008dfe:	2340      	movs	r3, #64	@ 0x40
 8008e00:	617b      	str	r3, [r7, #20]
 8008e02:	2300      	movs	r3, #0
 8008e04:	ac08      	add	r4, sp, #32
 8008e06:	6163      	str	r3, [r4, #20]
 8008e08:	3320      	adds	r3, #32
 8008e0a:	7663      	strb	r3, [r4, #25]
 8008e0c:	3310      	adds	r3, #16
 8008e0e:	76a3      	strb	r3, [r4, #26]
 8008e10:	9507      	str	r5, [sp, #28]
 8008e12:	0035      	movs	r5, r6
 8008e14:	782b      	ldrb	r3, [r5, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <_svfiprintf_r+0x52>
 8008e1a:	2b25      	cmp	r3, #37	@ 0x25
 8008e1c:	d148      	bne.n	8008eb0 <_svfiprintf_r+0xe4>
 8008e1e:	1bab      	subs	r3, r5, r6
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	42b5      	cmp	r5, r6
 8008e24:	d00b      	beq.n	8008e3e <_svfiprintf_r+0x72>
 8008e26:	0032      	movs	r2, r6
 8008e28:	0039      	movs	r1, r7
 8008e2a:	9803      	ldr	r0, [sp, #12]
 8008e2c:	f7ff ff6e 	bl	8008d0c <__ssputs_r>
 8008e30:	3001      	adds	r0, #1
 8008e32:	d100      	bne.n	8008e36 <_svfiprintf_r+0x6a>
 8008e34:	e0ae      	b.n	8008f94 <_svfiprintf_r+0x1c8>
 8008e36:	6963      	ldr	r3, [r4, #20]
 8008e38:	9a05      	ldr	r2, [sp, #20]
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	6163      	str	r3, [r4, #20]
 8008e3e:	782b      	ldrb	r3, [r5, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d100      	bne.n	8008e46 <_svfiprintf_r+0x7a>
 8008e44:	e0a6      	b.n	8008f94 <_svfiprintf_r+0x1c8>
 8008e46:	2201      	movs	r2, #1
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4252      	negs	r2, r2
 8008e4c:	6062      	str	r2, [r4, #4]
 8008e4e:	a904      	add	r1, sp, #16
 8008e50:	3254      	adds	r2, #84	@ 0x54
 8008e52:	1852      	adds	r2, r2, r1
 8008e54:	1c6e      	adds	r6, r5, #1
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	60e3      	str	r3, [r4, #12]
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	7013      	strb	r3, [r2, #0]
 8008e5e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008e60:	4b54      	ldr	r3, [pc, #336]	@ (8008fb4 <_svfiprintf_r+0x1e8>)
 8008e62:	2205      	movs	r2, #5
 8008e64:	0018      	movs	r0, r3
 8008e66:	7831      	ldrb	r1, [r6, #0]
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	f000 fa4d 	bl	8009308 <memchr>
 8008e6e:	1c75      	adds	r5, r6, #1
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d11f      	bne.n	8008eb4 <_svfiprintf_r+0xe8>
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	06d3      	lsls	r3, r2, #27
 8008e78:	d504      	bpl.n	8008e84 <_svfiprintf_r+0xb8>
 8008e7a:	2353      	movs	r3, #83	@ 0x53
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	185b      	adds	r3, r3, r1
 8008e80:	2120      	movs	r1, #32
 8008e82:	7019      	strb	r1, [r3, #0]
 8008e84:	0713      	lsls	r3, r2, #28
 8008e86:	d504      	bpl.n	8008e92 <_svfiprintf_r+0xc6>
 8008e88:	2353      	movs	r3, #83	@ 0x53
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	185b      	adds	r3, r3, r1
 8008e8e:	212b      	movs	r1, #43	@ 0x2b
 8008e90:	7019      	strb	r1, [r3, #0]
 8008e92:	7833      	ldrb	r3, [r6, #0]
 8008e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e96:	d016      	beq.n	8008ec6 <_svfiprintf_r+0xfa>
 8008e98:	0035      	movs	r5, r6
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	200a      	movs	r0, #10
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	782a      	ldrb	r2, [r5, #0]
 8008ea2:	1c6e      	adds	r6, r5, #1
 8008ea4:	3a30      	subs	r2, #48	@ 0x30
 8008ea6:	2a09      	cmp	r2, #9
 8008ea8:	d950      	bls.n	8008f4c <_svfiprintf_r+0x180>
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	d111      	bne.n	8008ed2 <_svfiprintf_r+0x106>
 8008eae:	e017      	b.n	8008ee0 <_svfiprintf_r+0x114>
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	e7af      	b.n	8008e14 <_svfiprintf_r+0x48>
 8008eb4:	9b05      	ldr	r3, [sp, #20]
 8008eb6:	6822      	ldr	r2, [r4, #0]
 8008eb8:	1ac0      	subs	r0, r0, r3
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4083      	lsls	r3, r0
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	002e      	movs	r6, r5
 8008ec2:	6023      	str	r3, [r4, #0]
 8008ec4:	e7cc      	b.n	8008e60 <_svfiprintf_r+0x94>
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	1d19      	adds	r1, r3, #4
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	9107      	str	r1, [sp, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	db01      	blt.n	8008ed6 <_svfiprintf_r+0x10a>
 8008ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ed4:	e004      	b.n	8008ee0 <_svfiprintf_r+0x114>
 8008ed6:	425b      	negs	r3, r3
 8008ed8:	60e3      	str	r3, [r4, #12]
 8008eda:	2302      	movs	r3, #2
 8008edc:	4313      	orrs	r3, r2
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	782b      	ldrb	r3, [r5, #0]
 8008ee2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ee4:	d10c      	bne.n	8008f00 <_svfiprintf_r+0x134>
 8008ee6:	786b      	ldrb	r3, [r5, #1]
 8008ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eea:	d134      	bne.n	8008f56 <_svfiprintf_r+0x18a>
 8008eec:	9b07      	ldr	r3, [sp, #28]
 8008eee:	3502      	adds	r5, #2
 8008ef0:	1d1a      	adds	r2, r3, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	9207      	str	r2, [sp, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da01      	bge.n	8008efe <_svfiprintf_r+0x132>
 8008efa:	2301      	movs	r3, #1
 8008efc:	425b      	negs	r3, r3
 8008efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f00:	4e2d      	ldr	r6, [pc, #180]	@ (8008fb8 <_svfiprintf_r+0x1ec>)
 8008f02:	2203      	movs	r2, #3
 8008f04:	0030      	movs	r0, r6
 8008f06:	7829      	ldrb	r1, [r5, #0]
 8008f08:	f000 f9fe 	bl	8009308 <memchr>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d006      	beq.n	8008f1e <_svfiprintf_r+0x152>
 8008f10:	2340      	movs	r3, #64	@ 0x40
 8008f12:	1b80      	subs	r0, r0, r6
 8008f14:	4083      	lsls	r3, r0
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	3501      	adds	r5, #1
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	7829      	ldrb	r1, [r5, #0]
 8008f20:	2206      	movs	r2, #6
 8008f22:	4826      	ldr	r0, [pc, #152]	@ (8008fbc <_svfiprintf_r+0x1f0>)
 8008f24:	1c6e      	adds	r6, r5, #1
 8008f26:	7621      	strb	r1, [r4, #24]
 8008f28:	f000 f9ee 	bl	8009308 <memchr>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d038      	beq.n	8008fa2 <_svfiprintf_r+0x1d6>
 8008f30:	4b23      	ldr	r3, [pc, #140]	@ (8008fc0 <_svfiprintf_r+0x1f4>)
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d122      	bne.n	8008f7c <_svfiprintf_r+0x1b0>
 8008f36:	2207      	movs	r2, #7
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	3307      	adds	r3, #7
 8008f3c:	4393      	bics	r3, r2
 8008f3e:	3308      	adds	r3, #8
 8008f40:	9307      	str	r3, [sp, #28]
 8008f42:	6963      	ldr	r3, [r4, #20]
 8008f44:	9a04      	ldr	r2, [sp, #16]
 8008f46:	189b      	adds	r3, r3, r2
 8008f48:	6163      	str	r3, [r4, #20]
 8008f4a:	e762      	b.n	8008e12 <_svfiprintf_r+0x46>
 8008f4c:	4343      	muls	r3, r0
 8008f4e:	0035      	movs	r5, r6
 8008f50:	2101      	movs	r1, #1
 8008f52:	189b      	adds	r3, r3, r2
 8008f54:	e7a4      	b.n	8008ea0 <_svfiprintf_r+0xd4>
 8008f56:	2300      	movs	r3, #0
 8008f58:	200a      	movs	r0, #10
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	6063      	str	r3, [r4, #4]
 8008f60:	782a      	ldrb	r2, [r5, #0]
 8008f62:	1c6e      	adds	r6, r5, #1
 8008f64:	3a30      	subs	r2, #48	@ 0x30
 8008f66:	2a09      	cmp	r2, #9
 8008f68:	d903      	bls.n	8008f72 <_svfiprintf_r+0x1a6>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0c8      	beq.n	8008f00 <_svfiprintf_r+0x134>
 8008f6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f70:	e7c6      	b.n	8008f00 <_svfiprintf_r+0x134>
 8008f72:	4341      	muls	r1, r0
 8008f74:	0035      	movs	r5, r6
 8008f76:	2301      	movs	r3, #1
 8008f78:	1889      	adds	r1, r1, r2
 8008f7a:	e7f1      	b.n	8008f60 <_svfiprintf_r+0x194>
 8008f7c:	aa07      	add	r2, sp, #28
 8008f7e:	9200      	str	r2, [sp, #0]
 8008f80:	0021      	movs	r1, r4
 8008f82:	003a      	movs	r2, r7
 8008f84:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc4 <_svfiprintf_r+0x1f8>)
 8008f86:	9803      	ldr	r0, [sp, #12]
 8008f88:	e000      	b.n	8008f8c <_svfiprintf_r+0x1c0>
 8008f8a:	bf00      	nop
 8008f8c:	9004      	str	r0, [sp, #16]
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	d1d6      	bne.n	8008f42 <_svfiprintf_r+0x176>
 8008f94:	89bb      	ldrh	r3, [r7, #12]
 8008f96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008f98:	065b      	lsls	r3, r3, #25
 8008f9a:	d500      	bpl.n	8008f9e <_svfiprintf_r+0x1d2>
 8008f9c:	e72c      	b.n	8008df8 <_svfiprintf_r+0x2c>
 8008f9e:	b021      	add	sp, #132	@ 0x84
 8008fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa2:	aa07      	add	r2, sp, #28
 8008fa4:	9200      	str	r2, [sp, #0]
 8008fa6:	0021      	movs	r1, r4
 8008fa8:	003a      	movs	r2, r7
 8008faa:	4b06      	ldr	r3, [pc, #24]	@ (8008fc4 <_svfiprintf_r+0x1f8>)
 8008fac:	9803      	ldr	r0, [sp, #12]
 8008fae:	f000 f87b 	bl	80090a8 <_printf_i>
 8008fb2:	e7eb      	b.n	8008f8c <_svfiprintf_r+0x1c0>
 8008fb4:	0800963d 	.word	0x0800963d
 8008fb8:	08009643 	.word	0x08009643
 8008fbc:	08009647 	.word	0x08009647
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	08008d0d 	.word	0x08008d0d

08008fc8 <_printf_common>:
 8008fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fca:	0016      	movs	r6, r2
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	688a      	ldr	r2, [r1, #8]
 8008fd0:	690b      	ldr	r3, [r1, #16]
 8008fd2:	000c      	movs	r4, r1
 8008fd4:	9000      	str	r0, [sp, #0]
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	da00      	bge.n	8008fdc <_printf_common+0x14>
 8008fda:	0013      	movs	r3, r2
 8008fdc:	0022      	movs	r2, r4
 8008fde:	6033      	str	r3, [r6, #0]
 8008fe0:	3243      	adds	r2, #67	@ 0x43
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	2a00      	cmp	r2, #0
 8008fe6:	d001      	beq.n	8008fec <_printf_common+0x24>
 8008fe8:	3301      	adds	r3, #1
 8008fea:	6033      	str	r3, [r6, #0]
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	069b      	lsls	r3, r3, #26
 8008ff0:	d502      	bpl.n	8008ff8 <_printf_common+0x30>
 8008ff2:	6833      	ldr	r3, [r6, #0]
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	6033      	str	r3, [r6, #0]
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	2306      	movs	r3, #6
 8008ffc:	0015      	movs	r5, r2
 8008ffe:	401d      	ands	r5, r3
 8009000:	421a      	tst	r2, r3
 8009002:	d027      	beq.n	8009054 <_printf_common+0x8c>
 8009004:	0023      	movs	r3, r4
 8009006:	3343      	adds	r3, #67	@ 0x43
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	1e5a      	subs	r2, r3, #1
 800900c:	4193      	sbcs	r3, r2
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d430      	bmi.n	8009076 <_printf_common+0xae>
 8009014:	0022      	movs	r2, r4
 8009016:	9901      	ldr	r1, [sp, #4]
 8009018:	9800      	ldr	r0, [sp, #0]
 800901a:	9d08      	ldr	r5, [sp, #32]
 800901c:	3243      	adds	r2, #67	@ 0x43
 800901e:	47a8      	blx	r5
 8009020:	3001      	adds	r0, #1
 8009022:	d025      	beq.n	8009070 <_printf_common+0xa8>
 8009024:	2206      	movs	r2, #6
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	2500      	movs	r5, #0
 800902a:	4013      	ands	r3, r2
 800902c:	2b04      	cmp	r3, #4
 800902e:	d105      	bne.n	800903c <_printf_common+0x74>
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	68e5      	ldr	r5, [r4, #12]
 8009034:	1aed      	subs	r5, r5, r3
 8009036:	43eb      	mvns	r3, r5
 8009038:	17db      	asrs	r3, r3, #31
 800903a:	401d      	ands	r5, r3
 800903c:	68a3      	ldr	r3, [r4, #8]
 800903e:	6922      	ldr	r2, [r4, #16]
 8009040:	4293      	cmp	r3, r2
 8009042:	dd01      	ble.n	8009048 <_printf_common+0x80>
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	18ed      	adds	r5, r5, r3
 8009048:	2600      	movs	r6, #0
 800904a:	42b5      	cmp	r5, r6
 800904c:	d120      	bne.n	8009090 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e010      	b.n	8009074 <_printf_common+0xac>
 8009052:	3501      	adds	r5, #1
 8009054:	68e3      	ldr	r3, [r4, #12]
 8009056:	6832      	ldr	r2, [r6, #0]
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	42ab      	cmp	r3, r5
 800905c:	ddd2      	ble.n	8009004 <_printf_common+0x3c>
 800905e:	0022      	movs	r2, r4
 8009060:	2301      	movs	r3, #1
 8009062:	9901      	ldr	r1, [sp, #4]
 8009064:	9800      	ldr	r0, [sp, #0]
 8009066:	9f08      	ldr	r7, [sp, #32]
 8009068:	3219      	adds	r2, #25
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	d1f0      	bne.n	8009052 <_printf_common+0x8a>
 8009070:	2001      	movs	r0, #1
 8009072:	4240      	negs	r0, r0
 8009074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009076:	2030      	movs	r0, #48	@ 0x30
 8009078:	18e1      	adds	r1, r4, r3
 800907a:	3143      	adds	r1, #67	@ 0x43
 800907c:	7008      	strb	r0, [r1, #0]
 800907e:	0021      	movs	r1, r4
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	3145      	adds	r1, #69	@ 0x45
 8009084:	7809      	ldrb	r1, [r1, #0]
 8009086:	18a2      	adds	r2, r4, r2
 8009088:	3243      	adds	r2, #67	@ 0x43
 800908a:	3302      	adds	r3, #2
 800908c:	7011      	strb	r1, [r2, #0]
 800908e:	e7c1      	b.n	8009014 <_printf_common+0x4c>
 8009090:	0022      	movs	r2, r4
 8009092:	2301      	movs	r3, #1
 8009094:	9901      	ldr	r1, [sp, #4]
 8009096:	9800      	ldr	r0, [sp, #0]
 8009098:	9f08      	ldr	r7, [sp, #32]
 800909a:	321a      	adds	r2, #26
 800909c:	47b8      	blx	r7
 800909e:	3001      	adds	r0, #1
 80090a0:	d0e6      	beq.n	8009070 <_printf_common+0xa8>
 80090a2:	3601      	adds	r6, #1
 80090a4:	e7d1      	b.n	800904a <_printf_common+0x82>
	...

080090a8 <_printf_i>:
 80090a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090aa:	b08b      	sub	sp, #44	@ 0x2c
 80090ac:	9206      	str	r2, [sp, #24]
 80090ae:	000a      	movs	r2, r1
 80090b0:	3243      	adds	r2, #67	@ 0x43
 80090b2:	9307      	str	r3, [sp, #28]
 80090b4:	9005      	str	r0, [sp, #20]
 80090b6:	9203      	str	r2, [sp, #12]
 80090b8:	7e0a      	ldrb	r2, [r1, #24]
 80090ba:	000c      	movs	r4, r1
 80090bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090be:	2a78      	cmp	r2, #120	@ 0x78
 80090c0:	d809      	bhi.n	80090d6 <_printf_i+0x2e>
 80090c2:	2a62      	cmp	r2, #98	@ 0x62
 80090c4:	d80b      	bhi.n	80090de <_printf_i+0x36>
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	d100      	bne.n	80090cc <_printf_i+0x24>
 80090ca:	e0ba      	b.n	8009242 <_printf_i+0x19a>
 80090cc:	497a      	ldr	r1, [pc, #488]	@ (80092b8 <_printf_i+0x210>)
 80090ce:	9104      	str	r1, [sp, #16]
 80090d0:	2a58      	cmp	r2, #88	@ 0x58
 80090d2:	d100      	bne.n	80090d6 <_printf_i+0x2e>
 80090d4:	e08e      	b.n	80091f4 <_printf_i+0x14c>
 80090d6:	0025      	movs	r5, r4
 80090d8:	3542      	adds	r5, #66	@ 0x42
 80090da:	702a      	strb	r2, [r5, #0]
 80090dc:	e022      	b.n	8009124 <_printf_i+0x7c>
 80090de:	0010      	movs	r0, r2
 80090e0:	3863      	subs	r0, #99	@ 0x63
 80090e2:	2815      	cmp	r0, #21
 80090e4:	d8f7      	bhi.n	80090d6 <_printf_i+0x2e>
 80090e6:	f7f7 f815 	bl	8000114 <__gnu_thumb1_case_shi>
 80090ea:	0016      	.short	0x0016
 80090ec:	fff6001f 	.word	0xfff6001f
 80090f0:	fff6fff6 	.word	0xfff6fff6
 80090f4:	001ffff6 	.word	0x001ffff6
 80090f8:	fff6fff6 	.word	0xfff6fff6
 80090fc:	fff6fff6 	.word	0xfff6fff6
 8009100:	0036009f 	.word	0x0036009f
 8009104:	fff6007e 	.word	0xfff6007e
 8009108:	00b0fff6 	.word	0x00b0fff6
 800910c:	0036fff6 	.word	0x0036fff6
 8009110:	fff6fff6 	.word	0xfff6fff6
 8009114:	0082      	.short	0x0082
 8009116:	0025      	movs	r5, r4
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	3542      	adds	r5, #66	@ 0x42
 800911c:	1d11      	adds	r1, r2, #4
 800911e:	6019      	str	r1, [r3, #0]
 8009120:	6813      	ldr	r3, [r2, #0]
 8009122:	702b      	strb	r3, [r5, #0]
 8009124:	2301      	movs	r3, #1
 8009126:	e09e      	b.n	8009266 <_printf_i+0x1be>
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	6809      	ldr	r1, [r1, #0]
 800912c:	1d02      	adds	r2, r0, #4
 800912e:	060d      	lsls	r5, r1, #24
 8009130:	d50b      	bpl.n	800914a <_printf_i+0xa2>
 8009132:	6806      	ldr	r6, [r0, #0]
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	2e00      	cmp	r6, #0
 8009138:	da03      	bge.n	8009142 <_printf_i+0x9a>
 800913a:	232d      	movs	r3, #45	@ 0x2d
 800913c:	9a03      	ldr	r2, [sp, #12]
 800913e:	4276      	negs	r6, r6
 8009140:	7013      	strb	r3, [r2, #0]
 8009142:	4b5d      	ldr	r3, [pc, #372]	@ (80092b8 <_printf_i+0x210>)
 8009144:	270a      	movs	r7, #10
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	e018      	b.n	800917c <_printf_i+0xd4>
 800914a:	6806      	ldr	r6, [r0, #0]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	0649      	lsls	r1, r1, #25
 8009150:	d5f1      	bpl.n	8009136 <_printf_i+0x8e>
 8009152:	b236      	sxth	r6, r6
 8009154:	e7ef      	b.n	8009136 <_printf_i+0x8e>
 8009156:	6808      	ldr	r0, [r1, #0]
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	c940      	ldmia	r1!, {r6}
 800915c:	0605      	lsls	r5, r0, #24
 800915e:	d402      	bmi.n	8009166 <_printf_i+0xbe>
 8009160:	0640      	lsls	r0, r0, #25
 8009162:	d500      	bpl.n	8009166 <_printf_i+0xbe>
 8009164:	b2b6      	uxth	r6, r6
 8009166:	6019      	str	r1, [r3, #0]
 8009168:	4b53      	ldr	r3, [pc, #332]	@ (80092b8 <_printf_i+0x210>)
 800916a:	270a      	movs	r7, #10
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	2a6f      	cmp	r2, #111	@ 0x6f
 8009170:	d100      	bne.n	8009174 <_printf_i+0xcc>
 8009172:	3f02      	subs	r7, #2
 8009174:	0023      	movs	r3, r4
 8009176:	2200      	movs	r2, #0
 8009178:	3343      	adds	r3, #67	@ 0x43
 800917a:	701a      	strb	r2, [r3, #0]
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	60a3      	str	r3, [r4, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db06      	blt.n	8009192 <_printf_i+0xea>
 8009184:	2104      	movs	r1, #4
 8009186:	6822      	ldr	r2, [r4, #0]
 8009188:	9d03      	ldr	r5, [sp, #12]
 800918a:	438a      	bics	r2, r1
 800918c:	6022      	str	r2, [r4, #0]
 800918e:	4333      	orrs	r3, r6
 8009190:	d00c      	beq.n	80091ac <_printf_i+0x104>
 8009192:	9d03      	ldr	r5, [sp, #12]
 8009194:	0030      	movs	r0, r6
 8009196:	0039      	movs	r1, r7
 8009198:	f7f7 f84c 	bl	8000234 <__aeabi_uidivmod>
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	3d01      	subs	r5, #1
 80091a0:	5c5b      	ldrb	r3, [r3, r1]
 80091a2:	702b      	strb	r3, [r5, #0]
 80091a4:	0033      	movs	r3, r6
 80091a6:	0006      	movs	r6, r0
 80091a8:	429f      	cmp	r7, r3
 80091aa:	d9f3      	bls.n	8009194 <_printf_i+0xec>
 80091ac:	2f08      	cmp	r7, #8
 80091ae:	d109      	bne.n	80091c4 <_printf_i+0x11c>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	07db      	lsls	r3, r3, #31
 80091b4:	d506      	bpl.n	80091c4 <_printf_i+0x11c>
 80091b6:	6862      	ldr	r2, [r4, #4]
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	dc02      	bgt.n	80091c4 <_printf_i+0x11c>
 80091be:	2330      	movs	r3, #48	@ 0x30
 80091c0:	3d01      	subs	r5, #1
 80091c2:	702b      	strb	r3, [r5, #0]
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	1b5b      	subs	r3, r3, r5
 80091c8:	6123      	str	r3, [r4, #16]
 80091ca:	9b07      	ldr	r3, [sp, #28]
 80091cc:	0021      	movs	r1, r4
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	9805      	ldr	r0, [sp, #20]
 80091d2:	9b06      	ldr	r3, [sp, #24]
 80091d4:	aa09      	add	r2, sp, #36	@ 0x24
 80091d6:	f7ff fef7 	bl	8008fc8 <_printf_common>
 80091da:	3001      	adds	r0, #1
 80091dc:	d148      	bne.n	8009270 <_printf_i+0x1c8>
 80091de:	2001      	movs	r0, #1
 80091e0:	4240      	negs	r0, r0
 80091e2:	b00b      	add	sp, #44	@ 0x2c
 80091e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e6:	2220      	movs	r2, #32
 80091e8:	6809      	ldr	r1, [r1, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	2278      	movs	r2, #120	@ 0x78
 80091f0:	4932      	ldr	r1, [pc, #200]	@ (80092bc <_printf_i+0x214>)
 80091f2:	9104      	str	r1, [sp, #16]
 80091f4:	0021      	movs	r1, r4
 80091f6:	3145      	adds	r1, #69	@ 0x45
 80091f8:	700a      	strb	r2, [r1, #0]
 80091fa:	6819      	ldr	r1, [r3, #0]
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	c940      	ldmia	r1!, {r6}
 8009200:	0610      	lsls	r0, r2, #24
 8009202:	d402      	bmi.n	800920a <_printf_i+0x162>
 8009204:	0650      	lsls	r0, r2, #25
 8009206:	d500      	bpl.n	800920a <_printf_i+0x162>
 8009208:	b2b6      	uxth	r6, r6
 800920a:	6019      	str	r1, [r3, #0]
 800920c:	07d3      	lsls	r3, r2, #31
 800920e:	d502      	bpl.n	8009216 <_printf_i+0x16e>
 8009210:	2320      	movs	r3, #32
 8009212:	4313      	orrs	r3, r2
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	2e00      	cmp	r6, #0
 8009218:	d001      	beq.n	800921e <_printf_i+0x176>
 800921a:	2710      	movs	r7, #16
 800921c:	e7aa      	b.n	8009174 <_printf_i+0xcc>
 800921e:	2220      	movs	r2, #32
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	4393      	bics	r3, r2
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	e7f8      	b.n	800921a <_printf_i+0x172>
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	680d      	ldr	r5, [r1, #0]
 800922c:	1d10      	adds	r0, r2, #4
 800922e:	6949      	ldr	r1, [r1, #20]
 8009230:	6018      	str	r0, [r3, #0]
 8009232:	6813      	ldr	r3, [r2, #0]
 8009234:	062e      	lsls	r6, r5, #24
 8009236:	d501      	bpl.n	800923c <_printf_i+0x194>
 8009238:	6019      	str	r1, [r3, #0]
 800923a:	e002      	b.n	8009242 <_printf_i+0x19a>
 800923c:	066d      	lsls	r5, r5, #25
 800923e:	d5fb      	bpl.n	8009238 <_printf_i+0x190>
 8009240:	8019      	strh	r1, [r3, #0]
 8009242:	2300      	movs	r3, #0
 8009244:	9d03      	ldr	r5, [sp, #12]
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	e7bf      	b.n	80091ca <_printf_i+0x122>
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	1d11      	adds	r1, r2, #4
 800924e:	6019      	str	r1, [r3, #0]
 8009250:	6815      	ldr	r5, [r2, #0]
 8009252:	2100      	movs	r1, #0
 8009254:	0028      	movs	r0, r5
 8009256:	6862      	ldr	r2, [r4, #4]
 8009258:	f000 f856 	bl	8009308 <memchr>
 800925c:	2800      	cmp	r0, #0
 800925e:	d001      	beq.n	8009264 <_printf_i+0x1bc>
 8009260:	1b40      	subs	r0, r0, r5
 8009262:	6060      	str	r0, [r4, #4]
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	2300      	movs	r3, #0
 800926a:	9a03      	ldr	r2, [sp, #12]
 800926c:	7013      	strb	r3, [r2, #0]
 800926e:	e7ac      	b.n	80091ca <_printf_i+0x122>
 8009270:	002a      	movs	r2, r5
 8009272:	6923      	ldr	r3, [r4, #16]
 8009274:	9906      	ldr	r1, [sp, #24]
 8009276:	9805      	ldr	r0, [sp, #20]
 8009278:	9d07      	ldr	r5, [sp, #28]
 800927a:	47a8      	blx	r5
 800927c:	3001      	adds	r0, #1
 800927e:	d0ae      	beq.n	80091de <_printf_i+0x136>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	079b      	lsls	r3, r3, #30
 8009284:	d415      	bmi.n	80092b2 <_printf_i+0x20a>
 8009286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009288:	68e0      	ldr	r0, [r4, #12]
 800928a:	4298      	cmp	r0, r3
 800928c:	daa9      	bge.n	80091e2 <_printf_i+0x13a>
 800928e:	0018      	movs	r0, r3
 8009290:	e7a7      	b.n	80091e2 <_printf_i+0x13a>
 8009292:	0022      	movs	r2, r4
 8009294:	2301      	movs	r3, #1
 8009296:	9906      	ldr	r1, [sp, #24]
 8009298:	9805      	ldr	r0, [sp, #20]
 800929a:	9e07      	ldr	r6, [sp, #28]
 800929c:	3219      	adds	r2, #25
 800929e:	47b0      	blx	r6
 80092a0:	3001      	adds	r0, #1
 80092a2:	d09c      	beq.n	80091de <_printf_i+0x136>
 80092a4:	3501      	adds	r5, #1
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dcf0      	bgt.n	8009292 <_printf_i+0x1ea>
 80092b0:	e7e9      	b.n	8009286 <_printf_i+0x1de>
 80092b2:	2500      	movs	r5, #0
 80092b4:	e7f7      	b.n	80092a6 <_printf_i+0x1fe>
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	0800964e 	.word	0x0800964e
 80092bc:	0800965f 	.word	0x0800965f

080092c0 <memmove>:
 80092c0:	b510      	push	{r4, lr}
 80092c2:	4288      	cmp	r0, r1
 80092c4:	d902      	bls.n	80092cc <memmove+0xc>
 80092c6:	188b      	adds	r3, r1, r2
 80092c8:	4298      	cmp	r0, r3
 80092ca:	d308      	bcc.n	80092de <memmove+0x1e>
 80092cc:	2300      	movs	r3, #0
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d007      	beq.n	80092e2 <memmove+0x22>
 80092d2:	5ccc      	ldrb	r4, [r1, r3]
 80092d4:	54c4      	strb	r4, [r0, r3]
 80092d6:	3301      	adds	r3, #1
 80092d8:	e7f9      	b.n	80092ce <memmove+0xe>
 80092da:	5c8b      	ldrb	r3, [r1, r2]
 80092dc:	5483      	strb	r3, [r0, r2]
 80092de:	3a01      	subs	r2, #1
 80092e0:	d2fb      	bcs.n	80092da <memmove+0x1a>
 80092e2:	bd10      	pop	{r4, pc}

080092e4 <_sbrk_r>:
 80092e4:	2300      	movs	r3, #0
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	4d06      	ldr	r5, [pc, #24]	@ (8009304 <_sbrk_r+0x20>)
 80092ea:	0004      	movs	r4, r0
 80092ec:	0008      	movs	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7f8 ff02 	bl	80020f8 <_sbrk>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d103      	bne.n	8009300 <_sbrk_r+0x1c>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d000      	beq.n	8009300 <_sbrk_r+0x1c>
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	bd70      	pop	{r4, r5, r6, pc}
 8009302:	46c0      	nop			@ (mov r8, r8)
 8009304:	200005a0 	.word	0x200005a0

08009308 <memchr>:
 8009308:	b2c9      	uxtb	r1, r1
 800930a:	1882      	adds	r2, r0, r2
 800930c:	4290      	cmp	r0, r2
 800930e:	d101      	bne.n	8009314 <memchr+0xc>
 8009310:	2000      	movs	r0, #0
 8009312:	4770      	bx	lr
 8009314:	7803      	ldrb	r3, [r0, #0]
 8009316:	428b      	cmp	r3, r1
 8009318:	d0fb      	beq.n	8009312 <memchr+0xa>
 800931a:	3001      	adds	r0, #1
 800931c:	e7f6      	b.n	800930c <memchr+0x4>

0800931e <memcpy>:
 800931e:	2300      	movs	r3, #0
 8009320:	b510      	push	{r4, lr}
 8009322:	429a      	cmp	r2, r3
 8009324:	d100      	bne.n	8009328 <memcpy+0xa>
 8009326:	bd10      	pop	{r4, pc}
 8009328:	5ccc      	ldrb	r4, [r1, r3]
 800932a:	54c4      	strb	r4, [r0, r3]
 800932c:	3301      	adds	r3, #1
 800932e:	e7f8      	b.n	8009322 <memcpy+0x4>

08009330 <_realloc_r>:
 8009330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009332:	0006      	movs	r6, r0
 8009334:	000c      	movs	r4, r1
 8009336:	0015      	movs	r5, r2
 8009338:	2900      	cmp	r1, #0
 800933a:	d105      	bne.n	8009348 <_realloc_r+0x18>
 800933c:	0011      	movs	r1, r2
 800933e:	f7ff fc55 	bl	8008bec <_malloc_r>
 8009342:	0004      	movs	r4, r0
 8009344:	0020      	movs	r0, r4
 8009346:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009348:	2a00      	cmp	r2, #0
 800934a:	d103      	bne.n	8009354 <_realloc_r+0x24>
 800934c:	f7ff fbe2 	bl	8008b14 <_free_r>
 8009350:	002c      	movs	r4, r5
 8009352:	e7f7      	b.n	8009344 <_realloc_r+0x14>
 8009354:	f000 f81c 	bl	8009390 <_malloc_usable_size_r>
 8009358:	0007      	movs	r7, r0
 800935a:	4285      	cmp	r5, r0
 800935c:	d802      	bhi.n	8009364 <_realloc_r+0x34>
 800935e:	0843      	lsrs	r3, r0, #1
 8009360:	42ab      	cmp	r3, r5
 8009362:	d3ef      	bcc.n	8009344 <_realloc_r+0x14>
 8009364:	0029      	movs	r1, r5
 8009366:	0030      	movs	r0, r6
 8009368:	f7ff fc40 	bl	8008bec <_malloc_r>
 800936c:	9001      	str	r0, [sp, #4]
 800936e:	2800      	cmp	r0, #0
 8009370:	d101      	bne.n	8009376 <_realloc_r+0x46>
 8009372:	9c01      	ldr	r4, [sp, #4]
 8009374:	e7e6      	b.n	8009344 <_realloc_r+0x14>
 8009376:	002a      	movs	r2, r5
 8009378:	42bd      	cmp	r5, r7
 800937a:	d900      	bls.n	800937e <_realloc_r+0x4e>
 800937c:	003a      	movs	r2, r7
 800937e:	0021      	movs	r1, r4
 8009380:	9801      	ldr	r0, [sp, #4]
 8009382:	f7ff ffcc 	bl	800931e <memcpy>
 8009386:	0021      	movs	r1, r4
 8009388:	0030      	movs	r0, r6
 800938a:	f7ff fbc3 	bl	8008b14 <_free_r>
 800938e:	e7f0      	b.n	8009372 <_realloc_r+0x42>

08009390 <_malloc_usable_size_r>:
 8009390:	1f0b      	subs	r3, r1, #4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	1f18      	subs	r0, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	da01      	bge.n	800939e <_malloc_usable_size_r+0xe>
 800939a:	580b      	ldr	r3, [r1, r0]
 800939c:	18c0      	adds	r0, r0, r3
 800939e:	4770      	bx	lr

080093a0 <_init>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	46c0      	nop			@ (mov r8, r8)
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr

080093ac <_fini>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	46c0      	nop			@ (mov r8, r8)
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr
