
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800782c  0800782c  0000882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007970  08007970  00009028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007970  08007970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007978  08007978  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08007980  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000028  080079a8  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080079a8  00009384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b6d  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  0001fbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00022ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b3ef  00000000  00000000  00023fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017ee2  00000000  00000000  0003f397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b0e7e  00000000  00000000  00057279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001080f7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f8e  00000000  00000000  0010813a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048d4  00000000  00000000  001090c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0010d99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000028 	.word	0x20000028
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007814 	.word	0x08007814

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000002c 	.word	0x2000002c
 8000100:	08007814 	.word	0x08007814

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000622:	f001 fb91 	bl	8001d48 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(100);
 8000626:	2064      	movs	r0, #100	@ 0x64
 8000628:	f001 fc14 	bl	8001e54 <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800062c:	f000 fa58 	bl	8000ae0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	@ 0x64
 8000632:	f001 fc0f 	bl	8001e54 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000636:	f000 feb9 	bl	80013ac <MX_GPIO_Init>
	MX_DMA_Init();
 800063a:	f000 fea1 	bl	8001380 <MX_DMA_Init>
	MX_ADC1_Init();
 800063e:	f000 fabd 	bl	8000bbc <MX_ADC1_Init>
	MX_COMP2_Init();
 8000642:	f000 fb7f 	bl	8000d44 <MX_COMP2_Init>
	MX_DAC1_Init();
 8000646:	f000 fbad 	bl	8000da4 <MX_DAC1_Init>
	MX_TIM1_Init();
 800064a:	f000 fbef 	bl	8000e2c <MX_TIM1_Init>
	MX_TIM2_Init();
 800064e:	f000 fccf 	bl	8000ff0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000652:	f000 fd2d 	bl	80010b0 <MX_TIM3_Init>
	MX_TIM16_Init();
 8000656:	f000 fdf5 	bl	8001244 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 800065a:	f000 fe43 	bl	80012e4 <MX_USART2_UART_Init>
	MX_TIM6_Init();
 800065e:	f000 fdb7 	bl	80011d0 <MX_TIM6_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000662:	f000 fa85 	bl	8000b70 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// synchronous timing interrupts
	TIM6->ARR = 1000;
 8000666:	4bcc      	ldr	r3, [pc, #816]	@ (8000998 <main+0x37c>)
 8000668:	22fa      	movs	r2, #250	@ 0xfa
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 800066e:	4bcb      	ldr	r3, [pc, #812]	@ (800099c <main+0x380>)
 8000670:	0018      	movs	r0, r3
 8000672:	f004 fc89 	bl	8004f88 <HAL_TIM_Base_Start_IT>

	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 8000676:	4bca      	ldr	r3, [pc, #808]	@ (80009a0 <main+0x384>)
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	4bc9      	ldr	r3, [pc, #804]	@ (80009a0 <main+0x384>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	430a      	orrs	r2, r1
 8000680:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 8000682:	4bc7      	ldr	r3, [pc, #796]	@ (80009a0 <main+0x384>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4bc6      	ldr	r3, [pc, #792]	@ (80009a0 <main+0x384>)
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	430a      	orrs	r2, r1
 800068c:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 800068e:	4bc5      	ldr	r3, [pc, #788]	@ (80009a4 <main+0x388>)
 8000690:	2100      	movs	r1, #0
 8000692:	0018      	movs	r0, r3
 8000694:	f004 fd2c 	bl	80050f0 <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 8000698:	4bc2      	ldr	r3, [pc, #776]	@ (80009a4 <main+0x388>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800069e:	4bc1      	ldr	r3, [pc, #772]	@ (80009a4 <main+0x388>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2180      	movs	r1, #128	@ 0x80
 80006a4:	0209      	lsls	r1, r1, #8
 80006a6:	430a      	orrs	r2, r1
 80006a8:	645a      	str	r2, [r3, #68]	@ 0x44

	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 80006aa:	4bbf      	ldr	r3, [pc, #764]	@ (80009a8 <main+0x38c>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f002 ff23 	bl	80034fa <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 80006b4:	4bbd      	ldr	r3, [pc, #756]	@ (80009ac <main+0x390>)
 80006b6:	48bc      	ldr	r0, [pc, #752]	@ (80009a8 <main+0x38c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f002 ffd0 	bl	8003660 <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 80006c0:	4bbb      	ldr	r3, [pc, #748]	@ (80009b0 <main+0x394>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 fdc6 	bl	8003254 <HAL_COMP_Start>

	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, numberADCchannels); // start ADC with DMA, 6 channels
 80006c8:	4bba      	ldr	r3, [pc, #744]	@ (80009b4 <main+0x398>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	001a      	movs	r2, r3
 80006ce:	49ba      	ldr	r1, [pc, #744]	@ (80009b8 <main+0x39c>)
 80006d0:	4bba      	ldr	r3, [pc, #744]	@ (80009bc <main+0x3a0>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fede 	bl	8002494 <HAL_ADC_Start_DMA>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]

	// blink LED
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	4ab7      	ldr	r2, [pc, #732]	@ (80009c0 <main+0x3a4>)
 80006e4:	0019      	movs	r1, r3
 80006e6:	0010      	movs	r0, r2
 80006e8:	f003 fd12 	bl	8004110 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80006ec:	23fa      	movs	r3, #250	@ 0xfa
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fbaf 	bl	8001e54 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	4ab1      	ldr	r2, [pc, #708]	@ (80009c0 <main+0x3a4>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f003 fd06 	bl	8004110 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000704:	23fa      	movs	r3, #250	@ 0xfa
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fba3 	bl	8001e54 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800070e:	2380      	movs	r3, #128	@ 0x80
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	4aab      	ldr	r2, [pc, #684]	@ (80009c0 <main+0x3a4>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f003 fcfa 	bl	8004110 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800071c:	23fa      	movs	r3, #250	@ 0xfa
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fb97 	bl	8001e54 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	4aa5      	ldr	r2, [pc, #660]	@ (80009c0 <main+0x3a4>)
 800072c:	0019      	movs	r1, r3
 800072e:	0010      	movs	r0, r2
 8000730:	f003 fcee 	bl	8004110 <HAL_GPIO_TogglePin>

		/* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request && enableUART) {
 8000734:	4ba3      	ldr	r3, [pc, #652]	@ (80009c4 <main+0x3a8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
			sendInt16UART();
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 8000738:	4ba3      	ldr	r3, [pc, #652]	@ (80009c8 <main+0x3ac>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d054      	beq.n	80007ec <main+0x1d0>
			tim6_irq_request = 0;
 8000742:	4ba1      	ldr	r3, [pc, #644]	@ (80009c8 <main+0x3ac>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9); //pull low for enabling
 8000748:	2380      	movs	r3, #128	@ 0x80
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4a9f      	ldr	r2, [pc, #636]	@ (80009cc <main+0x3b0>)
 800074e:	0019      	movs	r1, r3
 8000750:	0010      	movs	r0, r2
 8000752:	f003 fca3 	bl	800409c <HAL_GPIO_ReadPin>
 8000756:	0003      	movs	r3, r0
 8000758:	425a      	negs	r2, r3
 800075a:	4153      	adcs	r3, r2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	001a      	movs	r2, r3
 8000760:	4b9b      	ldr	r3, [pc, #620]	@ (80009d0 <main+0x3b4>)
 8000762:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 8000764:	4b9a      	ldr	r3, [pc, #616]	@ (80009d0 <main+0x3b4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d009      	beq.n	8000782 <main+0x166>
 800076e:	4b99      	ldr	r3, [pc, #612]	@ (80009d4 <main+0x3b8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d105      	bne.n	8000782 <main+0x166>
				ignitionCounter++;
 8000776:	4b98      	ldr	r3, [pc, #608]	@ (80009d8 <main+0x3bc>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b96      	ldr	r3, [pc, #600]	@ (80009d8 <main+0x3bc>)
 8000780:	801a      	strh	r2, [r3, #0]

			// checked in all states
			// check lamp voltage

			// check supply voltage
			if ((adc_24V < upper_24Vsupply) && (adc_24V > lower_24Vsupply)) {
 8000782:	4b96      	ldr	r3, [pc, #600]	@ (80009dc <main+0x3c0>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b95      	ldr	r3, [pc, #596]	@ (80009e0 <main+0x3c4>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	429a      	cmp	r2, r3
 8000790:	d20b      	bcs.n	80007aa <main+0x18e>
 8000792:	4b92      	ldr	r3, [pc, #584]	@ (80009dc <main+0x3c0>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b92      	ldr	r3, [pc, #584]	@ (80009e4 <main+0x3c8>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	429a      	cmp	r2, r3
 80007a0:	d903      	bls.n	80007aa <main+0x18e>
				supplyOKFlag = 1;
 80007a2:	4b91      	ldr	r3, [pc, #580]	@ (80009e8 <main+0x3cc>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e002      	b.n	80007b0 <main+0x194>
			}
			else {
				supplyOKFlag = 0;
 80007aa:	4b8f      	ldr	r3, [pc, #572]	@ (80009e8 <main+0x3cc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > upper_tempMOSFET) {
 80007b0:	4b8e      	ldr	r3, [pc, #568]	@ (80009ec <main+0x3d0>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b8e      	ldr	r3, [pc, #568]	@ (80009f0 <main+0x3d4>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	429a      	cmp	r2, r3
 80007be:	d903      	bls.n	80007c8 <main+0x1ac>
				OT_flag = 1;
 80007c0:	4b8c      	ldr	r3, [pc, #560]	@ (80009f4 <main+0x3d8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e002      	b.n	80007ce <main+0x1b2>
			}
			else {
				OT_flag = 0;
 80007c8:	4b8a      	ldr	r3, [pc, #552]	@ (80009f4 <main+0x3d8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > upper_iIn) {
 80007ce:	4b8a      	ldr	r3, [pc, #552]	@ (80009f8 <main+0x3dc>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b89      	ldr	r3, [pc, #548]	@ (80009fc <main+0x3e0>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	429a      	cmp	r2, r3
 80007dc:	d903      	bls.n	80007e6 <main+0x1ca>
				OCPinFlag = 1;
 80007de:	4b88      	ldr	r3, [pc, #544]	@ (8000a00 <main+0x3e4>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e002      	b.n	80007ec <main+0x1d0>
			}
			else {
				OCPinFlag = 0;
 80007e6:	4b86      	ldr	r3, [pc, #536]	@ (8000a00 <main+0x3e4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]


		}

		// ------------ ASM -----------------------
		switch (state) {
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d89f      	bhi.n	8000734 <main+0x118>
 80007f4:	009a      	lsls	r2, r3, #2
 80007f6:	4b83      	ldr	r3, [pc, #524]	@ (8000a04 <main+0x3e8>)
 80007f8:	18d3      	adds	r3, r2, r3
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 80007fe:	4b75      	ldr	r3, [pc, #468]	@ (80009d4 <main+0x3b8>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 8000804:	4b74      	ldr	r3, [pc, #464]	@ (80009d8 <main+0x3bc>)
 8000806:	2200      	movs	r2, #0
 8000808:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	486c      	ldr	r0, [pc, #432]	@ (80009c0 <main+0x3a4>)
 8000810:	2200      	movs	r2, #0
 8000812:	0019      	movs	r1, r3
 8000814:	f003 fc5f 	bl	80040d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 8000818:	4b6c      	ldr	r3, [pc, #432]	@ (80009cc <main+0x3b0>)
 800081a:	2200      	movs	r2, #0
 800081c:	2140      	movs	r1, #64	@ 0x40
 800081e:	0018      	movs	r0, r3
 8000820:	f003 fc59 	bl	80040d6 <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000824:	4b5f      	ldr	r3, [pc, #380]	@ (80009a4 <main+0x388>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->ARR=ignFrequency; //50 kHz
 800082c:	4b76      	ldr	r3, [pc, #472]	@ (8000a08 <main+0x3ec>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b5b      	ldr	r3, [pc, #364]	@ (80009a0 <main+0x384>)
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c

			// exit conditions
			if (errorFlag) {
 8000836:	4b75      	ldr	r3, [pc, #468]	@ (8000a0c <main+0x3f0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <main+0x22a>
				state = ERROR_state;
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	2204      	movs	r2, #4
 8000844:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag  && supplyOKFlag ) {
 8000846:	4b62      	ldr	r3, [pc, #392]	@ (80009d0 <main+0x3b4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d100      	bne.n	8000852 <main+0x236>
 8000850:	e12b      	b.n	8000aaa <main+0x48e>
 8000852:	4b65      	ldr	r3, [pc, #404]	@ (80009e8 <main+0x3cc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d100      	bne.n	800085e <main+0x242>
 800085c:	e125      	b.n	8000aaa <main+0x48e>
				state = IGNITE;
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000864:	e121      	b.n	8000aaa <main+0x48e>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 8000866:	4b6a      	ldr	r3, [pc, #424]	@ (8000a10 <main+0x3f4>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a14 <main+0x3f8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d903      	bls.n	800087a <main+0x25e>
				state = ERROR_state;
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	2204      	movs	r2, #4
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e042      	b.n	8000900 <main+0x2e4>
			}
			else if (!ignitionFlag) {
 800087a:	4b56      	ldr	r3, [pc, #344]	@ (80009d4 <main+0x3b8>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d13e      	bne.n	8000900 <main+0x2e4>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 8000882:	4b55      	ldr	r3, [pc, #340]	@ (80009d8 <main+0x3bc>)
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	4b64      	ldr	r3, [pc, #400]	@ (8000a18 <main+0x3fc>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d22f      	bcs.n	80008ee <main+0x2d2>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 800088e:	2380      	movs	r3, #128	@ 0x80
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	484b      	ldr	r0, [pc, #300]	@ (80009c0 <main+0x3a4>)
 8000894:	2200      	movs	r2, #0
 8000896:	0019      	movs	r1, r3
 8000898:	f003 fc1d 	bl	80040d6 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 800089c:	4b5f      	ldr	r3, [pc, #380]	@ (8000a1c <main+0x400>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b40      	ldr	r3, [pc, #256]	@ (80009a4 <main+0x388>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM1->ARR = ignFrequency;
 80008a8:	4b57      	ldr	r3, [pc, #348]	@ (8000a08 <main+0x3ec>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b3c      	ldr	r3, [pc, #240]	@ (80009a0 <main+0x384>)
 80008b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 80008b2:	4b46      	ldr	r3, [pc, #280]	@ (80009cc <main+0x3b0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	2140      	movs	r1, #64	@ 0x40
 80008b8:	0018      	movs	r0, r3
 80008ba:	f003 fc0c 	bl	80040d6 <HAL_GPIO_WritePin>
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
					if (adc_iSenseLamp > adc_iSenseLampIgnited && ignitionCounter > 100) { // minimum ignition time 100 ms
 80008be:	4b58      	ldr	r3, [pc, #352]	@ (8000a20 <main+0x404>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b57      	ldr	r3, [pc, #348]	@ (8000a24 <main+0x408>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d919      	bls.n	8000900 <main+0x2e4>
 80008cc:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <main+0x3bc>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2b64      	cmp	r3, #100	@ 0x64
 80008d2:	d915      	bls.n	8000900 <main+0x2e4>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 80008d4:	4b3d      	ldr	r3, [pc, #244]	@ (80009cc <main+0x3b0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	@ 0x40
 80008da:	0018      	movs	r0, r3
 80008dc:	f003 fbfb 	bl	80040d6 <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 80008e0:	4b3c      	ldr	r3, [pc, #240]	@ (80009d4 <main+0x3b8>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
						state = RUN;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e008      	b.n	8000900 <main+0x2e4>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 80008ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000a18 <main+0x3fc>)
 80008f0:	881a      	ldrh	r2, [r3, #0]
 80008f2:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <main+0x3bc>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d802      	bhi.n	8000900 <main+0x2e4>
					state = IGN_FAIL;
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	2203      	movs	r2, #3
 80008fe:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 8000900:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <main+0x3b4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d000      	beq.n	800090c <main+0x2f0>
 800090a:	e0d0      	b.n	8000aae <main+0x492>
				state = INIT;
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000912:	e0cc      	b.n	8000aae <main+0x492>
		case IGN_FAIL:
			ignitionFlag = 0;
 8000914:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <main+0x3b8>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 800091a:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <main+0x3b0>)
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	0018      	movs	r0, r3
 8000922:	f003 fbd8 	bl	80040d6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <main+0x388>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	4a23      	ldr	r2, [pc, #140]	@ (80009c0 <main+0x3a4>)
 8000934:	0019      	movs	r1, r3
 8000936:	0010      	movs	r0, r2
 8000938:	f003 fbea 	bl	8004110 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800093c:	2064      	movs	r0, #100	@ 0x64
 800093e:	f001 fa89 	bl	8001e54 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000942:	2380      	movs	r3, #128	@ 0x80
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <main+0x3a4>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f003 fbe0 	bl	8004110 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000950:	2064      	movs	r0, #100	@ 0x64
 8000952:	f001 fa7f 	bl	8001e54 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <main+0x3a4>)
 800095c:	0019      	movs	r1, r3
 800095e:	0010      	movs	r0, r2
 8000960:	f003 fbd6 	bl	8004110 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000964:	2064      	movs	r0, #100	@ 0x64
 8000966:	f001 fa75 	bl	8001e54 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <main+0x3a4>)
 8000970:	0019      	movs	r1, r3
 8000972:	0010      	movs	r0, r2
 8000974:	f003 fbcc 	bl	8004110 <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000978:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <main+0x40c>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fa69 	bl	8001e54 <HAL_Delay>
			failedIgnitionCounter++;
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <main+0x3f4>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <main+0x3f4>)
 800098c:	701a      	strb	r2, [r3, #0]
			state = INIT;
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
			break;
 8000994:	e08e      	b.n	8000ab4 <main+0x498>
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	40001000 	.word	0x40001000
 800099c:	2000024c 	.word	0x2000024c
 80009a0:	40012c00 	.word	0x40012c00
 80009a4:	20000168 	.word	0x20000168
 80009a8:	20000154 	.word	0x20000154
 80009ac:	00000fff 	.word	0x00000fff
 80009b0:	20000124 	.word	0x20000124
 80009b4:	20000011 	.word	0x20000011
 80009b8:	2000004c 	.word	0x2000004c
 80009bc:	20000064 	.word	0x20000064
 80009c0:	50000800 	.word	0x50000800
 80009c4:	2000004a 	.word	0x2000004a
 80009c8:	20000049 	.word	0x20000049
 80009cc:	50000400 	.word	0x50000400
 80009d0:	20000044 	.word	0x20000044
 80009d4:	2000037a 	.word	0x2000037a
 80009d8:	20000378 	.word	0x20000378
 80009dc:	20000058 	.word	0x20000058
 80009e0:	20000012 	.word	0x20000012
 80009e4:	20000014 	.word	0x20000014
 80009e8:	20000045 	.word	0x20000045
 80009ec:	2000005a 	.word	0x2000005a
 80009f0:	20000016 	.word	0x20000016
 80009f4:	20000047 	.word	0x20000047
 80009f8:	20000062 	.word	0x20000062
 80009fc:	20000018 	.word	0x20000018
 8000a00:	20000048 	.word	0x20000048
 8000a04:	0800782c 	.word	0x0800782c
 8000a08:	20000006 	.word	0x20000006
 8000a0c:	20000046 	.word	0x20000046
 8000a10:	2000037b 	.word	0x2000037b
 8000a14:	20000010 	.word	0x20000010
 8000a18:	2000000c 	.word	0x2000000c
 8000a1c:	20000002 	.word	0x20000002
 8000a20:	2000005e 	.word	0x2000005e
 8000a24:	2000000a 	.word	0x2000000a
 8000a28:	2000000e 	.word	0x2000000e


		case RUN:
			// RUN code
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	4821      	ldr	r0, [pc, #132]	@ (8000ab8 <main+0x49c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	0019      	movs	r1, r3
 8000a36:	f003 fb4e 	bl	80040d6 <HAL_GPIO_WritePin>
			TIM1->ARR=operationFrequency;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <main+0x4a0>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <main+0x4a4>)
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMax); // max. duty cycle limiting
 8000a44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <main+0x4a8>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <main+0x4ac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <main+0x4b0>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <main+0x4b4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fe00 	bl	8003660 <HAL_DAC_SetValue>

			// exit conditions

			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000a60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <main+0x4b8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <main+0x458>
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <main+0x4bc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <main+0x45e>
				state = INIT;
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
			}

			/*if (OT_flag || errorFlag || (adc_uSenseLamp>adc_uSenseLampOpenCircuit)) {
				state = ERROR_state;
			}*/
			if (OT_flag ) {
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <main+0x4c0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d016      	beq.n	8000ab2 <main+0x496>
				state = ERROR_state;
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	2204      	movs	r2, #4
 8000a88:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000a8a:	e012      	b.n	8000ab2 <main+0x496>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <main+0x4ac>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	635a      	str	r2, [r3, #52]	@ 0x34


			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <main+0x49c>)
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f003 fb37 	bl	8004110 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000aa2:	20c8      	movs	r0, #200	@ 0xc8
 8000aa4:	f001 f9d6 	bl	8001e54 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000aa8:	e004      	b.n	8000ab4 <main+0x498>
			break;
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	e642      	b.n	8000734 <main+0x118>
			break;
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	e640      	b.n	8000734 <main+0x118>
			break;
 8000ab2:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request && enableUART) {
 8000ab4:	e63e      	b.n	8000734 <main+0x118>
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	50000800 	.word	0x50000800
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	40012c00 	.word	0x40012c00
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	20000168 	.word	0x20000168
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000154 	.word	0x20000154
 8000ad4:	20000044 	.word	0x20000044
 8000ad8:	20000045 	.word	0x20000045
 8000adc:	20000047 	.word	0x20000047

08000ae0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b093      	sub	sp, #76	@ 0x4c
 8000ae4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	2410      	movs	r4, #16
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	0018      	movs	r0, r3
 8000aec:	2338      	movs	r3, #56	@ 0x38
 8000aee:	001a      	movs	r2, r3
 8000af0:	2100      	movs	r1, #0
 8000af2:	f006 fe63 	bl	80077bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af6:	003b      	movs	r3, r7
 8000af8:	0018      	movs	r0, r3
 8000afa:	2310      	movs	r3, #16
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f006 fe5c 	bl	80077bc <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 fb1d 	bl	8004148 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2202      	movs	r2, #2
 8000b12:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2240      	movs	r2, #64	@ 0x40
 8000b26:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	0018      	movs	r0, r3
 8000b32:	f003 fb55 	bl	80041e0 <HAL_RCC_OscConfig>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x5e>
	{
		Error_Handler();
 8000b3a:	f000 fce1 	bl	8001500 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b56:	003b      	movs	r3, r7
 8000b58:	2100      	movs	r1, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fe5a 	bl	8004814 <HAL_RCC_ClockConfig>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x88>
	{
		Error_Handler();
 8000b64:	f000 fccc 	bl	8001500 <Error_Handler>
	}
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b013      	add	sp, #76	@ 0x4c
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2011      	movs	r0, #17
 8000b7a:	f002 fc69 	bl	8003450 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000b7e:	2011      	movs	r0, #17
 8000b80:	f002 fc7b 	bl	800347a <HAL_NVIC_EnableIRQ>
	/* ADC1_COMP_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	200c      	movs	r0, #12
 8000b8a:	f002 fc61 	bl	8003450 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000b8e:	200c      	movs	r0, #12
 8000b90:	f002 fc73 	bl	800347a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2009      	movs	r0, #9
 8000b9a:	f002 fc59 	bl	8003450 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b9e:	2009      	movs	r0, #9
 8000ba0:	f002 fc6b 	bl	800347a <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2010      	movs	r0, #16
 8000baa:	f002 fc51 	bl	8003450 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bae:	2010      	movs	r0, #16
 8000bb0:	f002 fc63 	bl	800347a <HAL_NVIC_EnableIRQ>
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f006 fdf6 	bl	80077bc <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000bd0:	4b55      	ldr	r3, [pc, #340]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000bd2:	4a56      	ldr	r2, [pc, #344]	@ (8000d2c <MX_ADC1_Init+0x170>)
 8000bd4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000bd6:	4b54      	ldr	r3, [pc, #336]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000bd8:	22a0      	movs	r2, #160	@ 0xa0
 8000bda:	0352      	lsls	r2, r2, #13
 8000bdc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bde:	4b52      	ldr	r3, [pc, #328]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be4:	4b50      	ldr	r3, [pc, #320]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b4f      	ldr	r3, [pc, #316]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	0392      	lsls	r2, r2, #14
 8000bf0:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c04:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 6;
 8000c0a:	4b47      	ldr	r3, [pc, #284]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c0c:	2206      	movs	r2, #6
 8000c0e:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000c10:	4b45      	ldr	r3, [pc, #276]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c12:	22a8      	movs	r2, #168	@ 0xa8
 8000c14:	00d2      	lsls	r2, r2, #3
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c18:	4b43      	ldr	r3, [pc, #268]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c20:	4b41      	ldr	r3, [pc, #260]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c22:	222c      	movs	r2, #44	@ 0x2c
 8000c24:	2101      	movs	r1, #1
 8000c26:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c28:	4b3f      	ldr	r3, [pc, #252]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_7CYCLES_5;
 8000c34:	4b3c      	ldr	r3, [pc, #240]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c3c:	223c      	movs	r2, #60	@ 0x3c
 8000c3e:	2100      	movs	r1, #0
 8000c40:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c42:	4b39      	ldr	r3, [pc, #228]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c48:	4b37      	ldr	r3, [pc, #220]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fa7a 	bl	8002144 <HAL_ADC_Init>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0x9c>
	{
		Error_Handler();
 8000c54:	f000 fc54 	bl	8001500 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6a:	1d3a      	adds	r2, r7, #4
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 fdd5 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 8000c7a:	f000 fc41 	bl	8001500 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <MX_ADC1_Init+0x174>)
 8000c82:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2204      	movs	r2, #4
 8000c88:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8a:	1d3a      	adds	r2, r7, #4
 8000c8c:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f001 fdc5 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8000c9a:	f000 fc31 	bl	8001500 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4a24      	ldr	r2, [pc, #144]	@ (8000d34 <MX_ADC1_Init+0x178>)
 8000ca2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000caa:	1d3a      	adds	r2, r7, #4
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fdb5 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC1_Init+0x102>
	{
		Error_Handler();
 8000cba:	f000 fc21 	bl	8001500 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d38 <MX_ADC1_Init+0x17c>)
 8000cc2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3a      	adds	r2, r7, #4
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fda5 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 8000cda:	f000 fc11 	bl	8001500 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <MX_ADC1_Init+0x180>)
 8000ce2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	1d3a      	adds	r2, r7, #4
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 fd95 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x142>
	{
		Error_Handler();
 8000cfa:	f000 fc01 	bl	8001500 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <MX_ADC1_Init+0x184>)
 8000d02:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2214      	movs	r2, #20
 8000d08:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	1d3a      	adds	r2, r7, #4
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_ADC1_Init+0x16c>)
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fd85 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0x162>
	{
		Error_Handler();
 8000d1a:	f000 fbf1 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	20000064 	.word	0x20000064
 8000d2c:	40012400 	.word	0x40012400
 8000d30:	04000002 	.word	0x04000002
 8000d34:	0c000008 	.word	0x0c000008
 8000d38:	20000100 	.word	0x20000100
 8000d3c:	24000200 	.word	0x24000200
 8000d40:	28000400 	.word	0x28000400

08000d44 <MX_COMP2_Init>:
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	/* USER CODE END COMP2_Init 0 */

	/* USER CODE BEGIN COMP2_Init 1 */

	/* USER CODE END COMP2_Init 1 */
	hcomp2.Instance = COMP2;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <MX_COMP2_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
	hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
	hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d56:	2240      	movs	r2, #64	@ 0x40
 8000d58:	615a      	str	r2, [r3, #20]
	hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
	hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
	hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
	hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
	hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <MX_COMP2_Init+0x58>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 f902 	bl	8002f90 <HAL_COMP_Init>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_COMP2_Init+0x50>
	{
		Error_Handler();
 8000d90:	f000 fbb6 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN COMP2_Init 2 */

	/* USER CODE END COMP2_Init 2 */

}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000124 	.word	0x20000124
 8000da0:	40010204 	.word	0x40010204

08000da4 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	0018      	movs	r0, r3
 8000dae:	2324      	movs	r3, #36	@ 0x24
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f006 fd02 	bl	80077bc <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_DAC1_Init+0x80>)
 8000dba:	4a1b      	ldr	r2, [pc, #108]	@ (8000e28 <MX_DAC1_Init+0x84>)
 8000dbc:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_DAC1_Init+0x80>)
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 fb77 	bl	80034b4 <HAL_DAC_Init>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <MX_DAC1_Init+0x2a>
	{
		Error_Handler();
 8000dca:	f000 fb99 	bl	8001500 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2201      	movs	r2, #1
 8000de4:	60da      	str	r2, [r3, #12]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dec:	1d39      	adds	r1, r7, #4
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <MX_DAC1_Init+0x80>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f002 fc64 	bl	80036c0 <HAL_DAC_ConfigChannel>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DAC1_Init+0x5c>
	{
		Error_Handler();
 8000dfc:	f000 fb80 	bl	8001500 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e06:	1d39      	adds	r1, r7, #4
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_DAC1_Init+0x80>)
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 fc57 	bl	80036c0 <HAL_DAC_ConfigChannel>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_DAC1_Init+0x76>
	{
		Error_Handler();
 8000e16:	f000 fb73 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b00a      	add	sp, #40	@ 0x28
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	20000154 	.word	0x20000154
 8000e28:	40007400 	.word	0x40007400

08000e2c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0a0      	sub	sp, #128	@ 0x80
 8000e30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 8000e32:	236c      	movs	r3, #108	@ 0x6c
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	0018      	movs	r0, r3
 8000e38:	2314      	movs	r3, #20
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f006 fcbd 	bl	80077bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e42:	2360      	movs	r3, #96	@ 0x60
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	0018      	movs	r0, r3
 8000e48:	230c      	movs	r3, #12
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f006 fcb5 	bl	80077bc <memset>
	TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000e52:	2354      	movs	r3, #84	@ 0x54
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	0018      	movs	r0, r3
 8000e58:	230c      	movs	r3, #12
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f006 fcad 	bl	80077bc <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	2338      	movs	r3, #56	@ 0x38
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	0018      	movs	r0, r3
 8000e68:	231c      	movs	r3, #28
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f006 fca5 	bl	80077bc <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	0018      	movs	r0, r3
 8000e76:	2334      	movs	r3, #52	@ 0x34
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f006 fc9e 	bl	80077bc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000e80:	4b59      	ldr	r3, [pc, #356]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000e82:	4a5a      	ldr	r2, [pc, #360]	@ (8000fec <MX_TIM1_Init+0x1c0>)
 8000e84:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000e86:	4b58      	ldr	r3, [pc, #352]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b56      	ldr	r3, [pc, #344]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 320;
 8000e92:	4b55      	ldr	r3, [pc, #340]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000e94:	22a0      	movs	r2, #160	@ 0xa0
 8000e96:	0052      	lsls	r2, r2, #1
 8000e98:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ea0:	4b51      	ldr	r3, [pc, #324]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea6:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eac:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f004 f8c6 	bl	8005040 <HAL_TIM_PWM_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000eb8:	f000 fb22 	bl	8001500 <Error_Handler>
	}
	sClearInputConfig.ClearInputState = ENABLE;
 8000ebc:	216c      	movs	r1, #108	@ 0x6c
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
	sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_COMP2;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 8000eca:	1879      	adds	r1, r7, r1
 8000ecc:	4b46      	ldr	r3, [pc, #280]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 fcfb 	bl	80058cc <HAL_TIM_ConfigOCrefClear>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xb2>
	{
		Error_Handler();
 8000eda:	f000 fb11 	bl	8001500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	2160      	movs	r1, #96	@ 0x60
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef2:	187a      	adds	r2, r7, r1
 8000ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f005 fc2f 	bl	800675c <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xda>
	{
		Error_Handler();
 8000f02:	f000 fafd 	bl	8001500 <Error_Handler>
	}
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000f06:	2154      	movs	r1, #84	@ 0x54
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_DISABLE;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
	sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000f1a:	187a      	adds	r2, r7, r1
 8000f1c:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	0018      	movs	r0, r3
 8000f22:	f005 fd25 	bl	8006970 <HAL_TIMEx_ConfigBreakInput>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x102>
	{
		Error_Handler();
 8000f2a:	f000 fae9 	bl	8001500 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2e:	2138      	movs	r1, #56	@ 0x38
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2260      	movs	r2, #96	@ 0x60
 8000f34:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5a:	1879      	adds	r1, r7, r1
 8000f5c:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	0018      	movs	r0, r3
 8000f62:	f004 fbb3 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8000f6a:	f000 fac9 	bl	8001500 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	0152      	lsls	r2, r2, #5
 8000f8c:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	0192      	lsls	r2, r2, #6
 8000f94:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	0492      	lsls	r2, r2, #18
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fc2:	1d3a      	adds	r2, r7, #4
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f005 fc35 	bl	8006838 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x1aa>
	{
		Error_Handler();
 8000fd2:	f000 fa95 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <MX_TIM1_Init+0x1bc>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 fd11 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b020      	add	sp, #128	@ 0x80
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	20000168 	.word	0x20000168
 8000fec:	40012c00 	.word	0x40012c00

08000ff0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	231c      	movs	r3, #28
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f006 fbdb 	bl	80077bc <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001006:	003b      	movs	r3, r7
 8001008:	0018      	movs	r0, r3
 800100a:	231c      	movs	r3, #28
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f006 fbd4 	bl	80077bc <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001014:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <MX_TIM2_Init+0xbc>)
 8001016:	2280      	movs	r2, #128	@ 0x80
 8001018:	05d2      	lsls	r2, r2, #23
 800101a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 800101c:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <MX_TIM2_Init+0xbc>)
 800101e:	2210      	movs	r2, #16
 8001020:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <MX_TIM2_Init+0xbc>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001028:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_TIM2_Init+0xbc>)
 800102a:	22fa      	movs	r2, #250	@ 0xfa
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_TIM2_Init+0xbc>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_TIM2_Init+0xbc>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_TIM2_Init+0xbc>)
 800103e:	0018      	movs	r0, r3
 8001040:	f003 fffe 	bl	8005040 <HAL_TIM_PWM_Init>
 8001044:	1e03      	subs	r3, r0, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001048:	f000 fa5a 	bl	8001500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	211c      	movs	r1, #28
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105a:	187a      	adds	r2, r7, r1
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_TIM2_Init+0xbc>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f005 fb7b 	bl	800675c <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 800106a:	f000 fa49 	bl	8001500 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	003b      	movs	r3, r7
 8001070:	2260      	movs	r2, #96	@ 0x60
 8001072:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 500;
 8001074:	003b      	movs	r3, r7
 8001076:	22fa      	movs	r2, #250	@ 0xfa
 8001078:	0052      	lsls	r2, r2, #1
 800107a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	003b      	movs	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	003b      	movs	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001088:	0039      	movs	r1, r7
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_TIM2_Init+0xbc>)
 800108c:	2208      	movs	r2, #8
 800108e:	0018      	movs	r0, r3
 8001090:	f004 fb1c 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 8001098:	f000 fa32 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <MX_TIM2_Init+0xbc>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fcae 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b00a      	add	sp, #40	@ 0x28
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001b4 	.word	0x200001b4

080010b0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	@ 0x30
 80010b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010b6:	231c      	movs	r3, #28
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	0018      	movs	r0, r3
 80010bc:	2314      	movs	r3, #20
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f006 fb7b 	bl	80077bc <memset>
	TIM_IC_InitTypeDef sConfigIC = {0};
 80010c6:	230c      	movs	r3, #12
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	0018      	movs	r0, r3
 80010cc:	2310      	movs	r3, #16
 80010ce:	001a      	movs	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f006 fb73 	bl	80077bc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d6:	003b      	movs	r3, r7
 80010d8:	0018      	movs	r0, r3
 80010da:	230c      	movs	r3, #12
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f006 fb6c 	bl	80077bc <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80010e4:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <MX_TIM3_Init+0x114>)
 80010e6:	4a38      	ldr	r2, [pc, #224]	@ (80011c8 <MX_TIM3_Init+0x118>)
 80010e8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <MX_TIM3_Init+0x114>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <MX_TIM3_Init+0x114>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80010f6:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <MX_TIM3_Init+0x114>)
 80010f8:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <MX_TIM3_Init+0x11c>)
 80010fa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <MX_TIM3_Init+0x114>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <MX_TIM3_Init+0x114>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001108:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <MX_TIM3_Init+0x114>)
 800110a:	0018      	movs	r0, r3
 800110c:	f004 f8da 	bl	80052c4 <HAL_TIM_IC_Init>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001114:	f000 f9f4 	bl	8001500 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001118:	211c      	movs	r1, #28
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2204      	movs	r2, #4
 800111e:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2260      	movs	r2, #96	@ 0x60
 8001124:	605a      	str	r2, [r3, #4]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
	sSlaveConfig.TriggerFilter = 0;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001138:	187a      	adds	r2, r7, r1
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <MX_TIM3_Init+0x114>)
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f004 fcee 	bl	8005b20 <HAL_TIM_SlaveConfigSynchro>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001148:	f000 f9da 	bl	8001500 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800114c:	210c      	movs	r1, #12
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2202      	movs	r2, #2
 8001152:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2202      	movs	r2, #2
 8001158:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001166:	1879      	adds	r1, r7, r1
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_TIM3_Init+0x114>)
 800116a:	2200      	movs	r2, #0
 800116c:	0018      	movs	r0, r3
 800116e:	f004 fa09 	bl	8005584 <HAL_TIM_IC_ConfigChannel>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0xca>
	{
		Error_Handler();
 8001176:	f000 f9c3 	bl	8001500 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800117a:	210c      	movs	r1, #12
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2201      	movs	r2, #1
 8001186:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001188:	1879      	adds	r1, r7, r1
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_TIM3_Init+0x114>)
 800118c:	2204      	movs	r2, #4
 800118e:	0018      	movs	r0, r3
 8001190:	f004 f9f8 	bl	8005584 <HAL_TIM_IC_ConfigChannel>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 8001198:	f000 f9b2 	bl	8001500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	003b      	movs	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a8:	003a      	movs	r2, r7
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_TIM3_Init+0x114>)
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f005 fad4 	bl	800675c <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x10c>
	{
		Error_Handler();
 80011b8:	f000 f9a2 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b00c      	add	sp, #48	@ 0x30
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000200 	.word	0x20000200
 80011c8:	40000400 	.word	0x40000400
 80011cc:	0000ffff 	.word	0x0000ffff

080011d0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	0018      	movs	r0, r3
 80011da:	230c      	movs	r3, #12
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f006 faec 	bl	80077bc <memset>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_TIM6_Init+0x6c>)
 80011e6:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <MX_TIM6_Init+0x70>)
 80011e8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_TIM6_Init+0x6c>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_TIM6_Init+0x6c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_TIM6_Init+0x6c>)
 80011f8:	22fa      	movs	r2, #250	@ 0xfa
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_TIM6_Init+0x6c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <MX_TIM6_Init+0x6c>)
 8001206:	0018      	movs	r0, r3
 8001208:	f003 fe66 	bl	8004ed8 <HAL_TIM_Base_Init>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM6_Init+0x44>
	{
		Error_Handler();
 8001210:	f000 f976 	bl	8001500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2220      	movs	r2, #32
 8001218:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001220:	1d3a      	adds	r2, r7, #4
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_TIM6_Init+0x6c>)
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f005 fa98 	bl	800675c <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM6_Init+0x64>
	{
		Error_Handler();
 8001230:	f000 f966 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b004      	add	sp, #16
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000024c 	.word	0x2000024c
 8001240:	40001000 	.word	0x40001000

08001244 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_IC_InitTypeDef sConfigIC = {0};
 800124a:	003b      	movs	r3, r7
 800124c:	0018      	movs	r0, r3
 800124e:	2310      	movs	r3, #16
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f006 fab2 	bl	80077bc <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_TIM16_Init+0x94>)
 800125a:	4a20      	ldr	r2, [pc, #128]	@ (80012dc <MX_TIM16_Init+0x98>)
 800125c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 0;
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_TIM16_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_TIM16_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_TIM16_Init+0x94>)
 800126c:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <MX_TIM16_Init+0x9c>)
 800126e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_TIM16_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_TIM16_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_TIM16_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM16_Init+0x94>)
 8001284:	0018      	movs	r0, r3
 8001286:	f003 fe27 	bl	8004ed8 <HAL_TIM_Base_Init>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM16_Init+0x4e>
	{
		Error_Handler();
 800128e:	f000 f937 	bl	8001500 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_TIM16_Init+0x94>)
 8001294:	0018      	movs	r0, r3
 8001296:	f004 f815 	bl	80052c4 <HAL_TIM_IC_Init>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM16_Init+0x5e>
	{
		Error_Handler();
 800129e:	f000 f92f 	bl	8001500 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012a2:	003b      	movs	r3, r7
 80012a4:	220a      	movs	r2, #10
 80012a6:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	003b      	movs	r3, r7
 80012aa:	2201      	movs	r2, #1
 80012ac:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ae:	003b      	movs	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 80012b4:	003b      	movs	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	0039      	movs	r1, r7
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_TIM16_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	0018      	movs	r0, r3
 80012c2:	f004 f95f 	bl	8005584 <HAL_TIM_IC_ConfigChannel>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM16_Init+0x8a>
	{
		Error_Handler();
 80012ca:	f000 f919 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	20000298 	.word	0x20000298
 80012dc:	40014400 	.word	0x40014400
 80012e0:	0000ffff 	.word	0x0000ffff

080012e4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012e8:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 80012ea:	4a24      	ldr	r2, [pc, #144]	@ (800137c <MX_USART2_UART_Init+0x98>)
 80012ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 80012f0:	22e1      	movs	r2, #225	@ 0xe1
 80012f2:	0252      	lsls	r2, r2, #9
 80012f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 800132e:	0018      	movs	r0, r3
 8001330:	f005 fbe2 	bl	8006af8 <HAL_UART_Init>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001338:	f000 f8e2 	bl	8001500 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 800133e:	2100      	movs	r1, #0
 8001340:	0018      	movs	r0, r3
 8001342:	f006 f95b 	bl	80075fc <HAL_UARTEx_SetTxFifoThreshold>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 800134a:	f000 f8d9 	bl	8001500 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001350:	2100      	movs	r1, #0
 8001352:	0018      	movs	r0, r3
 8001354:	f006 f992 	bl	800767c <HAL_UARTEx_SetRxFifoThreshold>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 800135c:	f000 f8d0 	bl	8001500 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 8001362:	0018      	movs	r0, r3
 8001364:	f006 f910 	bl	8007588 <HAL_UARTEx_DisableFifoMode>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d001      	beq.n	8001370 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 800136c:	f000 f8c8 	bl	8001500 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	200002e4 	.word	0x200002e4
 800137c:	40004400 	.word	0x40004400

08001380 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_DMA_Init+0x28>)
 8001388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800138a:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <MX_DMA_Init+0x28>)
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	639a      	str	r2, [r3, #56]	@ 0x38
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <MX_DMA_Init+0x28>)
 8001394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001396:	2201      	movs	r2, #1
 8001398:	4013      	ands	r3, r2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	40021000 	.word	0x40021000

080013ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	240c      	movs	r4, #12
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	0018      	movs	r0, r3
 80013b8:	2314      	movs	r3, #20
 80013ba:	001a      	movs	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	f006 f9fd 	bl	80077bc <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b4c      	ldr	r3, [pc, #304]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c6:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013c8:	2102      	movs	r1, #2
 80013ca:	430a      	orrs	r2, r1
 80013cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ce:	4b49      	ldr	r3, [pc, #292]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d2:	2202      	movs	r2, #2
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b46      	ldr	r3, [pc, #280]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013de:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e6:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ea:	2204      	movs	r2, #4
 80013ec:	4013      	ands	r3, r2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <MX_GPIO_Init+0x148>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <MX_GPIO_Init+0x148>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	483a      	ldr	r0, [pc, #232]	@ (80014f8 <MX_GPIO_Init+0x14c>)
 8001410:	2200      	movs	r2, #0
 8001412:	0019      	movs	r1, r3
 8001414:	f002 fe5f 	bl	80040d6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 8001418:	23a0      	movs	r3, #160	@ 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	@ 0x80
 8001420:	0018      	movs	r0, r3
 8001422:	f002 fe58 	bl	80040d6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 8001426:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <MX_GPIO_Init+0x150>)
 8001428:	2200      	movs	r2, #0
 800142a:	2140      	movs	r1, #64	@ 0x40
 800142c:	0018      	movs	r0, r3
 800142e:	f002 fe52 	bl	80040d6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : MCU_Remote_Pin */
	GPIO_InitStruct.Pin = MCU_Remote_Pin;
 8001432:	193b      	adds	r3, r7, r4
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	193b      	adds	r3, r7, r4
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001440:	193b      	adds	r3, r7, r4
 8001442:	2201      	movs	r2, #1
 8001444:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 8001446:	193b      	adds	r3, r7, r4
 8001448:	4a2c      	ldr	r2, [pc, #176]	@ (80014fc <MX_GPIO_Init+0x150>)
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f002 fcc1 	bl	8003dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001452:	0021      	movs	r1, r4
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2280      	movs	r2, #128	@ 0x80
 8001458:	0212      	lsls	r2, r2, #8
 800145a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	000c      	movs	r4, r1
 800145e:	193b      	adds	r3, r7, r4
 8001460:	2201      	movs	r2, #1
 8001462:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	193b      	adds	r3, r7, r4
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	193b      	adds	r3, r7, r4
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001470:	193b      	adds	r3, r7, r4
 8001472:	4a21      	ldr	r2, [pc, #132]	@ (80014f8 <MX_GPIO_Init+0x14c>)
 8001474:	0019      	movs	r1, r3
 8001476:	0010      	movs	r0, r2
 8001478:	f002 fcac 	bl	8003dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Status_Pin */
	GPIO_InitStruct.Pin = Status_Pin;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2201      	movs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 8001494:	193a      	adds	r2, r7, r4
 8001496:	23a0      	movs	r3, #160	@ 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f002 fc99 	bl	8003dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
	GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 80014b6:	193a      	adds	r2, r7, r4
 80014b8:	23a0      	movs	r3, #160	@ 0xa0
 80014ba:	05db      	lsls	r3, r3, #23
 80014bc:	0011      	movs	r1, r2
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fc88 	bl	8003dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : UV_LED_Pin */
	GPIO_InitStruct.Pin = UV_LED_Pin;
 80014c4:	0021      	movs	r1, r4
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	2240      	movs	r2, #64	@ 0x40
 80014ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	2201      	movs	r2, #1
 80014d0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <MX_GPIO_Init+0x150>)
 80014e2:	0019      	movs	r1, r3
 80014e4:	0010      	movs	r0, r2
 80014e6:	f002 fc75 	bl	8003dd4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b009      	add	sp, #36	@ 0x24
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000
 80014f8:	50000800 	.word	0x50000800
 80014fc:	50000400 	.word	0x50000400

08001500 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <Error_Handler+0x24>)
 800150e:	0019      	movs	r1, r3
 8001510:	0010      	movs	r0, r2
 8001512:	f002 fdfd 	bl	8004110 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001516:	23fa      	movs	r3, #250	@ 0xfa
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	0018      	movs	r0, r3
 800151c:	f000 fc9a 	bl	8001e54 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	e7f1      	b.n	8001508 <Error_Handler+0x8>
 8001524:	50000800 	.word	0x50000800

08001528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_MspInit+0x44>)
 8001530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_MspInit+0x44>)
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_MspInit+0x44>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	2201      	movs	r2, #1
 8001540:	4013      	ands	r3, r2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <HAL_MspInit+0x44>)
 8001548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_MspInit+0x44>)
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	0549      	lsls	r1, r1, #21
 8001550:	430a      	orrs	r2, r1
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_MspInit+0x44>)
 8001556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	4013      	ands	r3, r2
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b099      	sub	sp, #100	@ 0x64
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	234c      	movs	r3, #76	@ 0x4c
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	0018      	movs	r0, r3
 800157e:	2314      	movs	r3, #20
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f006 f91a 	bl	80077bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	2418      	movs	r4, #24
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	2334      	movs	r3, #52	@ 0x34
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f006 f912 	bl	80077bc <memset>
  if(hadc->Instance==ADC1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a43      	ldr	r2, [pc, #268]	@ (80016ac <HAL_ADC_MspInit+0x13c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d000      	beq.n	80015a4 <HAL_ADC_MspInit+0x34>
 80015a2:	e07f      	b.n	80016a4 <HAL_ADC_MspInit+0x134>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	2280      	movs	r2, #128	@ 0x80
 80015a8:	01d2      	lsls	r2, r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80015ac:	193b      	adds	r3, r7, r4
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	0018      	movs	r0, r3
 80015b6:	f003 fad7 	bl	8004b68 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80015be:	f7ff ff9f 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c6:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015c8:	2180      	movs	r1, #128	@ 0x80
 80015ca:	0349      	lsls	r1, r1, #13
 80015cc:	430a      	orrs	r2, r1
 80015ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80015d0:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	035b      	lsls	r3, r3, #13
 80015d8:	4013      	ands	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 80015fc:	2102      	movs	r1, #2
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
 8001602:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_ADC_MspInit+0x140>)
 8001604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 800160e:	244c      	movs	r4, #76	@ 0x4c
 8001610:	193b      	adds	r3, r7, r4
 8001612:	220b      	movs	r2, #11
 8001614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	193b      	adds	r3, r7, r4
 8001618:	2203      	movs	r2, #3
 800161a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	193a      	adds	r2, r7, r4
 8001624:	23a0      	movs	r3, #160	@ 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	0011      	movs	r1, r2
 800162a:	0018      	movs	r0, r3
 800162c:	f002 fbd2 	bl	8003dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2207      	movs	r2, #7
 8001634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2203      	movs	r2, #3
 800163a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	193b      	adds	r3, r7, r4
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	193b      	adds	r3, r7, r4
 8001644:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_ADC_MspInit+0x144>)
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f002 fbc3 	bl	8003dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 8001650:	4a1a      	ldr	r2, [pc, #104]	@ (80016bc <HAL_ADC_MspInit+0x14c>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 8001656:	2205      	movs	r2, #5
 8001658:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 8001668:	2280      	movs	r2, #128	@ 0x80
 800166a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	0052      	lsls	r2, r2, #1
 8001672:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 8001676:	2280      	movs	r2, #128	@ 0x80
 8001678:	00d2      	lsls	r2, r2, #3
 800167a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 800167e:	2220      	movs	r2, #32
 8001680:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 800168a:	0018      	movs	r0, r3
 800168c:	f002 f950 	bl	8003930 <HAL_DMA_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001694:	f7ff ff34 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 800169c:	651a      	str	r2, [r3, #80]	@ 0x50
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_ADC_MspInit+0x148>)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016a4:	46c0      	nop			@ (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b019      	add	sp, #100	@ 0x64
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	40012400 	.word	0x40012400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	50000400 	.word	0x50000400
 80016b8:	200000c8 	.word	0x200000c8
 80016bc:	40020008 	.word	0x40020008

080016c0 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	240c      	movs	r4, #12
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	0018      	movs	r0, r3
 80016ce:	2314      	movs	r3, #20
 80016d0:	001a      	movs	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	f006 f872 	bl	80077bc <memset>
  if(hcomp->Instance==COMP2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_COMP_MspInit+0x60>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d11a      	bne.n	8001718 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_COMP_MspInit+0x64>)
 80016e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_COMP_MspInit+0x64>)
 80016e8:	2102      	movs	r1, #2
 80016ea:	430a      	orrs	r2, r1
 80016ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_COMP_MspInit+0x64>)
 80016f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2210      	movs	r2, #16
 80016fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2203      	movs	r2, #3
 8001704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 800170c:	193b      	adds	r3, r7, r4
 800170e:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <HAL_COMP_MspInit+0x68>)
 8001710:	0019      	movs	r1, r3
 8001712:	0010      	movs	r0, r2
 8001714:	f002 fb5e 	bl	8003dd4 <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b009      	add	sp, #36	@ 0x24
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	40010204 	.word	0x40010204
 8001724:	40021000 	.word	0x40021000
 8001728:	50000400 	.word	0x50000400

0800172c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b08b      	sub	sp, #44	@ 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	2414      	movs	r4, #20
 8001736:	193b      	adds	r3, r7, r4
 8001738:	0018      	movs	r0, r3
 800173a:	2314      	movs	r3, #20
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f006 f83c 	bl	80077bc <memset>
  if(hdac->Instance==DAC1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_DAC_MspInit+0x80>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d129      	bne.n	80017a2 <HAL_DAC_MspInit+0x76>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <HAL_DAC_MspInit+0x84>)
 8001750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_DAC_MspInit+0x84>)
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	0589      	lsls	r1, r1, #22
 8001758:	430a      	orrs	r2, r1
 800175a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_DAC_MspInit+0x84>)
 800175e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	059b      	lsls	r3, r3, #22
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_DAC_MspInit+0x84>)
 800176c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_DAC_MspInit+0x84>)
 8001770:	2101      	movs	r1, #1
 8001772:	430a      	orrs	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_DAC_MspInit+0x84>)
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177a:	2201      	movs	r2, #1
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Ilevel_DAC_Pin|DAC2_Pin;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2230      	movs	r2, #48	@ 0x30
 8001786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2203      	movs	r2, #3
 800178c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	193a      	adds	r2, r7, r4
 8001796:	23a0      	movs	r3, #160	@ 0xa0
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	0011      	movs	r1, r2
 800179c:	0018      	movs	r0, r3
 800179e:	f002 fb19 	bl	8003dd4 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b00b      	add	sp, #44	@ 0x2c
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	40007400 	.word	0x40007400
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b099      	sub	sp, #100	@ 0x64
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	234c      	movs	r3, #76	@ 0x4c
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	0018      	movs	r0, r3
 80017c2:	2314      	movs	r3, #20
 80017c4:	001a      	movs	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	f005 fff8 	bl	80077bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	2418      	movs	r4, #24
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	0018      	movs	r0, r3
 80017d2:	2334      	movs	r3, #52	@ 0x34
 80017d4:	001a      	movs	r2, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	f005 fff0 	bl	80077bc <memset>
  if(htim_pwm->Instance==TIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_TIM_PWM_MspInit+0xe0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d140      	bne.n	8001868 <HAL_TIM_PWM_MspInit+0xb4>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2280      	movs	r2, #128	@ 0x80
 80017ea:	0392      	lsls	r2, r2, #14
 80017ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	0018      	movs	r0, r3
 80017f8:	f003 f9b6 	bl	8004b68 <HAL_RCCEx_PeriphCLKConfig>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 8001800:	f7ff fe7e 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 8001806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	0109      	lsls	r1, r1, #4
 800180e:	430a      	orrs	r2, r1
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 8001814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4013      	ands	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 8001822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 8001826:	2101      	movs	r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	635a      	str	r2, [r3, #52]	@ 0x34
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 800182e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001838:	214c      	movs	r1, #76	@ 0x4c
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2240      	movs	r2, #64	@ 0x40
 800183e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2212      	movs	r2, #18
 8001844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2201      	movs	r2, #1
 800184a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2202      	movs	r2, #2
 8001856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	187a      	adds	r2, r7, r1
 800185a:	23a0      	movs	r3, #160	@ 0xa0
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f002 fab7 	bl	8003dd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001866:	e011      	b.n	800188c <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	05db      	lsls	r3, r3, #23
 8001870:	429a      	cmp	r2, r3
 8001872:	d10b      	bne.n	800188c <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 8001876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_TIM_PWM_MspInit+0xe4>)
 8001882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b019      	add	sp, #100	@ 0x64
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	40012c00 	.word	0x40012c00
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	2414      	movs	r4, #20
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	0018      	movs	r0, r3
 80018aa:	2314      	movs	r3, #20
 80018ac:	001a      	movs	r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	f005 ff84 	bl	80077bc <memset>
  if(htim_ic->Instance==TIM3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <HAL_TIM_IC_MspInit+0x88>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12d      	bne.n	800191a <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <HAL_TIM_IC_MspInit+0x8c>)
 80018c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_TIM_IC_MspInit+0x8c>)
 80018c4:	2102      	movs	r1, #2
 80018c6:	430a      	orrs	r2, r1
 80018c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_TIM_IC_MspInit+0x8c>)
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <HAL_TIM_IC_MspInit+0x8c>)
 80018d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HAL_TIM_IC_MspInit+0x8c>)
 80018dc:	2102      	movs	r1, #2
 80018de:	430a      	orrs	r2, r1
 80018e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_TIM_IC_MspInit+0x8c>)
 80018e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_Mask_Pin;
 80018ee:	0021      	movs	r1, r4
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2220      	movs	r2, #32
 80018f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2202      	movs	r2, #2
 80018fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2201      	movs	r2, #1
 800190c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_Mask_GPIO_Port, &GPIO_InitStruct);
 800190e:	187b      	adds	r3, r7, r1
 8001910:	4a06      	ldr	r2, [pc, #24]	@ (800192c <HAL_TIM_IC_MspInit+0x90>)
 8001912:	0019      	movs	r1, r3
 8001914:	0010      	movs	r0, r2
 8001916:	f002 fa5d 	bl	8003dd4 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b00b      	add	sp, #44	@ 0x2c
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	40000400 	.word	0x40000400
 8001928:	40021000 	.word	0x40021000
 800192c:	50000400 	.word	0x50000400

08001930 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	2314      	movs	r3, #20
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	0018      	movs	r0, r3
 800193e:	2314      	movs	r3, #20
 8001940:	001a      	movs	r2, r3
 8001942:	2100      	movs	r1, #0
 8001944:	f005 ff3a 	bl	80077bc <memset>
  if(htim_base->Instance==TIM6)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <HAL_TIM_Base_MspInit+0xc0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10c      	bne.n	800196c <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001952:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001956:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001958:	2110      	movs	r1, #16
 800195a:	430a      	orrs	r2, r1
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001962:	2210      	movs	r2, #16
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800196a:	e03d      	b.n	80019e8 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM16)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a21      	ldr	r2, [pc, #132]	@ (80019f8 <HAL_TIM_Base_MspInit+0xc8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d138      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 800197c:	2180      	movs	r1, #128	@ 0x80
 800197e:	0289      	lsls	r1, r1, #10
 8001980:	430a      	orrs	r2, r1
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001998:	2102      	movs	r1, #2
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	@ 0x34
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_TIM_Base_MspInit+0xc4>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019aa:	2114      	movs	r1, #20
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2202      	movs	r2, #2
 80019b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2202      	movs	r2, #2
 80019ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	4a0b      	ldr	r2, [pc, #44]	@ (80019fc <HAL_TIM_Base_MspInit+0xcc>)
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	f002 f9fe 	bl	8003dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2015      	movs	r0, #21
 80019de:	f001 fd37 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80019e2:	2015      	movs	r0, #21
 80019e4:	f001 fd49 	bl	800347a <HAL_NVIC_EnableIRQ>
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b00a      	add	sp, #40	@ 0x28
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40001000 	.word	0x40001000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40014400 	.word	0x40014400
 80019fc:	50000400 	.word	0x50000400

08001a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b08b      	sub	sp, #44	@ 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	2414      	movs	r4, #20
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2314      	movs	r3, #20
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f005 fed2 	bl	80077bc <memset>
  if(htim->Instance==TIM1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a29      	ldr	r2, [pc, #164]	@ (8001ac4 <HAL_TIM_MspPostInit+0xc4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d124      	bne.n	8001a6c <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <HAL_TIM_MspPostInit+0xc8>)
 8001a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_TIM_MspPostInit+0xc8>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_TIM_MspPostInit+0xc8>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a32:	2201      	movs	r2, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	0052      	lsls	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	0021      	movs	r1, r4
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2202      	movs	r2, #2
 8001a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2203      	movs	r2, #3
 8001a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2202      	movs	r2, #2
 8001a5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	187a      	adds	r2, r7, r1
 8001a5e:	23a0      	movs	r3, #160	@ 0xa0
 8001a60:	05db      	lsls	r3, r3, #23
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 f9b5 	bl	8003dd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a6a:	e027      	b.n	8001abc <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	05db      	lsls	r3, r3, #23
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d121      	bne.n	8001abc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_TIM_MspPostInit+0xc8>)
 8001a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_TIM_MspPostInit+0xc8>)
 8001a7e:	2104      	movs	r1, #4
 8001a80:	430a      	orrs	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_TIM_MspPostInit+0xc8>)
 8001a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001a90:	2114      	movs	r1, #20
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2240      	movs	r2, #64	@ 0x40
 8001a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2202      	movs	r2, #2
 8001aae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	4a06      	ldr	r2, [pc, #24]	@ (8001acc <HAL_TIM_MspPostInit+0xcc>)
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	0010      	movs	r0, r2
 8001ab8:	f002 f98c 	bl	8003dd4 <HAL_GPIO_Init>
}
 8001abc:	46c0      	nop			@ (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b00b      	add	sp, #44	@ 0x2c
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	50000800 	.word	0x50000800

08001ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b097      	sub	sp, #92	@ 0x5c
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	2344      	movs	r3, #68	@ 0x44
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	0018      	movs	r0, r3
 8001ade:	2314      	movs	r3, #20
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f005 fe6a 	bl	80077bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	2410      	movs	r4, #16
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	0018      	movs	r0, r3
 8001aee:	2334      	movs	r3, #52	@ 0x34
 8001af0:	001a      	movs	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f005 fe62 	bl	80077bc <memset>
  if(huart->Instance==USART2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	@ (8001b88 <HAL_UART_MspInit+0xb8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d13e      	bne.n	8001b80 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	0018      	movs	r0, r3
 8001b12:	f003 f829 	bl	8004b68 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b1a:	f7ff fcf1 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	0289      	lsls	r1, r1, #10
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_UART_MspInit+0xbc>)
 8001b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001b52:	2144      	movs	r1, #68	@ 0x44
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	4a0e      	ldr	r2, [pc, #56]	@ (8001b90 <HAL_UART_MspInit+0xc0>)
 8001b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2201      	movs	r2, #1
 8001b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	187a      	adds	r2, r7, r1
 8001b74:	23a0      	movs	r3, #160	@ 0xa0
 8001b76:	05db      	lsls	r3, r3, #23
 8001b78:	0011      	movs	r1, r2
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f002 f92a 	bl	8003dd4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b017      	add	sp, #92	@ 0x5c
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	00008004 	.word	0x00008004

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	46c0      	nop			@ (mov r8, r8)
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbc:	f000 f92e 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <DMA1_Channel1_IRQHandler+0x50>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f001 ffbe 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
	adc_24V = adc_buffer[0]; // 4095 = 36.3 V
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <DMA1_Channel1_IRQHandler+0x54>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <DMA1_Channel1_IRQHandler+0x58>)
 8001bdc:	801a      	strh	r2, [r3, #0]
	adc_tempMOSFET = adc_buffer[1]; // 2482 = 2V = 90°C
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <DMA1_Channel1_IRQHandler+0x54>)
 8001be0:	885b      	ldrh	r3, [r3, #2]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <DMA1_Channel1_IRQHandler+0x5c>)
 8001be6:	801a      	strh	r2, [r3, #0]
	adc_uSenseLamp = adc_buffer[2];
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <DMA1_Channel1_IRQHandler+0x54>)
 8001bea:	889b      	ldrh	r3, [r3, #4]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <DMA1_Channel1_IRQHandler+0x60>)
 8001bf0:	801a      	strh	r2, [r3, #0]
	adc_iSenseLamp = adc_buffer[3];
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <DMA1_Channel1_IRQHandler+0x54>)
 8001bf4:	88db      	ldrh	r3, [r3, #6]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <DMA1_Channel1_IRQHandler+0x64>)
 8001bfa:	801a      	strh	r2, [r3, #0]
	adc_lampIntensity = adc_buffer[4];
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <DMA1_Channel1_IRQHandler+0x54>)
 8001bfe:	891b      	ldrh	r3, [r3, #8]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <DMA1_Channel1_IRQHandler+0x68>)
 8001c04:	801a      	strh	r2, [r3, #0]
	adc_iSenseIn = adc_buffer[5]; // 2707 = 24V,  4095 = 0.825 A
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <DMA1_Channel1_IRQHandler+0x54>)
 8001c08:	895b      	ldrh	r3, [r3, #10]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <DMA1_Channel1_IRQHandler+0x6c>)
 8001c0e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	200000c8 	.word	0x200000c8
 8001c1c:	2000004c 	.word	0x2000004c
 8001c20:	20000058 	.word	0x20000058
 8001c24:	2000005a 	.word	0x2000005a
 8001c28:	2000005c 	.word	0x2000005c
 8001c2c:	2000005e 	.word	0x2000005e
 8001c30:	20000060 	.word	0x20000060
 8001c34:	20000062 	.word	0x20000062

08001c38 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <ADC1_COMP_IRQHandler+0x14>)
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f000 fcb6 	bl	80025b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	20000064 	.word	0x20000064

08001c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <TIM3_IRQHandler+0x14>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f003 fb8c 	bl	8005374 <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	20000200 	.word	0x20000200

08001c68 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f003 fb80 	bl	8005374 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f001 fc96 	bl	80035a8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	23fa      	movs	r3, #250	@ 0xfa
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d206      	bcs.n	8001c9c <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001c98:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001c9a:	e00b      	b.n	8001cb4 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	23fa      	movs	r3, #250	@ 0xfa
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d305      	bcc.n	8001cb4 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	2000024c 	.word	0x2000024c
 8001cc0:	20000154 	.word	0x20000154
 8001cc4:	20000049 	.word	0x20000049
 8001cc8:	2000037c 	.word	0x2000037c
 8001ccc:	2000004a 	.word	0x2000004a

08001cd0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <TIM16_IRQHandler+0x14>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f003 fb4c 	bl	8005374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	20000298 	.word	0x20000298

08001ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf4:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cf8:	f7ff fff6 	bl	8001ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d22:	f005 fd53 	bl	80077cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d26:	f7fe fc79 	bl	800061c <main>

08001d2a <LoopForever>:

LoopForever:
  b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   r0, =_estack
 8001d2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001d38:	08007980 	.word	0x08007980
  ldr r2, =_sbss
 8001d3c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d40:	20000384 	.word	0x20000384

08001d44 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <CEC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_Init+0x3c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Init+0x3c>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0049      	lsls	r1, r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	2003      	movs	r0, #3
 8001d64:	f000 f810 	bl	8001d88 <HAL_InitTick>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fbd8 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	781b      	ldrb	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_InitTick+0x88>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d02b      	beq.n	8001df8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_InitTick+0x8c>)
 8001da2:	681c      	ldr	r4, [r3, #0]
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_InitTick+0x88>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	0019      	movs	r1, r3
 8001daa:	23fa      	movs	r3, #250	@ 0xfa
 8001dac:	0098      	lsls	r0, r3, #2
 8001dae:	f7fe f9a9 	bl	8000104 <__udivsi3>
 8001db2:	0003      	movs	r3, r0
 8001db4:	0019      	movs	r1, r3
 8001db6:	0020      	movs	r0, r4
 8001db8:	f7fe f9a4 	bl	8000104 <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f001 fb6b 	bl	800349a <HAL_SYSTICK_Config>
 8001dc4:	1e03      	subs	r3, r0, #0
 8001dc6:	d112      	bne.n	8001dee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d80a      	bhi.n	8001de4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f001 fb3a 	bl	8003450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <HAL_InitTick+0x90>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00d      	b.n	8001e00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001de4:	230f      	movs	r3, #15
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e008      	b.n	8001e00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dee:	230f      	movs	r3, #15
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e003      	b.n	8001e00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b005      	add	sp, #20
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	20000024 	.word	0x20000024
 8001e14:	2000001c 	.word	0x2000001c
 8001e18:	20000020 	.word	0x20000020

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	001a      	movs	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	18d2      	adds	r2, r2, r3
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	20000024 	.word	0x20000024
 8001e3c:	20000380 	.word	0x20000380

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	20000380 	.word	0x20000380

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	001a      	movs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	20000024 	.word	0x20000024

08001e9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001eac:	401a      	ands	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	fe3fffff 	.word	0xfe3fffff

08001ec4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	23e0      	movs	r3, #224	@ 0xe0
 8001ed2:	045b      	lsls	r3, r3, #17
 8001ed4:	4013      	ands	r3, r2
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}

08001ede <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	2107      	movs	r1, #7
 8001ef6:	4091      	lsls	r1, r2
 8001ef8:	000a      	movs	r2, r1
 8001efa:	43d2      	mvns	r2, r2
 8001efc:	401a      	ands	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2104      	movs	r1, #4
 8001f02:	400b      	ands	r3, r1
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4099      	lsls	r1, r3
 8001f08:	000b      	movs	r3, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	2104      	movs	r1, #4
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	4091      	lsls	r1, r2
 8001f30:	000a      	movs	r2, r1
 8001f32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2104      	movs	r1, #4
 8001f38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f3a:	40da      	lsrs	r2, r3
 8001f3c:	0013      	movs	r3, r2
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	23c0      	movs	r3, #192	@ 0xc0
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	211f      	movs	r1, #31
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	210f      	movs	r1, #15
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	4019      	ands	r1, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	201f      	movs	r0, #31
 8001f94:	4003      	ands	r3, r0
 8001f96:	4099      	lsls	r1, r3
 8001f98:	000b      	movs	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	035b      	lsls	r3, r3, #13
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	0352      	lsls	r2, r2, #13
 8001fdc:	0b52      	lsrs	r2, r2, #13
 8001fde:	43d2      	mvns	r2, r2
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}

08001fee <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	4013      	ands	r3, r2
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	0212      	lsls	r2, r2, #8
 800201c:	43d2      	mvns	r2, r2
 800201e:	401a      	ands	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	400b      	ands	r3, r1
 8002028:	4904      	ldr	r1, [pc, #16]	@ (800203c <LL_ADC_SetChannelSamplingTime+0x34>)
 800202a:	400b      	ands	r3, r1
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b004      	add	sp, #16
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	07ffff00 	.word	0x07ffff00

08002040 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <LL_ADC_EnableInternalRegulator+0x24>)
 800204e:	4013      	ands	r3, r2
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	0552      	lsls	r2, r2, #21
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	6fffffe8 	.word	0x6fffffe8

08002068 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	401a      	ands	r2, r3
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	055b      	lsls	r3, r3, #21
 800207e:	429a      	cmp	r2, r3
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <LL_ADC_Enable+0x20>)
 800209e:	4013      	ands	r3, r2
 80020a0:	2201      	movs	r2, #1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	7fffffe8 	.word	0x7fffffe8

080020b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <LL_ADC_Disable+0x20>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	2202      	movs	r2, #2
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	7fffffe8 	.word	0x7fffffe8

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <LL_ADC_REG_StartConversion+0x20>)
 800210a:	4013      	ands	r3, r2
 800210c:	2204      	movs	r2, #4
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002114:	46c0      	nop			@ (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}
 800211c:	7fffffe8 	.word	0x7fffffe8

08002120 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2204      	movs	r2, #4
 800212e:	4013      	ands	r3, r2
 8002130:	2b04      	cmp	r3, #4
 8002132:	d101      	bne.n	8002138 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	231f      	movs	r3, #31
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e17f      	b.n	800246a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff f9fb 	bl	8001570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2254      	movs	r2, #84	@ 0x54
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff ff6b 	bl	8002068 <LL_ADC_IsInternalRegulatorEnabled>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d115      	bne.n	80021c2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff ff50 	bl	8002040 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a0:	4bb4      	ldr	r3, [pc, #720]	@ (8002474 <HAL_ADC_Init+0x330>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	49b4      	ldr	r1, [pc, #720]	@ (8002478 <HAL_ADC_Init+0x334>)
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7fd ffac 	bl	8000104 <__udivsi3>
 80021ac:	0003      	movs	r3, r0
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021b4:	e002      	b.n	80021bc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f9      	bne.n	80021b6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff ff4e 	bl	8002068 <LL_ADC_IsInternalRegulatorEnabled>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d10f      	bne.n	80021f0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	2210      	movs	r2, #16
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	2201      	movs	r2, #1
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021e8:	231f      	movs	r3, #31
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ff93 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 80021fa:	0003      	movs	r3, r0
 80021fc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	2210      	movs	r2, #16
 8002204:	4013      	ands	r3, r2
 8002206:	d000      	beq.n	800220a <HAL_ADC_Init+0xc6>
 8002208:	e122      	b.n	8002450 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d000      	beq.n	8002212 <HAL_ADC_Init+0xce>
 8002210:	e11e      	b.n	8002450 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	4a99      	ldr	r2, [pc, #612]	@ (800247c <HAL_ADC_Init+0x338>)
 8002218:	4013      	ands	r3, r2
 800221a:	2202      	movs	r2, #2
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ff56 	bl	80020d8 <LL_ADC_IsEnabled>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d000      	beq.n	8002232 <HAL_ADC_Init+0xee>
 8002230:	e0ad      	b.n	800238e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7e1b      	ldrb	r3, [r3, #24]
 800223a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800223c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7e5b      	ldrb	r3, [r3, #25]
 8002242:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002244:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7e9b      	ldrb	r3, [r3, #26]
 800224a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800224c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_ADC_Init+0x118>
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	015b      	lsls	r3, r3, #5
 800225a:	e000      	b.n	800225e <HAL_ADC_Init+0x11a>
 800225c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800225e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002264:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	da04      	bge.n	8002278 <HAL_ADC_Init+0x134>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	e001      	b.n	800227c <HAL_ADC_Init+0x138>
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800227c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	212c      	movs	r1, #44	@ 0x2c
 8002282:	5c5b      	ldrb	r3, [r3, r1]
 8002284:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002286:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	5c9b      	ldrb	r3, [r3, r2]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d115      	bne.n	80022c4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7e9b      	ldrb	r3, [r3, #26]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2280      	movs	r2, #128	@ 0x80
 80022a4:	0252      	lsls	r2, r2, #9
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e00b      	b.n	80022c4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	2220      	movs	r2, #32
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	2201      	movs	r2, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d0:	23e0      	movs	r3, #224	@ 0xe0
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022da:	4313      	orrs	r3, r2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a65      	ldr	r2, [pc, #404]	@ (8002480 <HAL_ADC_Init+0x33c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0f9b      	lsrs	r3, r3, #30
 80022fe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002304:	4313      	orrs	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	223c      	movs	r2, #60	@ 0x3c
 8002310:	5c9b      	ldrb	r3, [r3, r2]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d111      	bne.n	800233a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0f9b      	lsrs	r3, r3, #30
 800231c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002322:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002328:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800232e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	2201      	movs	r2, #1
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4a50      	ldr	r2, [pc, #320]	@ (8002484 <HAL_ADC_Init+0x340>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	430a      	orrs	r2, r1
 800234e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	23c0      	movs	r3, #192	@ 0xc0
 8002356:	061b      	lsls	r3, r3, #24
 8002358:	429a      	cmp	r2, r3
 800235a:	d018      	beq.n	800238e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	05db      	lsls	r3, r3, #23
 8002364:	429a      	cmp	r2, r3
 8002366:	d012      	beq.n	800238e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	429a      	cmp	r2, r3
 8002372:	d00c      	beq.n	800238e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002374:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <HAL_ADC_Init+0x344>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a44      	ldr	r2, [pc, #272]	@ (800248c <HAL_ADC_Init+0x348>)
 800237a:	4013      	ands	r3, r2
 800237c:	0019      	movs	r1, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	23f0      	movs	r3, #240	@ 0xf0
 8002384:	039b      	lsls	r3, r3, #14
 8002386:	401a      	ands	r2, r3
 8002388:	4b3f      	ldr	r3, [pc, #252]	@ (8002488 <HAL_ADC_Init+0x344>)
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002396:	001a      	movs	r2, r3
 8002398:	2100      	movs	r1, #0
 800239a:	f7ff fda0 	bl	8001ede <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	493a      	ldr	r1, [pc, #232]	@ (8002490 <HAL_ADC_Init+0x34c>)
 80023a8:	001a      	movs	r2, r3
 80023aa:	f7ff fd98 	bl	8001ede <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2110      	movs	r1, #16
 80023c2:	4249      	negs	r1, r1
 80023c4:	430a      	orrs	r2, r1
 80023c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80023c8:	e018      	b.n	80023fc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	039b      	lsls	r3, r3, #14
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d112      	bne.n	80023fc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	221c      	movs	r2, #28
 80023e6:	4013      	ands	r3, r2
 80023e8:	2210      	movs	r2, #16
 80023ea:	4252      	negs	r2, r2
 80023ec:	409a      	lsls	r2, r3
 80023ee:	0011      	movs	r1, r2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2100      	movs	r1, #0
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fd88 	bl	8001f18 <LL_ADC_GetSamplingTimeCommonChannels>
 8002408:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800240e:	429a      	cmp	r2, r3
 8002410:	d10b      	bne.n	800242a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	2203      	movs	r2, #3
 800241e:	4393      	bics	r3, r2
 8002420:	2201      	movs	r2, #1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002428:	e01c      	b.n	8002464 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	2212      	movs	r2, #18
 8002430:	4393      	bics	r3, r2
 8002432:	2210      	movs	r2, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	2201      	movs	r2, #1
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002446:	231f      	movs	r3, #31
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800244e:	e009      	b.n	8002464 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	2210      	movs	r2, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800245c:	231f      	movs	r3, #31
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002464:	231f      	movs	r3, #31
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	781b      	ldrb	r3, [r3, #0]
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b008      	add	sp, #32
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	2000001c 	.word	0x2000001c
 8002478:	00030d40 	.word	0x00030d40
 800247c:	fffffefd 	.word	0xfffffefd
 8002480:	ffde0201 	.word	0xffde0201
 8002484:	1ffffc02 	.word	0x1ffffc02
 8002488:	40012708 	.word	0x40012708
 800248c:	ffc3ffff 	.word	0xffc3ffff
 8002490:	07ffff04 	.word	0x07ffff04

08002494 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff fe3b 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d16c      	bne.n	8002588 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2254      	movs	r2, #84	@ 0x54
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_Start_DMA+0x28>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e06c      	b.n	8002596 <HAL_ADC_Start_DMA+0x102>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2254      	movs	r2, #84	@ 0x54
 80024c0:	2101      	movs	r1, #1
 80024c2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d113      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff fdff 	bl	80020d8 <LL_ADC_IsEnabled>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff fde6 	bl	80020b4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2101      	movs	r1, #1
 80024f4:	430a      	orrs	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024f8:	2517      	movs	r5, #23
 80024fa:	197c      	adds	r4, r7, r5
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fb66 	bl	8002bd0 <ADC_Enable>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002508:	002c      	movs	r4, r5
 800250a:	193b      	adds	r3, r7, r4
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d13e      	bne.n	8002590 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <HAL_ADC_Start_DMA+0x10c>)
 8002518:	4013      	ands	r3, r2
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	0052      	lsls	r2, r2, #1
 800251e:	431a      	orrs	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <HAL_ADC_Start_DMA+0x110>)
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002536:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <HAL_ADC_Start_DMA+0x114>)
 8002538:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <HAL_ADC_Start_DMA+0x118>)
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	221c      	movs	r2, #28
 8002548:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2254      	movs	r2, #84	@ 0x54
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2110      	movs	r1, #16
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3340      	adds	r3, #64	@ 0x40
 800256c:	0019      	movs	r1, r3
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	193c      	adds	r4, r7, r4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f001 fa66 	bl	8003a44 <HAL_DMA_Start_IT>
 8002578:	0003      	movs	r3, r0
 800257a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff fdbb 	bl	80020fc <LL_ADC_REG_StartConversion>
 8002586:	e003      	b.n	8002590 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002588:	2317      	movs	r3, #23
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002590:	2317      	movs	r3, #23
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	fffff0fe 	.word	0xfffff0fe
 80025a4:	08002cdd 	.word	0x08002cdd
 80025a8:	08002da5 	.word	0x08002da5
 80025ac:	08002dc3 	.word	0x08002dc3

080025b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d017      	beq.n	8002604 <HAL_ADC_IRQHandler+0x54>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	2210      	movs	r2, #16
 80025e2:	4013      	ands	r3, r2
 80025e4:	d106      	bne.n	80025f4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fc0e 	bl	8002e18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	d003      	beq.n	8002614 <HAL_ADC_IRQHandler+0x64>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d107      	bne.n	8002624 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2208      	movs	r2, #8
 8002618:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800261a:	d04d      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2208      	movs	r2, #8
 8002620:	4013      	ands	r3, r2
 8002622:	d049      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	2210      	movs	r2, #16
 800262a:	4013      	ands	r3, r2
 800262c:	d106      	bne.n	800263c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff fc80 	bl	8001f46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d02e      	beq.n	80026a8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7e9b      	ldrb	r3, [r3, #26]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d12a      	bne.n	80026a8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2208      	movs	r2, #8
 800265a:	4013      	ands	r3, r2
 800265c:	2b08      	cmp	r3, #8
 800265e:	d123      	bne.n	80026a8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff fd5b 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d110      	bne.n	8002690 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	210c      	movs	r1, #12
 800267a:	438a      	bics	r2, r1
 800267c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	4a56      	ldr	r2, [pc, #344]	@ (80027dc <HAL_ADC_IRQHandler+0x22c>)
 8002684:	4013      	ands	r3, r2
 8002686:	2201      	movs	r2, #1
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58
 800268e:	e00b      	b.n	80026a8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	2220      	movs	r2, #32
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	2201      	movs	r2, #1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f898 	bl	80027e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	220c      	movs	r2, #12
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2280      	movs	r2, #128	@ 0x80
 80026bc:	4013      	ands	r3, r2
 80026be:	d012      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x136>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2280      	movs	r2, #128	@ 0x80
 80026c4:	4013      	ands	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	0252      	lsls	r2, r2, #9
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f891 	bl	8002800 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d014      	beq.n	800271a <HAL_ADC_IRQHandler+0x16a>
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	d00f      	beq.n	800271a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	2280      	movs	r2, #128	@ 0x80
 8002700:	0292      	lsls	r2, r2, #10
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	0018      	movs	r0, r3
 800270c:	f000 fb74 	bl	8002df8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2280      	movs	r2, #128	@ 0x80
 8002716:	0052      	lsls	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d014      	beq.n	800274e <HAL_ADC_IRQHandler+0x19e>
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d00f      	beq.n	800274e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	02d2      	lsls	r2, r2, #11
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fb62 	bl	8002e08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2210      	movs	r2, #16
 8002752:	4013      	ands	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_ADC_IRQHandler+0x1fe>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2210      	movs	r2, #16
 800275a:	4013      	ands	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002766:	2301      	movs	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e008      	b.n	800277e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff fc3c 	bl	8001fee <LL_ADC_REG_GetDMATransfer>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800277a:	2301      	movs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d110      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	00d2      	lsls	r2, r2, #3
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	2202      	movs	r2, #2
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f835 	bl	8002810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2210      	movs	r2, #16
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	4013      	ands	r3, r2
 80027b6:	d00d      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x224>
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	4013      	ands	r3, r2
 80027c0:	d008      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fb2f 	bl	8002e28 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0192      	lsls	r2, r2, #6
 80027d2:	601a      	str	r2, [r3, #0]
  }
}
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b006      	add	sp, #24
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fffffefe 	.word	0xfffffefe

080027e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2317      	movs	r3, #23
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2254      	movs	r2, #84	@ 0x54
 800283a:	5c9b      	ldrb	r3, [r3, r2]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x24>
 8002840:	2302      	movs	r3, #2
 8002842:	e1c0      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x3a6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2254      	movs	r2, #84	@ 0x54
 8002848:	2101      	movs	r1, #1
 800284a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff fc65 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d000      	beq.n	800285c <HAL_ADC_ConfigChannel+0x3c>
 800285a:	e1a3      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d100      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x46>
 8002864:	e143      	b.n	8002aee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	429a      	cmp	r2, r3
 8002870:	d004      	beq.n	800287c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002876:	4ac1      	ldr	r2, [pc, #772]	@ (8002b7c <HAL_ADC_ConfigChannel+0x35c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0019      	movs	r1, r3
 8002886:	0010      	movs	r0, r2
 8002888:	f7ff fb8e 	bl	8001fa8 <LL_ADC_REG_SetSequencerChAdd>
 800288c:	e0c9      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	211f      	movs	r1, #31
 8002898:	400b      	ands	r3, r1
 800289a:	210f      	movs	r1, #15
 800289c:	4099      	lsls	r1, r3
 800289e:	000b      	movs	r3, r1
 80028a0:	43db      	mvns	r3, r3
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	035b      	lsls	r3, r3, #13
 80028ac:	0b5b      	lsrs	r3, r3, #13
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x9c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	221f      	movs	r2, #31
 80028b8:	4013      	ands	r3, r2
 80028ba:	e098      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d000      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0xa8>
 80028c6:	e091      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1cc>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	d000      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0xb4>
 80028d2:	e089      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1c8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2204      	movs	r2, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	d000      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0xc0>
 80028de:	e081      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x1c4>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2208      	movs	r2, #8
 80028e6:	4013      	ands	r3, r2
 80028e8:	d000      	beq.n	80028ec <HAL_ADC_ConfigChannel+0xcc>
 80028ea:	e079      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x1c0>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2210      	movs	r2, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d000      	beq.n	80028f8 <HAL_ADC_ConfigChannel+0xd8>
 80028f6:	e071      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1bc>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2220      	movs	r2, #32
 80028fe:	4013      	ands	r3, r2
 8002900:	d000      	beq.n	8002904 <HAL_ADC_ConfigChannel+0xe4>
 8002902:	e069      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1b8>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2240      	movs	r2, #64	@ 0x40
 800290a:	4013      	ands	r3, r2
 800290c:	d000      	beq.n	8002910 <HAL_ADC_ConfigChannel+0xf0>
 800290e:	e061      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x1b4>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	4013      	ands	r3, r2
 8002918:	d000      	beq.n	800291c <HAL_ADC_ConfigChannel+0xfc>
 800291a:	e059      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x1b0>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4013      	ands	r3, r2
 8002926:	d151      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1ac>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d149      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1a8>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4013      	ands	r3, r2
 800293e:	d141      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1a4>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4013      	ands	r3, r2
 800294a:	d139      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1a0>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	4013      	ands	r3, r2
 8002956:	d131      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x19c>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	019b      	lsls	r3, r3, #6
 8002960:	4013      	ands	r3, r2
 8002962:	d129      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x198>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	4013      	ands	r3, r2
 800296e:	d121      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x194>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4013      	ands	r3, r2
 800297a:	d119      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x190>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	4013      	ands	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x18c>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	4013      	ands	r3, r2
 8002992:	d109      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x188>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	02db      	lsls	r3, r3, #11
 800299c:	4013      	ands	r3, r2
 800299e:	d001      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x184>
 80029a0:	2312      	movs	r3, #18
 80029a2:	e024      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029a4:	2300      	movs	r3, #0
 80029a6:	e022      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029a8:	2311      	movs	r3, #17
 80029aa:	e020      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029ac:	2310      	movs	r3, #16
 80029ae:	e01e      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029b0:	230f      	movs	r3, #15
 80029b2:	e01c      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029b4:	230e      	movs	r3, #14
 80029b6:	e01a      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029b8:	230d      	movs	r3, #13
 80029ba:	e018      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029bc:	230c      	movs	r3, #12
 80029be:	e016      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029c0:	230b      	movs	r3, #11
 80029c2:	e014      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029c4:	230a      	movs	r3, #10
 80029c6:	e012      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029c8:	2309      	movs	r3, #9
 80029ca:	e010      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029cc:	2308      	movs	r3, #8
 80029ce:	e00e      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029d0:	2307      	movs	r3, #7
 80029d2:	e00c      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029d4:	2306      	movs	r3, #6
 80029d6:	e00a      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029d8:	2305      	movs	r3, #5
 80029da:	e008      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029dc:	2304      	movs	r3, #4
 80029de:	e006      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e004      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e002      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_ADC_ConfigChannel+0x1ce>
 80029ec:	2300      	movs	r3, #0
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6852      	ldr	r2, [r2, #4]
 80029f2:	201f      	movs	r0, #31
 80029f4:	4002      	ands	r2, r0
 80029f6:	4093      	lsls	r3, r2
 80029f8:	000a      	movs	r2, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d808      	bhi.n	8002a22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	f7ff faa3 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	001a      	movs	r2, r3
 8002a30:	f7ff faea 	bl	8002008 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db00      	blt.n	8002a3e <HAL_ADC_ConfigChannel+0x21e>
 8002a3c:	e0bc      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a3e:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff fa3f 	bl	8001ec4 <LL_ADC_GetCommonPathInternalCh>
 8002a46:	0003      	movs	r3, r0
 8002a48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b84 <HAL_ADC_ConfigChannel+0x364>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d122      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a5c:	d11d      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2280      	movs	r2, #128	@ 0x80
 8002a62:	0412      	lsls	r2, r2, #16
 8002a64:	4313      	orrs	r3, r2
 8002a66:	4a46      	ldr	r2, [pc, #280]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f7ff fa16 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a70:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <HAL_ADC_ConfigChannel+0x368>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4945      	ldr	r1, [pc, #276]	@ (8002b8c <HAL_ADC_ConfigChannel+0x36c>)
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fd fb44 	bl	8000104 <__udivsi3>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	0013      	movs	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a8a:	e002      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a98:	e08e      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b90 <HAL_ADC_ConfigChannel+0x370>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	045b      	lsls	r3, r3, #17
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2280      	movs	r2, #128	@ 0x80
 8002ab2:	0452      	lsls	r2, r2, #17
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	4a32      	ldr	r2, [pc, #200]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002ab8:	0019      	movs	r1, r3
 8002aba:	0010      	movs	r0, r2
 8002abc:	f7ff f9ee 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002ac0:	e07a      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <HAL_ADC_ConfigChannel+0x374>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d000      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x2ae>
 8002acc:	e074      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	03db      	lsls	r3, r3, #15
 8002ad4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ad6:	d000      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x2ba>
 8002ad8:	e06e      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2280      	movs	r2, #128	@ 0x80
 8002ade:	03d2      	lsls	r2, r2, #15
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	0010      	movs	r0, r2
 8002ae8:	f7ff f9d8 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002aec:	e064      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d004      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002afe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b7c <HAL_ADC_ConfigChannel+0x35c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	0010      	movs	r0, r2
 8002b10:	f7ff fa5b 	bl	8001fca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da4d      	bge.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1c:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff f9d0 	bl	8001ec4 <LL_ADC_GetCommonPathInternalCh>
 8002b24:	0003      	movs	r3, r0
 8002b26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a15      	ldr	r2, [pc, #84]	@ (8002b84 <HAL_ADC_ConfigChannel+0x364>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <HAL_ADC_ConfigChannel+0x378>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	f7ff f9ad 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002b42:	e039      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a11      	ldr	r2, [pc, #68]	@ (8002b90 <HAL_ADC_ConfigChannel+0x370>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <HAL_ADC_ConfigChannel+0x37c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002b56:	0019      	movs	r1, r3
 8002b58:	0010      	movs	r0, r2
 8002b5a:	f7ff f99f 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002b5e:	e02b      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0b      	ldr	r2, [pc, #44]	@ (8002b94 <HAL_ADC_ConfigChannel+0x374>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d126      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x380>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	4a03      	ldr	r2, [pc, #12]	@ (8002b80 <HAL_ADC_ConfigChannel+0x360>)
 8002b72:	0019      	movs	r1, r3
 8002b74:	0010      	movs	r0, r2
 8002b76:	f7ff f991 	bl	8001e9c <LL_ADC_SetCommonPathInternalCh>
 8002b7a:	e01d      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x398>
 8002b7c:	80000004 	.word	0x80000004
 8002b80:	40012708 	.word	0x40012708
 8002b84:	b0001000 	.word	0xb0001000
 8002b88:	2000001c 	.word	0x2000001c
 8002b8c:	00030d40 	.word	0x00030d40
 8002b90:	b8004000 	.word	0xb8004000
 8002b94:	b4002000 	.word	0xb4002000
 8002b98:	ff7fffff 	.word	0xff7fffff
 8002b9c:	feffffff 	.word	0xfeffffff
 8002ba0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	2220      	movs	r2, #32
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002bb0:	2317      	movs	r3, #23
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2254      	movs	r2, #84	@ 0x54
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bc0:	2317      	movs	r3, #23
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b006      	add	sp, #24
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)

08002bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7ff fa79 	bl	80020d8 <LL_ADC_IsEnabled>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d000      	beq.n	8002bec <ADC_Enable+0x1c>
 8002bea:	e069      	b.n	8002cc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4a36      	ldr	r2, [pc, #216]	@ (8002ccc <ADC_Enable+0xfc>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	2201      	movs	r2, #1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e056      	b.n	8002cc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff fa39 	bl	8002090 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <ADC_Enable+0x100>)
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff f94f 	bl	8001ec4 <LL_ADC_GetCommonPathInternalCh>
 8002c26:	0002      	movs	r2, r0
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d00f      	beq.n	8002c50 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <ADC_Enable+0x104>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4928      	ldr	r1, [pc, #160]	@ (8002cd8 <ADC_Enable+0x108>)
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7fd fa64 	bl	8000104 <__udivsi3>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002c40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c42:	e002      	b.n	8002c4a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f9      	bne.n	8002c44 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e5b      	ldrb	r3, [r3, #25]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d033      	beq.n	8002cc0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002c58:	f7ff f8f2 	bl	8001e40 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c60:	e027      	b.n	8002cb2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff fa36 	bl	80020d8 <LL_ADC_IsEnabled>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d104      	bne.n	8002c7a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff fa0b 	bl	8002090 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c7a:	f7ff f8e1 	bl	8001e40 <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d914      	bls.n	8002cb2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00d      	beq.n	8002cb2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	2210      	movs	r2, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d1d0      	bne.n	8002c62 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	80000017 	.word	0x80000017
 8002cd0:	40012708 	.word	0x40012708
 8002cd4:	2000001c 	.word	0x2000001c
 8002cd8:	00030d40 	.word	0x00030d40

08002cdc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	2250      	movs	r2, #80	@ 0x50
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d141      	bne.n	8002d78 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	2280      	movs	r2, #128	@ 0x80
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7ff f91d 	bl	8001f46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d02e      	beq.n	8002d6e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	7e9b      	ldrb	r3, [r3, #26]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d12a      	bne.n	8002d6e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2208      	movs	r2, #8
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d123      	bne.n	8002d6e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff f9f8 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d110      	bne.n	8002d56 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	210c      	movs	r1, #12
 8002d40:	438a      	bics	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <ADC_DMAConvCplt+0xc4>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d54:	e00b      	b.n	8002d6e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	2201      	movs	r2, #1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff fd35 	bl	80027e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d76:	e00f      	b.n	8002d98 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d004      	beq.n	8002d8c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff fd43 	bl	8002810 <HAL_ADC_ErrorCallback>
}
 8002d8a:	e005      	b.n	8002d98 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	0010      	movs	r0, r2
 8002d96:	4798      	blx	r3
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b004      	add	sp, #16
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	fffffefe 	.word	0xfffffefe

08002da4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff fd1b 	bl	80027f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	2240      	movs	r2, #64	@ 0x40
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	2204      	movs	r2, #4
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff fd10 	bl	8002810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df0:	46c0      	nop			@ (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e10:	46c0      	nop			@ (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e20:	46c0      	nop			@ (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e40:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	58d2      	ldr	r2, [r2, r3]
 8002e46:	4904      	ldr	r1, [pc, #16]	@ (8002e58 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	2280      	movs	r2, #128	@ 0x80
 8002e4e:	508b      	str	r3, [r1, r2]
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021800 	.word	0x40021800

08002e5c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e64:	4a06      	ldr	r2, [pc, #24]	@ (8002e80 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	58d3      	ldr	r3, [r2, r3]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	43d2      	mvns	r2, r2
 8002e6e:	4904      	ldr	r1, [pc, #16]	@ (8002e80 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	508b      	str	r3, [r1, r2]
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	40021800 	.word	0x40021800

08002e84 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e8e:	2384      	movs	r3, #132	@ 0x84
 8002e90:	58d2      	ldr	r2, [r2, r3]
 8002e92:	4904      	ldr	r1, [pc, #16]	@ (8002ea4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	2284      	movs	r2, #132	@ 0x84
 8002e9a:	508b      	str	r3, [r1, r2]

}
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021800 	.word	0x40021800

08002ea8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002eb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ecc <LL_EXTI_DisableEvent_0_31+0x24>)
 8002eb2:	2384      	movs	r3, #132	@ 0x84
 8002eb4:	58d3      	ldr	r3, [r2, r3]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	43d2      	mvns	r2, r2
 8002eba:	4904      	ldr	r1, [pc, #16]	@ (8002ecc <LL_EXTI_DisableEvent_0_31+0x24>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2284      	movs	r2, #132	@ 0x84
 8002ec0:	508b      	str	r3, [r1, r2]
}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	40021800 	.word	0x40021800

08002ed0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021800 	.word	0x40021800

08002ef0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	43d9      	mvns	r1, r3
 8002f00:	4b03      	ldr	r3, [pc, #12]	@ (8002f10 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	40021800 	.word	0x40021800

08002f14 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002f1c:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021800 	.word	0x40021800

08002f34 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	43d9      	mvns	r1, r3
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	40021800 	.word	0x40021800

08002f58 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]
}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	40021800 	.word	0x40021800

08002f74 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	40021800 	.word	0x40021800

08002f90 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	211f      	movs	r1, #31
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	e13d      	b.n	800322e <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0fdb      	lsrs	r3, r3, #31
 8002fba:	07da      	lsls	r2, r3, #31
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d104      	bne.n	8002fce <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8002fc4:	231f      	movs	r3, #31
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e12f      	b.n	800322e <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2229      	movs	r2, #41	@ 0x29
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2228      	movs	r2, #40	@ 0x28
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7fe fb68 	bl	80016c0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2230      	movs	r2, #48	@ 0x30
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a85      	ldr	r2, [pc, #532]	@ (800323c <HAL_COMP_Init+0x2ac>)
 8003028:	4013      	ands	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	429a      	cmp	r2, r3
 8003040:	d10d      	bne.n	800305e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003042:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b7e      	ldr	r3, [pc, #504]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003048:	497e      	ldr	r1, [pc, #504]	@ (8003244 <HAL_COMP_Init+0x2b4>)
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4b7b      	ldr	r3, [pc, #492]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003054:	2180      	movs	r1, #128	@ 0x80
 8003056:	0109      	lsls	r1, r1, #4
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	e01f      	b.n	800309e <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	23c0      	movs	r3, #192	@ 0xc0
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	429a      	cmp	r2, r3
 8003068:	d10d      	bne.n	8003086 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800306a:	4b75      	ldr	r3, [pc, #468]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b74      	ldr	r3, [pc, #464]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	0109      	lsls	r1, r1, #4
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003078:	4b71      	ldr	r3, [pc, #452]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4b70      	ldr	r3, [pc, #448]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800307e:	4971      	ldr	r1, [pc, #452]	@ (8003244 <HAL_COMP_Init+0x2b4>)
 8003080:	400a      	ands	r2, r1
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	e00b      	b.n	800309e <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003086:	4b6e      	ldr	r3, [pc, #440]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b6d      	ldr	r3, [pc, #436]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800308c:	496d      	ldr	r1, [pc, #436]	@ (8003244 <HAL_COMP_Init+0x2b4>)
 800308e:	400a      	ands	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003092:	4b6b      	ldr	r3, [pc, #428]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4b6a      	ldr	r3, [pc, #424]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003098:	496a      	ldr	r1, [pc, #424]	@ (8003244 <HAL_COMP_Init+0x2b4>)
 800309a:	400a      	ands	r2, r1
 800309c:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	22a0      	movs	r2, #160	@ 0xa0
 80030a4:	01d2      	lsls	r2, r2, #7
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d017      	beq.n	80030da <HAL_COMP_Init+0x14a>
 80030aa:	22a0      	movs	r2, #160	@ 0xa0
 80030ac:	01d2      	lsls	r2, r2, #7
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d830      	bhi.n	8003114 <HAL_COMP_Init+0x184>
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d01f      	beq.n	80030f6 <HAL_COMP_Init+0x166>
 80030b6:	2280      	movs	r2, #128	@ 0x80
 80030b8:	01d2      	lsls	r2, r2, #7
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12a      	bne.n	8003114 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030be:	4b60      	ldr	r3, [pc, #384]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	01c9      	lsls	r1, r1, #7
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80030cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030d2:	495d      	ldr	r1, [pc, #372]	@ (8003248 <HAL_COMP_Init+0x2b8>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
        break;
 80030d8:	e029      	b.n	800312e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030da:	4b59      	ldr	r3, [pc, #356]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b58      	ldr	r3, [pc, #352]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030e0:	4959      	ldr	r1, [pc, #356]	@ (8003248 <HAL_COMP_Init+0x2b8>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80030e6:	4b56      	ldr	r3, [pc, #344]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4b55      	ldr	r3, [pc, #340]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030ec:	2180      	movs	r1, #128	@ 0x80
 80030ee:	01c9      	lsls	r1, r1, #7
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
        break;
 80030f4:	e01b      	b.n	800312e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030f6:	4b52      	ldr	r3, [pc, #328]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b51      	ldr	r3, [pc, #324]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 80030fc:	2180      	movs	r1, #128	@ 0x80
 80030fe:	01c9      	lsls	r1, r1, #7
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003104:	4b4e      	ldr	r3, [pc, #312]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4b4d      	ldr	r3, [pc, #308]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800310a:	2180      	movs	r1, #128	@ 0x80
 800310c:	01c9      	lsls	r1, r1, #7
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
        break;
 8003112:	e00c      	b.n	800312e <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003114:	4b4a      	ldr	r3, [pc, #296]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b49      	ldr	r3, [pc, #292]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800311a:	494b      	ldr	r1, [pc, #300]	@ (8003248 <HAL_COMP_Init+0x2b8>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003120:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 8003126:	4948      	ldr	r1, [pc, #288]	@ (8003248 <HAL_COMP_Init+0x2b8>)
 8003128:	400a      	ands	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
        break;
 800312c:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2230      	movs	r2, #48	@ 0x30
 8003136:	4013      	ands	r3, r2
 8003138:	d016      	beq.n	8003168 <HAL_COMP_Init+0x1d8>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d113      	bne.n	8003168 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003140:	4b42      	ldr	r3, [pc, #264]	@ (800324c <HAL_COMP_Init+0x2bc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4942      	ldr	r1, [pc, #264]	@ (8003250 <HAL_COMP_Init+0x2c0>)
 8003146:	0018      	movs	r0, r3
 8003148:	f7fc ffdc 	bl	8000104 <__udivsi3>
 800314c:	0003      	movs	r3, r0
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	0013      	movs	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	189b      	adds	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800315a:	e002      	b.n	8003162 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a34      	ldr	r2, [pc, #208]	@ (8003240 <HAL_COMP_Init+0x2b0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d102      	bne.n	8003178 <HAL_COMP_Init+0x1e8>
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	029b      	lsls	r3, r3, #10
 8003176:	e001      	b.n	800317c <HAL_COMP_Init+0x1ec>
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	02db      	lsls	r3, r3, #11
 800317c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	2203      	movs	r2, #3
 8003184:	4013      	ands	r3, r2
 8003186:	d040      	beq.n	800320a <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff fe9b 	bl	8002ed0 <LL_EXTI_EnableRisingTrig_0_31>
 800319a:	e003      	b.n	80031a4 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff fea6 	bl	8002ef0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	2220      	movs	r2, #32
 80031aa:	4013      	ands	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff feaf 	bl	8002f14 <LL_EXTI_EnableFallingTrig_0_31>
 80031b6:	e003      	b.n	80031c0 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7ff feba 	bl	8002f34 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff fed6 	bl	8002f74 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff fec4 	bl	8002f58 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff fe51 	bl	8002e84 <LL_EXTI_EnableEvent_0_31>
 80031e2:	e003      	b.n	80031ec <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff fe5e 	bl	8002ea8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff fe1d 	bl	8002e38 <LL_EXTI_EnableIT_0_31>
 80031fe:	e00c      	b.n	800321a <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff fe2a 	bl	8002e5c <LL_EXTI_DisableIT_0_31>
 8003208:	e007      	b.n	800321a <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff fe4b 	bl	8002ea8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fe21 	bl	8002e5c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2229      	movs	r2, #41	@ 0x29
 800321e:	5c9b      	ldrb	r3, [r3, r2]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2229      	movs	r2, #41	@ 0x29
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800322e:	231f      	movs	r3, #31
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b008      	add	sp, #32
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00740f 	.word	0xfe00740f
 8003240:	40010200 	.word	0x40010200
 8003244:	fffff7ff 	.word	0xfffff7ff
 8003248:	ffffbfff 	.word	0xffffbfff
 800324c:	2000001c 	.word	0x2000001c
 8003250:	00030d40 	.word	0x00030d40

08003254 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	210f      	movs	r1, #15
 8003262:	187b      	adds	r3, r7, r1
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e035      	b.n	80032e2 <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0fdb      	lsrs	r3, r3, #31
 800327e:	07da      	lsls	r2, r3, #31
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	429a      	cmp	r2, r3
 8003286:	d104      	bne.n	8003292 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e027      	b.n	80032e2 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2229      	movs	r2, #41	@ 0x29
 8003296:	5c9b      	ldrb	r3, [r3, r2]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d11d      	bne.n	80032da <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2229      	movs	r2, #41	@ 0x29
 80032b2:	2102      	movs	r1, #2
 80032b4:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <HAL_COMP_Start+0x9c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	490e      	ldr	r1, [pc, #56]	@ (80032f4 <HAL_COMP_Start+0xa0>)
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fc ff21 	bl	8000104 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	3301      	adds	r3, #1
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032ca:	e002      	b.n	80032d2 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f9      	bne.n	80032cc <HAL_COMP_Start+0x78>
 80032d8:	e003      	b.n	80032e2 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032da:	230f      	movs	r3, #15
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80032e2:	230f      	movs	r3, #15
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	2000001c 	.word	0x2000001c
 80032f4:	00030d40 	.word	0x00030d40

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0002      	movs	r2, r0
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b7f      	cmp	r3, #127	@ 0x7f
 800330a:	d809      	bhi.n	8003320 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	001a      	movs	r2, r3
 8003312:	231f      	movs	r3, #31
 8003314:	401a      	ands	r2, r3
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <__NVIC_EnableIRQ+0x30>)
 8003318:	2101      	movs	r1, #1
 800331a:	4091      	lsls	r1, r2
 800331c:	000a      	movs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003340:	d828      	bhi.n	8003394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003342:	4a2f      	ldr	r2, [pc, #188]	@ (8003400 <__NVIC_SetPriority+0xd4>)
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	33c0      	adds	r3, #192	@ 0xc0
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	589b      	ldr	r3, [r3, r2]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	@ 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	@ 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	481f      	ldr	r0, [pc, #124]	@ (8003400 <__NVIC_SetPriority+0xd4>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25b      	sxtb	r3, r3
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	430a      	orrs	r2, r1
 800338c:	33c0      	adds	r3, #192	@ 0xc0
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003392:	e031      	b.n	80033f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	0019      	movs	r1, r3
 800339c:	230f      	movs	r3, #15
 800339e:	400b      	ands	r3, r1
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3306      	adds	r3, #6
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	3304      	adds	r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1dfa      	adds	r2, r7, #7
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	0011      	movs	r1, r2
 80033b4:	2203      	movs	r2, #3
 80033b6:	400a      	ands	r2, r1
 80033b8:	00d2      	lsls	r2, r2, #3
 80033ba:	21ff      	movs	r1, #255	@ 0xff
 80033bc:	4091      	lsls	r1, r2
 80033be:	000a      	movs	r2, r1
 80033c0:	43d2      	mvns	r2, r2
 80033c2:	401a      	ands	r2, r3
 80033c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	22ff      	movs	r2, #255	@ 0xff
 80033cc:	401a      	ands	r2, r3
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	2303      	movs	r3, #3
 80033d6:	4003      	ands	r3, r0
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033dc:	4809      	ldr	r0, [pc, #36]	@ (8003404 <__NVIC_SetPriority+0xd8>)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	001c      	movs	r4, r3
 80033e4:	230f      	movs	r3, #15
 80033e6:	4023      	ands	r3, r4
 80033e8:	3b08      	subs	r3, #8
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	3306      	adds	r3, #6
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	18c3      	adds	r3, r0, r3
 80033f4:	3304      	adds	r3, #4
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b003      	add	sp, #12
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	045b      	lsls	r3, r3, #17
 8003418:	429a      	cmp	r2, r3
 800341a:	d301      	bcc.n	8003420 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341c:	2301      	movs	r3, #1
 800341e:	e010      	b.n	8003442 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <SysTick_Config+0x44>)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	3a01      	subs	r2, #1
 8003426:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003428:	2301      	movs	r3, #1
 800342a:	425b      	negs	r3, r3
 800342c:	2103      	movs	r1, #3
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff ff7c 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <SysTick_Config+0x44>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	@ (800344c <SysTick_Config+0x44>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	210f      	movs	r1, #15
 800345c:	187b      	adds	r3, r7, r1
 800345e:	1c02      	adds	r2, r0, #0
 8003460:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b25b      	sxtb	r3, r3
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	0002      	movs	r2, r0
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff33 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ffaf 	bl	8003408 <SysTick_Config>
 80034aa:	0003      	movs	r3, r0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e015      	b.n	80034f2 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	791b      	ldrb	r3, [r3, #4]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fe f927 	bl	800172c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e047      	b.n	800359e <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	795b      	ldrb	r3, [r3, #5]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_DAC_Start+0x20>
 8003516:	2302      	movs	r3, #2
 8003518:	e041      	b.n	800359e <HAL_DAC_Start+0xa4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6819      	ldr	r1, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2210      	movs	r2, #16
 8003530:	4013      	ands	r3, r2
 8003532:	2201      	movs	r2, #1
 8003534:	409a      	lsls	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	223e      	movs	r2, #62	@ 0x3e
 800354c:	4013      	ands	r3, r2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d11e      	bne.n	8003590 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e015      	b.n	8003590 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	23f8      	movs	r3, #248	@ 0xf8
 800356c:	039b      	lsls	r3, r3, #14
 800356e:	401a      	ands	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2110      	movs	r1, #16
 8003574:	400b      	ands	r3, r1
 8003576:	2102      	movs	r1, #2
 8003578:	4099      	lsls	r1, r3
 800357a:	000b      	movs	r3, r1
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2102      	movs	r1, #2
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035be:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	4013      	ands	r3, r2
 80035c8:	d01e      	beq.n	8003608 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	019b      	lsls	r3, r3, #6
 80035d0:	4013      	ands	r3, r2
 80035d2:	d019      	beq.n	8003608 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2204      	movs	r2, #4
 80035d8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2201      	movs	r2, #1
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	0192      	lsls	r2, r2, #6
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4917      	ldr	r1, [pc, #92]	@ (8003658 <HAL_DAC_IRQHandler+0xb0>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f853 	bl	80036ae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	059b      	lsls	r3, r3, #22
 800360e:	4013      	ands	r3, r2
 8003610:	d01e      	beq.n	8003650 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	059b      	lsls	r3, r3, #22
 8003618:	4013      	ands	r3, r2
 800361a:	d019      	beq.n	8003650 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2204      	movs	r2, #4
 8003620:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2202      	movs	r2, #2
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2280      	movs	r2, #128	@ 0x80
 8003634:	0592      	lsls	r2, r2, #22
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4906      	ldr	r1, [pc, #24]	@ (800365c <HAL_DAC_IRQHandler+0xb4>)
 8003644:	400a      	ands	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f968 	bl	8003920 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}
 8003658:	ffffefff 	.word	0xffffefff
 800365c:	efffffff 	.word	0xefffffff

08003660 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e014      	b.n	80036a6 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	18d3      	adds	r3, r2, r3
 800368e:	3308      	adds	r3, #8
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e004      	b.n	800369e <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	18d3      	adds	r3, r2, r3
 800369a:	3314      	adds	r3, #20
 800369c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b006      	add	sp, #24
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b002      	add	sp, #8
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	231f      	movs	r3, #31
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_DAC_ConfigChannel+0x20>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e115      	b.n	8003910 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	795b      	ldrb	r3, [r3, #5]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_DAC_ConfigChannel+0x30>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e10f      	b.n	8003910 <HAL_DAC_ConfigChannel+0x250>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2202      	movs	r2, #2
 80036fa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d000      	beq.n	8003706 <HAL_DAC_ConfigChannel+0x46>
 8003704:	e07a      	b.n	80037fc <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003706:	f7fe fb9b 	bl	8001e40 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d13d      	bne.n	8003790 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003714:	e018      	b.n	8003748 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003716:	f7fe fb93 	bl	8001e40 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d911      	bls.n	8003748 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4013      	ands	r3, r2
 8003730:	d00a      	beq.n	8003748 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2208      	movs	r2, #8
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2203      	movs	r2, #3
 8003742:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0e3      	b.n	8003910 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	4013      	ands	r3, r2
 8003754:	d1df      	bne.n	8003716 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	6992      	ldr	r2, [r2, #24]
 800375e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003760:	e020      	b.n	80037a4 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003762:	f7fe fb6d 	bl	8001e40 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d90f      	bls.n	8003790 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003776:	2b00      	cmp	r3, #0
 8003778:	da0a      	bge.n	8003790 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2208      	movs	r2, #8
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2203      	movs	r2, #3
 800378a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0bf      	b.n	8003910 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	dbe3      	blt.n	8003762 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	6992      	ldr	r2, [r2, #24]
 80037a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	2110      	movs	r1, #16
 80037ae:	400a      	ands	r2, r1
 80037b0:	4959      	ldr	r1, [pc, #356]	@ (8003918 <HAL_DAC_ConfigChannel+0x258>)
 80037b2:	4091      	lsls	r1, r2
 80037b4:	000a      	movs	r2, r1
 80037b6:	43d2      	mvns	r2, r2
 80037b8:	401a      	ands	r2, r3
 80037ba:	0011      	movs	r1, r2
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2010      	movs	r0, #16
 80037c4:	4003      	ands	r3, r0
 80037c6:	409a      	lsls	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	2110      	movs	r1, #16
 80037da:	400a      	ands	r2, r1
 80037dc:	21ff      	movs	r1, #255	@ 0xff
 80037de:	4091      	lsls	r1, r2
 80037e0:	000a      	movs	r2, r1
 80037e2:	43d2      	mvns	r2, r2
 80037e4:	401a      	ands	r2, r3
 80037e6:	0011      	movs	r1, r2
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2010      	movs	r0, #16
 80037f0:	4003      	ands	r3, r0
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d11d      	bne.n	8003840 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2210      	movs	r2, #16
 8003810:	4013      	ands	r3, r2
 8003812:	221f      	movs	r2, #31
 8003814:	409a      	lsls	r2, r3
 8003816:	0013      	movs	r3, r2
 8003818:	43da      	mvns	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2210      	movs	r2, #16
 800382a:	4013      	ands	r3, r2
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	409a      	lsls	r2, r3
 8003830:	0013      	movs	r3, r2
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2210      	movs	r2, #16
 800384c:	4013      	ands	r3, r2
 800384e:	2207      	movs	r2, #7
 8003850:	409a      	lsls	r2, r3
 8003852:	0013      	movs	r3, r2
 8003854:	43da      	mvns	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	431a      	orrs	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2210      	movs	r2, #16
 8003872:	4013      	ands	r3, r2
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2110      	movs	r1, #16
 8003892:	400b      	ands	r3, r1
 8003894:	2180      	movs	r1, #128	@ 0x80
 8003896:	01c9      	lsls	r1, r1, #7
 8003898:	4099      	lsls	r1, r3
 800389a:	000b      	movs	r3, r1
 800389c:	43d9      	mvns	r1, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	400a      	ands	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2210      	movs	r2, #16
 80038b2:	4013      	ands	r3, r2
 80038b4:	4a19      	ldr	r2, [pc, #100]	@ (800391c <HAL_DAC_ConfigChannel+0x25c>)
 80038b6:	409a      	lsls	r2, r3
 80038b8:	0013      	movs	r3, r2
 80038ba:	43da      	mvns	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4013      	ands	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2210      	movs	r2, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	409a      	lsls	r2, r3
 80038d2:	0013      	movs	r3, r2
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2110      	movs	r1, #16
 80038ec:	400b      	ands	r3, r1
 80038ee:	21c0      	movs	r1, #192	@ 0xc0
 80038f0:	4099      	lsls	r1, r3
 80038f2:	000b      	movs	r3, r1
 80038f4:	43d9      	mvns	r1, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800390a:	231f      	movs	r3, #31
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	781b      	ldrb	r3, [r3, #0]
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b008      	add	sp, #32
 8003916:	bd80      	pop	{r7, pc}
 8003918:	000003ff 	.word	0x000003ff
 800391c:	00000ffe 	.word	0x00000ffe

08003920 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e077      	b.n	8003a32 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3d      	ldr	r2, [pc, #244]	@ (8003a3c <HAL_DMA_Init+0x10c>)
 8003948:	4694      	mov	ip, r2
 800394a:	4463      	add	r3, ip
 800394c:	2114      	movs	r1, #20
 800394e:	0018      	movs	r0, r3
 8003950:	f7fc fbd8 	bl	8000104 <__udivsi3>
 8003954:	0003      	movs	r3, r0
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2225      	movs	r2, #37	@ 0x25
 8003960:	2102      	movs	r1, #2
 8003962:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4934      	ldr	r1, [pc, #208]	@ (8003a40 <HAL_DMA_Init+0x110>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f000 f9c1 	bl	8003d34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d102      	bne.n	80039c4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039cc:	213f      	movs	r1, #63	@ 0x3f
 80039ce:	400a      	ands	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80039da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d011      	beq.n	8003a08 <HAL_DMA_Init+0xd8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d80d      	bhi.n	8003a08 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f9cc 	bl	8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	e008      	b.n	8003a1a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2225      	movs	r2, #37	@ 0x25
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	bffdfff8 	.word	0xbffdfff8
 8003a40:	ffff800f 	.word	0xffff800f

08003a44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2317      	movs	r3, #23
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2224      	movs	r2, #36	@ 0x24
 8003a5e:	5c9b      	ldrb	r3, [r3, r2]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Start_IT+0x24>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e06f      	b.n	8003b48 <HAL_DMA_Start_IT+0x104>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2224      	movs	r2, #36	@ 0x24
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2225      	movs	r2, #37	@ 0x25
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d157      	bne.n	8003b2c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2225      	movs	r2, #37	@ 0x25
 8003a80:	2102      	movs	r1, #2
 8003a82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f907 	bl	8003cb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	210e      	movs	r1, #14
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e00f      	b.n	8003ae0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2104      	movs	r1, #4
 8003acc:	438a      	bics	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	210a      	movs	r1, #10
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	025b      	lsls	r3, r3, #9
 8003aea:	4013      	ands	r3, r2
 8003aec:	d008      	beq.n	8003b00 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	2180      	movs	r1, #128	@ 0x80
 8003afa:	0049      	lsls	r1, r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b12:	2180      	movs	r1, #128	@ 0x80
 8003b14:	0049      	lsls	r1, r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00a      	b.n	8003b42 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2280      	movs	r2, #128	@ 0x80
 8003b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2224      	movs	r2, #36	@ 0x24
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003b3a:	2317      	movs	r3, #23
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003b58:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	221c      	movs	r2, #28
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	0013      	movs	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4013      	ands	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0x7a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d023      	beq.n	8003bca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d107      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2104      	movs	r1, #4
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003b9e:	4b44      	ldr	r3, [pc, #272]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	221c      	movs	r2, #28
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2204      	movs	r2, #4
 8003bac:	409a      	lsls	r2, r3
 8003bae:	4b40      	ldr	r3, [pc, #256]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d100      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x6e>
 8003bbc:	e073      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003bc8:	e06d      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	221c      	movs	r2, #28
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d02e      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xec>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d02a      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d10b      	bne.n	8003c0a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	210a      	movs	r1, #10
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2225      	movs	r2, #37	@ 0x25
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	221c      	movs	r2, #28
 8003c14:	4013      	ands	r3, r2
 8003c16:	2202      	movs	r2, #2
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	@ 0x24
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03a      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	0010      	movs	r0, r2
 8003c38:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c3a:	e034      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	221c      	movs	r2, #28
 8003c42:	4013      	ands	r3, r2
 8003c44:	2208      	movs	r2, #8
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d02b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x158>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	d027      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	210e      	movs	r1, #14
 8003c64:	438a      	bics	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	221c      	movs	r2, #28
 8003c72:	4013      	ands	r3, r2
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2225      	movs	r2, #37	@ 0x25
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	@ 0x24
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	0010      	movs	r0, r2
 8003ca4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46c0      	nop			@ (mov r8, r8)
}
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40020000 	.word	0x40020000

08003cb4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <DMA_SetConfig+0x7c>)
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	221c      	movs	r2, #28
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <DMA_SetConfig+0x7c>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d108      	bne.n	8003d16 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d14:	e007      	b.n	8003d26 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	60da      	str	r2, [r3, #12]
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	40020000 	.word	0x40020000

08003d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	4a10      	ldr	r2, [pc, #64]	@ (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d44:	4694      	mov	ip, r2
 8003d46:	4463      	add	r3, ip
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	001a      	movs	r2, r3
 8003d56:	23ff      	movs	r3, #255	@ 0xff
 8003d58:	4013      	ands	r3, r2
 8003d5a:	3b08      	subs	r3, #8
 8003d5c:	2114      	movs	r1, #20
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc f9d0 	bl	8000104 <__udivsi3>
 8003d64:	0003      	movs	r3, r0
 8003d66:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	@ (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003d6c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	221f      	movs	r2, #31
 8003d72:	4013      	ands	r3, r2
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	10008200 	.word	0x10008200
 8003d88:	40020880 	.word	0x40020880

08003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	223f      	movs	r2, #63	@ 0x3f
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003da2:	4694      	mov	ip, r2
 8003da4:	4463      	add	r3, ip
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	001a      	movs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a07      	ldr	r2, [pc, #28]	@ (8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003db2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	1000823f 	.word	0x1000823f
 8003dd0:	40020940 	.word	0x40020940

08003dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de2:	e147      	b.n	8004074 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2101      	movs	r1, #1
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4091      	lsls	r1, r2
 8003dee:	000a      	movs	r2, r1
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d100      	bne.n	8003dfc <HAL_GPIO_Init+0x28>
 8003dfa:	e138      	b.n	800406e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2203      	movs	r2, #3
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d005      	beq.n	8003e14 <HAL_GPIO_Init+0x40>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d130      	bne.n	8003e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	409a      	lsls	r2, r3
 8003e22:	0013      	movs	r3, r2
 8003e24:	43da      	mvns	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	0013      	movs	r3, r2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	43da      	mvns	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	2201      	movs	r2, #1
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
 8003e68:	0013      	movs	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d017      	beq.n	8003eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	0013      	movs	r3, r2
 8003e92:	43da      	mvns	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d123      	bne.n	8003f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	58d3      	ldr	r3, [r2, r3]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2207      	movs	r2, #7
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	0013      	movs	r3, r2
 8003eda:	43da      	mvns	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2107      	movs	r1, #7
 8003eea:	400b      	ands	r3, r1
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	08da      	lsrs	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3208      	adds	r2, #8
 8003f00:	0092      	lsls	r2, r2, #2
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	409a      	lsls	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	43da      	mvns	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2203      	movs	r2, #3
 8003f24:	401a      	ands	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	0013      	movs	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	23c0      	movs	r3, #192	@ 0xc0
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	4013      	ands	r3, r2
 8003f44:	d100      	bne.n	8003f48 <HAL_GPIO_Init+0x174>
 8003f46:	e092      	b.n	800406e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f48:	4a50      	ldr	r2, [pc, #320]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3318      	adds	r3, #24
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	589b      	ldr	r3, [r3, r2]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2203      	movs	r2, #3
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	220f      	movs	r2, #15
 8003f60:	409a      	lsls	r2, r3
 8003f62:	0013      	movs	r3, r2
 8003f64:	43da      	mvns	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	23a0      	movs	r3, #160	@ 0xa0
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d013      	beq.n	8003f9e <HAL_GPIO_Init+0x1ca>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a45      	ldr	r2, [pc, #276]	@ (8004090 <HAL_GPIO_Init+0x2bc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00d      	beq.n	8003f9a <HAL_GPIO_Init+0x1c6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a44      	ldr	r2, [pc, #272]	@ (8004094 <HAL_GPIO_Init+0x2c0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d007      	beq.n	8003f96 <HAL_GPIO_Init+0x1c2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a43      	ldr	r2, [pc, #268]	@ (8004098 <HAL_GPIO_Init+0x2c4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_GPIO_Init+0x1be>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f92:	2305      	movs	r3, #5
 8003f94:	e004      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	00d2      	lsls	r2, r2, #3
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fb0:	4936      	ldr	r1, [pc, #216]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fbe:	4b33      	ldr	r3, [pc, #204]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	2380      	movs	r3, #128	@ 0x80
 8003fd4:	035b      	lsls	r3, r3, #13
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003fe8:	4b28      	ldr	r3, [pc, #160]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	039b      	lsls	r3, r3, #14
 8004000:	4013      	ands	r3, r2
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800400c:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8004014:	2384      	movs	r3, #132	@ 0x84
 8004016:	58d3      	ldr	r3, [r2, r3]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43da      	mvns	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	2380      	movs	r3, #128	@ 0x80
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	4013      	ands	r3, r2
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004038:	4914      	ldr	r1, [pc, #80]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 800403a:	2284      	movs	r2, #132	@ 0x84
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004040:	4a12      	ldr	r2, [pc, #72]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8004042:	2380      	movs	r3, #128	@ 0x80
 8004044:	58d3      	ldr	r3, [r2, r3]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43da      	mvns	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	2380      	movs	r3, #128	@ 0x80
 8004058:	025b      	lsls	r3, r3, #9
 800405a:	4013      	ands	r3, r2
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004066:	4909      	ldr	r1, [pc, #36]	@ (800408c <HAL_GPIO_Init+0x2b8>)
 8004068:	2280      	movs	r2, #128	@ 0x80
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3301      	adds	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	40da      	lsrs	r2, r3
 800407c:	1e13      	subs	r3, r2, #0
 800407e:	d000      	beq.n	8004082 <HAL_GPIO_Init+0x2ae>
 8004080:	e6b0      	b.n	8003de4 <HAL_GPIO_Init+0x10>
  }
}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b006      	add	sp, #24
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021800 	.word	0x40021800
 8004090:	50000400 	.word	0x50000400
 8004094:	50000800 	.word	0x50000800
 8004098:	50000c00 	.word	0x50000c00

0800409c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	000a      	movs	r2, r1
 80040a6:	1cbb      	adds	r3, r7, #2
 80040a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	1cba      	adds	r2, r7, #2
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	4013      	ands	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80040b6:	230f      	movs	r3, #15
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e003      	b.n	80040c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c0:	230f      	movs	r3, #15
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80040c8:	230f      	movs	r3, #15
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	781b      	ldrb	r3, [r3, #0]
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	0008      	movs	r0, r1
 80040e0:	0011      	movs	r1, r2
 80040e2:	1cbb      	adds	r3, r7, #2
 80040e4:	1c02      	adds	r2, r0, #0
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	1c7b      	adds	r3, r7, #1
 80040ea:	1c0a      	adds	r2, r1, #0
 80040ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040ee:	1c7b      	adds	r3, r7, #1
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040f6:	1cbb      	adds	r3, r7, #2
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040fe:	e003      	b.n	8004108 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004100:	1cbb      	adds	r3, r7, #2
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004108:	46c0      	nop			@ (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	000a      	movs	r2, r1
 800411a:	1cbb      	adds	r3, r7, #2
 800411c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004124:	1cbb      	adds	r3, r7, #2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4013      	ands	r3, r2
 800412c:	041a      	lsls	r2, r3, #16
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	43db      	mvns	r3, r3
 8004132:	1cb9      	adds	r1, r7, #2
 8004134:	8809      	ldrh	r1, [r1, #0]
 8004136:	400b      	ands	r3, r1
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	619a      	str	r2, [r3, #24]
}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b004      	add	sp, #16
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004150:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004156:	4013      	ands	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	429a      	cmp	r2, r3
 800416a:	d11f      	bne.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800416c:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	0013      	movs	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	189b      	adds	r3, r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4912      	ldr	r1, [pc, #72]	@ (80041c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800417a:	0018      	movs	r0, r3
 800417c:	f7fb ffc2 	bl	8000104 <__udivsi3>
 8004180:	0003      	movs	r3, r0
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004186:	e008      	b.n	800419a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3b01      	subs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e001      	b.n	800419a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e009      	b.n	80041ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419a:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	401a      	ands	r2, r3
 80041a4:	2380      	movs	r3, #128	@ 0x80
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d0ed      	beq.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b004      	add	sp, #16
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	40007000 	.word	0x40007000
 80041bc:	fffff9ff 	.word	0xfffff9ff
 80041c0:	2000001c 	.word	0x2000001c
 80041c4:	000f4240 	.word	0x000f4240

080041c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	23e0      	movs	r3, #224	@ 0xe0
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	4013      	ands	r3, r2
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000

080041e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e2fe      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	d100      	bne.n	80041fe <HAL_RCC_OscConfig+0x1e>
 80041fc:	e07c      	b.n	80042f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041fe:	4bc3      	ldr	r3, [pc, #780]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2238      	movs	r2, #56	@ 0x38
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004208:	4bc0      	ldr	r3, [pc, #768]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2203      	movs	r2, #3
 800420e:	4013      	ands	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b10      	cmp	r3, #16
 8004216:	d102      	bne.n	800421e <HAL_RCC_OscConfig+0x3e>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d002      	beq.n	8004224 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d10b      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	4bb9      	ldr	r3, [pc, #740]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	2380      	movs	r3, #128	@ 0x80
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	4013      	ands	r3, r2
 800422e:	d062      	beq.n	80042f6 <HAL_RCC_OscConfig+0x116>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d15e      	bne.n	80042f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e2d9      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	025b      	lsls	r3, r3, #9
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x78>
 8004248:	4bb0      	ldr	r3, [pc, #704]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4baf      	ldr	r3, [pc, #700]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800424e:	2180      	movs	r1, #128	@ 0x80
 8004250:	0249      	lsls	r1, r1, #9
 8004252:	430a      	orrs	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e020      	b.n	800429a <HAL_RCC_OscConfig+0xba>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	23a0      	movs	r3, #160	@ 0xa0
 800425e:	02db      	lsls	r3, r3, #11
 8004260:	429a      	cmp	r2, r3
 8004262:	d10e      	bne.n	8004282 <HAL_RCC_OscConfig+0xa2>
 8004264:	4ba9      	ldr	r3, [pc, #676]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4ba8      	ldr	r3, [pc, #672]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800426a:	2180      	movs	r1, #128	@ 0x80
 800426c:	02c9      	lsls	r1, r1, #11
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	4ba6      	ldr	r3, [pc, #664]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4ba5      	ldr	r3, [pc, #660]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004278:	2180      	movs	r1, #128	@ 0x80
 800427a:	0249      	lsls	r1, r1, #9
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e00b      	b.n	800429a <HAL_RCC_OscConfig+0xba>
 8004282:	4ba2      	ldr	r3, [pc, #648]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4ba1      	ldr	r3, [pc, #644]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004288:	49a1      	ldr	r1, [pc, #644]	@ (8004510 <HAL_RCC_OscConfig+0x330>)
 800428a:	400a      	ands	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	4b9f      	ldr	r3, [pc, #636]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b9e      	ldr	r3, [pc, #632]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004294:	499f      	ldr	r1, [pc, #636]	@ (8004514 <HAL_RCC_OscConfig+0x334>)
 8004296:	400a      	ands	r2, r1
 8004298:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d014      	beq.n	80042cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd fdcd 	bl	8001e40 <HAL_GetTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd fdc8 	bl	8001e40 <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	@ 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e298      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	4b93      	ldr	r3, [pc, #588]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	@ 0x80
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	4013      	ands	r3, r2
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0xcc>
 80042ca:	e015      	b.n	80042f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fdb8 	bl	8001e40 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d6:	f7fd fdb3 	bl	8001e40 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b64      	cmp	r3, #100	@ 0x64
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e283      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e8:	4b88      	ldr	r3, [pc, #544]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	4013      	ands	r3, r2
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0xf6>
 80042f4:	e000      	b.n	80042f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2202      	movs	r2, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	d100      	bne.n	8004304 <HAL_RCC_OscConfig+0x124>
 8004302:	e099      	b.n	8004438 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004304:	4b81      	ldr	r3, [pc, #516]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2238      	movs	r2, #56	@ 0x38
 800430a:	4013      	ands	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430e:	4b7f      	ldr	r3, [pc, #508]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2203      	movs	r2, #3
 8004314:	4013      	ands	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b10      	cmp	r3, #16
 800431c:	d102      	bne.n	8004324 <HAL_RCC_OscConfig+0x144>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d002      	beq.n	800432a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d135      	bne.n	8004396 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800432a:	4b78      	ldr	r3, [pc, #480]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4013      	ands	r3, r2
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x162>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e256      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b72      	ldr	r3, [pc, #456]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4a74      	ldr	r2, [pc, #464]	@ (8004518 <HAL_RCC_OscConfig+0x338>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	4b6e      	ldr	r3, [pc, #440]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d112      	bne.n	8004384 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800435e:	4b6b      	ldr	r3, [pc, #428]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6e      	ldr	r2, [pc, #440]	@ (800451c <HAL_RCC_OscConfig+0x33c>)
 8004364:	4013      	ands	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b67      	ldr	r3, [pc, #412]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004372:	4b66      	ldr	r3, [pc, #408]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0adb      	lsrs	r3, r3, #11
 8004378:	2207      	movs	r2, #7
 800437a:	4013      	ands	r3, r2
 800437c:	4a68      	ldr	r2, [pc, #416]	@ (8004520 <HAL_RCC_OscConfig+0x340>)
 800437e:	40da      	lsrs	r2, r3
 8004380:	4b68      	ldr	r3, [pc, #416]	@ (8004524 <HAL_RCC_OscConfig+0x344>)
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004384:	4b68      	ldr	r3, [pc, #416]	@ (8004528 <HAL_RCC_OscConfig+0x348>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0018      	movs	r0, r3
 800438a:	f7fd fcfd 	bl	8001d88 <HAL_InitTick>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d051      	beq.n	8004436 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e22c      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d030      	beq.n	8004400 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800439e:	4b5b      	ldr	r3, [pc, #364]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5e      	ldr	r2, [pc, #376]	@ (800451c <HAL_RCC_OscConfig+0x33c>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	4b57      	ldr	r3, [pc, #348]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043b2:	4b56      	ldr	r3, [pc, #344]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b55      	ldr	r3, [pc, #340]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0049      	lsls	r1, r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fd3e 	bl	8001e40 <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fd fd39 	bl	8001e40 <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e209      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043dc:	4b4b      	ldr	r3, [pc, #300]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	2380      	movs	r3, #128	@ 0x80
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4013      	ands	r3, r2
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b48      	ldr	r3, [pc, #288]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004518 <HAL_RCC_OscConfig+0x338>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	021a      	lsls	r2, r3, #8
 80043f8:	4b44      	ldr	r3, [pc, #272]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e01b      	b.n	8004438 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004400:	4b42      	ldr	r3, [pc, #264]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004406:	4949      	ldr	r1, [pc, #292]	@ (800452c <HAL_RCC_OscConfig+0x34c>)
 8004408:	400a      	ands	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fd18 	bl	8001e40 <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004416:	f7fd fd13 	bl	8001e40 <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1e3      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004428:	4b38      	ldr	r3, [pc, #224]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4013      	ands	r3, r2
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x236>
 8004434:	e000      	b.n	8004438 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004436:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2208      	movs	r2, #8
 800443e:	4013      	ands	r3, r2
 8004440:	d047      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004442:	4b32      	ldr	r3, [pc, #200]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2238      	movs	r2, #56	@ 0x38
 8004448:	4013      	ands	r3, r2
 800444a:	2b18      	cmp	r3, #24
 800444c:	d10a      	bne.n	8004464 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800444e:	4b2f      	ldr	r3, [pc, #188]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	d03c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d138      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e1c5      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d019      	beq.n	80044a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800446c:	4b27      	ldr	r3, [pc, #156]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 800446e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004470:	4b26      	ldr	r3, [pc, #152]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004472:	2101      	movs	r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd fce2 	bl	8001e40 <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd fcdd 	bl	8001e40 <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1ad      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004494:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	2202      	movs	r2, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d0f1      	beq.n	8004482 <HAL_RCC_OscConfig+0x2a2>
 800449e:	e018      	b.n	80044d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044a0:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80044a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044a4:	4b19      	ldr	r3, [pc, #100]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80044a6:	2101      	movs	r1, #1
 80044a8:	438a      	bics	r2, r1
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd fcc8 	bl	8001e40 <HAL_GetTick>
 80044b0:	0003      	movs	r3, r0
 80044b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd fcc3 	bl	8001e40 <HAL_GetTick>
 80044ba:	0002      	movs	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e193      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c8:	4b10      	ldr	r3, [pc, #64]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d1f1      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2204      	movs	r2, #4
 80044d8:	4013      	ands	r3, r2
 80044da:	d100      	bne.n	80044de <HAL_RCC_OscConfig+0x2fe>
 80044dc:	e0c6      	b.n	800466c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	231f      	movs	r3, #31
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044e6:	4b09      	ldr	r3, [pc, #36]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2238      	movs	r2, #56	@ 0x38
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d11e      	bne.n	8004530 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_RCC_OscConfig+0x32c>)
 80044f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f6:	2202      	movs	r2, #2
 80044f8:	4013      	ands	r3, r2
 80044fa:	d100      	bne.n	80044fe <HAL_RCC_OscConfig+0x31e>
 80044fc:	e0b6      	b.n	800466c <HAL_RCC_OscConfig+0x48c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d000      	beq.n	8004508 <HAL_RCC_OscConfig+0x328>
 8004506:	e0b1      	b.n	800466c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e171      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
 800450c:	40021000 	.word	0x40021000
 8004510:	fffeffff 	.word	0xfffeffff
 8004514:	fffbffff 	.word	0xfffbffff
 8004518:	ffff80ff 	.word	0xffff80ff
 800451c:	ffffc7ff 	.word	0xffffc7ff
 8004520:	00f42400 	.word	0x00f42400
 8004524:	2000001c 	.word	0x2000001c
 8004528:	20000020 	.word	0x20000020
 800452c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004530:	4bb1      	ldr	r3, [pc, #708]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	055b      	lsls	r3, r3, #21
 8004538:	4013      	ands	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_RCC_OscConfig+0x360>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x362>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	4bac      	ldr	r3, [pc, #688]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454a:	4bab      	ldr	r3, [pc, #684]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 800454c:	2180      	movs	r1, #128	@ 0x80
 800454e:	0549      	lsls	r1, r1, #21
 8004550:	430a      	orrs	r2, r1
 8004552:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004554:	4ba8      	ldr	r3, [pc, #672]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	055b      	lsls	r3, r3, #21
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004562:	231f      	movs	r3, #31
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456a:	4ba4      	ldr	r3, [pc, #656]	@ (80047fc <HAL_RCC_OscConfig+0x61c>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4013      	ands	r3, r2
 8004574:	d11a      	bne.n	80045ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004576:	4ba1      	ldr	r3, [pc, #644]	@ (80047fc <HAL_RCC_OscConfig+0x61c>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4ba0      	ldr	r3, [pc, #640]	@ (80047fc <HAL_RCC_OscConfig+0x61c>)
 800457c:	2180      	movs	r1, #128	@ 0x80
 800457e:	0049      	lsls	r1, r1, #1
 8004580:	430a      	orrs	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004584:	f7fd fc5c 	bl	8001e40 <HAL_GetTick>
 8004588:	0003      	movs	r3, r0
 800458a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458e:	f7fd fc57 	bl	8001e40 <HAL_GetTick>
 8004592:	0002      	movs	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e127      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	4b96      	ldr	r3, [pc, #600]	@ (80047fc <HAL_RCC_OscConfig+0x61c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3e2>
 80045b4:	4b90      	ldr	r3, [pc, #576]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045b8:	4b8f      	ldr	r3, [pc, #572]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	430a      	orrs	r2, r1
 80045be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045c0:	e01c      	b.n	80045fc <HAL_RCC_OscConfig+0x41c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x404>
 80045ca:	4b8b      	ldr	r3, [pc, #556]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045ce:	4b8a      	ldr	r3, [pc, #552]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045d0:	2104      	movs	r1, #4
 80045d2:	430a      	orrs	r2, r1
 80045d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045d6:	4b88      	ldr	r3, [pc, #544]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045da:	4b87      	ldr	r3, [pc, #540]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045dc:	2101      	movs	r1, #1
 80045de:	430a      	orrs	r2, r1
 80045e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045e2:	e00b      	b.n	80045fc <HAL_RCC_OscConfig+0x41c>
 80045e4:	4b84      	ldr	r3, [pc, #528]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045e8:	4b83      	ldr	r3, [pc, #524]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	438a      	bics	r2, r1
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045f0:	4b81      	ldr	r3, [pc, #516]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045f4:	4b80      	ldr	r3, [pc, #512]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80045f6:	2104      	movs	r1, #4
 80045f8:	438a      	bics	r2, r1
 80045fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d014      	beq.n	800462e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd fc1c 	bl	8001e40 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460c:	e009      	b.n	8004622 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fd fc17 	bl	8001e40 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	4a79      	ldr	r2, [pc, #484]	@ (8004800 <HAL_RCC_OscConfig+0x620>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e0e6      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004622:	4b75      	ldr	r3, [pc, #468]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	2202      	movs	r2, #2
 8004628:	4013      	ands	r3, r2
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x42e>
 800462c:	e013      	b.n	8004656 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fd fc07 	bl	8001e40 <HAL_GetTick>
 8004632:	0003      	movs	r3, r0
 8004634:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004636:	e009      	b.n	800464c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fd fc02 	bl	8001e40 <HAL_GetTick>
 800463c:	0002      	movs	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a6f      	ldr	r2, [pc, #444]	@ (8004800 <HAL_RCC_OscConfig+0x620>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0d1      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800464c:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 800464e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004650:	2202      	movs	r2, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004656:	231f      	movs	r3, #31
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d105      	bne.n	800466c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004660:	4b65      	ldr	r3, [pc, #404]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004662:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004664:	4b64      	ldr	r3, [pc, #400]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004666:	4967      	ldr	r1, [pc, #412]	@ (8004804 <HAL_RCC_OscConfig+0x624>)
 8004668:	400a      	ands	r2, r1
 800466a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d100      	bne.n	8004676 <HAL_RCC_OscConfig+0x496>
 8004674:	e0bb      	b.n	80047ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004676:	4b60      	ldr	r3, [pc, #384]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2238      	movs	r2, #56	@ 0x38
 800467c:	4013      	ands	r3, r2
 800467e:	2b10      	cmp	r3, #16
 8004680:	d100      	bne.n	8004684 <HAL_RCC_OscConfig+0x4a4>
 8004682:	e07b      	b.n	800477c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d156      	bne.n	800473a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b5a      	ldr	r3, [pc, #360]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004692:	495d      	ldr	r1, [pc, #372]	@ (8004808 <HAL_RCC_OscConfig+0x628>)
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd fbd2 	bl	8001e40 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd fbcd 	bl	8001e40 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e09d      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b4:	4b50      	ldr	r3, [pc, #320]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	049b      	lsls	r3, r3, #18
 80046bc:	4013      	ands	r3, r2
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c0:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a51      	ldr	r2, [pc, #324]	@ (800480c <HAL_RCC_OscConfig+0x62c>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ec:	431a      	orrs	r2, r3
 80046ee:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f4:	4b40      	ldr	r3, [pc, #256]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b3f      	ldr	r3, [pc, #252]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 80046fa:	2180      	movs	r1, #128	@ 0x80
 80046fc:	0449      	lsls	r1, r1, #17
 80046fe:	430a      	orrs	r2, r1
 8004700:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004702:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	4b3c      	ldr	r3, [pc, #240]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004708:	2180      	movs	r1, #128	@ 0x80
 800470a:	0549      	lsls	r1, r1, #21
 800470c:	430a      	orrs	r2, r1
 800470e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fb96 	bl	8001e40 <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471a:	f7fd fb91 	bl	8001e40 <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e061      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472c:	4b32      	ldr	r3, [pc, #200]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	049b      	lsls	r3, r3, #18
 8004734:	4013      	ands	r3, r2
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x53a>
 8004738:	e059      	b.n	80047ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b2e      	ldr	r3, [pc, #184]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004740:	4931      	ldr	r1, [pc, #196]	@ (8004808 <HAL_RCC_OscConfig+0x628>)
 8004742:	400a      	ands	r2, r1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fb7b 	bl	8001e40 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd fb76 	bl	8001e40 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e046      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004762:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	049b      	lsls	r3, r3, #18
 800476a:	4013      	ands	r3, r2
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800476e:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	4b21      	ldr	r3, [pc, #132]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 8004774:	4926      	ldr	r1, [pc, #152]	@ (8004810 <HAL_RCC_OscConfig+0x630>)
 8004776:	400a      	ands	r2, r1
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	e038      	b.n	80047ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e033      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004788:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <HAL_RCC_OscConfig+0x618>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2203      	movs	r2, #3
 8004792:	401a      	ands	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	429a      	cmp	r2, r3
 800479a:	d126      	bne.n	80047ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2270      	movs	r2, #112	@ 0x70
 80047a0:	401a      	ands	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d11f      	bne.n	80047ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	23fe      	movs	r3, #254	@ 0xfe
 80047ae:	01db      	lsls	r3, r3, #7
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d116      	bne.n	80047ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	23f8      	movs	r3, #248	@ 0xf8
 80047c0:	039b      	lsls	r3, r3, #14
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d10e      	bne.n	80047ea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	23e0      	movs	r3, #224	@ 0xe0
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	401a      	ands	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d106      	bne.n	80047ea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	0f5b      	lsrs	r3, r3, #29
 80047e0:	075a      	lsls	r2, r3, #29
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b008      	add	sp, #32
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40007000 	.word	0x40007000
 8004800:	00001388 	.word	0x00001388
 8004804:	efffffff 	.word	0xefffffff
 8004808:	feffffff 	.word	0xfeffffff
 800480c:	11c1808c 	.word	0x11c1808c
 8004810:	eefefffc 	.word	0xeefefffc

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0e9      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b76      	ldr	r3, [pc, #472]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2207      	movs	r2, #7
 800482e:	4013      	ands	r3, r2
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d91e      	bls.n	8004874 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b73      	ldr	r3, [pc, #460]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2207      	movs	r2, #7
 800483c:	4393      	bics	r3, r2
 800483e:	0019      	movs	r1, r3
 8004840:	4b70      	ldr	r3, [pc, #448]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004848:	f7fd fafa 	bl	8001e40 <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004850:	e009      	b.n	8004866 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004852:	f7fd faf5 	bl	8001e40 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	4a6a      	ldr	r2, [pc, #424]	@ (8004a08 <HAL_RCC_ClockConfig+0x1f4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0ca      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004866:	4b67      	ldr	r3, [pc, #412]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2207      	movs	r2, #7
 800486c:	4013      	ands	r3, r2
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d1ee      	bne.n	8004852 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2202      	movs	r2, #2
 800487a:	4013      	ands	r3, r2
 800487c:	d015      	beq.n	80048aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2204      	movs	r2, #4
 8004884:	4013      	ands	r3, r2
 8004886:	d006      	beq.n	8004896 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004888:	4b60      	ldr	r3, [pc, #384]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	4b5f      	ldr	r3, [pc, #380]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 800488e:	21e0      	movs	r1, #224	@ 0xe0
 8004890:	01c9      	lsls	r1, r1, #7
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004896:	4b5d      	ldr	r3, [pc, #372]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4a5d      	ldr	r2, [pc, #372]	@ (8004a10 <HAL_RCC_ClockConfig+0x1fc>)
 800489c:	4013      	ands	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4b59      	ldr	r3, [pc, #356]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80048a6:	430a      	orrs	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	4013      	ands	r3, r2
 80048b2:	d057      	beq.n	8004964 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048bc:	4b53      	ldr	r3, [pc, #332]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	029b      	lsls	r3, r3, #10
 80048c4:	4013      	ands	r3, r2
 80048c6:	d12b      	bne.n	8004920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e097      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d4:	4b4d      	ldr	r3, [pc, #308]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	049b      	lsls	r3, r3, #18
 80048dc:	4013      	ands	r3, r2
 80048de:	d11f      	bne.n	8004920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e08b      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ec:	4b47      	ldr	r3, [pc, #284]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	@ 0x80
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4013      	ands	r3, r2
 80048f6:	d113      	bne.n	8004920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e07f      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d106      	bne.n	8004912 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004904:	4b41      	ldr	r3, [pc, #260]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d108      	bne.n	8004920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e074      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004912:	4b3e      	ldr	r3, [pc, #248]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 8004914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004916:	2202      	movs	r2, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e06d      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004920:	4b3a      	ldr	r3, [pc, #232]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2207      	movs	r2, #7
 8004926:	4393      	bics	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b37      	ldr	r3, [pc, #220]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004934:	f7fd fa84 	bl	8001e40 <HAL_GetTick>
 8004938:	0003      	movs	r3, r0
 800493a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493c:	e009      	b.n	8004952 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493e:	f7fd fa7f 	bl	8001e40 <HAL_GetTick>
 8004942:	0002      	movs	r2, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	4a2f      	ldr	r2, [pc, #188]	@ (8004a08 <HAL_RCC_ClockConfig+0x1f4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e054      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	4b2e      	ldr	r3, [pc, #184]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2238      	movs	r2, #56	@ 0x38
 8004958:	401a      	ands	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	429a      	cmp	r2, r3
 8004962:	d1ec      	bne.n	800493e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004964:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2207      	movs	r2, #7
 800496a:	4013      	ands	r3, r2
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d21e      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b24      	ldr	r3, [pc, #144]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2207      	movs	r2, #7
 8004978:	4393      	bics	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004984:	f7fd fa5c 	bl	8001e40 <HAL_GetTick>
 8004988:	0003      	movs	r3, r0
 800498a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800498c:	e009      	b.n	80049a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498e:	f7fd fa57 	bl	8001e40 <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <HAL_RCC_ClockConfig+0x1f4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e02c      	b.n	80049fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049a2:	4b18      	ldr	r3, [pc, #96]	@ (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2207      	movs	r2, #7
 80049a8:	4013      	ands	r3, r2
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1ee      	bne.n	800498e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2204      	movs	r2, #4
 80049b6:	4013      	ands	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049ba:	4b14      	ldr	r3, [pc, #80]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4a15      	ldr	r2, [pc, #84]	@ (8004a14 <HAL_RCC_ClockConfig+0x200>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	4b10      	ldr	r3, [pc, #64]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049ce:	f000 f829 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049d2:	0001      	movs	r1, r0
 80049d4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	0a1b      	lsrs	r3, r3, #8
 80049da:	220f      	movs	r2, #15
 80049dc:	401a      	ands	r2, r3
 80049de:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <HAL_RCC_ClockConfig+0x204>)
 80049e0:	0092      	lsls	r2, r2, #2
 80049e2:	58d3      	ldr	r3, [r2, r3]
 80049e4:	221f      	movs	r2, #31
 80049e6:	4013      	ands	r3, r2
 80049e8:	000a      	movs	r2, r1
 80049ea:	40da      	lsrs	r2, r3
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_ClockConfig+0x208>)
 80049ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCC_ClockConfig+0x20c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7fd f9c7 	bl	8001d88 <HAL_InitTick>
 80049fa:	0003      	movs	r3, r0
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40022000 	.word	0x40022000
 8004a08:	00001388 	.word	0x00001388
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	fffff0ff 	.word	0xfffff0ff
 8004a14:	ffff8fff 	.word	0xffff8fff
 8004a18:	08007840 	.word	0x08007840
 8004a1c:	2000001c 	.word	0x2000001c
 8004a20:	20000020 	.word	0x20000020

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2238      	movs	r2, #56	@ 0x38
 8004a30:	4013      	ands	r3, r2
 8004a32:	d10f      	bne.n	8004a54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a34:	4b39      	ldr	r3, [pc, #228]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0adb      	lsrs	r3, r3, #11
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2201      	movs	r2, #1
 8004a40:	409a      	lsls	r2, r3
 8004a42:	0013      	movs	r3, r2
 8004a44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	4835      	ldr	r0, [pc, #212]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a4a:	f7fb fb5b 	bl	8000104 <__udivsi3>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	e05d      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a54:	4b31      	ldr	r3, [pc, #196]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2238      	movs	r2, #56	@ 0x38
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a60:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e054      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a66:	4b2d      	ldr	r3, [pc, #180]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2238      	movs	r2, #56	@ 0x38
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d138      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a72:	4b2a      	ldr	r3, [pc, #168]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2203      	movs	r2, #3
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a7c:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	2207      	movs	r2, #7
 8004a84:	4013      	ands	r3, r2
 8004a86:	3301      	adds	r3, #1
 8004a88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4824      	ldr	r0, [pc, #144]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a94:	f7fb fb36 	bl	8000104 <__udivsi3>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	227f      	movs	r2, #127	@ 0x7f
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	434b      	muls	r3, r1
 8004aa8:	617b      	str	r3, [r7, #20]
        break;
 8004aaa:	e00d      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	481c      	ldr	r0, [pc, #112]	@ (8004b20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ab0:	f7fb fb28 	bl	8000104 <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	227f      	movs	r2, #127	@ 0x7f
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	434b      	muls	r3, r1
 8004ac4:	617b      	str	r3, [r7, #20]
        break;
 8004ac6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ac8:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0f5b      	lsrs	r3, r3, #29
 8004ace:	2207      	movs	r2, #7
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	f7fb fb13 	bl	8000104 <__udivsi3>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e015      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2238      	movs	r2, #56	@ 0x38
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d103      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004af0:	2380      	movs	r3, #128	@ 0x80
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e00b      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004af8:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2238      	movs	r2, #56	@ 0x38
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b18      	cmp	r3, #24
 8004b02:	d103      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b04:	23fa      	movs	r3, #250	@ 0xfa
 8004b06:	01db      	lsls	r3, r3, #7
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e001      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b10:	693b      	ldr	r3, [r7, #16]
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b006      	add	sp, #24
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	007a1200 	.word	0x007a1200

08004b28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b2c:	4b02      	ldr	r3, [pc, #8]	@ (8004b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	2000001c 	.word	0x2000001c

08004b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b3c:	b5b0      	push	{r4, r5, r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b40:	f7ff fff2 	bl	8004b28 <HAL_RCC_GetHCLKFreq>
 8004b44:	0004      	movs	r4, r0
 8004b46:	f7ff fb3f 	bl	80041c8 <LL_RCC_GetAPB1Prescaler>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	0b1a      	lsrs	r2, r3, #12
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b50:	0092      	lsls	r2, r2, #2
 8004b52:	58d3      	ldr	r3, [r2, r3]
 8004b54:	221f      	movs	r2, #31
 8004b56:	4013      	ands	r3, r2
 8004b58:	40dc      	lsrs	r4, r3
 8004b5a:	0023      	movs	r3, r4
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bdb0      	pop	{r4, r5, r7, pc}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	08007880 	.word	0x08007880

08004b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b70:	2313      	movs	r3, #19
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b78:	2312      	movs	r3, #18
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b8c:	e0a3      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2011      	movs	r0, #17
 8004b90:	183b      	adds	r3, r7, r0
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b96:	4bc3      	ldr	r3, [pc, #780]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	055b      	lsls	r3, r3, #21
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d110      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	4bc0      	ldr	r3, [pc, #768]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba6:	4bbf      	ldr	r3, [pc, #764]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba8:	2180      	movs	r1, #128	@ 0x80
 8004baa:	0549      	lsls	r1, r1, #21
 8004bac:	430a      	orrs	r2, r1
 8004bae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004bb0:	4bbc      	ldr	r3, [pc, #752]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bb4:	2380      	movs	r3, #128	@ 0x80
 8004bb6:	055b      	lsls	r3, r3, #21
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc4:	4bb8      	ldr	r3, [pc, #736]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4bb7      	ldr	r3, [pc, #732]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bca:	2180      	movs	r1, #128	@ 0x80
 8004bcc:	0049      	lsls	r1, r1, #1
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd2:	f7fd f935 	bl	8001e40 <HAL_GetTick>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bdc:	f7fd f930 	bl	8001e40 <HAL_GetTick>
 8004be0:	0002      	movs	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d904      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004bea:	2313      	movs	r3, #19
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	2203      	movs	r2, #3
 8004bf0:	701a      	strb	r2, [r3, #0]
        break;
 8004bf2:	e005      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf4:	4bac      	ldr	r3, [pc, #688]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0ed      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c00:	2313      	movs	r3, #19
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d154      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c0a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c0e:	23c0      	movs	r3, #192	@ 0xc0
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d019      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d014      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c26:	4b9f      	ldr	r3, [pc, #636]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	4aa0      	ldr	r2, [pc, #640]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c30:	4b9c      	ldr	r3, [pc, #624]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c34:	4b9b      	ldr	r3, [pc, #620]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	0249      	lsls	r1, r1, #9
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3e:	4b99      	ldr	r3, [pc, #612]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c42:	4b98      	ldr	r3, [pc, #608]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c44:	499a      	ldr	r1, [pc, #616]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c46:	400a      	ands	r2, r1
 8004c48:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c4a:	4b96      	ldr	r3, [pc, #600]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	d016      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd f8f2 	bl	8001e40 <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c60:	e00c      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd f8ed 	bl	8001e40 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	4a91      	ldr	r2, [pc, #580]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d904      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c72:	2313      	movs	r3, #19
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	2203      	movs	r2, #3
 8004c78:	701a      	strb	r2, [r3, #0]
            break;
 8004c7a:	e004      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7c:	4b89      	ldr	r3, [pc, #548]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	2202      	movs	r2, #2
 8004c82:	4013      	ands	r3, r2
 8004c84:	d0ed      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c86:	2313      	movs	r3, #19
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c90:	4b84      	ldr	r3, [pc, #528]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	4a85      	ldr	r2, [pc, #532]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	0019      	movs	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9e:	4b81      	ldr	r3, [pc, #516]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ca4:	e00c      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ca6:	2312      	movs	r3, #18
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	2213      	movs	r2, #19
 8004cac:	18ba      	adds	r2, r7, r2
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	2312      	movs	r3, #18
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2213      	movs	r2, #19
 8004cba:	18ba      	adds	r2, r7, r2
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc0:	2311      	movs	r3, #17
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cca:	4b76      	ldr	r3, [pc, #472]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cce:	4b75      	ldr	r3, [pc, #468]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd0:	4979      	ldr	r1, [pc, #484]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce0:	4b70      	ldr	r3, [pc, #448]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	4393      	bics	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cfe:	4b69      	ldr	r3, [pc, #420]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	220c      	movs	r2, #12
 8004d04:	4393      	bics	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	4b65      	ldr	r3, [pc, #404]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d1c:	4b61      	ldr	r3, [pc, #388]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	4a66      	ldr	r2, [pc, #408]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	2380      	movs	r3, #128	@ 0x80
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d40:	4a5f      	ldr	r2, [pc, #380]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	0019      	movs	r1, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d5c:	4b51      	ldr	r3, [pc, #324]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	4a58      	ldr	r2, [pc, #352]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2220      	movs	r2, #32
 8004d76:	4013      	ands	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7e:	4a52      	ldr	r2, [pc, #328]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	4b46      	ldr	r3, [pc, #280]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4013      	ands	r3, r2
 8004d98:	d015      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	0899      	lsrs	r1, r3, #2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da8:	430a      	orrs	r2, r1
 8004daa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004db8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	0249      	lsls	r1, r1, #9
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd2:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd6:	2240      	movs	r2, #64	@ 0x40
 8004dd8:	4393      	bics	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004de0:	4b30      	ldr	r3, [pc, #192]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	039b      	lsls	r3, r3, #14
 8004dee:	4013      	ands	r3, r2
 8004df0:	d016      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004df2:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df6:	4a35      	ldr	r2, [pc, #212]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e00:	4b28      	ldr	r3, [pc, #160]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	03db      	lsls	r3, r3, #15
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d106      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e12:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	4b23      	ldr	r3, [pc, #140]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e18:	2180      	movs	r1, #128	@ 0x80
 8004e1a:	0449      	lsls	r1, r1, #17
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2380      	movs	r3, #128	@ 0x80
 8004e26:	03db      	lsls	r3, r3, #15
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d016      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e30:	4a27      	ldr	r2, [pc, #156]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	045b      	lsls	r3, r3, #17
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	4b14      	ldr	r3, [pc, #80]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e52:	2180      	movs	r1, #128	@ 0x80
 8004e54:	0449      	lsls	r1, r1, #17
 8004e56:	430a      	orrs	r2, r1
 8004e58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4013      	ands	r3, r2
 8004e64:	d016      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	0019      	movs	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e76:	430a      	orrs	r2, r1
 8004e78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	01db      	lsls	r3, r3, #7
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d106      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e86:	4b07      	ldr	r3, [pc, #28]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e8c:	2180      	movs	r1, #128	@ 0x80
 8004e8e:	0249      	lsls	r1, r1, #9
 8004e90:	430a      	orrs	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004e94:	2312      	movs	r3, #18
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	781b      	ldrb	r3, [r3, #0]
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b006      	add	sp, #24
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	fffffcff 	.word	0xfffffcff
 8004eb0:	fffeffff 	.word	0xfffeffff
 8004eb4:	00001388 	.word	0x00001388
 8004eb8:	efffffff 	.word	0xefffffff
 8004ebc:	fffff3ff 	.word	0xfffff3ff
 8004ec0:	fff3ffff 	.word	0xfff3ffff
 8004ec4:	ffcfffff 	.word	0xffcfffff
 8004ec8:	ffffcfff 	.word	0xffffcfff
 8004ecc:	ffbfffff 	.word	0xffbfffff
 8004ed0:	feffffff 	.word	0xfeffffff
 8004ed4:	ffff3fff 	.word	0xffff3fff

08004ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e04a      	b.n	8004f80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	223d      	movs	r2, #61	@ 0x3d
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	223c      	movs	r2, #60	@ 0x3c
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fc fd15 	bl	8001930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223d      	movs	r2, #61	@ 0x3d
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	0019      	movs	r1, r3
 8004f18:	0010      	movs	r0, r2
 8004f1a:	f000 fe6f 	bl	8005bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2248      	movs	r2, #72	@ 0x48
 8004f22:	2101      	movs	r1, #1
 8004f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	223e      	movs	r2, #62	@ 0x3e
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	223f      	movs	r2, #63	@ 0x3f
 8004f32:	2101      	movs	r1, #1
 8004f34:	5499      	strb	r1, [r3, r2]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2240      	movs	r2, #64	@ 0x40
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	5499      	strb	r1, [r3, r2]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2241      	movs	r2, #65	@ 0x41
 8004f42:	2101      	movs	r1, #1
 8004f44:	5499      	strb	r1, [r3, r2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2242      	movs	r2, #66	@ 0x42
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	5499      	strb	r1, [r3, r2]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2243      	movs	r2, #67	@ 0x43
 8004f52:	2101      	movs	r1, #1
 8004f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2244      	movs	r2, #68	@ 0x44
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	5499      	strb	r1, [r3, r2]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2245      	movs	r2, #69	@ 0x45
 8004f62:	2101      	movs	r1, #1
 8004f64:	5499      	strb	r1, [r3, r2]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2246      	movs	r2, #70	@ 0x46
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2247      	movs	r2, #71	@ 0x47
 8004f72:	2101      	movs	r1, #1
 8004f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223d      	movs	r2, #61	@ 0x3d
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	223d      	movs	r2, #61	@ 0x3d
 8004f94:	5c9b      	ldrb	r3, [r3, r2]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e042      	b.n	8005026 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	223d      	movs	r2, #61	@ 0x3d
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <HAL_TIM_Base_Start_IT+0xa8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00f      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x5a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	05db      	lsls	r3, r3, #23
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x5a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	@ (8005034 <HAL_TIM_Base_Start_IT+0xac>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x5a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	@ (8005038 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d116      	bne.n	8005010 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	@ (800503c <HAL_TIM_Base_Start_IT+0xb4>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b06      	cmp	r3, #6
 8004ff2:	d016      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x9a>
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	2380      	movs	r3, #128	@ 0x80
 8004ff8:	025b      	lsls	r3, r3, #9
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d011      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2101      	movs	r1, #1
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	e008      	b.n	8005022 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2101      	movs	r1, #1
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e000      	b.n	8005024 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b004      	add	sp, #16
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40014000 	.word	0x40014000
 800503c:	00010007 	.word	0x00010007

08005040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e04a      	b.n	80050e8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	223d      	movs	r2, #61	@ 0x3d
 8005056:	5c9b      	ldrb	r3, [r3, r2]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	223c      	movs	r2, #60	@ 0x3c
 8005062:	2100      	movs	r1, #0
 8005064:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f7fc fba3 	bl	80017b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	223d      	movs	r2, #61	@ 0x3d
 8005072:	2102      	movs	r1, #2
 8005074:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	0019      	movs	r1, r3
 8005080:	0010      	movs	r0, r2
 8005082:	f000 fdbb 	bl	8005bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2248      	movs	r2, #72	@ 0x48
 800508a:	2101      	movs	r1, #1
 800508c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	223e      	movs	r2, #62	@ 0x3e
 8005092:	2101      	movs	r1, #1
 8005094:	5499      	strb	r1, [r3, r2]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	223f      	movs	r2, #63	@ 0x3f
 800509a:	2101      	movs	r1, #1
 800509c:	5499      	strb	r1, [r3, r2]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2240      	movs	r2, #64	@ 0x40
 80050a2:	2101      	movs	r1, #1
 80050a4:	5499      	strb	r1, [r3, r2]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2241      	movs	r2, #65	@ 0x41
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2242      	movs	r2, #66	@ 0x42
 80050b2:	2101      	movs	r1, #1
 80050b4:	5499      	strb	r1, [r3, r2]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2243      	movs	r2, #67	@ 0x43
 80050ba:	2101      	movs	r1, #1
 80050bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2244      	movs	r2, #68	@ 0x44
 80050c2:	2101      	movs	r1, #1
 80050c4:	5499      	strb	r1, [r3, r2]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2245      	movs	r2, #69	@ 0x45
 80050ca:	2101      	movs	r1, #1
 80050cc:	5499      	strb	r1, [r3, r2]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2246      	movs	r2, #70	@ 0x46
 80050d2:	2101      	movs	r1, #1
 80050d4:	5499      	strb	r1, [r3, r2]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2247      	movs	r2, #71	@ 0x47
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	223d      	movs	r2, #61	@ 0x3d
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b002      	add	sp, #8
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <HAL_TIM_PWM_Start+0x22>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	223e      	movs	r2, #62	@ 0x3e
 8005104:	5c9b      	ldrb	r3, [r3, r2]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	1e5a      	subs	r2, r3, #1
 800510c:	4193      	sbcs	r3, r2
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e037      	b.n	8005182 <HAL_TIM_PWM_Start+0x92>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d108      	bne.n	800512a <HAL_TIM_PWM_Start+0x3a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	223f      	movs	r2, #63	@ 0x3f
 800511c:	5c9b      	ldrb	r3, [r3, r2]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	1e5a      	subs	r2, r3, #1
 8005124:	4193      	sbcs	r3, r2
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e02b      	b.n	8005182 <HAL_TIM_PWM_Start+0x92>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d108      	bne.n	8005142 <HAL_TIM_PWM_Start+0x52>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	5c9b      	ldrb	r3, [r3, r2]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	4193      	sbcs	r3, r2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e01f      	b.n	8005182 <HAL_TIM_PWM_Start+0x92>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b0c      	cmp	r3, #12
 8005146:	d108      	bne.n	800515a <HAL_TIM_PWM_Start+0x6a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2241      	movs	r2, #65	@ 0x41
 800514c:	5c9b      	ldrb	r3, [r3, r2]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	1e5a      	subs	r2, r3, #1
 8005154:	4193      	sbcs	r3, r2
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e013      	b.n	8005182 <HAL_TIM_PWM_Start+0x92>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b10      	cmp	r3, #16
 800515e:	d108      	bne.n	8005172 <HAL_TIM_PWM_Start+0x82>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2242      	movs	r2, #66	@ 0x42
 8005164:	5c9b      	ldrb	r3, [r3, r2]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	1e5a      	subs	r2, r3, #1
 800516c:	4193      	sbcs	r3, r2
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e007      	b.n	8005182 <HAL_TIM_PWM_Start+0x92>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2243      	movs	r2, #67	@ 0x43
 8005176:	5c9b      	ldrb	r3, [r3, r2]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	1e5a      	subs	r2, r3, #1
 800517e:	4193      	sbcs	r3, r2
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e08b      	b.n	80052a2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xaa>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	223e      	movs	r2, #62	@ 0x3e
 8005194:	2102      	movs	r1, #2
 8005196:	5499      	strb	r1, [r3, r2]
 8005198:	e023      	b.n	80051e2 <HAL_TIM_PWM_Start+0xf2>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xba>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	223f      	movs	r2, #63	@ 0x3f
 80051a4:	2102      	movs	r1, #2
 80051a6:	5499      	strb	r1, [r3, r2]
 80051a8:	e01b      	b.n	80051e2 <HAL_TIM_PWM_Start+0xf2>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xca>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2240      	movs	r2, #64	@ 0x40
 80051b4:	2102      	movs	r1, #2
 80051b6:	5499      	strb	r1, [r3, r2]
 80051b8:	e013      	b.n	80051e2 <HAL_TIM_PWM_Start+0xf2>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xda>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2241      	movs	r2, #65	@ 0x41
 80051c4:	2102      	movs	r1, #2
 80051c6:	5499      	strb	r1, [r3, r2]
 80051c8:	e00b      	b.n	80051e2 <HAL_TIM_PWM_Start+0xf2>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xea>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2242      	movs	r2, #66	@ 0x42
 80051d4:	2102      	movs	r1, #2
 80051d6:	5499      	strb	r1, [r3, r2]
 80051d8:	e003      	b.n	80051e2 <HAL_TIM_PWM_Start+0xf2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2243      	movs	r2, #67	@ 0x43
 80051de:	2102      	movs	r1, #2
 80051e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	0018      	movs	r0, r3
 80051ec:	f001 fa92 	bl	8006714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	@ (80052ac <HAL_TIM_PWM_Start+0x1bc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_TIM_PWM_Start+0x128>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2c      	ldr	r2, [pc, #176]	@ (80052b0 <HAL_TIM_PWM_Start+0x1c0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_TIM_PWM_Start+0x128>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2a      	ldr	r2, [pc, #168]	@ (80052b4 <HAL_TIM_PWM_Start+0x1c4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIM_PWM_Start+0x128>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a29      	ldr	r2, [pc, #164]	@ (80052b8 <HAL_TIM_PWM_Start+0x1c8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_TIM_PWM_Start+0x12c>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_TIM_PWM_Start+0x12e>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2180      	movs	r1, #128	@ 0x80
 800522e:	0209      	lsls	r1, r1, #8
 8005230:	430a      	orrs	r2, r1
 8005232:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1c      	ldr	r2, [pc, #112]	@ (80052ac <HAL_TIM_PWM_Start+0x1bc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <HAL_TIM_PWM_Start+0x16e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	2380      	movs	r3, #128	@ 0x80
 8005244:	05db      	lsls	r3, r3, #23
 8005246:	429a      	cmp	r2, r3
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0x16e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <HAL_TIM_PWM_Start+0x1cc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0x16e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <HAL_TIM_PWM_Start+0x1c0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d116      	bne.n	800528c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <HAL_TIM_PWM_Start+0x1d0>)
 8005266:	4013      	ands	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d016      	beq.n	800529e <HAL_TIM_PWM_Start+0x1ae>
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	2380      	movs	r3, #128	@ 0x80
 8005274:	025b      	lsls	r3, r3, #9
 8005276:	429a      	cmp	r2, r3
 8005278:	d011      	beq.n	800529e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2101      	movs	r1, #1
 8005286:	430a      	orrs	r2, r1
 8005288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	e008      	b.n	800529e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2101      	movs	r1, #1
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e000      	b.n	80052a0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40000400 	.word	0x40000400
 80052c0:	00010007 	.word	0x00010007

080052c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e04a      	b.n	800536c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	223d      	movs	r2, #61	@ 0x3d
 80052da:	5c9b      	ldrb	r3, [r3, r2]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	223c      	movs	r2, #60	@ 0x3c
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fc fad5 	bl	800189c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	223d      	movs	r2, #61	@ 0x3d
 80052f6:	2102      	movs	r1, #2
 80052f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	0019      	movs	r1, r3
 8005304:	0010      	movs	r0, r2
 8005306:	f000 fc79 	bl	8005bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2248      	movs	r2, #72	@ 0x48
 800530e:	2101      	movs	r1, #1
 8005310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223e      	movs	r2, #62	@ 0x3e
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223f      	movs	r2, #63	@ 0x3f
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2240      	movs	r2, #64	@ 0x40
 8005326:	2101      	movs	r1, #1
 8005328:	5499      	strb	r1, [r3, r2]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2241      	movs	r2, #65	@ 0x41
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2242      	movs	r2, #66	@ 0x42
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2243      	movs	r2, #67	@ 0x43
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2244      	movs	r2, #68	@ 0x44
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2245      	movs	r2, #69	@ 0x45
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2246      	movs	r2, #70	@ 0x46
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2247      	movs	r2, #71	@ 0x47
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	223d      	movs	r2, #61	@ 0x3d
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2202      	movs	r2, #2
 8005390:	4013      	ands	r3, r2
 8005392:	d021      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2202      	movs	r2, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2203      	movs	r2, #3
 80053a2:	4252      	negs	r2, r2
 80053a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2203      	movs	r2, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 fc06 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 80053c0:	e007      	b.n	80053d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fbf9 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 fc05 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2204      	movs	r2, #4
 80053dc:	4013      	ands	r3, r2
 80053de:	d022      	beq.n	8005426 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2204      	movs	r2, #4
 80053e4:	4013      	ands	r3, r2
 80053e6:	d01e      	beq.n	8005426 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2205      	movs	r2, #5
 80053ee:	4252      	negs	r2, r2
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	23c0      	movs	r3, #192	@ 0xc0
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4013      	ands	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 fbdf 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800540e:	e007      	b.n	8005420 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	0018      	movs	r0, r3
 8005414:	f000 fbd2 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	0018      	movs	r0, r3
 800541c:	f000 fbde 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2208      	movs	r2, #8
 800542a:	4013      	ands	r3, r2
 800542c:	d021      	beq.n	8005472 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2208      	movs	r2, #8
 8005432:	4013      	ands	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2209      	movs	r2, #9
 800543c:	4252      	negs	r2, r2
 800543e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2204      	movs	r2, #4
 8005444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	2203      	movs	r2, #3
 800544e:	4013      	ands	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fbb9 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800545a:	e007      	b.n	800546c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 fbac 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fbb8 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2210      	movs	r2, #16
 8005476:	4013      	ands	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2210      	movs	r2, #16
 800547e:	4013      	ands	r3, r2
 8005480:	d01e      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2211      	movs	r2, #17
 8005488:	4252      	negs	r2, r2
 800548a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2208      	movs	r2, #8
 8005490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	23c0      	movs	r3, #192	@ 0xc0
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4013      	ands	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 fb92 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 80054a8:	e007      	b.n	80054ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 fb85 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 fb91 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2201      	movs	r2, #1
 80054c4:	4013      	ands	r3, r2
 80054c6:	d00c      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	4013      	ands	r3, r2
 80054ce:	d008      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2202      	movs	r2, #2
 80054d6:	4252      	negs	r2, r2
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 fb65 	bl	8005bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2280      	movs	r2, #128	@ 0x80
 80054e6:	4013      	ands	r3, r2
 80054e8:	d104      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	019b      	lsls	r3, r3, #6
 80054f0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054f2:	d00b      	beq.n	800550c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2280      	movs	r2, #128	@ 0x80
 80054f8:	4013      	ands	r3, r2
 80054fa:	d007      	beq.n	800550c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1e      	ldr	r2, [pc, #120]	@ (800557c <HAL_TIM_IRQHandler+0x208>)
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	0018      	movs	r0, r3
 8005508:	f001 fae5 	bl	8006ad6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4013      	ands	r3, r2
 8005514:	d00b      	beq.n	800552e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	4013      	ands	r3, r2
 800551c:	d007      	beq.n	800552e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <HAL_TIM_IRQHandler+0x20c>)
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0018      	movs	r0, r3
 800552a:	f001 fadc 	bl	8006ae6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2240      	movs	r2, #64	@ 0x40
 8005532:	4013      	ands	r3, r2
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2240      	movs	r2, #64	@ 0x40
 800553a:	4013      	ands	r3, r2
 800553c:	d008      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2241      	movs	r2, #65	@ 0x41
 8005544:	4252      	negs	r2, r2
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	0018      	movs	r0, r3
 800554c:	f000 fb4e 	bl	8005bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2220      	movs	r2, #32
 8005554:	4013      	ands	r3, r2
 8005556:	d00c      	beq.n	8005572 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	4013      	ands	r3, r2
 800555e:	d008      	beq.n	8005572 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2221      	movs	r2, #33	@ 0x21
 8005566:	4252      	negs	r2, r2
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f001 faaa 	bl	8006ac6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	b004      	add	sp, #16
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	ffffdf7f 	.word	0xffffdf7f
 8005580:	fffffeff 	.word	0xfffffeff

08005584 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005590:	2317      	movs	r3, #23
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	223c      	movs	r2, #60	@ 0x3c
 800559c:	5c9b      	ldrb	r3, [r3, r2]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_IC_ConfigChannel+0x22>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e08c      	b.n	80056c0 <HAL_TIM_IC_ConfigChannel+0x13c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	223c      	movs	r2, #60	@ 0x3c
 80055aa:	2101      	movs	r1, #1
 80055ac:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80055c4:	f000 ff02 	bl	80063cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	210c      	movs	r1, #12
 80055d4:	438a      	bics	r2, r1
 80055d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	619a      	str	r2, [r3, #24]
 80055ea:	e062      	b.n	80056b2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d11c      	bne.n	800562c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005602:	f000 ff6d 	bl	80064e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	492d      	ldr	r1, [pc, #180]	@ (80056c8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005612:	400a      	ands	r2, r1
 8005614:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6999      	ldr	r1, [r3, #24]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	021a      	lsls	r2, r3, #8
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	619a      	str	r2, [r3, #24]
 800562a:	e042      	b.n	80056b2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b08      	cmp	r3, #8
 8005630:	d11b      	bne.n	800566a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005642:	f000 ffc1 	bl	80065c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	210c      	movs	r1, #12
 8005652:	438a      	bics	r2, r1
 8005654:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69d9      	ldr	r1, [r3, #28]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	61da      	str	r2, [r3, #28]
 8005668:	e023      	b.n	80056b2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	d11c      	bne.n	80056aa <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005680:	f000 ffe2 	bl	8006648 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	490e      	ldr	r1, [pc, #56]	@ (80056c8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005690:	400a      	ands	r2, r1
 8005692:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69d9      	ldr	r1, [r3, #28]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	61da      	str	r2, [r3, #28]
 80056a8:	e003      	b.n	80056b2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80056aa:	2317      	movs	r3, #23
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	223c      	movs	r2, #60	@ 0x3c
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]

  return status;
 80056ba:	2317      	movs	r3, #23
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b006      	add	sp, #24
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	fffff3ff 	.word	0xfffff3ff

080056cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2317      	movs	r3, #23
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	223c      	movs	r2, #60	@ 0x3c
 80056e4:	5c9b      	ldrb	r3, [r3, r2]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e0e5      	b.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	223c      	movs	r2, #60	@ 0x3c
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b14      	cmp	r3, #20
 80056fa:	d900      	bls.n	80056fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80056fc:	e0d1      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	009a      	lsls	r2, r3, #2
 8005702:	4b70      	ldr	r3, [pc, #448]	@ (80058c4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005704:	18d3      	adds	r3, r2, r3
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	0011      	movs	r1, r2
 8005712:	0018      	movs	r0, r3
 8005714:	f000 fb00 	bl	8005d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2108      	movs	r1, #8
 8005724:	430a      	orrs	r2, r1
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2104      	movs	r1, #4
 8005734:	438a      	bics	r2, r1
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      break;
 800574a:	e0af      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	0011      	movs	r1, r2
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fb69 	bl	8005e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2180      	movs	r1, #128	@ 0x80
 8005766:	0109      	lsls	r1, r1, #4
 8005768:	430a      	orrs	r2, r1
 800576a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4954      	ldr	r1, [pc, #336]	@ (80058c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005778:	400a      	ands	r2, r1
 800577a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	021a      	lsls	r2, r3, #8
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	619a      	str	r2, [r3, #24]
      break;
 8005790:	e08c      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	0011      	movs	r1, r2
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fbca 	bl	8005f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2108      	movs	r1, #8
 80057ac:	430a      	orrs	r2, r1
 80057ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2104      	movs	r1, #4
 80057bc:	438a      	bics	r2, r1
 80057be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69d9      	ldr	r1, [r3, #28]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	691a      	ldr	r2, [r3, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	61da      	str	r2, [r3, #28]
      break;
 80057d2:	e06b      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	0011      	movs	r1, r2
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 fc31 	bl	8006044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2180      	movs	r1, #128	@ 0x80
 80057ee:	0109      	lsls	r1, r1, #4
 80057f0:	430a      	orrs	r2, r1
 80057f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4932      	ldr	r1, [pc, #200]	@ (80058c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005800:	400a      	ands	r2, r1
 8005802:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69d9      	ldr	r1, [r3, #28]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	61da      	str	r2, [r3, #28]
      break;
 8005818:	e048      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	0011      	movs	r1, r2
 8005822:	0018      	movs	r0, r3
 8005824:	f000 fc78 	bl	8006118 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2108      	movs	r1, #8
 8005834:	430a      	orrs	r2, r1
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2104      	movs	r1, #4
 8005844:	438a      	bics	r2, r1
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800585a:	e027      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	0011      	movs	r1, r2
 8005864:	0018      	movs	r0, r3
 8005866:	f000 fcb7 	bl	80061d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2180      	movs	r1, #128	@ 0x80
 8005876:	0109      	lsls	r1, r1, #4
 8005878:	430a      	orrs	r2, r1
 800587a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4910      	ldr	r1, [pc, #64]	@ (80058c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005888:	400a      	ands	r2, r1
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	021a      	lsls	r2, r3, #8
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058a0:	e004      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80058a2:	2317      	movs	r3, #23
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
      break;
 80058aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	223c      	movs	r2, #60	@ 0x3c
 80058b0:	2100      	movs	r1, #0
 80058b2:	5499      	strb	r1, [r3, r2]

  return status;
 80058b4:	2317      	movs	r3, #23
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	781b      	ldrb	r3, [r3, #0]
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b006      	add	sp, #24
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	080078a0 	.word	0x080078a0
 80058c8:	fffffbff 	.word	0xfffffbff

080058cc <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	2317      	movs	r3, #23
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	223c      	movs	r2, #60	@ 0x3c
 80058e4:	5c9b      	ldrb	r3, [r3, r2]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_ConfigOCrefClear+0x22>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e10e      	b.n	8005b0c <HAL_TIM_ConfigOCrefClear+0x240>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	223c      	movs	r2, #60	@ 0x3c
 80058f2:	2101      	movs	r1, #1
 80058f4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	223d      	movs	r2, #61	@ 0x3d
 80058fa:	2102      	movs	r1, #2
 80058fc:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2280      	movs	r2, #128	@ 0x80
 8005904:	0592      	lsls	r2, r2, #22
 8005906:	4293      	cmp	r3, r2
 8005908:	d02f      	beq.n	800596a <HAL_TIM_ConfigOCrefClear+0x9e>
 800590a:	2280      	movs	r2, #128	@ 0x80
 800590c:	0592      	lsls	r2, r2, #22
 800590e:	4293      	cmp	r3, r2
 8005910:	d854      	bhi.n	80059bc <HAL_TIM_ConfigOCrefClear+0xf0>
 8005912:	2b01      	cmp	r3, #1
 8005914:	d914      	bls.n	8005940 <HAL_TIM_ConfigOCrefClear+0x74>
 8005916:	2280      	movs	r2, #128	@ 0x80
 8005918:	0552      	lsls	r2, r2, #21
 800591a:	4293      	cmp	r3, r2
 800591c:	d14e      	bne.n	80059bc <HAL_TIM_ConfigOCrefClear+0xf0>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	497a      	ldr	r1, [pc, #488]	@ (8005b14 <HAL_TIM_ConfigOCrefClear+0x248>)
 800592a:	400a      	ands	r2, r1
 800592c:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2101      	movs	r1, #1
 800593a:	438a      	bics	r2, r1
 800593c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800593e:	e042      	b.n	80059c6 <HAL_TIM_ConfigOCrefClear+0xfa>
#if defined(COMP3)
    case TIM_CLEARINPUTSOURCE_COMP3:
#endif /* COMP3 */
    {
      /* Clear the OCREF clear selection bit */
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2108      	movs	r1, #8
 800594c:	438a      	bics	r2, r1
 800594e:	609a      	str	r2, [r3, #8]

      /* OCREF_CLR_INT is connected to COMPx output */
      MODIFY_REG(htim->Instance->OR1, TIMx_OR1_OCREF_CLR, sClearInputConfig->ClearInputSource);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	2201      	movs	r2, #1
 8005958:	4393      	bics	r3, r2
 800595a:	0019      	movs	r1, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005968:	e02d      	b.n	80059c6 <HAL_TIM_ConfigOCrefClear+0xfa>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_TIM_ConfigOCrefClear+0xba>
      {
        htim->State = HAL_TIM_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	223d      	movs	r2, #61	@ 0x3d
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(htim);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	223c      	movs	r2, #60	@ 0x3c
 800597e:	2100      	movs	r1, #0
 8005980:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e0c2      	b.n	8005b0c <HAL_TIM_ConfigOCrefClear+0x240>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005996:	f000 fe9d 	bl	80066d4 <TIM_ETR_SetConfig>

      /* Set the OCREF clear selection bit */
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2108      	movs	r1, #8
 80059a6:	430a      	orrs	r2, r1
 80059a8:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2101      	movs	r1, #1
 80059b6:	438a      	bics	r2, r1
 80059b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059ba:	e004      	b.n	80059c6 <HAL_TIM_ConfigOCrefClear+0xfa>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2317      	movs	r3, #23
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
      break;
 80059c4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80059c6:	2317      	movs	r3, #23
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d000      	beq.n	80059d2 <HAL_TIM_ConfigOCrefClear+0x106>
 80059d0:	e091      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
  {
    switch (Channel)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b14      	cmp	r3, #20
 80059d6:	d900      	bls.n	80059da <HAL_TIM_ConfigOCrefClear+0x10e>
 80059d8:	e08c      	b.n	8005af4 <HAL_TIM_ConfigOCrefClear+0x228>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	009a      	lsls	r2, r3, #2
 80059de:	4b4e      	ldr	r3, [pc, #312]	@ (8005b18 <HAL_TIM_ConfigOCrefClear+0x24c>)
 80059e0:	18d3      	adds	r3, r2, r3
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	469f      	mov	pc, r3
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_TIM_ConfigOCrefClear+0x134>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2180      	movs	r1, #128	@ 0x80
 80059fa:	430a      	orrs	r2, r1
 80059fc:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 80059fe:	e07a      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	438a      	bics	r2, r1
 8005a0e:	619a      	str	r2, [r3, #24]
        break;
 8005a10:	e071      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_ConfigOCrefClear+0x162>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2180      	movs	r1, #128	@ 0x80
 8005a26:	0209      	lsls	r1, r1, #8
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8005a2c:	e063      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4938      	ldr	r1, [pc, #224]	@ (8005b1c <HAL_TIM_ConfigOCrefClear+0x250>)
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	619a      	str	r2, [r3, #24]
        break;
 8005a3e:	e05a      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_TIM_ConfigOCrefClear+0x18e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2180      	movs	r1, #128	@ 0x80
 8005a54:	430a      	orrs	r2, r1
 8005a56:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8005a58:	e04d      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2180      	movs	r1, #128	@ 0x80
 8005a66:	438a      	bics	r2, r1
 8005a68:	61da      	str	r2, [r3, #28]
        break;
 8005a6a:	e044      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_TIM_ConfigOCrefClear+0x1bc>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2180      	movs	r1, #128	@ 0x80
 8005a80:	0209      	lsls	r1, r1, #8
 8005a82:	430a      	orrs	r2, r1
 8005a84:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 8005a86:	e036      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4922      	ldr	r1, [pc, #136]	@ (8005b1c <HAL_TIM_ConfigOCrefClear+0x250>)
 8005a94:	400a      	ands	r2, r1
 8005a96:	61da      	str	r2, [r3, #28]
        break;
 8005a98:	e02d      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_5:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_TIM_ConfigOCrefClear+0x1e8>
        {
          /* Enable the OCREF clear feature for Channel 5 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2180      	movs	r1, #128	@ 0x80
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 5 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
        }
        break;
 8005ab2:	e020      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2180      	movs	r1, #128	@ 0x80
 8005ac0:	438a      	bics	r2, r1
 8005ac2:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005ac4:	e017      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_6:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_TIM_ConfigOCrefClear+0x216>
        {
          /* Enable the OCREF clear feature for Channel 6 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2180      	movs	r1, #128	@ 0x80
 8005ada:	0209      	lsls	r1, r1, #8
 8005adc:	430a      	orrs	r2, r1
 8005ade:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 6 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
        }
        break;
 8005ae0:	e009      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	490b      	ldr	r1, [pc, #44]	@ (8005b1c <HAL_TIM_ConfigOCrefClear+0x250>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      default:
        break;
 8005af4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	223d      	movs	r2, #61	@ 0x3d
 8005afa:	2101      	movs	r1, #1
 8005afc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	223c      	movs	r2, #60	@ 0x3c
 8005b02:	2100      	movs	r1, #0
 8005b04:	5499      	strb	r1, [r3, r2]

  return status;
 8005b06:	2317      	movs	r3, #23
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b006      	add	sp, #24
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	ffff00f7 	.word	0xffff00f7
 8005b18:	080078f4 	.word	0x080078f4
 8005b1c:	ffff7fff 	.word	0xffff7fff

08005b20 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	223c      	movs	r2, #60	@ 0x3c
 8005b2e:	5c9b      	ldrb	r3, [r3, r2]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e032      	b.n	8005b9e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	223c      	movs	r2, #60	@ 0x3c
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	223d      	movs	r2, #61	@ 0x3d
 8005b44:	2102      	movs	r1, #2
 8005b46:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0011      	movs	r1, r2
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f000 fba6 	bl	80062a0 <TIM_SlaveTimer_SetConfig>
 8005b54:	1e03      	subs	r3, r0, #0
 8005b56:	d009      	beq.n	8005b6c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	223d      	movs	r2, #61	@ 0x3d
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	223c      	movs	r2, #60	@ 0x3c
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e018      	b.n	8005b9e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2140      	movs	r1, #64	@ 0x40
 8005b78:	438a      	bics	r2, r1
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4908      	ldr	r1, [pc, #32]	@ (8005ba8 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005b88:	400a      	ands	r2, r1
 8005b8a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	223d      	movs	r2, #61	@ 0x3d
 8005b90:	2101      	movs	r1, #1
 8005b92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	223c      	movs	r2, #60	@ 0x3c
 8005b98:	2100      	movs	r1, #0
 8005b9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b002      	add	sp, #8
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	ffffbfff 	.word	0xffffbfff

08005bac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bb4:	46c0      	nop			@ (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc4:	46c0      	nop			@ (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf4:	46c0      	nop			@ (mov r8, r8)
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8005cfc <TIM_Base_SetConfig+0x100>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d008      	beq.n	8005c26 <TIM_Base_SetConfig+0x2a>
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	2380      	movs	r3, #128	@ 0x80
 8005c18:	05db      	lsls	r3, r3, #23
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x2a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a37      	ldr	r2, [pc, #220]	@ (8005d00 <TIM_Base_SetConfig+0x104>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2270      	movs	r2, #112	@ 0x70
 8005c2a:	4393      	bics	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a30      	ldr	r2, [pc, #192]	@ (8005cfc <TIM_Base_SetConfig+0x100>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	05db      	lsls	r3, r3, #23
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d00 <TIM_Base_SetConfig+0x104>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2b      	ldr	r2, [pc, #172]	@ (8005d04 <TIM_Base_SetConfig+0x108>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d08 <TIM_Base_SetConfig+0x10c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a29      	ldr	r2, [pc, #164]	@ (8005d0c <TIM_Base_SetConfig+0x110>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	@ (8005d10 <TIM_Base_SetConfig+0x114>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a27      	ldr	r2, [pc, #156]	@ (8005d14 <TIM_Base_SetConfig+0x118>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	4393      	bics	r3, r2
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a13      	ldr	r2, [pc, #76]	@ (8005cfc <TIM_Base_SetConfig+0x100>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0xce>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a14      	ldr	r2, [pc, #80]	@ (8005d08 <TIM_Base_SetConfig+0x10c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0xce>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a13      	ldr	r2, [pc, #76]	@ (8005d0c <TIM_Base_SetConfig+0x110>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0xce>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a12      	ldr	r2, [pc, #72]	@ (8005d10 <TIM_Base_SetConfig+0x114>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d103      	bne.n	8005cd2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d106      	bne.n	8005cf2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4393      	bics	r3, r2
 8005cec:	001a      	movs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]
  }
}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b004      	add	sp, #16
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40002000 	.word	0x40002000
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800
 8005d14:	fffffcff 	.word	0xfffffcff

08005d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4393      	bics	r3, r2
 8005d30:	001a      	movs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a32      	ldr	r2, [pc, #200]	@ (8005e10 <TIM_OC1_SetConfig+0xf8>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4393      	bics	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	4393      	bics	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a28      	ldr	r2, [pc, #160]	@ (8005e14 <TIM_OC1_SetConfig+0xfc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_OC1_SetConfig+0x76>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a27      	ldr	r2, [pc, #156]	@ (8005e18 <TIM_OC1_SetConfig+0x100>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_OC1_SetConfig+0x76>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a26      	ldr	r2, [pc, #152]	@ (8005e1c <TIM_OC1_SetConfig+0x104>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC1_SetConfig+0x76>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a25      	ldr	r2, [pc, #148]	@ (8005e20 <TIM_OC1_SetConfig+0x108>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d10c      	bne.n	8005da8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2208      	movs	r2, #8
 8005d92:	4393      	bics	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2204      	movs	r2, #4
 8005da4:	4393      	bics	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1a      	ldr	r2, [pc, #104]	@ (8005e14 <TIM_OC1_SetConfig+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_OC1_SetConfig+0xb0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a19      	ldr	r2, [pc, #100]	@ (8005e18 <TIM_OC1_SetConfig+0x100>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_OC1_SetConfig+0xb0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a18      	ldr	r2, [pc, #96]	@ (8005e1c <TIM_OC1_SetConfig+0x104>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC1_SetConfig+0xb0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a17      	ldr	r2, [pc, #92]	@ (8005e20 <TIM_OC1_SetConfig+0x108>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d111      	bne.n	8005dec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4a16      	ldr	r2, [pc, #88]	@ (8005e24 <TIM_OC1_SetConfig+0x10c>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <TIM_OC1_SetConfig+0x110>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b006      	add	sp, #24
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	fffeff8f 	.word	0xfffeff8f
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800
 8005e24:	fffffeff 	.word	0xfffffeff
 8005e28:	fffffdff 	.word	0xfffffdff

08005e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	2210      	movs	r2, #16
 8005e42:	4393      	bics	r3, r2
 8005e44:	001a      	movs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a2e      	ldr	r2, [pc, #184]	@ (8005f14 <TIM_OC2_SetConfig+0xe8>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a2d      	ldr	r2, [pc, #180]	@ (8005f18 <TIM_OC2_SetConfig+0xec>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2220      	movs	r2, #32
 8005e76:	4393      	bics	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a24      	ldr	r2, [pc, #144]	@ (8005f1c <TIM_OC2_SetConfig+0xf0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10d      	bne.n	8005eaa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2280      	movs	r2, #128	@ 0x80
 8005e92:	4393      	bics	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2240      	movs	r2, #64	@ 0x40
 8005ea6:	4393      	bics	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	@ (8005f1c <TIM_OC2_SetConfig+0xf0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <TIM_OC2_SetConfig+0x9e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f20 <TIM_OC2_SetConfig+0xf4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d007      	beq.n	8005eca <TIM_OC2_SetConfig+0x9e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	@ (8005f24 <TIM_OC2_SetConfig+0xf8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_OC2_SetConfig+0x9e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	@ (8005f28 <TIM_OC2_SetConfig+0xfc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d113      	bne.n	8005ef2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	@ (8005f2c <TIM_OC2_SetConfig+0x100>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	@ (8005f30 <TIM_OC2_SetConfig+0x104>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	46c0      	nop			@ (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b006      	add	sp, #24
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	feff8fff 	.word	0xfeff8fff
 8005f18:	fffffcff 	.word	0xfffffcff
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	fffffbff 	.word	0xfffffbff
 8005f30:	fffff7ff 	.word	0xfffff7ff

08005f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	4a33      	ldr	r2, [pc, #204]	@ (8006018 <TIM_OC3_SetConfig+0xe4>)
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800601c <TIM_OC3_SetConfig+0xe8>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2203      	movs	r2, #3
 8005f68:	4393      	bics	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4a29      	ldr	r2, [pc, #164]	@ (8006020 <TIM_OC3_SetConfig+0xec>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	@ (8006024 <TIM_OC3_SetConfig+0xf0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10d      	bne.n	8005fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4a24      	ldr	r2, [pc, #144]	@ (8006028 <TIM_OC3_SetConfig+0xf4>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4a20      	ldr	r2, [pc, #128]	@ (800602c <TIM_OC3_SetConfig+0xf8>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8006024 <TIM_OC3_SetConfig+0xf0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <TIM_OC3_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006030 <TIM_OC3_SetConfig+0xfc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <TIM_OC3_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8006034 <TIM_OC3_SetConfig+0x100>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC3_SetConfig+0x9a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8006038 <TIM_OC3_SetConfig+0x104>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d113      	bne.n	8005ff6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800603c <TIM_OC3_SetConfig+0x108>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	@ (8006040 <TIM_OC3_SetConfig+0x10c>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	46c0      	nop			@ (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b006      	add	sp, #24
 8006016:	bd80      	pop	{r7, pc}
 8006018:	fffffeff 	.word	0xfffffeff
 800601c:	fffeff8f 	.word	0xfffeff8f
 8006020:	fffffdff 	.word	0xfffffdff
 8006024:	40012c00 	.word	0x40012c00
 8006028:	fffff7ff 	.word	0xfffff7ff
 800602c:	fffffbff 	.word	0xfffffbff
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800
 800603c:	ffffefff 	.word	0xffffefff
 8006040:	ffffdfff 	.word	0xffffdfff

08006044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	4a26      	ldr	r2, [pc, #152]	@ (80060f4 <TIM_OC4_SetConfig+0xb0>)
 800605a:	401a      	ands	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a22      	ldr	r2, [pc, #136]	@ (80060f8 <TIM_OC4_SetConfig+0xb4>)
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a21      	ldr	r2, [pc, #132]	@ (80060fc <TIM_OC4_SetConfig+0xb8>)
 8006078:	4013      	ands	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <TIM_OC4_SetConfig+0xbc>)
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a19      	ldr	r2, [pc, #100]	@ (8006104 <TIM_OC4_SetConfig+0xc0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_OC4_SetConfig+0x78>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a18      	ldr	r2, [pc, #96]	@ (8006108 <TIM_OC4_SetConfig+0xc4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_OC4_SetConfig+0x78>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a17      	ldr	r2, [pc, #92]	@ (800610c <TIM_OC4_SetConfig+0xc8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x78>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a16      	ldr	r2, [pc, #88]	@ (8006110 <TIM_OC4_SetConfig+0xcc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4a15      	ldr	r2, [pc, #84]	@ (8006114 <TIM_OC4_SetConfig+0xd0>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	46c0      	nop			@ (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b006      	add	sp, #24
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	ffffefff 	.word	0xffffefff
 80060f8:	feff8fff 	.word	0xfeff8fff
 80060fc:	fffffcff 	.word	0xfffffcff
 8006100:	ffffdfff 	.word	0xffffdfff
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800
 8006114:	ffffbfff 	.word	0xffffbfff

08006118 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <TIM_OC5_SetConfig+0xa4>)
 800612e:	401a      	ands	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a1f      	ldr	r2, [pc, #124]	@ (80061c0 <TIM_OC5_SetConfig+0xa8>)
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4a1b      	ldr	r2, [pc, #108]	@ (80061c4 <TIM_OC5_SetConfig+0xac>)
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a17      	ldr	r2, [pc, #92]	@ (80061c8 <TIM_OC5_SetConfig+0xb0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_OC5_SetConfig+0x6e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <TIM_OC5_SetConfig+0xb4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_OC5_SetConfig+0x6e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a15      	ldr	r2, [pc, #84]	@ (80061d0 <TIM_OC5_SetConfig+0xb8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC5_SetConfig+0x6e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a14      	ldr	r2, [pc, #80]	@ (80061d4 <TIM_OC5_SetConfig+0xbc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d109      	bne.n	800619a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4a0c      	ldr	r2, [pc, #48]	@ (80061bc <TIM_OC5_SetConfig+0xa4>)
 800618a:	4013      	ands	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	46c0      	nop			@ (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b006      	add	sp, #24
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	fffeffff 	.word	0xfffeffff
 80061c0:	fffeff8f 	.word	0xfffeff8f
 80061c4:	fffdffff 	.word	0xfffdffff
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800

080061d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	4a24      	ldr	r2, [pc, #144]	@ (8006280 <TIM_OC6_SetConfig+0xa8>)
 80061ee:	401a      	ands	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a20      	ldr	r2, [pc, #128]	@ (8006284 <TIM_OC6_SetConfig+0xac>)
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <TIM_OC6_SetConfig+0xb0>)
 8006218:	4013      	ands	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	051b      	lsls	r3, r3, #20
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a18      	ldr	r2, [pc, #96]	@ (800628c <TIM_OC6_SetConfig+0xb4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <TIM_OC6_SetConfig+0x70>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a17      	ldr	r2, [pc, #92]	@ (8006290 <TIM_OC6_SetConfig+0xb8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <TIM_OC6_SetConfig+0x70>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a16      	ldr	r2, [pc, #88]	@ (8006294 <TIM_OC6_SetConfig+0xbc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC6_SetConfig+0x70>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a15      	ldr	r2, [pc, #84]	@ (8006298 <TIM_OC6_SetConfig+0xc0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d109      	bne.n	800625c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4a14      	ldr	r2, [pc, #80]	@ (800629c <TIM_OC6_SetConfig+0xc4>)
 800624c:	4013      	ands	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	029b      	lsls	r3, r3, #10
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	46c0      	nop			@ (mov r8, r8)
 8006278:	46bd      	mov	sp, r7
 800627a:	b006      	add	sp, #24
 800627c:	bd80      	pop	{r7, pc}
 800627e:	46c0      	nop			@ (mov r8, r8)
 8006280:	ffefffff 	.word	0xffefffff
 8006284:	feff8fff 	.word	0xfeff8fff
 8006288:	ffdfffff 	.word	0xffdfffff
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40014000 	.word	0x40014000
 8006294:	40014400 	.word	0x40014400
 8006298:	40014800 	.word	0x40014800
 800629c:	fffbffff 	.word	0xfffbffff

080062a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2317      	movs	r3, #23
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	4a41      	ldr	r2, [pc, #260]	@ (80063c4 <TIM_SlaveTimer_SetConfig+0x124>)
 80062be:	4013      	ands	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4a3e      	ldr	r2, [pc, #248]	@ (80063c8 <TIM_SlaveTimer_SetConfig+0x128>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b70      	cmp	r3, #112	@ 0x70
 80062ec:	d015      	beq.n	800631a <TIM_SlaveTimer_SetConfig+0x7a>
 80062ee:	d900      	bls.n	80062f2 <TIM_SlaveTimer_SetConfig+0x52>
 80062f0:	e05b      	b.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
 80062f2:	2b60      	cmp	r3, #96	@ 0x60
 80062f4:	d04f      	beq.n	8006396 <TIM_SlaveTimer_SetConfig+0xf6>
 80062f6:	d858      	bhi.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
 80062f8:	2b50      	cmp	r3, #80	@ 0x50
 80062fa:	d042      	beq.n	8006382 <TIM_SlaveTimer_SetConfig+0xe2>
 80062fc:	d855      	bhi.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d016      	beq.n	8006330 <TIM_SlaveTimer_SetConfig+0x90>
 8006302:	d852      	bhi.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
 8006304:	2b30      	cmp	r3, #48	@ 0x30
 8006306:	d055      	beq.n	80063b4 <TIM_SlaveTimer_SetConfig+0x114>
 8006308:	d84f      	bhi.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d052      	beq.n	80063b4 <TIM_SlaveTimer_SetConfig+0x114>
 800630e:	d84c      	bhi.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d04f      	beq.n	80063b4 <TIM_SlaveTimer_SetConfig+0x114>
 8006314:	2b10      	cmp	r3, #16
 8006316:	d04d      	beq.n	80063b4 <TIM_SlaveTimer_SetConfig+0x114>
 8006318:	e047      	b.n	80063aa <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800632a:	f000 f9d3 	bl	80066d4 <TIM_ETR_SetConfig>
      break;
 800632e:	e042      	b.n	80063b6 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b05      	cmp	r3, #5
 8006336:	d101      	bne.n	800633c <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e03f      	b.n	80063bc <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2101      	movs	r1, #1
 8006350:	438a      	bics	r2, r1
 8006352:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	22f0      	movs	r2, #240	@ 0xf0
 8006360:	4393      	bics	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	4313      	orrs	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	621a      	str	r2, [r3, #32]
      break;
 8006380:	e019      	b.n	80063b6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800638e:	001a      	movs	r2, r3
 8006390:	f000 f878 	bl	8006484 <TIM_TI1_ConfigInputStage>
      break;
 8006394:	e00f      	b.n	80063b6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a2:	001a      	movs	r2, r3
 80063a4:	f000 f8de 	bl	8006564 <TIM_TI2_ConfigInputStage>
      break;
 80063a8:	e005      	b.n	80063b6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80063aa:	2317      	movs	r3, #23
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
      break;
 80063b2:	e000      	b.n	80063b6 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80063b4:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80063b6:	2317      	movs	r3, #23
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	781b      	ldrb	r3, [r3, #0]
}
 80063bc:	0018      	movs	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	b006      	add	sp, #24
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	ffcfff8f 	.word	0xffcfff8f
 80063c8:	fffefff8 	.word	0xfffefff8

080063cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	2201      	movs	r2, #1
 80063e6:	4393      	bics	r3, r2
 80063e8:	001a      	movs	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a20      	ldr	r2, [pc, #128]	@ (8006478 <TIM_TI1_SetConfig+0xac>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00c      	beq.n	8006416 <TIM_TI1_SetConfig+0x4a>
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	2380      	movs	r3, #128	@ 0x80
 8006400:	05db      	lsls	r3, r3, #23
 8006402:	429a      	cmp	r2, r3
 8006404:	d007      	beq.n	8006416 <TIM_TI1_SetConfig+0x4a>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <TIM_TI1_SetConfig+0xb0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_TI1_SetConfig+0x4a>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <TIM_TI1_SetConfig+0xb4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d101      	bne.n	800641a <TIM_TI1_SetConfig+0x4e>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <TIM_TI1_SetConfig+0x50>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2203      	movs	r2, #3
 8006424:	4393      	bics	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	e003      	b.n	800643a <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2201      	movs	r2, #1
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	22f0      	movs	r2, #240	@ 0xf0
 800643e:	4393      	bics	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	22ff      	movs	r2, #255	@ 0xff
 8006448:	4013      	ands	r3, r2
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	220a      	movs	r2, #10
 8006454:	4393      	bics	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	220a      	movs	r2, #10
 800645c:	4013      	ands	r3, r2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	46c0      	nop			@ (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b006      	add	sp, #24
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40014000 	.word	0x40014000

08006484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	2201      	movs	r2, #1
 800649c:	4393      	bics	r3, r2
 800649e:	001a      	movs	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	22f0      	movs	r2, #240	@ 0xf0
 80064ae:	4393      	bics	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	220a      	movs	r2, #10
 80064c0:	4393      	bics	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	46c0      	nop			@ (mov r8, r8)
 80064da:	46bd      	mov	sp, r7
 80064dc:	b006      	add	sp, #24
 80064de:	bd80      	pop	{r7, pc}

080064e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	2210      	movs	r2, #16
 80064fa:	4393      	bics	r3, r2
 80064fc:	001a      	movs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4a14      	ldr	r2, [pc, #80]	@ (800655c <TIM_TI2_SetConfig+0x7c>)
 800650c:	4013      	ands	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	021b      	lsls	r3, r3, #8
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4a10      	ldr	r2, [pc, #64]	@ (8006560 <TIM_TI2_SetConfig+0x80>)
 800651e:	4013      	ands	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	031b      	lsls	r3, r3, #12
 8006526:	041b      	lsls	r3, r3, #16
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	22a0      	movs	r2, #160	@ 0xa0
 8006534:	4393      	bics	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	22a0      	movs	r2, #160	@ 0xa0
 800653e:	4013      	ands	r3, r2
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	46bd      	mov	sp, r7
 8006556:	b006      	add	sp, #24
 8006558:	bd80      	pop	{r7, pc}
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	fffffcff 	.word	0xfffffcff
 8006560:	ffff0fff 	.word	0xffff0fff

08006564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	2210      	movs	r2, #16
 800657c:	4393      	bics	r3, r2
 800657e:	001a      	movs	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4a0d      	ldr	r2, [pc, #52]	@ (80065c4 <TIM_TI2_ConfigInputStage+0x60>)
 800658e:	4013      	ands	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	031b      	lsls	r3, r3, #12
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	22a0      	movs	r2, #160	@ 0xa0
 80065a0:	4393      	bics	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	46bd      	mov	sp, r7
 80065be:	b006      	add	sp, #24
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	ffff0fff 	.word	0xffff0fff

080065c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <TIM_TI3_SetConfig+0x78>)
 80065e2:	401a      	ands	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2203      	movs	r2, #3
 80065f2:	4393      	bics	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	22f0      	movs	r2, #240	@ 0xf0
 8006602:	4393      	bics	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	22ff      	movs	r2, #255	@ 0xff
 800660c:	4013      	ands	r3, r2
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	4a0b      	ldr	r2, [pc, #44]	@ (8006644 <TIM_TI3_SetConfig+0x7c>)
 8006618:	4013      	ands	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	23a0      	movs	r3, #160	@ 0xa0
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4013      	ands	r3, r2
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	46c0      	nop			@ (mov r8, r8)
 800663a:	46bd      	mov	sp, r7
 800663c:	b006      	add	sp, #24
 800663e:	bd80      	pop	{r7, pc}
 8006640:	fffffeff 	.word	0xfffffeff
 8006644:	fffff5ff 	.word	0xfffff5ff

08006648 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	4a18      	ldr	r2, [pc, #96]	@ (80066c4 <TIM_TI4_SetConfig+0x7c>)
 8006662:	401a      	ands	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4a15      	ldr	r2, [pc, #84]	@ (80066c8 <TIM_TI4_SetConfig+0x80>)
 8006672:	4013      	ands	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4a12      	ldr	r2, [pc, #72]	@ (80066cc <TIM_TI4_SetConfig+0x84>)
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	031b      	lsls	r3, r3, #12
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4a0d      	ldr	r2, [pc, #52]	@ (80066d0 <TIM_TI4_SetConfig+0x88>)
 800669a:	4013      	ands	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	031a      	lsls	r2, r3, #12
 80066a2:	23a0      	movs	r3, #160	@ 0xa0
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	4013      	ands	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	46c0      	nop			@ (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b006      	add	sp, #24
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			@ (mov r8, r8)
 80066c4:	ffffefff 	.word	0xffffefff
 80066c8:	fffffcff 	.word	0xfffffcff
 80066cc:	ffff0fff 	.word	0xffff0fff
 80066d0:	ffff5fff 	.word	0xffff5fff

080066d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4a09      	ldr	r2, [pc, #36]	@ (8006710 <TIM_ETR_SetConfig+0x3c>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	609a      	str	r2, [r3, #8]
}
 8006708:	46c0      	nop			@ (mov r8, r8)
 800670a:	46bd      	mov	sp, r7
 800670c:	b006      	add	sp, #24
 800670e:	bd80      	pop	{r7, pc}
 8006710:	ffff00ff 	.word	0xffff00ff

08006714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	221f      	movs	r2, #31
 8006724:	4013      	ands	r3, r2
 8006726:	2201      	movs	r2, #1
 8006728:	409a      	lsls	r2, r3
 800672a:	0013      	movs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	43d2      	mvns	r2, r2
 8006736:	401a      	ands	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	211f      	movs	r1, #31
 8006744:	400b      	ands	r3, r1
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4099      	lsls	r1, r3
 800674a:	000b      	movs	r3, r1
 800674c:	431a      	orrs	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	46bd      	mov	sp, r7
 8006756:	b006      	add	sp, #24
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	223c      	movs	r2, #60	@ 0x3c
 800676a:	5c9b      	ldrb	r3, [r3, r2]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006770:	2302      	movs	r3, #2
 8006772:	e055      	b.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	223c      	movs	r2, #60	@ 0x3c
 8006778:	2101      	movs	r1, #1
 800677a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	223d      	movs	r2, #61	@ 0x3d
 8006780:	2102      	movs	r1, #2
 8006782:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a23      	ldr	r2, [pc, #140]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d108      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a22      	ldr	r2, [pc, #136]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2270      	movs	r2, #112	@ 0x70
 80067b4:	4393      	bics	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a16      	ldr	r2, [pc, #88]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00f      	beq.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	2380      	movs	r3, #128	@ 0x80
 80067da:	05db      	lsls	r3, r3, #23
 80067dc:	429a      	cmp	r2, r3
 80067de:	d009      	beq.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a11      	ldr	r2, [pc, #68]	@ (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10c      	bne.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2280      	movs	r2, #128	@ 0x80
 80067f8:	4393      	bics	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	223d      	movs	r2, #61	@ 0x3d
 8006812:	2101      	movs	r1, #1
 8006814:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	223c      	movs	r2, #60	@ 0x3c
 800681a:	2100      	movs	r1, #0
 800681c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b004      	add	sp, #16
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40012c00 	.word	0x40012c00
 800682c:	ff0fffff 	.word	0xff0fffff
 8006830:	40000400 	.word	0x40000400
 8006834:	40014000 	.word	0x40014000

08006838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	223c      	movs	r2, #60	@ 0x3c
 800684a:	5c9b      	ldrb	r3, [r3, r2]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006850:	2302      	movs	r3, #2
 8006852:	e06f      	b.n	8006934 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	223c      	movs	r2, #60	@ 0x3c
 8006858:	2101      	movs	r1, #1
 800685a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	22ff      	movs	r2, #255	@ 0xff
 8006860:	4393      	bics	r3, r2
 8006862:	001a      	movs	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a33      	ldr	r2, [pc, #204]	@ (800693c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006870:	401a      	ands	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a30      	ldr	r2, [pc, #192]	@ (8006940 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800687e:	401a      	ands	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a2e      	ldr	r2, [pc, #184]	@ (8006944 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800688c:	401a      	ands	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4a2b      	ldr	r2, [pc, #172]	@ (8006948 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800689a:	401a      	ands	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a29      	ldr	r2, [pc, #164]	@ (800694c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80068a8:	401a      	ands	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a26      	ldr	r2, [pc, #152]	@ (8006950 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80068b6:	401a      	ands	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a24      	ldr	r2, [pc, #144]	@ (8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80068c4:	401a      	ands	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a21      	ldr	r2, [pc, #132]	@ (8006958 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80068d4:	401a      	ands	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d11c      	bne.n	8006922 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006960 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80068ec:	401a      	ands	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	051b      	lsls	r3, r3, #20
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006964 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80068fc:	401a      	ands	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a17      	ldr	r2, [pc, #92]	@ (8006968 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800690a:	401a      	ands	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a15      	ldr	r2, [pc, #84]	@ (800696c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006918:	401a      	ands	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	223c      	movs	r2, #60	@ 0x3c
 800692e:	2100      	movs	r1, #0
 8006930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	b004      	add	sp, #16
 800693a:	bd80      	pop	{r7, pc}
 800693c:	fffffcff 	.word	0xfffffcff
 8006940:	fffffbff 	.word	0xfffffbff
 8006944:	fffff7ff 	.word	0xfffff7ff
 8006948:	ffffefff 	.word	0xffffefff
 800694c:	ffffdfff 	.word	0xffffdfff
 8006950:	ffffbfff 	.word	0xffffbfff
 8006954:	fff0ffff 	.word	0xfff0ffff
 8006958:	efffffff 	.word	0xefffffff
 800695c:	40012c00 	.word	0x40012c00
 8006960:	ff0fffff 	.word	0xff0fffff
 8006964:	feffffff 	.word	0xfeffffff
 8006968:	fdffffff 	.word	0xfdffffff
 800696c:	dfffffff 	.word	0xdfffffff

08006970 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	@ 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2327      	movs	r3, #39	@ 0x27
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	223c      	movs	r2, #60	@ 0x3c
 8006988:	5c9b      	ldrb	r3, [r3, r2]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_TIMEx_ConfigBreakInput+0x22>
 800698e:	2302      	movs	r3, #2
 8006990:	e095      	b.n	8006abe <HAL_TIMEx_ConfigBreakInput+0x14e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	223c      	movs	r2, #60	@ 0x3c
 8006996:	2101      	movs	r1, #1
 8006998:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d019      	beq.n	80069d6 <HAL_TIMEx_ConfigBreakInput+0x66>
 80069a2:	d822      	bhi.n	80069ea <HAL_TIMEx_ConfigBreakInput+0x7a>
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d002      	beq.n	80069ae <HAL_TIMEx_ConfigBreakInput+0x3e>
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d00a      	beq.n	80069c2 <HAL_TIMEx_ConfigBreakInput+0x52>
 80069ac:	e01d      	b.n	80069ea <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80069b6:	2380      	movs	r3, #128	@ 0x80
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80069bc:	2309      	movs	r3, #9
 80069be:	617b      	str	r3, [r7, #20]
      break;
 80069c0:	e01c      	b.n	80069fc <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80069c2:	2302      	movs	r3, #2
 80069c4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80069c6:	2301      	movs	r3, #1
 80069c8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80069ca:	2380      	movs	r3, #128	@ 0x80
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80069d0:	230a      	movs	r3, #10
 80069d2:	617b      	str	r3, [r7, #20]
      break;
 80069d4:	e012      	b.n	80069fc <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80069d6:	2304      	movs	r3, #4
 80069d8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80069da:	2302      	movs	r3, #2
 80069dc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80069de:	2380      	movs	r3, #128	@ 0x80
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80069e4:	230b      	movs	r3, #11
 80069e6:	617b      	str	r3, [r7, #20]
      break;
 80069e8:	e008      	b.n	80069fc <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
      break;
 80069fa:	46c0      	nop			@ (mov r8, r8)
    }
  }

  switch (BreakInput)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d003      	beq.n	8006a0a <HAL_TIMEx_ConfigBreakInput+0x9a>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d027      	beq.n	8006a58 <HAL_TIMEx_ConfigBreakInput+0xe8>
 8006a08:	e04d      	b.n	8006aa6 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a10:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	43da      	mvns	r2, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	409a      	lsls	r2, r3
 8006a24:	0013      	movs	r3, r2
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	43da      	mvns	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	4013      	ands	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	409a      	lsls	r2, r3
 8006a42:	0013      	movs	r3, r2
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	4013      	ands	r3, r2
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8006a56:	e02b      	b.n	8006ab0 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a5e:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	43da      	mvns	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4013      	ands	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	409a      	lsls	r2, r3
 8006a72:	0013      	movs	r3, r2
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	4013      	ands	r3, r2
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4013      	ands	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	0013      	movs	r3, r2
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	4013      	ands	r3, r2
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006aa4:	e004      	b.n	8006ab0 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 8006aa6:	2327      	movs	r3, #39	@ 0x27
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
      break;
 8006aae:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	223c      	movs	r2, #60	@ 0x3c
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	5499      	strb	r1, [r3, r2]

  return status;
 8006ab8:	2327      	movs	r3, #39	@ 0x27
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	781b      	ldrb	r3, [r3, #0]
}
 8006abe:	0018      	movs	r0, r3
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b00a      	add	sp, #40	@ 0x28
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b002      	add	sp, #8
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b002      	add	sp, #8
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e046      	b.n	8006b98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2288      	movs	r2, #136	@ 0x88
 8006b0e:	589b      	ldr	r3, [r3, r2]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d107      	bne.n	8006b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2284      	movs	r2, #132	@ 0x84
 8006b18:	2100      	movs	r1, #0
 8006b1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fa ffd6 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2288      	movs	r2, #136	@ 0x88
 8006b28:	2124      	movs	r1, #36	@ 0x24
 8006b2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2101      	movs	r1, #1
 8006b38:	438a      	bics	r2, r1
 8006b3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 faea 	bl	8007120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f000 f828 	bl	8006ba4 <UART_SetConfig>
 8006b54:	0003      	movs	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e01c      	b.n	8006b98 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	490d      	ldr	r1, [pc, #52]	@ (8006ba0 <HAL_UART_Init+0xa8>)
 8006b6a:	400a      	ands	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	212a      	movs	r1, #42	@ 0x2a
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2101      	movs	r1, #1
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fb79 	bl	8007288 <UART_CheckIdleState>
 8006b96:	0003      	movs	r3, r0
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b002      	add	sp, #8
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	ffffb7ff 	.word	0xffffb7ff

08006ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba4:	b5b0      	push	{r4, r5, r7, lr}
 8006ba6:	b090      	sub	sp, #64	@ 0x40
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bac:	231a      	movs	r3, #26
 8006bae:	2220      	movs	r2, #32
 8006bb0:	189b      	adds	r3, r3, r2
 8006bb2:	19db      	adds	r3, r3, r7
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4aaf      	ldr	r2, [pc, #700]	@ (8006e94 <UART_SetConfig+0x2f0>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	0019      	movs	r1, r3
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4aaa      	ldr	r2, [pc, #680]	@ (8006e98 <UART_SetConfig+0x2f4>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4aa4      	ldr	r2, [pc, #656]	@ (8006e9c <UART_SetConfig+0x2f8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c16:	4313      	orrs	r3, r2
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4a9f      	ldr	r2, [pc, #636]	@ (8006ea0 <UART_SetConfig+0x2fc>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	220f      	movs	r2, #15
 8006c38:	4393      	bics	r3, r2
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	0003      	movs	r3, r0
 8006c46:	430b      	orrs	r3, r1
 8006c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a95      	ldr	r2, [pc, #596]	@ (8006ea4 <UART_SetConfig+0x300>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d131      	bne.n	8006cb8 <UART_SetConfig+0x114>
 8006c54:	4b94      	ldr	r3, [pc, #592]	@ (8006ea8 <UART_SetConfig+0x304>)
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	2203      	movs	r2, #3
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d01d      	beq.n	8006c9c <UART_SetConfig+0xf8>
 8006c60:	d823      	bhi.n	8006caa <UART_SetConfig+0x106>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d00c      	beq.n	8006c80 <UART_SetConfig+0xdc>
 8006c66:	d820      	bhi.n	8006caa <UART_SetConfig+0x106>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <UART_SetConfig+0xce>
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d00e      	beq.n	8006c8e <UART_SetConfig+0xea>
 8006c70:	e01b      	b.n	8006caa <UART_SetConfig+0x106>
 8006c72:	231b      	movs	r3, #27
 8006c74:	2220      	movs	r2, #32
 8006c76:	189b      	adds	r3, r3, r2
 8006c78:	19db      	adds	r3, r3, r7
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e0b4      	b.n	8006dea <UART_SetConfig+0x246>
 8006c80:	231b      	movs	r3, #27
 8006c82:	2220      	movs	r2, #32
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	19db      	adds	r3, r3, r7
 8006c88:	2202      	movs	r2, #2
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e0ad      	b.n	8006dea <UART_SetConfig+0x246>
 8006c8e:	231b      	movs	r3, #27
 8006c90:	2220      	movs	r2, #32
 8006c92:	189b      	adds	r3, r3, r2
 8006c94:	19db      	adds	r3, r3, r7
 8006c96:	2204      	movs	r2, #4
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e0a6      	b.n	8006dea <UART_SetConfig+0x246>
 8006c9c:	231b      	movs	r3, #27
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	189b      	adds	r3, r3, r2
 8006ca2:	19db      	adds	r3, r3, r7
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e09f      	b.n	8006dea <UART_SetConfig+0x246>
 8006caa:	231b      	movs	r3, #27
 8006cac:	2220      	movs	r2, #32
 8006cae:	189b      	adds	r3, r3, r2
 8006cb0:	19db      	adds	r3, r3, r7
 8006cb2:	2210      	movs	r2, #16
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e098      	b.n	8006dea <UART_SetConfig+0x246>
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a7b      	ldr	r2, [pc, #492]	@ (8006eac <UART_SetConfig+0x308>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d131      	bne.n	8006d26 <UART_SetConfig+0x182>
 8006cc2:	4b79      	ldr	r3, [pc, #484]	@ (8006ea8 <UART_SetConfig+0x304>)
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc6:	220c      	movs	r2, #12
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b0c      	cmp	r3, #12
 8006ccc:	d01d      	beq.n	8006d0a <UART_SetConfig+0x166>
 8006cce:	d823      	bhi.n	8006d18 <UART_SetConfig+0x174>
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d00c      	beq.n	8006cee <UART_SetConfig+0x14a>
 8006cd4:	d820      	bhi.n	8006d18 <UART_SetConfig+0x174>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <UART_SetConfig+0x13c>
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d00e      	beq.n	8006cfc <UART_SetConfig+0x158>
 8006cde:	e01b      	b.n	8006d18 <UART_SetConfig+0x174>
 8006ce0:	231b      	movs	r3, #27
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	189b      	adds	r3, r3, r2
 8006ce6:	19db      	adds	r3, r3, r7
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e07d      	b.n	8006dea <UART_SetConfig+0x246>
 8006cee:	231b      	movs	r3, #27
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	19db      	adds	r3, r3, r7
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e076      	b.n	8006dea <UART_SetConfig+0x246>
 8006cfc:	231b      	movs	r3, #27
 8006cfe:	2220      	movs	r2, #32
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	19db      	adds	r3, r3, r7
 8006d04:	2204      	movs	r2, #4
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e06f      	b.n	8006dea <UART_SetConfig+0x246>
 8006d0a:	231b      	movs	r3, #27
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	189b      	adds	r3, r3, r2
 8006d10:	19db      	adds	r3, r3, r7
 8006d12:	2208      	movs	r2, #8
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e068      	b.n	8006dea <UART_SetConfig+0x246>
 8006d18:	231b      	movs	r3, #27
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	19db      	adds	r3, r3, r7
 8006d20:	2210      	movs	r2, #16
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	e061      	b.n	8006dea <UART_SetConfig+0x246>
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a61      	ldr	r2, [pc, #388]	@ (8006eb0 <UART_SetConfig+0x30c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d106      	bne.n	8006d3e <UART_SetConfig+0x19a>
 8006d30:	231b      	movs	r3, #27
 8006d32:	2220      	movs	r2, #32
 8006d34:	189b      	adds	r3, r3, r2
 8006d36:	19db      	adds	r3, r3, r7
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e055      	b.n	8006dea <UART_SetConfig+0x246>
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5c      	ldr	r2, [pc, #368]	@ (8006eb4 <UART_SetConfig+0x310>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d106      	bne.n	8006d56 <UART_SetConfig+0x1b2>
 8006d48:	231b      	movs	r3, #27
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	189b      	adds	r3, r3, r2
 8006d4e:	19db      	adds	r3, r3, r7
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	e049      	b.n	8006dea <UART_SetConfig+0x246>
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a50      	ldr	r2, [pc, #320]	@ (8006e9c <UART_SetConfig+0x2f8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d13e      	bne.n	8006dde <UART_SetConfig+0x23a>
 8006d60:	4b51      	ldr	r3, [pc, #324]	@ (8006ea8 <UART_SetConfig+0x304>)
 8006d62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d64:	23c0      	movs	r3, #192	@ 0xc0
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	4013      	ands	r3, r2
 8006d6a:	22c0      	movs	r2, #192	@ 0xc0
 8006d6c:	0112      	lsls	r2, r2, #4
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d027      	beq.n	8006dc2 <UART_SetConfig+0x21e>
 8006d72:	22c0      	movs	r2, #192	@ 0xc0
 8006d74:	0112      	lsls	r2, r2, #4
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d82a      	bhi.n	8006dd0 <UART_SetConfig+0x22c>
 8006d7a:	2280      	movs	r2, #128	@ 0x80
 8006d7c:	0112      	lsls	r2, r2, #4
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d011      	beq.n	8006da6 <UART_SetConfig+0x202>
 8006d82:	2280      	movs	r2, #128	@ 0x80
 8006d84:	0112      	lsls	r2, r2, #4
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d822      	bhi.n	8006dd0 <UART_SetConfig+0x22c>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <UART_SetConfig+0x1f4>
 8006d8e:	2280      	movs	r2, #128	@ 0x80
 8006d90:	00d2      	lsls	r2, r2, #3
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00e      	beq.n	8006db4 <UART_SetConfig+0x210>
 8006d96:	e01b      	b.n	8006dd0 <UART_SetConfig+0x22c>
 8006d98:	231b      	movs	r3, #27
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	189b      	adds	r3, r3, r2
 8006d9e:	19db      	adds	r3, r3, r7
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e021      	b.n	8006dea <UART_SetConfig+0x246>
 8006da6:	231b      	movs	r3, #27
 8006da8:	2220      	movs	r2, #32
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	19db      	adds	r3, r3, r7
 8006dae:	2202      	movs	r2, #2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	e01a      	b.n	8006dea <UART_SetConfig+0x246>
 8006db4:	231b      	movs	r3, #27
 8006db6:	2220      	movs	r2, #32
 8006db8:	189b      	adds	r3, r3, r2
 8006dba:	19db      	adds	r3, r3, r7
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e013      	b.n	8006dea <UART_SetConfig+0x246>
 8006dc2:	231b      	movs	r3, #27
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	19db      	adds	r3, r3, r7
 8006dca:	2208      	movs	r2, #8
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e00c      	b.n	8006dea <UART_SetConfig+0x246>
 8006dd0:	231b      	movs	r3, #27
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	19db      	adds	r3, r3, r7
 8006dd8:	2210      	movs	r2, #16
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e005      	b.n	8006dea <UART_SetConfig+0x246>
 8006dde:	231b      	movs	r3, #27
 8006de0:	2220      	movs	r2, #32
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	19db      	adds	r3, r3, r7
 8006de6:	2210      	movs	r2, #16
 8006de8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2b      	ldr	r2, [pc, #172]	@ (8006e9c <UART_SetConfig+0x2f8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d000      	beq.n	8006df6 <UART_SetConfig+0x252>
 8006df4:	e0a9      	b.n	8006f4a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006df6:	231b      	movs	r3, #27
 8006df8:	2220      	movs	r2, #32
 8006dfa:	189b      	adds	r3, r3, r2
 8006dfc:	19db      	adds	r3, r3, r7
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d015      	beq.n	8006e30 <UART_SetConfig+0x28c>
 8006e04:	dc18      	bgt.n	8006e38 <UART_SetConfig+0x294>
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d00d      	beq.n	8006e26 <UART_SetConfig+0x282>
 8006e0a:	dc15      	bgt.n	8006e38 <UART_SetConfig+0x294>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <UART_SetConfig+0x272>
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d005      	beq.n	8006e20 <UART_SetConfig+0x27c>
 8006e14:	e010      	b.n	8006e38 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e16:	f7fd fe91 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1e:	e014      	b.n	8006e4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e20:	4b25      	ldr	r3, [pc, #148]	@ (8006eb8 <UART_SetConfig+0x314>)
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e24:	e011      	b.n	8006e4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fd fdfd 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8006e2a:	0003      	movs	r3, r0
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e2e:	e00c      	b.n	8006e4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e30:	2380      	movs	r3, #128	@ 0x80
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e36:	e008      	b.n	8006e4a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006e3c:	231a      	movs	r3, #26
 8006e3e:	2220      	movs	r2, #32
 8006e40:	189b      	adds	r3, r3, r2
 8006e42:	19db      	adds	r3, r3, r7
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
        break;
 8006e48:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d100      	bne.n	8006e52 <UART_SetConfig+0x2ae>
 8006e50:	e14b      	b.n	80070ea <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e56:	4b19      	ldr	r3, [pc, #100]	@ (8006ebc <UART_SetConfig+0x318>)
 8006e58:	0052      	lsls	r2, r2, #1
 8006e5a:	5ad3      	ldrh	r3, [r2, r3]
 8006e5c:	0019      	movs	r1, r3
 8006e5e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e60:	f7f9 f950 	bl	8000104 <__udivsi3>
 8006e64:	0003      	movs	r3, r0
 8006e66:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	0013      	movs	r3, r2
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	189b      	adds	r3, r3, r2
 8006e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d305      	bcc.n	8006e84 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d91d      	bls.n	8006ec0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006e84:	231a      	movs	r3, #26
 8006e86:	2220      	movs	r2, #32
 8006e88:	189b      	adds	r3, r3, r2
 8006e8a:	19db      	adds	r3, r3, r7
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e12b      	b.n	80070ea <UART_SetConfig+0x546>
 8006e92:	46c0      	nop			@ (mov r8, r8)
 8006e94:	cfff69f3 	.word	0xcfff69f3
 8006e98:	ffffcfff 	.word	0xffffcfff
 8006e9c:	40008000 	.word	0x40008000
 8006ea0:	11fff4ff 	.word	0x11fff4ff
 8006ea4:	40013800 	.word	0x40013800
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	40004400 	.word	0x40004400
 8006eb0:	40004800 	.word	0x40004800
 8006eb4:	40004c00 	.word	0x40004c00
 8006eb8:	00f42400 	.word	0x00f42400
 8006ebc:	08007948 	.word	0x08007948
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ecc:	4b92      	ldr	r3, [pc, #584]	@ (8007118 <UART_SetConfig+0x574>)
 8006ece:	0052      	lsls	r2, r2, #1
 8006ed0:	5ad3      	ldrh	r3, [r2, r3]
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	69b8      	ldr	r0, [r7, #24]
 8006ede:	69f9      	ldr	r1, [r7, #28]
 8006ee0:	f7f9 fa86 	bl	80003f0 <__aeabi_uldivmod>
 8006ee4:	0002      	movs	r2, r0
 8006ee6:	000b      	movs	r3, r1
 8006ee8:	0e11      	lsrs	r1, r2, #24
 8006eea:	021d      	lsls	r5, r3, #8
 8006eec:	430d      	orrs	r5, r1
 8006eee:	0214      	lsls	r4, r2, #8
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	60bb      	str	r3, [r7, #8]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68b8      	ldr	r0, [r7, #8]
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	1900      	adds	r0, r0, r4
 8006f02:	4169      	adcs	r1, r5
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f7f9 fa6d 	bl	80003f0 <__aeabi_uldivmod>
 8006f16:	0002      	movs	r2, r0
 8006f18:	000b      	movs	r3, r1
 8006f1a:	0013      	movs	r3, r2
 8006f1c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f20:	23c0      	movs	r3, #192	@ 0xc0
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d309      	bcc.n	8006f3c <UART_SetConfig+0x398>
 8006f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f2a:	2380      	movs	r3, #128	@ 0x80
 8006f2c:	035b      	lsls	r3, r3, #13
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d204      	bcs.n	8006f3c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f38:	60da      	str	r2, [r3, #12]
 8006f3a:	e0d6      	b.n	80070ea <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006f3c:	231a      	movs	r3, #26
 8006f3e:	2220      	movs	r2, #32
 8006f40:	189b      	adds	r3, r3, r2
 8006f42:	19db      	adds	r3, r3, r7
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e0cf      	b.n	80070ea <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	2380      	movs	r3, #128	@ 0x80
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d000      	beq.n	8006f58 <UART_SetConfig+0x3b4>
 8006f56:	e070      	b.n	800703a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006f58:	231b      	movs	r3, #27
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	189b      	adds	r3, r3, r2
 8006f5e:	19db      	adds	r3, r3, r7
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d015      	beq.n	8006f92 <UART_SetConfig+0x3ee>
 8006f66:	dc18      	bgt.n	8006f9a <UART_SetConfig+0x3f6>
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d00d      	beq.n	8006f88 <UART_SetConfig+0x3e4>
 8006f6c:	dc15      	bgt.n	8006f9a <UART_SetConfig+0x3f6>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <UART_SetConfig+0x3d4>
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d005      	beq.n	8006f82 <UART_SetConfig+0x3de>
 8006f76:	e010      	b.n	8006f9a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f78:	f7fd fde0 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f80:	e014      	b.n	8006fac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f82:	4b66      	ldr	r3, [pc, #408]	@ (800711c <UART_SetConfig+0x578>)
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f86:	e011      	b.n	8006fac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f88:	f7fd fd4c 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f90:	e00c      	b.n	8006fac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f98:	e008      	b.n	8006fac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006f9e:	231a      	movs	r3, #26
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	19db      	adds	r3, r3, r7
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	701a      	strb	r2, [r3, #0]
        break;
 8006faa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d100      	bne.n	8006fb4 <UART_SetConfig+0x410>
 8006fb2:	e09a      	b.n	80070ea <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fb8:	4b57      	ldr	r3, [pc, #348]	@ (8007118 <UART_SetConfig+0x574>)
 8006fba:	0052      	lsls	r2, r2, #1
 8006fbc:	5ad3      	ldrh	r3, [r2, r3]
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006fc2:	f7f9 f89f 	bl	8000104 <__udivsi3>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	005a      	lsls	r2, r3, #1
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	18d2      	adds	r2, r2, r3
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	0010      	movs	r0, r2
 8006fda:	f7f9 f893 	bl	8000104 <__udivsi3>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d921      	bls.n	800702c <UART_SetConfig+0x488>
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fea:	2380      	movs	r3, #128	@ 0x80
 8006fec:	025b      	lsls	r3, r3, #9
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d21c      	bcs.n	800702c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	200e      	movs	r0, #14
 8006ff8:	2420      	movs	r4, #32
 8006ffa:	1903      	adds	r3, r0, r4
 8006ffc:	19db      	adds	r3, r3, r7
 8006ffe:	210f      	movs	r1, #15
 8007000:	438a      	bics	r2, r1
 8007002:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	2207      	movs	r2, #7
 800700c:	4013      	ands	r3, r2
 800700e:	b299      	uxth	r1, r3
 8007010:	1903      	adds	r3, r0, r4
 8007012:	19db      	adds	r3, r3, r7
 8007014:	1902      	adds	r2, r0, r4
 8007016:	19d2      	adds	r2, r2, r7
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	1902      	adds	r2, r0, r4
 8007024:	19d2      	adds	r2, r2, r7
 8007026:	8812      	ldrh	r2, [r2, #0]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	e05e      	b.n	80070ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800702c:	231a      	movs	r3, #26
 800702e:	2220      	movs	r2, #32
 8007030:	189b      	adds	r3, r3, r2
 8007032:	19db      	adds	r3, r3, r7
 8007034:	2201      	movs	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e057      	b.n	80070ea <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703a:	231b      	movs	r3, #27
 800703c:	2220      	movs	r2, #32
 800703e:	189b      	adds	r3, r3, r2
 8007040:	19db      	adds	r3, r3, r7
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d015      	beq.n	8007074 <UART_SetConfig+0x4d0>
 8007048:	dc18      	bgt.n	800707c <UART_SetConfig+0x4d8>
 800704a:	2b04      	cmp	r3, #4
 800704c:	d00d      	beq.n	800706a <UART_SetConfig+0x4c6>
 800704e:	dc15      	bgt.n	800707c <UART_SetConfig+0x4d8>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <UART_SetConfig+0x4b6>
 8007054:	2b02      	cmp	r3, #2
 8007056:	d005      	beq.n	8007064 <UART_SetConfig+0x4c0>
 8007058:	e010      	b.n	800707c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800705a:	f7fd fd6f 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 800705e:	0003      	movs	r3, r0
 8007060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007062:	e014      	b.n	800708e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007064:	4b2d      	ldr	r3, [pc, #180]	@ (800711c <UART_SetConfig+0x578>)
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007068:	e011      	b.n	800708e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706a:	f7fd fcdb 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 800706e:	0003      	movs	r3, r0
 8007070:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007072:	e00c      	b.n	800708e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007074:	2380      	movs	r3, #128	@ 0x80
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800707a:	e008      	b.n	800708e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007080:	231a      	movs	r3, #26
 8007082:	2220      	movs	r2, #32
 8007084:	189b      	adds	r3, r3, r2
 8007086:	19db      	adds	r3, r3, r7
 8007088:	2201      	movs	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
        break;
 800708c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800708e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02a      	beq.n	80070ea <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007098:	4b1f      	ldr	r3, [pc, #124]	@ (8007118 <UART_SetConfig+0x574>)
 800709a:	0052      	lsls	r2, r2, #1
 800709c:	5ad3      	ldrh	r3, [r2, r3]
 800709e:	0019      	movs	r1, r3
 80070a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80070a2:	f7f9 f82f 	bl	8000104 <__udivsi3>
 80070a6:	0003      	movs	r3, r0
 80070a8:	001a      	movs	r2, r3
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	18d2      	adds	r2, r2, r3
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	0019      	movs	r1, r3
 80070b8:	0010      	movs	r0, r2
 80070ba:	f7f9 f823 	bl	8000104 <__udivsi3>
 80070be:	0003      	movs	r3, r0
 80070c0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	2b0f      	cmp	r3, #15
 80070c6:	d90a      	bls.n	80070de <UART_SetConfig+0x53a>
 80070c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ca:	2380      	movs	r3, #128	@ 0x80
 80070cc:	025b      	lsls	r3, r3, #9
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d205      	bcs.n	80070de <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60da      	str	r2, [r3, #12]
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80070de:	231a      	movs	r3, #26
 80070e0:	2220      	movs	r2, #32
 80070e2:	189b      	adds	r3, r3, r2
 80070e4:	19db      	adds	r3, r3, r7
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	226a      	movs	r2, #106	@ 0x6a
 80070ee:	2101      	movs	r1, #1
 80070f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	2268      	movs	r2, #104	@ 0x68
 80070f6:	2101      	movs	r1, #1
 80070f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	2200      	movs	r2, #0
 80070fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	2200      	movs	r2, #0
 8007104:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007106:	231a      	movs	r3, #26
 8007108:	2220      	movs	r2, #32
 800710a:	189b      	adds	r3, r3, r2
 800710c:	19db      	adds	r3, r3, r7
 800710e:	781b      	ldrb	r3, [r3, #0]
}
 8007110:	0018      	movs	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	b010      	add	sp, #64	@ 0x40
 8007116:	bdb0      	pop	{r4, r5, r7, pc}
 8007118:	08007948 	.word	0x08007948
 800711c:	00f42400 	.word	0x00f42400

08007120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	2208      	movs	r2, #8
 800712e:	4013      	ands	r3, r2
 8007130:	d00b      	beq.n	800714a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a4a      	ldr	r2, [pc, #296]	@ (8007264 <UART_AdvFeatureConfig+0x144>)
 800713a:	4013      	ands	r3, r2
 800713c:	0019      	movs	r1, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714e:	2201      	movs	r2, #1
 8007150:	4013      	ands	r3, r2
 8007152:	d00b      	beq.n	800716c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	4a43      	ldr	r2, [pc, #268]	@ (8007268 <UART_AdvFeatureConfig+0x148>)
 800715c:	4013      	ands	r3, r2
 800715e:	0019      	movs	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007170:	2202      	movs	r2, #2
 8007172:	4013      	ands	r3, r2
 8007174:	d00b      	beq.n	800718e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4a3b      	ldr	r2, [pc, #236]	@ (800726c <UART_AdvFeatureConfig+0x14c>)
 800717e:	4013      	ands	r3, r2
 8007180:	0019      	movs	r1, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007192:	2204      	movs	r2, #4
 8007194:	4013      	ands	r3, r2
 8007196:	d00b      	beq.n	80071b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4a34      	ldr	r2, [pc, #208]	@ (8007270 <UART_AdvFeatureConfig+0x150>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	0019      	movs	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	2210      	movs	r2, #16
 80071b6:	4013      	ands	r3, r2
 80071b8:	d00b      	beq.n	80071d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007274 <UART_AdvFeatureConfig+0x154>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	0019      	movs	r1, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d6:	2220      	movs	r2, #32
 80071d8:	4013      	ands	r3, r2
 80071da:	d00b      	beq.n	80071f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	4a25      	ldr	r2, [pc, #148]	@ (8007278 <UART_AdvFeatureConfig+0x158>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	0019      	movs	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	2240      	movs	r2, #64	@ 0x40
 80071fa:	4013      	ands	r3, r2
 80071fc:	d01d      	beq.n	800723a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4a1d      	ldr	r2, [pc, #116]	@ (800727c <UART_AdvFeatureConfig+0x15c>)
 8007206:	4013      	ands	r3, r2
 8007208:	0019      	movs	r1, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800721a:	2380      	movs	r3, #128	@ 0x80
 800721c:	035b      	lsls	r3, r3, #13
 800721e:	429a      	cmp	r2, r3
 8007220:	d10b      	bne.n	800723a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4a15      	ldr	r2, [pc, #84]	@ (8007280 <UART_AdvFeatureConfig+0x160>)
 800722a:	4013      	ands	r3, r2
 800722c:	0019      	movs	r1, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	2280      	movs	r2, #128	@ 0x80
 8007240:	4013      	ands	r3, r2
 8007242:	d00b      	beq.n	800725c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4a0e      	ldr	r2, [pc, #56]	@ (8007284 <UART_AdvFeatureConfig+0x164>)
 800724c:	4013      	ands	r3, r2
 800724e:	0019      	movs	r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  }
}
 800725c:	46c0      	nop			@ (mov r8, r8)
 800725e:	46bd      	mov	sp, r7
 8007260:	b002      	add	sp, #8
 8007262:	bd80      	pop	{r7, pc}
 8007264:	ffff7fff 	.word	0xffff7fff
 8007268:	fffdffff 	.word	0xfffdffff
 800726c:	fffeffff 	.word	0xfffeffff
 8007270:	fffbffff 	.word	0xfffbffff
 8007274:	ffffefff 	.word	0xffffefff
 8007278:	ffffdfff 	.word	0xffffdfff
 800727c:	ffefffff 	.word	0xffefffff
 8007280:	ff9fffff 	.word	0xff9fffff
 8007284:	fff7ffff 	.word	0xfff7ffff

08007288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b092      	sub	sp, #72	@ 0x48
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2290      	movs	r2, #144	@ 0x90
 8007294:	2100      	movs	r1, #0
 8007296:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007298:	f7fa fdd2 	bl	8001e40 <HAL_GetTick>
 800729c:	0003      	movs	r3, r0
 800729e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2208      	movs	r2, #8
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d12d      	bne.n	800730a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b0:	2280      	movs	r2, #128	@ 0x80
 80072b2:	0391      	lsls	r1, r2, #14
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4a47      	ldr	r2, [pc, #284]	@ (80073d4 <UART_CheckIdleState+0x14c>)
 80072b8:	9200      	str	r2, [sp, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f000 f88e 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 80072c0:	1e03      	subs	r3, r0, #0
 80072c2:	d022      	beq.n	800730a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c4:	f3ef 8310 	mrs	r3, PRIMASK
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072ce:	2301      	movs	r3, #1
 80072d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	f383 8810 	msr	PRIMASK, r3
}
 80072d8:	46c0      	nop			@ (mov r8, r8)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2180      	movs	r1, #128	@ 0x80
 80072e6:	438a      	bics	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	f383 8810 	msr	PRIMASK, r3
}
 80072f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2288      	movs	r2, #136	@ 0x88
 80072fa:	2120      	movs	r1, #32
 80072fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2284      	movs	r2, #132	@ 0x84
 8007302:	2100      	movs	r1, #0
 8007304:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e060      	b.n	80073cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2204      	movs	r2, #4
 8007312:	4013      	ands	r3, r2
 8007314:	2b04      	cmp	r3, #4
 8007316:	d146      	bne.n	80073a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731a:	2280      	movs	r2, #128	@ 0x80
 800731c:	03d1      	lsls	r1, r2, #15
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4a2c      	ldr	r2, [pc, #176]	@ (80073d4 <UART_CheckIdleState+0x14c>)
 8007322:	9200      	str	r2, [sp, #0]
 8007324:	2200      	movs	r2, #0
 8007326:	f000 f859 	bl	80073dc <UART_WaitOnFlagUntilTimeout>
 800732a:	1e03      	subs	r3, r0, #0
 800732c:	d03b      	beq.n	80073a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800732e:	f3ef 8310 	mrs	r3, PRIMASK
 8007332:	60fb      	str	r3, [r7, #12]
  return(result);
 8007334:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
 8007338:	2301      	movs	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f383 8810 	msr	PRIMASK, r3
}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4922      	ldr	r1, [pc, #136]	@ (80073d8 <UART_CheckIdleState+0x150>)
 8007350:	400a      	ands	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f383 8810 	msr	PRIMASK, r3
}
 800735e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007360:	f3ef 8310 	mrs	r3, PRIMASK
 8007364:	61bb      	str	r3, [r7, #24]
  return(result);
 8007366:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007368:	633b      	str	r3, [r7, #48]	@ 0x30
 800736a:	2301      	movs	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f383 8810 	msr	PRIMASK, r3
}
 8007374:	46c0      	nop			@ (mov r8, r8)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2101      	movs	r1, #1
 8007382:	438a      	bics	r2, r1
 8007384:	609a      	str	r2, [r3, #8]
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f383 8810 	msr	PRIMASK, r3
}
 8007390:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	228c      	movs	r2, #140	@ 0x8c
 8007396:	2120      	movs	r1, #32
 8007398:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2284      	movs	r2, #132	@ 0x84
 800739e:	2100      	movs	r1, #0
 80073a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e012      	b.n	80073cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2288      	movs	r2, #136	@ 0x88
 80073aa:	2120      	movs	r1, #32
 80073ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	228c      	movs	r2, #140	@ 0x8c
 80073b2:	2120      	movs	r1, #32
 80073b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2284      	movs	r2, #132	@ 0x84
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	0018      	movs	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	b010      	add	sp, #64	@ 0x40
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	01ffffff 	.word	0x01ffffff
 80073d8:	fffffedf 	.word	0xfffffedf

080073dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	1dfb      	adds	r3, r7, #7
 80073ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ec:	e051      	b.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	3301      	adds	r3, #1
 80073f2:	d04e      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f4:	f7fa fd24 	bl	8001e40 <HAL_GetTick>
 80073f8:	0002      	movs	r2, r0
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	429a      	cmp	r2, r3
 8007402:	d302      	bcc.n	800740a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e051      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2204      	movs	r2, #4
 8007416:	4013      	ands	r3, r2
 8007418:	d03b      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb6>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b80      	cmp	r3, #128	@ 0x80
 800741e:	d038      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b40      	cmp	r3, #64	@ 0x40
 8007424:	d035      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2208      	movs	r2, #8
 800742e:	4013      	ands	r3, r2
 8007430:	2b08      	cmp	r3, #8
 8007432:	d111      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2208      	movs	r2, #8
 800743a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	0018      	movs	r0, r3
 8007440:	f000 f83c 	bl	80074bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2290      	movs	r2, #144	@ 0x90
 8007448:	2108      	movs	r1, #8
 800744a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2284      	movs	r2, #132	@ 0x84
 8007450:	2100      	movs	r1, #0
 8007452:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e02c      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	69da      	ldr	r2, [r3, #28]
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	401a      	ands	r2, r3
 8007464:	2380      	movs	r3, #128	@ 0x80
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	429a      	cmp	r2, r3
 800746a:	d112      	bne.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2280      	movs	r2, #128	@ 0x80
 8007472:	0112      	lsls	r2, r2, #4
 8007474:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	0018      	movs	r0, r3
 800747a:	f000 f81f 	bl	80074bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2290      	movs	r2, #144	@ 0x90
 8007482:	2120      	movs	r1, #32
 8007484:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2284      	movs	r2, #132	@ 0x84
 800748a:	2100      	movs	r1, #0
 800748c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e00f      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4013      	ands	r3, r2
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	425a      	negs	r2, r3
 80074a2:	4153      	adcs	r3, r2
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	001a      	movs	r2, r3
 80074a8:	1dfb      	adds	r3, r7, #7
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d09e      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	0018      	movs	r0, r3
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b004      	add	sp, #16
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	@ 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c4:	f3ef 8310 	mrs	r3, PRIMASK
 80074c8:	617b      	str	r3, [r7, #20]
  return(result);
 80074ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ce:	2301      	movs	r3, #1
 80074d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	f383 8810 	msr	PRIMASK, r3
}
 80074d8:	46c0      	nop			@ (mov r8, r8)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4926      	ldr	r1, [pc, #152]	@ (8007580 <UART_EndRxTransfer+0xc4>)
 80074e6:	400a      	ands	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f383 8810 	msr	PRIMASK, r3
}
 80074f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f6:	f3ef 8310 	mrs	r3, PRIMASK
 80074fa:	623b      	str	r3, [r7, #32]
  return(result);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007500:	2301      	movs	r3, #1
 8007502:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	f383 8810 	msr	PRIMASK, r3
}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	491b      	ldr	r1, [pc, #108]	@ (8007584 <UART_EndRxTransfer+0xc8>)
 8007518:	400a      	ands	r2, r1
 800751a:	609a      	str	r2, [r3, #8]
 800751c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	f383 8810 	msr	PRIMASK, r3
}
 8007526:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d118      	bne.n	8007562 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007530:	f3ef 8310 	mrs	r3, PRIMASK
 8007534:	60bb      	str	r3, [r7, #8]
  return(result);
 8007536:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800753a:	2301      	movs	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f383 8810 	msr	PRIMASK, r3
}
 8007544:	46c0      	nop			@ (mov r8, r8)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2110      	movs	r1, #16
 8007552:	438a      	bics	r2, r1
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f383 8810 	msr	PRIMASK, r3
}
 8007560:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	228c      	movs	r2, #140	@ 0x8c
 8007566:	2120      	movs	r1, #32
 8007568:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	46bd      	mov	sp, r7
 800757a:	b00e      	add	sp, #56	@ 0x38
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			@ (mov r8, r8)
 8007580:	fffffedf 	.word	0xfffffedf
 8007584:	effffffe 	.word	0xeffffffe

08007588 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2284      	movs	r2, #132	@ 0x84
 8007594:	5c9b      	ldrb	r3, [r3, r2]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_UARTEx_DisableFifoMode+0x16>
 800759a:	2302      	movs	r3, #2
 800759c:	e027      	b.n	80075ee <HAL_UARTEx_DisableFifoMode+0x66>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2284      	movs	r2, #132	@ 0x84
 80075a2:	2101      	movs	r1, #1
 80075a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2288      	movs	r2, #136	@ 0x88
 80075aa:	2124      	movs	r1, #36	@ 0x24
 80075ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2101      	movs	r1, #1
 80075c2:	438a      	bics	r2, r1
 80075c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a0b      	ldr	r2, [pc, #44]	@ (80075f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2288      	movs	r2, #136	@ 0x88
 80075e0:	2120      	movs	r1, #32
 80075e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2284      	movs	r2, #132	@ 0x84
 80075e8:	2100      	movs	r1, #0
 80075ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	0018      	movs	r0, r3
 80075f0:	46bd      	mov	sp, r7
 80075f2:	b004      	add	sp, #16
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	dfffffff 	.word	0xdfffffff

080075fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2284      	movs	r2, #132	@ 0x84
 800760a:	5c9b      	ldrb	r3, [r3, r2]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e02e      	b.n	8007672 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2284      	movs	r2, #132	@ 0x84
 8007618:	2101      	movs	r1, #1
 800761a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2288      	movs	r2, #136	@ 0x88
 8007620:	2124      	movs	r1, #36	@ 0x24
 8007622:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2101      	movs	r1, #1
 8007638:	438a      	bics	r2, r1
 800763a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	08d9      	lsrs	r1, r3, #3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	0018      	movs	r0, r3
 8007654:	f000 f854 	bl	8007700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2288      	movs	r2, #136	@ 0x88
 8007664:	2120      	movs	r1, #32
 8007666:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2284      	movs	r2, #132	@ 0x84
 800766c:	2100      	movs	r1, #0
 800766e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	0018      	movs	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	b004      	add	sp, #16
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2284      	movs	r2, #132	@ 0x84
 800768a:	5c9b      	ldrb	r3, [r3, r2]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007690:	2302      	movs	r3, #2
 8007692:	e02f      	b.n	80076f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2284      	movs	r2, #132	@ 0x84
 8007698:	2101      	movs	r1, #1
 800769a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2288      	movs	r2, #136	@ 0x88
 80076a0:	2124      	movs	r1, #36	@ 0x24
 80076a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2101      	movs	r1, #1
 80076b8:	438a      	bics	r2, r1
 80076ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4a0e      	ldr	r2, [pc, #56]	@ (80076fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	0019      	movs	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	0018      	movs	r0, r3
 80076d6:	f000 f813 	bl	8007700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2288      	movs	r2, #136	@ 0x88
 80076e6:	2120      	movs	r1, #32
 80076e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2284      	movs	r2, #132	@ 0x84
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	0018      	movs	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b004      	add	sp, #16
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	f1ffffff 	.word	0xf1ffffff

08007700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800770c:	2b00      	cmp	r3, #0
 800770e:	d108      	bne.n	8007722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	226a      	movs	r2, #106	@ 0x6a
 8007714:	2101      	movs	r1, #1
 8007716:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2268      	movs	r2, #104	@ 0x68
 800771c:	2101      	movs	r1, #1
 800771e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007720:	e043      	b.n	80077aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007722:	260f      	movs	r6, #15
 8007724:	19bb      	adds	r3, r7, r6
 8007726:	2208      	movs	r2, #8
 8007728:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800772a:	200e      	movs	r0, #14
 800772c:	183b      	adds	r3, r7, r0
 800772e:	2208      	movs	r2, #8
 8007730:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	0e5b      	lsrs	r3, r3, #25
 800773a:	b2da      	uxtb	r2, r3
 800773c:	240d      	movs	r4, #13
 800773e:	193b      	adds	r3, r7, r4
 8007740:	2107      	movs	r1, #7
 8007742:	400a      	ands	r2, r1
 8007744:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	0f5b      	lsrs	r3, r3, #29
 800774e:	b2da      	uxtb	r2, r3
 8007750:	250c      	movs	r5, #12
 8007752:	197b      	adds	r3, r7, r5
 8007754:	2107      	movs	r1, #7
 8007756:	400a      	ands	r2, r1
 8007758:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800775a:	183b      	adds	r3, r7, r0
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	197a      	adds	r2, r7, r5
 8007760:	7812      	ldrb	r2, [r2, #0]
 8007762:	4914      	ldr	r1, [pc, #80]	@ (80077b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007764:	5c8a      	ldrb	r2, [r1, r2]
 8007766:	435a      	muls	r2, r3
 8007768:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800776a:	197b      	adds	r3, r7, r5
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	4a12      	ldr	r2, [pc, #72]	@ (80077b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007770:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007772:	0019      	movs	r1, r3
 8007774:	f7f8 fd50 	bl	8000218 <__divsi3>
 8007778:	0003      	movs	r3, r0
 800777a:	b299      	uxth	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	226a      	movs	r2, #106	@ 0x6a
 8007780:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007782:	19bb      	adds	r3, r7, r6
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	193a      	adds	r2, r7, r4
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	490a      	ldr	r1, [pc, #40]	@ (80077b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800778c:	5c8a      	ldrb	r2, [r1, r2]
 800778e:	435a      	muls	r2, r3
 8007790:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007792:	193b      	adds	r3, r7, r4
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4a08      	ldr	r2, [pc, #32]	@ (80077b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007798:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800779a:	0019      	movs	r1, r3
 800779c:	f7f8 fd3c 	bl	8000218 <__divsi3>
 80077a0:	0003      	movs	r3, r0
 80077a2:	b299      	uxth	r1, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2268      	movs	r2, #104	@ 0x68
 80077a8:	5299      	strh	r1, [r3, r2]
}
 80077aa:	46c0      	nop			@ (mov r8, r8)
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b005      	add	sp, #20
 80077b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b2:	46c0      	nop			@ (mov r8, r8)
 80077b4:	08007960 	.word	0x08007960
 80077b8:	08007968 	.word	0x08007968

080077bc <memset>:
 80077bc:	0003      	movs	r3, r0
 80077be:	1882      	adds	r2, r0, r2
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d100      	bne.n	80077c6 <memset+0xa>
 80077c4:	4770      	bx	lr
 80077c6:	7019      	strb	r1, [r3, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	e7f9      	b.n	80077c0 <memset+0x4>

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	2600      	movs	r6, #0
 80077d0:	4c0c      	ldr	r4, [pc, #48]	@ (8007804 <__libc_init_array+0x38>)
 80077d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007808 <__libc_init_array+0x3c>)
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	2600      	movs	r6, #0
 80077de:	f000 f819 	bl	8007814 <_init>
 80077e2:	4c0a      	ldr	r4, [pc, #40]	@ (800780c <__libc_init_array+0x40>)
 80077e4:	4d0a      	ldr	r5, [pc, #40]	@ (8007810 <__libc_init_array+0x44>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	00b3      	lsls	r3, r6, #2
 80077f2:	58eb      	ldr	r3, [r5, r3]
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	00b3      	lsls	r3, r6, #2
 80077fc:	58eb      	ldr	r3, [r5, r3]
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	08007978 	.word	0x08007978
 8007808:	08007978 	.word	0x08007978
 800780c:	0800797c 	.word	0x0800797c
 8007810:	08007978 	.word	0x08007978

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
