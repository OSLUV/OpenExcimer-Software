
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  080094ac  080094ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b8  080097b8  0000b0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080097b8  080097b8  0000a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c0  080097c0  0000b0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097c4  080097c4  0000a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080097c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200000a4  0800986c  0000b0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800986c  0000b5b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162f4  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee2  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000242a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b746  00000000  00000000  00025618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017c9e  00000000  00000000  00040d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b13a4  00000000  00000000  000589fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00109da0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f1f  00000000  00000000  00109de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c68  00000000  00000000  0010ad04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0010f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a4 	.word	0x200000a4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009494 	.word	0x08009494

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a8 	.word	0x200000a8
 8000100:	08009494 	.word	0x08009494

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_UART_RxCpltCallback>:
//
//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b089      	sub	sp, #36	@ 0x24
 8000644:	af06      	add	r7, sp, #24
 8000646:	6078      	str	r0, [r7, #4]


	if (huart->Instance == USART2) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4abe      	ldr	r2, [pc, #760]	@ (8000948 <HAL_UART_RxCpltCallback+0x308>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d000      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x14>
 8000652:	e175      	b.n	8000940 <HAL_UART_RxCpltCallback+0x300>

		if (uart_rx_byte == '\n' || uart_rx_byte == '\r')  // End of input
 8000654:	4bbd      	ldr	r3, [pc, #756]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d004      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 800065c:	4bbb      	ldr	r3, [pc, #748]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0d      	cmp	r3, #13
 8000662:	d000      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 8000664:	e157      	b.n	8000916 <HAL_UART_RxCpltCallback+0x2d6>
		{
			uart_rx_buffer[uart_index] = '\0';
 8000666:	4bba      	ldr	r3, [pc, #744]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	001a      	movs	r2, r3
 800066c:	4bb9      	ldr	r3, [pc, #740]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // enable status LED
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	4ab8      	ldr	r2, [pc, #736]	@ (8000958 <HAL_UART_RxCpltCallback+0x318>)
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f003 fc38 	bl	8003ef0 <HAL_GPIO_TogglePin>

			if (uart_rx_buffer[0]=='F') // Change frequency
 8000680:	4bb4      	ldr	r3, [pc, #720]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b46      	cmp	r3, #70	@ 0x46
 8000686:	d141      	bne.n	800070c <HAL_UART_RxCpltCallback+0xcc>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 8000688:	4ab4      	ldr	r2, [pc, #720]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 800068a:	4bb5      	ldr	r3, [pc, #724]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f008 fab2 	bl	8008bf8 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000694:	4bb2      	ldr	r3, [pc, #712]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000696:	0018      	movs	r0, r3
 8000698:	f008 f9a8 	bl	80089ec <atoi>
 800069c:	0002      	movs	r2, r0
 800069e:	4bb1      	ldr	r3, [pc, #708]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006a0:	601a      	str	r2, [r3, #0]
				if (value>=FREQ_MIN && value <=FREQ_MAX) { // limit frequency to between 10 - 120 kHz
 80006a2:	4bb0      	ldr	r3, [pc, #704]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b09      	cmp	r3, #9
 80006a8:	dc00      	bgt.n	80006ac <HAL_UART_RxCpltCallback+0x6c>
 80006aa:	e130      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
 80006ac:	4bad      	ldr	r3, [pc, #692]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b78      	cmp	r3, #120	@ 0x78
 80006b2:	dd00      	ble.n	80006b6 <HAL_UART_RxCpltCallback+0x76>
 80006b4:	e12b      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
					operationFrequency = (uint16_t)((TMR_COUNTER + value / 2) / value);
 80006b6:	4bab      	ldr	r3, [pc, #684]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	da00      	bge.n	80006c0 <HAL_UART_RxCpltCallback+0x80>
 80006be:	3301      	adds	r3, #1
 80006c0:	105b      	asrs	r3, r3, #1
 80006c2:	22fa      	movs	r2, #250	@ 0xfa
 80006c4:	01d2      	lsls	r2, r2, #7
 80006c6:	189a      	adds	r2, r3, r2
 80006c8:	4ba6      	ldr	r3, [pc, #664]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f7ff fdb4 	bl	800023c <__divsi3>
 80006d4:	0003      	movs	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4ba3      	ldr	r3, [pc, #652]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 80006da:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Freq:%d kHz ARR:%d\r\n", value, operationFrequency);
 80006dc:	4ba1      	ldr	r3, [pc, #644]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	4ba1      	ldr	r3, [pc, #644]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	4aa1      	ldr	r2, [pc, #644]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 80006e8:	48a1      	ldr	r0, [pc, #644]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	000b      	movs	r3, r1
 80006ee:	213c      	movs	r1, #60	@ 0x3c
 80006f0:	f008 fa18 	bl	8008b24 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80006f4:	4b9e      	ldr	r3, [pc, #632]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fd04 	bl	8000104 <strlen>
 80006fc:	0003      	movs	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	499b      	ldr	r1, [pc, #620]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000702:	489c      	ldr	r0, [pc, #624]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000704:	230a      	movs	r3, #10
 8000706:	f006 f891 	bl	800682c <HAL_UART_Transmit>
 800070a:	e100      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				}
			}
			else if (uart_rx_buffer[0]=='A') // Change ARR directly -> frequency
 800070c:	4b91      	ldr	r3, [pc, #580]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b41      	cmp	r3, #65	@ 0x41
 8000712:	d137      	bne.n	8000784 <HAL_UART_RxCpltCallback+0x144>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 8000714:	4a91      	ldr	r2, [pc, #580]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000716:	4b92      	ldr	r3, [pc, #584]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f008 fa6c 	bl	8008bf8 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000720:	4b8f      	ldr	r3, [pc, #572]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000722:	0018      	movs	r0, r3
 8000724:	f008 f962 	bl	80089ec <atoi>
 8000728:	0002      	movs	r2, r0
 800072a:	4b8e      	ldr	r3, [pc, #568]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800072c:	601a      	str	r2, [r3, #0]
				if (value>=ARR_MIN && value <=ARR_MAX) { // limit frequency to between 10 - 120 kHz
 800072e:	4b8d      	ldr	r3, [pc, #564]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	2382      	movs	r3, #130	@ 0x82
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	429a      	cmp	r2, r3
 8000738:	da00      	bge.n	800073c <HAL_UART_RxCpltCallback+0xfc>
 800073a:	e0e8      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
 800073c:	4b89      	ldr	r3, [pc, #548]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	23fa      	movs	r3, #250	@ 0xfa
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	429a      	cmp	r2, r3
 8000746:	dd00      	ble.n	800074a <HAL_UART_RxCpltCallback+0x10a>
 8000748:	e0e1      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
					operationFrequency = value;
 800074a:	4b86      	ldr	r3, [pc, #536]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b85      	ldr	r3, [pc, #532]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 8000752:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "ARR: %d Freq: %d\r\n", value, operationFrequency);
 8000754:	4b83      	ldr	r3, [pc, #524]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	4b83      	ldr	r3, [pc, #524]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4a86      	ldr	r2, [pc, #536]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 8000760:	4883      	ldr	r0, [pc, #524]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	000b      	movs	r3, r1
 8000766:	213c      	movs	r1, #60	@ 0x3c
 8000768:	f008 f9dc 	bl	8008b24 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 800076c:	4b80      	ldr	r3, [pc, #512]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fcc8 	bl	8000104 <strlen>
 8000774:	0003      	movs	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	497d      	ldr	r1, [pc, #500]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800077a:	487e      	ldr	r0, [pc, #504]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 800077c:	230a      	movs	r3, #10
 800077e:	f006 f855 	bl	800682c <HAL_UART_Transmit>
 8000782:	e0c4      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				}
			}
			else if (uart_rx_buffer[0]=='C') // change CCR -> charge time
 8000784:	4b73      	ldr	r3, [pc, #460]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b43      	cmp	r3, #67	@ 0x43
 800078a:	d12e      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x1aa>
			{
				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 800078c:	4a73      	ldr	r2, [pc, #460]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 800078e:	4b74      	ldr	r3, [pc, #464]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f008 fa30 	bl	8008bf8 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000798:	4b71      	ldr	r3, [pc, #452]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 800079a:	0018      	movs	r0, r3
 800079c:	f008 f926 	bl	80089ec <atoi>
 80007a0:	0002      	movs	r2, r0
 80007a2:	4b70      	ldr	r3, [pc, #448]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007a4:	601a      	str	r2, [r3, #0]
				if (value>=CCR_MIN && value <=CCR_MAX) { // limit charge time to between 3 - 5 µs
 80007a6:	4b6f      	ldr	r3, [pc, #444]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b63      	cmp	r3, #99	@ 0x63
 80007ac:	dc00      	bgt.n	80007b0 <HAL_UART_RxCpltCallback+0x170>
 80007ae:	e0ae      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
 80007b0:	4b6c      	ldr	r3, [pc, #432]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80007b6:	dd00      	ble.n	80007ba <HAL_UART_RxCpltCallback+0x17a>
 80007b8:	e0a9      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
					dutyMax = value;
 80007ba:	4b6a      	ldr	r3, [pc, #424]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b6e      	ldr	r3, [pc, #440]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80007c2:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Charge: %d\r\n", value);
 80007c4:	4b67      	ldr	r3, [pc, #412]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a6d      	ldr	r2, [pc, #436]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 80007ca:	4869      	ldr	r0, [pc, #420]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007cc:	213c      	movs	r1, #60	@ 0x3c
 80007ce:	f008 f9a9 	bl	8008b24 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80007d2:	4b67      	ldr	r3, [pc, #412]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff fc95 	bl	8000104 <strlen>
 80007da:	0003      	movs	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4964      	ldr	r1, [pc, #400]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007e0:	4864      	ldr	r0, [pc, #400]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 80007e2:	230a      	movs	r3, #10
 80007e4:	f006 f822 	bl	800682c <HAL_UART_Transmit>
 80007e8:	e091      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				}

			}
			else if (uart_rx_buffer[0]=='D') // report ADC DATA
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b44      	cmp	r3, #68	@ 0x44
 80007f0:	d12d      	bne.n	800084e <HAL_UART_RxCpltCallback+0x20e>
			{
//				snprintf(msg, sizeof(msg), "Ui %04d, T %04d, Ul %04d, Il %04d, Li %04d, Ii %04d\r\n",  adc_buffer[0][1], adc_buffer[1][1], adc_buffer[2][1], adc_buffer[3][1], adc_buffer[4][1], adc_buffer[5][1]);
				snprintf(msg, sizeof(msg), "Ui %04d, T %04d, Ul %04d, Il %04d, Li %04d, Ii %04d\r\n",  adc_buffer[0], adc_buffer[1], adc_buffer[2], adc_buffer[3], adc_buffer[4], adc_buffer[5]);
 80007f2:	4b64      	ldr	r3, [pc, #400]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	469c      	mov	ip, r3
 80007fa:	4b62      	ldr	r3, [pc, #392]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	0019      	movs	r1, r3
 8000802:	4b60      	ldr	r3, [pc, #384]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 8000804:	889b      	ldrh	r3, [r3, #4]
 8000806:	b29b      	uxth	r3, r3
 8000808:	001c      	movs	r4, r3
 800080a:	4b5e      	ldr	r3, [pc, #376]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 800080c:	88db      	ldrh	r3, [r3, #6]
 800080e:	b29b      	uxth	r3, r3
 8000810:	001d      	movs	r5, r3
 8000812:	4b5c      	ldr	r3, [pc, #368]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 8000814:	891b      	ldrh	r3, [r3, #8]
 8000816:	b29b      	uxth	r3, r3
 8000818:	001e      	movs	r6, r3
 800081a:	4b5a      	ldr	r3, [pc, #360]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 800081c:	895b      	ldrh	r3, [r3, #10]
 800081e:	b29b      	uxth	r3, r3
 8000820:	4a59      	ldr	r2, [pc, #356]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000822:	4853      	ldr	r0, [pc, #332]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000824:	9304      	str	r3, [sp, #16]
 8000826:	9603      	str	r6, [sp, #12]
 8000828:	9502      	str	r5, [sp, #8]
 800082a:	9401      	str	r4, [sp, #4]
 800082c:	9100      	str	r1, [sp, #0]
 800082e:	4663      	mov	r3, ip
 8000830:	213c      	movs	r1, #60	@ 0x3c
 8000832:	f008 f977 	bl	8008b24 <sniprintf>

				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000836:	4b4e      	ldr	r3, [pc, #312]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fc63 	bl	8000104 <strlen>
 800083e:	0003      	movs	r3, r0
 8000840:	b29a      	uxth	r2, r3
 8000842:	494b      	ldr	r1, [pc, #300]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000844:	484b      	ldr	r0, [pc, #300]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000846:	230a      	movs	r3, #10
 8000848:	f005 fff0 	bl	800682c <HAL_UART_Transmit>
 800084c:	e05f      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
			}
			else if (uart_rx_buffer[0]=='T') // report TIMER data
 800084e:	4b41      	ldr	r3, [pc, #260]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b54      	cmp	r3, #84	@ 0x54
 8000854:	d119      	bne.n	800088a <HAL_UART_RxCpltCallback+0x24a>
			{
				snprintf(msg, sizeof(msg), "ARR: %d, CCR: %d\r\n",  operationFrequency, dutyMax);
 8000856:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b29b      	uxth	r3, r3
 800085c:	0019      	movs	r1, r3
 800085e:	4b47      	ldr	r3, [pc, #284]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4a49      	ldr	r2, [pc, #292]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 8000866:	4842      	ldr	r0, [pc, #264]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	000b      	movs	r3, r1
 800086c:	213c      	movs	r1, #60	@ 0x3c
 800086e:	f008 f959 	bl	8008b24 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000872:	4b3f      	ldr	r3, [pc, #252]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fc45 	bl	8000104 <strlen>
 800087a:	0003      	movs	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	493c      	ldr	r1, [pc, #240]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000880:	483c      	ldr	r0, [pc, #240]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000882:	230a      	movs	r3, #10
 8000884:	f005 ffd2 	bl	800682c <HAL_UART_Transmit>
 8000888:	e041      	b.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
			}
			else { // dimming levels
				value = atoi(uart_rx_buffer);
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 800088c:	0018      	movs	r0, r3
 800088e:	f008 f8ad 	bl	80089ec <atoi>
 8000892:	0002      	movs	r2, r0
 8000894:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 8000896:	601a      	str	r2, [r3, #0]

				if (value <= 10)
 8000898:	4b32      	ldr	r3, [pc, #200]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b0a      	cmp	r3, #10
 800089e:	dc36      	bgt.n	800090e <HAL_UART_RxCpltCallback+0x2ce>
				{
					if (value < 1)
 80008a0:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dc06      	bgt.n	80008b6 <HAL_UART_RxCpltCallback+0x276>
					{
						uartEnableFlag = 0; // turn off if zero
 80008a8:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
						powerLevel = 1; // clip lowest value
 80008ae:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_UART_RxCpltCallback+0x286>
					}
					else {
						uartEnableFlag = 1; // turn on for all other valuesw
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
						powerLevel = (uint8_t)value;
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b34      	ldr	r3, [pc, #208]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008c4:	701a      	strb	r2, [r3, #0]

					}
					snprintf(msg, sizeof(msg), "Set: %d\r\n", powerLevel);
 80008c6:	4b33      	ldr	r3, [pc, #204]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4a33      	ldr	r2, [pc, #204]	@ (8000998 <HAL_UART_RxCpltCallback+0x358>)
 80008cc:	4828      	ldr	r0, [pc, #160]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008ce:	213c      	movs	r1, #60	@ 0x3c
 80008d0:	f008 f928 	bl	8008b24 <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80008d4:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fc14 	bl	8000104 <strlen>
 80008dc:	0003      	movs	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4923      	ldr	r1, [pc, #140]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008e2:	4824      	ldr	r0, [pc, #144]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 80008e4:	230a      	movs	r3, #10
 80008e6:	f005 ffa1 	bl	800682c <HAL_UART_Transmit>
					dutyMax = operationPoints[powerLevel-1][0];
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	5ad2      	ldrh	r2, [r2, r3]
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80008f8:	801a      	strh	r2, [r3, #0]
					operationFrequency = operationPoints[powerLevel-1][1];
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	4a26      	ldr	r2, [pc, #152]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	3302      	adds	r3, #2
 8000908:	881a      	ldrh	r2, [r3, #0]
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800090c:	801a      	strh	r2, [r3, #0]
				{
					// do nothing
				}
			}

			uart_index = 0;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e00e      	b.n	8000934 <HAL_UART_RxCpltCallback+0x2f4>
		}
		else
		{


			if (uart_index < RX_BUFFER_SIZE - 1)
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b08      	cmp	r3, #8
 800091c:	d80a      	bhi.n	8000934 <HAL_UART_RxCpltCallback+0x2f4>
			{
				uart_rx_buffer[uart_index++] = uart_rx_byte;
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	b2d1      	uxtb	r1, r2
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000928:	7011      	strb	r1, [r2, #0]
 800092a:	001a      	movs	r2, r3
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800092e:	7819      	ldrb	r1, [r3, #0]
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000932:	5499      	strb	r1, [r3, r2]
			}
		}

		HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000934:	4905      	ldr	r1, [pc, #20]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000938:	2201      	movs	r2, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f006 f81a 	bl	8006974 <HAL_UART_Receive_IT>
	}
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b003      	add	sp, #12
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	20000417 	.word	0x20000417
 8000950:	20000416 	.word	0x20000416
 8000954:	20000400 	.word	0x20000400
 8000958:	50000800 	.word	0x50000800
 800095c:	20000401 	.word	0x20000401
 8000960:	2000040c 	.word	0x2000040c
 8000964:	20000454 	.word	0x20000454
 8000968:	2000000a 	.word	0x2000000a
 800096c:	080094ac 	.word	0x080094ac
 8000970:	20000418 	.word	0x20000418
 8000974:	2000036c 	.word	0x2000036c
 8000978:	080094c4 	.word	0x080094c4
 800097c:	20000006 	.word	0x20000006
 8000980:	080094d8 	.word	0x080094d8
 8000984:	200000d4 	.word	0x200000d4
 8000988:	080094e8 	.word	0x080094e8
 800098c:	08009520 	.word	0x08009520
 8000990:	2000000c 	.word	0x2000000c
 8000994:	2000000d 	.word	0x2000000d
 8000998:	08009534 	.word	0x08009534
 800099c:	20000010 	.word	0x20000010

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f001 fc09 	bl	80021bc <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_Delay(100);
 80009aa:	2064      	movs	r0, #100	@ 0x64
 80009ac:	f001 fc8c 	bl	80022c8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 fa56 	bl	8000e60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 80009b4:	2064      	movs	r0, #100	@ 0x64
 80009b6:	f001 fc87 	bl	80022c8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f000 fed9 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 80009be:	f000 fec1 	bl	8001744 <MX_DMA_Init>
  MX_ADC1_Init();
 80009c2:	f000 fad1 	bl	8000f68 <MX_ADC1_Init>
  MX_COMP2_Init();
 80009c6:	f000 fb93 	bl	80010f0 <MX_COMP2_Init>
  MX_TIM1_Init();
 80009ca:	f000 fbf7 	bl	80011bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009ce:	f000 fcb9 	bl	8001344 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009d2:	f000 fd17 	bl	8001404 <MX_TIM3_Init>
  MX_TIM16_Init();
 80009d6:	f000 fddf 	bl	8001598 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80009da:	f000 fe65 	bl	80016a8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009de:	f000 fda1 	bl	8001524 <MX_TIM6_Init>
  MX_DAC1_Init();
 80009e2:	f000 fbb5 	bl	8001150 <MX_DAC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009e6:	f000 fa99 	bl	8000f1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


	// synchronous timing interrupts
	TIM6->ARR = 1000;
 80009ea:	4bd1      	ldr	r3, [pc, #836]	@ (8000d30 <main+0x390>)
 80009ec:	22fa      	movs	r2, #250	@ 0xfa
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 80009f2:	4bd0      	ldr	r3, [pc, #832]	@ (8000d34 <main+0x394>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 f9b7 	bl	8004d68 <HAL_TIM_Base_Start_IT>



	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 80009fa:	4bcf      	ldr	r3, [pc, #828]	@ (8000d38 <main+0x398>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4bce      	ldr	r3, [pc, #824]	@ (8000d38 <main+0x398>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	430a      	orrs	r2, r1
 8000a04:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 8000a06:	4bcc      	ldr	r3, [pc, #816]	@ (8000d38 <main+0x398>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4bcb      	ldr	r3, [pc, #812]	@ (8000d38 <main+0x398>)
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 8000a12:	4bca      	ldr	r3, [pc, #808]	@ (8000d3c <main+0x39c>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f004 fa5a 	bl	8004ed0 <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 8000a1c:	4bc7      	ldr	r3, [pc, #796]	@ (8000d3c <main+0x39c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a22:	4bc6      	ldr	r3, [pc, #792]	@ (8000d3c <main+0x39c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	0209      	lsls	r1, r1, #8
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	645a      	str	r2, [r3, #68]	@ 0x44



	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 8000a2e:	4bc4      	ldr	r3, [pc, #784]	@ (8000d40 <main+0x3a0>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fc4b 	bl	80032ce <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 8000a38:	4bc2      	ldr	r3, [pc, #776]	@ (8000d44 <main+0x3a4>)
 8000a3a:	48c1      	ldr	r0, [pc, #772]	@ (8000d40 <main+0x3a0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f002 fcf8 	bl	8003434 <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 8000a44:	4bc0      	ldr	r3, [pc, #768]	@ (8000d48 <main+0x3a8>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 faee 	bl	8003028 <HAL_COMP_Start>
	 * 3 = Ch8: Isense_Lamp
	 * 4 = Ch9: Lamp Intensity
	 * 5 = Ch10: Isense_In
	 */

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4abe      	ldr	r2, [pc, #760]	@ (8000d4c <main+0x3ac>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f003 fa4b 	bl	8003ef0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a5a:	23fa      	movs	r3, #250	@ 0xfa
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fc32 	bl	80022c8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4ab8      	ldr	r2, [pc, #736]	@ (8000d4c <main+0x3ac>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f003 fa3f 	bl	8003ef0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a72:	23fa      	movs	r3, #250	@ 0xfa
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 fc26 	bl	80022c8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	4ab2      	ldr	r2, [pc, #712]	@ (8000d4c <main+0x3ac>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f003 fa33 	bl	8003ef0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a8a:	23fa      	movs	r3, #250	@ 0xfa
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fc1a 	bl	80022c8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	4aac      	ldr	r2, [pc, #688]	@ (8000d4c <main+0x3ac>)
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f003 fa27 	bl	8003ef0 <HAL_GPIO_TogglePin>


	HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000aa2:	49ab      	ldr	r1, [pc, #684]	@ (8000d50 <main+0x3b0>)
 8000aa4:	4bab      	ldr	r3, [pc, #684]	@ (8000d54 <main+0x3b4>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f005 ff63 	bl	8006974 <HAL_UART_Receive_IT>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request) {
 8000ab4:	4ba8      	ldr	r3, [pc, #672]	@ (8000d58 <main+0x3b8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d009      	beq.n	8000ad2 <main+0x132>
			tim6_slowIrq_request = 0;
 8000abe:	4ba6      	ldr	r3, [pc, #664]	@ (8000d58 <main+0x3b8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // enable status LED
 8000ac4:	2380      	movs	r3, #128	@ 0x80
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	4aa0      	ldr	r2, [pc, #640]	@ (8000d4c <main+0x3ac>)
 8000aca:	0019      	movs	r1, r3
 8000acc:	0010      	movs	r0, r2
 8000ace:	f003 fa0f 	bl	8003ef0 <HAL_GPIO_TogglePin>
			//sendInt16UART();
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 8000ad2:	4ba2      	ldr	r3, [pc, #648]	@ (8000d5c <main+0x3bc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d059      	beq.n	8000b90 <main+0x1f0>
			tim6_irq_request = 0;
 8000adc:	4b9f      	ldr	r3, [pc, #636]	@ (8000d5c <main+0x3bc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) && uartEnableFlag; //pull low for enabling
 8000ae2:	2380      	movs	r3, #128	@ 0x80
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4a9e      	ldr	r2, [pc, #632]	@ (8000d60 <main+0x3c0>)
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0010      	movs	r0, r2
 8000aec:	f003 f9c6 	bl	8003e7c <HAL_GPIO_ReadPin>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d105      	bne.n	8000b00 <main+0x160>
 8000af4:	4b9b      	ldr	r3, [pc, #620]	@ (8000d64 <main+0x3c4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <main+0x160>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <main+0x162>
 8000b00:	2300      	movs	r3, #0
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b98      	ldr	r3, [pc, #608]	@ (8000d68 <main+0x3c8>)
 8000b06:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 8000b08:	4b97      	ldr	r3, [pc, #604]	@ (8000d68 <main+0x3c8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d009      	beq.n	8000b26 <main+0x186>
 8000b12:	4b96      	ldr	r3, [pc, #600]	@ (8000d6c <main+0x3cc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d105      	bne.n	8000b26 <main+0x186>
				ignitionCounter++;
 8000b1a:	4b95      	ldr	r3, [pc, #596]	@ (8000d70 <main+0x3d0>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b93      	ldr	r3, [pc, #588]	@ (8000d70 <main+0x3d0>)
 8000b24:	801a      	strh	r2, [r3, #0]


			// check lamp voltage

			// check supply voltage
			if ((adc_24V < upper_24Vsupply) && (adc_24V > lower_24Vsupply)) {
 8000b26:	4b93      	ldr	r3, [pc, #588]	@ (8000d74 <main+0x3d4>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b92      	ldr	r3, [pc, #584]	@ (8000d78 <main+0x3d8>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d20b      	bcs.n	8000b4e <main+0x1ae>
 8000b36:	4b8f      	ldr	r3, [pc, #572]	@ (8000d74 <main+0x3d4>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d7c <main+0x3dc>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d903      	bls.n	8000b4e <main+0x1ae>
				supplyOKFlag = 1;
 8000b46:	4b8e      	ldr	r3, [pc, #568]	@ (8000d80 <main+0x3e0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e002      	b.n	8000b54 <main+0x1b4>
			}
			else {
				supplyOKFlag = 0;
 8000b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8000d80 <main+0x3e0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > upper_tempMOSFET) {
 8000b54:	4b8b      	ldr	r3, [pc, #556]	@ (8000d84 <main+0x3e4>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d88 <main+0x3e8>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d903      	bls.n	8000b6c <main+0x1cc>
				OT_flag = 1;
 8000b64:	4b89      	ldr	r3, [pc, #548]	@ (8000d8c <main+0x3ec>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e002      	b.n	8000b72 <main+0x1d2>
			}
			else {
				OT_flag = 0;
 8000b6c:	4b87      	ldr	r3, [pc, #540]	@ (8000d8c <main+0x3ec>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > upper_iIn) {
 8000b72:	4b87      	ldr	r3, [pc, #540]	@ (8000d90 <main+0x3f0>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b86      	ldr	r3, [pc, #536]	@ (8000d94 <main+0x3f4>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d903      	bls.n	8000b8a <main+0x1ea>
				OCPinFlag = 1;
 8000b82:	4b85      	ldr	r3, [pc, #532]	@ (8000d98 <main+0x3f8>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e002      	b.n	8000b90 <main+0x1f0>
			}
			else {
				OCPinFlag = 0;
 8000b8a:	4b83      	ldr	r3, [pc, #524]	@ (8000d98 <main+0x3f8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]


		}

		// ------------ ASM -----------------------
		switch (state) {
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d88d      	bhi.n	8000ab4 <main+0x114>
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	4b80      	ldr	r3, [pc, #512]	@ (8000d9c <main+0x3fc>)
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 8000ba2:	4b72      	ldr	r3, [pc, #456]	@ (8000d6c <main+0x3cc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 8000ba8:	4b71      	ldr	r3, [pc, #452]	@ (8000d70 <main+0x3d0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	4866      	ldr	r0, [pc, #408]	@ (8000d4c <main+0x3ac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	f003 f97d 	bl	8003eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 8000bbc:	4b68      	ldr	r3, [pc, #416]	@ (8000d60 <main+0x3c0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	@ 0x40
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 f977 	bl	8003eb6 <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8000d3c <main+0x39c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->ARR=ignFrequency; //50 kHz
 8000bd0:	4b73      	ldr	r3, [pc, #460]	@ (8000da0 <main+0x400>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b58      	ldr	r3, [pc, #352]	@ (8000d38 <main+0x398>)
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

			// exit conditions
			if (errorFlag) {
 8000bda:	4b72      	ldr	r3, [pc, #456]	@ (8000da4 <main+0x404>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <main+0x24a>
				state = ERROR_state;
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag  && supplyOKFlag ) {
 8000bea:	4b5f      	ldr	r3, [pc, #380]	@ (8000d68 <main+0x3c8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <main+0x256>
 8000bf4:	e11a      	b.n	8000e2c <main+0x48c>
 8000bf6:	4b62      	ldr	r3, [pc, #392]	@ (8000d80 <main+0x3e0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <main+0x262>
 8000c00:	e114      	b.n	8000e2c <main+0x48c>
				state = IGNITE;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c08:	e110      	b.n	8000e2c <main+0x48c>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 8000c0a:	4b67      	ldr	r3, [pc, #412]	@ (8000da8 <main+0x408>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b67      	ldr	r3, [pc, #412]	@ (8000dac <main+0x40c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d903      	bls.n	8000c1e <main+0x27e>
				state = ERROR_state;
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	2204      	movs	r2, #4
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e03d      	b.n	8000c9a <main+0x2fa>
			}
			else if (!ignitionFlag) {
 8000c1e:	4b53      	ldr	r3, [pc, #332]	@ (8000d6c <main+0x3cc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d139      	bne.n	8000c9a <main+0x2fa>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 8000c26:	4b52      	ldr	r3, [pc, #328]	@ (8000d70 <main+0x3d0>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	4b61      	ldr	r3, [pc, #388]	@ (8000db0 <main+0x410>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d22a      	bcs.n	8000c88 <main+0x2e8>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	4845      	ldr	r0, [pc, #276]	@ (8000d4c <main+0x3ac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	f003 f93b 	bl	8003eb6 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 8000c40:	4b5c      	ldr	r3, [pc, #368]	@ (8000db4 <main+0x414>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <main+0x39c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM1->ARR = ignFrequency;
 8000c4c:	4b54      	ldr	r3, [pc, #336]	@ (8000da0 <main+0x400>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b39      	ldr	r3, [pc, #228]	@ (8000d38 <main+0x398>)
 8000c54:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 8000c56:	4b42      	ldr	r3, [pc, #264]	@ (8000d60 <main+0x3c0>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	@ 0x40
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 f92a 	bl	8003eb6 <HAL_GPIO_WritePin>
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && ignitionCounter > 1000) { // minimum ignition time 1000 ms
					if ( ignitionCounter > 1000) { // minimum ignition time 1000 ms
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <main+0x3d0>)
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	23fa      	movs	r3, #250	@ 0xfa
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d915      	bls.n	8000c9a <main+0x2fa>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d60 <main+0x3c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	2140      	movs	r1, #64	@ 0x40
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 f91e 	bl	8003eb6 <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 8000c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d6c <main+0x3cc>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
						state = RUN;
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e008      	b.n	8000c9a <main+0x2fa>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 8000c88:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <main+0x410>)
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <main+0x3d0>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d802      	bhi.n	8000c9a <main+0x2fa>
					state = IGN_FAIL;
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	2203      	movs	r2, #3
 8000c98:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <main+0x3c8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d000      	beq.n	8000ca6 <main+0x306>
 8000ca4:	e0c4      	b.n	8000e30 <main+0x490>
				state = INIT;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000cac:	e0c0      	b.n	8000e30 <main+0x490>
		case IGN_FAIL:
			ignitionFlag = 0;
 8000cae:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <main+0x3cc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <main+0x3c0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2140      	movs	r1, #64	@ 0x40
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f003 f8fb 	bl	8003eb6 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x39c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d4c <main+0x3ac>)
 8000cce:	0019      	movs	r1, r3
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	f003 f90d 	bl	8003ef0 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f001 faf6 	bl	80022c8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000cdc:	2380      	movs	r3, #128	@ 0x80
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <main+0x3ac>)
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	f003 f903 	bl	8003ef0 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000cea:	2064      	movs	r0, #100	@ 0x64
 8000cec:	f001 faec 	bl	80022c8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	4a15      	ldr	r2, [pc, #84]	@ (8000d4c <main+0x3ac>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f003 f8f9 	bl	8003ef0 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000cfe:	2064      	movs	r0, #100	@ 0x64
 8000d00:	f001 fae2 	bl	80022c8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000d04:	2380      	movs	r3, #128	@ 0x80
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	4a10      	ldr	r2, [pc, #64]	@ (8000d4c <main+0x3ac>)
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f003 f8ef 	bl	8003ef0 <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <main+0x418>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fad6 	bl	80022c8 <HAL_Delay>
			failedIgnitionCounter++;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <main+0x408>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <main+0x408>)
 8000d26:	701a      	strb	r2, [r3, #0]
			state = INIT;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
			break;
 8000d2e:	e082      	b.n	8000e36 <main+0x496>
 8000d30:	40001000 	.word	0x40001000
 8000d34:	200002d4 	.word	0x200002d4
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	200001f0 	.word	0x200001f0
 8000d40:	200001dc 	.word	0x200001dc
 8000d44:	00000fff 	.word	0x00000fff
 8000d48:	200001ac 	.word	0x200001ac
 8000d4c:	50000800 	.word	0x50000800
 8000d50:	20000417 	.word	0x20000417
 8000d54:	2000036c 	.word	0x2000036c
 8000d58:	200000c6 	.word	0x200000c6
 8000d5c:	200000c5 	.word	0x200000c5
 8000d60:	50000400 	.word	0x50000400
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	200000c0 	.word	0x200000c0
 8000d6c:	2000045a 	.word	0x2000045a
 8000d70:	20000458 	.word	0x20000458
 8000d74:	200000e0 	.word	0x200000e0
 8000d78:	2000003e 	.word	0x2000003e
 8000d7c:	20000040 	.word	0x20000040
 8000d80:	200000c1 	.word	0x200000c1
 8000d84:	200000e2 	.word	0x200000e2
 8000d88:	20000042 	.word	0x20000042
 8000d8c:	200000c3 	.word	0x200000c3
 8000d90:	200000ea 	.word	0x200000ea
 8000d94:	20000044 	.word	0x20000044
 8000d98:	200000c4 	.word	0x200000c4
 8000d9c:	08009540 	.word	0x08009540
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200000c2 	.word	0x200000c2
 8000da8:	2000045b 	.word	0x2000045b
 8000dac:	2000003c 	.word	0x2000003c
 8000db0:	20000038 	.word	0x20000038
 8000db4:	20000004 	.word	0x20000004
 8000db8:	2000003a 	.word	0x2000003a


		case RUN:
			// RUN code
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
			TIM1->ARR=operationFrequency;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <main+0x498>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <main+0x49c>)
 8000dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMax); // max. duty cycle limiting
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <main+0x4a0>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <main+0x4a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <main+0x4a8>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <main+0x4ac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f002 fb29 	bl	8003434 <HAL_DAC_SetValue>

			// exit conditions

			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <main+0x4b0>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <main+0x456>
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <main+0x4b4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <main+0x45c>
				state = INIT;
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
			}

			/*if (OT_flag || errorFlag || (adc_uSenseLamp>adc_uSenseLampOpenCircuit)) {
				state = ERROR_state;
			}*/
			if (OT_flag ) {
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <main+0x4b8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d016      	beq.n	8000e34 <main+0x494>
				state = ERROR_state;
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	2204      	movs	r2, #4
 8000e0a:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000e0c:	e012      	b.n	8000e34 <main+0x494>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <main+0x4a4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34


			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <main+0x4bc>)
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	0010      	movs	r0, r2
 8000e20:	f003 f866 	bl	8003ef0 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000e24:	20c8      	movs	r0, #200	@ 0xc8
 8000e26:	f001 fa4f 	bl	80022c8 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000e2a:	e004      	b.n	8000e36 <main+0x496>
			break;
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	e641      	b.n	8000ab4 <main+0x114>
			break;
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	e63f      	b.n	8000ab4 <main+0x114>
			break;
 8000e34:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request) {
 8000e36:	e63d      	b.n	8000ab4 <main+0x114>
 8000e38:	2000000a 	.word	0x2000000a
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	20000006 	.word	0x20000006
 8000e44:	200001f0 	.word	0x200001f0
 8000e48:	20000002 	.word	0x20000002
 8000e4c:	200001dc 	.word	0x200001dc
 8000e50:	200000c0 	.word	0x200000c0
 8000e54:	200000c1 	.word	0x200000c1
 8000e58:	200000c3 	.word	0x200000c3
 8000e5c:	50000800 	.word	0x50000800

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b093      	sub	sp, #76	@ 0x4c
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	2410      	movs	r4, #16
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2338      	movs	r3, #56	@ 0x38
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f007 fe8d 	bl	8008b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e76:	003b      	movs	r3, r7
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f007 fe86 	bl	8008b90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f003 f84d 	bl	8003f28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	0052      	lsls	r2, r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2240      	movs	r2, #64	@ 0x40
 8000ea8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2202      	movs	r2, #2
 8000eae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	0292      	lsls	r2, r2, #10
 8000ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	22c0      	movs	r2, #192	@ 0xc0
 8000ece:	04d2      	lsls	r2, r2, #19
 8000ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2280      	movs	r2, #128	@ 0x80
 8000ed6:	0592      	lsls	r2, r2, #22
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	0018      	movs	r0, r3
 8000ede:	f003 f86f 	bl	8003fc0 <HAL_RCC_OscConfig>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ee6:	f000 fced 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	003b      	movs	r3, r7
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	003b      	movs	r3, r7
 8000f04:	2100      	movs	r1, #0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f003 fb74 	bl	80045f4 <HAL_RCC_ClockConfig>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f10:	f000 fcd8 	bl	80018c4 <Error_Handler>
  }
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b013      	add	sp, #76	@ 0x4c
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2011      	movs	r0, #17
 8000f26:	f002 f97d 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000f2a:	2011      	movs	r0, #17
 8000f2c:	f002 f98f 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2100      	movs	r1, #0
 8000f34:	2009      	movs	r0, #9
 8000f36:	f002 f975 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f3a:	2009      	movs	r0, #9
 8000f3c:	f002 f987 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2010      	movs	r0, #16
 8000f46:	f002 f96d 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f4a:	2010      	movs	r0, #16
 8000f4c:	f002 f97f 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	201c      	movs	r0, #28
 8000f56:	f002 f965 	bl	8003224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f002 f977 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	0018      	movs	r0, r3
 8000f72:	230c      	movs	r3, #12
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f007 fe0a 	bl	8008b90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7c:	4b55      	ldr	r3, [pc, #340]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f7e:	4a56      	ldr	r2, [pc, #344]	@ (80010d8 <MX_ADC1_Init+0x170>)
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000f82:	4b54      	ldr	r3, [pc, #336]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f84:	22a0      	movs	r2, #160	@ 0xa0
 8000f86:	0352      	lsls	r2, r2, #13
 8000f88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8a:	4b52      	ldr	r3, [pc, #328]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b50      	ldr	r3, [pc, #320]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f96:	4b4f      	ldr	r3, [pc, #316]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0392      	lsls	r2, r2, #14
 8000f9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000faa:	4b4a      	ldr	r3, [pc, #296]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb0:	4b48      	ldr	r3, [pc, #288]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 6;
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fb8:	2206      	movs	r2, #6
 8000fba:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000fbc:	4b45      	ldr	r3, [pc, #276]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fbe:	22a8      	movs	r2, #168	@ 0xa8
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fc4:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fcc:	4b41      	ldr	r3, [pc, #260]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fce:	222c      	movs	r2, #44	@ 0x2c
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000fda:	4b3e      	ldr	r3, [pc, #248]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fdc:	2205      	movs	r2, #5
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000fe8:	223c      	movs	r2, #60	@ 0x3c
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fee:	4b39      	ldr	r3, [pc, #228]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff4:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 fa88 	bl	800250c <HAL_ADC_Init>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001000:	f000 fc60 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f001 fc1d 	bl	800285c <HAL_ADC_ConfigChannel>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001026:	f000 fc4d 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4a2b      	ldr	r2, [pc, #172]	@ (80010dc <MX_ADC1_Init+0x174>)
 800102e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2204      	movs	r2, #4
 8001034:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fc0d 	bl	800285c <HAL_ADC_ConfigChannel>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001046:	f000 fc3d 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <MX_ADC1_Init+0x178>)
 800104e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2208      	movs	r2, #8
 8001054:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	1d3a      	adds	r2, r7, #4
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fbfd 	bl	800285c <HAL_ADC_ConfigChannel>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001066:	f000 fc2d 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <MX_ADC1_Init+0x17c>)
 800106e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	220c      	movs	r2, #12
 8001074:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fbed 	bl	800285c <HAL_ADC_ConfigChannel>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001086:	f000 fc1d 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4a16      	ldr	r2, [pc, #88]	@ (80010e8 <MX_ADC1_Init+0x180>)
 800108e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2210      	movs	r2, #16
 8001094:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	1d3a      	adds	r2, r7, #4
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f001 fbdd 	bl	800285c <HAL_ADC_ConfigChannel>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80010a6:	f000 fc0d 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <MX_ADC1_Init+0x184>)
 80010ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2214      	movs	r2, #20
 80010b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b6:	1d3a      	adds	r2, r7, #4
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_ADC1_Init+0x16c>)
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 fbcd 	bl	800285c <HAL_ADC_ConfigChannel>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80010c6:	f000 fbfd 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	200000ec 	.word	0x200000ec
 80010d8:	40012400 	.word	0x40012400
 80010dc:	04000002 	.word	0x04000002
 80010e0:	0c000008 	.word	0x0c000008
 80010e4:	20000100 	.word	0x20000100
 80010e8:	24000200 	.word	0x24000200
 80010ec:	28000400 	.word	0x28000400

080010f0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_COMP2_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	@ (800114c <MX_COMP2_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_COMP2_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001102:	2240      	movs	r2, #64	@ 0x40
 8001104:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_COMP2_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_COMP2_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_COMP2_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <MX_COMP2_Init+0x58>)
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fe16 	bl	8002d64 <HAL_COMP_Init>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_COMP2_Init+0x50>
  {
    Error_Handler();
 800113c:	f000 fbc2 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	200001ac 	.word	0x200001ac
 800114c:	40010204 	.word	0x40010204

08001150 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	0018      	movs	r0, r3
 800115a:	2324      	movs	r3, #36	@ 0x24
 800115c:	001a      	movs	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	f007 fd16 	bl	8008b90 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_DAC1_Init+0x64>)
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <MX_DAC1_Init+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_DAC1_Init+0x64>)
 800116c:	0018      	movs	r0, r3
 800116e:	f002 f88b 	bl	8003288 <HAL_DAC_Init>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8001176:	f000 fba5 	bl	80018c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2202      	movs	r2, #2
 800118a:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2201      	movs	r2, #1
 8001190:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001198:	1d39      	adds	r1, r7, #4
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_DAC1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 f978 	bl	8003494 <HAL_DAC_ConfigChannel>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fb8c 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b00a      	add	sp, #40	@ 0x28
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001dc 	.word	0x200001dc
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09c      	sub	sp, #112	@ 0x70
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 80011c2:	235c      	movs	r3, #92	@ 0x5c
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	0018      	movs	r0, r3
 80011c8:	2314      	movs	r3, #20
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f007 fcdf 	bl	8008b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d2:	2350      	movs	r3, #80	@ 0x50
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	0018      	movs	r0, r3
 80011d8:	230c      	movs	r3, #12
 80011da:	001a      	movs	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	f007 fcd7 	bl	8008b90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	2334      	movs	r3, #52	@ 0x34
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	0018      	movs	r0, r3
 80011e8:	231c      	movs	r3, #28
 80011ea:	001a      	movs	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f007 fccf 	bl	8008b90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f2:	003b      	movs	r3, r7
 80011f4:	0018      	movs	r0, r3
 80011f6:	2334      	movs	r3, #52	@ 0x34
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f007 fcc8 	bl	8008b90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001200:	4b4e      	ldr	r3, [pc, #312]	@ (800133c <MX_TIM1_Init+0x180>)
 8001202:	4a4f      	ldr	r2, [pc, #316]	@ (8001340 <MX_TIM1_Init+0x184>)
 8001204:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001206:	4b4d      	ldr	r3, [pc, #308]	@ (800133c <MX_TIM1_Init+0x180>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <MX_TIM1_Init+0x180>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320;
 8001212:	4b4a      	ldr	r3, [pc, #296]	@ (800133c <MX_TIM1_Init+0x180>)
 8001214:	22a0      	movs	r2, #160	@ 0xa0
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b48      	ldr	r3, [pc, #288]	@ (800133c <MX_TIM1_Init+0x180>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001220:	4b46      	ldr	r3, [pc, #280]	@ (800133c <MX_TIM1_Init+0x180>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001226:	4b45      	ldr	r3, [pc, #276]	@ (800133c <MX_TIM1_Init+0x180>)
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800122c:	4b43      	ldr	r3, [pc, #268]	@ (800133c <MX_TIM1_Init+0x180>)
 800122e:	0018      	movs	r0, r3
 8001230:	f003 fdf6 	bl	8004e20 <HAL_TIM_PWM_Init>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001238:	f000 fb44 	bl	80018c4 <Error_Handler>
  }
  sClearInputConfig.ClearInputState = ENABLE;
 800123c:	215c      	movs	r1, #92	@ 0x5c
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_COMP2;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2201      	movs	r2, #1
 8001248:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 800124a:	1879      	adds	r1, r7, r1
 800124c:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <MX_TIM1_Init+0x180>)
 800124e:	2200      	movs	r2, #0
 8001250:	0018      	movs	r0, r3
 8001252:	f004 fa2b 	bl	80056ac <HAL_TIM_ConfigOCrefClear>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800125a:	f000 fb33 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2150      	movs	r1, #80	@ 0x50
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001272:	187a      	adds	r2, r7, r1
 8001274:	4b31      	ldr	r3, [pc, #196]	@ (800133c <MX_TIM1_Init+0x180>)
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f005 f95f 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001282:	f000 fb1f 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001286:	2134      	movs	r1, #52	@ 0x34
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2260      	movs	r2, #96	@ 0x60
 800128c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	1879      	adds	r1, r7, r1
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_TIM1_Init+0x180>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	0018      	movs	r0, r3
 80012ba:	f004 f8f7 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80012c2:	f000 faff 	bl	80018c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c6:	003b      	movs	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012cc:	003b      	movs	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d2:	003b      	movs	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d8:	003b      	movs	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012de:	003b      	movs	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	0192      	lsls	r2, r2, #6
 80012ea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ec:	003b      	movs	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012f2:	003b      	movs	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f8:	003b      	movs	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012fe:	003b      	movs	r3, r7
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	0492      	lsls	r2, r2, #18
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001306:	003b      	movs	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800130c:	003b      	movs	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001312:	003b      	movs	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001318:	003a      	movs	r2, r7
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_TIM1_Init+0x180>)
 800131c:	0011      	movs	r1, r2
 800131e:	0018      	movs	r0, r3
 8001320:	f005 f97a 	bl	8006618 <HAL_TIMEx_ConfigBreakDeadTime>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001328:	f000 facc 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <MX_TIM1_Init+0x180>)
 800132e:	0018      	movs	r0, r3
 8001330:	f000 fcfa 	bl	8001d28 <HAL_TIM_MspPostInit>

}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b01c      	add	sp, #112	@ 0x70
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001f0 	.word	0x200001f0
 8001340:	40012c00 	.word	0x40012c00

08001344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	231c      	movs	r3, #28
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	0018      	movs	r0, r3
 8001350:	230c      	movs	r3, #12
 8001352:	001a      	movs	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f007 fc1b 	bl	8008b90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	003b      	movs	r3, r7
 800135c:	0018      	movs	r0, r3
 800135e:	231c      	movs	r3, #28
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f007 fc14 	bl	8008b90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <MX_TIM2_Init+0xbc>)
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	05d2      	lsls	r2, r2, #23
 800136e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <MX_TIM2_Init+0xbc>)
 8001372:	2210      	movs	r2, #16
 8001374:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_TIM2_Init+0xbc>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <MX_TIM2_Init+0xbc>)
 800137e:	22fa      	movs	r2, #250	@ 0xfa
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_TIM2_Init+0xbc>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_TIM2_Init+0xbc>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_TIM2_Init+0xbc>)
 8001392:	0018      	movs	r0, r3
 8001394:	f003 fd44 	bl	8004e20 <HAL_TIM_PWM_Init>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fa92 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	211c      	movs	r1, #28
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ae:	187a      	adds	r2, r7, r1
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_TIM2_Init+0xbc>)
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f005 f8c1 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013be:	f000 fa81 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c2:	003b      	movs	r3, r7
 80013c4:	2260      	movs	r2, #96	@ 0x60
 80013c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80013c8:	003b      	movs	r3, r7
 80013ca:	22fa      	movs	r2, #250	@ 0xfa
 80013cc:	0052      	lsls	r2, r2, #1
 80013ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	003b      	movs	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	003b      	movs	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013dc:	0039      	movs	r1, r7
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_TIM2_Init+0xbc>)
 80013e0:	2208      	movs	r2, #8
 80013e2:	0018      	movs	r0, r3
 80013e4:	f004 f862 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 80013e8:	1e03      	subs	r3, r0, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013ec:	f000 fa6a 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <MX_TIM2_Init+0xbc>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fc98 	bl	8001d28 <HAL_TIM_MspPostInit>

}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b00a      	add	sp, #40	@ 0x28
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000023c 	.word	0x2000023c

08001404 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800140a:	231c      	movs	r3, #28
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	0018      	movs	r0, r3
 8001410:	2314      	movs	r3, #20
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f007 fbbb 	bl	8008b90 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800141a:	230c      	movs	r3, #12
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	0018      	movs	r0, r3
 8001420:	2310      	movs	r3, #16
 8001422:	001a      	movs	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	f007 fbb3 	bl	8008b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	003b      	movs	r3, r7
 800142c:	0018      	movs	r0, r3
 800142e:	230c      	movs	r3, #12
 8001430:	001a      	movs	r2, r3
 8001432:	2100      	movs	r1, #0
 8001434:	f007 fbac 	bl	8008b90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001438:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <MX_TIM3_Init+0x114>)
 800143a:	4a38      	ldr	r2, [pc, #224]	@ (800151c <MX_TIM3_Init+0x118>)
 800143c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <MX_TIM3_Init+0x114>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <MX_TIM3_Init+0x114>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800144a:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <MX_TIM3_Init+0x114>)
 800144c:	4a34      	ldr	r2, [pc, #208]	@ (8001520 <MX_TIM3_Init+0x11c>)
 800144e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <MX_TIM3_Init+0x114>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <MX_TIM3_Init+0x114>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800145c:	4b2e      	ldr	r3, [pc, #184]	@ (8001518 <MX_TIM3_Init+0x114>)
 800145e:	0018      	movs	r0, r3
 8001460:	f003 fe20 	bl	80050a4 <HAL_TIM_IC_Init>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001468:	f000 fa2c 	bl	80018c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800146c:	211c      	movs	r1, #28
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2204      	movs	r2, #4
 8001472:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2260      	movs	r2, #96	@ 0x60
 8001478:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800148c:	187a      	adds	r2, r7, r1
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_TIM3_Init+0x114>)
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f004 fa34 	bl	8005900 <HAL_TIM_SlaveConfigSynchro>
 8001498:	1e03      	subs	r3, r0, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800149c:	f000 fa12 	bl	80018c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014a0:	210c      	movs	r1, #12
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2202      	movs	r2, #2
 80014a6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2202      	movs	r2, #2
 80014ac:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ba:	1879      	adds	r1, r7, r1
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_TIM3_Init+0x114>)
 80014be:	2200      	movs	r2, #0
 80014c0:	0018      	movs	r0, r3
 80014c2:	f003 ff4f 	bl	8005364 <HAL_TIM_IC_ConfigChannel>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80014ca:	f000 f9fb 	bl	80018c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ce:	210c      	movs	r1, #12
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2201      	movs	r2, #1
 80014da:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014dc:	1879      	adds	r1, r7, r1
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_TIM3_Init+0x114>)
 80014e0:	2204      	movs	r2, #4
 80014e2:	0018      	movs	r0, r3
 80014e4:	f003 ff3e 	bl	8005364 <HAL_TIM_IC_ConfigChannel>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014ec:	f000 f9ea 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	003b      	movs	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	003b      	movs	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fc:	003a      	movs	r2, r7
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_TIM3_Init+0x114>)
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f005 f81a 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800150c:	f000 f9da 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001510:	46c0      	nop			@ (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b00c      	add	sp, #48	@ 0x30
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000288 	.word	0x20000288
 800151c:	40000400 	.word	0x40000400
 8001520:	0000ffff 	.word	0x0000ffff

08001524 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	0018      	movs	r0, r3
 800152e:	230c      	movs	r3, #12
 8001530:	001a      	movs	r2, r3
 8001532:	2100      	movs	r1, #0
 8001534:	f007 fb2c 	bl	8008b90 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_TIM6_Init+0x6c>)
 800153a:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <MX_TIM6_Init+0x70>)
 800153c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_TIM6_Init+0x6c>)
 8001540:	2210      	movs	r2, #16
 8001542:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_TIM6_Init+0x6c>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_TIM6_Init+0x6c>)
 800154c:	22fa      	movs	r2, #250	@ 0xfa
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_TIM6_Init+0x6c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <MX_TIM6_Init+0x6c>)
 800155a:	0018      	movs	r0, r3
 800155c:	f003 fbac 	bl	8004cb8 <HAL_TIM_Base_Init>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001564:	f000 f9ae 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2220      	movs	r2, #32
 800156c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001574:	1d3a      	adds	r2, r7, #4
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_TIM6_Init+0x6c>)
 8001578:	0011      	movs	r1, r2
 800157a:	0018      	movs	r0, r3
 800157c:	f004 ffde 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001584:	f000 f99e 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200002d4 	.word	0x200002d4
 8001594:	40001000 	.word	0x40001000

08001598 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	@ 0x50
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800159e:	2334      	movs	r3, #52	@ 0x34
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	0018      	movs	r0, r3
 80015a4:	231c      	movs	r3, #28
 80015a6:	001a      	movs	r2, r3
 80015a8:	2100      	movs	r1, #0
 80015aa:	f007 faf1 	bl	8008b90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ae:	003b      	movs	r3, r7
 80015b0:	0018      	movs	r0, r3
 80015b2:	2334      	movs	r3, #52	@ 0x34
 80015b4:	001a      	movs	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	f007 faea 	bl	8008b90 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015bc:	4b37      	ldr	r3, [pc, #220]	@ (800169c <MX_TIM16_Init+0x104>)
 80015be:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <MX_TIM16_Init+0x108>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80015c2:	4b36      	ldr	r3, [pc, #216]	@ (800169c <MX_TIM16_Init+0x104>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b34      	ldr	r3, [pc, #208]	@ (800169c <MX_TIM16_Init+0x104>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <MX_TIM16_Init+0x104>)
 80015d0:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <MX_TIM16_Init+0x10c>)
 80015d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <MX_TIM16_Init+0x104>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015da:	4b30      	ldr	r3, [pc, #192]	@ (800169c <MX_TIM16_Init+0x104>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <MX_TIM16_Init+0x104>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MX_TIM16_Init+0x104>)
 80015e8:	0018      	movs	r0, r3
 80015ea:	f003 fb65 	bl	8004cb8 <HAL_TIM_Base_Init>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80015f2:	f000 f967 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <MX_TIM16_Init+0x104>)
 80015f8:	0018      	movs	r0, r3
 80015fa:	f003 fc11 	bl	8004e20 <HAL_TIM_PWM_Init>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001602:	f000 f95f 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2134      	movs	r1, #52	@ 0x34
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2260      	movs	r2, #96	@ 0x60
 800160c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1879      	adds	r1, r7, r1
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_TIM16_Init+0x104>)
 8001636:	2200      	movs	r2, #0
 8001638:	0018      	movs	r0, r3
 800163a:	f003 ff37 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001642:	f000 f93f 	bl	80018c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001646:	003b      	movs	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164c:	003b      	movs	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001652:	003b      	movs	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001658:	003b      	movs	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165e:	003b      	movs	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001664:	003b      	movs	r3, r7
 8001666:	2280      	movs	r2, #128	@ 0x80
 8001668:	0192      	lsls	r2, r2, #6
 800166a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800166c:	003b      	movs	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001672:	003b      	movs	r3, r7
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001678:	003a      	movs	r2, r7
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_TIM16_Init+0x104>)
 800167c:	0011      	movs	r1, r2
 800167e:	0018      	movs	r0, r3
 8001680:	f004 ffca 	bl	8006618 <HAL_TIMEx_ConfigBreakDeadTime>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001688:	f000 f91c 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <MX_TIM16_Init+0x104>)
 800168e:	0018      	movs	r0, r3
 8001690:	f000 fb4a 	bl	8001d28 <HAL_TIM_MspPostInit>

}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b014      	add	sp, #80	@ 0x50
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000320 	.word	0x20000320
 80016a0:	40014400 	.word	0x40014400
 80016a4:	0000ffff 	.word	0x0000ffff

080016a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016ae:	4a24      	ldr	r2, [pc, #144]	@ (8001740 <MX_USART2_UART_Init+0x98>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016b4:	22e1      	movs	r2, #225	@ 0xe1
 80016b6:	0252      	lsls	r2, r2, #9
 80016b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <MX_USART2_UART_Init+0x94>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f005 f844 	bl	8006780 <HAL_UART_Init>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016fc:	f000 f8e2 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <MX_USART2_UART_Init+0x94>)
 8001702:	2100      	movs	r1, #0
 8001704:	0018      	movs	r0, r3
 8001706:	f007 f891 	bl	800882c <HAL_UARTEx_SetTxFifoThreshold>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800170e:	f000 f8d9 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <MX_USART2_UART_Init+0x94>)
 8001714:	2100      	movs	r1, #0
 8001716:	0018      	movs	r0, r3
 8001718:	f007 f8c8 	bl	80088ac <HAL_UARTEx_SetRxFifoThreshold>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001720:	f000 f8d0 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <MX_USART2_UART_Init+0x94>)
 8001726:	0018      	movs	r0, r3
 8001728:	f007 f846 	bl	80087b8 <HAL_UARTEx_DisableFifoMode>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d001      	beq.n	8001734 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001730:	f000 f8c8 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	2000036c 	.word	0x2000036c
 8001740:	40004400 	.word	0x40004400

08001744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_DMA_Init+0x28>)
 800174c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_DMA_Init+0x28>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <MX_DMA_Init+0x28>)
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	2201      	movs	r2, #1
 800175c:	4013      	ands	r3, r2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	40021000 	.word	0x40021000

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	240c      	movs	r4, #12
 8001778:	193b      	adds	r3, r7, r4
 800177a:	0018      	movs	r0, r3
 800177c:	2314      	movs	r3, #20
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f007 fa05 	bl	8008b90 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <MX_GPIO_Init+0x148>)
 8001788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800178a:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <MX_GPIO_Init+0x148>)
 800178c:	2102      	movs	r1, #2
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	@ 0x34
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <MX_GPIO_Init+0x148>)
 8001794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <MX_GPIO_Init+0x148>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a2:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <MX_GPIO_Init+0x148>)
 80017a4:	2104      	movs	r1, #4
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017aa:	4b43      	ldr	r3, [pc, #268]	@ (80018b8 <MX_GPIO_Init+0x148>)
 80017ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <MX_GPIO_Init+0x148>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ba:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <MX_GPIO_Init+0x148>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017c2:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <MX_GPIO_Init+0x148>)
 80017c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	483a      	ldr	r0, [pc, #232]	@ (80018bc <MX_GPIO_Init+0x14c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	0019      	movs	r1, r3
 80017d8:	f002 fb6d 	bl	8003eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 80017dc:	23a0      	movs	r3, #160	@ 0xa0
 80017de:	05db      	lsls	r3, r3, #23
 80017e0:	2200      	movs	r2, #0
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	0018      	movs	r0, r3
 80017e6:	f002 fb66 	bl	8003eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 80017ea:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	2140      	movs	r1, #64	@ 0x40
 80017f0:	0018      	movs	r0, r3
 80017f2:	f002 fb60 	bl	8003eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCU_Remote_Pin */
  GPIO_InitStruct.Pin = MCU_Remote_Pin;
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	2280      	movs	r2, #128	@ 0x80
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001804:	193b      	adds	r3, r7, r4
 8001806:	2201      	movs	r2, #1
 8001808:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 800180a:	193b      	adds	r3, r7, r4
 800180c:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <MX_GPIO_Init+0x150>)
 800180e:	0019      	movs	r1, r3
 8001810:	0010      	movs	r0, r2
 8001812:	f002 f9cf 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001816:	0021      	movs	r1, r4
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2280      	movs	r2, #128	@ 0x80
 800181c:	0212      	lsls	r2, r2, #8
 800181e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	000c      	movs	r4, r1
 8001822:	193b      	adds	r3, r7, r4
 8001824:	2201      	movs	r2, #1
 8001826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	193b      	adds	r3, r7, r4
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001834:	193b      	adds	r3, r7, r4
 8001836:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <MX_GPIO_Init+0x14c>)
 8001838:	0019      	movs	r1, r3
 800183a:	0010      	movs	r0, r2
 800183c:	f002 f9ba 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_Pin */
  GPIO_InitStruct.Pin = Status_Pin;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2280      	movs	r2, #128	@ 0x80
 8001844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2201      	movs	r2, #1
 800184a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	193b      	adds	r3, r7, r4
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	193b      	adds	r3, r7, r4
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 8001858:	193a      	adds	r2, r7, r4
 800185a:	23a0      	movs	r3, #160	@ 0xa0
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f002 f9a7 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 8001866:	193b      	adds	r3, r7, r4
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 800187a:	193a      	adds	r2, r7, r4
 800187c:	23a0      	movs	r3, #160	@ 0xa0
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	0011      	movs	r1, r2
 8001882:	0018      	movs	r0, r3
 8001884:	f002 f996 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UV_LED_Pin */
  GPIO_InitStruct.Pin = UV_LED_Pin;
 8001888:	0021      	movs	r1, r4
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2240      	movs	r2, #64	@ 0x40
 800188e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2201      	movs	r2, #1
 8001894:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80018a6:	0019      	movs	r1, r3
 80018a8:	0010      	movs	r0, r2
 80018aa:	f002 f983 	bl	8003bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b009      	add	sp, #36	@ 0x24
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	40021000 	.word	0x40021000
 80018bc:	50000800 	.word	0x50000800
 80018c0:	50000400 	.word	0x50000400

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <Error_Handler+0x24>)
 80018d2:	0019      	movs	r1, r3
 80018d4:	0010      	movs	r0, r2
 80018d6:	f002 fb0b 	bl	8003ef0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80018da:	23fa      	movs	r3, #250	@ 0xfa
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 fcf2 	bl	80022c8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	e7f1      	b.n	80018cc <Error_Handler+0x8>
 80018e8:	50000800 	.word	0x50000800

080018ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x44>)
 80018f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_MspInit+0x44>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_MspInit+0x44>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2201      	movs	r2, #1
 8001904:	4013      	ands	r3, r2
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_MspInit+0x44>)
 800190c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_MspInit+0x44>)
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	0549      	lsls	r1, r1, #21
 8001914:	430a      	orrs	r2, r1
 8001916:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_MspInit+0x44>)
 800191a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	055b      	lsls	r3, r3, #21
 8001920:	4013      	ands	r3, r2
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b099      	sub	sp, #100	@ 0x64
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	234c      	movs	r3, #76	@ 0x4c
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	0018      	movs	r0, r3
 8001942:	2314      	movs	r3, #20
 8001944:	001a      	movs	r2, r3
 8001946:	2100      	movs	r1, #0
 8001948:	f007 f922 	bl	8008b90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	2418      	movs	r4, #24
 800194e:	193b      	adds	r3, r7, r4
 8001950:	0018      	movs	r0, r3
 8001952:	2334      	movs	r3, #52	@ 0x34
 8001954:	001a      	movs	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	f007 f91a 	bl	8008b90 <memset>
  if(hadc->Instance==ADC1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a44      	ldr	r2, [pc, #272]	@ (8001a74 <HAL_ADC_MspInit+0x140>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d000      	beq.n	8001968 <HAL_ADC_MspInit+0x34>
 8001966:	e080      	b.n	8001a6a <HAL_ADC_MspInit+0x136>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001968:	193b      	adds	r3, r7, r4
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	01d2      	lsls	r2, r2, #7
 800196e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	05d2      	lsls	r2, r2, #23
 8001976:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001978:	193b      	adds	r3, r7, r4
 800197a:	0018      	movs	r0, r3
 800197c:	f002 ffe4 	bl	8004948 <HAL_RCCEx_PeriphCLKConfig>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001984:	f7ff ff9e 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001988:	4b3b      	ldr	r3, [pc, #236]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 800198a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	0349      	lsls	r1, r1, #13
 8001992:	430a      	orrs	r2, r1
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
 8001996:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 8001998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	035b      	lsls	r3, r3, #13
 800199e:	4013      	ands	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019a8:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 80019be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 80019c2:	2102      	movs	r1, #2
 80019c4:	430a      	orrs	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_ADC_MspInit+0x144>)
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 80019d4:	244c      	movs	r4, #76	@ 0x4c
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	220b      	movs	r2, #11
 80019da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	2203      	movs	r2, #3
 80019e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	193a      	adds	r2, r7, r4
 80019ea:	23a0      	movs	r3, #160	@ 0xa0
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f002 f8df 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	2203      	movs	r2, #3
 8001a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	193b      	adds	r3, r7, r4
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <HAL_ADC_MspInit+0x148>)
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	0010      	movs	r0, r2
 8001a10:	f002 f8d0 	bl	8003bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a16:	4a1b      	ldr	r2, [pc, #108]	@ (8001a84 <HAL_ADC_MspInit+0x150>)
 8001a18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	0052      	lsls	r2, r2, #1
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	00d2      	lsls	r2, r2, #3
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a44:	2220      	movs	r2, #32
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a50:	0018      	movs	r0, r3
 8001a52:	f001 fe57 	bl	8003704 <HAL_DMA_Init>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001a5a:	f7ff ff33 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a62:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_ADC_MspInit+0x14c>)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b019      	add	sp, #100	@ 0x64
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	40012400 	.word	0x40012400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	50000400 	.word	0x50000400
 8001a80:	20000150 	.word	0x20000150
 8001a84:	40020008 	.word	0x40020008

08001a88 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	240c      	movs	r4, #12
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	0018      	movs	r0, r3
 8001a96:	2314      	movs	r3, #20
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f007 f878 	bl	8008b90 <memset>
  if(hcomp->Instance==COMP2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <HAL_COMP_MspInit+0x60>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_COMP_MspInit+0x64>)
 8001aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aae:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <HAL_COMP_MspInit+0x64>)
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_COMP_MspInit+0x64>)
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	2203      	movs	r2, #3
 8001acc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <HAL_COMP_MspInit+0x68>)
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0010      	movs	r0, r2
 8001adc:	f002 f86a 	bl	8003bb4 <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b009      	add	sp, #36	@ 0x24
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	40010204 	.word	0x40010204
 8001aec:	40021000 	.word	0x40021000
 8001af0:	50000400 	.word	0x50000400

08001af4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <HAL_DAC_MspInit+0x38>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_DAC_MspInit+0x2e>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_DAC_MspInit+0x3c>)
 8001b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_DAC_MspInit+0x3c>)
 8001b0c:	2180      	movs	r1, #128	@ 0x80
 8001b0e:	0589      	lsls	r1, r1, #22
 8001b10:	430a      	orrs	r2, r1
 8001b12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_DAC_MspInit+0x3c>)
 8001b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	059b      	lsls	r3, r3, #22
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b004      	add	sp, #16
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	40007400 	.word	0x40007400
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b099      	sub	sp, #100	@ 0x64
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	234c      	movs	r3, #76	@ 0x4c
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	0018      	movs	r0, r3
 8001b42:	2314      	movs	r3, #20
 8001b44:	001a      	movs	r2, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	f007 f822 	bl	8008b90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	2418      	movs	r4, #24
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	0018      	movs	r0, r3
 8001b52:	2334      	movs	r3, #52	@ 0x34
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f007 f81a 	bl	8008b90 <memset>
  if(htim_pwm->Instance==TIM1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2c      	ldr	r2, [pc, #176]	@ (8001c14 <HAL_TIM_PWM_MspInit+0xe0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d140      	bne.n	8001be8 <HAL_TIM_PWM_MspInit+0xb4>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2280      	movs	r2, #128	@ 0x80
 8001b6a:	0392      	lsls	r2, r2, #14
 8001b6c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2200      	movs	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	0018      	movs	r0, r3
 8001b78:	f002 fee6 	bl	8004948 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	1e03      	subs	r3, r0, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 8001b80:	f7ff fea0 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b84:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	0109      	lsls	r1, r1, #4
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bb8:	214c      	movs	r1, #76	@ 0x4c
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2240      	movs	r2, #64	@ 0x40
 8001bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2212      	movs	r2, #18
 8001bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2201      	movs	r2, #1
 8001bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	187a      	adds	r2, r7, r1
 8001bda:	23a0      	movs	r3, #160	@ 0xa0
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f001 ffe7 	bl	8003bb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001be6:	e011      	b.n	8001c0c <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	05db      	lsls	r3, r3, #23
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10b      	bne.n	8001c0c <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_TIM_PWM_MspInit+0xe4>)
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b019      	add	sp, #100	@ 0x64
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b08b      	sub	sp, #44	@ 0x2c
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	2414      	movs	r4, #20
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	0018      	movs	r0, r3
 8001c2a:	2314      	movs	r3, #20
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	2100      	movs	r1, #0
 8001c30:	f006 ffae 	bl	8008b90 <memset>
  if(htim_ic->Instance==TIM3)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca4 <HAL_TIM_IC_MspInit+0x88>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12d      	bne.n	8001c9a <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c42:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c44:	2102      	movs	r1, #2
 8001c46:	430a      	orrs	r2, r1
 8001c48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_IC_MspInit+0x8c>)
 8001c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8001c6e:	0021      	movs	r1, r4
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2220      	movs	r2, #32
 8001c74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2202      	movs	r2, #2
 8001c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <HAL_TIM_IC_MspInit+0x90>)
 8001c92:	0019      	movs	r1, r3
 8001c94:	0010      	movs	r0, r2
 8001c96:	f001 ff8d 	bl	8003bb4 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b00b      	add	sp, #44	@ 0x2c
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	50000400 	.word	0x50000400

08001cb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_TIM_Base_MspInit+0x6c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10c      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cc2:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_TIM_Base_MspInit+0x70>)
 8001cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_TIM_Base_MspInit+0x70>)
 8001cc8:	2110      	movs	r1, #16
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cce:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_TIM_Base_MspInit+0x70>)
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cda:	e01a      	b.n	8001d12 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a10      	ldr	r2, [pc, #64]	@ (8001d24 <HAL_TIM_Base_MspInit+0x74>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d115      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_TIM_Base_MspInit+0x70>)
 8001ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_TIM_Base_MspInit+0x70>)
 8001cec:	2180      	movs	r1, #128	@ 0x80
 8001cee:	0289      	lsls	r1, r1, #10
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_TIM_Base_MspInit+0x70>)
 8001cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2015      	movs	r0, #21
 8001d08:	f001 fa8c 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001d0c:	2015      	movs	r0, #21
 8001d0e:	f001 fa9e 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	40001000 	.word	0x40001000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40014400 	.word	0x40014400

08001d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b08b      	sub	sp, #44	@ 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	2414      	movs	r4, #20
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	0018      	movs	r0, r3
 8001d36:	2314      	movs	r3, #20
 8001d38:	001a      	movs	r2, r3
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	f006 ff28 	bl	8008b90 <memset>
  if(htim->Instance==TIM1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3e      	ldr	r2, [pc, #248]	@ (8001e40 <HAL_TIM_MspPostInit+0x118>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d124      	bne.n	8001d94 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d56:	4b3b      	ldr	r3, [pc, #236]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	0021      	movs	r1, r4
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2202      	movs	r2, #2
 8001d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	2202      	movs	r2, #2
 8001d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001d84:	187a      	adds	r2, r7, r1
 8001d86:	23a0      	movs	r3, #160	@ 0xa0
 8001d88:	05db      	lsls	r3, r3, #23
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f001 ff11 	bl	8003bb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM16_MspPostInit 1 */

    /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001d92:	e050      	b.n	8001e36 <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	05db      	lsls	r3, r3, #23
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d122      	bne.n	8001de6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da4:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001da6:	2104      	movs	r1, #4
 8001da8:	430a      	orrs	r2, r1
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dac:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	2204      	movs	r2, #4
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001db8:	2114      	movs	r1, #20
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2240      	movs	r2, #64	@ 0x40
 8001dbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_TIM_MspPostInit+0x120>)
 8001ddc:	0019      	movs	r1, r3
 8001dde:	0010      	movs	r0, r2
 8001de0:	f001 fee8 	bl	8003bb4 <HAL_GPIO_Init>
}
 8001de4:	e027      	b.n	8001e36 <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM16)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a18      	ldr	r2, [pc, #96]	@ (8001e4c <HAL_TIM_MspPostInit+0x124>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d122      	bne.n	8001e36 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001df6:	2102      	movs	r1, #2
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_TIM_MspPostInit+0x11c>)
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MASK_Pin;
 8001e08:	2114      	movs	r1, #20
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	0052      	lsls	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2202      	movs	r2, #2
 8001e16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	2202      	movs	r2, #2
 8001e28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MASK_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <HAL_TIM_MspPostInit+0x128>)
 8001e2e:	0019      	movs	r1, r3
 8001e30:	0010      	movs	r0, r2
 8001e32:	f001 febf 	bl	8003bb4 <HAL_GPIO_Init>
}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b00b      	add	sp, #44	@ 0x2c
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	50000800 	.word	0x50000800
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	50000400 	.word	0x50000400

08001e54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b097      	sub	sp, #92	@ 0x5c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	2344      	movs	r3, #68	@ 0x44
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	0018      	movs	r0, r3
 8001e62:	2314      	movs	r3, #20
 8001e64:	001a      	movs	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f006 fe92 	bl	8008b90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e6c:	2410      	movs	r4, #16
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	0018      	movs	r0, r3
 8001e72:	2334      	movs	r3, #52	@ 0x34
 8001e74:	001a      	movs	r2, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	f006 fe8a 	bl	8008b90 <memset>
  if(huart->Instance==USART2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d13e      	bne.n	8001f04 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	2208      	movs	r2, #8
 8001e90:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	0018      	movs	r0, r3
 8001e96:	f002 fd57 	bl	8004948 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e9e:	f7ff fd11 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	0289      	lsls	r1, r1, #10
 8001eac:	430a      	orrs	r2, r1
 8001eae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec2:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001ed6:	2144      	movs	r1, #68	@ 0x44
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	4a0e      	ldr	r2, [pc, #56]	@ (8001f14 <HAL_UART_MspInit+0xc0>)
 8001edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	187a      	adds	r2, r7, r1
 8001ef8:	23a0      	movs	r3, #160	@ 0xa0
 8001efa:	05db      	lsls	r3, r3, #23
 8001efc:	0011      	movs	r1, r2
 8001efe:	0018      	movs	r0, r3
 8001f00:	f001 fe58 	bl	8003bb4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f04:	46c0      	nop			@ (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b017      	add	sp, #92	@ 0x5c
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	40021000 	.word	0x40021000
 8001f14:	00008004 	.word	0x00008004

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	e7fd      	b.n	8001f1c <NMI_Handler+0x4>

08001f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	e7fd      	b.n	8001f24 <HardFault_Handler+0x4>

08001f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f9a6 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f52:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <DMA1_Channel1_IRQHandler+0xc8>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f001 fd2b 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
  for (iADCchannels = 0; iADCchannels < numberADCchannels; iADCchannels++) {
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e02f      	b.n	8001fc2 <DMA1_Channel1_IRQHandler+0x76>
	    uint32_t old_val = adc_buffer[iADCchannels];
 8001f62:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	001a      	movs	r2, r3
 8001f68:	4b2c      	ldr	r3, [pc, #176]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001f6a:	0052      	lsls	r2, r2, #1
 8001f6c:	5ad3      	ldrh	r3, [r2, r3]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	607b      	str	r3, [r7, #4]
	    uint32_t new_val = adc_DMA[iADCchannels];
 8001f72:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	001a      	movs	r2, r3
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <DMA1_Channel1_IRQHandler+0xd4>)
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	5ad3      	ldrh	r3, [r2, r3]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	603b      	str	r3, [r7, #0]

	    // "second order" EMA
	    old_val = (old_val * 7 + new_val+4) >> 3;  // Weighted average: (old_val * 7/8 + new_val*1/8)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	0013      	movs	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9a      	subs	r2, r3, r2
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	18d3      	adds	r3, r2, r3
 8001f8e:	3304      	adds	r3, #4
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	607b      	str	r3, [r7, #4]
	    old_val = (old_val * 7 + new_val+4) >> 3;  // Weighted average: (old_val * 7/8 + new_val*1/8)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	0013      	movs	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9a      	subs	r2, r3, r2
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	08db      	lsrs	r3, r3, #3
 8001fa4:	607b      	str	r3, [r7, #4]
	    adc_buffer[iADCchannels] = (uint16_t)old_val;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	001a      	movs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001fb2:	0052      	lsls	r2, r2, #1
 8001fb4:	52d1      	strh	r1, [r2, r3]
  for (iADCchannels = 0; iADCchannels < numberADCchannels; iADCchannels++) {
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <DMA1_Channel1_IRQHandler+0xcc>)
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <DMA1_Channel1_IRQHandler+0xd8>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d3c8      	bcc.n	8001f62 <DMA1_Channel1_IRQHandler+0x16>
//	  weightedOldValue = (adc_buffer[iADCchannels][0]*3)>>2; // multiply with 3/4
//	  adc_buffer[iADCchannels][1] = currentMeasurement + weightedOldValue; // new averaged value
//	  adc_buffer[iADCchannels][0] = adc_buffer[iADCchannels][1]; // transfer value from current to old
  }

	adc_24V = adc_buffer[0]; // 4095 = 36.3 V
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <DMA1_Channel1_IRQHandler+0xdc>)
 8001fd8:	801a      	strh	r2, [r3, #0]
	adc_tempMOSFET = adc_buffer[1]; // 2482 = 2V = 90°C
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001fdc:	885b      	ldrh	r3, [r3, #2]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <DMA1_Channel1_IRQHandler+0xe0>)
 8001fe2:	801a      	strh	r2, [r3, #0]
	adc_uSenseLamp = adc_buffer[2];
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <DMA1_Channel1_IRQHandler+0xe4>)
 8001fec:	801a      	strh	r2, [r3, #0]
	adc_iSenseLamp = adc_buffer[3];
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001ff0:	88db      	ldrh	r3, [r3, #6]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <DMA1_Channel1_IRQHandler+0xe8>)
 8001ff6:	801a      	strh	r2, [r3, #0]
	adc_lampIntensity = adc_buffer[4];
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8001ffa:	891b      	ldrh	r3, [r3, #8]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <DMA1_Channel1_IRQHandler+0xec>)
 8002000:	801a      	strh	r2, [r3, #0]
	adc_iSenseIn = adc_buffer[5]; // 2707 = 24V,  4095 = 0.825 A
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <DMA1_Channel1_IRQHandler+0xd0>)
 8002004:	895b      	ldrh	r3, [r3, #10]
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <DMA1_Channel1_IRQHandler+0xf0>)
 800200a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000150 	.word	0x20000150
 8002018:	2000045e 	.word	0x2000045e
 800201c:	200000d4 	.word	0x200000d4
 8002020:	200000c8 	.word	0x200000c8
 8002024:	20000000 	.word	0x20000000
 8002028:	200000e0 	.word	0x200000e0
 800202c:	200000e2 	.word	0x200000e2
 8002030:	200000e4 	.word	0x200000e4
 8002034:	200000e6 	.word	0x200000e6
 8002038:	200000e8 	.word	0x200000e8
 800203c:	200000ea 	.word	0x200000ea

08002040 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <TIM3_IRQHandler+0x14>)
 8002046:	0018      	movs	r0, r3
 8002048:	f003 f884 	bl	8005154 <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	20000288 	.word	0x20000288

08002058 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 800205e:	0018      	movs	r0, r3
 8002060:	f003 f878 	bl	8005154 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 8002066:	0018      	movs	r0, r3
 8002068:	f001 f988 	bl	800337c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002074:	881a      	ldrh	r2, [r3, #0]
 8002076:	23fa      	movs	r3, #250	@ 0xfa
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	429a      	cmp	r2, r3
 800207c:	d206      	bcs.n	800208c <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002088:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800208a:	e00b      	b.n	80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	23fa      	movs	r3, #250	@ 0xfa
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d305      	bcc.n	80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
}
 80020a4:	46c0      	nop			@ (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	200002d4 	.word	0x200002d4
 80020b0:	200001dc 	.word	0x200001dc
 80020b4:	200000c5 	.word	0x200000c5
 80020b8:	2000045c 	.word	0x2000045c
 80020bc:	200000c6 	.word	0x200000c6

080020c0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <TIM16_IRQHandler+0x14>)
 80020c6:	0018      	movs	r0, r3
 80020c8:	f003 f844 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	20000320 	.word	0x20000320

080020d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <USART2_IRQHandler+0x14>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f004 fca6 	bl	8006a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 80020e4:	46c0      	nop			@ (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	2000036c 	.word	0x2000036c

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	18d3      	adds	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f006 fd3e 	bl	8008ba0 <__errno>
 8002124:	0003      	movs	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	2301      	movs	r3, #1
 800212c:	425b      	negs	r3, r3
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	18d2      	adds	r2, r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b006      	add	sp, #24
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20009000 	.word	0x20009000
 8002150:	00000400 	.word	0x00000400
 8002154:	20000460 	.word	0x20000460
 8002158:	200005b0 	.word	0x200005b0

0800215c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002168:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800216a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800216c:	f7ff fff6 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002170:	480c      	ldr	r0, [pc, #48]	@ (80021a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002172:	490d      	ldr	r1, [pc, #52]	@ (80021a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <LoopForever+0xe>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002188:	4c0a      	ldr	r4, [pc, #40]	@ (80021b4 <LoopForever+0x16>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002196:	f006 fd09 	bl	8008bac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800219a:	f7fe fc01 	bl	80009a0 <main>

0800219e <LoopForever>:

LoopForever:
  b LoopForever
 800219e:	e7fe      	b.n	800219e <LoopForever>
  ldr   r0, =_estack
 80021a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80021ac:	080097c8 	.word	0x080097c8
  ldr r2, =_sbss
 80021b0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80021b4:	200005b0 	.word	0x200005b0

080021b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_COMP_IRQHandler>
	...

080021bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_Init+0x3c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Init+0x3c>)
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	0049      	lsls	r1, r1, #1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d6:	2003      	movs	r0, #3
 80021d8:	f000 f810 	bl	80021fc <HAL_InitTick>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d003      	beq.n	80021e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e001      	b.n	80021ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff fb80 	bl	80018ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	781b      	ldrb	r3, [r3, #0]
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_InitTick+0x88>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02b      	beq.n	800226c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_InitTick+0x8c>)
 8002216:	681c      	ldr	r4, [r3, #0]
 8002218:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <HAL_InitTick+0x88>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	0019      	movs	r1, r3
 800221e:	23fa      	movs	r3, #250	@ 0xfa
 8002220:	0098      	lsls	r0, r3, #2
 8002222:	f7fd ff81 	bl	8000128 <__udivsi3>
 8002226:	0003      	movs	r3, r0
 8002228:	0019      	movs	r1, r3
 800222a:	0020      	movs	r0, r4
 800222c:	f7fd ff7c 	bl	8000128 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	0018      	movs	r0, r3
 8002234:	f001 f81b 	bl	800326e <HAL_SYSTICK_Config>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d112      	bne.n	8002262 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d80a      	bhi.n	8002258 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	2301      	movs	r3, #1
 8002246:	425b      	negs	r3, r3
 8002248:	2200      	movs	r2, #0
 800224a:	0018      	movs	r0, r3
 800224c:	f000 ffea 	bl	8003224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_InitTick+0x90>)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e00d      	b.n	8002274 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002258:	230f      	movs	r3, #15
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e008      	b.n	8002274 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002262:	230f      	movs	r3, #15
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e003      	b.n	8002274 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800226c:	230f      	movs	r3, #15
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b005      	add	sp, #20
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	20000050 	.word	0x20000050
 8002288:	20000048 	.word	0x20000048
 800228c:	2000004c 	.word	0x2000004c

08002290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_IncTick+0x1c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_IncTick+0x20>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	18d2      	adds	r2, r2, r3
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_IncTick+0x20>)
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	20000050 	.word	0x20000050
 80022b0:	20000464 	.word	0x20000464

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b02      	ldr	r3, [pc, #8]	@ (80022c4 <HAL_GetTick+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	20000464 	.word	0x20000464

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_Delay+0x44>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	001a      	movs	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	f7ff ffe0 	bl	80022b4 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <HAL_Delay+0x28>
  {
  }
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	20000050 	.word	0x20000050

08002310 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002320:	401a      	ands	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	fe3fffff 	.word	0xfe3fffff

08002338 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	23e0      	movs	r3, #224	@ 0xe0
 8002346:	045b      	lsls	r3, r3, #17
 8002348:	4013      	ands	r3, r2
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}

08002352 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	2104      	movs	r1, #4
 8002366:	400a      	ands	r2, r1
 8002368:	2107      	movs	r1, #7
 800236a:	4091      	lsls	r1, r2
 800236c:	000a      	movs	r2, r1
 800236e:	43d2      	mvns	r2, r2
 8002370:	401a      	ands	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2104      	movs	r1, #4
 8002376:	400b      	ands	r3, r1
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4099      	lsls	r1, r3
 800237c:	000b      	movs	r3, r1
 800237e:	431a      	orrs	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002384:	46c0      	nop			@ (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bd80      	pop	{r7, pc}

0800238c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	2104      	movs	r1, #4
 800239e:	400a      	ands	r2, r1
 80023a0:	2107      	movs	r1, #7
 80023a2:	4091      	lsls	r1, r2
 80023a4:	000a      	movs	r2, r1
 80023a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2104      	movs	r1, #4
 80023ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023ae:	40da      	lsrs	r2, r3
 80023b0:	0013      	movs	r3, r2
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}

080023ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	211f      	movs	r1, #31
 80023ce:	400a      	ands	r2, r1
 80023d0:	210f      	movs	r1, #15
 80023d2:	4091      	lsls	r1, r2
 80023d4:	000a      	movs	r2, r1
 80023d6:	43d2      	mvns	r2, r2
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	210f      	movs	r1, #15
 80023e0:	4019      	ands	r1, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	201f      	movs	r0, #31
 80023e6:	4003      	ands	r3, r0
 80023e8:	4099      	lsls	r1, r3
 80023ea:	000b      	movs	r3, r1
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b004      	add	sp, #16
 80023f8:	bd80      	pop	{r7, pc}

080023fa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	035b      	lsls	r3, r3, #13
 800240c:	0b5b      	lsrs	r3, r3, #13
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	0352      	lsls	r2, r2, #13
 800242e:	0b52      	lsrs	r2, r2, #13
 8002430:	43d2      	mvns	r2, r2
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002438:	46c0      	nop			@ (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	0212      	lsls	r2, r2, #8
 8002454:	43d2      	mvns	r2, r2
 8002456:	401a      	ands	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	400b      	ands	r3, r1
 8002460:	4904      	ldr	r1, [pc, #16]	@ (8002474 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002462:	400b      	ands	r3, r1
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	07ffff00 	.word	0x07ffff00

08002478 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a05      	ldr	r2, [pc, #20]	@ (800249c <LL_ADC_EnableInternalRegulator+0x24>)
 8002486:	4013      	ands	r3, r2
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	0552      	lsls	r2, r2, #21
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b002      	add	sp, #8
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	6fffffe8 	.word	0x6fffffe8

080024a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	055b      	lsls	r3, r3, #21
 80024b0:	401a      	ands	r2, r3
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d101      	bne.n	80024be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <LL_ADC_IsEnabled+0x18>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <LL_ADC_IsEnabled+0x1a>
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}

080024ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2204      	movs	r2, #4
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d101      	bne.n	8002502 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	231f      	movs	r3, #31
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e17f      	b.n	8002832 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff f9f9 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2254      	movs	r2, #84	@ 0x54
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ffa3 	bl	80024a0 <LL_ADC_IsInternalRegulatorEnabled>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d115      	bne.n	800258a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0018      	movs	r0, r3
 8002564:	f7ff ff88 	bl	8002478 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002568:	4bb4      	ldr	r3, [pc, #720]	@ (800283c <HAL_ADC_Init+0x330>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	49b4      	ldr	r1, [pc, #720]	@ (8002840 <HAL_ADC_Init+0x334>)
 800256e:	0018      	movs	r0, r3
 8002570:	f7fd fdda 	bl	8000128 <__udivsi3>
 8002574:	0003      	movs	r3, r0
 8002576:	3301      	adds	r3, #1
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800257c:	e002      	b.n	8002584 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3b01      	subs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0018      	movs	r0, r3
 8002590:	f7ff ff86 	bl	80024a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d10f      	bne.n	80025b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	2210      	movs	r2, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2201      	movs	r2, #1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025b0:	231f      	movs	r3, #31
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff ff94 	bl	80024ea <LL_ADC_REG_IsConversionOngoing>
 80025c2:	0003      	movs	r3, r0
 80025c4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	2210      	movs	r2, #16
 80025cc:	4013      	ands	r3, r2
 80025ce:	d000      	beq.n	80025d2 <HAL_ADC_Init+0xc6>
 80025d0:	e122      	b.n	8002818 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d000      	beq.n	80025da <HAL_ADC_Init+0xce>
 80025d8:	e11e      	b.n	8002818 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	4a99      	ldr	r2, [pc, #612]	@ (8002844 <HAL_ADC_Init+0x338>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	2202      	movs	r2, #2
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff ff6a 	bl	80024c8 <LL_ADC_IsEnabled>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d000      	beq.n	80025fa <HAL_ADC_Init+0xee>
 80025f8:	e0ad      	b.n	8002756 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7e1b      	ldrb	r3, [r3, #24]
 8002602:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002604:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7e5b      	ldrb	r3, [r3, #25]
 800260a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800260c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7e9b      	ldrb	r3, [r3, #26]
 8002612:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002614:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_ADC_Init+0x118>
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	e000      	b.n	8002626 <HAL_ADC_Init+0x11a>
 8002624:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002626:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800262c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da04      	bge.n	8002640 <HAL_ADC_Init+0x134>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	e001      	b.n	8002644 <HAL_ADC_Init+0x138>
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002644:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	212c      	movs	r1, #44	@ 0x2c
 800264a:	5c5b      	ldrb	r3, [r3, r1]
 800264c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800264e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d115      	bne.n	800268c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7e9b      	ldrb	r3, [r3, #26]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	0252      	lsls	r2, r2, #9
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e00b      	b.n	800268c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	2220      	movs	r2, #32
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	2201      	movs	r2, #1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002698:	23e0      	movs	r3, #224	@ 0xe0
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026a2:	4313      	orrs	r3, r2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a65      	ldr	r2, [pc, #404]	@ (8002848 <HAL_ADC_Init+0x33c>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0f9b      	lsrs	r3, r3, #30
 80026c6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026cc:	4313      	orrs	r3, r2
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	223c      	movs	r2, #60	@ 0x3c
 80026d8:	5c9b      	ldrb	r3, [r3, r2]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d111      	bne.n	8002702 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0f9b      	lsrs	r3, r3, #30
 80026e4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026ea:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80026f0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80026f6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	2201      	movs	r2, #1
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a50      	ldr	r2, [pc, #320]	@ (800284c <HAL_ADC_Init+0x340>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	430a      	orrs	r2, r1
 8002716:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	23c0      	movs	r3, #192	@ 0xc0
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	429a      	cmp	r2, r3
 8002722:	d018      	beq.n	8002756 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	05db      	lsls	r3, r3, #23
 800272c:	429a      	cmp	r2, r3
 800272e:	d012      	beq.n	8002756 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	429a      	cmp	r2, r3
 800273a:	d00c      	beq.n	8002756 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800273c:	4b44      	ldr	r3, [pc, #272]	@ (8002850 <HAL_ADC_Init+0x344>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a44      	ldr	r2, [pc, #272]	@ (8002854 <HAL_ADC_Init+0x348>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	23f0      	movs	r3, #240	@ 0xf0
 800274c:	039b      	lsls	r3, r3, #14
 800274e:	401a      	ands	r2, r3
 8002750:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <HAL_ADC_Init+0x344>)
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275e:	001a      	movs	r2, r3
 8002760:	2100      	movs	r1, #0
 8002762:	f7ff fdf6 	bl	8002352 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	493a      	ldr	r1, [pc, #232]	@ (8002858 <HAL_ADC_Init+0x34c>)
 8002770:	001a      	movs	r2, r3
 8002772:	f7ff fdee 	bl	8002352 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2110      	movs	r1, #16
 800278a:	4249      	negs	r1, r1
 800278c:	430a      	orrs	r2, r1
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002790:	e018      	b.n	80027c4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	039b      	lsls	r3, r3, #14
 800279a:	429a      	cmp	r2, r3
 800279c:	d112      	bne.n	80027c4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	221c      	movs	r2, #28
 80027ae:	4013      	ands	r3, r2
 80027b0:	2210      	movs	r2, #16
 80027b2:	4252      	negs	r2, r2
 80027b4:	409a      	lsls	r2, r3
 80027b6:	0011      	movs	r1, r2
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2100      	movs	r1, #0
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff fdde 	bl	800238c <LL_ADC_GetSamplingTimeCommonChannels>
 80027d0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d10b      	bne.n	80027f2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	2203      	movs	r2, #3
 80027e6:	4393      	bics	r3, r2
 80027e8:	2201      	movs	r2, #1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027f0:	e01c      	b.n	800282c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	2212      	movs	r2, #18
 80027f8:	4393      	bics	r3, r2
 80027fa:	2210      	movs	r2, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	2201      	movs	r2, #1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800280e:	231f      	movs	r3, #31
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002816:	e009      	b.n	800282c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	2210      	movs	r2, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002824:	231f      	movs	r3, #31
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800282c:	231f      	movs	r3, #31
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b008      	add	sp, #32
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	20000048 	.word	0x20000048
 8002840:	00030d40 	.word	0x00030d40
 8002844:	fffffefd 	.word	0xfffffefd
 8002848:	ffde0201 	.word	0xffde0201
 800284c:	1ffffc02 	.word	0x1ffffc02
 8002850:	40012708 	.word	0x40012708
 8002854:	ffc3ffff 	.word	0xffc3ffff
 8002858:	07ffff04 	.word	0x07ffff04

0800285c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002866:	2317      	movs	r3, #23
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2254      	movs	r2, #84	@ 0x54
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x24>
 800287c:	2302      	movs	r3, #2
 800287e:	e1c0      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x3a6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2254      	movs	r2, #84	@ 0x54
 8002884:	2101      	movs	r1, #1
 8002886:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0018      	movs	r0, r3
 800288e:	f7ff fe2c 	bl	80024ea <LL_ADC_REG_IsConversionOngoing>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d000      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x3c>
 8002896:	e1a3      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d100      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x46>
 80028a0:	e143      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028b2:	4ac1      	ldr	r2, [pc, #772]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x35c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0019      	movs	r1, r3
 80028c2:	0010      	movs	r0, r2
 80028c4:	f7ff fd99 	bl	80023fa <LL_ADC_REG_SetSequencerChAdd>
 80028c8:	e0c9      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	211f      	movs	r1, #31
 80028d4:	400b      	ands	r3, r1
 80028d6:	210f      	movs	r1, #15
 80028d8:	4099      	lsls	r1, r3
 80028da:	000b      	movs	r3, r1
 80028dc:	43db      	mvns	r3, r3
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	035b      	lsls	r3, r3, #13
 80028e8:	0b5b      	lsrs	r3, r3, #13
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x9c>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	221f      	movs	r2, #31
 80028f4:	4013      	ands	r3, r2
 80028f6:	e098      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	4013      	ands	r3, r2
 8002900:	d000      	beq.n	8002904 <HAL_ADC_ConfigChannel+0xa8>
 8002902:	e091      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1cc>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d000      	beq.n	8002910 <HAL_ADC_ConfigChannel+0xb4>
 800290e:	e089      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x1c8>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2204      	movs	r2, #4
 8002916:	4013      	ands	r3, r2
 8002918:	d000      	beq.n	800291c <HAL_ADC_ConfigChannel+0xc0>
 800291a:	e081      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x1c4>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2208      	movs	r2, #8
 8002922:	4013      	ands	r3, r2
 8002924:	d000      	beq.n	8002928 <HAL_ADC_ConfigChannel+0xcc>
 8002926:	e079      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x1c0>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2210      	movs	r2, #16
 800292e:	4013      	ands	r3, r2
 8002930:	d000      	beq.n	8002934 <HAL_ADC_ConfigChannel+0xd8>
 8002932:	e071      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1bc>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2220      	movs	r2, #32
 800293a:	4013      	ands	r3, r2
 800293c:	d000      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xe4>
 800293e:	e069      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x1b8>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2240      	movs	r2, #64	@ 0x40
 8002946:	4013      	ands	r3, r2
 8002948:	d000      	beq.n	800294c <HAL_ADC_ConfigChannel+0xf0>
 800294a:	e061      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x1b4>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	4013      	ands	r3, r2
 8002954:	d000      	beq.n	8002958 <HAL_ADC_ConfigChannel+0xfc>
 8002956:	e059      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x1b0>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4013      	ands	r3, r2
 8002962:	d151      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1ac>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d149      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1a8>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4013      	ands	r3, r2
 800297a:	d141      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1a4>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	4013      	ands	r3, r2
 8002986:	d139      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1a0>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	015b      	lsls	r3, r3, #5
 8002990:	4013      	ands	r3, r2
 8002992:	d131      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x19c>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	019b      	lsls	r3, r3, #6
 800299c:	4013      	ands	r3, r2
 800299e:	d129      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x198>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	01db      	lsls	r3, r3, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	d121      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x194>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	4013      	ands	r3, r2
 80029b6:	d119      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x190>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	4013      	ands	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x18c>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	029b      	lsls	r3, r3, #10
 80029cc:	4013      	ands	r3, r2
 80029ce:	d109      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x188>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	02db      	lsls	r3, r3, #11
 80029d8:	4013      	ands	r3, r2
 80029da:	d001      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x184>
 80029dc:	2312      	movs	r3, #18
 80029de:	e024      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029e0:	2300      	movs	r3, #0
 80029e2:	e022      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029e4:	2311      	movs	r3, #17
 80029e6:	e020      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029e8:	2310      	movs	r3, #16
 80029ea:	e01e      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029ec:	230f      	movs	r3, #15
 80029ee:	e01c      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029f0:	230e      	movs	r3, #14
 80029f2:	e01a      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029f4:	230d      	movs	r3, #13
 80029f6:	e018      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029f8:	230c      	movs	r3, #12
 80029fa:	e016      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 80029fc:	230b      	movs	r3, #11
 80029fe:	e014      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a00:	230a      	movs	r3, #10
 8002a02:	e012      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a04:	2309      	movs	r3, #9
 8002a06:	e010      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a08:	2308      	movs	r3, #8
 8002a0a:	e00e      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	e00c      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a10:	2306      	movs	r3, #6
 8002a12:	e00a      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a14:	2305      	movs	r3, #5
 8002a16:	e008      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	e006      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e004      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e002      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x1ce>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6852      	ldr	r2, [r2, #4]
 8002a2e:	201f      	movs	r0, #31
 8002a30:	4002      	ands	r2, r0
 8002a32:	4093      	lsls	r3, r2
 8002a34:	000a      	movs	r2, r1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d808      	bhi.n	8002a5e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	001a      	movs	r2, r3
 8002a5a:	f7ff fcae 	bl	80023ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	f7ff fce8 	bl	8002440 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db00      	blt.n	8002a7a <HAL_ADC_ConfigChannel+0x21e>
 8002a78:	e0bc      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a7a:	4b50      	ldr	r3, [pc, #320]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff fc5b 	bl	8002338 <LL_ADC_GetCommonPathInternalCh>
 8002a82:	0003      	movs	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x364>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d122      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a98:	d11d      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2280      	movs	r2, #128	@ 0x80
 8002a9e:	0412      	lsls	r2, r2, #16
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	4a46      	ldr	r2, [pc, #280]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	f7ff fc32 	bl	8002310 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aac:	4b45      	ldr	r3, [pc, #276]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x368>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4945      	ldr	r1, [pc, #276]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x36c>)
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7fd fb38 	bl	8000128 <__udivsi3>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	0013      	movs	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	189b      	adds	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f9      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ad4:	e08e      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3c      	ldr	r2, [pc, #240]	@ (8002bcc <HAL_ADC_ConfigChannel+0x370>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10e      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	045b      	lsls	r3, r3, #17
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d109      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	0452      	lsls	r2, r2, #17
 8002af0:	4313      	orrs	r3, r2
 8002af2:	4a32      	ldr	r2, [pc, #200]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f7ff fc0a 	bl	8002310 <LL_ADC_SetCommonPathInternalCh>
 8002afc:	e07a      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a33      	ldr	r2, [pc, #204]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x374>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d000      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x2ae>
 8002b08:	e074      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	03db      	lsls	r3, r3, #15
 8002b10:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b12:	d000      	beq.n	8002b16 <HAL_ADC_ConfigChannel+0x2ba>
 8002b14:	e06e      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2280      	movs	r2, #128	@ 0x80
 8002b1a:	03d2      	lsls	r2, r2, #15
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	4a27      	ldr	r2, [pc, #156]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002b20:	0019      	movs	r1, r3
 8002b22:	0010      	movs	r0, r2
 8002b24:	f7ff fbf4 	bl	8002310 <LL_ADC_SetCommonPathInternalCh>
 8002b28:	e064      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d004      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x35c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f7ff fc66 	bl	800241c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da4d      	bge.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b58:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff fbec 	bl	8002338 <LL_ADC_GetCommonPathInternalCh>
 8002b60:	0003      	movs	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a15      	ldr	r2, [pc, #84]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x364>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x378>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	4a11      	ldr	r2, [pc, #68]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f7ff fbc9 	bl	8002310 <LL_ADC_SetCommonPathInternalCh>
 8002b7e:	e039      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_ADC_ConfigChannel+0x370>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x37c>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002b92:	0019      	movs	r1, r3
 8002b94:	0010      	movs	r0, r2
 8002b96:	f7ff fbbb 	bl	8002310 <LL_ADC_SetCommonPathInternalCh>
 8002b9a:	e02b      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x374>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d126      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <HAL_ADC_ConfigChannel+0x380>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	4a03      	ldr	r2, [pc, #12]	@ (8002bbc <HAL_ADC_ConfigChannel+0x360>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f7ff fbad 	bl	8002310 <LL_ADC_SetCommonPathInternalCh>
 8002bb6:	e01d      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x398>
 8002bb8:	80000004 	.word	0x80000004
 8002bbc:	40012708 	.word	0x40012708
 8002bc0:	b0001000 	.word	0xb0001000
 8002bc4:	20000048 	.word	0x20000048
 8002bc8:	00030d40 	.word	0x00030d40
 8002bcc:	b8004000 	.word	0xb8004000
 8002bd0:	b4002000 	.word	0xb4002000
 8002bd4:	ff7fffff 	.word	0xff7fffff
 8002bd8:	feffffff 	.word	0xfeffffff
 8002bdc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	2220      	movs	r2, #32
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002bec:	2317      	movs	r3, #23
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2254      	movs	r2, #84	@ 0x54
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bfc:	2317      	movs	r3, #23
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	781b      	ldrb	r3, [r3, #0]
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b006      	add	sp, #24
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			@ (mov r8, r8)

08002c0c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c14:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <LL_EXTI_EnableIT_0_31+0x20>)
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	58d2      	ldr	r2, [r2, r3]
 8002c1a:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <LL_EXTI_EnableIT_0_31+0x20>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	2280      	movs	r2, #128	@ 0x80
 8002c22:	508b      	str	r3, [r1, r2]
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021800 	.word	0x40021800

08002c30 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002c38:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	58d3      	ldr	r3, [r2, r3]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	43d2      	mvns	r2, r2
 8002c42:	4904      	ldr	r1, [pc, #16]	@ (8002c54 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	2280      	movs	r2, #128	@ 0x80
 8002c48:	508b      	str	r3, [r1, r2]
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	40021800 	.word	0x40021800

08002c58 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002c60:	4a05      	ldr	r2, [pc, #20]	@ (8002c78 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c62:	2384      	movs	r3, #132	@ 0x84
 8002c64:	58d2      	ldr	r2, [r2, r3]
 8002c66:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	2284      	movs	r2, #132	@ 0x84
 8002c6e:	508b      	str	r3, [r1, r2]

}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021800 	.word	0x40021800

08002c7c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002c84:	4a06      	ldr	r2, [pc, #24]	@ (8002ca0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c86:	2384      	movs	r3, #132	@ 0x84
 8002c88:	58d3      	ldr	r3, [r2, r3]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	43d2      	mvns	r2, r2
 8002c8e:	4904      	ldr	r1, [pc, #16]	@ (8002ca0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	2284      	movs	r2, #132	@ 0x84
 8002c94:	508b      	str	r3, [r1, r2]
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	40021800 	.word	0x40021800

08002ca4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021800 	.word	0x40021800

08002cc4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	43d9      	mvns	r1, r3
 8002cd4:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	40021800 	.word	0x40021800

08002ce8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021800 	.word	0x40021800

08002d08 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	40021800 	.word	0x40021800

08002d2c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	40021800 	.word	0x40021800

08002d48 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	60da      	str	r2, [r3, #12]
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	40021800 	.word	0x40021800

08002d64 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	211f      	movs	r1, #31
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e13d      	b.n	8003002 <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0fdb      	lsrs	r3, r3, #31
 8002d8e:	07da      	lsls	r2, r3, #31
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d104      	bne.n	8002da2 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8002d98:	231f      	movs	r3, #31
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e12f      	b.n	8003002 <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2229      	movs	r2, #41	@ 0x29
 8002da6:	5c9b      	ldrb	r3, [r3, r2]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2228      	movs	r2, #40	@ 0x28
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fe fe62 	bl	8001a88 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2230      	movs	r2, #48	@ 0x30
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a85      	ldr	r2, [pc, #532]	@ (8003010 <HAL_COMP_Init+0x2ac>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d10d      	bne.n	8002e32 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e16:	4b7f      	ldr	r3, [pc, #508]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b7e      	ldr	r3, [pc, #504]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e1c:	497e      	ldr	r1, [pc, #504]	@ (8003018 <HAL_COMP_Init+0x2b4>)
 8002e1e:	400a      	ands	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e22:	4b7c      	ldr	r3, [pc, #496]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	0109      	lsls	r1, r1, #4
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	e01f      	b.n	8002e72 <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	23c0      	movs	r3, #192	@ 0xc0
 8002e38:	015b      	lsls	r3, r3, #5
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d10d      	bne.n	8002e5a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e3e:	4b75      	ldr	r3, [pc, #468]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b74      	ldr	r3, [pc, #464]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e44:	2180      	movs	r1, #128	@ 0x80
 8002e46:	0109      	lsls	r1, r1, #4
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e4c:	4b71      	ldr	r3, [pc, #452]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4b70      	ldr	r3, [pc, #448]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e52:	4971      	ldr	r1, [pc, #452]	@ (8003018 <HAL_COMP_Init+0x2b4>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	e00b      	b.n	8002e72 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e60:	496d      	ldr	r1, [pc, #436]	@ (8003018 <HAL_COMP_Init+0x2b4>)
 8002e62:	400a      	ands	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002e66:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e6c:	496a      	ldr	r1, [pc, #424]	@ (8003018 <HAL_COMP_Init+0x2b4>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	22a0      	movs	r2, #160	@ 0xa0
 8002e78:	01d2      	lsls	r2, r2, #7
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d017      	beq.n	8002eae <HAL_COMP_Init+0x14a>
 8002e7e:	22a0      	movs	r2, #160	@ 0xa0
 8002e80:	01d2      	lsls	r2, r2, #7
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d830      	bhi.n	8002ee8 <HAL_COMP_Init+0x184>
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d01f      	beq.n	8002eca <HAL_COMP_Init+0x166>
 8002e8a:	2280      	movs	r2, #128	@ 0x80
 8002e8c:	01d2      	lsls	r2, r2, #7
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12a      	bne.n	8002ee8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002e92:	4b60      	ldr	r3, [pc, #384]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	01c9      	lsls	r1, r1, #7
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ea6:	495d      	ldr	r1, [pc, #372]	@ (800301c <HAL_COMP_Init+0x2b8>)
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
        break;
 8002eac:	e029      	b.n	8002f02 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002eae:	4b59      	ldr	r3, [pc, #356]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002eb4:	4959      	ldr	r1, [pc, #356]	@ (800301c <HAL_COMP_Init+0x2b8>)
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002eba:	4b56      	ldr	r3, [pc, #344]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	01c9      	lsls	r1, r1, #7
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
        break;
 8002ec8:	e01b      	b.n	8002f02 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002eca:	4b52      	ldr	r3, [pc, #328]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ed0:	2180      	movs	r1, #128	@ 0x80
 8002ed2:	01c9      	lsls	r1, r1, #7
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4b4d      	ldr	r3, [pc, #308]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ede:	2180      	movs	r1, #128	@ 0x80
 8002ee0:	01c9      	lsls	r1, r1, #7
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
        break;
 8002ee6:	e00c      	b.n	8002f02 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002eee:	494b      	ldr	r1, [pc, #300]	@ (800301c <HAL_COMP_Init+0x2b8>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002ef4:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002efa:	4948      	ldr	r1, [pc, #288]	@ (800301c <HAL_COMP_Init+0x2b8>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
        break;
 8002f00:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2230      	movs	r2, #48	@ 0x30
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d016      	beq.n	8002f3c <HAL_COMP_Init+0x1d8>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d113      	bne.n	8002f3c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f14:	4b42      	ldr	r3, [pc, #264]	@ (8003020 <HAL_COMP_Init+0x2bc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4942      	ldr	r1, [pc, #264]	@ (8003024 <HAL_COMP_Init+0x2c0>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fd f904 	bl	8000128 <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	0013      	movs	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002f2e:	e002      	b.n	8002f36 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f9      	bne.n	8002f30 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a34      	ldr	r2, [pc, #208]	@ (8003014 <HAL_COMP_Init+0x2b0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d102      	bne.n	8002f4c <HAL_COMP_Init+0x1e8>
 8002f46:	2380      	movs	r3, #128	@ 0x80
 8002f48:	029b      	lsls	r3, r3, #10
 8002f4a:	e001      	b.n	8002f50 <HAL_COMP_Init+0x1ec>
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	02db      	lsls	r3, r3, #11
 8002f50:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	2203      	movs	r2, #3
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	2210      	movs	r2, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7ff fe9b 	bl	8002ca4 <LL_EXTI_EnableRisingTrig_0_31>
 8002f6e:	e003      	b.n	8002f78 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff fea6 	bl	8002cc4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff feaf 	bl	8002ce8 <LL_EXTI_EnableFallingTrig_0_31>
 8002f8a:	e003      	b.n	8002f94 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff feba 	bl	8002d08 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff fed6 	bl	8002d48 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff fec4 	bl	8002d2c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4013      	ands	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fe51 	bl	8002c58 <LL_EXTI_EnableEvent_0_31>
 8002fb6:	e003      	b.n	8002fc0 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7ff fe5e 	bl	8002c7c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fe1d 	bl	8002c0c <LL_EXTI_EnableIT_0_31>
 8002fd2:	e00c      	b.n	8002fee <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff fe2a 	bl	8002c30 <LL_EXTI_DisableIT_0_31>
 8002fdc:	e007      	b.n	8002fee <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff fe4b 	bl	8002c7c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fe21 	bl	8002c30 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2229      	movs	r2, #41	@ 0x29
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2229      	movs	r2, #41	@ 0x29
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003002:	231f      	movs	r3, #31
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b008      	add	sp, #32
 800300e:	bd80      	pop	{r7, pc}
 8003010:	fe00740f 	.word	0xfe00740f
 8003014:	40010200 	.word	0x40010200
 8003018:	fffff7ff 	.word	0xfffff7ff
 800301c:	ffffbfff 	.word	0xffffbfff
 8003020:	20000048 	.word	0x20000048
 8003024:	00030d40 	.word	0x00030d40

08003028 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	210f      	movs	r1, #15
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e035      	b.n	80030b6 <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0fdb      	lsrs	r3, r3, #31
 8003052:	07da      	lsls	r2, r3, #31
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	429a      	cmp	r2, r3
 800305a:	d104      	bne.n	8003066 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800305c:	230f      	movs	r3, #15
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e027      	b.n	80030b6 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2229      	movs	r2, #41	@ 0x29
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d11d      	bne.n	80030ae <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2229      	movs	r2, #41	@ 0x29
 8003086:	2102      	movs	r1, #2
 8003088:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <HAL_COMP_Start+0x9c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	490e      	ldr	r1, [pc, #56]	@ (80030c8 <HAL_COMP_Start+0xa0>)
 8003090:	0018      	movs	r0, r3
 8003092:	f7fd f849 	bl	8000128 <__udivsi3>
 8003096:	0003      	movs	r3, r0
 8003098:	3301      	adds	r3, #1
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800309e:	e002      	b.n	80030a6 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f9      	bne.n	80030a0 <HAL_COMP_Start+0x78>
 80030ac:	e003      	b.n	80030b6 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ae:	230f      	movs	r3, #15
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80030b6:	230f      	movs	r3, #15
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	781b      	ldrb	r3, [r3, #0]
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000048 	.word	0x20000048
 80030c8:	00030d40 	.word	0x00030d40

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	0002      	movs	r2, r0
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80030de:	d809      	bhi.n	80030f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	001a      	movs	r2, r3
 80030e6:	231f      	movs	r3, #31
 80030e8:	401a      	ands	r2, r3
 80030ea:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <__NVIC_EnableIRQ+0x30>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	4091      	lsls	r1, r2
 80030f0:	000a      	movs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	0002      	movs	r2, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b7f      	cmp	r3, #127	@ 0x7f
 8003114:	d828      	bhi.n	8003168 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003116:	4a2f      	ldr	r2, [pc, #188]	@ (80031d4 <__NVIC_SetPriority+0xd4>)
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b25b      	sxtb	r3, r3
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	33c0      	adds	r3, #192	@ 0xc0
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	589b      	ldr	r3, [r3, r2]
 8003126:	1dfa      	adds	r2, r7, #7
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	0011      	movs	r1, r2
 800312c:	2203      	movs	r2, #3
 800312e:	400a      	ands	r2, r1
 8003130:	00d2      	lsls	r2, r2, #3
 8003132:	21ff      	movs	r1, #255	@ 0xff
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	43d2      	mvns	r2, r2
 800313a:	401a      	ands	r2, r3
 800313c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	22ff      	movs	r2, #255	@ 0xff
 8003144:	401a      	ands	r2, r3
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	0018      	movs	r0, r3
 800314c:	2303      	movs	r3, #3
 800314e:	4003      	ands	r3, r0
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003154:	481f      	ldr	r0, [pc, #124]	@ (80031d4 <__NVIC_SetPriority+0xd4>)
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b25b      	sxtb	r3, r3
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	430a      	orrs	r2, r1
 8003160:	33c0      	adds	r3, #192	@ 0xc0
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003166:	e031      	b.n	80031cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003168:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <__NVIC_SetPriority+0xd8>)
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0019      	movs	r1, r3
 8003170:	230f      	movs	r3, #15
 8003172:	400b      	ands	r3, r1
 8003174:	3b08      	subs	r3, #8
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3306      	adds	r3, #6
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	3304      	adds	r3, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1dfa      	adds	r2, r7, #7
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	0011      	movs	r1, r2
 8003188:	2203      	movs	r2, #3
 800318a:	400a      	ands	r2, r1
 800318c:	00d2      	lsls	r2, r2, #3
 800318e:	21ff      	movs	r1, #255	@ 0xff
 8003190:	4091      	lsls	r1, r2
 8003192:	000a      	movs	r2, r1
 8003194:	43d2      	mvns	r2, r2
 8003196:	401a      	ands	r2, r3
 8003198:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	401a      	ands	r2, r3
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	0018      	movs	r0, r3
 80031a8:	2303      	movs	r3, #3
 80031aa:	4003      	ands	r3, r0
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031b0:	4809      	ldr	r0, [pc, #36]	@ (80031d8 <__NVIC_SetPriority+0xd8>)
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	001c      	movs	r4, r3
 80031b8:	230f      	movs	r3, #15
 80031ba:	4023      	ands	r3, r4
 80031bc:	3b08      	subs	r3, #8
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	430a      	orrs	r2, r1
 80031c2:	3306      	adds	r3, #6
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	18c3      	adds	r3, r0, r3
 80031c8:	3304      	adds	r3, #4
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b003      	add	sp, #12
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	045b      	lsls	r3, r3, #17
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d301      	bcc.n	80031f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f0:	2301      	movs	r3, #1
 80031f2:	e010      	b.n	8003216 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <SysTick_Config+0x44>)
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	3a01      	subs	r2, #1
 80031fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fc:	2301      	movs	r3, #1
 80031fe:	425b      	negs	r3, r3
 8003200:	2103      	movs	r1, #3
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff ff7c 	bl	8003100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <SysTick_Config+0x44>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <SysTick_Config+0x44>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	210f      	movs	r1, #15
 8003230:	187b      	adds	r3, r7, r1
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	187b      	adds	r3, r7, r1
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b25b      	sxtb	r3, r3
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff5d 	bl	8003100 <__NVIC_SetPriority>
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	0002      	movs	r2, r0
 8003256:	1dfb      	adds	r3, r7, #7
 8003258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b25b      	sxtb	r3, r3
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff ff33 	bl	80030cc <__NVIC_EnableIRQ>
}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff ffaf 	bl	80031dc <SysTick_Config>
 800327e:	0003      	movs	r3, r0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e015      	b.n	80032c6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	791b      	ldrb	r3, [r3, #4]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fe fc21 	bl	8001af4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e047      	b.n	8003372 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	795b      	ldrb	r3, [r3, #5]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_DAC_Start+0x20>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e041      	b.n	8003372 <HAL_DAC_Start+0xa4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2210      	movs	r2, #16
 8003304:	4013      	ands	r3, r2
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	223e      	movs	r2, #62	@ 0x3e
 8003320:	4013      	ands	r3, r2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d11e      	bne.n	8003364 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	e015      	b.n	8003364 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	23f8      	movs	r3, #248	@ 0xf8
 8003340:	039b      	lsls	r3, r3, #14
 8003342:	401a      	ands	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2110      	movs	r1, #16
 8003348:	400b      	ands	r3, r1
 800334a:	2102      	movs	r1, #2
 800334c:	4099      	lsls	r1, r3
 800334e:	000b      	movs	r3, r1
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2102      	movs	r1, #2
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b002      	add	sp, #8
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003392:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	4013      	ands	r3, r2
 800339c:	d01e      	beq.n	80033dc <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	2380      	movs	r3, #128	@ 0x80
 80033a2:	019b      	lsls	r3, r3, #6
 80033a4:	4013      	ands	r3, r2
 80033a6:	d019      	beq.n	80033dc <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2204      	movs	r2, #4
 80033ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2201      	movs	r2, #1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2280      	movs	r2, #128	@ 0x80
 80033c0:	0192      	lsls	r2, r2, #6
 80033c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4917      	ldr	r1, [pc, #92]	@ (800342c <HAL_DAC_IRQHandler+0xb0>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f853 	bl	8003482 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	059b      	lsls	r3, r3, #22
 80033e2:	4013      	ands	r3, r2
 80033e4:	d01e      	beq.n	8003424 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	059b      	lsls	r3, r3, #22
 80033ec:	4013      	ands	r3, r2
 80033ee:	d019      	beq.n	8003424 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2204      	movs	r2, #4
 80033f4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2202      	movs	r2, #2
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	0592      	lsls	r2, r2, #22
 800340a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4906      	ldr	r1, [pc, #24]	@ (8003430 <HAL_DAC_IRQHandler+0xb4>)
 8003418:	400a      	ands	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f968 	bl	80036f4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffffefff 	.word	0xffffefff
 8003430:	efffffff 	.word	0xefffffff

08003434 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e014      	b.n	800347a <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	18d3      	adds	r3, r2, r3
 8003462:	3308      	adds	r3, #8
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e004      	b.n	8003472 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	3314      	adds	r3, #20
 8003470:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b006      	add	sp, #24
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	231f      	movs	r3, #31
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_DAC_ConfigChannel+0x20>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e115      	b.n	80036e4 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	795b      	ldrb	r3, [r3, #5]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_DAC_ConfigChannel+0x30>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e10f      	b.n	80036e4 <HAL_DAC_ConfigChannel+0x250>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2202      	movs	r2, #2
 80034ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d000      	beq.n	80034da <HAL_DAC_ConfigChannel+0x46>
 80034d8:	e07a      	b.n	80035d0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034da:	f7fe feeb 	bl	80022b4 <HAL_GetTick>
 80034de:	0003      	movs	r3, r0
 80034e0:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d13d      	bne.n	8003564 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034e8:	e018      	b.n	800351c <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034ea:	f7fe fee3 	bl	80022b4 <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d911      	bls.n	800351c <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	4013      	ands	r3, r2
 8003504:	d00a      	beq.n	800351c <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2208      	movs	r2, #8
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2203      	movs	r2, #3
 8003516:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0e3      	b.n	80036e4 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4013      	ands	r3, r2
 8003528:	d1df      	bne.n	80034ea <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	6992      	ldr	r2, [r2, #24]
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
 8003534:	e020      	b.n	8003578 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003536:	f7fe febd 	bl	80022b4 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d90f      	bls.n	8003564 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	da0a      	bge.n	8003564 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2208      	movs	r2, #8
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2203      	movs	r2, #3
 800355e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0bf      	b.n	80036e4 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	dbe3      	blt.n	8003536 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	6992      	ldr	r2, [r2, #24]
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	2110      	movs	r1, #16
 8003582:	400a      	ands	r2, r1
 8003584:	4959      	ldr	r1, [pc, #356]	@ (80036ec <HAL_DAC_ConfigChannel+0x258>)
 8003586:	4091      	lsls	r1, r2
 8003588:	000a      	movs	r2, r1
 800358a:	43d2      	mvns	r2, r2
 800358c:	401a      	ands	r2, r3
 800358e:	0011      	movs	r1, r2
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2010      	movs	r0, #16
 8003598:	4003      	ands	r3, r0
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	2110      	movs	r1, #16
 80035ae:	400a      	ands	r2, r1
 80035b0:	21ff      	movs	r1, #255	@ 0xff
 80035b2:	4091      	lsls	r1, r2
 80035b4:	000a      	movs	r2, r1
 80035b6:	43d2      	mvns	r2, r2
 80035b8:	401a      	ands	r2, r3
 80035ba:	0011      	movs	r1, r2
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2010      	movs	r0, #16
 80035c4:	4003      	ands	r3, r0
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d11d      	bne.n	8003614 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2210      	movs	r2, #16
 80035e4:	4013      	ands	r3, r2
 80035e6:	221f      	movs	r2, #31
 80035e8:	409a      	lsls	r2, r3
 80035ea:	0013      	movs	r3, r2
 80035ec:	43da      	mvns	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2210      	movs	r2, #16
 80035fe:	4013      	ands	r3, r2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	409a      	lsls	r2, r3
 8003604:	0013      	movs	r3, r2
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2210      	movs	r2, #16
 8003620:	4013      	ands	r3, r2
 8003622:	2207      	movs	r2, #7
 8003624:	409a      	lsls	r2, r3
 8003626:	0013      	movs	r3, r2
 8003628:	43da      	mvns	r2, r3
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	431a      	orrs	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2210      	movs	r2, #16
 8003646:	4013      	ands	r3, r2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	409a      	lsls	r2, r3
 800364c:	0013      	movs	r3, r2
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2110      	movs	r1, #16
 8003666:	400b      	ands	r3, r1
 8003668:	2180      	movs	r1, #128	@ 0x80
 800366a:	01c9      	lsls	r1, r1, #7
 800366c:	4099      	lsls	r1, r3
 800366e:	000b      	movs	r3, r1
 8003670:	43d9      	mvns	r1, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2210      	movs	r2, #16
 8003686:	4013      	ands	r3, r2
 8003688:	4a19      	ldr	r2, [pc, #100]	@ (80036f0 <HAL_DAC_ConfigChannel+0x25c>)
 800368a:	409a      	lsls	r2, r3
 800368c:	0013      	movs	r3, r2
 800368e:	43da      	mvns	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4013      	ands	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2210      	movs	r2, #16
 80036a0:	4013      	ands	r3, r2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	409a      	lsls	r2, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2110      	movs	r1, #16
 80036c0:	400b      	ands	r3, r1
 80036c2:	21c0      	movs	r1, #192	@ 0xc0
 80036c4:	4099      	lsls	r1, r3
 80036c6:	000b      	movs	r3, r1
 80036c8:	43d9      	mvns	r1, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	400a      	ands	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80036de:	231f      	movs	r3, #31
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b008      	add	sp, #32
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	000003ff 	.word	0x000003ff
 80036f0:	00000ffe 	.word	0x00000ffe

080036f4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e077      	b.n	8003806 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3d      	ldr	r2, [pc, #244]	@ (8003810 <HAL_DMA_Init+0x10c>)
 800371c:	4694      	mov	ip, r2
 800371e:	4463      	add	r3, ip
 8003720:	2114      	movs	r1, #20
 8003722:	0018      	movs	r0, r3
 8003724:	f7fc fd00 	bl	8000128 <__udivsi3>
 8003728:	0003      	movs	r3, r0
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2225      	movs	r2, #37	@ 0x25
 8003734:	2102      	movs	r1, #2
 8003736:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4934      	ldr	r1, [pc, #208]	@ (8003814 <HAL_DMA_Init+0x110>)
 8003744:	400a      	ands	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f9c7 	bl	8003b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	01db      	lsls	r3, r3, #7
 800378e:	429a      	cmp	r2, r3
 8003790:	d102      	bne.n	8003798 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a0:	213f      	movs	r1, #63	@ 0x3f
 80037a2:	400a      	ands	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037ae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d011      	beq.n	80037dc <HAL_DMA_Init+0xd8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d80d      	bhi.n	80037dc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f9d2 	bl	8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	e008      	b.n	80037ee <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2225      	movs	r2, #37	@ 0x25
 80037f8:	2101      	movs	r1, #1
 80037fa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	@ 0x24
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	bffdfff8 	.word	0xbffdfff8
 8003814:	ffff800f 	.word	0xffff800f

08003818 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e050      	b.n	80038cc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2225      	movs	r2, #37	@ 0x25
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d008      	beq.n	8003848 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	@ 0x24
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e041      	b.n	80038cc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	210e      	movs	r1, #14
 8003854:	438a      	bics	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	491c      	ldr	r1, [pc, #112]	@ (80038d4 <HAL_DMA_Abort+0xbc>)
 8003864:	400a      	ands	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	438a      	bics	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003878:	4b17      	ldr	r3, [pc, #92]	@ (80038d8 <HAL_DMA_Abort+0xc0>)
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	221c      	movs	r2, #28
 8003882:	4013      	ands	r3, r2
 8003884:	2201      	movs	r2, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	4b13      	ldr	r3, [pc, #76]	@ (80038d8 <HAL_DMA_Abort+0xc0>)
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003896:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	490a      	ldr	r1, [pc, #40]	@ (80038d4 <HAL_DMA_Abort+0xbc>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80038b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2225      	movs	r2, #37	@ 0x25
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2224      	movs	r2, #36	@ 0x24
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	fffffeff 	.word	0xfffffeff
 80038d8:	40020000 	.word	0x40020000

080038dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	210f      	movs	r1, #15
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2225      	movs	r2, #37	@ 0x25
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d006      	beq.n	8003906 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2204      	movs	r2, #4
 80038fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e049      	b.n	800399a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	210e      	movs	r1, #14
 8003912:	438a      	bics	r2, r1
 8003914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	438a      	bics	r2, r1
 8003924:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003930:	491d      	ldr	r1, [pc, #116]	@ (80039a8 <HAL_DMA_Abort_IT+0xcc>)
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003936:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <HAL_DMA_Abort_IT+0xd0>)
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	221c      	movs	r2, #28
 8003940:	4013      	ands	r3, r2
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_DMA_Abort_IT+0xd0>)
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003954:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003968:	490f      	ldr	r1, [pc, #60]	@ (80039a8 <HAL_DMA_Abort_IT+0xcc>)
 800396a:	400a      	ands	r2, r1
 800396c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003976:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2225      	movs	r2, #37	@ 0x25
 800397c:	2101      	movs	r1, #1
 800397e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	@ 0x24
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	0010      	movs	r0, r2
 8003998:	4798      	blx	r3
    }
  }
  return status;
 800399a:	230f      	movs	r3, #15
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	781b      	ldrb	r3, [r3, #0]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	fffffeff 	.word	0xfffffeff
 80039ac:	40020000 	.word	0x40020000

080039b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80039b8:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	221c      	movs	r2, #28
 80039cc:	4013      	ands	r3, r2
 80039ce:	2204      	movs	r2, #4
 80039d0:	409a      	lsls	r2, r3
 80039d2:	0013      	movs	r3, r2
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x7a>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2204      	movs	r2, #4
 80039de:	4013      	ands	r3, r2
 80039e0:	d023      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2220      	movs	r2, #32
 80039ea:	4013      	ands	r3, r2
 80039ec:	d107      	bne.n	80039fe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2104      	movs	r1, #4
 80039fa:	438a      	bics	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80039fe:	4b44      	ldr	r3, [pc, #272]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	221c      	movs	r2, #28
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	4b40      	ldr	r3, [pc, #256]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d100      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x6e>
 8003a1c:	e073      	b.n	8003b06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	0010      	movs	r0, r2
 8003a26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003a28:	e06d      	b.n	8003b06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	221c      	movs	r2, #28
 8003a30:	4013      	ands	r3, r2
 8003a32:	2202      	movs	r2, #2
 8003a34:	409a      	lsls	r2, r3
 8003a36:	0013      	movs	r3, r2
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d02e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0xec>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	d02a      	beq.n	8003a9c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d10b      	bne.n	8003a6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	210a      	movs	r1, #10
 8003a5e:	438a      	bics	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2225      	movs	r2, #37	@ 0x25
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a6a:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	221c      	movs	r2, #28
 8003a74:	4013      	ands	r3, r2
 8003a76:	2202      	movs	r2, #2
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	@ 0x24
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03a      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	0010      	movs	r0, r2
 8003a98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003a9a:	e034      	b.n	8003b06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	221c      	movs	r2, #28
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	d02b      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x158>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d027      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	210e      	movs	r1, #14
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ac8:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	221c      	movs	r2, #28
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <HAL_DMA_IRQHandler+0x160>)
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2225      	movs	r2, #37	@ 0x25
 8003ae8:	2101      	movs	r1, #1
 8003aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	@ 0x24
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	0010      	movs	r0, r2
 8003b04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	46c0      	nop			@ (mov r8, r8)
}
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b004      	add	sp, #16
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40020000 	.word	0x40020000

08003b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	4a10      	ldr	r2, [pc, #64]	@ (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003b24:	4694      	mov	ip, r2
 8003b26:	4463      	add	r3, ip
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	001a      	movs	r2, r3
 8003b36:	23ff      	movs	r3, #255	@ 0xff
 8003b38:	4013      	ands	r3, r2
 8003b3a:	3b08      	subs	r3, #8
 8003b3c:	2114      	movs	r1, #20
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7fc faf2 	bl	8000128 <__udivsi3>
 8003b44:	0003      	movs	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a07      	ldr	r2, [pc, #28]	@ (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	221f      	movs	r2, #31
 8003b52:	4013      	ands	r3, r2
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	10008200 	.word	0x10008200
 8003b68:	40020880 	.word	0x40020880

08003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	223f      	movs	r2, #63	@ 0x3f
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b82:	4694      	mov	ip, r2
 8003b84:	4463      	add	r3, ip
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	001a      	movs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a07      	ldr	r2, [pc, #28]	@ (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	1000823f 	.word	0x1000823f
 8003bb0:	40020940 	.word	0x40020940

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc2:	e147      	b.n	8003e54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d100      	bne.n	8003bdc <HAL_GPIO_Init+0x28>
 8003bda:	e138      	b.n	8003e4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d005      	beq.n	8003bf4 <HAL_GPIO_Init+0x40>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d130      	bne.n	8003c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	409a      	lsls	r2, r3
 8003c02:	0013      	movs	r3, r2
 8003c04:	43da      	mvns	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	0013      	movs	r3, r2
 8003c32:	43da      	mvns	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	2201      	movs	r2, #1
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d017      	beq.n	8003c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	43da      	mvns	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	409a      	lsls	r2, r3
 8003c84:	0013      	movs	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2203      	movs	r2, #3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d123      	bne.n	8003ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	0092      	lsls	r2, r2, #2
 8003ca8:	58d3      	ldr	r3, [r2, r3]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2207      	movs	r2, #7
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2107      	movs	r1, #7
 8003cca:	400b      	ands	r3, r1
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	6939      	ldr	r1, [r7, #16]
 8003ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	401a      	ands	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	23c0      	movs	r3, #192	@ 0xc0
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	4013      	ands	r3, r2
 8003d24:	d100      	bne.n	8003d28 <HAL_GPIO_Init+0x174>
 8003d26:	e092      	b.n	8003e4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d28:	4a50      	ldr	r2, [pc, #320]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	3318      	adds	r3, #24
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	589b      	ldr	r3, [r3, r2]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	220f      	movs	r2, #15
 8003d40:	409a      	lsls	r2, r3
 8003d42:	0013      	movs	r3, r2
 8003d44:	43da      	mvns	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	23a0      	movs	r3, #160	@ 0xa0
 8003d50:	05db      	lsls	r3, r3, #23
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0x1ca>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a45      	ldr	r2, [pc, #276]	@ (8003e70 <HAL_GPIO_Init+0x2bc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00d      	beq.n	8003d7a <HAL_GPIO_Init+0x1c6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a44      	ldr	r2, [pc, #272]	@ (8003e74 <HAL_GPIO_Init+0x2c0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <HAL_GPIO_Init+0x1c2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a43      	ldr	r2, [pc, #268]	@ (8003e78 <HAL_GPIO_Init+0x2c4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_GPIO_Init+0x1be>
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x1cc>
 8003d72:	2305      	movs	r3, #5
 8003d74:	e004      	b.n	8003d80 <HAL_GPIO_Init+0x1cc>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_Init+0x1cc>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x1cc>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	2103      	movs	r1, #3
 8003d84:	400a      	ands	r2, r1
 8003d86:	00d2      	lsls	r2, r2, #3
 8003d88:	4093      	lsls	r3, r2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d90:	4936      	ldr	r1, [pc, #216]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3318      	adds	r3, #24
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d9e:	4b33      	ldr	r3, [pc, #204]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	035b      	lsls	r3, r3, #13
 8003db6:	4013      	ands	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003dc8:	4b28      	ldr	r3, [pc, #160]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	039b      	lsls	r3, r3, #14
 8003de0:	4013      	ands	r3, r2
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dec:	4b1f      	ldr	r3, [pc, #124]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003df4:	2384      	movs	r3, #132	@ 0x84
 8003df6:	58d3      	ldr	r3, [r2, r3]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e18:	4914      	ldr	r1, [pc, #80]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003e1a:	2284      	movs	r2, #132	@ 0x84
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e20:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	58d3      	ldr	r3, [r2, r3]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	2380      	movs	r3, #128	@ 0x80
 8003e38:	025b      	lsls	r3, r3, #9
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e46:	4909      	ldr	r1, [pc, #36]	@ (8003e6c <HAL_GPIO_Init+0x2b8>)
 8003e48:	2280      	movs	r2, #128	@ 0x80
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3301      	adds	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	40da      	lsrs	r2, r3
 8003e5c:	1e13      	subs	r3, r2, #0
 8003e5e:	d000      	beq.n	8003e62 <HAL_GPIO_Init+0x2ae>
 8003e60:	e6b0      	b.n	8003bc4 <HAL_GPIO_Init+0x10>
  }
}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	50000400 	.word	0x50000400
 8003e74:	50000800 	.word	0x50000800
 8003e78:	50000c00 	.word	0x50000c00

08003e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	000a      	movs	r2, r1
 8003e86:	1cbb      	adds	r3, r7, #2
 8003e88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	1cba      	adds	r2, r7, #2
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	4013      	ands	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e96:	230f      	movs	r3, #15
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e003      	b.n	8003ea8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea0:	230f      	movs	r3, #15
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	0008      	movs	r0, r1
 8003ec0:	0011      	movs	r1, r2
 8003ec2:	1cbb      	adds	r3, r7, #2
 8003ec4:	1c02      	adds	r2, r0, #0
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	1c7b      	adds	r3, r7, #1
 8003eca:	1c0a      	adds	r2, r1, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ece:	1c7b      	adds	r3, r7, #1
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed6:	1cbb      	adds	r3, r7, #2
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ede:	e003      	b.n	8003ee8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee0:	1cbb      	adds	r3, r7, #2
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	000a      	movs	r2, r1
 8003efa:	1cbb      	adds	r3, r7, #2
 8003efc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f04:	1cbb      	adds	r3, r7, #2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	041a      	lsls	r2, r3, #16
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	1cb9      	adds	r1, r7, #2
 8003f14:	8809      	ldrh	r1, [r1, #0]
 8003f16:	400b      	ands	r3, r1
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	619a      	str	r2, [r3, #24]
}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b004      	add	sp, #16
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a19      	ldr	r2, [pc, #100]	@ (8003f9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d11f      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f4c:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	0013      	movs	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4912      	ldr	r1, [pc, #72]	@ (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fc f8e4 	bl	8000128 <__udivsi3>
 8003f60:	0003      	movs	r3, r0
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f66:	e008      	b.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e001      	b.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e009      	b.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f7a:	4b07      	ldr	r3, [pc, #28]	@ (8003f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	401a      	ands	r2, r3
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d0ed      	beq.n	8003f68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	fffff9ff 	.word	0xfffff9ff
 8003fa0:	20000048 	.word	0x20000048
 8003fa4:	000f4240 	.word	0x000f4240

08003fa8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003fac:	4b03      	ldr	r3, [pc, #12]	@ (8003fbc <LL_RCC_GetAPB1Prescaler+0x14>)
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	23e0      	movs	r3, #224	@ 0xe0
 8003fb2:	01db      	lsls	r3, r3, #7
 8003fb4:	4013      	ands	r3, r2
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e2fe      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d100      	bne.n	8003fde <HAL_RCC_OscConfig+0x1e>
 8003fdc:	e07c      	b.n	80040d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fde:	4bc3      	ldr	r3, [pc, #780]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2238      	movs	r2, #56	@ 0x38
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fe8:	4bc0      	ldr	r3, [pc, #768]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2203      	movs	r2, #3
 8003fee:	4013      	ands	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d102      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3e>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d10b      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	4bb9      	ldr	r3, [pc, #740]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	4013      	ands	r3, r2
 800400e:	d062      	beq.n	80040d6 <HAL_RCC_OscConfig+0x116>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d15e      	bne.n	80040d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e2d9      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	025b      	lsls	r3, r3, #9
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x78>
 8004028:	4bb0      	ldr	r3, [pc, #704]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4baf      	ldr	r3, [pc, #700]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800402e:	2180      	movs	r1, #128	@ 0x80
 8004030:	0249      	lsls	r1, r1, #9
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e020      	b.n	800407a <HAL_RCC_OscConfig+0xba>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	23a0      	movs	r3, #160	@ 0xa0
 800403e:	02db      	lsls	r3, r3, #11
 8004040:	429a      	cmp	r2, r3
 8004042:	d10e      	bne.n	8004062 <HAL_RCC_OscConfig+0xa2>
 8004044:	4ba9      	ldr	r3, [pc, #676]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4ba8      	ldr	r3, [pc, #672]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	02c9      	lsls	r1, r1, #11
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	4ba6      	ldr	r3, [pc, #664]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4ba5      	ldr	r3, [pc, #660]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004058:	2180      	movs	r1, #128	@ 0x80
 800405a:	0249      	lsls	r1, r1, #9
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e00b      	b.n	800407a <HAL_RCC_OscConfig+0xba>
 8004062:	4ba2      	ldr	r3, [pc, #648]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4ba1      	ldr	r3, [pc, #644]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004068:	49a1      	ldr	r1, [pc, #644]	@ (80042f0 <HAL_RCC_OscConfig+0x330>)
 800406a:	400a      	ands	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	4b9f      	ldr	r3, [pc, #636]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b9e      	ldr	r3, [pc, #632]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004074:	499f      	ldr	r1, [pc, #636]	@ (80042f4 <HAL_RCC_OscConfig+0x334>)
 8004076:	400a      	ands	r2, r1
 8004078:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fe f917 	bl	80022b4 <HAL_GetTick>
 8004086:	0003      	movs	r3, r0
 8004088:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe f912 	bl	80022b4 <HAL_GetTick>
 8004090:	0002      	movs	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e298      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409e:	4b93      	ldr	r3, [pc, #588]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	@ 0x80
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	4013      	ands	r3, r2
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xcc>
 80040aa:	e015      	b.n	80040d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe f902 	bl	80022b4 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b6:	f7fe f8fd 	bl	80022b4 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	@ 0x64
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e283      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c8:	4b88      	ldr	r3, [pc, #544]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	029b      	lsls	r3, r3, #10
 80040d0:	4013      	ands	r3, r2
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0xf6>
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d100      	bne.n	80040e4 <HAL_RCC_OscConfig+0x124>
 80040e2:	e099      	b.n	8004218 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e4:	4b81      	ldr	r3, [pc, #516]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2238      	movs	r2, #56	@ 0x38
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ee:	4b7f      	ldr	r3, [pc, #508]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2203      	movs	r2, #3
 80040f4:	4013      	ands	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0x144>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d002      	beq.n	800410a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d135      	bne.n	8004176 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800410a:	4b78      	ldr	r3, [pc, #480]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4013      	ands	r3, r2
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x162>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e256      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b72      	ldr	r3, [pc, #456]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a74      	ldr	r2, [pc, #464]	@ (80042f8 <HAL_RCC_OscConfig+0x338>)
 8004128:	4013      	ands	r3, r2
 800412a:	0019      	movs	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	4b6e      	ldr	r3, [pc, #440]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d112      	bne.n	8004164 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800413e:	4b6b      	ldr	r3, [pc, #428]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a6e      	ldr	r2, [pc, #440]	@ (80042fc <HAL_RCC_OscConfig+0x33c>)
 8004144:	4013      	ands	r3, r2
 8004146:	0019      	movs	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	4b67      	ldr	r3, [pc, #412]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800414e:	430a      	orrs	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004152:	4b66      	ldr	r3, [pc, #408]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0adb      	lsrs	r3, r3, #11
 8004158:	2207      	movs	r2, #7
 800415a:	4013      	ands	r3, r2
 800415c:	4a68      	ldr	r2, [pc, #416]	@ (8004300 <HAL_RCC_OscConfig+0x340>)
 800415e:	40da      	lsrs	r2, r3
 8004160:	4b68      	ldr	r3, [pc, #416]	@ (8004304 <HAL_RCC_OscConfig+0x344>)
 8004162:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004164:	4b68      	ldr	r3, [pc, #416]	@ (8004308 <HAL_RCC_OscConfig+0x348>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0018      	movs	r0, r3
 800416a:	f7fe f847 	bl	80021fc <HAL_InitTick>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d051      	beq.n	8004216 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e22c      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d030      	beq.n	80041e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800417e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a5e      	ldr	r2, [pc, #376]	@ (80042fc <HAL_RCC_OscConfig+0x33c>)
 8004184:	4013      	ands	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	4b57      	ldr	r3, [pc, #348]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004192:	4b56      	ldr	r3, [pc, #344]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b55      	ldr	r3, [pc, #340]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	0049      	lsls	r1, r1, #1
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fe f888 	bl	80022b4 <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fe f883 	bl	80022b4 <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e209      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041bc:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	@ 0x80
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4013      	ands	r3, r2
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b48      	ldr	r3, [pc, #288]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a4a      	ldr	r2, [pc, #296]	@ (80042f8 <HAL_RCC_OscConfig+0x338>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	4b44      	ldr	r3, [pc, #272]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	e01b      	b.n	8004218 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80041e0:	4b42      	ldr	r3, [pc, #264]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b41      	ldr	r3, [pc, #260]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80041e6:	4949      	ldr	r1, [pc, #292]	@ (800430c <HAL_RCC_OscConfig+0x34c>)
 80041e8:	400a      	ands	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe f862 	bl	80022b4 <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f6:	f7fe f85d 	bl	80022b4 <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1e3      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004208:	4b38      	ldr	r3, [pc, #224]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	@ 0x80
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4013      	ands	r3, r2
 8004212:	d1f0      	bne.n	80041f6 <HAL_RCC_OscConfig+0x236>
 8004214:	e000      	b.n	8004218 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004216:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2208      	movs	r2, #8
 800421e:	4013      	ands	r3, r2
 8004220:	d047      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004222:	4b32      	ldr	r3, [pc, #200]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2238      	movs	r2, #56	@ 0x38
 8004228:	4013      	ands	r3, r2
 800422a:	2b18      	cmp	r3, #24
 800422c:	d10a      	bne.n	8004244 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800422e:	4b2f      	ldr	r3, [pc, #188]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004232:	2202      	movs	r2, #2
 8004234:	4013      	ands	r3, r2
 8004236:	d03c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d138      	bne.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e1c5      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d019      	beq.n	8004280 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800424c:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 800424e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004250:	4b26      	ldr	r3, [pc, #152]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004252:	2101      	movs	r1, #1
 8004254:	430a      	orrs	r2, r1
 8004256:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe f82c 	bl	80022b4 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fe f827 	bl	80022b4 <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e1ad      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004274:	4b1d      	ldr	r3, [pc, #116]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004278:	2202      	movs	r2, #2
 800427a:	4013      	ands	r3, r2
 800427c:	d0f1      	beq.n	8004262 <HAL_RCC_OscConfig+0x2a2>
 800427e:	e018      	b.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004280:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004282:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004286:	2101      	movs	r1, #1
 8004288:	438a      	bics	r2, r1
 800428a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fe f812 	bl	80022b4 <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004296:	f7fe f80d 	bl	80022b4 <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e193      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80042aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ac:	2202      	movs	r2, #2
 80042ae:	4013      	ands	r3, r2
 80042b0:	d1f1      	bne.n	8004296 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2204      	movs	r2, #4
 80042b8:	4013      	ands	r3, r2
 80042ba:	d100      	bne.n	80042be <HAL_RCC_OscConfig+0x2fe>
 80042bc:	e0c6      	b.n	800444c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042be:	231f      	movs	r3, #31
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042c6:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2238      	movs	r2, #56	@ 0x38
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d11e      	bne.n	8004310 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_RCC_OscConfig+0x32c>)
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d100      	bne.n	80042de <HAL_RCC_OscConfig+0x31e>
 80042dc:	e0b6      	b.n	800444c <HAL_RCC_OscConfig+0x48c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d000      	beq.n	80042e8 <HAL_RCC_OscConfig+0x328>
 80042e6:	e0b1      	b.n	800444c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e171      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
 80042ec:	40021000 	.word	0x40021000
 80042f0:	fffeffff 	.word	0xfffeffff
 80042f4:	fffbffff 	.word	0xfffbffff
 80042f8:	ffff80ff 	.word	0xffff80ff
 80042fc:	ffffc7ff 	.word	0xffffc7ff
 8004300:	00f42400 	.word	0x00f42400
 8004304:	20000048 	.word	0x20000048
 8004308:	2000004c 	.word	0x2000004c
 800430c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004310:	4bb1      	ldr	r3, [pc, #708]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004314:	2380      	movs	r3, #128	@ 0x80
 8004316:	055b      	lsls	r3, r3, #21
 8004318:	4013      	ands	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x360>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x362>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	4bac      	ldr	r3, [pc, #688]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800432a:	4bab      	ldr	r3, [pc, #684]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800432c:	2180      	movs	r1, #128	@ 0x80
 800432e:	0549      	lsls	r1, r1, #21
 8004330:	430a      	orrs	r2, r1
 8004332:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004334:	4ba8      	ldr	r3, [pc, #672]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	055b      	lsls	r3, r3, #21
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004342:	231f      	movs	r3, #31
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	4ba4      	ldr	r3, [pc, #656]	@ (80045dc <HAL_RCC_OscConfig+0x61c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4013      	ands	r3, r2
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004356:	4ba1      	ldr	r3, [pc, #644]	@ (80045dc <HAL_RCC_OscConfig+0x61c>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4ba0      	ldr	r3, [pc, #640]	@ (80045dc <HAL_RCC_OscConfig+0x61c>)
 800435c:	2180      	movs	r1, #128	@ 0x80
 800435e:	0049      	lsls	r1, r1, #1
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004364:	f7fd ffa6 	bl	80022b4 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fd ffa1 	bl	80022b4 <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e127      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004380:	4b96      	ldr	r3, [pc, #600]	@ (80045dc <HAL_RCC_OscConfig+0x61c>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3e2>
 8004394:	4b90      	ldr	r3, [pc, #576]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004396:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004398:	4b8f      	ldr	r3, [pc, #572]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800439a:	2101      	movs	r1, #1
 800439c:	430a      	orrs	r2, r1
 800439e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043a0:	e01c      	b.n	80043dc <HAL_RCC_OscConfig+0x41c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x404>
 80043aa:	4b8b      	ldr	r3, [pc, #556]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043ae:	4b8a      	ldr	r3, [pc, #552]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043b0:	2104      	movs	r1, #4
 80043b2:	430a      	orrs	r2, r1
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043b6:	4b88      	ldr	r3, [pc, #544]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043ba:	4b87      	ldr	r3, [pc, #540]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043bc:	2101      	movs	r1, #1
 80043be:	430a      	orrs	r2, r1
 80043c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0x41c>
 80043c4:	4b84      	ldr	r3, [pc, #528]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043c8:	4b83      	ldr	r3, [pc, #524]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	438a      	bics	r2, r1
 80043ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043d0:	4b81      	ldr	r3, [pc, #516]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043d4:	4b80      	ldr	r3, [pc, #512]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80043d6:	2104      	movs	r1, #4
 80043d8:	438a      	bics	r2, r1
 80043da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d014      	beq.n	800440e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd ff66 	bl	80022b4 <HAL_GetTick>
 80043e8:	0003      	movs	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ec:	e009      	b.n	8004402 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fd ff61 	bl	80022b4 <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	4a79      	ldr	r2, [pc, #484]	@ (80045e0 <HAL_RCC_OscConfig+0x620>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0e6      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004402:	4b75      	ldr	r3, [pc, #468]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x42e>
 800440c:	e013      	b.n	8004436 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fd ff51 	bl	80022b4 <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004416:	e009      	b.n	800442c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fd ff4c 	bl	80022b4 <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	4a6f      	ldr	r2, [pc, #444]	@ (80045e0 <HAL_RCC_OscConfig+0x620>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0d1      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800442c:	4b6a      	ldr	r3, [pc, #424]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800442e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004430:	2202      	movs	r2, #2
 8004432:	4013      	ands	r3, r2
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004436:	231f      	movs	r3, #31
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b65      	ldr	r3, [pc, #404]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004444:	4b64      	ldr	r3, [pc, #400]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004446:	4967      	ldr	r1, [pc, #412]	@ (80045e4 <HAL_RCC_OscConfig+0x624>)
 8004448:	400a      	ands	r2, r1
 800444a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d100      	bne.n	8004456 <HAL_RCC_OscConfig+0x496>
 8004454:	e0bb      	b.n	80045ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004456:	4b60      	ldr	r3, [pc, #384]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2238      	movs	r2, #56	@ 0x38
 800445c:	4013      	ands	r3, r2
 800445e:	2b10      	cmp	r3, #16
 8004460:	d100      	bne.n	8004464 <HAL_RCC_OscConfig+0x4a4>
 8004462:	e07b      	b.n	800455c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d156      	bne.n	800451a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b5a      	ldr	r3, [pc, #360]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b59      	ldr	r3, [pc, #356]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004472:	495d      	ldr	r1, [pc, #372]	@ (80045e8 <HAL_RCC_OscConfig+0x628>)
 8004474:	400a      	ands	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd ff1c 	bl	80022b4 <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004482:	f7fd ff17 	bl	80022b4 <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e09d      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004494:	4b50      	ldr	r3, [pc, #320]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	049b      	lsls	r3, r3, #18
 800449c:	4013      	ands	r3, r2
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a0:	4b4d      	ldr	r3, [pc, #308]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a51      	ldr	r2, [pc, #324]	@ (80045ec <HAL_RCC_OscConfig+0x62c>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	0019      	movs	r1, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044cc:	431a      	orrs	r2, r3
 80044ce:	4b42      	ldr	r3, [pc, #264]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80044d0:	430a      	orrs	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	4b40      	ldr	r3, [pc, #256]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b3f      	ldr	r3, [pc, #252]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80044da:	2180      	movs	r1, #128	@ 0x80
 80044dc:	0449      	lsls	r1, r1, #17
 80044de:	430a      	orrs	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80044e2:	4b3d      	ldr	r3, [pc, #244]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	4b3c      	ldr	r3, [pc, #240]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 80044e8:	2180      	movs	r1, #128	@ 0x80
 80044ea:	0549      	lsls	r1, r1, #21
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fee0 	bl	80022b4 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fd fedb 	bl	80022b4 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e061      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450c:	4b32      	ldr	r3, [pc, #200]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	049b      	lsls	r3, r3, #18
 8004514:	4013      	ands	r3, r2
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x53a>
 8004518:	e059      	b.n	80045ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b2f      	ldr	r3, [pc, #188]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b2e      	ldr	r3, [pc, #184]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004520:	4931      	ldr	r1, [pc, #196]	@ (80045e8 <HAL_RCC_OscConfig+0x628>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fd fec5 	bl	80022b4 <HAL_GetTick>
 800452a:	0003      	movs	r3, r0
 800452c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd fec0 	bl	80022b4 <HAL_GetTick>
 8004534:	0002      	movs	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e046      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004542:	4b25      	ldr	r3, [pc, #148]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	049b      	lsls	r3, r3, #18
 800454a:	4013      	ands	r3, r2
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800454e:	4b22      	ldr	r3, [pc, #136]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	4b21      	ldr	r3, [pc, #132]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 8004554:	4926      	ldr	r1, [pc, #152]	@ (80045f0 <HAL_RCC_OscConfig+0x630>)
 8004556:	400a      	ands	r2, r1
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	e038      	b.n	80045ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e033      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004568:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <HAL_RCC_OscConfig+0x618>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2203      	movs	r2, #3
 8004572:	401a      	ands	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	429a      	cmp	r2, r3
 800457a:	d126      	bne.n	80045ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2270      	movs	r2, #112	@ 0x70
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d11f      	bne.n	80045ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	23fe      	movs	r3, #254	@ 0xfe
 800458e:	01db      	lsls	r3, r3, #7
 8004590:	401a      	ands	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d116      	bne.n	80045ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	23f8      	movs	r3, #248	@ 0xf8
 80045a0:	039b      	lsls	r3, r3, #14
 80045a2:	401a      	ands	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d10e      	bne.n	80045ca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	23e0      	movs	r3, #224	@ 0xe0
 80045b0:	051b      	lsls	r3, r3, #20
 80045b2:	401a      	ands	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	0f5b      	lsrs	r3, r3, #29
 80045c0:	075a      	lsls	r2, r3, #29
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b008      	add	sp, #32
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
 80045e0:	00001388 	.word	0x00001388
 80045e4:	efffffff 	.word	0xefffffff
 80045e8:	feffffff 	.word	0xfeffffff
 80045ec:	11c1808c 	.word	0x11c1808c
 80045f0:	eefefffc 	.word	0xeefefffc

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0e9      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b76      	ldr	r3, [pc, #472]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2207      	movs	r2, #7
 800460e:	4013      	ands	r3, r2
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d91e      	bls.n	8004654 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b73      	ldr	r3, [pc, #460]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2207      	movs	r2, #7
 800461c:	4393      	bics	r3, r2
 800461e:	0019      	movs	r1, r3
 8004620:	4b70      	ldr	r3, [pc, #448]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004628:	f7fd fe44 	bl	80022b4 <HAL_GetTick>
 800462c:	0003      	movs	r3, r0
 800462e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004630:	e009      	b.n	8004646 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004632:	f7fd fe3f 	bl	80022b4 <HAL_GetTick>
 8004636:	0002      	movs	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	4a6a      	ldr	r2, [pc, #424]	@ (80047e8 <HAL_RCC_ClockConfig+0x1f4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0ca      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004646:	4b67      	ldr	r3, [pc, #412]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2207      	movs	r2, #7
 800464c:	4013      	ands	r3, r2
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d1ee      	bne.n	8004632 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2202      	movs	r2, #2
 800465a:	4013      	ands	r3, r2
 800465c:	d015      	beq.n	800468a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2204      	movs	r2, #4
 8004664:	4013      	ands	r3, r2
 8004666:	d006      	beq.n	8004676 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004668:	4b60      	ldr	r3, [pc, #384]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	4b5f      	ldr	r3, [pc, #380]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 800466e:	21e0      	movs	r1, #224	@ 0xe0
 8004670:	01c9      	lsls	r1, r1, #7
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004676:	4b5d      	ldr	r3, [pc, #372]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4a5d      	ldr	r2, [pc, #372]	@ (80047f0 <HAL_RCC_ClockConfig+0x1fc>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	4b59      	ldr	r3, [pc, #356]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	4013      	ands	r3, r2
 8004692:	d057      	beq.n	8004744 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469c:	4b53      	ldr	r3, [pc, #332]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	4013      	ands	r3, r2
 80046a6:	d12b      	bne.n	8004700 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e097      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b4:	4b4d      	ldr	r3, [pc, #308]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	049b      	lsls	r3, r3, #18
 80046bc:	4013      	ands	r3, r2
 80046be:	d11f      	bne.n	8004700 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e08b      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046cc:	4b47      	ldr	r3, [pc, #284]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2380      	movs	r3, #128	@ 0x80
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4013      	ands	r3, r2
 80046d6:	d113      	bne.n	8004700 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e07f      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e4:	4b41      	ldr	r3, [pc, #260]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80046e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e8:	2202      	movs	r2, #2
 80046ea:	4013      	ands	r3, r2
 80046ec:	d108      	bne.n	8004700 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e074      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80046f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f6:	2202      	movs	r2, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e06d      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004700:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2207      	movs	r2, #7
 8004706:	4393      	bics	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b37      	ldr	r3, [pc, #220]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004714:	f7fd fdce 	bl	80022b4 <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471c:	e009      	b.n	8004732 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471e:	f7fd fdc9 	bl	80022b4 <HAL_GetTick>
 8004722:	0002      	movs	r2, r0
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	4a2f      	ldr	r2, [pc, #188]	@ (80047e8 <HAL_RCC_ClockConfig+0x1f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e054      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	4b2e      	ldr	r3, [pc, #184]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2238      	movs	r2, #56	@ 0x38
 8004738:	401a      	ands	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	429a      	cmp	r2, r3
 8004742:	d1ec      	bne.n	800471e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004744:	4b27      	ldr	r3, [pc, #156]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2207      	movs	r2, #7
 800474a:	4013      	ands	r3, r2
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d21e      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2207      	movs	r2, #7
 8004758:	4393      	bics	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	4b21      	ldr	r3, [pc, #132]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004764:	f7fd fda6 	bl	80022b4 <HAL_GetTick>
 8004768:	0003      	movs	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800476c:	e009      	b.n	8004782 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476e:	f7fd fda1 	bl	80022b4 <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_RCC_ClockConfig+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e02c      	b.n	80047dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004782:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2207      	movs	r2, #7
 8004788:	4013      	ands	r3, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d1ee      	bne.n	800476e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2204      	movs	r2, #4
 8004796:	4013      	ands	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800479a:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <HAL_RCC_ClockConfig+0x200>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047ae:	f000 f829 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047b2:	0001      	movs	r1, r0
 80047b4:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	220f      	movs	r2, #15
 80047bc:	401a      	ands	r2, r3
 80047be:	4b0e      	ldr	r3, [pc, #56]	@ (80047f8 <HAL_RCC_ClockConfig+0x204>)
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	58d3      	ldr	r3, [r2, r3]
 80047c4:	221f      	movs	r2, #31
 80047c6:	4013      	ands	r3, r2
 80047c8:	000a      	movs	r2, r1
 80047ca:	40da      	lsrs	r2, r3
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCC_ClockConfig+0x208>)
 80047ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <HAL_RCC_ClockConfig+0x20c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fd fd11 	bl	80021fc <HAL_InitTick>
 80047da:	0003      	movs	r3, r0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40022000 	.word	0x40022000
 80047e8:	00001388 	.word	0x00001388
 80047ec:	40021000 	.word	0x40021000
 80047f0:	fffff0ff 	.word	0xfffff0ff
 80047f4:	ffff8fff 	.word	0xffff8fff
 80047f8:	08009554 	.word	0x08009554
 80047fc:	20000048 	.word	0x20000048
 8004800:	2000004c 	.word	0x2000004c

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480a:	4b3c      	ldr	r3, [pc, #240]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2238      	movs	r2, #56	@ 0x38
 8004810:	4013      	ands	r3, r2
 8004812:	d10f      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004814:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0adb      	lsrs	r3, r3, #11
 800481a:	2207      	movs	r2, #7
 800481c:	4013      	ands	r3, r2
 800481e:	2201      	movs	r2, #1
 8004820:	409a      	lsls	r2, r3
 8004822:	0013      	movs	r3, r2
 8004824:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	4835      	ldr	r0, [pc, #212]	@ (8004900 <HAL_RCC_GetSysClockFreq+0xfc>)
 800482a:	f7fb fc7d 	bl	8000128 <__udivsi3>
 800482e:	0003      	movs	r3, r0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e05d      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2238      	movs	r2, #56	@ 0x38
 800483a:	4013      	ands	r3, r2
 800483c:	2b08      	cmp	r3, #8
 800483e:	d102      	bne.n	8004846 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004840:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x100>)
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	e054      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2238      	movs	r2, #56	@ 0x38
 800484c:	4013      	ands	r3, r2
 800484e:	2b10      	cmp	r3, #16
 8004850:	d138      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004852:	4b2a      	ldr	r3, [pc, #168]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2203      	movs	r2, #3
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800485c:	4b27      	ldr	r3, [pc, #156]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	2207      	movs	r2, #7
 8004864:	4013      	ands	r3, r2
 8004866:	3301      	adds	r3, #1
 8004868:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d10d      	bne.n	800488c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	4824      	ldr	r0, [pc, #144]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x100>)
 8004874:	f7fb fc58 	bl	8000128 <__udivsi3>
 8004878:	0003      	movs	r3, r0
 800487a:	0019      	movs	r1, r3
 800487c:	4b1f      	ldr	r3, [pc, #124]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	227f      	movs	r2, #127	@ 0x7f
 8004884:	4013      	ands	r3, r2
 8004886:	434b      	muls	r3, r1
 8004888:	617b      	str	r3, [r7, #20]
        break;
 800488a:	e00d      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	481c      	ldr	r0, [pc, #112]	@ (8004900 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004890:	f7fb fc4a 	bl	8000128 <__udivsi3>
 8004894:	0003      	movs	r3, r0
 8004896:	0019      	movs	r1, r3
 8004898:	4b18      	ldr	r3, [pc, #96]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	227f      	movs	r2, #127	@ 0x7f
 80048a0:	4013      	ands	r3, r2
 80048a2:	434b      	muls	r3, r1
 80048a4:	617b      	str	r3, [r7, #20]
        break;
 80048a6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	0f5b      	lsrs	r3, r3, #29
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	3301      	adds	r3, #1
 80048b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	6978      	ldr	r0, [r7, #20]
 80048ba:	f7fb fc35 	bl	8000128 <__udivsi3>
 80048be:	0003      	movs	r3, r0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e015      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80048c4:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2238      	movs	r2, #56	@ 0x38
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d103      	bne.n	80048d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048d8:	4b08      	ldr	r3, [pc, #32]	@ (80048fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2238      	movs	r2, #56	@ 0x38
 80048de:	4013      	ands	r3, r2
 80048e0:	2b18      	cmp	r3, #24
 80048e2:	d103      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80048e4:	23fa      	movs	r3, #250	@ 0xfa
 80048e6:	01db      	lsls	r3, r3, #7
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e001      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048f0:	693b      	ldr	r3, [r7, #16]
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b006      	add	sp, #24
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	40021000 	.word	0x40021000
 8004900:	00f42400 	.word	0x00f42400
 8004904:	007a1200 	.word	0x007a1200

08004908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <HAL_RCC_GetHCLKFreq+0x10>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	20000048 	.word	0x20000048

0800491c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800491c:	b5b0      	push	{r4, r5, r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004920:	f7ff fff2 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004924:	0004      	movs	r4, r0
 8004926:	f7ff fb3f 	bl	8003fa8 <LL_RCC_GetAPB1Prescaler>
 800492a:	0003      	movs	r3, r0
 800492c:	0b1a      	lsrs	r2, r3, #12
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004930:	0092      	lsls	r2, r2, #2
 8004932:	58d3      	ldr	r3, [r2, r3]
 8004934:	221f      	movs	r2, #31
 8004936:	4013      	ands	r3, r2
 8004938:	40dc      	lsrs	r4, r3
 800493a:	0023      	movs	r3, r4
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	bdb0      	pop	{r4, r5, r7, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	08009594 	.word	0x08009594

08004948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004950:	2313      	movs	r3, #19
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004958:	2312      	movs	r3, #18
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	2380      	movs	r3, #128	@ 0x80
 8004966:	029b      	lsls	r3, r3, #10
 8004968:	4013      	ands	r3, r2
 800496a:	d100      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800496c:	e0a3      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496e:	2011      	movs	r0, #17
 8004970:	183b      	adds	r3, r7, r0
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004976:	4bc3      	ldr	r3, [pc, #780]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497a:	2380      	movs	r3, #128	@ 0x80
 800497c:	055b      	lsls	r3, r3, #21
 800497e:	4013      	ands	r3, r2
 8004980:	d110      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	4bc0      	ldr	r3, [pc, #768]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004986:	4bbf      	ldr	r3, [pc, #764]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004988:	2180      	movs	r1, #128	@ 0x80
 800498a:	0549      	lsls	r1, r1, #21
 800498c:	430a      	orrs	r2, r1
 800498e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004990:	4bbc      	ldr	r3, [pc, #752]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004994:	2380      	movs	r3, #128	@ 0x80
 8004996:	055b      	lsls	r3, r3, #21
 8004998:	4013      	ands	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
 800499c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499e:	183b      	adds	r3, r7, r0
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4bb7      	ldr	r3, [pc, #732]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	0049      	lsls	r1, r1, #1
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049b2:	f7fd fc7f 	bl	80022b4 <HAL_GetTick>
 80049b6:	0003      	movs	r3, r0
 80049b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ba:	e00b      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049bc:	f7fd fc7a 	bl	80022b4 <HAL_GetTick>
 80049c0:	0002      	movs	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d904      	bls.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80049ca:	2313      	movs	r3, #19
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	2203      	movs	r2, #3
 80049d0:	701a      	strb	r2, [r3, #0]
        break;
 80049d2:	e005      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d4:	4bac      	ldr	r3, [pc, #688]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4013      	ands	r3, r2
 80049de:	d0ed      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80049e0:	2313      	movs	r3, #19
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d154      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ea:	4ba6      	ldr	r3, [pc, #664]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ee:	23c0      	movs	r3, #192	@ 0xc0
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4013      	ands	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d019      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d014      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a06:	4b9f      	ldr	r3, [pc, #636]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	4aa0      	ldr	r2, [pc, #640]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a10:	4b9c      	ldr	r3, [pc, #624]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a14:	4b9b      	ldr	r3, [pc, #620]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a16:	2180      	movs	r1, #128	@ 0x80
 8004a18:	0249      	lsls	r1, r1, #9
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1e:	4b99      	ldr	r3, [pc, #612]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a22:	4b98      	ldr	r3, [pc, #608]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a24:	499a      	ldr	r1, [pc, #616]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004a26:	400a      	ands	r2, r1
 8004a28:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a2a:	4b96      	ldr	r3, [pc, #600]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2201      	movs	r2, #1
 8004a34:	4013      	ands	r3, r2
 8004a36:	d016      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd fc3c 	bl	80022b4 <HAL_GetTick>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a40:	e00c      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd fc37 	bl	80022b4 <HAL_GetTick>
 8004a46:	0002      	movs	r2, r0
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	4a91      	ldr	r2, [pc, #580]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d904      	bls.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a52:	2313      	movs	r3, #19
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2203      	movs	r2, #3
 8004a58:	701a      	strb	r2, [r3, #0]
            break;
 8004a5a:	e004      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5c:	4b89      	ldr	r3, [pc, #548]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	2202      	movs	r2, #2
 8004a62:	4013      	ands	r3, r2
 8004a64:	d0ed      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a66:	2313      	movs	r3, #19
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a70:	4b84      	ldr	r3, [pc, #528]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	4a85      	ldr	r2, [pc, #532]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a7e:	4b81      	ldr	r3, [pc, #516]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a80:	430a      	orrs	r2, r1
 8004a82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a84:	e00c      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a86:	2312      	movs	r3, #18
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	2213      	movs	r2, #19
 8004a8c:	18ba      	adds	r2, r7, r2
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e005      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	2312      	movs	r3, #18
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2213      	movs	r2, #19
 8004a9a:	18ba      	adds	r2, r7, r2
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aa0:	2311      	movs	r3, #17
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aae:	4b75      	ldr	r3, [pc, #468]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab0:	4979      	ldr	r1, [pc, #484]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac0:	4b70      	ldr	r3, [pc, #448]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	4393      	bics	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	4b6d      	ldr	r3, [pc, #436]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	4013      	ands	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ade:	4b69      	ldr	r3, [pc, #420]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae2:	220c      	movs	r2, #12
 8004ae4:	4393      	bics	r3, r2
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	4b65      	ldr	r3, [pc, #404]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aee:	430a      	orrs	r2, r1
 8004af0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2210      	movs	r2, #16
 8004af8:	4013      	ands	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004afc:	4b61      	ldr	r3, [pc, #388]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b00:	4a66      	ldr	r2, [pc, #408]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b1c:	4b59      	ldr	r3, [pc, #356]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b20:	4a5f      	ldr	r2, [pc, #380]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	4b56      	ldr	r3, [pc, #344]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b3c:	4b51      	ldr	r3, [pc, #324]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	4a58      	ldr	r2, [pc, #352]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2220      	movs	r2, #32
 8004b56:	4013      	ands	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5e:	4a52      	ldr	r2, [pc, #328]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	4b46      	ldr	r3, [pc, #280]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	01db      	lsls	r3, r3, #7
 8004b76:	4013      	ands	r3, r2
 8004b78:	d015      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b7a:	4b42      	ldr	r3, [pc, #264]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	0899      	lsrs	r1, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	4b3f      	ldr	r3, [pc, #252]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b98:	4b3a      	ldr	r3, [pc, #232]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	4b39      	ldr	r3, [pc, #228]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9e:	2180      	movs	r1, #128	@ 0x80
 8004ba0:	0249      	lsls	r1, r1, #9
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	031b      	lsls	r3, r3, #12
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bb2:	4b34      	ldr	r3, [pc, #208]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb6:	2240      	movs	r2, #64	@ 0x40
 8004bb8:	4393      	bics	r3, r2
 8004bba:	0019      	movs	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bc0:	4b30      	ldr	r3, [pc, #192]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	039b      	lsls	r3, r3, #14
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	4a35      	ldr	r2, [pc, #212]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004be0:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be2:	430a      	orrs	r2, r1
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	03db      	lsls	r3, r3, #15
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	4b23      	ldr	r3, [pc, #140]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf8:	2180      	movs	r1, #128	@ 0x80
 8004bfa:	0449      	lsls	r1, r1, #17
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	03db      	lsls	r3, r3, #15
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d016      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c10:	4a27      	ldr	r2, [pc, #156]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c24:	2380      	movs	r3, #128	@ 0x80
 8004c26:	045b      	lsls	r3, r3, #17
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c2c:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	4b14      	ldr	r3, [pc, #80]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	0449      	lsls	r1, r1, #17
 8004c36:	430a      	orrs	r2, r1
 8004c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	4013      	ands	r3, r2
 8004c44:	d016      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c56:	430a      	orrs	r2, r1
 8004c58:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	2380      	movs	r3, #128	@ 0x80
 8004c60:	01db      	lsls	r3, r3, #7
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d106      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c66:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6c:	2180      	movs	r1, #128	@ 0x80
 8004c6e:	0249      	lsls	r1, r1, #9
 8004c70:	430a      	orrs	r2, r1
 8004c72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c74:	2312      	movs	r3, #18
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	781b      	ldrb	r3, [r3, #0]
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b006      	add	sp, #24
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
 8004c8c:	fffffcff 	.word	0xfffffcff
 8004c90:	fffeffff 	.word	0xfffeffff
 8004c94:	00001388 	.word	0x00001388
 8004c98:	efffffff 	.word	0xefffffff
 8004c9c:	fffff3ff 	.word	0xfffff3ff
 8004ca0:	fff3ffff 	.word	0xfff3ffff
 8004ca4:	ffcfffff 	.word	0xffcfffff
 8004ca8:	ffffcfff 	.word	0xffffcfff
 8004cac:	ffbfffff 	.word	0xffbfffff
 8004cb0:	feffffff 	.word	0xfeffffff
 8004cb4:	ffff3fff 	.word	0xffff3fff

08004cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e04a      	b.n	8004d60 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	223d      	movs	r2, #61	@ 0x3d
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	223c      	movs	r2, #60	@ 0x3c
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7fc ffe5 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	223d      	movs	r2, #61	@ 0x3d
 8004cea:	2102      	movs	r1, #2
 8004cec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	0010      	movs	r0, r2
 8004cfa:	f000 fe6f 	bl	80059dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2248      	movs	r2, #72	@ 0x48
 8004d02:	2101      	movs	r1, #1
 8004d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223e      	movs	r2, #62	@ 0x3e
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223f      	movs	r2, #63	@ 0x3f
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2240      	movs	r2, #64	@ 0x40
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2241      	movs	r2, #65	@ 0x41
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2242      	movs	r2, #66	@ 0x42
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2243      	movs	r2, #67	@ 0x43
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2244      	movs	r2, #68	@ 0x44
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2245      	movs	r2, #69	@ 0x45
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2246      	movs	r2, #70	@ 0x46
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2247      	movs	r2, #71	@ 0x47
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223d      	movs	r2, #61	@ 0x3d
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	223d      	movs	r2, #61	@ 0x3d
 8004d74:	5c9b      	ldrb	r3, [r3, r2]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e042      	b.n	8004e06 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	223d      	movs	r2, #61	@ 0x3d
 8004d84:	2102      	movs	r1, #2
 8004d86:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2101      	movs	r1, #1
 8004d94:	430a      	orrs	r2, r1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xa8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	05db      	lsls	r3, r3, #23
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xac>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d116      	bne.n	8004df0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a14      	ldr	r2, [pc, #80]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xb4>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	d016      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x9a>
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	025b      	lsls	r3, r3, #9
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d011      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	e008      	b.n	8004e02 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b004      	add	sp, #16
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	00010007 	.word	0x00010007

08004e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e04a      	b.n	8004ec8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	223d      	movs	r2, #61	@ 0x3d
 8004e36:	5c9b      	ldrb	r3, [r3, r2]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	223c      	movs	r2, #60	@ 0x3c
 8004e42:	2100      	movs	r1, #0
 8004e44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7fc fe73 	bl	8001b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	223d      	movs	r2, #61	@ 0x3d
 8004e52:	2102      	movs	r1, #2
 8004e54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	0019      	movs	r1, r3
 8004e60:	0010      	movs	r0, r2
 8004e62:	f000 fdbb 	bl	80059dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2248      	movs	r2, #72	@ 0x48
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223e      	movs	r2, #62	@ 0x3e
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	223f      	movs	r2, #63	@ 0x3f
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2240      	movs	r2, #64	@ 0x40
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2241      	movs	r2, #65	@ 0x41
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2242      	movs	r2, #66	@ 0x42
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2243      	movs	r2, #67	@ 0x43
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2244      	movs	r2, #68	@ 0x44
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2245      	movs	r2, #69	@ 0x45
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2246      	movs	r2, #70	@ 0x46
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2247      	movs	r2, #71	@ 0x47
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	223d      	movs	r2, #61	@ 0x3d
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x22>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	223e      	movs	r2, #62	@ 0x3e
 8004ee4:	5c9b      	ldrb	r3, [r3, r2]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	1e5a      	subs	r2, r3, #1
 8004eec:	4193      	sbcs	r3, r2
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e037      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d108      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x3a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223f      	movs	r2, #63	@ 0x3f
 8004efc:	5c9b      	ldrb	r3, [r3, r2]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	4193      	sbcs	r3, r2
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e02b      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d108      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x52>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2240      	movs	r2, #64	@ 0x40
 8004f14:	5c9b      	ldrb	r3, [r3, r2]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	1e5a      	subs	r2, r3, #1
 8004f1c:	4193      	sbcs	r3, r2
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e01f      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d108      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x6a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2241      	movs	r2, #65	@ 0x41
 8004f2c:	5c9b      	ldrb	r3, [r3, r2]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	4193      	sbcs	r3, r2
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	e013      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d108      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x82>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2242      	movs	r2, #66	@ 0x42
 8004f44:	5c9b      	ldrb	r3, [r3, r2]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	1e5a      	subs	r2, r3, #1
 8004f4c:	4193      	sbcs	r3, r2
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	e007      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2243      	movs	r2, #67	@ 0x43
 8004f56:	5c9b      	ldrb	r3, [r3, r2]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	4193      	sbcs	r3, r2
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e08b      	b.n	8005082 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xaa>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	223e      	movs	r2, #62	@ 0x3e
 8004f74:	2102      	movs	r1, #2
 8004f76:	5499      	strb	r1, [r3, r2]
 8004f78:	e023      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xba>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	223f      	movs	r2, #63	@ 0x3f
 8004f84:	2102      	movs	r1, #2
 8004f86:	5499      	strb	r1, [r3, r2]
 8004f88:	e01b      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xca>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2240      	movs	r2, #64	@ 0x40
 8004f94:	2102      	movs	r1, #2
 8004f96:	5499      	strb	r1, [r3, r2]
 8004f98:	e013      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xda>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2241      	movs	r2, #65	@ 0x41
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	5499      	strb	r1, [r3, r2]
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xea>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2242      	movs	r2, #66	@ 0x42
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	5499      	strb	r1, [r3, r2]
 8004fb8:	e003      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2243      	movs	r2, #67	@ 0x43
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f001 fa92 	bl	80064f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800508c <HAL_TIM_PWM_Start+0x1bc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x128>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2c      	ldr	r2, [pc, #176]	@ (8005090 <HAL_TIM_PWM_Start+0x1c0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x128>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8005094 <HAL_TIM_PWM_Start+0x1c4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x128>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a29      	ldr	r2, [pc, #164]	@ (8005098 <HAL_TIM_PWM_Start+0x1c8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x12c>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_TIM_PWM_Start+0x12e>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2180      	movs	r1, #128	@ 0x80
 800500e:	0209      	lsls	r1, r1, #8
 8005010:	430a      	orrs	r2, r1
 8005012:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1c      	ldr	r2, [pc, #112]	@ (800508c <HAL_TIM_PWM_Start+0x1bc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <HAL_TIM_PWM_Start+0x16e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	05db      	lsls	r3, r3, #23
 8005026:	429a      	cmp	r2, r3
 8005028:	d009      	beq.n	800503e <HAL_TIM_PWM_Start+0x16e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	@ (800509c <HAL_TIM_PWM_Start+0x1cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_PWM_Start+0x16e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <HAL_TIM_PWM_Start+0x1c0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d116      	bne.n	800506c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_TIM_PWM_Start+0x1d0>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d016      	beq.n	800507e <HAL_TIM_PWM_Start+0x1ae>
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	2380      	movs	r3, #128	@ 0x80
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	429a      	cmp	r2, r3
 8005058:	d011      	beq.n	800507e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2101      	movs	r1, #1
 8005066:	430a      	orrs	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	e008      	b.n	800507e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2101      	movs	r1, #1
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e000      	b.n	8005080 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b004      	add	sp, #16
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40000400 	.word	0x40000400
 80050a0:	00010007 	.word	0x00010007

080050a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e04a      	b.n	800514c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	223d      	movs	r2, #61	@ 0x3d
 80050ba:	5c9b      	ldrb	r3, [r3, r2]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	223c      	movs	r2, #60	@ 0x3c
 80050c6:	2100      	movs	r1, #0
 80050c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fc fda5 	bl	8001c1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223d      	movs	r2, #61	@ 0x3d
 80050d6:	2102      	movs	r1, #2
 80050d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	0019      	movs	r1, r3
 80050e4:	0010      	movs	r0, r2
 80050e6:	f000 fc79 	bl	80059dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2248      	movs	r2, #72	@ 0x48
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	223e      	movs	r2, #62	@ 0x3e
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	223f      	movs	r2, #63	@ 0x3f
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2240      	movs	r2, #64	@ 0x40
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2241      	movs	r2, #65	@ 0x41
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2242      	movs	r2, #66	@ 0x42
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2243      	movs	r2, #67	@ 0x43
 800511e:	2101      	movs	r1, #1
 8005120:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2244      	movs	r2, #68	@ 0x44
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2245      	movs	r2, #69	@ 0x45
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2246      	movs	r2, #70	@ 0x46
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2247      	movs	r2, #71	@ 0x47
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	223d      	movs	r2, #61	@ 0x3d
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2202      	movs	r2, #2
 8005170:	4013      	ands	r3, r2
 8005172:	d021      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d01d      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2203      	movs	r2, #3
 8005182:	4252      	negs	r2, r2
 8005184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2203      	movs	r2, #3
 8005194:	4013      	ands	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 fc06 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 80051a0:	e007      	b.n	80051b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 fbf9 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fc05 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	d01e      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2205      	movs	r2, #5
 80051ce:	4252      	negs	r2, r2
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	23c0      	movs	r3, #192	@ 0xc0
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4013      	ands	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f000 fbdf 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 80051ee:	e007      	b.n	8005200 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 fbd2 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 fbde 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2208      	movs	r2, #8
 800520a:	4013      	ands	r3, r2
 800520c:	d021      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2208      	movs	r2, #8
 8005212:	4013      	ands	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2209      	movs	r2, #9
 800521c:	4252      	negs	r2, r2
 800521e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2204      	movs	r2, #4
 8005224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2203      	movs	r2, #3
 800522e:	4013      	ands	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 fbb9 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 800523a:	e007      	b.n	800524c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0018      	movs	r0, r3
 8005240:	f000 fbac 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0018      	movs	r0, r3
 8005248:	f000 fbb8 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2210      	movs	r2, #16
 8005256:	4013      	ands	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d01e      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2211      	movs	r2, #17
 8005268:	4252      	negs	r2, r2
 800526a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2208      	movs	r2, #8
 8005270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	23c0      	movs	r3, #192	@ 0xc0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4013      	ands	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f000 fb92 	bl	80059ac <HAL_TIM_IC_CaptureCallback>
 8005288:	e007      	b.n	800529a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f000 fb85 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fb91 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d008      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2202      	movs	r2, #2
 80052b6:	4252      	negs	r2, r2
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f000 fb65 	bl	800598c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2280      	movs	r2, #128	@ 0x80
 80052c6:	4013      	ands	r3, r2
 80052c8:	d104      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	019b      	lsls	r3, r3, #6
 80052d0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d2:	d00b      	beq.n	80052ec <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2280      	movs	r2, #128	@ 0x80
 80052d8:	4013      	ands	r3, r2
 80052da:	d007      	beq.n	80052ec <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <HAL_TIM_IRQHandler+0x208>)
 80052e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f001 fa3a 	bl	8006760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	d00b      	beq.n	800530e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2280      	movs	r2, #128	@ 0x80
 80052fa:	4013      	ands	r3, r2
 80052fc:	d007      	beq.n	800530e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a17      	ldr	r2, [pc, #92]	@ (8005360 <HAL_TIM_IRQHandler+0x20c>)
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f001 fa31 	bl	8006770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2240      	movs	r2, #64	@ 0x40
 8005312:	4013      	ands	r3, r2
 8005314:	d00c      	beq.n	8005330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	4013      	ands	r3, r2
 800531c:	d008      	beq.n	8005330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2241      	movs	r2, #65	@ 0x41
 8005324:	4252      	negs	r2, r2
 8005326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 fb4e 	bl	80059cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2220      	movs	r2, #32
 8005334:	4013      	ands	r3, r2
 8005336:	d00c      	beq.n	8005352 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	4013      	ands	r3, r2
 800533e:	d008      	beq.n	8005352 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2221      	movs	r2, #33	@ 0x21
 8005346:	4252      	negs	r2, r2
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f001 f9ff 	bl	8006750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	46bd      	mov	sp, r7
 8005356:	b004      	add	sp, #16
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	ffffdf7f 	.word	0xffffdf7f
 8005360:	fffffeff 	.word	0xfffffeff

08005364 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005370:	2317      	movs	r3, #23
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	223c      	movs	r2, #60	@ 0x3c
 800537c:	5c9b      	ldrb	r3, [r3, r2]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_TIM_IC_ConfigChannel+0x22>
 8005382:	2302      	movs	r3, #2
 8005384:	e08c      	b.n	80054a0 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	223c      	movs	r2, #60	@ 0x3c
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11b      	bne.n	80053cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053a4:	f000 ff02 	bl	80061ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	210c      	movs	r1, #12
 80053b4:	438a      	bics	r2, r1
 80053b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	619a      	str	r2, [r3, #24]
 80053ca:	e062      	b.n	8005492 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d11c      	bne.n	800540c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80053e2:	f000 ff6d 	bl	80062c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	492d      	ldr	r1, [pc, #180]	@ (80054a8 <HAL_TIM_IC_ConfigChannel+0x144>)
 80053f2:	400a      	ands	r2, r1
 80053f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6999      	ldr	r1, [r3, #24]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	021a      	lsls	r2, r3, #8
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	619a      	str	r2, [r3, #24]
 800540a:	e042      	b.n	8005492 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b08      	cmp	r3, #8
 8005410:	d11b      	bne.n	800544a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005422:	f000 ffc1 	bl	80063a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	210c      	movs	r1, #12
 8005432:	438a      	bics	r2, r1
 8005434:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69d9      	ldr	r1, [r3, #28]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	61da      	str	r2, [r3, #28]
 8005448:	e023      	b.n	8005492 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b0c      	cmp	r3, #12
 800544e:	d11c      	bne.n	800548a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005460:	f000 ffe2 	bl	8006428 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	490e      	ldr	r1, [pc, #56]	@ (80054a8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005470:	400a      	ands	r2, r1
 8005472:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69d9      	ldr	r1, [r3, #28]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	61da      	str	r2, [r3, #28]
 8005488:	e003      	b.n	8005492 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800548a:	2317      	movs	r3, #23
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	223c      	movs	r2, #60	@ 0x3c
 8005496:	2100      	movs	r1, #0
 8005498:	5499      	strb	r1, [r3, r2]

  return status;
 800549a:	2317      	movs	r3, #23
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	781b      	ldrb	r3, [r3, #0]
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b006      	add	sp, #24
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	fffff3ff 	.word	0xfffff3ff

080054ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b8:	2317      	movs	r3, #23
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	223c      	movs	r2, #60	@ 0x3c
 80054c4:	5c9b      	ldrb	r3, [r3, r2]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e0e5      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	223c      	movs	r2, #60	@ 0x3c
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b14      	cmp	r3, #20
 80054da:	d900      	bls.n	80054de <HAL_TIM_PWM_ConfigChannel+0x32>
 80054dc:	e0d1      	b.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	009a      	lsls	r2, r3, #2
 80054e2:	4b70      	ldr	r3, [pc, #448]	@ (80056a4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80054e4:	18d3      	adds	r3, r2, r3
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0011      	movs	r1, r2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 fb00 	bl	8005af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2108      	movs	r1, #8
 8005504:	430a      	orrs	r2, r1
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2104      	movs	r1, #4
 8005514:	438a      	bics	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e0af      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	0011      	movs	r1, r2
 8005534:	0018      	movs	r0, r3
 8005536:	f000 fb69 	bl	8005c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	0109      	lsls	r1, r1, #4
 8005548:	430a      	orrs	r2, r1
 800554a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4954      	ldr	r1, [pc, #336]	@ (80056a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005558:	400a      	ands	r2, r1
 800555a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6999      	ldr	r1, [r3, #24]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	619a      	str	r2, [r3, #24]
      break;
 8005570:	e08c      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	0011      	movs	r1, r2
 800557a:	0018      	movs	r0, r3
 800557c:	f000 fbca 	bl	8005d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2108      	movs	r1, #8
 800558c:	430a      	orrs	r2, r1
 800558e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2104      	movs	r1, #4
 800559c:	438a      	bics	r2, r1
 800559e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69d9      	ldr	r1, [r3, #28]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	61da      	str	r2, [r3, #28]
      break;
 80055b2:	e06b      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	0011      	movs	r1, r2
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 fc31 	bl	8005e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2180      	movs	r1, #128	@ 0x80
 80055ce:	0109      	lsls	r1, r1, #4
 80055d0:	430a      	orrs	r2, r1
 80055d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4932      	ldr	r1, [pc, #200]	@ (80056a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80055e0:	400a      	ands	r2, r1
 80055e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69d9      	ldr	r1, [r3, #28]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	61da      	str	r2, [r3, #28]
      break;
 80055f8:	e048      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	0011      	movs	r1, r2
 8005602:	0018      	movs	r0, r3
 8005604:	f000 fc78 	bl	8005ef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2108      	movs	r1, #8
 8005614:	430a      	orrs	r2, r1
 8005616:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2104      	movs	r1, #4
 8005624:	438a      	bics	r2, r1
 8005626:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800563a:	e027      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	0011      	movs	r1, r2
 8005644:	0018      	movs	r0, r3
 8005646:	f000 fcb7 	bl	8005fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2180      	movs	r1, #128	@ 0x80
 8005656:	0109      	lsls	r1, r1, #4
 8005658:	430a      	orrs	r2, r1
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4910      	ldr	r1, [pc, #64]	@ (80056a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005668:	400a      	ands	r2, r1
 800566a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	021a      	lsls	r2, r3, #8
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005680:	e004      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005682:	2317      	movs	r3, #23
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
      break;
 800568a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	223c      	movs	r2, #60	@ 0x3c
 8005690:	2100      	movs	r1, #0
 8005692:	5499      	strb	r1, [r3, r2]

  return status;
 8005694:	2317      	movs	r3, #23
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	781b      	ldrb	r3, [r3, #0]
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b006      	add	sp, #24
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	080095b4 	.word	0x080095b4
 80056a8:	fffffbff 	.word	0xfffffbff

080056ac <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2317      	movs	r3, #23
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	223c      	movs	r2, #60	@ 0x3c
 80056c4:	5c9b      	ldrb	r3, [r3, r2]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_TIM_ConfigOCrefClear+0x22>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e10e      	b.n	80058ec <HAL_TIM_ConfigOCrefClear+0x240>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	223c      	movs	r2, #60	@ 0x3c
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	223d      	movs	r2, #61	@ 0x3d
 80056da:	2102      	movs	r1, #2
 80056dc:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2280      	movs	r2, #128	@ 0x80
 80056e4:	0592      	lsls	r2, r2, #22
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d02f      	beq.n	800574a <HAL_TIM_ConfigOCrefClear+0x9e>
 80056ea:	2280      	movs	r2, #128	@ 0x80
 80056ec:	0592      	lsls	r2, r2, #22
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d854      	bhi.n	800579c <HAL_TIM_ConfigOCrefClear+0xf0>
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d914      	bls.n	8005720 <HAL_TIM_ConfigOCrefClear+0x74>
 80056f6:	2280      	movs	r2, #128	@ 0x80
 80056f8:	0552      	lsls	r2, r2, #21
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d14e      	bne.n	800579c <HAL_TIM_ConfigOCrefClear+0xf0>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	497a      	ldr	r1, [pc, #488]	@ (80058f4 <HAL_TIM_ConfigOCrefClear+0x248>)
 800570a:	400a      	ands	r2, r1
 800570c:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	438a      	bics	r2, r1
 800571c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800571e:	e042      	b.n	80057a6 <HAL_TIM_ConfigOCrefClear+0xfa>
#if defined(COMP3)
    case TIM_CLEARINPUTSOURCE_COMP3:
#endif /* COMP3 */
    {
      /* Clear the OCREF clear selection bit */
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2108      	movs	r1, #8
 800572c:	438a      	bics	r2, r1
 800572e:	609a      	str	r2, [r3, #8]

      /* OCREF_CLR_INT is connected to COMPx output */
      MODIFY_REG(htim->Instance->OR1, TIMx_OR1_OCREF_CLR, sClearInputConfig->ClearInputSource);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005736:	2201      	movs	r2, #1
 8005738:	4393      	bics	r3, r2
 800573a:	0019      	movs	r1, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005748:	e02d      	b.n	80057a6 <HAL_TIM_ConfigOCrefClear+0xfa>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_TIM_ConfigOCrefClear+0xba>
      {
        htim->State = HAL_TIM_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	223d      	movs	r2, #61	@ 0x3d
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(htim);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	223c      	movs	r2, #60	@ 0x3c
 800575e:	2100      	movs	r1, #0
 8005760:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0c2      	b.n	80058ec <HAL_TIM_ConfigOCrefClear+0x240>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005776:	f000 fe9d 	bl	80064b4 <TIM_ETR_SetConfig>

      /* Set the OCREF clear selection bit */
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2108      	movs	r1, #8
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2101      	movs	r1, #1
 8005796:	438a      	bics	r2, r1
 8005798:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800579a:	e004      	b.n	80057a6 <HAL_TIM_ConfigOCrefClear+0xfa>
    }

    default:
      status = HAL_ERROR;
 800579c:	2317      	movs	r3, #23
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	2201      	movs	r2, #1
 80057a2:	701a      	strb	r2, [r3, #0]
      break;
 80057a4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80057a6:	2317      	movs	r3, #23
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d000      	beq.n	80057b2 <HAL_TIM_ConfigOCrefClear+0x106>
 80057b0:	e091      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
  {
    switch (Channel)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b14      	cmp	r3, #20
 80057b6:	d900      	bls.n	80057ba <HAL_TIM_ConfigOCrefClear+0x10e>
 80057b8:	e08c      	b.n	80058d4 <HAL_TIM_ConfigOCrefClear+0x228>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	009a      	lsls	r2, r3, #2
 80057be:	4b4e      	ldr	r3, [pc, #312]	@ (80058f8 <HAL_TIM_ConfigOCrefClear+0x24c>)
 80057c0:	18d3      	adds	r3, r2, r3
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	469f      	mov	pc, r3
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_TIM_ConfigOCrefClear+0x134>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2180      	movs	r1, #128	@ 0x80
 80057da:	430a      	orrs	r2, r1
 80057dc:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 80057de:	e07a      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	438a      	bics	r2, r1
 80057ee:	619a      	str	r2, [r3, #24]
        break;
 80057f0:	e071      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_TIM_ConfigOCrefClear+0x162>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2180      	movs	r1, #128	@ 0x80
 8005806:	0209      	lsls	r1, r1, #8
 8005808:	430a      	orrs	r2, r1
 800580a:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 800580c:	e063      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4938      	ldr	r1, [pc, #224]	@ (80058fc <HAL_TIM_ConfigOCrefClear+0x250>)
 800581a:	400a      	ands	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
        break;
 800581e:	e05a      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_TIM_ConfigOCrefClear+0x18e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2180      	movs	r1, #128	@ 0x80
 8005834:	430a      	orrs	r2, r1
 8005836:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8005838:	e04d      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2180      	movs	r1, #128	@ 0x80
 8005846:	438a      	bics	r2, r1
 8005848:	61da      	str	r2, [r3, #28]
        break;
 800584a:	e044      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_TIM_ConfigOCrefClear+0x1bc>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2180      	movs	r1, #128	@ 0x80
 8005860:	0209      	lsls	r1, r1, #8
 8005862:	430a      	orrs	r2, r1
 8005864:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 8005866:	e036      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4922      	ldr	r1, [pc, #136]	@ (80058fc <HAL_TIM_ConfigOCrefClear+0x250>)
 8005874:	400a      	ands	r2, r1
 8005876:	61da      	str	r2, [r3, #28]
        break;
 8005878:	e02d      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_5:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_TIM_ConfigOCrefClear+0x1e8>
        {
          /* Enable the OCREF clear feature for Channel 5 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2180      	movs	r1, #128	@ 0x80
 800588e:	430a      	orrs	r2, r1
 8005890:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 5 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
        }
        break;
 8005892:	e020      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2180      	movs	r1, #128	@ 0x80
 80058a0:	438a      	bics	r2, r1
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80058a4:	e017      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_6:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_TIM_ConfigOCrefClear+0x216>
        {
          /* Enable the OCREF clear feature for Channel 6 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2180      	movs	r1, #128	@ 0x80
 80058ba:	0209      	lsls	r1, r1, #8
 80058bc:	430a      	orrs	r2, r1
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 6 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
        }
        break;
 80058c0:	e009      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	490b      	ldr	r1, [pc, #44]	@ (80058fc <HAL_TIM_ConfigOCrefClear+0x250>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80058d2:	e000      	b.n	80058d6 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      default:
        break;
 80058d4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	223d      	movs	r2, #61	@ 0x3d
 80058da:	2101      	movs	r1, #1
 80058dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	223c      	movs	r2, #60	@ 0x3c
 80058e2:	2100      	movs	r1, #0
 80058e4:	5499      	strb	r1, [r3, r2]

  return status;
 80058e6:	2317      	movs	r3, #23
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	781b      	ldrb	r3, [r3, #0]
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b006      	add	sp, #24
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	ffff00f7 	.word	0xffff00f7
 80058f8:	08009608 	.word	0x08009608
 80058fc:	ffff7fff 	.word	0xffff7fff

08005900 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	223c      	movs	r2, #60	@ 0x3c
 800590e:	5c9b      	ldrb	r3, [r3, r2]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005914:	2302      	movs	r3, #2
 8005916:	e032      	b.n	800597e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	223c      	movs	r2, #60	@ 0x3c
 800591c:	2101      	movs	r1, #1
 800591e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	223d      	movs	r2, #61	@ 0x3d
 8005924:	2102      	movs	r1, #2
 8005926:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0011      	movs	r1, r2
 800592e:	0018      	movs	r0, r3
 8005930:	f000 fba6 	bl	8006080 <TIM_SlaveTimer_SetConfig>
 8005934:	1e03      	subs	r3, r0, #0
 8005936:	d009      	beq.n	800594c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	223d      	movs	r2, #61	@ 0x3d
 800593c:	2101      	movs	r1, #1
 800593e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	223c      	movs	r2, #60	@ 0x3c
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e018      	b.n	800597e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2140      	movs	r1, #64	@ 0x40
 8005958:	438a      	bics	r2, r1
 800595a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4908      	ldr	r1, [pc, #32]	@ (8005988 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005968:	400a      	ands	r2, r1
 800596a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	223d      	movs	r2, #61	@ 0x3d
 8005970:	2101      	movs	r1, #1
 8005972:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	223c      	movs	r2, #60	@ 0x3c
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	0018      	movs	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	ffffbfff 	.word	0xffffbfff

0800598c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005994:	46c0      	nop			@ (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a4:	46c0      	nop			@ (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b4:	46c0      	nop			@ (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b002      	add	sp, #8
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c4:	46c0      	nop			@ (mov r8, r8)
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b002      	add	sp, #8
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d4:	46c0      	nop			@ (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3b      	ldr	r2, [pc, #236]	@ (8005adc <TIM_Base_SetConfig+0x100>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d008      	beq.n	8005a06 <TIM_Base_SetConfig+0x2a>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	05db      	lsls	r3, r3, #23
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d003      	beq.n	8005a06 <TIM_Base_SetConfig+0x2a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a37      	ldr	r2, [pc, #220]	@ (8005ae0 <TIM_Base_SetConfig+0x104>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d108      	bne.n	8005a18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2270      	movs	r2, #112	@ 0x70
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a30      	ldr	r2, [pc, #192]	@ (8005adc <TIM_Base_SetConfig+0x100>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <TIM_Base_SetConfig+0x76>
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	2380      	movs	r3, #128	@ 0x80
 8005a24:	05db      	lsls	r3, r3, #23
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d013      	beq.n	8005a52 <TIM_Base_SetConfig+0x76>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae0 <TIM_Base_SetConfig+0x104>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_Base_SetConfig+0x76>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae4 <TIM_Base_SetConfig+0x108>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0x76>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae8 <TIM_Base_SetConfig+0x10c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0x76>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	@ (8005aec <TIM_Base_SetConfig+0x110>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0x76>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	@ (8005af0 <TIM_Base_SetConfig+0x114>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a27      	ldr	r2, [pc, #156]	@ (8005af4 <TIM_Base_SetConfig+0x118>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2280      	movs	r2, #128	@ 0x80
 8005a68:	4393      	bics	r3, r2
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <TIM_Base_SetConfig+0x100>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_Base_SetConfig+0xce>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a14      	ldr	r2, [pc, #80]	@ (8005ae8 <TIM_Base_SetConfig+0x10c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_Base_SetConfig+0xce>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	@ (8005aec <TIM_Base_SetConfig+0x110>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_Base_SetConfig+0xce>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a12      	ldr	r2, [pc, #72]	@ (8005af0 <TIM_Base_SetConfig+0x114>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d103      	bne.n	8005ab2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2201      	movs	r2, #1
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d106      	bne.n	8005ad2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	4393      	bics	r3, r2
 8005acc:	001a      	movs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	611a      	str	r2, [r3, #16]
  }
}
 8005ad2:	46c0      	nop			@ (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b004      	add	sp, #16
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40002000 	.word	0x40002000
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	fffffcff 	.word	0xfffffcff

08005af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4393      	bics	r3, r2
 8005b10:	001a      	movs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a32      	ldr	r2, [pc, #200]	@ (8005bf0 <TIM_OC1_SetConfig+0xf8>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	4393      	bics	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	4393      	bics	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a28      	ldr	r2, [pc, #160]	@ (8005bf4 <TIM_OC1_SetConfig+0xfc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_OC1_SetConfig+0x76>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a27      	ldr	r2, [pc, #156]	@ (8005bf8 <TIM_OC1_SetConfig+0x100>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_OC1_SetConfig+0x76>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a26      	ldr	r2, [pc, #152]	@ (8005bfc <TIM_OC1_SetConfig+0x104>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_OC1_SetConfig+0x76>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a25      	ldr	r2, [pc, #148]	@ (8005c00 <TIM_OC1_SetConfig+0x108>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d10c      	bne.n	8005b88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2208      	movs	r2, #8
 8005b72:	4393      	bics	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2204      	movs	r2, #4
 8005b84:	4393      	bics	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf4 <TIM_OC1_SetConfig+0xfc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_OC1_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a19      	ldr	r2, [pc, #100]	@ (8005bf8 <TIM_OC1_SetConfig+0x100>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC1_SetConfig+0xb0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a18      	ldr	r2, [pc, #96]	@ (8005bfc <TIM_OC1_SetConfig+0x104>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC1_SetConfig+0xb0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	@ (8005c00 <TIM_OC1_SetConfig+0x108>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d111      	bne.n	8005bcc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <TIM_OC1_SetConfig+0x10c>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <TIM_OC1_SetConfig+0x110>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b006      	add	sp, #24
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	fffeff8f 	.word	0xfffeff8f
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800
 8005c04:	fffffeff 	.word	0xfffffeff
 8005c08:	fffffdff 	.word	0xfffffdff

08005c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	2210      	movs	r2, #16
 8005c22:	4393      	bics	r3, r2
 8005c24:	001a      	movs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a2e      	ldr	r2, [pc, #184]	@ (8005cf4 <TIM_OC2_SetConfig+0xe8>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf8 <TIM_OC2_SetConfig+0xec>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2220      	movs	r2, #32
 8005c56:	4393      	bics	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a24      	ldr	r2, [pc, #144]	@ (8005cfc <TIM_OC2_SetConfig+0xf0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10d      	bne.n	8005c8a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2280      	movs	r2, #128	@ 0x80
 8005c72:	4393      	bics	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2240      	movs	r2, #64	@ 0x40
 8005c86:	4393      	bics	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <TIM_OC2_SetConfig+0xf0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_OC2_SetConfig+0x9e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1a      	ldr	r2, [pc, #104]	@ (8005d00 <TIM_OC2_SetConfig+0xf4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_OC2_SetConfig+0x9e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	@ (8005d04 <TIM_OC2_SetConfig+0xf8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC2_SetConfig+0x9e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a18      	ldr	r2, [pc, #96]	@ (8005d08 <TIM_OC2_SetConfig+0xfc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d113      	bne.n	8005cd2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <TIM_OC2_SetConfig+0x100>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <TIM_OC2_SetConfig+0x104>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	621a      	str	r2, [r3, #32]
}
 8005cec:	46c0      	nop			@ (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b006      	add	sp, #24
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	feff8fff 	.word	0xfeff8fff
 8005cf8:	fffffcff 	.word	0xfffffcff
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800
 8005d0c:	fffffbff 	.word	0xfffffbff
 8005d10:	fffff7ff 	.word	0xfffff7ff

08005d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4a33      	ldr	r2, [pc, #204]	@ (8005df8 <TIM_OC3_SetConfig+0xe4>)
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005dfc <TIM_OC3_SetConfig+0xe8>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2203      	movs	r2, #3
 8005d48:	4393      	bics	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4a29      	ldr	r2, [pc, #164]	@ (8005e00 <TIM_OC3_SetConfig+0xec>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a25      	ldr	r2, [pc, #148]	@ (8005e04 <TIM_OC3_SetConfig+0xf0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10d      	bne.n	8005d8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4a24      	ldr	r2, [pc, #144]	@ (8005e08 <TIM_OC3_SetConfig+0xf4>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4a20      	ldr	r2, [pc, #128]	@ (8005e0c <TIM_OC3_SetConfig+0xf8>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1c      	ldr	r2, [pc, #112]	@ (8005e04 <TIM_OC3_SetConfig+0xf0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00b      	beq.n	8005dae <TIM_OC3_SetConfig+0x9a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <TIM_OC3_SetConfig+0xfc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <TIM_OC3_SetConfig+0x9a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e14 <TIM_OC3_SetConfig+0x100>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_OC3_SetConfig+0x9a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <TIM_OC3_SetConfig+0x104>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d113      	bne.n	8005dd6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e1c <TIM_OC3_SetConfig+0x108>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4a19      	ldr	r2, [pc, #100]	@ (8005e20 <TIM_OC3_SetConfig+0x10c>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	46c0      	nop			@ (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b006      	add	sp, #24
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	fffffeff 	.word	0xfffffeff
 8005dfc:	fffeff8f 	.word	0xfffeff8f
 8005e00:	fffffdff 	.word	0xfffffdff
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	fffff7ff 	.word	0xfffff7ff
 8005e0c:	fffffbff 	.word	0xfffffbff
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800
 8005e1c:	ffffefff 	.word	0xffffefff
 8005e20:	ffffdfff 	.word	0xffffdfff

08005e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	4a26      	ldr	r2, [pc, #152]	@ (8005ed4 <TIM_OC4_SetConfig+0xb0>)
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a22      	ldr	r2, [pc, #136]	@ (8005ed8 <TIM_OC4_SetConfig+0xb4>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <TIM_OC4_SetConfig+0xb8>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee0 <TIM_OC4_SetConfig+0xbc>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <TIM_OC4_SetConfig+0xc0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_OC4_SetConfig+0x78>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <TIM_OC4_SetConfig+0xc4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_OC4_SetConfig+0x78>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a17      	ldr	r2, [pc, #92]	@ (8005eec <TIM_OC4_SetConfig+0xc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC4_SetConfig+0x78>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a16      	ldr	r2, [pc, #88]	@ (8005ef0 <TIM_OC4_SetConfig+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d109      	bne.n	8005eb0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <TIM_OC4_SetConfig+0xd0>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	019b      	lsls	r3, r3, #6
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b006      	add	sp, #24
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	ffffefff 	.word	0xffffefff
 8005ed8:	feff8fff 	.word	0xfeff8fff
 8005edc:	fffffcff 	.word	0xfffffcff
 8005ee0:	ffffdfff 	.word	0xffffdfff
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	ffffbfff 	.word	0xffffbfff

08005ef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	4a23      	ldr	r2, [pc, #140]	@ (8005f9c <TIM_OC5_SetConfig+0xa4>)
 8005f0e:	401a      	ands	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <TIM_OC5_SetConfig+0xa8>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa4 <TIM_OC5_SetConfig+0xac>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <TIM_OC5_SetConfig+0xb0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00b      	beq.n	8005f66 <TIM_OC5_SetConfig+0x6e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <TIM_OC5_SetConfig+0xb4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC5_SetConfig+0x6e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <TIM_OC5_SetConfig+0xb8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC5_SetConfig+0x6e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a14      	ldr	r2, [pc, #80]	@ (8005fb4 <TIM_OC5_SetConfig+0xbc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d109      	bne.n	8005f7a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4a0c      	ldr	r2, [pc, #48]	@ (8005f9c <TIM_OC5_SetConfig+0xa4>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	621a      	str	r2, [r3, #32]
}
 8005f94:	46c0      	nop			@ (mov r8, r8)
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b006      	add	sp, #24
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	fffeffff 	.word	0xfffeffff
 8005fa0:	fffeff8f 	.word	0xfffeff8f
 8005fa4:	fffdffff 	.word	0xfffdffff
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800

08005fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4a24      	ldr	r2, [pc, #144]	@ (8006060 <TIM_OC6_SetConfig+0xa8>)
 8005fce:	401a      	ands	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a20      	ldr	r2, [pc, #128]	@ (8006064 <TIM_OC6_SetConfig+0xac>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8006068 <TIM_OC6_SetConfig+0xb0>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	051b      	lsls	r3, r3, #20
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a18      	ldr	r2, [pc, #96]	@ (800606c <TIM_OC6_SetConfig+0xb4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <TIM_OC6_SetConfig+0x70>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a17      	ldr	r2, [pc, #92]	@ (8006070 <TIM_OC6_SetConfig+0xb8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_OC6_SetConfig+0x70>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a16      	ldr	r2, [pc, #88]	@ (8006074 <TIM_OC6_SetConfig+0xbc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC6_SetConfig+0x70>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a15      	ldr	r2, [pc, #84]	@ (8006078 <TIM_OC6_SetConfig+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d109      	bne.n	800603c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4a14      	ldr	r2, [pc, #80]	@ (800607c <TIM_OC6_SetConfig+0xc4>)
 800602c:	4013      	ands	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	b006      	add	sp, #24
 800605c:	bd80      	pop	{r7, pc}
 800605e:	46c0      	nop			@ (mov r8, r8)
 8006060:	ffefffff 	.word	0xffefffff
 8006064:	feff8fff 	.word	0xfeff8fff
 8006068:	ffdfffff 	.word	0xffdfffff
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800
 800607c:	fffbffff 	.word	0xfffbffff

08006080 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800608a:	2317      	movs	r3, #23
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4a41      	ldr	r2, [pc, #260]	@ (80061a4 <TIM_SlaveTimer_SetConfig+0x124>)
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4a3e      	ldr	r2, [pc, #248]	@ (80061a8 <TIM_SlaveTimer_SetConfig+0x128>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b70      	cmp	r3, #112	@ 0x70
 80060cc:	d015      	beq.n	80060fa <TIM_SlaveTimer_SetConfig+0x7a>
 80060ce:	d900      	bls.n	80060d2 <TIM_SlaveTimer_SetConfig+0x52>
 80060d0:	e05b      	b.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
 80060d2:	2b60      	cmp	r3, #96	@ 0x60
 80060d4:	d04f      	beq.n	8006176 <TIM_SlaveTimer_SetConfig+0xf6>
 80060d6:	d858      	bhi.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
 80060d8:	2b50      	cmp	r3, #80	@ 0x50
 80060da:	d042      	beq.n	8006162 <TIM_SlaveTimer_SetConfig+0xe2>
 80060dc:	d855      	bhi.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d016      	beq.n	8006110 <TIM_SlaveTimer_SetConfig+0x90>
 80060e2:	d852      	bhi.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
 80060e4:	2b30      	cmp	r3, #48	@ 0x30
 80060e6:	d055      	beq.n	8006194 <TIM_SlaveTimer_SetConfig+0x114>
 80060e8:	d84f      	bhi.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d052      	beq.n	8006194 <TIM_SlaveTimer_SetConfig+0x114>
 80060ee:	d84c      	bhi.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d04f      	beq.n	8006194 <TIM_SlaveTimer_SetConfig+0x114>
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d04d      	beq.n	8006194 <TIM_SlaveTimer_SetConfig+0x114>
 80060f8:	e047      	b.n	800618a <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800610a:	f000 f9d3 	bl	80064b4 <TIM_ETR_SetConfig>
      break;
 800610e:	e042      	b.n	8006196 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b05      	cmp	r3, #5
 8006116:	d101      	bne.n	800611c <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e03f      	b.n	800619c <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a1a      	ldr	r2, [r3, #32]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	438a      	bics	r2, r1
 8006132:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	22f0      	movs	r2, #240	@ 0xf0
 8006140:	4393      	bics	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
      break;
 8006160:	e019      	b.n	8006196 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800616e:	001a      	movs	r2, r3
 8006170:	f000 f878 	bl	8006264 <TIM_TI1_ConfigInputStage>
      break;
 8006174:	e00f      	b.n	8006196 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006182:	001a      	movs	r2, r3
 8006184:	f000 f8de 	bl	8006344 <TIM_TI2_ConfigInputStage>
      break;
 8006188:	e005      	b.n	8006196 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800618a:	2317      	movs	r3, #23
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
      break;
 8006192:	e000      	b.n	8006196 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006194:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8006196:	2317      	movs	r3, #23
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	781b      	ldrb	r3, [r3, #0]
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	b006      	add	sp, #24
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	ffcfff8f 	.word	0xffcfff8f
 80061a8:	fffefff8 	.word	0xfffefff8

080061ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	2201      	movs	r2, #1
 80061c6:	4393      	bics	r3, r2
 80061c8:	001a      	movs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a20      	ldr	r2, [pc, #128]	@ (8006258 <TIM_TI1_SetConfig+0xac>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00c      	beq.n	80061f6 <TIM_TI1_SetConfig+0x4a>
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	2380      	movs	r3, #128	@ 0x80
 80061e0:	05db      	lsls	r3, r3, #23
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d007      	beq.n	80061f6 <TIM_TI1_SetConfig+0x4a>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <TIM_TI1_SetConfig+0xb0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_TI1_SetConfig+0x4a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006260 <TIM_TI1_SetConfig+0xb4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <TIM_TI1_SetConfig+0x4e>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <TIM_TI1_SetConfig+0x50>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2203      	movs	r2, #3
 8006204:	4393      	bics	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e003      	b.n	800621a <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2201      	movs	r2, #1
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	22f0      	movs	r2, #240	@ 0xf0
 800621e:	4393      	bics	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	22ff      	movs	r2, #255	@ 0xff
 8006228:	4013      	ands	r3, r2
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	220a      	movs	r2, #10
 8006234:	4393      	bics	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	220a      	movs	r2, #10
 800623c:	4013      	ands	r3, r2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	621a      	str	r2, [r3, #32]
}
 8006250:	46c0      	nop			@ (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b006      	add	sp, #24
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40000400 	.word	0x40000400
 8006260:	40014000 	.word	0x40014000

08006264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	2201      	movs	r2, #1
 800627c:	4393      	bics	r3, r2
 800627e:	001a      	movs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	22f0      	movs	r2, #240	@ 0xf0
 800628e:	4393      	bics	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	220a      	movs	r2, #10
 80062a0:	4393      	bics	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	621a      	str	r2, [r3, #32]
}
 80062b8:	46c0      	nop			@ (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b006      	add	sp, #24
 80062be:	bd80      	pop	{r7, pc}

080062c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	2210      	movs	r2, #16
 80062da:	4393      	bics	r3, r2
 80062dc:	001a      	movs	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4a14      	ldr	r2, [pc, #80]	@ (800633c <TIM_TI2_SetConfig+0x7c>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4a10      	ldr	r2, [pc, #64]	@ (8006340 <TIM_TI2_SetConfig+0x80>)
 80062fe:	4013      	ands	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	031b      	lsls	r3, r3, #12
 8006306:	041b      	lsls	r3, r3, #16
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	22a0      	movs	r2, #160	@ 0xa0
 8006314:	4393      	bics	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	22a0      	movs	r2, #160	@ 0xa0
 800631e:	4013      	ands	r3, r2
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	46bd      	mov	sp, r7
 8006336:	b006      	add	sp, #24
 8006338:	bd80      	pop	{r7, pc}
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	fffffcff 	.word	0xfffffcff
 8006340:	ffff0fff 	.word	0xffff0fff

08006344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	2210      	movs	r2, #16
 800635c:	4393      	bics	r3, r2
 800635e:	001a      	movs	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4a0d      	ldr	r2, [pc, #52]	@ (80063a4 <TIM_TI2_ConfigInputStage+0x60>)
 800636e:	4013      	ands	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	22a0      	movs	r2, #160	@ 0xa0
 8006380:	4393      	bics	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b006      	add	sp, #24
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	ffff0fff 	.word	0xffff0fff

080063a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4a17      	ldr	r2, [pc, #92]	@ (8006420 <TIM_TI3_SetConfig+0x78>)
 80063c2:	401a      	ands	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2203      	movs	r2, #3
 80063d2:	4393      	bics	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	22f0      	movs	r2, #240	@ 0xf0
 80063e2:	4393      	bics	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	22ff      	movs	r2, #255	@ 0xff
 80063ec:	4013      	ands	r3, r2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006424 <TIM_TI3_SetConfig+0x7c>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	021a      	lsls	r2, r3, #8
 8006400:	23a0      	movs	r3, #160	@ 0xa0
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	4013      	ands	r3, r2
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	46c0      	nop			@ (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b006      	add	sp, #24
 800641e:	bd80      	pop	{r7, pc}
 8006420:	fffffeff 	.word	0xfffffeff
 8006424:	fffff5ff 	.word	0xfffff5ff

08006428 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	4a18      	ldr	r2, [pc, #96]	@ (80064a4 <TIM_TI4_SetConfig+0x7c>)
 8006442:	401a      	ands	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <TIM_TI4_SetConfig+0x80>)
 8006452:	4013      	ands	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4a12      	ldr	r2, [pc, #72]	@ (80064ac <TIM_TI4_SetConfig+0x84>)
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	031b      	lsls	r3, r3, #12
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <TIM_TI4_SetConfig+0x88>)
 800647a:	4013      	ands	r3, r2
 800647c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	031a      	lsls	r2, r3, #12
 8006482:	23a0      	movs	r3, #160	@ 0xa0
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	4013      	ands	r3, r2
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	b006      	add	sp, #24
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	ffffefff 	.word	0xffffefff
 80064a8:	fffffcff 	.word	0xfffffcff
 80064ac:	ffff0fff 	.word	0xffff0fff
 80064b0:	ffff5fff 	.word	0xffff5fff

080064b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	4a09      	ldr	r2, [pc, #36]	@ (80064f0 <TIM_ETR_SetConfig+0x3c>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	46c0      	nop			@ (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b006      	add	sp, #24
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	ffff00ff 	.word	0xffff00ff

080064f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	221f      	movs	r2, #31
 8006504:	4013      	ands	r3, r2
 8006506:	2201      	movs	r2, #1
 8006508:	409a      	lsls	r2, r3
 800650a:	0013      	movs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	43d2      	mvns	r2, r2
 8006516:	401a      	ands	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	211f      	movs	r1, #31
 8006524:	400b      	ands	r3, r1
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4099      	lsls	r1, r3
 800652a:	000b      	movs	r3, r1
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	46bd      	mov	sp, r7
 8006536:	b006      	add	sp, #24
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	223c      	movs	r2, #60	@ 0x3c
 800654a:	5c9b      	ldrb	r3, [r3, r2]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006550:	2302      	movs	r3, #2
 8006552:	e055      	b.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	223c      	movs	r2, #60	@ 0x3c
 8006558:	2101      	movs	r1, #1
 800655a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	223d      	movs	r2, #61	@ 0x3d
 8006560:	2102      	movs	r1, #2
 8006562:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a22      	ldr	r2, [pc, #136]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006582:	4013      	ands	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2270      	movs	r2, #112	@ 0x70
 8006594:	4393      	bics	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a16      	ldr	r2, [pc, #88]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00f      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	2380      	movs	r3, #128	@ 0x80
 80065ba:	05db      	lsls	r3, r3, #23
 80065bc:	429a      	cmp	r2, r3
 80065be:	d009      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a12      	ldr	r2, [pc, #72]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a11      	ldr	r2, [pc, #68]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10c      	bne.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2280      	movs	r2, #128	@ 0x80
 80065d8:	4393      	bics	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	223d      	movs	r2, #61	@ 0x3d
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	223c      	movs	r2, #60	@ 0x3c
 80065fa:	2100      	movs	r1, #0
 80065fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b004      	add	sp, #16
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40012c00 	.word	0x40012c00
 800660c:	ff0fffff 	.word	0xff0fffff
 8006610:	40000400 	.word	0x40000400
 8006614:	40014000 	.word	0x40014000

08006618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	223c      	movs	r2, #60	@ 0x3c
 800662a:	5c9b      	ldrb	r3, [r3, r2]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e06f      	b.n	8006714 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	223c      	movs	r2, #60	@ 0x3c
 8006638:	2101      	movs	r1, #1
 800663a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	22ff      	movs	r2, #255	@ 0xff
 8006640:	4393      	bics	r3, r2
 8006642:	001a      	movs	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a33      	ldr	r2, [pc, #204]	@ (800671c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006650:	401a      	ands	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a30      	ldr	r2, [pc, #192]	@ (8006720 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800665e:	401a      	ands	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a2e      	ldr	r2, [pc, #184]	@ (8006724 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800666c:	401a      	ands	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a2b      	ldr	r2, [pc, #172]	@ (8006728 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800667a:	401a      	ands	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a29      	ldr	r2, [pc, #164]	@ (800672c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006688:	401a      	ands	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4a26      	ldr	r2, [pc, #152]	@ (8006730 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006696:	401a      	ands	r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a24      	ldr	r2, [pc, #144]	@ (8006734 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80066a4:	401a      	ands	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4a21      	ldr	r2, [pc, #132]	@ (8006738 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80066b4:	401a      	ands	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1e      	ldr	r2, [pc, #120]	@ (800673c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d11c      	bne.n	8006702 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80066cc:	401a      	ands	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d2:	051b      	lsls	r3, r3, #20
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80066dc:	401a      	ands	r2, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80066ea:	401a      	ands	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a15      	ldr	r2, [pc, #84]	@ (800674c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80066f8:	401a      	ands	r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	223c      	movs	r2, #60	@ 0x3c
 800670e:	2100      	movs	r1, #0
 8006710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	0018      	movs	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	b004      	add	sp, #16
 800671a:	bd80      	pop	{r7, pc}
 800671c:	fffffcff 	.word	0xfffffcff
 8006720:	fffffbff 	.word	0xfffffbff
 8006724:	fffff7ff 	.word	0xfffff7ff
 8006728:	ffffefff 	.word	0xffffefff
 800672c:	ffffdfff 	.word	0xffffdfff
 8006730:	ffffbfff 	.word	0xffffbfff
 8006734:	fff0ffff 	.word	0xfff0ffff
 8006738:	efffffff 	.word	0xefffffff
 800673c:	40012c00 	.word	0x40012c00
 8006740:	ff0fffff 	.word	0xff0fffff
 8006744:	feffffff 	.word	0xfeffffff
 8006748:	fdffffff 	.word	0xfdffffff
 800674c:	dfffffff 	.word	0xdfffffff

08006750 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006758:	46c0      	nop			@ (mov r8, r8)
 800675a:	46bd      	mov	sp, r7
 800675c:	b002      	add	sp, #8
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006768:	46c0      	nop			@ (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006778:	46c0      	nop			@ (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b002      	add	sp, #8
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e046      	b.n	8006820 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2288      	movs	r2, #136	@ 0x88
 8006796:	589b      	ldr	r3, [r3, r2]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d107      	bne.n	80067ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2284      	movs	r2, #132	@ 0x84
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7fb fb54 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2288      	movs	r2, #136	@ 0x88
 80067b0:	2124      	movs	r1, #36	@ 0x24
 80067b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2101      	movs	r1, #1
 80067c0:	438a      	bics	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 ff2e 	bl	8007630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	0018      	movs	r0, r3
 80067d8:	f000 fc6c 	bl	80070b4 <UART_SetConfig>
 80067dc:	0003      	movs	r3, r0
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e01c      	b.n	8006820 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	490d      	ldr	r1, [pc, #52]	@ (8006828 <HAL_UART_Init+0xa8>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	212a      	movs	r1, #42	@ 0x2a
 8006802:	438a      	bics	r2, r1
 8006804:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2101      	movs	r1, #1
 8006812:	430a      	orrs	r2, r1
 8006814:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0018      	movs	r0, r3
 800681a:	f000 ffbd 	bl	8007798 <UART_CheckIdleState>
 800681e:	0003      	movs	r3, r0
}
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}
 8006828:	ffffb7ff 	.word	0xffffb7ff

0800682c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	@ 0x28
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	1dbb      	adds	r3, r7, #6
 800683a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2288      	movs	r2, #136	@ 0x88
 8006840:	589b      	ldr	r3, [r3, r2]
 8006842:	2b20      	cmp	r3, #32
 8006844:	d000      	beq.n	8006848 <HAL_UART_Transmit+0x1c>
 8006846:	e090      	b.n	800696a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_Transmit+0x2a>
 800684e:	1dbb      	adds	r3, r7, #6
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e088      	b.n	800696c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	2380      	movs	r3, #128	@ 0x80
 8006860:	015b      	lsls	r3, r3, #5
 8006862:	429a      	cmp	r2, r3
 8006864:	d109      	bne.n	800687a <HAL_UART_Transmit+0x4e>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d105      	bne.n	800687a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2201      	movs	r2, #1
 8006872:	4013      	ands	r3, r2
 8006874:	d001      	beq.n	800687a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e078      	b.n	800696c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2290      	movs	r2, #144	@ 0x90
 800687e:	2100      	movs	r1, #0
 8006880:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2288      	movs	r2, #136	@ 0x88
 8006886:	2121      	movs	r1, #33	@ 0x21
 8006888:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800688a:	f7fb fd13 	bl	80022b4 <HAL_GetTick>
 800688e:	0003      	movs	r3, r0
 8006890:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1dba      	adds	r2, r7, #6
 8006896:	2154      	movs	r1, #84	@ 0x54
 8006898:	8812      	ldrh	r2, [r2, #0]
 800689a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1dba      	adds	r2, r7, #6
 80068a0:	2156      	movs	r1, #86	@ 0x56
 80068a2:	8812      	ldrh	r2, [r2, #0]
 80068a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	2380      	movs	r3, #128	@ 0x80
 80068ac:	015b      	lsls	r3, r3, #5
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d108      	bne.n	80068c4 <HAL_UART_Transmit+0x98>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e003      	b.n	80068cc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068cc:	e030      	b.n	8006930 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	0013      	movs	r3, r2
 80068d8:	2200      	movs	r2, #0
 80068da:	2180      	movs	r1, #128	@ 0x80
 80068dc:	f001 f806 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2288      	movs	r2, #136	@ 0x88
 80068e8:	2120      	movs	r1, #32
 80068ea:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e03d      	b.n	800696c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	001a      	movs	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	05d2      	lsls	r2, r2, #23
 8006902:	0dd2      	lsrs	r2, r2, #23
 8006904:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3302      	adds	r3, #2
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	e007      	b.n	800691e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	3301      	adds	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2256      	movs	r2, #86	@ 0x56
 8006922:	5a9b      	ldrh	r3, [r3, r2]
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b299      	uxth	r1, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2256      	movs	r2, #86	@ 0x56
 800692e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2256      	movs	r2, #86	@ 0x56
 8006934:	5a9b      	ldrh	r3, [r3, r2]
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1c8      	bne.n	80068ce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	0013      	movs	r3, r2
 8006946:	2200      	movs	r2, #0
 8006948:	2140      	movs	r1, #64	@ 0x40
 800694a:	f000 ffcf 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d005      	beq.n	800695e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2288      	movs	r2, #136	@ 0x88
 8006956:	2120      	movs	r1, #32
 8006958:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e006      	b.n	800696c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2288      	movs	r2, #136	@ 0x88
 8006962:	2120      	movs	r1, #32
 8006964:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800696a:	2302      	movs	r3, #2
  }
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b008      	add	sp, #32
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	1dbb      	adds	r3, r7, #6
 8006980:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	228c      	movs	r2, #140	@ 0x8c
 8006986:	589b      	ldr	r3, [r3, r2]
 8006988:	2b20      	cmp	r3, #32
 800698a:	d14a      	bne.n	8006a22 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_UART_Receive_IT+0x26>
 8006992:	1dbb      	adds	r3, r7, #6
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e042      	b.n	8006a24 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	2380      	movs	r3, #128	@ 0x80
 80069a4:	015b      	lsls	r3, r3, #5
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d109      	bne.n	80069be <HAL_UART_Receive_IT+0x4a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2201      	movs	r2, #1
 80069b6:	4013      	ands	r3, r2
 80069b8:	d001      	beq.n	80069be <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e032      	b.n	8006a24 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a18      	ldr	r2, [pc, #96]	@ (8006a2c <HAL_UART_Receive_IT+0xb8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d020      	beq.n	8006a10 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	2380      	movs	r3, #128	@ 0x80
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	4013      	ands	r3, r2
 80069da:	d019      	beq.n	8006a10 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069dc:	f3ef 8310 	mrs	r3, PRIMASK
 80069e0:	613b      	str	r3, [r7, #16]
  return(result);
 80069e2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	2301      	movs	r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f383 8810 	msr	PRIMASK, r3
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2180      	movs	r1, #128	@ 0x80
 80069fe:	04c9      	lsls	r1, r1, #19
 8006a00:	430a      	orrs	r2, r1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f383 8810 	msr	PRIMASK, r3
}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a10:	1dbb      	adds	r3, r7, #6
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 ffd7 	bl	80079cc <UART_Start_Receive_IT>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	e000      	b.n	8006a24 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	0018      	movs	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b008      	add	sp, #32
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40008000 	.word	0x40008000

08006a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a30:	b5b0      	push	{r4, r5, r7, lr}
 8006a32:	b0aa      	sub	sp, #168	@ 0xa8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	22a4      	movs	r2, #164	@ 0xa4
 8006a40:	18b9      	adds	r1, r7, r2
 8006a42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	20a0      	movs	r0, #160	@ 0xa0
 8006a4c:	1839      	adds	r1, r7, r0
 8006a4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	249c      	movs	r4, #156	@ 0x9c
 8006a58:	1939      	adds	r1, r7, r4
 8006a5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a5c:	0011      	movs	r1, r2
 8006a5e:	18bb      	adds	r3, r7, r2
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4aa2      	ldr	r2, [pc, #648]	@ (8006cec <HAL_UART_IRQHandler+0x2bc>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	2298      	movs	r2, #152	@ 0x98
 8006a68:	18bd      	adds	r5, r7, r2
 8006a6a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006a6c:	18bb      	adds	r3, r7, r2
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11a      	bne.n	8006aaa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a74:	187b      	adds	r3, r7, r1
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	d015      	beq.n	8006aaa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a7e:	183b      	adds	r3, r7, r0
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2220      	movs	r2, #32
 8006a84:	4013      	ands	r3, r2
 8006a86:	d105      	bne.n	8006a94 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a88:	193b      	adds	r3, r7, r4
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	2380      	movs	r3, #128	@ 0x80
 8006a8e:	055b      	lsls	r3, r3, #21
 8006a90:	4013      	ands	r3, r2
 8006a92:	d00a      	beq.n	8006aaa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d100      	bne.n	8006a9e <HAL_UART_IRQHandler+0x6e>
 8006a9c:	e2dc      	b.n	8007058 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	0010      	movs	r0, r2
 8006aa6:	4798      	blx	r3
      }
      return;
 8006aa8:	e2d6      	b.n	8007058 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006aaa:	2398      	movs	r3, #152	@ 0x98
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d100      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x86>
 8006ab4:	e122      	b.n	8006cfc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ab6:	239c      	movs	r3, #156	@ 0x9c
 8006ab8:	18fb      	adds	r3, r7, r3
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a8c      	ldr	r2, [pc, #560]	@ (8006cf0 <HAL_UART_IRQHandler+0x2c0>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d106      	bne.n	8006ad0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ac2:	23a0      	movs	r3, #160	@ 0xa0
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a8a      	ldr	r2, [pc, #552]	@ (8006cf4 <HAL_UART_IRQHandler+0x2c4>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	d100      	bne.n	8006ad0 <HAL_UART_IRQHandler+0xa0>
 8006ace:	e115      	b.n	8006cfc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ad0:	23a4      	movs	r3, #164	@ 0xa4
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d012      	beq.n	8006b02 <HAL_UART_IRQHandler+0xd2>
 8006adc:	23a0      	movs	r3, #160	@ 0xa0
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	2380      	movs	r3, #128	@ 0x80
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d00b      	beq.n	8006b02 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2201      	movs	r2, #1
 8006af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2290      	movs	r2, #144	@ 0x90
 8006af6:	589b      	ldr	r3, [r3, r2]
 8006af8:	2201      	movs	r2, #1
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2190      	movs	r1, #144	@ 0x90
 8006b00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b02:	23a4      	movs	r3, #164	@ 0xa4
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d011      	beq.n	8006b32 <HAL_UART_IRQHandler+0x102>
 8006b0e:	239c      	movs	r3, #156	@ 0x9c
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	4013      	ands	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2290      	movs	r2, #144	@ 0x90
 8006b26:	589b      	ldr	r3, [r3, r2]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2190      	movs	r1, #144	@ 0x90
 8006b30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b32:	23a4      	movs	r3, #164	@ 0xa4
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2204      	movs	r2, #4
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d011      	beq.n	8006b62 <HAL_UART_IRQHandler+0x132>
 8006b3e:	239c      	movs	r3, #156	@ 0x9c
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	4013      	ands	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2204      	movs	r2, #4
 8006b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2290      	movs	r2, #144	@ 0x90
 8006b56:	589b      	ldr	r3, [r3, r2]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2190      	movs	r1, #144	@ 0x90
 8006b60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b62:	23a4      	movs	r3, #164	@ 0xa4
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d017      	beq.n	8006b9e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b6e:	23a0      	movs	r3, #160	@ 0xa0
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2220      	movs	r2, #32
 8006b76:	4013      	ands	r3, r2
 8006b78:	d105      	bne.n	8006b86 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b7a:	239c      	movs	r3, #156	@ 0x9c
 8006b7c:	18fb      	adds	r3, r7, r3
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a5b      	ldr	r2, [pc, #364]	@ (8006cf0 <HAL_UART_IRQHandler+0x2c0>)
 8006b82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b84:	d00b      	beq.n	8006b9e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2290      	movs	r2, #144	@ 0x90
 8006b92:	589b      	ldr	r3, [r3, r2]
 8006b94:	2208      	movs	r2, #8
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2190      	movs	r1, #144	@ 0x90
 8006b9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b9e:	23a4      	movs	r3, #164	@ 0xa4
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	2380      	movs	r3, #128	@ 0x80
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x1a4>
 8006bac:	23a0      	movs	r3, #160	@ 0xa0
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	2380      	movs	r3, #128	@ 0x80
 8006bb4:	04db      	lsls	r3, r3, #19
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2280      	movs	r2, #128	@ 0x80
 8006bc0:	0112      	lsls	r2, r2, #4
 8006bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2290      	movs	r2, #144	@ 0x90
 8006bc8:	589b      	ldr	r3, [r3, r2]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2190      	movs	r1, #144	@ 0x90
 8006bd2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2290      	movs	r2, #144	@ 0x90
 8006bd8:	589b      	ldr	r3, [r3, r2]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d100      	bne.n	8006be0 <HAL_UART_IRQHandler+0x1b0>
 8006bde:	e23d      	b.n	800705c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006be0:	23a4      	movs	r3, #164	@ 0xa4
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2220      	movs	r2, #32
 8006be8:	4013      	ands	r3, r2
 8006bea:	d015      	beq.n	8006c18 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bec:	23a0      	movs	r3, #160	@ 0xa0
 8006bee:	18fb      	adds	r3, r7, r3
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d106      	bne.n	8006c06 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bf8:	239c      	movs	r3, #156	@ 0x9c
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	2380      	movs	r3, #128	@ 0x80
 8006c00:	055b      	lsls	r3, r3, #21
 8006c02:	4013      	ands	r3, r2
 8006c04:	d008      	beq.n	8006c18 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	0010      	movs	r0, r2
 8006c16:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2290      	movs	r2, #144	@ 0x90
 8006c1c:	589b      	ldr	r3, [r3, r2]
 8006c1e:	2194      	movs	r1, #148	@ 0x94
 8006c20:	187a      	adds	r2, r7, r1
 8006c22:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2240      	movs	r2, #64	@ 0x40
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	2b40      	cmp	r3, #64	@ 0x40
 8006c30:	d004      	beq.n	8006c3c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2228      	movs	r2, #40	@ 0x28
 8006c38:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c3a:	d04c      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 ffe8 	bl	8007c14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2240      	movs	r2, #64	@ 0x40
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b40      	cmp	r3, #64	@ 0x40
 8006c50:	d13c      	bne.n	8006ccc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c52:	f3ef 8310 	mrs	r3, PRIMASK
 8006c56:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5a:	2090      	movs	r0, #144	@ 0x90
 8006c5c:	183a      	adds	r2, r7, r0
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	2301      	movs	r3, #1
 8006c62:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c66:	f383 8810 	msr	PRIMASK, r3
}
 8006c6a:	46c0      	nop			@ (mov r8, r8)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2140      	movs	r1, #64	@ 0x40
 8006c78:	438a      	bics	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
 8006c7c:	183b      	adds	r3, r7, r0
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c84:	f383 8810 	msr	PRIMASK, r3
}
 8006c88:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2280      	movs	r2, #128	@ 0x80
 8006c8e:	589b      	ldr	r3, [r3, r2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d016      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2280      	movs	r2, #128	@ 0x80
 8006c98:	589b      	ldr	r3, [r3, r2]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	@ (8006cf8 <HAL_UART_IRQHandler+0x2c8>)
 8006c9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2280      	movs	r2, #128	@ 0x80
 8006ca2:	589b      	ldr	r3, [r3, r2]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7fc fe19 	bl	80038dc <HAL_DMA_Abort_IT>
 8006caa:	1e03      	subs	r3, r0, #0
 8006cac:	d01c      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2280      	movs	r2, #128	@ 0x80
 8006cb2:	589b      	ldr	r3, [r3, r2]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	2180      	movs	r1, #128	@ 0x80
 8006cba:	5852      	ldr	r2, [r2, r1]
 8006cbc:	0010      	movs	r0, r2
 8006cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e012      	b.n	8006ce8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f9e1 	bl	800708c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cca:	e00d      	b.n	8006ce8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 f9dc 	bl	800708c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	e008      	b.n	8006ce8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f000 f9d7 	bl	800708c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2290      	movs	r2, #144	@ 0x90
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006ce6:	e1b9      	b.n	800705c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	46c0      	nop			@ (mov r8, r8)
    return;
 8006cea:	e1b7      	b.n	800705c <HAL_UART_IRQHandler+0x62c>
 8006cec:	0000080f 	.word	0x0000080f
 8006cf0:	10000001 	.word	0x10000001
 8006cf4:	04000120 	.word	0x04000120
 8006cf8:	08007ce1 	.word	0x08007ce1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d000      	beq.n	8006d06 <HAL_UART_IRQHandler+0x2d6>
 8006d04:	e13e      	b.n	8006f84 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d06:	23a4      	movs	r3, #164	@ 0xa4
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2210      	movs	r2, #16
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d100      	bne.n	8006d14 <HAL_UART_IRQHandler+0x2e4>
 8006d12:	e137      	b.n	8006f84 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d14:	23a0      	movs	r3, #160	@ 0xa0
 8006d16:	18fb      	adds	r3, r7, r3
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <HAL_UART_IRQHandler+0x2f2>
 8006d20:	e130      	b.n	8006f84 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2210      	movs	r2, #16
 8006d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2240      	movs	r2, #64	@ 0x40
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b40      	cmp	r3, #64	@ 0x40
 8006d36:	d000      	beq.n	8006d3a <HAL_UART_IRQHandler+0x30a>
 8006d38:	e0a4      	b.n	8006e84 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2280      	movs	r2, #128	@ 0x80
 8006d3e:	589b      	ldr	r3, [r3, r2]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	217e      	movs	r1, #126	@ 0x7e
 8006d46:	187b      	adds	r3, r7, r1
 8006d48:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d100      	bne.n	8006d54 <HAL_UART_IRQHandler+0x324>
 8006d52:	e185      	b.n	8007060 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	225c      	movs	r2, #92	@ 0x5c
 8006d58:	5a9b      	ldrh	r3, [r3, r2]
 8006d5a:	187a      	adds	r2, r7, r1
 8006d5c:	8812      	ldrh	r2, [r2, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d300      	bcc.n	8006d64 <HAL_UART_IRQHandler+0x334>
 8006d62:	e17d      	b.n	8007060 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	187a      	adds	r2, r7, r1
 8006d68:	215e      	movs	r1, #94	@ 0x5e
 8006d6a:	8812      	ldrh	r2, [r2, #0]
 8006d6c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2280      	movs	r2, #128	@ 0x80
 8006d72:	589b      	ldr	r3, [r3, r2]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d170      	bne.n	8006e60 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d88:	2301      	movs	r3, #1
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	49b4      	ldr	r1, [pc, #720]	@ (8007070 <HAL_UART_IRQHandler+0x640>)
 8006da0:	400a      	ands	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	f383 8810 	msr	PRIMASK, r3
}
 8006dae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db0:	f3ef 8310 	mrs	r3, PRIMASK
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db8:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dba:	2301      	movs	r3, #1
 8006dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	46c0      	nop			@ (mov r8, r8)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	438a      	bics	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]
 8006dd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ddc:	f383 8810 	msr	PRIMASK, r3
}
 8006de0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de2:	f3ef 8310 	mrs	r3, PRIMASK
 8006de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dea:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dec:	2301      	movs	r3, #1
 8006dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df2:	f383 8810 	msr	PRIMASK, r3
}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2140      	movs	r1, #64	@ 0x40
 8006e04:	438a      	bics	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
 8006e08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e0a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0e:	f383 8810 	msr	PRIMASK, r3
}
 8006e12:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	228c      	movs	r2, #140	@ 0x8c
 8006e18:	2120      	movs	r1, #32
 8006e1a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e22:	f3ef 8310 	mrs	r3, PRIMASK
 8006e26:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e32:	f383 8810 	msr	PRIMASK, r3
}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2110      	movs	r1, #16
 8006e44:	438a      	bics	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e4e:	f383 8810 	msr	PRIMASK, r3
}
 8006e52:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2280      	movs	r2, #128	@ 0x80
 8006e58:	589b      	ldr	r3, [r3, r2]
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7fc fcdc 	bl	8003818 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	225c      	movs	r2, #92	@ 0x5c
 8006e6a:	5a9a      	ldrh	r2, [r3, r2]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	215e      	movs	r1, #94	@ 0x5e
 8006e70:	5a5b      	ldrh	r3, [r3, r1]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	0011      	movs	r1, r2
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 f90d 	bl	800709c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e82:	e0ed      	b.n	8007060 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	225c      	movs	r2, #92	@ 0x5c
 8006e88:	5a99      	ldrh	r1, [r3, r2]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	225e      	movs	r2, #94	@ 0x5e
 8006e8e:	5a9b      	ldrh	r3, [r3, r2]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	208e      	movs	r0, #142	@ 0x8e
 8006e94:	183b      	adds	r3, r7, r0
 8006e96:	1a8a      	subs	r2, r1, r2
 8006e98:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	225e      	movs	r2, #94	@ 0x5e
 8006e9e:	5a9b      	ldrh	r3, [r3, r2]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d100      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x478>
 8006ea6:	e0dd      	b.n	8007064 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006ea8:	183b      	adds	r3, r7, r0
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d100      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x482>
 8006eb0:	e0d8      	b.n	8007064 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eba:	2488      	movs	r4, #136	@ 0x88
 8006ebc:	193a      	adds	r2, r7, r4
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f383 8810 	msr	PRIMASK, r3
}
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4967      	ldr	r1, [pc, #412]	@ (8007074 <HAL_UART_IRQHandler+0x644>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	193b      	adds	r3, r7, r4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f383 8810 	msr	PRIMASK, r3
}
 8006ee8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eea:	f3ef 8310 	mrs	r3, PRIMASK
 8006eee:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ef0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ef2:	2484      	movs	r4, #132	@ 0x84
 8006ef4:	193a      	adds	r2, r7, r4
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	2301      	movs	r3, #1
 8006efa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f383 8810 	msr	PRIMASK, r3
}
 8006f02:	46c0      	nop			@ (mov r8, r8)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	495a      	ldr	r1, [pc, #360]	@ (8007078 <HAL_UART_IRQHandler+0x648>)
 8006f10:	400a      	ands	r2, r1
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	193b      	adds	r3, r7, r4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	f383 8810 	msr	PRIMASK, r3
}
 8006f20:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	228c      	movs	r2, #140	@ 0x8c
 8006f26:	2120      	movs	r1, #32
 8006f28:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f36:	f3ef 8310 	mrs	r3, PRIMASK
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3e:	2480      	movs	r4, #128	@ 0x80
 8006f40:	193a      	adds	r2, r7, r4
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	2301      	movs	r3, #1
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	f383 8810 	msr	PRIMASK, r3
}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2110      	movs	r1, #16
 8006f5c:	438a      	bics	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f68:	f383 8810 	msr	PRIMASK, r3
}
 8006f6c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f74:	183b      	adds	r3, r7, r0
 8006f76:	881a      	ldrh	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0011      	movs	r1, r2
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f000 f88d 	bl	800709c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f82:	e06f      	b.n	8007064 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f84:	23a4      	movs	r3, #164	@ 0xa4
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	035b      	lsls	r3, r3, #13
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d010      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x584>
 8006f92:	239c      	movs	r3, #156	@ 0x9c
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	2380      	movs	r3, #128	@ 0x80
 8006f9a:	03db      	lsls	r3, r3, #15
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d009      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2280      	movs	r2, #128	@ 0x80
 8006fa6:	0352      	lsls	r2, r2, #13
 8006fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f001 fbeb 	bl	8008788 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fb2:	e05a      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fb4:	23a4      	movs	r3, #164	@ 0xa4
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2280      	movs	r2, #128	@ 0x80
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d016      	beq.n	8006fee <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fc0:	23a0      	movs	r3, #160	@ 0xa0
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2280      	movs	r2, #128	@ 0x80
 8006fc8:	4013      	ands	r3, r2
 8006fca:	d106      	bne.n	8006fda <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fcc:	239c      	movs	r3, #156	@ 0x9c
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	2380      	movs	r3, #128	@ 0x80
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d042      	beq.n	8007068 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	0010      	movs	r0, r2
 8006fea:	4798      	blx	r3
    }
    return;
 8006fec:	e03c      	b.n	8007068 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fee:	23a4      	movs	r3, #164	@ 0xa4
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2240      	movs	r2, #64	@ 0x40
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d00a      	beq.n	8007010 <HAL_UART_IRQHandler+0x5e0>
 8006ffa:	23a0      	movs	r3, #160	@ 0xa0
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2240      	movs	r2, #64	@ 0x40
 8007002:	4013      	ands	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	0018      	movs	r0, r3
 800700a:	f000 fe80 	bl	8007d0e <UART_EndTransmit_IT>
    return;
 800700e:	e02c      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007010:	23a4      	movs	r3, #164	@ 0xa4
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	2380      	movs	r3, #128	@ 0x80
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	4013      	ands	r3, r2
 800701c:	d00b      	beq.n	8007036 <HAL_UART_IRQHandler+0x606>
 800701e:	23a0      	movs	r3, #160	@ 0xa0
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	2380      	movs	r3, #128	@ 0x80
 8007026:	05db      	lsls	r3, r3, #23
 8007028:	4013      	ands	r3, r2
 800702a:	d004      	beq.n	8007036 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	0018      	movs	r0, r3
 8007030:	f001 fbba 	bl	80087a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007034:	e019      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007036:	23a4      	movs	r3, #164	@ 0xa4
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	2380      	movs	r3, #128	@ 0x80
 800703e:	045b      	lsls	r3, r3, #17
 8007040:	4013      	ands	r3, r2
 8007042:	d012      	beq.n	800706a <HAL_UART_IRQHandler+0x63a>
 8007044:	23a0      	movs	r3, #160	@ 0xa0
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	da0d      	bge.n	800706a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	0018      	movs	r0, r3
 8007052:	f001 fba1 	bl	8008798 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007056:	e008      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
      return;
 8007058:	46c0      	nop			@ (mov r8, r8)
 800705a:	e006      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
    return;
 800705c:	46c0      	nop			@ (mov r8, r8)
 800705e:	e004      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
      return;
 8007060:	46c0      	nop			@ (mov r8, r8)
 8007062:	e002      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
      return;
 8007064:	46c0      	nop			@ (mov r8, r8)
 8007066:	e000      	b.n	800706a <HAL_UART_IRQHandler+0x63a>
    return;
 8007068:	46c0      	nop			@ (mov r8, r8)
  }
}
 800706a:	46bd      	mov	sp, r7
 800706c:	b02a      	add	sp, #168	@ 0xa8
 800706e:	bdb0      	pop	{r4, r5, r7, pc}
 8007070:	fffffeff 	.word	0xfffffeff
 8007074:	fffffedf 	.word	0xfffffedf
 8007078:	effffffe 	.word	0xeffffffe

0800707c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007084:	46c0      	nop			@ (mov r8, r8)
 8007086:	46bd      	mov	sp, r7
 8007088:	b002      	add	sp, #8
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007094:	46c0      	nop			@ (mov r8, r8)
 8007096:	46bd      	mov	sp, r7
 8007098:	b002      	add	sp, #8
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	000a      	movs	r2, r1
 80070a6:	1cbb      	adds	r3, r7, #2
 80070a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	46bd      	mov	sp, r7
 80070ae:	b002      	add	sp, #8
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b5b0      	push	{r4, r5, r7, lr}
 80070b6:	b090      	sub	sp, #64	@ 0x40
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070bc:	231a      	movs	r3, #26
 80070be:	2220      	movs	r2, #32
 80070c0:	189b      	adds	r3, r3, r2
 80070c2:	19db      	adds	r3, r3, r7
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	431a      	orrs	r2, r3
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	4313      	orrs	r3, r2
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4aaf      	ldr	r2, [pc, #700]	@ (80073a4 <UART_SetConfig+0x2f0>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	0019      	movs	r1, r3
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f2:	430b      	orrs	r3, r1
 80070f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4aaa      	ldr	r2, [pc, #680]	@ (80073a8 <UART_SetConfig+0x2f4>)
 80070fe:	4013      	ands	r3, r2
 8007100:	0018      	movs	r0, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	68d9      	ldr	r1, [r3, #12]
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	0003      	movs	r3, r0
 800710c:	430b      	orrs	r3, r1
 800710e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4aa4      	ldr	r2, [pc, #656]	@ (80073ac <UART_SetConfig+0x2f8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007126:	4313      	orrs	r3, r2
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	4a9f      	ldr	r2, [pc, #636]	@ (80073b0 <UART_SetConfig+0x2fc>)
 8007132:	4013      	ands	r3, r2
 8007134:	0019      	movs	r1, r3
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800713c:	430b      	orrs	r3, r1
 800713e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	220f      	movs	r2, #15
 8007148:	4393      	bics	r3, r2
 800714a:	0018      	movs	r0, r3
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	0003      	movs	r3, r0
 8007156:	430b      	orrs	r3, r1
 8007158:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a95      	ldr	r2, [pc, #596]	@ (80073b4 <UART_SetConfig+0x300>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d131      	bne.n	80071c8 <UART_SetConfig+0x114>
 8007164:	4b94      	ldr	r3, [pc, #592]	@ (80073b8 <UART_SetConfig+0x304>)
 8007166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007168:	2203      	movs	r2, #3
 800716a:	4013      	ands	r3, r2
 800716c:	2b03      	cmp	r3, #3
 800716e:	d01d      	beq.n	80071ac <UART_SetConfig+0xf8>
 8007170:	d823      	bhi.n	80071ba <UART_SetConfig+0x106>
 8007172:	2b02      	cmp	r3, #2
 8007174:	d00c      	beq.n	8007190 <UART_SetConfig+0xdc>
 8007176:	d820      	bhi.n	80071ba <UART_SetConfig+0x106>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <UART_SetConfig+0xce>
 800717c:	2b01      	cmp	r3, #1
 800717e:	d00e      	beq.n	800719e <UART_SetConfig+0xea>
 8007180:	e01b      	b.n	80071ba <UART_SetConfig+0x106>
 8007182:	231b      	movs	r3, #27
 8007184:	2220      	movs	r2, #32
 8007186:	189b      	adds	r3, r3, r2
 8007188:	19db      	adds	r3, r3, r7
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e0b4      	b.n	80072fa <UART_SetConfig+0x246>
 8007190:	231b      	movs	r3, #27
 8007192:	2220      	movs	r2, #32
 8007194:	189b      	adds	r3, r3, r2
 8007196:	19db      	adds	r3, r3, r7
 8007198:	2202      	movs	r2, #2
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e0ad      	b.n	80072fa <UART_SetConfig+0x246>
 800719e:	231b      	movs	r3, #27
 80071a0:	2220      	movs	r2, #32
 80071a2:	189b      	adds	r3, r3, r2
 80071a4:	19db      	adds	r3, r3, r7
 80071a6:	2204      	movs	r2, #4
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e0a6      	b.n	80072fa <UART_SetConfig+0x246>
 80071ac:	231b      	movs	r3, #27
 80071ae:	2220      	movs	r2, #32
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	19db      	adds	r3, r3, r7
 80071b4:	2208      	movs	r2, #8
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	e09f      	b.n	80072fa <UART_SetConfig+0x246>
 80071ba:	231b      	movs	r3, #27
 80071bc:	2220      	movs	r2, #32
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	19db      	adds	r3, r3, r7
 80071c2:	2210      	movs	r2, #16
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e098      	b.n	80072fa <UART_SetConfig+0x246>
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a7b      	ldr	r2, [pc, #492]	@ (80073bc <UART_SetConfig+0x308>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d131      	bne.n	8007236 <UART_SetConfig+0x182>
 80071d2:	4b79      	ldr	r3, [pc, #484]	@ (80073b8 <UART_SetConfig+0x304>)
 80071d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d6:	220c      	movs	r2, #12
 80071d8:	4013      	ands	r3, r2
 80071da:	2b0c      	cmp	r3, #12
 80071dc:	d01d      	beq.n	800721a <UART_SetConfig+0x166>
 80071de:	d823      	bhi.n	8007228 <UART_SetConfig+0x174>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d00c      	beq.n	80071fe <UART_SetConfig+0x14a>
 80071e4:	d820      	bhi.n	8007228 <UART_SetConfig+0x174>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <UART_SetConfig+0x13c>
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d00e      	beq.n	800720c <UART_SetConfig+0x158>
 80071ee:	e01b      	b.n	8007228 <UART_SetConfig+0x174>
 80071f0:	231b      	movs	r3, #27
 80071f2:	2220      	movs	r2, #32
 80071f4:	189b      	adds	r3, r3, r2
 80071f6:	19db      	adds	r3, r3, r7
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e07d      	b.n	80072fa <UART_SetConfig+0x246>
 80071fe:	231b      	movs	r3, #27
 8007200:	2220      	movs	r2, #32
 8007202:	189b      	adds	r3, r3, r2
 8007204:	19db      	adds	r3, r3, r7
 8007206:	2202      	movs	r2, #2
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e076      	b.n	80072fa <UART_SetConfig+0x246>
 800720c:	231b      	movs	r3, #27
 800720e:	2220      	movs	r2, #32
 8007210:	189b      	adds	r3, r3, r2
 8007212:	19db      	adds	r3, r3, r7
 8007214:	2204      	movs	r2, #4
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	e06f      	b.n	80072fa <UART_SetConfig+0x246>
 800721a:	231b      	movs	r3, #27
 800721c:	2220      	movs	r2, #32
 800721e:	189b      	adds	r3, r3, r2
 8007220:	19db      	adds	r3, r3, r7
 8007222:	2208      	movs	r2, #8
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e068      	b.n	80072fa <UART_SetConfig+0x246>
 8007228:	231b      	movs	r3, #27
 800722a:	2220      	movs	r2, #32
 800722c:	189b      	adds	r3, r3, r2
 800722e:	19db      	adds	r3, r3, r7
 8007230:	2210      	movs	r2, #16
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e061      	b.n	80072fa <UART_SetConfig+0x246>
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a61      	ldr	r2, [pc, #388]	@ (80073c0 <UART_SetConfig+0x30c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d106      	bne.n	800724e <UART_SetConfig+0x19a>
 8007240:	231b      	movs	r3, #27
 8007242:	2220      	movs	r2, #32
 8007244:	189b      	adds	r3, r3, r2
 8007246:	19db      	adds	r3, r3, r7
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e055      	b.n	80072fa <UART_SetConfig+0x246>
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a5c      	ldr	r2, [pc, #368]	@ (80073c4 <UART_SetConfig+0x310>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d106      	bne.n	8007266 <UART_SetConfig+0x1b2>
 8007258:	231b      	movs	r3, #27
 800725a:	2220      	movs	r2, #32
 800725c:	189b      	adds	r3, r3, r2
 800725e:	19db      	adds	r3, r3, r7
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e049      	b.n	80072fa <UART_SetConfig+0x246>
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a50      	ldr	r2, [pc, #320]	@ (80073ac <UART_SetConfig+0x2f8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d13e      	bne.n	80072ee <UART_SetConfig+0x23a>
 8007270:	4b51      	ldr	r3, [pc, #324]	@ (80073b8 <UART_SetConfig+0x304>)
 8007272:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007274:	23c0      	movs	r3, #192	@ 0xc0
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	4013      	ands	r3, r2
 800727a:	22c0      	movs	r2, #192	@ 0xc0
 800727c:	0112      	lsls	r2, r2, #4
 800727e:	4293      	cmp	r3, r2
 8007280:	d027      	beq.n	80072d2 <UART_SetConfig+0x21e>
 8007282:	22c0      	movs	r2, #192	@ 0xc0
 8007284:	0112      	lsls	r2, r2, #4
 8007286:	4293      	cmp	r3, r2
 8007288:	d82a      	bhi.n	80072e0 <UART_SetConfig+0x22c>
 800728a:	2280      	movs	r2, #128	@ 0x80
 800728c:	0112      	lsls	r2, r2, #4
 800728e:	4293      	cmp	r3, r2
 8007290:	d011      	beq.n	80072b6 <UART_SetConfig+0x202>
 8007292:	2280      	movs	r2, #128	@ 0x80
 8007294:	0112      	lsls	r2, r2, #4
 8007296:	4293      	cmp	r3, r2
 8007298:	d822      	bhi.n	80072e0 <UART_SetConfig+0x22c>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <UART_SetConfig+0x1f4>
 800729e:	2280      	movs	r2, #128	@ 0x80
 80072a0:	00d2      	lsls	r2, r2, #3
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <UART_SetConfig+0x210>
 80072a6:	e01b      	b.n	80072e0 <UART_SetConfig+0x22c>
 80072a8:	231b      	movs	r3, #27
 80072aa:	2220      	movs	r2, #32
 80072ac:	189b      	adds	r3, r3, r2
 80072ae:	19db      	adds	r3, r3, r7
 80072b0:	2200      	movs	r2, #0
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	e021      	b.n	80072fa <UART_SetConfig+0x246>
 80072b6:	231b      	movs	r3, #27
 80072b8:	2220      	movs	r2, #32
 80072ba:	189b      	adds	r3, r3, r2
 80072bc:	19db      	adds	r3, r3, r7
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	e01a      	b.n	80072fa <UART_SetConfig+0x246>
 80072c4:	231b      	movs	r3, #27
 80072c6:	2220      	movs	r2, #32
 80072c8:	189b      	adds	r3, r3, r2
 80072ca:	19db      	adds	r3, r3, r7
 80072cc:	2204      	movs	r2, #4
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e013      	b.n	80072fa <UART_SetConfig+0x246>
 80072d2:	231b      	movs	r3, #27
 80072d4:	2220      	movs	r2, #32
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	19db      	adds	r3, r3, r7
 80072da:	2208      	movs	r2, #8
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	e00c      	b.n	80072fa <UART_SetConfig+0x246>
 80072e0:	231b      	movs	r3, #27
 80072e2:	2220      	movs	r2, #32
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	19db      	adds	r3, r3, r7
 80072e8:	2210      	movs	r2, #16
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e005      	b.n	80072fa <UART_SetConfig+0x246>
 80072ee:	231b      	movs	r3, #27
 80072f0:	2220      	movs	r2, #32
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	19db      	adds	r3, r3, r7
 80072f6:	2210      	movs	r2, #16
 80072f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a2b      	ldr	r2, [pc, #172]	@ (80073ac <UART_SetConfig+0x2f8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d000      	beq.n	8007306 <UART_SetConfig+0x252>
 8007304:	e0a9      	b.n	800745a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007306:	231b      	movs	r3, #27
 8007308:	2220      	movs	r2, #32
 800730a:	189b      	adds	r3, r3, r2
 800730c:	19db      	adds	r3, r3, r7
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b08      	cmp	r3, #8
 8007312:	d015      	beq.n	8007340 <UART_SetConfig+0x28c>
 8007314:	dc18      	bgt.n	8007348 <UART_SetConfig+0x294>
 8007316:	2b04      	cmp	r3, #4
 8007318:	d00d      	beq.n	8007336 <UART_SetConfig+0x282>
 800731a:	dc15      	bgt.n	8007348 <UART_SetConfig+0x294>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <UART_SetConfig+0x272>
 8007320:	2b02      	cmp	r3, #2
 8007322:	d005      	beq.n	8007330 <UART_SetConfig+0x27c>
 8007324:	e010      	b.n	8007348 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007326:	f7fd faf9 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 800732a:	0003      	movs	r3, r0
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800732e:	e014      	b.n	800735a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b25      	ldr	r3, [pc, #148]	@ (80073c8 <UART_SetConfig+0x314>)
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007334:	e011      	b.n	800735a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fd fa65 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 800733a:	0003      	movs	r3, r0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800733e:	e00c      	b.n	800735a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007340:	2380      	movs	r3, #128	@ 0x80
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007346:	e008      	b.n	800735a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800734c:	231a      	movs	r3, #26
 800734e:	2220      	movs	r2, #32
 8007350:	189b      	adds	r3, r3, r2
 8007352:	19db      	adds	r3, r3, r7
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
        break;
 8007358:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	2b00      	cmp	r3, #0
 800735e:	d100      	bne.n	8007362 <UART_SetConfig+0x2ae>
 8007360:	e14b      	b.n	80075fa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007366:	4b19      	ldr	r3, [pc, #100]	@ (80073cc <UART_SetConfig+0x318>)
 8007368:	0052      	lsls	r2, r2, #1
 800736a:	5ad3      	ldrh	r3, [r2, r3]
 800736c:	0019      	movs	r1, r3
 800736e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007370:	f7f8 feda 	bl	8000128 <__udivsi3>
 8007374:	0003      	movs	r3, r0
 8007376:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	0013      	movs	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	189b      	adds	r3, r3, r2
 8007382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007384:	429a      	cmp	r2, r3
 8007386:	d305      	bcc.n	8007394 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800738e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007390:	429a      	cmp	r2, r3
 8007392:	d91d      	bls.n	80073d0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007394:	231a      	movs	r3, #26
 8007396:	2220      	movs	r2, #32
 8007398:	189b      	adds	r3, r3, r2
 800739a:	19db      	adds	r3, r3, r7
 800739c:	2201      	movs	r2, #1
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	e12b      	b.n	80075fa <UART_SetConfig+0x546>
 80073a2:	46c0      	nop			@ (mov r8, r8)
 80073a4:	cfff69f3 	.word	0xcfff69f3
 80073a8:	ffffcfff 	.word	0xffffcfff
 80073ac:	40008000 	.word	0x40008000
 80073b0:	11fff4ff 	.word	0x11fff4ff
 80073b4:	40013800 	.word	0x40013800
 80073b8:	40021000 	.word	0x40021000
 80073bc:	40004400 	.word	0x40004400
 80073c0:	40004800 	.word	0x40004800
 80073c4:	40004c00 	.word	0x40004c00
 80073c8:	00f42400 	.word	0x00f42400
 80073cc:	0800965c 	.word	0x0800965c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	61bb      	str	r3, [r7, #24]
 80073d4:	2300      	movs	r3, #0
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073dc:	4b92      	ldr	r3, [pc, #584]	@ (8007628 <UART_SetConfig+0x574>)
 80073de:	0052      	lsls	r2, r2, #1
 80073e0:	5ad3      	ldrh	r3, [r2, r3]
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	69b8      	ldr	r0, [r7, #24]
 80073ee:	69f9      	ldr	r1, [r7, #28]
 80073f0:	f7f9 f810 	bl	8000414 <__aeabi_uldivmod>
 80073f4:	0002      	movs	r2, r0
 80073f6:	000b      	movs	r3, r1
 80073f8:	0e11      	lsrs	r1, r2, #24
 80073fa:	021d      	lsls	r5, r3, #8
 80073fc:	430d      	orrs	r5, r1
 80073fe:	0214      	lsls	r4, r2, #8
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	60bb      	str	r3, [r7, #8]
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68b8      	ldr	r0, [r7, #8]
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	1900      	adds	r0, r0, r4
 8007412:	4169      	adcs	r1, r5
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	2300      	movs	r3, #0
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f7f8 fff7 	bl	8000414 <__aeabi_uldivmod>
 8007426:	0002      	movs	r2, r0
 8007428:	000b      	movs	r3, r1
 800742a:	0013      	movs	r3, r2
 800742c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800742e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007430:	23c0      	movs	r3, #192	@ 0xc0
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	429a      	cmp	r2, r3
 8007436:	d309      	bcc.n	800744c <UART_SetConfig+0x398>
 8007438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800743a:	2380      	movs	r3, #128	@ 0x80
 800743c:	035b      	lsls	r3, r3, #13
 800743e:	429a      	cmp	r2, r3
 8007440:	d204      	bcs.n	800744c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e0d6      	b.n	80075fa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800744c:	231a      	movs	r3, #26
 800744e:	2220      	movs	r2, #32
 8007450:	189b      	adds	r3, r3, r2
 8007452:	19db      	adds	r3, r3, r7
 8007454:	2201      	movs	r2, #1
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	e0cf      	b.n	80075fa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	69da      	ldr	r2, [r3, #28]
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	429a      	cmp	r2, r3
 8007464:	d000      	beq.n	8007468 <UART_SetConfig+0x3b4>
 8007466:	e070      	b.n	800754a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007468:	231b      	movs	r3, #27
 800746a:	2220      	movs	r2, #32
 800746c:	189b      	adds	r3, r3, r2
 800746e:	19db      	adds	r3, r3, r7
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b08      	cmp	r3, #8
 8007474:	d015      	beq.n	80074a2 <UART_SetConfig+0x3ee>
 8007476:	dc18      	bgt.n	80074aa <UART_SetConfig+0x3f6>
 8007478:	2b04      	cmp	r3, #4
 800747a:	d00d      	beq.n	8007498 <UART_SetConfig+0x3e4>
 800747c:	dc15      	bgt.n	80074aa <UART_SetConfig+0x3f6>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <UART_SetConfig+0x3d4>
 8007482:	2b02      	cmp	r3, #2
 8007484:	d005      	beq.n	8007492 <UART_SetConfig+0x3de>
 8007486:	e010      	b.n	80074aa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007488:	f7fd fa48 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 800748c:	0003      	movs	r3, r0
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007490:	e014      	b.n	80074bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007492:	4b66      	ldr	r3, [pc, #408]	@ (800762c <UART_SetConfig+0x578>)
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007496:	e011      	b.n	80074bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007498:	f7fd f9b4 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 800749c:	0003      	movs	r3, r0
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074a0:	e00c      	b.n	80074bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074a8:	e008      	b.n	80074bc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80074ae:	231a      	movs	r3, #26
 80074b0:	2220      	movs	r2, #32
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	19db      	adds	r3, r3, r7
 80074b6:	2201      	movs	r2, #1
 80074b8:	701a      	strb	r2, [r3, #0]
        break;
 80074ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d100      	bne.n	80074c4 <UART_SetConfig+0x410>
 80074c2:	e09a      	b.n	80075fa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074c8:	4b57      	ldr	r3, [pc, #348]	@ (8007628 <UART_SetConfig+0x574>)
 80074ca:	0052      	lsls	r2, r2, #1
 80074cc:	5ad3      	ldrh	r3, [r2, r3]
 80074ce:	0019      	movs	r1, r3
 80074d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80074d2:	f7f8 fe29 	bl	8000128 <__udivsi3>
 80074d6:	0003      	movs	r3, r0
 80074d8:	005a      	lsls	r2, r3, #1
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	18d2      	adds	r2, r2, r3
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	0019      	movs	r1, r3
 80074e8:	0010      	movs	r0, r2
 80074ea:	f7f8 fe1d 	bl	8000128 <__udivsi3>
 80074ee:	0003      	movs	r3, r0
 80074f0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	2b0f      	cmp	r3, #15
 80074f6:	d921      	bls.n	800753c <UART_SetConfig+0x488>
 80074f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fa:	2380      	movs	r3, #128	@ 0x80
 80074fc:	025b      	lsls	r3, r3, #9
 80074fe:	429a      	cmp	r2, r3
 8007500:	d21c      	bcs.n	800753c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	b29a      	uxth	r2, r3
 8007506:	200e      	movs	r0, #14
 8007508:	2420      	movs	r4, #32
 800750a:	1903      	adds	r3, r0, r4
 800750c:	19db      	adds	r3, r3, r7
 800750e:	210f      	movs	r1, #15
 8007510:	438a      	bics	r2, r1
 8007512:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	b29b      	uxth	r3, r3
 800751a:	2207      	movs	r2, #7
 800751c:	4013      	ands	r3, r2
 800751e:	b299      	uxth	r1, r3
 8007520:	1903      	adds	r3, r0, r4
 8007522:	19db      	adds	r3, r3, r7
 8007524:	1902      	adds	r2, r0, r4
 8007526:	19d2      	adds	r2, r2, r7
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	1902      	adds	r2, r0, r4
 8007534:	19d2      	adds	r2, r2, r7
 8007536:	8812      	ldrh	r2, [r2, #0]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	e05e      	b.n	80075fa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800753c:	231a      	movs	r3, #26
 800753e:	2220      	movs	r2, #32
 8007540:	189b      	adds	r3, r3, r2
 8007542:	19db      	adds	r3, r3, r7
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e057      	b.n	80075fa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800754a:	231b      	movs	r3, #27
 800754c:	2220      	movs	r2, #32
 800754e:	189b      	adds	r3, r3, r2
 8007550:	19db      	adds	r3, r3, r7
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b08      	cmp	r3, #8
 8007556:	d015      	beq.n	8007584 <UART_SetConfig+0x4d0>
 8007558:	dc18      	bgt.n	800758c <UART_SetConfig+0x4d8>
 800755a:	2b04      	cmp	r3, #4
 800755c:	d00d      	beq.n	800757a <UART_SetConfig+0x4c6>
 800755e:	dc15      	bgt.n	800758c <UART_SetConfig+0x4d8>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <UART_SetConfig+0x4b6>
 8007564:	2b02      	cmp	r3, #2
 8007566:	d005      	beq.n	8007574 <UART_SetConfig+0x4c0>
 8007568:	e010      	b.n	800758c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800756a:	f7fd f9d7 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 800756e:	0003      	movs	r3, r0
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007572:	e014      	b.n	800759e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007574:	4b2d      	ldr	r3, [pc, #180]	@ (800762c <UART_SetConfig+0x578>)
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007578:	e011      	b.n	800759e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757a:	f7fd f943 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 800757e:	0003      	movs	r3, r0
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007582:	e00c      	b.n	800759e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007584:	2380      	movs	r3, #128	@ 0x80
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800758a:	e008      	b.n	800759e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007590:	231a      	movs	r3, #26
 8007592:	2220      	movs	r2, #32
 8007594:	189b      	adds	r3, r3, r2
 8007596:	19db      	adds	r3, r3, r7
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
        break;
 800759c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800759e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02a      	beq.n	80075fa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007628 <UART_SetConfig+0x574>)
 80075aa:	0052      	lsls	r2, r2, #1
 80075ac:	5ad3      	ldrh	r3, [r2, r3]
 80075ae:	0019      	movs	r1, r3
 80075b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80075b2:	f7f8 fdb9 	bl	8000128 <__udivsi3>
 80075b6:	0003      	movs	r3, r0
 80075b8:	001a      	movs	r2, r3
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	18d2      	adds	r2, r2, r3
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	0019      	movs	r1, r3
 80075c8:	0010      	movs	r0, r2
 80075ca:	f7f8 fdad 	bl	8000128 <__udivsi3>
 80075ce:	0003      	movs	r3, r0
 80075d0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	2b0f      	cmp	r3, #15
 80075d6:	d90a      	bls.n	80075ee <UART_SetConfig+0x53a>
 80075d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075da:	2380      	movs	r3, #128	@ 0x80
 80075dc:	025b      	lsls	r3, r3, #9
 80075de:	429a      	cmp	r2, r3
 80075e0:	d205      	bcs.n	80075ee <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	e005      	b.n	80075fa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80075ee:	231a      	movs	r3, #26
 80075f0:	2220      	movs	r2, #32
 80075f2:	189b      	adds	r3, r3, r2
 80075f4:	19db      	adds	r3, r3, r7
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	226a      	movs	r2, #106	@ 0x6a
 80075fe:	2101      	movs	r1, #1
 8007600:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	2268      	movs	r2, #104	@ 0x68
 8007606:	2101      	movs	r1, #1
 8007608:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	2200      	movs	r2, #0
 800760e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	2200      	movs	r2, #0
 8007614:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007616:	231a      	movs	r3, #26
 8007618:	2220      	movs	r2, #32
 800761a:	189b      	adds	r3, r3, r2
 800761c:	19db      	adds	r3, r3, r7
 800761e:	781b      	ldrb	r3, [r3, #0]
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	b010      	add	sp, #64	@ 0x40
 8007626:	bdb0      	pop	{r4, r5, r7, pc}
 8007628:	0800965c 	.word	0x0800965c
 800762c:	00f42400 	.word	0x00f42400

08007630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	2208      	movs	r2, #8
 800763e:	4013      	ands	r3, r2
 8007640:	d00b      	beq.n	800765a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a4a      	ldr	r2, [pc, #296]	@ (8007774 <UART_AdvFeatureConfig+0x144>)
 800764a:	4013      	ands	r3, r2
 800764c:	0019      	movs	r1, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765e:	2201      	movs	r2, #1
 8007660:	4013      	ands	r3, r2
 8007662:	d00b      	beq.n	800767c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4a43      	ldr	r2, [pc, #268]	@ (8007778 <UART_AdvFeatureConfig+0x148>)
 800766c:	4013      	ands	r3, r2
 800766e:	0019      	movs	r1, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	2202      	movs	r2, #2
 8007682:	4013      	ands	r3, r2
 8007684:	d00b      	beq.n	800769e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	4a3b      	ldr	r2, [pc, #236]	@ (800777c <UART_AdvFeatureConfig+0x14c>)
 800768e:	4013      	ands	r3, r2
 8007690:	0019      	movs	r1, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	2204      	movs	r2, #4
 80076a4:	4013      	ands	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4a34      	ldr	r2, [pc, #208]	@ (8007780 <UART_AdvFeatureConfig+0x150>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	0019      	movs	r1, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	2210      	movs	r2, #16
 80076c6:	4013      	ands	r3, r2
 80076c8:	d00b      	beq.n	80076e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007784 <UART_AdvFeatureConfig+0x154>)
 80076d2:	4013      	ands	r3, r2
 80076d4:	0019      	movs	r1, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	2220      	movs	r2, #32
 80076e8:	4013      	ands	r3, r2
 80076ea:	d00b      	beq.n	8007704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	4a25      	ldr	r2, [pc, #148]	@ (8007788 <UART_AdvFeatureConfig+0x158>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	0019      	movs	r1, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	2240      	movs	r2, #64	@ 0x40
 800770a:	4013      	ands	r3, r2
 800770c:	d01d      	beq.n	800774a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a1d      	ldr	r2, [pc, #116]	@ (800778c <UART_AdvFeatureConfig+0x15c>)
 8007716:	4013      	ands	r3, r2
 8007718:	0019      	movs	r1, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800772a:	2380      	movs	r3, #128	@ 0x80
 800772c:	035b      	lsls	r3, r3, #13
 800772e:	429a      	cmp	r2, r3
 8007730:	d10b      	bne.n	800774a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a15      	ldr	r2, [pc, #84]	@ (8007790 <UART_AdvFeatureConfig+0x160>)
 800773a:	4013      	ands	r3, r2
 800773c:	0019      	movs	r1, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774e:	2280      	movs	r2, #128	@ 0x80
 8007750:	4013      	ands	r3, r2
 8007752:	d00b      	beq.n	800776c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4a0e      	ldr	r2, [pc, #56]	@ (8007794 <UART_AdvFeatureConfig+0x164>)
 800775c:	4013      	ands	r3, r2
 800775e:	0019      	movs	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }
}
 800776c:	46c0      	nop			@ (mov r8, r8)
 800776e:	46bd      	mov	sp, r7
 8007770:	b002      	add	sp, #8
 8007772:	bd80      	pop	{r7, pc}
 8007774:	ffff7fff 	.word	0xffff7fff
 8007778:	fffdffff 	.word	0xfffdffff
 800777c:	fffeffff 	.word	0xfffeffff
 8007780:	fffbffff 	.word	0xfffbffff
 8007784:	ffffefff 	.word	0xffffefff
 8007788:	ffffdfff 	.word	0xffffdfff
 800778c:	ffefffff 	.word	0xffefffff
 8007790:	ff9fffff 	.word	0xff9fffff
 8007794:	fff7ffff 	.word	0xfff7ffff

08007798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b092      	sub	sp, #72	@ 0x48
 800779c:	af02      	add	r7, sp, #8
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2290      	movs	r2, #144	@ 0x90
 80077a4:	2100      	movs	r1, #0
 80077a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077a8:	f7fa fd84 	bl	80022b4 <HAL_GetTick>
 80077ac:	0003      	movs	r3, r0
 80077ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2208      	movs	r2, #8
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d12d      	bne.n	800781a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c0:	2280      	movs	r2, #128	@ 0x80
 80077c2:	0391      	lsls	r1, r2, #14
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	4a47      	ldr	r2, [pc, #284]	@ (80078e4 <UART_CheckIdleState+0x14c>)
 80077c8:	9200      	str	r2, [sp, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f000 f88e 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d022      	beq.n	800781a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d4:	f3ef 8310 	mrs	r3, PRIMASK
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077de:	2301      	movs	r3, #1
 80077e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	f383 8810 	msr	PRIMASK, r3
}
 80077e8:	46c0      	nop			@ (mov r8, r8)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2180      	movs	r1, #128	@ 0x80
 80077f6:	438a      	bics	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	f383 8810 	msr	PRIMASK, r3
}
 8007804:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2288      	movs	r2, #136	@ 0x88
 800780a:	2120      	movs	r1, #32
 800780c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2284      	movs	r2, #132	@ 0x84
 8007812:	2100      	movs	r1, #0
 8007814:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e060      	b.n	80078dc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2204      	movs	r2, #4
 8007822:	4013      	ands	r3, r2
 8007824:	2b04      	cmp	r3, #4
 8007826:	d146      	bne.n	80078b6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800782a:	2280      	movs	r2, #128	@ 0x80
 800782c:	03d1      	lsls	r1, r2, #15
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4a2c      	ldr	r2, [pc, #176]	@ (80078e4 <UART_CheckIdleState+0x14c>)
 8007832:	9200      	str	r2, [sp, #0]
 8007834:	2200      	movs	r2, #0
 8007836:	f000 f859 	bl	80078ec <UART_WaitOnFlagUntilTimeout>
 800783a:	1e03      	subs	r3, r0, #0
 800783c:	d03b      	beq.n	80078b6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800783e:	f3ef 8310 	mrs	r3, PRIMASK
 8007842:	60fb      	str	r3, [r7, #12]
  return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007846:	637b      	str	r3, [r7, #52]	@ 0x34
 8007848:	2301      	movs	r3, #1
 800784a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f383 8810 	msr	PRIMASK, r3
}
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4922      	ldr	r1, [pc, #136]	@ (80078e8 <UART_CheckIdleState+0x150>)
 8007860:	400a      	ands	r2, r1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f383 8810 	msr	PRIMASK, r3
}
 800786e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007870:	f3ef 8310 	mrs	r3, PRIMASK
 8007874:	61bb      	str	r3, [r7, #24]
  return(result);
 8007876:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30
 800787a:	2301      	movs	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	f383 8810 	msr	PRIMASK, r3
}
 8007884:	46c0      	nop			@ (mov r8, r8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2101      	movs	r1, #1
 8007892:	438a      	bics	r2, r1
 8007894:	609a      	str	r2, [r3, #8]
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f383 8810 	msr	PRIMASK, r3
}
 80078a0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	228c      	movs	r2, #140	@ 0x8c
 80078a6:	2120      	movs	r1, #32
 80078a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2284      	movs	r2, #132	@ 0x84
 80078ae:	2100      	movs	r1, #0
 80078b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e012      	b.n	80078dc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2288      	movs	r2, #136	@ 0x88
 80078ba:	2120      	movs	r1, #32
 80078bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	228c      	movs	r2, #140	@ 0x8c
 80078c2:	2120      	movs	r1, #32
 80078c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2284      	movs	r2, #132	@ 0x84
 80078d6:	2100      	movs	r1, #0
 80078d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b010      	add	sp, #64	@ 0x40
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	01ffffff 	.word	0x01ffffff
 80078e8:	fffffedf 	.word	0xfffffedf

080078ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	1dfb      	adds	r3, r7, #7
 80078fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fc:	e051      	b.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	3301      	adds	r3, #1
 8007902:	d04e      	beq.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007904:	f7fa fcd6 	bl	80022b4 <HAL_GetTick>
 8007908:	0002      	movs	r2, r0
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	429a      	cmp	r2, r3
 8007912:	d302      	bcc.n	800791a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e051      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2204      	movs	r2, #4
 8007926:	4013      	ands	r3, r2
 8007928:	d03b      	beq.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b80      	cmp	r3, #128	@ 0x80
 800792e:	d038      	beq.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d035      	beq.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	2208      	movs	r2, #8
 800793e:	4013      	ands	r3, r2
 8007940:	2b08      	cmp	r3, #8
 8007942:	d111      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2208      	movs	r2, #8
 800794a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	0018      	movs	r0, r3
 8007950:	f000 f960 	bl	8007c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2290      	movs	r2, #144	@ 0x90
 8007958:	2108      	movs	r1, #8
 800795a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2284      	movs	r2, #132	@ 0x84
 8007960:	2100      	movs	r1, #0
 8007962:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e02c      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69da      	ldr	r2, [r3, #28]
 800796e:	2380      	movs	r3, #128	@ 0x80
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	401a      	ands	r2, r3
 8007974:	2380      	movs	r3, #128	@ 0x80
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	429a      	cmp	r2, r3
 800797a:	d112      	bne.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2280      	movs	r2, #128	@ 0x80
 8007982:	0112      	lsls	r2, r2, #4
 8007984:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	0018      	movs	r0, r3
 800798a:	f000 f943 	bl	8007c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2290      	movs	r2, #144	@ 0x90
 8007992:	2120      	movs	r1, #32
 8007994:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2284      	movs	r2, #132	@ 0x84
 800799a:	2100      	movs	r1, #0
 800799c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e00f      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	4013      	ands	r3, r2
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	425a      	negs	r2, r3
 80079b2:	4153      	adcs	r3, r2
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	001a      	movs	r2, r3
 80079b8:	1dfb      	adds	r3, r7, #7
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d09e      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	0018      	movs	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b004      	add	sp, #16
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b098      	sub	sp, #96	@ 0x60
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	1dbb      	adds	r3, r7, #6
 80079d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	1dba      	adds	r2, r7, #6
 80079e4:	215c      	movs	r1, #92	@ 0x5c
 80079e6:	8812      	ldrh	r2, [r2, #0]
 80079e8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1dba      	adds	r2, r7, #6
 80079ee:	215e      	movs	r1, #94	@ 0x5e
 80079f0:	8812      	ldrh	r2, [r2, #0]
 80079f2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	2380      	movs	r3, #128	@ 0x80
 8007a00:	015b      	lsls	r3, r3, #5
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d10d      	bne.n	8007a22 <UART_Start_Receive_IT+0x56>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <UART_Start_Receive_IT+0x4c>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2260      	movs	r2, #96	@ 0x60
 8007a12:	497b      	ldr	r1, [pc, #492]	@ (8007c00 <UART_Start_Receive_IT+0x234>)
 8007a14:	5299      	strh	r1, [r3, r2]
 8007a16:	e02e      	b.n	8007a76 <UART_Start_Receive_IT+0xaa>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2260      	movs	r2, #96	@ 0x60
 8007a1c:	21ff      	movs	r1, #255	@ 0xff
 8007a1e:	5299      	strh	r1, [r3, r2]
 8007a20:	e029      	b.n	8007a76 <UART_Start_Receive_IT+0xaa>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10d      	bne.n	8007a46 <UART_Start_Receive_IT+0x7a>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <UART_Start_Receive_IT+0x70>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2260      	movs	r2, #96	@ 0x60
 8007a36:	21ff      	movs	r1, #255	@ 0xff
 8007a38:	5299      	strh	r1, [r3, r2]
 8007a3a:	e01c      	b.n	8007a76 <UART_Start_Receive_IT+0xaa>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2260      	movs	r2, #96	@ 0x60
 8007a40:	217f      	movs	r1, #127	@ 0x7f
 8007a42:	5299      	strh	r1, [r3, r2]
 8007a44:	e017      	b.n	8007a76 <UART_Start_Receive_IT+0xaa>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	2380      	movs	r3, #128	@ 0x80
 8007a4c:	055b      	lsls	r3, r3, #21
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d10d      	bne.n	8007a6e <UART_Start_Receive_IT+0xa2>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <UART_Start_Receive_IT+0x98>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2260      	movs	r2, #96	@ 0x60
 8007a5e:	217f      	movs	r1, #127	@ 0x7f
 8007a60:	5299      	strh	r1, [r3, r2]
 8007a62:	e008      	b.n	8007a76 <UART_Start_Receive_IT+0xaa>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2260      	movs	r2, #96	@ 0x60
 8007a68:	213f      	movs	r1, #63	@ 0x3f
 8007a6a:	5299      	strh	r1, [r3, r2]
 8007a6c:	e003      	b.n	8007a76 <UART_Start_Receive_IT+0xaa>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2260      	movs	r2, #96	@ 0x60
 8007a72:	2100      	movs	r1, #0
 8007a74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2290      	movs	r2, #144	@ 0x90
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	228c      	movs	r2, #140	@ 0x8c
 8007a82:	2122      	movs	r1, #34	@ 0x22
 8007a84:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a86:	f3ef 8310 	mrs	r3, PRIMASK
 8007a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8007a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a90:	2301      	movs	r3, #1
 8007a92:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a96:	f383 8810 	msr	PRIMASK, r3
}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab2:	f383 8810 	msr	PRIMASK, r3
}
 8007ab6:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007abc:	2380      	movs	r3, #128	@ 0x80
 8007abe:	059b      	lsls	r3, r3, #22
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d150      	bne.n	8007b66 <UART_Start_Receive_IT+0x19a>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2268      	movs	r2, #104	@ 0x68
 8007ac8:	5a9b      	ldrh	r3, [r3, r2]
 8007aca:	1dba      	adds	r2, r7, #6
 8007acc:	8812      	ldrh	r2, [r2, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d349      	bcc.n	8007b66 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	2380      	movs	r3, #128	@ 0x80
 8007ad8:	015b      	lsls	r3, r3, #5
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d107      	bne.n	8007aee <UART_Start_Receive_IT+0x122>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a46      	ldr	r2, [pc, #280]	@ (8007c04 <UART_Start_Receive_IT+0x238>)
 8007aea:	675a      	str	r2, [r3, #116]	@ 0x74
 8007aec:	e002      	b.n	8007af4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a45      	ldr	r2, [pc, #276]	@ (8007c08 <UART_Start_Receive_IT+0x23c>)
 8007af2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d019      	beq.n	8007b30 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afc:	f3ef 8310 	mrs	r3, PRIMASK
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8007b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b06:	2301      	movs	r3, #1
 8007b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0c:	f383 8810 	msr	PRIMASK, r3
}
 8007b10:	46c0      	nop			@ (mov r8, r8)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2180      	movs	r1, #128	@ 0x80
 8007b1e:	0049      	lsls	r1, r1, #1
 8007b20:	430a      	orrs	r2, r1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b30:	f3ef 8310 	mrs	r3, PRIMASK
 8007b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b38:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b40:	f383 8810 	msr	PRIMASK, r3
}
 8007b44:	46c0      	nop			@ (mov r8, r8)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2180      	movs	r1, #128	@ 0x80
 8007b52:	0549      	lsls	r1, r1, #21
 8007b54:	430a      	orrs	r2, r1
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	f383 8810 	msr	PRIMASK, r3
}
 8007b62:	46c0      	nop			@ (mov r8, r8)
 8007b64:	e047      	b.n	8007bf6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	2380      	movs	r3, #128	@ 0x80
 8007b6c:	015b      	lsls	r3, r3, #5
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d107      	bne.n	8007b82 <UART_Start_Receive_IT+0x1b6>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a23      	ldr	r2, [pc, #140]	@ (8007c0c <UART_Start_Receive_IT+0x240>)
 8007b7e:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b80:	e002      	b.n	8007b88 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4a22      	ldr	r2, [pc, #136]	@ (8007c10 <UART_Start_Receive_IT+0x244>)
 8007b86:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d019      	beq.n	8007bc4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b90:	f3ef 8310 	mrs	r3, PRIMASK
 8007b94:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b96:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f383 8810 	msr	PRIMASK, r3
}
 8007ba4:	46c0      	nop			@ (mov r8, r8)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2190      	movs	r1, #144	@ 0x90
 8007bb2:	0049      	lsls	r1, r1, #1
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	f383 8810 	msr	PRIMASK, r3
}
 8007bc2:	e018      	b.n	8007bf6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc8:	613b      	str	r3, [r7, #16]
  return(result);
 8007bca:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f383 8810 	msr	PRIMASK, r3
}
 8007bd8:	46c0      	nop			@ (mov r8, r8)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2120      	movs	r1, #32
 8007be6:	430a      	orrs	r2, r1
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f383 8810 	msr	PRIMASK, r3
}
 8007bf4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b018      	add	sp, #96	@ 0x60
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	000001ff 	.word	0x000001ff
 8007c04:	08008431 	.word	0x08008431
 8007c08:	080080f1 	.word	0x080080f1
 8007c0c:	08007f2d 	.word	0x08007f2d
 8007c10:	08007d69 	.word	0x08007d69

08007c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	@ 0x38
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c20:	617b      	str	r3, [r7, #20]
  return(result);
 8007c22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c26:	2301      	movs	r3, #1
 8007c28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f383 8810 	msr	PRIMASK, r3
}
 8007c30:	46c0      	nop			@ (mov r8, r8)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4926      	ldr	r1, [pc, #152]	@ (8007cd8 <UART_EndRxTransfer+0xc4>)
 8007c3e:	400a      	ands	r2, r1
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f383 8810 	msr	PRIMASK, r3
}
 8007c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c52:	623b      	str	r3, [r7, #32]
  return(result);
 8007c54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c58:	2301      	movs	r3, #1
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	f383 8810 	msr	PRIMASK, r3
}
 8007c62:	46c0      	nop			@ (mov r8, r8)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	491b      	ldr	r1, [pc, #108]	@ (8007cdc <UART_EndRxTransfer+0xc8>)
 8007c70:	400a      	ands	r2, r1
 8007c72:	609a      	str	r2, [r3, #8]
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	f383 8810 	msr	PRIMASK, r3
}
 8007c7e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d118      	bne.n	8007cba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c88:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c92:	2301      	movs	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f383 8810 	msr	PRIMASK, r3
}
 8007c9c:	46c0      	nop			@ (mov r8, r8)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2110      	movs	r1, #16
 8007caa:	438a      	bics	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f383 8810 	msr	PRIMASK, r3
}
 8007cb8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	228c      	movs	r2, #140	@ 0x8c
 8007cbe:	2120      	movs	r1, #32
 8007cc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007cce:	46c0      	nop			@ (mov r8, r8)
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	b00e      	add	sp, #56	@ 0x38
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	fffffedf 	.word	0xfffffedf
 8007cdc:	effffffe 	.word	0xeffffffe

08007ce0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	225e      	movs	r2, #94	@ 0x5e
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2256      	movs	r2, #86	@ 0x56
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7ff f9c3 	bl	800708c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d06:	46c0      	nop			@ (mov r8, r8)
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b004      	add	sp, #16
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b086      	sub	sp, #24
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d16:	f3ef 8310 	mrs	r3, PRIMASK
 8007d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	2301      	movs	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f383 8810 	msr	PRIMASK, r3
}
 8007d2a:	46c0      	nop			@ (mov r8, r8)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2140      	movs	r1, #64	@ 0x40
 8007d38:	438a      	bics	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f383 8810 	msr	PRIMASK, r3
}
 8007d46:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2288      	movs	r2, #136	@ 0x88
 8007d4c:	2120      	movs	r1, #32
 8007d4e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7ff f98f 	bl	800707c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d5e:	46c0      	nop			@ (mov r8, r8)
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b006      	add	sp, #24
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b094      	sub	sp, #80	@ 0x50
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d70:	204e      	movs	r0, #78	@ 0x4e
 8007d72:	183b      	adds	r3, r7, r0
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	2160      	movs	r1, #96	@ 0x60
 8007d78:	5a52      	ldrh	r2, [r2, r1]
 8007d7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	228c      	movs	r2, #140	@ 0x8c
 8007d80:	589b      	ldr	r3, [r3, r2]
 8007d82:	2b22      	cmp	r3, #34	@ 0x22
 8007d84:	d000      	beq.n	8007d88 <UART_RxISR_8BIT+0x20>
 8007d86:	e0bf      	b.n	8007f08 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d8e:	214c      	movs	r1, #76	@ 0x4c
 8007d90:	187b      	adds	r3, r7, r1
 8007d92:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d94:	187b      	adds	r3, r7, r1
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	183b      	adds	r3, r7, r0
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b2d9      	uxtb	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da4:	400a      	ands	r2, r1
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	225e      	movs	r2, #94	@ 0x5e
 8007db8:	5a9b      	ldrh	r3, [r3, r2]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b299      	uxth	r1, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	225e      	movs	r2, #94	@ 0x5e
 8007dc4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	225e      	movs	r2, #94	@ 0x5e
 8007dca:	5a9b      	ldrh	r3, [r3, r2]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d000      	beq.n	8007dd4 <UART_RxISR_8BIT+0x6c>
 8007dd2:	e0a1      	b.n	8007f18 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dde:	2301      	movs	r3, #1
 8007de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de4:	f383 8810 	msr	PRIMASK, r3
}
 8007de8:	46c0      	nop			@ (mov r8, r8)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	494a      	ldr	r1, [pc, #296]	@ (8007f20 <UART_RxISR_8BIT+0x1b8>)
 8007df6:	400a      	ands	r2, r1
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e00:	f383 8810 	msr	PRIMASK, r3
}
 8007e04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e06:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e10:	2301      	movs	r3, #1
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e16:	f383 8810 	msr	PRIMASK, r3
}
 8007e1a:	46c0      	nop			@ (mov r8, r8)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2101      	movs	r1, #1
 8007e28:	438a      	bics	r2, r1
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	228c      	movs	r2, #140	@ 0x8c
 8007e3c:	2120      	movs	r1, #32
 8007e3e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a34      	ldr	r2, [pc, #208]	@ (8007f24 <UART_RxISR_8BIT+0x1bc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01f      	beq.n	8007e96 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	041b      	lsls	r3, r3, #16
 8007e60:	4013      	ands	r3, r2
 8007e62:	d018      	beq.n	8007e96 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e64:	f3ef 8310 	mrs	r3, PRIMASK
 8007e68:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e6e:	2301      	movs	r3, #1
 8007e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	f383 8810 	msr	PRIMASK, r3
}
 8007e78:	46c0      	nop			@ (mov r8, r8)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4928      	ldr	r1, [pc, #160]	@ (8007f28 <UART_RxISR_8BIT+0x1c0>)
 8007e86:	400a      	ands	r2, r1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	f383 8810 	msr	PRIMASK, r3
}
 8007e94:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d12f      	bne.n	8007efe <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eaa:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eae:	2301      	movs	r3, #1
 8007eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f383 8810 	msr	PRIMASK, r3
}
 8007eb8:	46c0      	nop			@ (mov r8, r8)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2110      	movs	r1, #16
 8007ec6:	438a      	bics	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f383 8810 	msr	PRIMASK, r3
}
 8007ed4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	2210      	movs	r2, #16
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d103      	bne.n	8007eec <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2210      	movs	r2, #16
 8007eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	225c      	movs	r2, #92	@ 0x5c
 8007ef0:	5a9a      	ldrh	r2, [r3, r2]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	0011      	movs	r1, r2
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7ff f8d0 	bl	800709c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007efc:	e00c      	b.n	8007f18 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7f8 fb9d 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8007f06:	e007      	b.n	8007f18 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2108      	movs	r1, #8
 8007f14:	430a      	orrs	r2, r1
 8007f16:	619a      	str	r2, [r3, #24]
}
 8007f18:	46c0      	nop			@ (mov r8, r8)
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	b014      	add	sp, #80	@ 0x50
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	fffffedf 	.word	0xfffffedf
 8007f24:	40008000 	.word	0x40008000
 8007f28:	fbffffff 	.word	0xfbffffff

08007f2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b094      	sub	sp, #80	@ 0x50
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f34:	204e      	movs	r0, #78	@ 0x4e
 8007f36:	183b      	adds	r3, r7, r0
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	2160      	movs	r1, #96	@ 0x60
 8007f3c:	5a52      	ldrh	r2, [r2, r1]
 8007f3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	228c      	movs	r2, #140	@ 0x8c
 8007f44:	589b      	ldr	r3, [r3, r2]
 8007f46:	2b22      	cmp	r3, #34	@ 0x22
 8007f48:	d000      	beq.n	8007f4c <UART_RxISR_16BIT+0x20>
 8007f4a:	e0bf      	b.n	80080cc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f52:	214c      	movs	r1, #76	@ 0x4c
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f5e:	187b      	adds	r3, r7, r1
 8007f60:	183a      	adds	r2, r7, r0
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	8812      	ldrh	r2, [r2, #0]
 8007f66:	4013      	ands	r3, r2
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f72:	1c9a      	adds	r2, r3, #2
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	225e      	movs	r2, #94	@ 0x5e
 8007f7c:	5a9b      	ldrh	r3, [r3, r2]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b299      	uxth	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	225e      	movs	r2, #94	@ 0x5e
 8007f88:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	225e      	movs	r2, #94	@ 0x5e
 8007f8e:	5a9b      	ldrh	r3, [r3, r2]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d000      	beq.n	8007f98 <UART_RxISR_16BIT+0x6c>
 8007f96:	e0a1      	b.n	80080dc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f98:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9c:	623b      	str	r3, [r7, #32]
  return(result);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	f383 8810 	msr	PRIMASK, r3
}
 8007fac:	46c0      	nop			@ (mov r8, r8)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	494a      	ldr	r1, [pc, #296]	@ (80080e4 <UART_RxISR_16BIT+0x1b8>)
 8007fba:	400a      	ands	r2, r1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc4:	f383 8810 	msr	PRIMASK, r3
}
 8007fc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fca:	f3ef 8310 	mrs	r3, PRIMASK
 8007fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	f383 8810 	msr	PRIMASK, r3
}
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2101      	movs	r1, #1
 8007fec:	438a      	bics	r2, r1
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	228c      	movs	r2, #140	@ 0x8c
 8008000:	2120      	movs	r1, #32
 8008002:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a34      	ldr	r2, [pc, #208]	@ (80080e8 <UART_RxISR_16BIT+0x1bc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d01f      	beq.n	800805a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	2380      	movs	r3, #128	@ 0x80
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	4013      	ands	r3, r2
 8008026:	d018      	beq.n	800805a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008028:	f3ef 8310 	mrs	r3, PRIMASK
 800802c:	617b      	str	r3, [r7, #20]
  return(result);
 800802e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008032:	2301      	movs	r3, #1
 8008034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f383 8810 	msr	PRIMASK, r3
}
 800803c:	46c0      	nop			@ (mov r8, r8)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4928      	ldr	r1, [pc, #160]	@ (80080ec <UART_RxISR_16BIT+0x1c0>)
 800804a:	400a      	ands	r2, r1
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f383 8810 	msr	PRIMASK, r3
}
 8008058:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800805e:	2b01      	cmp	r3, #1
 8008060:	d12f      	bne.n	80080c2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008068:	f3ef 8310 	mrs	r3, PRIMASK
 800806c:	60bb      	str	r3, [r7, #8]
  return(result);
 800806e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008072:	2301      	movs	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	46c0      	nop			@ (mov r8, r8)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2110      	movs	r1, #16
 800808a:	438a      	bics	r2, r1
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f383 8810 	msr	PRIMASK, r3
}
 8008098:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	2210      	movs	r2, #16
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d103      	bne.n	80080b0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2210      	movs	r2, #16
 80080ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	225c      	movs	r2, #92	@ 0x5c
 80080b4:	5a9a      	ldrh	r2, [r3, r2]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	0011      	movs	r1, r2
 80080ba:	0018      	movs	r0, r3
 80080bc:	f7fe ffee 	bl	800709c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080c0:	e00c      	b.n	80080dc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7f8 fabb 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 80080ca:	e007      	b.n	80080dc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2108      	movs	r1, #8
 80080d8:	430a      	orrs	r2, r1
 80080da:	619a      	str	r2, [r3, #24]
}
 80080dc:	46c0      	nop			@ (mov r8, r8)
 80080de:	46bd      	mov	sp, r7
 80080e0:	b014      	add	sp, #80	@ 0x50
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	fffffedf 	.word	0xfffffedf
 80080e8:	40008000 	.word	0x40008000
 80080ec:	fbffffff 	.word	0xfbffffff

080080f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b0a0      	sub	sp, #128	@ 0x80
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080f8:	237a      	movs	r3, #122	@ 0x7a
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	2160      	movs	r1, #96	@ 0x60
 8008100:	5a52      	ldrh	r2, [r2, r1]
 8008102:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	228c      	movs	r2, #140	@ 0x8c
 8008120:	589b      	ldr	r3, [r3, r2]
 8008122:	2b22      	cmp	r3, #34	@ 0x22
 8008124:	d000      	beq.n	8008128 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008126:	e16a      	b.n	80083fe <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008128:	236e      	movs	r3, #110	@ 0x6e
 800812a:	18fb      	adds	r3, r7, r3
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	2168      	movs	r1, #104	@ 0x68
 8008130:	5a52      	ldrh	r2, [r2, r1]
 8008132:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008134:	e111      	b.n	800835a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800813c:	216c      	movs	r1, #108	@ 0x6c
 800813e:	187b      	adds	r3, r7, r1
 8008140:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008142:	187b      	adds	r3, r7, r1
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b2da      	uxtb	r2, r3
 8008148:	237a      	movs	r3, #122	@ 0x7a
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b2d9      	uxtb	r1, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008154:	400a      	ands	r2, r1
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	225e      	movs	r2, #94	@ 0x5e
 8008168:	5a9b      	ldrh	r3, [r3, r2]
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b299      	uxth	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	225e      	movs	r2, #94	@ 0x5e
 8008174:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800817e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008180:	2207      	movs	r2, #7
 8008182:	4013      	ands	r3, r2
 8008184:	d049      	beq.n	800821a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008188:	2201      	movs	r2, #1
 800818a:	4013      	ands	r3, r2
 800818c:	d010      	beq.n	80081b0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800818e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008190:	2380      	movs	r3, #128	@ 0x80
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	4013      	ands	r3, r2
 8008196:	d00b      	beq.n	80081b0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2201      	movs	r2, #1
 800819e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2290      	movs	r2, #144	@ 0x90
 80081a4:	589b      	ldr	r3, [r3, r2]
 80081a6:	2201      	movs	r2, #1
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2190      	movs	r1, #144	@ 0x90
 80081ae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081b2:	2202      	movs	r2, #2
 80081b4:	4013      	ands	r3, r2
 80081b6:	d00f      	beq.n	80081d8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80081b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081ba:	2201      	movs	r2, #1
 80081bc:	4013      	ands	r3, r2
 80081be:	d00b      	beq.n	80081d8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2202      	movs	r2, #2
 80081c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2290      	movs	r2, #144	@ 0x90
 80081cc:	589b      	ldr	r3, [r3, r2]
 80081ce:	2204      	movs	r2, #4
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2190      	movs	r1, #144	@ 0x90
 80081d6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081da:	2204      	movs	r2, #4
 80081dc:	4013      	ands	r3, r2
 80081de:	d00f      	beq.n	8008200 <UART_RxISR_8BIT_FIFOEN+0x110>
 80081e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081e2:	2201      	movs	r2, #1
 80081e4:	4013      	ands	r3, r2
 80081e6:	d00b      	beq.n	8008200 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2204      	movs	r2, #4
 80081ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2290      	movs	r2, #144	@ 0x90
 80081f4:	589b      	ldr	r3, [r3, r2]
 80081f6:	2202      	movs	r2, #2
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2190      	movs	r1, #144	@ 0x90
 80081fe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2290      	movs	r2, #144	@ 0x90
 8008204:	589b      	ldr	r3, [r3, r2]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0018      	movs	r0, r3
 800820e:	f7fe ff3d 	bl	800708c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2290      	movs	r2, #144	@ 0x90
 8008216:	2100      	movs	r1, #0
 8008218:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	225e      	movs	r2, #94	@ 0x5e
 800821e:	5a9b      	ldrh	r3, [r3, r2]
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d000      	beq.n	8008228 <UART_RxISR_8BIT_FIFOEN+0x138>
 8008226:	e098      	b.n	800835a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008228:	f3ef 8310 	mrs	r3, PRIMASK
 800822c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008232:	2301      	movs	r3, #1
 8008234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008238:	f383 8810 	msr	PRIMASK, r3
}
 800823c:	46c0      	nop			@ (mov r8, r8)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4973      	ldr	r1, [pc, #460]	@ (8008418 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800824a:	400a      	ands	r2, r1
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008250:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008254:	f383 8810 	msr	PRIMASK, r3
}
 8008258:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800825a:	f3ef 8310 	mrs	r3, PRIMASK
 800825e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8008260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008262:	667b      	str	r3, [r7, #100]	@ 0x64
 8008264:	2301      	movs	r3, #1
 8008266:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800826a:	f383 8810 	msr	PRIMASK, r3
}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4968      	ldr	r1, [pc, #416]	@ (800841c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800827c:	400a      	ands	r2, r1
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008286:	f383 8810 	msr	PRIMASK, r3
}
 800828a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	228c      	movs	r2, #140	@ 0x8c
 8008290:	2120      	movs	r1, #32
 8008292:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008420 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01f      	beq.n	80082ea <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	2380      	movs	r3, #128	@ 0x80
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	4013      	ands	r3, r2
 80082b6:	d018      	beq.n	80082ea <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b8:	f3ef 8310 	mrs	r3, PRIMASK
 80082bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80082c2:	2301      	movs	r3, #1
 80082c4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	f383 8810 	msr	PRIMASK, r3
}
 80082cc:	46c0      	nop			@ (mov r8, r8)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4952      	ldr	r1, [pc, #328]	@ (8008424 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80082da:	400a      	ands	r2, r1
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082e0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e4:	f383 8810 	msr	PRIMASK, r3
}
 80082e8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d12f      	bne.n	8008352 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f8:	f3ef 8310 	mrs	r3, PRIMASK
 80082fc:	623b      	str	r3, [r7, #32]
  return(result);
 80082fe:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008302:	2301      	movs	r3, #1
 8008304:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	f383 8810 	msr	PRIMASK, r3
}
 800830c:	46c0      	nop			@ (mov r8, r8)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2110      	movs	r1, #16
 800831a:	438a      	bics	r2, r1
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008320:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	f383 8810 	msr	PRIMASK, r3
}
 8008328:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	2210      	movs	r2, #16
 8008332:	4013      	ands	r3, r2
 8008334:	2b10      	cmp	r3, #16
 8008336:	d103      	bne.n	8008340 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2210      	movs	r2, #16
 800833e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	225c      	movs	r2, #92	@ 0x5c
 8008344:	5a9a      	ldrh	r2, [r3, r2]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	0011      	movs	r1, r2
 800834a:	0018      	movs	r0, r3
 800834c:	f7fe fea6 	bl	800709c <HAL_UARTEx_RxEventCallback>
 8008350:	e003      	b.n	800835a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	0018      	movs	r0, r3
 8008356:	f7f8 f973 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800835a:	236e      	movs	r3, #110	@ 0x6e
 800835c:	18fb      	adds	r3, r7, r3
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d004      	beq.n	800836e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008364:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008366:	2220      	movs	r2, #32
 8008368:	4013      	ands	r3, r2
 800836a:	d000      	beq.n	800836e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800836c:	e6e3      	b.n	8008136 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800836e:	205a      	movs	r0, #90	@ 0x5a
 8008370:	183b      	adds	r3, r7, r0
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	215e      	movs	r1, #94	@ 0x5e
 8008376:	5a52      	ldrh	r2, [r2, r1]
 8008378:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800837a:	0001      	movs	r1, r0
 800837c:	187b      	adds	r3, r7, r1
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d044      	beq.n	800840e <UART_RxISR_8BIT_FIFOEN+0x31e>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2268      	movs	r2, #104	@ 0x68
 8008388:	5a9b      	ldrh	r3, [r3, r2]
 800838a:	187a      	adds	r2, r7, r1
 800838c:	8812      	ldrh	r2, [r2, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d23d      	bcs.n	800840e <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008392:	f3ef 8310 	mrs	r3, PRIMASK
 8008396:	60bb      	str	r3, [r7, #8]
  return(result);
 8008398:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800839a:	657b      	str	r3, [r7, #84]	@ 0x54
 800839c:	2301      	movs	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f383 8810 	msr	PRIMASK, r3
}
 80083a6:	46c0      	nop			@ (mov r8, r8)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	491d      	ldr	r1, [pc, #116]	@ (8008428 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80083b4:	400a      	ands	r2, r1
 80083b6:	609a      	str	r2, [r3, #8]
 80083b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f383 8810 	msr	PRIMASK, r3
}
 80083c2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a19      	ldr	r2, [pc, #100]	@ (800842c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80083c8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ca:	f3ef 8310 	mrs	r3, PRIMASK
 80083ce:	617b      	str	r3, [r7, #20]
  return(result);
 80083d0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80083d4:	2301      	movs	r3, #1
 80083d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	f383 8810 	msr	PRIMASK, r3
}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2120      	movs	r1, #32
 80083ec:	430a      	orrs	r2, r1
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f383 8810 	msr	PRIMASK, r3
}
 80083fa:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083fc:	e007      	b.n	800840e <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2108      	movs	r1, #8
 800840a:	430a      	orrs	r2, r1
 800840c:	619a      	str	r2, [r3, #24]
}
 800840e:	46c0      	nop			@ (mov r8, r8)
 8008410:	46bd      	mov	sp, r7
 8008412:	b020      	add	sp, #128	@ 0x80
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	fffffeff 	.word	0xfffffeff
 800841c:	effffffe 	.word	0xeffffffe
 8008420:	40008000 	.word	0x40008000
 8008424:	fbffffff 	.word	0xfbffffff
 8008428:	efffffff 	.word	0xefffffff
 800842c:	08007d69 	.word	0x08007d69

08008430 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b0a2      	sub	sp, #136	@ 0x88
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008438:	2382      	movs	r3, #130	@ 0x82
 800843a:	18fb      	adds	r3, r7, r3
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	2160      	movs	r1, #96	@ 0x60
 8008440:	5a52      	ldrh	r2, [r2, r1]
 8008442:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	2284      	movs	r2, #132	@ 0x84
 800844c:	18ba      	adds	r2, r7, r2
 800844e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	228c      	movs	r2, #140	@ 0x8c
 8008464:	589b      	ldr	r3, [r3, r2]
 8008466:	2b22      	cmp	r3, #34	@ 0x22
 8008468:	d000      	beq.n	800846c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800846a:	e174      	b.n	8008756 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800846c:	2376      	movs	r3, #118	@ 0x76
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	2168      	movs	r1, #104	@ 0x68
 8008474:	5a52      	ldrh	r2, [r2, r1]
 8008476:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008478:	e119      	b.n	80086ae <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008480:	2174      	movs	r1, #116	@ 0x74
 8008482:	187b      	adds	r3, r7, r1
 8008484:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800848c:	187b      	adds	r3, r7, r1
 800848e:	2282      	movs	r2, #130	@ 0x82
 8008490:	18ba      	adds	r2, r7, r2
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	8812      	ldrh	r2, [r2, #0]
 8008496:	4013      	ands	r3, r2
 8008498:	b29a      	uxth	r2, r3
 800849a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800849c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084a2:	1c9a      	adds	r2, r3, #2
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	225e      	movs	r2, #94	@ 0x5e
 80084ac:	5a9b      	ldrh	r3, [r3, r2]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b299      	uxth	r1, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	225e      	movs	r2, #94	@ 0x5e
 80084b8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	2184      	movs	r1, #132	@ 0x84
 80084c2:	187a      	adds	r2, r7, r1
 80084c4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084c6:	187b      	adds	r3, r7, r1
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2207      	movs	r2, #7
 80084cc:	4013      	ands	r3, r2
 80084ce:	d04e      	beq.n	800856e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d0:	187b      	adds	r3, r7, r1
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	4013      	ands	r3, r2
 80084d8:	d010      	beq.n	80084fc <UART_RxISR_16BIT_FIFOEN+0xcc>
 80084da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80084dc:	2380      	movs	r3, #128	@ 0x80
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	4013      	ands	r3, r2
 80084e2:	d00b      	beq.n	80084fc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2201      	movs	r2, #1
 80084ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2290      	movs	r2, #144	@ 0x90
 80084f0:	589b      	ldr	r3, [r3, r2]
 80084f2:	2201      	movs	r2, #1
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2190      	movs	r1, #144	@ 0x90
 80084fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fc:	2384      	movs	r3, #132	@ 0x84
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2202      	movs	r2, #2
 8008504:	4013      	ands	r3, r2
 8008506:	d00f      	beq.n	8008528 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800850a:	2201      	movs	r2, #1
 800850c:	4013      	ands	r3, r2
 800850e:	d00b      	beq.n	8008528 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2202      	movs	r2, #2
 8008516:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2290      	movs	r2, #144	@ 0x90
 800851c:	589b      	ldr	r3, [r3, r2]
 800851e:	2204      	movs	r2, #4
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2190      	movs	r1, #144	@ 0x90
 8008526:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008528:	2384      	movs	r3, #132	@ 0x84
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2204      	movs	r2, #4
 8008530:	4013      	ands	r3, r2
 8008532:	d00f      	beq.n	8008554 <UART_RxISR_16BIT_FIFOEN+0x124>
 8008534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008536:	2201      	movs	r2, #1
 8008538:	4013      	ands	r3, r2
 800853a:	d00b      	beq.n	8008554 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2204      	movs	r2, #4
 8008542:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2290      	movs	r2, #144	@ 0x90
 8008548:	589b      	ldr	r3, [r3, r2]
 800854a:	2202      	movs	r2, #2
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2190      	movs	r1, #144	@ 0x90
 8008552:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2290      	movs	r2, #144	@ 0x90
 8008558:	589b      	ldr	r3, [r3, r2]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	0018      	movs	r0, r3
 8008562:	f7fe fd93 	bl	800708c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2290      	movs	r2, #144	@ 0x90
 800856a:	2100      	movs	r1, #0
 800856c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	225e      	movs	r2, #94	@ 0x5e
 8008572:	5a9b      	ldrh	r3, [r3, r2]
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d000      	beq.n	800857c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800857a:	e098      	b.n	80086ae <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800857c:	f3ef 8310 	mrs	r3, PRIMASK
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008584:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008586:	2301      	movs	r3, #1
 8008588:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800858c:	f383 8810 	msr	PRIMASK, r3
}
 8008590:	46c0      	nop			@ (mov r8, r8)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4974      	ldr	r1, [pc, #464]	@ (8008770 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800859e:	400a      	ands	r2, r1
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085a4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085a8:	f383 8810 	msr	PRIMASK, r3
}
 80085ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ae:	f3ef 8310 	mrs	r3, PRIMASK
 80085b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80085b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085b8:	2301      	movs	r3, #1
 80085ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085be:	f383 8810 	msr	PRIMASK, r3
}
 80085c2:	46c0      	nop			@ (mov r8, r8)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4969      	ldr	r1, [pc, #420]	@ (8008774 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80085d0:	400a      	ands	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085d6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085da:	f383 8810 	msr	PRIMASK, r3
}
 80085de:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	228c      	movs	r2, #140	@ 0x8c
 80085e4:	2120      	movs	r1, #32
 80085e6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a5f      	ldr	r2, [pc, #380]	@ (8008778 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d01f      	beq.n	800863e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	2380      	movs	r3, #128	@ 0x80
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	4013      	ands	r3, r2
 800860a:	d018      	beq.n	800863e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860c:	f3ef 8310 	mrs	r3, PRIMASK
 8008610:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008614:	667b      	str	r3, [r7, #100]	@ 0x64
 8008616:	2301      	movs	r3, #1
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800861a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861c:	f383 8810 	msr	PRIMASK, r3
}
 8008620:	46c0      	nop			@ (mov r8, r8)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4953      	ldr	r1, [pc, #332]	@ (800877c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800862e:	400a      	ands	r2, r1
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008634:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008638:	f383 8810 	msr	PRIMASK, r3
}
 800863c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d12f      	bne.n	80086a6 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864c:	f3ef 8310 	mrs	r3, PRIMASK
 8008650:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	663b      	str	r3, [r7, #96]	@ 0x60
 8008656:	2301      	movs	r3, #1
 8008658:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	f383 8810 	msr	PRIMASK, r3
}
 8008660:	46c0      	nop			@ (mov r8, r8)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2110      	movs	r1, #16
 800866e:	438a      	bics	r2, r1
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	f383 8810 	msr	PRIMASK, r3
}
 800867c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	2210      	movs	r2, #16
 8008686:	4013      	ands	r3, r2
 8008688:	2b10      	cmp	r3, #16
 800868a:	d103      	bne.n	8008694 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2210      	movs	r2, #16
 8008692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	225c      	movs	r2, #92	@ 0x5c
 8008698:	5a9a      	ldrh	r2, [r3, r2]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	0011      	movs	r1, r2
 800869e:	0018      	movs	r0, r3
 80086a0:	f7fe fcfc 	bl	800709c <HAL_UARTEx_RxEventCallback>
 80086a4:	e003      	b.n	80086ae <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7f7 ffc9 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ae:	2376      	movs	r3, #118	@ 0x76
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d006      	beq.n	80086c6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80086b8:	2384      	movs	r3, #132	@ 0x84
 80086ba:	18fb      	adds	r3, r7, r3
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2220      	movs	r2, #32
 80086c0:	4013      	ands	r3, r2
 80086c2:	d000      	beq.n	80086c6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80086c4:	e6d9      	b.n	800847a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086c6:	205e      	movs	r0, #94	@ 0x5e
 80086c8:	183b      	adds	r3, r7, r0
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	215e      	movs	r1, #94	@ 0x5e
 80086ce:	5a52      	ldrh	r2, [r2, r1]
 80086d0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086d2:	0001      	movs	r1, r0
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d044      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x336>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2268      	movs	r2, #104	@ 0x68
 80086e0:	5a9b      	ldrh	r3, [r3, r2]
 80086e2:	187a      	adds	r2, r7, r1
 80086e4:	8812      	ldrh	r2, [r2, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d23d      	bcs.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ea:	f3ef 8310 	mrs	r3, PRIMASK
 80086ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80086f0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086f4:	2301      	movs	r3, #1
 80086f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f383 8810 	msr	PRIMASK, r3
}
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	491d      	ldr	r1, [pc, #116]	@ (8008780 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800870c:	400a      	ands	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
 8008710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008712:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f383 8810 	msr	PRIMASK, r3
}
 800871a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a19      	ldr	r2, [pc, #100]	@ (8008784 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8008720:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008722:	f3ef 8310 	mrs	r3, PRIMASK
 8008726:	61bb      	str	r3, [r7, #24]
  return(result);
 8008728:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800872a:	657b      	str	r3, [r7, #84]	@ 0x54
 800872c:	2301      	movs	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f383 8810 	msr	PRIMASK, r3
}
 8008736:	46c0      	nop			@ (mov r8, r8)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2120      	movs	r1, #32
 8008744:	430a      	orrs	r2, r1
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800874a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	f383 8810 	msr	PRIMASK, r3
}
 8008752:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008754:	e007      	b.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2108      	movs	r1, #8
 8008762:	430a      	orrs	r2, r1
 8008764:	619a      	str	r2, [r3, #24]
}
 8008766:	46c0      	nop			@ (mov r8, r8)
 8008768:	46bd      	mov	sp, r7
 800876a:	b022      	add	sp, #136	@ 0x88
 800876c:	bd80      	pop	{r7, pc}
 800876e:	46c0      	nop			@ (mov r8, r8)
 8008770:	fffffeff 	.word	0xfffffeff
 8008774:	effffffe 	.word	0xeffffffe
 8008778:	40008000 	.word	0x40008000
 800877c:	fbffffff 	.word	0xfbffffff
 8008780:	efffffff 	.word	0xefffffff
 8008784:	08007f2d 	.word	0x08007f2d

08008788 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008790:	46c0      	nop			@ (mov r8, r8)
 8008792:	46bd      	mov	sp, r7
 8008794:	b002      	add	sp, #8
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087a0:	46c0      	nop			@ (mov r8, r8)
 80087a2:	46bd      	mov	sp, r7
 80087a4:	b002      	add	sp, #8
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087b0:	46c0      	nop			@ (mov r8, r8)
 80087b2:	46bd      	mov	sp, r7
 80087b4:	b002      	add	sp, #8
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2284      	movs	r2, #132	@ 0x84
 80087c4:	5c9b      	ldrb	r3, [r3, r2]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_UARTEx_DisableFifoMode+0x16>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e027      	b.n	800881e <HAL_UARTEx_DisableFifoMode+0x66>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2284      	movs	r2, #132	@ 0x84
 80087d2:	2101      	movs	r1, #1
 80087d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2288      	movs	r2, #136	@ 0x88
 80087da:	2124      	movs	r1, #36	@ 0x24
 80087dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2101      	movs	r1, #1
 80087f2:	438a      	bics	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a0b      	ldr	r2, [pc, #44]	@ (8008828 <HAL_UARTEx_DisableFifoMode+0x70>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2288      	movs	r2, #136	@ 0x88
 8008810:	2120      	movs	r1, #32
 8008812:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2284      	movs	r2, #132	@ 0x84
 8008818:	2100      	movs	r1, #0
 800881a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	0018      	movs	r0, r3
 8008820:	46bd      	mov	sp, r7
 8008822:	b004      	add	sp, #16
 8008824:	bd80      	pop	{r7, pc}
 8008826:	46c0      	nop			@ (mov r8, r8)
 8008828:	dfffffff 	.word	0xdfffffff

0800882c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2284      	movs	r2, #132	@ 0x84
 800883a:	5c9b      	ldrb	r3, [r3, r2]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008840:	2302      	movs	r3, #2
 8008842:	e02e      	b.n	80088a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2284      	movs	r2, #132	@ 0x84
 8008848:	2101      	movs	r1, #1
 800884a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2288      	movs	r2, #136	@ 0x88
 8008850:	2124      	movs	r1, #36	@ 0x24
 8008852:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2101      	movs	r1, #1
 8008868:	438a      	bics	r2, r1
 800886a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	08d9      	lsrs	r1, r3, #3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	0018      	movs	r0, r3
 8008884:	f000 f854 	bl	8008930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2288      	movs	r2, #136	@ 0x88
 8008894:	2120      	movs	r1, #32
 8008896:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2284      	movs	r2, #132	@ 0x84
 800889c:	2100      	movs	r1, #0
 800889e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	0018      	movs	r0, r3
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b004      	add	sp, #16
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2284      	movs	r2, #132	@ 0x84
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e02f      	b.n	8008924 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2284      	movs	r2, #132	@ 0x84
 80088c8:	2101      	movs	r1, #1
 80088ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2288      	movs	r2, #136	@ 0x88
 80088d0:	2124      	movs	r1, #36	@ 0x24
 80088d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2101      	movs	r1, #1
 80088e8:	438a      	bics	r2, r1
 80088ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	4a0e      	ldr	r2, [pc, #56]	@ (800892c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	0019      	movs	r1, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	0018      	movs	r0, r3
 8008906:	f000 f813 	bl	8008930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2288      	movs	r2, #136	@ 0x88
 8008916:	2120      	movs	r1, #32
 8008918:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2284      	movs	r2, #132	@ 0x84
 800891e:	2100      	movs	r1, #0
 8008920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	b004      	add	sp, #16
 800892a:	bd80      	pop	{r7, pc}
 800892c:	f1ffffff 	.word	0xf1ffffff

08008930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800893c:	2b00      	cmp	r3, #0
 800893e:	d108      	bne.n	8008952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	226a      	movs	r2, #106	@ 0x6a
 8008944:	2101      	movs	r1, #1
 8008946:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2268      	movs	r2, #104	@ 0x68
 800894c:	2101      	movs	r1, #1
 800894e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008950:	e043      	b.n	80089da <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008952:	260f      	movs	r6, #15
 8008954:	19bb      	adds	r3, r7, r6
 8008956:	2208      	movs	r2, #8
 8008958:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800895a:	200e      	movs	r0, #14
 800895c:	183b      	adds	r3, r7, r0
 800895e:	2208      	movs	r2, #8
 8008960:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	0e5b      	lsrs	r3, r3, #25
 800896a:	b2da      	uxtb	r2, r3
 800896c:	240d      	movs	r4, #13
 800896e:	193b      	adds	r3, r7, r4
 8008970:	2107      	movs	r1, #7
 8008972:	400a      	ands	r2, r1
 8008974:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	0f5b      	lsrs	r3, r3, #29
 800897e:	b2da      	uxtb	r2, r3
 8008980:	250c      	movs	r5, #12
 8008982:	197b      	adds	r3, r7, r5
 8008984:	2107      	movs	r1, #7
 8008986:	400a      	ands	r2, r1
 8008988:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800898a:	183b      	adds	r3, r7, r0
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	197a      	adds	r2, r7, r5
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	4914      	ldr	r1, [pc, #80]	@ (80089e4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008994:	5c8a      	ldrb	r2, [r1, r2]
 8008996:	435a      	muls	r2, r3
 8008998:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800899a:	197b      	adds	r3, r7, r5
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4a12      	ldr	r2, [pc, #72]	@ (80089e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80089a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a2:	0019      	movs	r1, r3
 80089a4:	f7f7 fc4a 	bl	800023c <__divsi3>
 80089a8:	0003      	movs	r3, r0
 80089aa:	b299      	uxth	r1, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	226a      	movs	r2, #106	@ 0x6a
 80089b0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b2:	19bb      	adds	r3, r7, r6
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	193a      	adds	r2, r7, r4
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	490a      	ldr	r1, [pc, #40]	@ (80089e4 <UARTEx_SetNbDataToProcess+0xb4>)
 80089bc:	5c8a      	ldrb	r2, [r1, r2]
 80089be:	435a      	muls	r2, r3
 80089c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	4a08      	ldr	r2, [pc, #32]	@ (80089e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80089c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089ca:	0019      	movs	r1, r3
 80089cc:	f7f7 fc36 	bl	800023c <__divsi3>
 80089d0:	0003      	movs	r3, r0
 80089d2:	b299      	uxth	r1, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2268      	movs	r2, #104	@ 0x68
 80089d8:	5299      	strh	r1, [r3, r2]
}
 80089da:	46c0      	nop			@ (mov r8, r8)
 80089dc:	46bd      	mov	sp, r7
 80089de:	b005      	add	sp, #20
 80089e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e2:	46c0      	nop			@ (mov r8, r8)
 80089e4:	08009674 	.word	0x08009674
 80089e8:	0800967c 	.word	0x0800967c

080089ec <atoi>:
 80089ec:	b510      	push	{r4, lr}
 80089ee:	220a      	movs	r2, #10
 80089f0:	2100      	movs	r1, #0
 80089f2:	f000 f88b 	bl	8008b0c <strtol>
 80089f6:	bd10      	pop	{r4, pc}

080089f8 <_strtol_l.isra.0>:
 80089f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fa:	b085      	sub	sp, #20
 80089fc:	0017      	movs	r7, r2
 80089fe:	001e      	movs	r6, r3
 8008a00:	9003      	str	r0, [sp, #12]
 8008a02:	9101      	str	r1, [sp, #4]
 8008a04:	2b24      	cmp	r3, #36	@ 0x24
 8008a06:	d823      	bhi.n	8008a50 <_strtol_l.isra.0+0x58>
 8008a08:	000c      	movs	r4, r1
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d020      	beq.n	8008a50 <_strtol_l.isra.0+0x58>
 8008a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b04 <_strtol_l.isra.0+0x10c>)
 8008a10:	2208      	movs	r2, #8
 8008a12:	469c      	mov	ip, r3
 8008a14:	0023      	movs	r3, r4
 8008a16:	4661      	mov	r1, ip
 8008a18:	781d      	ldrb	r5, [r3, #0]
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	5d48      	ldrb	r0, [r1, r5]
 8008a1e:	0001      	movs	r1, r0
 8008a20:	4011      	ands	r1, r2
 8008a22:	4210      	tst	r0, r2
 8008a24:	d1f6      	bne.n	8008a14 <_strtol_l.isra.0+0x1c>
 8008a26:	2d2d      	cmp	r5, #45	@ 0x2d
 8008a28:	d119      	bne.n	8008a5e <_strtol_l.isra.0+0x66>
 8008a2a:	7825      	ldrb	r5, [r4, #0]
 8008a2c:	1c9c      	adds	r4, r3, #2
 8008a2e:	2301      	movs	r3, #1
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	2210      	movs	r2, #16
 8008a34:	0033      	movs	r3, r6
 8008a36:	4393      	bics	r3, r2
 8008a38:	d11d      	bne.n	8008a76 <_strtol_l.isra.0+0x7e>
 8008a3a:	2d30      	cmp	r5, #48	@ 0x30
 8008a3c:	d115      	bne.n	8008a6a <_strtol_l.isra.0+0x72>
 8008a3e:	2120      	movs	r1, #32
 8008a40:	7823      	ldrb	r3, [r4, #0]
 8008a42:	438b      	bics	r3, r1
 8008a44:	2b58      	cmp	r3, #88	@ 0x58
 8008a46:	d110      	bne.n	8008a6a <_strtol_l.isra.0+0x72>
 8008a48:	7865      	ldrb	r5, [r4, #1]
 8008a4a:	3402      	adds	r4, #2
 8008a4c:	2610      	movs	r6, #16
 8008a4e:	e012      	b.n	8008a76 <_strtol_l.isra.0+0x7e>
 8008a50:	f000 f8a6 	bl	8008ba0 <__errno>
 8008a54:	2316      	movs	r3, #22
 8008a56:	6003      	str	r3, [r0, #0]
 8008a58:	2000      	movs	r0, #0
 8008a5a:	b005      	add	sp, #20
 8008a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a5e:	9100      	str	r1, [sp, #0]
 8008a60:	2d2b      	cmp	r5, #43	@ 0x2b
 8008a62:	d1e6      	bne.n	8008a32 <_strtol_l.isra.0+0x3a>
 8008a64:	7825      	ldrb	r5, [r4, #0]
 8008a66:	1c9c      	adds	r4, r3, #2
 8008a68:	e7e3      	b.n	8008a32 <_strtol_l.isra.0+0x3a>
 8008a6a:	2e00      	cmp	r6, #0
 8008a6c:	d1ee      	bne.n	8008a4c <_strtol_l.isra.0+0x54>
 8008a6e:	360a      	adds	r6, #10
 8008a70:	2d30      	cmp	r5, #48	@ 0x30
 8008a72:	d100      	bne.n	8008a76 <_strtol_l.isra.0+0x7e>
 8008a74:	3e02      	subs	r6, #2
 8008a76:	4a24      	ldr	r2, [pc, #144]	@ (8008b08 <_strtol_l.isra.0+0x110>)
 8008a78:	9b00      	ldr	r3, [sp, #0]
 8008a7a:	4694      	mov	ip, r2
 8008a7c:	4463      	add	r3, ip
 8008a7e:	0031      	movs	r1, r6
 8008a80:	0018      	movs	r0, r3
 8008a82:	9302      	str	r3, [sp, #8]
 8008a84:	f7f7 fbd6 	bl	8000234 <__aeabi_uidivmod>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4684      	mov	ip, r0
 8008a8c:	0010      	movs	r0, r2
 8008a8e:	002b      	movs	r3, r5
 8008a90:	3b30      	subs	r3, #48	@ 0x30
 8008a92:	2b09      	cmp	r3, #9
 8008a94:	d811      	bhi.n	8008aba <_strtol_l.isra.0+0xc2>
 8008a96:	001d      	movs	r5, r3
 8008a98:	42ae      	cmp	r6, r5
 8008a9a:	dd1d      	ble.n	8008ad8 <_strtol_l.isra.0+0xe0>
 8008a9c:	1c53      	adds	r3, r2, #1
 8008a9e:	d009      	beq.n	8008ab4 <_strtol_l.isra.0+0xbc>
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	4252      	negs	r2, r2
 8008aa4:	4584      	cmp	ip, r0
 8008aa6:	d305      	bcc.n	8008ab4 <_strtol_l.isra.0+0xbc>
 8008aa8:	d101      	bne.n	8008aae <_strtol_l.isra.0+0xb6>
 8008aaa:	42a9      	cmp	r1, r5
 8008aac:	db11      	blt.n	8008ad2 <_strtol_l.isra.0+0xda>
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4370      	muls	r0, r6
 8008ab2:	1828      	adds	r0, r5, r0
 8008ab4:	7825      	ldrb	r5, [r4, #0]
 8008ab6:	3401      	adds	r4, #1
 8008ab8:	e7e9      	b.n	8008a8e <_strtol_l.isra.0+0x96>
 8008aba:	002b      	movs	r3, r5
 8008abc:	3b41      	subs	r3, #65	@ 0x41
 8008abe:	2b19      	cmp	r3, #25
 8008ac0:	d801      	bhi.n	8008ac6 <_strtol_l.isra.0+0xce>
 8008ac2:	3d37      	subs	r5, #55	@ 0x37
 8008ac4:	e7e8      	b.n	8008a98 <_strtol_l.isra.0+0xa0>
 8008ac6:	002b      	movs	r3, r5
 8008ac8:	3b61      	subs	r3, #97	@ 0x61
 8008aca:	2b19      	cmp	r3, #25
 8008acc:	d804      	bhi.n	8008ad8 <_strtol_l.isra.0+0xe0>
 8008ace:	3d57      	subs	r5, #87	@ 0x57
 8008ad0:	e7e2      	b.n	8008a98 <_strtol_l.isra.0+0xa0>
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4252      	negs	r2, r2
 8008ad6:	e7ed      	b.n	8008ab4 <_strtol_l.isra.0+0xbc>
 8008ad8:	1c53      	adds	r3, r2, #1
 8008ada:	d108      	bne.n	8008aee <_strtol_l.isra.0+0xf6>
 8008adc:	2322      	movs	r3, #34	@ 0x22
 8008ade:	9a03      	ldr	r2, [sp, #12]
 8008ae0:	9802      	ldr	r0, [sp, #8]
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	2f00      	cmp	r7, #0
 8008ae6:	d0b8      	beq.n	8008a5a <_strtol_l.isra.0+0x62>
 8008ae8:	1e63      	subs	r3, r4, #1
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	e007      	b.n	8008afe <_strtol_l.isra.0+0x106>
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d000      	beq.n	8008af6 <_strtol_l.isra.0+0xfe>
 8008af4:	4240      	negs	r0, r0
 8008af6:	2f00      	cmp	r7, #0
 8008af8:	d0af      	beq.n	8008a5a <_strtol_l.isra.0+0x62>
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d1f4      	bne.n	8008ae8 <_strtol_l.isra.0+0xf0>
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	603b      	str	r3, [r7, #0]
 8008b02:	e7aa      	b.n	8008a5a <_strtol_l.isra.0+0x62>
 8008b04:	08009685 	.word	0x08009685
 8008b08:	7fffffff 	.word	0x7fffffff

08008b0c <strtol>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	4c04      	ldr	r4, [pc, #16]	@ (8008b20 <strtol+0x14>)
 8008b10:	0013      	movs	r3, r2
 8008b12:	000a      	movs	r2, r1
 8008b14:	0001      	movs	r1, r0
 8008b16:	6820      	ldr	r0, [r4, #0]
 8008b18:	f7ff ff6e 	bl	80089f8 <_strtol_l.isra.0>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	46c0      	nop			@ (mov r8, r8)
 8008b20:	20000054 	.word	0x20000054

08008b24 <sniprintf>:
 8008b24:	b40c      	push	{r2, r3}
 8008b26:	b530      	push	{r4, r5, lr}
 8008b28:	4b18      	ldr	r3, [pc, #96]	@ (8008b8c <sniprintf+0x68>)
 8008b2a:	000c      	movs	r4, r1
 8008b2c:	681d      	ldr	r5, [r3, #0]
 8008b2e:	b09d      	sub	sp, #116	@ 0x74
 8008b30:	2900      	cmp	r1, #0
 8008b32:	da08      	bge.n	8008b46 <sniprintf+0x22>
 8008b34:	238b      	movs	r3, #139	@ 0x8b
 8008b36:	2001      	movs	r0, #1
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	4240      	negs	r0, r0
 8008b3c:	b01d      	add	sp, #116	@ 0x74
 8008b3e:	bc30      	pop	{r4, r5}
 8008b40:	bc08      	pop	{r3}
 8008b42:	b002      	add	sp, #8
 8008b44:	4718      	bx	r3
 8008b46:	2382      	movs	r3, #130	@ 0x82
 8008b48:	466a      	mov	r2, sp
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	8293      	strh	r3, [r2, #20]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9002      	str	r0, [sp, #8]
 8008b52:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008b54:	9006      	str	r0, [sp, #24]
 8008b56:	4299      	cmp	r1, r3
 8008b58:	d000      	beq.n	8008b5c <sniprintf+0x38>
 8008b5a:	1e4b      	subs	r3, r1, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	2301      	movs	r3, #1
 8008b62:	466a      	mov	r2, sp
 8008b64:	425b      	negs	r3, r3
 8008b66:	82d3      	strh	r3, [r2, #22]
 8008b68:	0028      	movs	r0, r5
 8008b6a:	ab21      	add	r3, sp, #132	@ 0x84
 8008b6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b6e:	a902      	add	r1, sp, #8
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	f000 f9a5 	bl	8008ec0 <_svfiprintf_r>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	da01      	bge.n	8008b7e <sniprintf+0x5a>
 8008b7a:	238b      	movs	r3, #139	@ 0x8b
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	2c00      	cmp	r4, #0
 8008b80:	d0dc      	beq.n	8008b3c <sniprintf+0x18>
 8008b82:	2200      	movs	r2, #0
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	e7d8      	b.n	8008b3c <sniprintf+0x18>
 8008b8a:	46c0      	nop			@ (mov r8, r8)
 8008b8c:	20000054 	.word	0x20000054

08008b90 <memset>:
 8008b90:	0003      	movs	r3, r0
 8008b92:	1882      	adds	r2, r0, r2
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	7019      	strb	r1, [r3, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	@ (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	46c0      	nop			@ (mov r8, r8)
 8008ba8:	20000054 	.word	0x20000054

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	2600      	movs	r6, #0
 8008bb0:	4c0c      	ldr	r4, [pc, #48]	@ (8008be4 <__libc_init_array+0x38>)
 8008bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8008be8 <__libc_init_array+0x3c>)
 8008bb4:	1b64      	subs	r4, r4, r5
 8008bb6:	10a4      	asrs	r4, r4, #2
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	f000 fc69 	bl	8009494 <_init>
 8008bc2:	4c0a      	ldr	r4, [pc, #40]	@ (8008bec <__libc_init_array+0x40>)
 8008bc4:	4d0a      	ldr	r5, [pc, #40]	@ (8008bf0 <__libc_init_array+0x44>)
 8008bc6:	1b64      	subs	r4, r4, r5
 8008bc8:	10a4      	asrs	r4, r4, #2
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	00b3      	lsls	r3, r6, #2
 8008bd2:	58eb      	ldr	r3, [r5, r3]
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	00b3      	lsls	r3, r6, #2
 8008bdc:	58eb      	ldr	r3, [r5, r3]
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	080097c0 	.word	0x080097c0
 8008be8:	080097c0 	.word	0x080097c0
 8008bec:	080097c4 	.word	0x080097c4
 8008bf0:	080097c0 	.word	0x080097c0

08008bf4 <__retarget_lock_acquire_recursive>:
 8008bf4:	4770      	bx	lr

08008bf6 <__retarget_lock_release_recursive>:
 8008bf6:	4770      	bx	lr

08008bf8 <strcpy>:
 8008bf8:	0003      	movs	r3, r0
 8008bfa:	780a      	ldrb	r2, [r1, #0]
 8008bfc:	3101      	adds	r1, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	d1f9      	bne.n	8008bfa <strcpy+0x2>
 8008c06:	4770      	bx	lr

08008c08 <_free_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	0005      	movs	r5, r0
 8008c0c:	1e0c      	subs	r4, r1, #0
 8008c0e:	d010      	beq.n	8008c32 <_free_r+0x2a>
 8008c10:	3c04      	subs	r4, #4
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	da00      	bge.n	8008c1a <_free_r+0x12>
 8008c18:	18e4      	adds	r4, r4, r3
 8008c1a:	0028      	movs	r0, r5
 8008c1c:	f000 f8e0 	bl	8008de0 <__malloc_lock>
 8008c20:	4a1d      	ldr	r2, [pc, #116]	@ (8008c98 <_free_r+0x90>)
 8008c22:	6813      	ldr	r3, [r2, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <_free_r+0x2c>
 8008c28:	6063      	str	r3, [r4, #4]
 8008c2a:	6014      	str	r4, [r2, #0]
 8008c2c:	0028      	movs	r0, r5
 8008c2e:	f000 f8df 	bl	8008df0 <__malloc_unlock>
 8008c32:	bd70      	pop	{r4, r5, r6, pc}
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d908      	bls.n	8008c4a <_free_r+0x42>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	1821      	adds	r1, r4, r0
 8008c3c:	428b      	cmp	r3, r1
 8008c3e:	d1f3      	bne.n	8008c28 <_free_r+0x20>
 8008c40:	6819      	ldr	r1, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	1809      	adds	r1, r1, r0
 8008c46:	6021      	str	r1, [r4, #0]
 8008c48:	e7ee      	b.n	8008c28 <_free_r+0x20>
 8008c4a:	001a      	movs	r2, r3
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <_free_r+0x4e>
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	d9f9      	bls.n	8008c4a <_free_r+0x42>
 8008c56:	6811      	ldr	r1, [r2, #0]
 8008c58:	1850      	adds	r0, r2, r1
 8008c5a:	42a0      	cmp	r0, r4
 8008c5c:	d10b      	bne.n	8008c76 <_free_r+0x6e>
 8008c5e:	6820      	ldr	r0, [r4, #0]
 8008c60:	1809      	adds	r1, r1, r0
 8008c62:	1850      	adds	r0, r2, r1
 8008c64:	6011      	str	r1, [r2, #0]
 8008c66:	4283      	cmp	r3, r0
 8008c68:	d1e0      	bne.n	8008c2c <_free_r+0x24>
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	1841      	adds	r1, r0, r1
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	6053      	str	r3, [r2, #4]
 8008c74:	e7da      	b.n	8008c2c <_free_r+0x24>
 8008c76:	42a0      	cmp	r0, r4
 8008c78:	d902      	bls.n	8008c80 <_free_r+0x78>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	e7d5      	b.n	8008c2c <_free_r+0x24>
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	1821      	adds	r1, r4, r0
 8008c84:	428b      	cmp	r3, r1
 8008c86:	d103      	bne.n	8008c90 <_free_r+0x88>
 8008c88:	6819      	ldr	r1, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	1809      	adds	r1, r1, r0
 8008c8e:	6021      	str	r1, [r4, #0]
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	6054      	str	r4, [r2, #4]
 8008c94:	e7ca      	b.n	8008c2c <_free_r+0x24>
 8008c96:	46c0      	nop			@ (mov r8, r8)
 8008c98:	200005ac 	.word	0x200005ac

08008c9c <sbrk_aligned>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8008cdc <sbrk_aligned+0x40>)
 8008ca0:	000d      	movs	r5, r1
 8008ca2:	6831      	ldr	r1, [r6, #0]
 8008ca4:	0004      	movs	r4, r0
 8008ca6:	2900      	cmp	r1, #0
 8008ca8:	d102      	bne.n	8008cb0 <sbrk_aligned+0x14>
 8008caa:	f000 fb95 	bl	80093d8 <_sbrk_r>
 8008cae:	6030      	str	r0, [r6, #0]
 8008cb0:	0029      	movs	r1, r5
 8008cb2:	0020      	movs	r0, r4
 8008cb4:	f000 fb90 	bl	80093d8 <_sbrk_r>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d103      	bne.n	8008cc4 <sbrk_aligned+0x28>
 8008cbc:	2501      	movs	r5, #1
 8008cbe:	426d      	negs	r5, r5
 8008cc0:	0028      	movs	r0, r5
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	1cc5      	adds	r5, r0, #3
 8008cc8:	439d      	bics	r5, r3
 8008cca:	42a8      	cmp	r0, r5
 8008ccc:	d0f8      	beq.n	8008cc0 <sbrk_aligned+0x24>
 8008cce:	1a29      	subs	r1, r5, r0
 8008cd0:	0020      	movs	r0, r4
 8008cd2:	f000 fb81 	bl	80093d8 <_sbrk_r>
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d1f2      	bne.n	8008cc0 <sbrk_aligned+0x24>
 8008cda:	e7ef      	b.n	8008cbc <sbrk_aligned+0x20>
 8008cdc:	200005a8 	.word	0x200005a8

08008ce0 <_malloc_r>:
 8008ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ce2:	2203      	movs	r2, #3
 8008ce4:	1ccb      	adds	r3, r1, #3
 8008ce6:	4393      	bics	r3, r2
 8008ce8:	3308      	adds	r3, #8
 8008cea:	0005      	movs	r5, r0
 8008cec:	001f      	movs	r7, r3
 8008cee:	2b0c      	cmp	r3, #12
 8008cf0:	d234      	bcs.n	8008d5c <_malloc_r+0x7c>
 8008cf2:	270c      	movs	r7, #12
 8008cf4:	42b9      	cmp	r1, r7
 8008cf6:	d833      	bhi.n	8008d60 <_malloc_r+0x80>
 8008cf8:	0028      	movs	r0, r5
 8008cfa:	f000 f871 	bl	8008de0 <__malloc_lock>
 8008cfe:	4e37      	ldr	r6, [pc, #220]	@ (8008ddc <_malloc_r+0xfc>)
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	001c      	movs	r4, r3
 8008d04:	2c00      	cmp	r4, #0
 8008d06:	d12f      	bne.n	8008d68 <_malloc_r+0x88>
 8008d08:	0039      	movs	r1, r7
 8008d0a:	0028      	movs	r0, r5
 8008d0c:	f7ff ffc6 	bl	8008c9c <sbrk_aligned>
 8008d10:	0004      	movs	r4, r0
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	d15f      	bne.n	8008dd6 <_malloc_r+0xf6>
 8008d16:	6834      	ldr	r4, [r6, #0]
 8008d18:	9400      	str	r4, [sp, #0]
 8008d1a:	9b00      	ldr	r3, [sp, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d14a      	bne.n	8008db6 <_malloc_r+0xd6>
 8008d20:	2c00      	cmp	r4, #0
 8008d22:	d052      	beq.n	8008dca <_malloc_r+0xea>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	0028      	movs	r0, r5
 8008d28:	18e3      	adds	r3, r4, r3
 8008d2a:	9900      	ldr	r1, [sp, #0]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f000 fb53 	bl	80093d8 <_sbrk_r>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	4283      	cmp	r3, r0
 8008d36:	d148      	bne.n	8008dca <_malloc_r+0xea>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	0028      	movs	r0, r5
 8008d3c:	1aff      	subs	r7, r7, r3
 8008d3e:	0039      	movs	r1, r7
 8008d40:	f7ff ffac 	bl	8008c9c <sbrk_aligned>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d040      	beq.n	8008dca <_malloc_r+0xea>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	19db      	adds	r3, r3, r7
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	6833      	ldr	r3, [r6, #0]
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d133      	bne.n	8008dbe <_malloc_r+0xde>
 8008d56:	9b00      	ldr	r3, [sp, #0]
 8008d58:	6033      	str	r3, [r6, #0]
 8008d5a:	e019      	b.n	8008d90 <_malloc_r+0xb0>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dac9      	bge.n	8008cf4 <_malloc_r+0x14>
 8008d60:	230c      	movs	r3, #12
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	2000      	movs	r0, #0
 8008d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d68:	6821      	ldr	r1, [r4, #0]
 8008d6a:	1bc9      	subs	r1, r1, r7
 8008d6c:	d420      	bmi.n	8008db0 <_malloc_r+0xd0>
 8008d6e:	290b      	cmp	r1, #11
 8008d70:	d90a      	bls.n	8008d88 <_malloc_r+0xa8>
 8008d72:	19e2      	adds	r2, r4, r7
 8008d74:	6027      	str	r7, [r4, #0]
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	d104      	bne.n	8008d84 <_malloc_r+0xa4>
 8008d7a:	6032      	str	r2, [r6, #0]
 8008d7c:	6863      	ldr	r3, [r4, #4]
 8008d7e:	6011      	str	r1, [r2, #0]
 8008d80:	6053      	str	r3, [r2, #4]
 8008d82:	e005      	b.n	8008d90 <_malloc_r+0xb0>
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	e7f9      	b.n	8008d7c <_malloc_r+0x9c>
 8008d88:	6862      	ldr	r2, [r4, #4]
 8008d8a:	42a3      	cmp	r3, r4
 8008d8c:	d10e      	bne.n	8008dac <_malloc_r+0xcc>
 8008d8e:	6032      	str	r2, [r6, #0]
 8008d90:	0028      	movs	r0, r5
 8008d92:	f000 f82d 	bl	8008df0 <__malloc_unlock>
 8008d96:	0020      	movs	r0, r4
 8008d98:	2207      	movs	r2, #7
 8008d9a:	300b      	adds	r0, #11
 8008d9c:	1d23      	adds	r3, r4, #4
 8008d9e:	4390      	bics	r0, r2
 8008da0:	1ac2      	subs	r2, r0, r3
 8008da2:	4298      	cmp	r0, r3
 8008da4:	d0df      	beq.n	8008d66 <_malloc_r+0x86>
 8008da6:	1a1b      	subs	r3, r3, r0
 8008da8:	50a3      	str	r3, [r4, r2]
 8008daa:	e7dc      	b.n	8008d66 <_malloc_r+0x86>
 8008dac:	605a      	str	r2, [r3, #4]
 8008dae:	e7ef      	b.n	8008d90 <_malloc_r+0xb0>
 8008db0:	0023      	movs	r3, r4
 8008db2:	6864      	ldr	r4, [r4, #4]
 8008db4:	e7a6      	b.n	8008d04 <_malloc_r+0x24>
 8008db6:	9c00      	ldr	r4, [sp, #0]
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	e7ad      	b.n	8008d1a <_malloc_r+0x3a>
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	d1fb      	bne.n	8008dbe <_malloc_r+0xde>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e7da      	b.n	8008d80 <_malloc_r+0xa0>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	0028      	movs	r0, r5
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f000 f80e 	bl	8008df0 <__malloc_unlock>
 8008dd4:	e7c6      	b.n	8008d64 <_malloc_r+0x84>
 8008dd6:	6007      	str	r7, [r0, #0]
 8008dd8:	e7da      	b.n	8008d90 <_malloc_r+0xb0>
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	200005ac 	.word	0x200005ac

08008de0 <__malloc_lock>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	4802      	ldr	r0, [pc, #8]	@ (8008dec <__malloc_lock+0xc>)
 8008de4:	f7ff ff06 	bl	8008bf4 <__retarget_lock_acquire_recursive>
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	46c0      	nop			@ (mov r8, r8)
 8008dec:	200005a4 	.word	0x200005a4

08008df0 <__malloc_unlock>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	4802      	ldr	r0, [pc, #8]	@ (8008dfc <__malloc_unlock+0xc>)
 8008df4:	f7ff feff 	bl	8008bf6 <__retarget_lock_release_recursive>
 8008df8:	bd10      	pop	{r4, pc}
 8008dfa:	46c0      	nop			@ (mov r8, r8)
 8008dfc:	200005a4 	.word	0x200005a4

08008e00 <__ssputs_r>:
 8008e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e02:	688e      	ldr	r6, [r1, #8]
 8008e04:	b085      	sub	sp, #20
 8008e06:	001f      	movs	r7, r3
 8008e08:	000c      	movs	r4, r1
 8008e0a:	680b      	ldr	r3, [r1, #0]
 8008e0c:	9002      	str	r0, [sp, #8]
 8008e0e:	9203      	str	r2, [sp, #12]
 8008e10:	42be      	cmp	r6, r7
 8008e12:	d830      	bhi.n	8008e76 <__ssputs_r+0x76>
 8008e14:	210c      	movs	r1, #12
 8008e16:	5e62      	ldrsh	r2, [r4, r1]
 8008e18:	2190      	movs	r1, #144	@ 0x90
 8008e1a:	00c9      	lsls	r1, r1, #3
 8008e1c:	420a      	tst	r2, r1
 8008e1e:	d028      	beq.n	8008e72 <__ssputs_r+0x72>
 8008e20:	2003      	movs	r0, #3
 8008e22:	6921      	ldr	r1, [r4, #16]
 8008e24:	1a5b      	subs	r3, r3, r1
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	6963      	ldr	r3, [r4, #20]
 8008e2a:	4343      	muls	r3, r0
 8008e2c:	9801      	ldr	r0, [sp, #4]
 8008e2e:	0fdd      	lsrs	r5, r3, #31
 8008e30:	18ed      	adds	r5, r5, r3
 8008e32:	1c7b      	adds	r3, r7, #1
 8008e34:	181b      	adds	r3, r3, r0
 8008e36:	106d      	asrs	r5, r5, #1
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	d900      	bls.n	8008e3e <__ssputs_r+0x3e>
 8008e3c:	001d      	movs	r5, r3
 8008e3e:	0552      	lsls	r2, r2, #21
 8008e40:	d528      	bpl.n	8008e94 <__ssputs_r+0x94>
 8008e42:	0029      	movs	r1, r5
 8008e44:	9802      	ldr	r0, [sp, #8]
 8008e46:	f7ff ff4b 	bl	8008ce0 <_malloc_r>
 8008e4a:	1e06      	subs	r6, r0, #0
 8008e4c:	d02c      	beq.n	8008ea8 <__ssputs_r+0xa8>
 8008e4e:	9a01      	ldr	r2, [sp, #4]
 8008e50:	6921      	ldr	r1, [r4, #16]
 8008e52:	f000 fade 	bl	8009412 <memcpy>
 8008e56:	89a2      	ldrh	r2, [r4, #12]
 8008e58:	4b18      	ldr	r3, [pc, #96]	@ (8008ebc <__ssputs_r+0xbc>)
 8008e5a:	401a      	ands	r2, r3
 8008e5c:	2380      	movs	r3, #128	@ 0x80
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	6126      	str	r6, [r4, #16]
 8008e66:	18f6      	adds	r6, r6, r3
 8008e68:	6026      	str	r6, [r4, #0]
 8008e6a:	003e      	movs	r6, r7
 8008e6c:	6165      	str	r5, [r4, #20]
 8008e6e:	1aed      	subs	r5, r5, r3
 8008e70:	60a5      	str	r5, [r4, #8]
 8008e72:	42be      	cmp	r6, r7
 8008e74:	d900      	bls.n	8008e78 <__ssputs_r+0x78>
 8008e76:	003e      	movs	r6, r7
 8008e78:	0032      	movs	r2, r6
 8008e7a:	9903      	ldr	r1, [sp, #12]
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	f000 fa99 	bl	80093b4 <memmove>
 8008e82:	2000      	movs	r0, #0
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	1b9b      	subs	r3, r3, r6
 8008e88:	60a3      	str	r3, [r4, #8]
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	199b      	adds	r3, r3, r6
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	b005      	add	sp, #20
 8008e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e94:	002a      	movs	r2, r5
 8008e96:	9802      	ldr	r0, [sp, #8]
 8008e98:	f000 fac4 	bl	8009424 <_realloc_r>
 8008e9c:	1e06      	subs	r6, r0, #0
 8008e9e:	d1e0      	bne.n	8008e62 <__ssputs_r+0x62>
 8008ea0:	6921      	ldr	r1, [r4, #16]
 8008ea2:	9802      	ldr	r0, [sp, #8]
 8008ea4:	f7ff feb0 	bl	8008c08 <_free_r>
 8008ea8:	230c      	movs	r3, #12
 8008eaa:	2001      	movs	r0, #1
 8008eac:	9a02      	ldr	r2, [sp, #8]
 8008eae:	4240      	negs	r0, r0
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	89a2      	ldrh	r2, [r4, #12]
 8008eb4:	3334      	adds	r3, #52	@ 0x34
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	e7e9      	b.n	8008e90 <__ssputs_r+0x90>
 8008ebc:	fffffb7f 	.word	0xfffffb7f

08008ec0 <_svfiprintf_r>:
 8008ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec2:	b0a1      	sub	sp, #132	@ 0x84
 8008ec4:	9003      	str	r0, [sp, #12]
 8008ec6:	001d      	movs	r5, r3
 8008ec8:	898b      	ldrh	r3, [r1, #12]
 8008eca:	000f      	movs	r7, r1
 8008ecc:	0016      	movs	r6, r2
 8008ece:	061b      	lsls	r3, r3, #24
 8008ed0:	d511      	bpl.n	8008ef6 <_svfiprintf_r+0x36>
 8008ed2:	690b      	ldr	r3, [r1, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10e      	bne.n	8008ef6 <_svfiprintf_r+0x36>
 8008ed8:	2140      	movs	r1, #64	@ 0x40
 8008eda:	f7ff ff01 	bl	8008ce0 <_malloc_r>
 8008ede:	6038      	str	r0, [r7, #0]
 8008ee0:	6138      	str	r0, [r7, #16]
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d105      	bne.n	8008ef2 <_svfiprintf_r+0x32>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	9a03      	ldr	r2, [sp, #12]
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	2001      	movs	r0, #1
 8008eee:	4240      	negs	r0, r0
 8008ef0:	e0cf      	b.n	8009092 <_svfiprintf_r+0x1d2>
 8008ef2:	2340      	movs	r3, #64	@ 0x40
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	ac08      	add	r4, sp, #32
 8008efa:	6163      	str	r3, [r4, #20]
 8008efc:	3320      	adds	r3, #32
 8008efe:	7663      	strb	r3, [r4, #25]
 8008f00:	3310      	adds	r3, #16
 8008f02:	76a3      	strb	r3, [r4, #26]
 8008f04:	9507      	str	r5, [sp, #28]
 8008f06:	0035      	movs	r5, r6
 8008f08:	782b      	ldrb	r3, [r5, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <_svfiprintf_r+0x52>
 8008f0e:	2b25      	cmp	r3, #37	@ 0x25
 8008f10:	d148      	bne.n	8008fa4 <_svfiprintf_r+0xe4>
 8008f12:	1bab      	subs	r3, r5, r6
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	42b5      	cmp	r5, r6
 8008f18:	d00b      	beq.n	8008f32 <_svfiprintf_r+0x72>
 8008f1a:	0032      	movs	r2, r6
 8008f1c:	0039      	movs	r1, r7
 8008f1e:	9803      	ldr	r0, [sp, #12]
 8008f20:	f7ff ff6e 	bl	8008e00 <__ssputs_r>
 8008f24:	3001      	adds	r0, #1
 8008f26:	d100      	bne.n	8008f2a <_svfiprintf_r+0x6a>
 8008f28:	e0ae      	b.n	8009088 <_svfiprintf_r+0x1c8>
 8008f2a:	6963      	ldr	r3, [r4, #20]
 8008f2c:	9a05      	ldr	r2, [sp, #20]
 8008f2e:	189b      	adds	r3, r3, r2
 8008f30:	6163      	str	r3, [r4, #20]
 8008f32:	782b      	ldrb	r3, [r5, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d100      	bne.n	8008f3a <_svfiprintf_r+0x7a>
 8008f38:	e0a6      	b.n	8009088 <_svfiprintf_r+0x1c8>
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4252      	negs	r2, r2
 8008f40:	6062      	str	r2, [r4, #4]
 8008f42:	a904      	add	r1, sp, #16
 8008f44:	3254      	adds	r2, #84	@ 0x54
 8008f46:	1852      	adds	r2, r2, r1
 8008f48:	1c6e      	adds	r6, r5, #1
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	60e3      	str	r3, [r4, #12]
 8008f4e:	60a3      	str	r3, [r4, #8]
 8008f50:	7013      	strb	r3, [r2, #0]
 8008f52:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008f54:	4b54      	ldr	r3, [pc, #336]	@ (80090a8 <_svfiprintf_r+0x1e8>)
 8008f56:	2205      	movs	r2, #5
 8008f58:	0018      	movs	r0, r3
 8008f5a:	7831      	ldrb	r1, [r6, #0]
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	f000 fa4d 	bl	80093fc <memchr>
 8008f62:	1c75      	adds	r5, r6, #1
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d11f      	bne.n	8008fa8 <_svfiprintf_r+0xe8>
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	06d3      	lsls	r3, r2, #27
 8008f6c:	d504      	bpl.n	8008f78 <_svfiprintf_r+0xb8>
 8008f6e:	2353      	movs	r3, #83	@ 0x53
 8008f70:	a904      	add	r1, sp, #16
 8008f72:	185b      	adds	r3, r3, r1
 8008f74:	2120      	movs	r1, #32
 8008f76:	7019      	strb	r1, [r3, #0]
 8008f78:	0713      	lsls	r3, r2, #28
 8008f7a:	d504      	bpl.n	8008f86 <_svfiprintf_r+0xc6>
 8008f7c:	2353      	movs	r3, #83	@ 0x53
 8008f7e:	a904      	add	r1, sp, #16
 8008f80:	185b      	adds	r3, r3, r1
 8008f82:	212b      	movs	r1, #43	@ 0x2b
 8008f84:	7019      	strb	r1, [r3, #0]
 8008f86:	7833      	ldrb	r3, [r6, #0]
 8008f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f8a:	d016      	beq.n	8008fba <_svfiprintf_r+0xfa>
 8008f8c:	0035      	movs	r5, r6
 8008f8e:	2100      	movs	r1, #0
 8008f90:	200a      	movs	r0, #10
 8008f92:	68e3      	ldr	r3, [r4, #12]
 8008f94:	782a      	ldrb	r2, [r5, #0]
 8008f96:	1c6e      	adds	r6, r5, #1
 8008f98:	3a30      	subs	r2, #48	@ 0x30
 8008f9a:	2a09      	cmp	r2, #9
 8008f9c:	d950      	bls.n	8009040 <_svfiprintf_r+0x180>
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d111      	bne.n	8008fc6 <_svfiprintf_r+0x106>
 8008fa2:	e017      	b.n	8008fd4 <_svfiprintf_r+0x114>
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	e7af      	b.n	8008f08 <_svfiprintf_r+0x48>
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	6822      	ldr	r2, [r4, #0]
 8008fac:	1ac0      	subs	r0, r0, r3
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4083      	lsls	r3, r0
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	002e      	movs	r6, r5
 8008fb6:	6023      	str	r3, [r4, #0]
 8008fb8:	e7cc      	b.n	8008f54 <_svfiprintf_r+0x94>
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	1d19      	adds	r1, r3, #4
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	9107      	str	r1, [sp, #28]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	db01      	blt.n	8008fca <_svfiprintf_r+0x10a>
 8008fc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fc8:	e004      	b.n	8008fd4 <_svfiprintf_r+0x114>
 8008fca:	425b      	negs	r3, r3
 8008fcc:	60e3      	str	r3, [r4, #12]
 8008fce:	2302      	movs	r3, #2
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	782b      	ldrb	r3, [r5, #0]
 8008fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fd8:	d10c      	bne.n	8008ff4 <_svfiprintf_r+0x134>
 8008fda:	786b      	ldrb	r3, [r5, #1]
 8008fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fde:	d134      	bne.n	800904a <_svfiprintf_r+0x18a>
 8008fe0:	9b07      	ldr	r3, [sp, #28]
 8008fe2:	3502      	adds	r5, #2
 8008fe4:	1d1a      	adds	r2, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9207      	str	r2, [sp, #28]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da01      	bge.n	8008ff2 <_svfiprintf_r+0x132>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	425b      	negs	r3, r3
 8008ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff4:	4e2d      	ldr	r6, [pc, #180]	@ (80090ac <_svfiprintf_r+0x1ec>)
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	0030      	movs	r0, r6
 8008ffa:	7829      	ldrb	r1, [r5, #0]
 8008ffc:	f000 f9fe 	bl	80093fc <memchr>
 8009000:	2800      	cmp	r0, #0
 8009002:	d006      	beq.n	8009012 <_svfiprintf_r+0x152>
 8009004:	2340      	movs	r3, #64	@ 0x40
 8009006:	1b80      	subs	r0, r0, r6
 8009008:	4083      	lsls	r3, r0
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	3501      	adds	r5, #1
 800900e:	4313      	orrs	r3, r2
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	7829      	ldrb	r1, [r5, #0]
 8009014:	2206      	movs	r2, #6
 8009016:	4826      	ldr	r0, [pc, #152]	@ (80090b0 <_svfiprintf_r+0x1f0>)
 8009018:	1c6e      	adds	r6, r5, #1
 800901a:	7621      	strb	r1, [r4, #24]
 800901c:	f000 f9ee 	bl	80093fc <memchr>
 8009020:	2800      	cmp	r0, #0
 8009022:	d038      	beq.n	8009096 <_svfiprintf_r+0x1d6>
 8009024:	4b23      	ldr	r3, [pc, #140]	@ (80090b4 <_svfiprintf_r+0x1f4>)
 8009026:	2b00      	cmp	r3, #0
 8009028:	d122      	bne.n	8009070 <_svfiprintf_r+0x1b0>
 800902a:	2207      	movs	r2, #7
 800902c:	9b07      	ldr	r3, [sp, #28]
 800902e:	3307      	adds	r3, #7
 8009030:	4393      	bics	r3, r2
 8009032:	3308      	adds	r3, #8
 8009034:	9307      	str	r3, [sp, #28]
 8009036:	6963      	ldr	r3, [r4, #20]
 8009038:	9a04      	ldr	r2, [sp, #16]
 800903a:	189b      	adds	r3, r3, r2
 800903c:	6163      	str	r3, [r4, #20]
 800903e:	e762      	b.n	8008f06 <_svfiprintf_r+0x46>
 8009040:	4343      	muls	r3, r0
 8009042:	0035      	movs	r5, r6
 8009044:	2101      	movs	r1, #1
 8009046:	189b      	adds	r3, r3, r2
 8009048:	e7a4      	b.n	8008f94 <_svfiprintf_r+0xd4>
 800904a:	2300      	movs	r3, #0
 800904c:	200a      	movs	r0, #10
 800904e:	0019      	movs	r1, r3
 8009050:	3501      	adds	r5, #1
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	782a      	ldrb	r2, [r5, #0]
 8009056:	1c6e      	adds	r6, r5, #1
 8009058:	3a30      	subs	r2, #48	@ 0x30
 800905a:	2a09      	cmp	r2, #9
 800905c:	d903      	bls.n	8009066 <_svfiprintf_r+0x1a6>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0c8      	beq.n	8008ff4 <_svfiprintf_r+0x134>
 8009062:	9109      	str	r1, [sp, #36]	@ 0x24
 8009064:	e7c6      	b.n	8008ff4 <_svfiprintf_r+0x134>
 8009066:	4341      	muls	r1, r0
 8009068:	0035      	movs	r5, r6
 800906a:	2301      	movs	r3, #1
 800906c:	1889      	adds	r1, r1, r2
 800906e:	e7f1      	b.n	8009054 <_svfiprintf_r+0x194>
 8009070:	aa07      	add	r2, sp, #28
 8009072:	9200      	str	r2, [sp, #0]
 8009074:	0021      	movs	r1, r4
 8009076:	003a      	movs	r2, r7
 8009078:	4b0f      	ldr	r3, [pc, #60]	@ (80090b8 <_svfiprintf_r+0x1f8>)
 800907a:	9803      	ldr	r0, [sp, #12]
 800907c:	e000      	b.n	8009080 <_svfiprintf_r+0x1c0>
 800907e:	bf00      	nop
 8009080:	9004      	str	r0, [sp, #16]
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	3301      	adds	r3, #1
 8009086:	d1d6      	bne.n	8009036 <_svfiprintf_r+0x176>
 8009088:	89bb      	ldrh	r3, [r7, #12]
 800908a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800908c:	065b      	lsls	r3, r3, #25
 800908e:	d500      	bpl.n	8009092 <_svfiprintf_r+0x1d2>
 8009090:	e72c      	b.n	8008eec <_svfiprintf_r+0x2c>
 8009092:	b021      	add	sp, #132	@ 0x84
 8009094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009096:	aa07      	add	r2, sp, #28
 8009098:	9200      	str	r2, [sp, #0]
 800909a:	0021      	movs	r1, r4
 800909c:	003a      	movs	r2, r7
 800909e:	4b06      	ldr	r3, [pc, #24]	@ (80090b8 <_svfiprintf_r+0x1f8>)
 80090a0:	9803      	ldr	r0, [sp, #12]
 80090a2:	f000 f87b 	bl	800919c <_printf_i>
 80090a6:	e7eb      	b.n	8009080 <_svfiprintf_r+0x1c0>
 80090a8:	08009785 	.word	0x08009785
 80090ac:	0800978b 	.word	0x0800978b
 80090b0:	0800978f 	.word	0x0800978f
 80090b4:	00000000 	.word	0x00000000
 80090b8:	08008e01 	.word	0x08008e01

080090bc <_printf_common>:
 80090bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090be:	0016      	movs	r6, r2
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	688a      	ldr	r2, [r1, #8]
 80090c4:	690b      	ldr	r3, [r1, #16]
 80090c6:	000c      	movs	r4, r1
 80090c8:	9000      	str	r0, [sp, #0]
 80090ca:	4293      	cmp	r3, r2
 80090cc:	da00      	bge.n	80090d0 <_printf_common+0x14>
 80090ce:	0013      	movs	r3, r2
 80090d0:	0022      	movs	r2, r4
 80090d2:	6033      	str	r3, [r6, #0]
 80090d4:	3243      	adds	r2, #67	@ 0x43
 80090d6:	7812      	ldrb	r2, [r2, #0]
 80090d8:	2a00      	cmp	r2, #0
 80090da:	d001      	beq.n	80090e0 <_printf_common+0x24>
 80090dc:	3301      	adds	r3, #1
 80090de:	6033      	str	r3, [r6, #0]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	069b      	lsls	r3, r3, #26
 80090e4:	d502      	bpl.n	80090ec <_printf_common+0x30>
 80090e6:	6833      	ldr	r3, [r6, #0]
 80090e8:	3302      	adds	r3, #2
 80090ea:	6033      	str	r3, [r6, #0]
 80090ec:	6822      	ldr	r2, [r4, #0]
 80090ee:	2306      	movs	r3, #6
 80090f0:	0015      	movs	r5, r2
 80090f2:	401d      	ands	r5, r3
 80090f4:	421a      	tst	r2, r3
 80090f6:	d027      	beq.n	8009148 <_printf_common+0x8c>
 80090f8:	0023      	movs	r3, r4
 80090fa:	3343      	adds	r3, #67	@ 0x43
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	1e5a      	subs	r2, r3, #1
 8009100:	4193      	sbcs	r3, r2
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	0692      	lsls	r2, r2, #26
 8009106:	d430      	bmi.n	800916a <_printf_common+0xae>
 8009108:	0022      	movs	r2, r4
 800910a:	9901      	ldr	r1, [sp, #4]
 800910c:	9800      	ldr	r0, [sp, #0]
 800910e:	9d08      	ldr	r5, [sp, #32]
 8009110:	3243      	adds	r2, #67	@ 0x43
 8009112:	47a8      	blx	r5
 8009114:	3001      	adds	r0, #1
 8009116:	d025      	beq.n	8009164 <_printf_common+0xa8>
 8009118:	2206      	movs	r2, #6
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	2500      	movs	r5, #0
 800911e:	4013      	ands	r3, r2
 8009120:	2b04      	cmp	r3, #4
 8009122:	d105      	bne.n	8009130 <_printf_common+0x74>
 8009124:	6833      	ldr	r3, [r6, #0]
 8009126:	68e5      	ldr	r5, [r4, #12]
 8009128:	1aed      	subs	r5, r5, r3
 800912a:	43eb      	mvns	r3, r5
 800912c:	17db      	asrs	r3, r3, #31
 800912e:	401d      	ands	r5, r3
 8009130:	68a3      	ldr	r3, [r4, #8]
 8009132:	6922      	ldr	r2, [r4, #16]
 8009134:	4293      	cmp	r3, r2
 8009136:	dd01      	ble.n	800913c <_printf_common+0x80>
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	18ed      	adds	r5, r5, r3
 800913c:	2600      	movs	r6, #0
 800913e:	42b5      	cmp	r5, r6
 8009140:	d120      	bne.n	8009184 <_printf_common+0xc8>
 8009142:	2000      	movs	r0, #0
 8009144:	e010      	b.n	8009168 <_printf_common+0xac>
 8009146:	3501      	adds	r5, #1
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	6832      	ldr	r2, [r6, #0]
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	42ab      	cmp	r3, r5
 8009150:	ddd2      	ble.n	80090f8 <_printf_common+0x3c>
 8009152:	0022      	movs	r2, r4
 8009154:	2301      	movs	r3, #1
 8009156:	9901      	ldr	r1, [sp, #4]
 8009158:	9800      	ldr	r0, [sp, #0]
 800915a:	9f08      	ldr	r7, [sp, #32]
 800915c:	3219      	adds	r2, #25
 800915e:	47b8      	blx	r7
 8009160:	3001      	adds	r0, #1
 8009162:	d1f0      	bne.n	8009146 <_printf_common+0x8a>
 8009164:	2001      	movs	r0, #1
 8009166:	4240      	negs	r0, r0
 8009168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916a:	2030      	movs	r0, #48	@ 0x30
 800916c:	18e1      	adds	r1, r4, r3
 800916e:	3143      	adds	r1, #67	@ 0x43
 8009170:	7008      	strb	r0, [r1, #0]
 8009172:	0021      	movs	r1, r4
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	3145      	adds	r1, #69	@ 0x45
 8009178:	7809      	ldrb	r1, [r1, #0]
 800917a:	18a2      	adds	r2, r4, r2
 800917c:	3243      	adds	r2, #67	@ 0x43
 800917e:	3302      	adds	r3, #2
 8009180:	7011      	strb	r1, [r2, #0]
 8009182:	e7c1      	b.n	8009108 <_printf_common+0x4c>
 8009184:	0022      	movs	r2, r4
 8009186:	2301      	movs	r3, #1
 8009188:	9901      	ldr	r1, [sp, #4]
 800918a:	9800      	ldr	r0, [sp, #0]
 800918c:	9f08      	ldr	r7, [sp, #32]
 800918e:	321a      	adds	r2, #26
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	d0e6      	beq.n	8009164 <_printf_common+0xa8>
 8009196:	3601      	adds	r6, #1
 8009198:	e7d1      	b.n	800913e <_printf_common+0x82>
	...

0800919c <_printf_i>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	b08b      	sub	sp, #44	@ 0x2c
 80091a0:	9206      	str	r2, [sp, #24]
 80091a2:	000a      	movs	r2, r1
 80091a4:	3243      	adds	r2, #67	@ 0x43
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	9005      	str	r0, [sp, #20]
 80091aa:	9203      	str	r2, [sp, #12]
 80091ac:	7e0a      	ldrb	r2, [r1, #24]
 80091ae:	000c      	movs	r4, r1
 80091b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091b2:	2a78      	cmp	r2, #120	@ 0x78
 80091b4:	d809      	bhi.n	80091ca <_printf_i+0x2e>
 80091b6:	2a62      	cmp	r2, #98	@ 0x62
 80091b8:	d80b      	bhi.n	80091d2 <_printf_i+0x36>
 80091ba:	2a00      	cmp	r2, #0
 80091bc:	d100      	bne.n	80091c0 <_printf_i+0x24>
 80091be:	e0ba      	b.n	8009336 <_printf_i+0x19a>
 80091c0:	497a      	ldr	r1, [pc, #488]	@ (80093ac <_printf_i+0x210>)
 80091c2:	9104      	str	r1, [sp, #16]
 80091c4:	2a58      	cmp	r2, #88	@ 0x58
 80091c6:	d100      	bne.n	80091ca <_printf_i+0x2e>
 80091c8:	e08e      	b.n	80092e8 <_printf_i+0x14c>
 80091ca:	0025      	movs	r5, r4
 80091cc:	3542      	adds	r5, #66	@ 0x42
 80091ce:	702a      	strb	r2, [r5, #0]
 80091d0:	e022      	b.n	8009218 <_printf_i+0x7c>
 80091d2:	0010      	movs	r0, r2
 80091d4:	3863      	subs	r0, #99	@ 0x63
 80091d6:	2815      	cmp	r0, #21
 80091d8:	d8f7      	bhi.n	80091ca <_printf_i+0x2e>
 80091da:	f7f6 ff9b 	bl	8000114 <__gnu_thumb1_case_shi>
 80091de:	0016      	.short	0x0016
 80091e0:	fff6001f 	.word	0xfff6001f
 80091e4:	fff6fff6 	.word	0xfff6fff6
 80091e8:	001ffff6 	.word	0x001ffff6
 80091ec:	fff6fff6 	.word	0xfff6fff6
 80091f0:	fff6fff6 	.word	0xfff6fff6
 80091f4:	0036009f 	.word	0x0036009f
 80091f8:	fff6007e 	.word	0xfff6007e
 80091fc:	00b0fff6 	.word	0x00b0fff6
 8009200:	0036fff6 	.word	0x0036fff6
 8009204:	fff6fff6 	.word	0xfff6fff6
 8009208:	0082      	.short	0x0082
 800920a:	0025      	movs	r5, r4
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	3542      	adds	r5, #66	@ 0x42
 8009210:	1d11      	adds	r1, r2, #4
 8009212:	6019      	str	r1, [r3, #0]
 8009214:	6813      	ldr	r3, [r2, #0]
 8009216:	702b      	strb	r3, [r5, #0]
 8009218:	2301      	movs	r3, #1
 800921a:	e09e      	b.n	800935a <_printf_i+0x1be>
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	6809      	ldr	r1, [r1, #0]
 8009220:	1d02      	adds	r2, r0, #4
 8009222:	060d      	lsls	r5, r1, #24
 8009224:	d50b      	bpl.n	800923e <_printf_i+0xa2>
 8009226:	6806      	ldr	r6, [r0, #0]
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	2e00      	cmp	r6, #0
 800922c:	da03      	bge.n	8009236 <_printf_i+0x9a>
 800922e:	232d      	movs	r3, #45	@ 0x2d
 8009230:	9a03      	ldr	r2, [sp, #12]
 8009232:	4276      	negs	r6, r6
 8009234:	7013      	strb	r3, [r2, #0]
 8009236:	4b5d      	ldr	r3, [pc, #372]	@ (80093ac <_printf_i+0x210>)
 8009238:	270a      	movs	r7, #10
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	e018      	b.n	8009270 <_printf_i+0xd4>
 800923e:	6806      	ldr	r6, [r0, #0]
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	0649      	lsls	r1, r1, #25
 8009244:	d5f1      	bpl.n	800922a <_printf_i+0x8e>
 8009246:	b236      	sxth	r6, r6
 8009248:	e7ef      	b.n	800922a <_printf_i+0x8e>
 800924a:	6808      	ldr	r0, [r1, #0]
 800924c:	6819      	ldr	r1, [r3, #0]
 800924e:	c940      	ldmia	r1!, {r6}
 8009250:	0605      	lsls	r5, r0, #24
 8009252:	d402      	bmi.n	800925a <_printf_i+0xbe>
 8009254:	0640      	lsls	r0, r0, #25
 8009256:	d500      	bpl.n	800925a <_printf_i+0xbe>
 8009258:	b2b6      	uxth	r6, r6
 800925a:	6019      	str	r1, [r3, #0]
 800925c:	4b53      	ldr	r3, [pc, #332]	@ (80093ac <_printf_i+0x210>)
 800925e:	270a      	movs	r7, #10
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	2a6f      	cmp	r2, #111	@ 0x6f
 8009264:	d100      	bne.n	8009268 <_printf_i+0xcc>
 8009266:	3f02      	subs	r7, #2
 8009268:	0023      	movs	r3, r4
 800926a:	2200      	movs	r2, #0
 800926c:	3343      	adds	r3, #67	@ 0x43
 800926e:	701a      	strb	r2, [r3, #0]
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	60a3      	str	r3, [r4, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	db06      	blt.n	8009286 <_printf_i+0xea>
 8009278:	2104      	movs	r1, #4
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	9d03      	ldr	r5, [sp, #12]
 800927e:	438a      	bics	r2, r1
 8009280:	6022      	str	r2, [r4, #0]
 8009282:	4333      	orrs	r3, r6
 8009284:	d00c      	beq.n	80092a0 <_printf_i+0x104>
 8009286:	9d03      	ldr	r5, [sp, #12]
 8009288:	0030      	movs	r0, r6
 800928a:	0039      	movs	r1, r7
 800928c:	f7f6 ffd2 	bl	8000234 <__aeabi_uidivmod>
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	3d01      	subs	r5, #1
 8009294:	5c5b      	ldrb	r3, [r3, r1]
 8009296:	702b      	strb	r3, [r5, #0]
 8009298:	0033      	movs	r3, r6
 800929a:	0006      	movs	r6, r0
 800929c:	429f      	cmp	r7, r3
 800929e:	d9f3      	bls.n	8009288 <_printf_i+0xec>
 80092a0:	2f08      	cmp	r7, #8
 80092a2:	d109      	bne.n	80092b8 <_printf_i+0x11c>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	07db      	lsls	r3, r3, #31
 80092a8:	d506      	bpl.n	80092b8 <_printf_i+0x11c>
 80092aa:	6862      	ldr	r2, [r4, #4]
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	dc02      	bgt.n	80092b8 <_printf_i+0x11c>
 80092b2:	2330      	movs	r3, #48	@ 0x30
 80092b4:	3d01      	subs	r5, #1
 80092b6:	702b      	strb	r3, [r5, #0]
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	1b5b      	subs	r3, r3, r5
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	9b07      	ldr	r3, [sp, #28]
 80092c0:	0021      	movs	r1, r4
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	9805      	ldr	r0, [sp, #20]
 80092c6:	9b06      	ldr	r3, [sp, #24]
 80092c8:	aa09      	add	r2, sp, #36	@ 0x24
 80092ca:	f7ff fef7 	bl	80090bc <_printf_common>
 80092ce:	3001      	adds	r0, #1
 80092d0:	d148      	bne.n	8009364 <_printf_i+0x1c8>
 80092d2:	2001      	movs	r0, #1
 80092d4:	4240      	negs	r0, r0
 80092d6:	b00b      	add	sp, #44	@ 0x2c
 80092d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092da:	2220      	movs	r2, #32
 80092dc:	6809      	ldr	r1, [r1, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	6022      	str	r2, [r4, #0]
 80092e2:	2278      	movs	r2, #120	@ 0x78
 80092e4:	4932      	ldr	r1, [pc, #200]	@ (80093b0 <_printf_i+0x214>)
 80092e6:	9104      	str	r1, [sp, #16]
 80092e8:	0021      	movs	r1, r4
 80092ea:	3145      	adds	r1, #69	@ 0x45
 80092ec:	700a      	strb	r2, [r1, #0]
 80092ee:	6819      	ldr	r1, [r3, #0]
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	c940      	ldmia	r1!, {r6}
 80092f4:	0610      	lsls	r0, r2, #24
 80092f6:	d402      	bmi.n	80092fe <_printf_i+0x162>
 80092f8:	0650      	lsls	r0, r2, #25
 80092fa:	d500      	bpl.n	80092fe <_printf_i+0x162>
 80092fc:	b2b6      	uxth	r6, r6
 80092fe:	6019      	str	r1, [r3, #0]
 8009300:	07d3      	lsls	r3, r2, #31
 8009302:	d502      	bpl.n	800930a <_printf_i+0x16e>
 8009304:	2320      	movs	r3, #32
 8009306:	4313      	orrs	r3, r2
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	2e00      	cmp	r6, #0
 800930c:	d001      	beq.n	8009312 <_printf_i+0x176>
 800930e:	2710      	movs	r7, #16
 8009310:	e7aa      	b.n	8009268 <_printf_i+0xcc>
 8009312:	2220      	movs	r2, #32
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	4393      	bics	r3, r2
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	e7f8      	b.n	800930e <_printf_i+0x172>
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	680d      	ldr	r5, [r1, #0]
 8009320:	1d10      	adds	r0, r2, #4
 8009322:	6949      	ldr	r1, [r1, #20]
 8009324:	6018      	str	r0, [r3, #0]
 8009326:	6813      	ldr	r3, [r2, #0]
 8009328:	062e      	lsls	r6, r5, #24
 800932a:	d501      	bpl.n	8009330 <_printf_i+0x194>
 800932c:	6019      	str	r1, [r3, #0]
 800932e:	e002      	b.n	8009336 <_printf_i+0x19a>
 8009330:	066d      	lsls	r5, r5, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0x190>
 8009334:	8019      	strh	r1, [r3, #0]
 8009336:	2300      	movs	r3, #0
 8009338:	9d03      	ldr	r5, [sp, #12]
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	e7bf      	b.n	80092be <_printf_i+0x122>
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	1d11      	adds	r1, r2, #4
 8009342:	6019      	str	r1, [r3, #0]
 8009344:	6815      	ldr	r5, [r2, #0]
 8009346:	2100      	movs	r1, #0
 8009348:	0028      	movs	r0, r5
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	f000 f856 	bl	80093fc <memchr>
 8009350:	2800      	cmp	r0, #0
 8009352:	d001      	beq.n	8009358 <_printf_i+0x1bc>
 8009354:	1b40      	subs	r0, r0, r5
 8009356:	6060      	str	r0, [r4, #4]
 8009358:	6863      	ldr	r3, [r4, #4]
 800935a:	6123      	str	r3, [r4, #16]
 800935c:	2300      	movs	r3, #0
 800935e:	9a03      	ldr	r2, [sp, #12]
 8009360:	7013      	strb	r3, [r2, #0]
 8009362:	e7ac      	b.n	80092be <_printf_i+0x122>
 8009364:	002a      	movs	r2, r5
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	9906      	ldr	r1, [sp, #24]
 800936a:	9805      	ldr	r0, [sp, #20]
 800936c:	9d07      	ldr	r5, [sp, #28]
 800936e:	47a8      	blx	r5
 8009370:	3001      	adds	r0, #1
 8009372:	d0ae      	beq.n	80092d2 <_printf_i+0x136>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	079b      	lsls	r3, r3, #30
 8009378:	d415      	bmi.n	80093a6 <_printf_i+0x20a>
 800937a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800937c:	68e0      	ldr	r0, [r4, #12]
 800937e:	4298      	cmp	r0, r3
 8009380:	daa9      	bge.n	80092d6 <_printf_i+0x13a>
 8009382:	0018      	movs	r0, r3
 8009384:	e7a7      	b.n	80092d6 <_printf_i+0x13a>
 8009386:	0022      	movs	r2, r4
 8009388:	2301      	movs	r3, #1
 800938a:	9906      	ldr	r1, [sp, #24]
 800938c:	9805      	ldr	r0, [sp, #20]
 800938e:	9e07      	ldr	r6, [sp, #28]
 8009390:	3219      	adds	r2, #25
 8009392:	47b0      	blx	r6
 8009394:	3001      	adds	r0, #1
 8009396:	d09c      	beq.n	80092d2 <_printf_i+0x136>
 8009398:	3501      	adds	r5, #1
 800939a:	68e3      	ldr	r3, [r4, #12]
 800939c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	dcf0      	bgt.n	8009386 <_printf_i+0x1ea>
 80093a4:	e7e9      	b.n	800937a <_printf_i+0x1de>
 80093a6:	2500      	movs	r5, #0
 80093a8:	e7f7      	b.n	800939a <_printf_i+0x1fe>
 80093aa:	46c0      	nop			@ (mov r8, r8)
 80093ac:	08009796 	.word	0x08009796
 80093b0:	080097a7 	.word	0x080097a7

080093b4 <memmove>:
 80093b4:	b510      	push	{r4, lr}
 80093b6:	4288      	cmp	r0, r1
 80093b8:	d902      	bls.n	80093c0 <memmove+0xc>
 80093ba:	188b      	adds	r3, r1, r2
 80093bc:	4298      	cmp	r0, r3
 80093be:	d308      	bcc.n	80093d2 <memmove+0x1e>
 80093c0:	2300      	movs	r3, #0
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d007      	beq.n	80093d6 <memmove+0x22>
 80093c6:	5ccc      	ldrb	r4, [r1, r3]
 80093c8:	54c4      	strb	r4, [r0, r3]
 80093ca:	3301      	adds	r3, #1
 80093cc:	e7f9      	b.n	80093c2 <memmove+0xe>
 80093ce:	5c8b      	ldrb	r3, [r1, r2]
 80093d0:	5483      	strb	r3, [r0, r2]
 80093d2:	3a01      	subs	r2, #1
 80093d4:	d2fb      	bcs.n	80093ce <memmove+0x1a>
 80093d6:	bd10      	pop	{r4, pc}

080093d8 <_sbrk_r>:
 80093d8:	2300      	movs	r3, #0
 80093da:	b570      	push	{r4, r5, r6, lr}
 80093dc:	4d06      	ldr	r5, [pc, #24]	@ (80093f8 <_sbrk_r+0x20>)
 80093de:	0004      	movs	r4, r0
 80093e0:	0008      	movs	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f8 fe84 	bl	80020f0 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d103      	bne.n	80093f4 <_sbrk_r+0x1c>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d000      	beq.n	80093f4 <_sbrk_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	200005a0 	.word	0x200005a0

080093fc <memchr>:
 80093fc:	b2c9      	uxtb	r1, r1
 80093fe:	1882      	adds	r2, r0, r2
 8009400:	4290      	cmp	r0, r2
 8009402:	d101      	bne.n	8009408 <memchr+0xc>
 8009404:	2000      	movs	r0, #0
 8009406:	4770      	bx	lr
 8009408:	7803      	ldrb	r3, [r0, #0]
 800940a:	428b      	cmp	r3, r1
 800940c:	d0fb      	beq.n	8009406 <memchr+0xa>
 800940e:	3001      	adds	r0, #1
 8009410:	e7f6      	b.n	8009400 <memchr+0x4>

08009412 <memcpy>:
 8009412:	2300      	movs	r3, #0
 8009414:	b510      	push	{r4, lr}
 8009416:	429a      	cmp	r2, r3
 8009418:	d100      	bne.n	800941c <memcpy+0xa>
 800941a:	bd10      	pop	{r4, pc}
 800941c:	5ccc      	ldrb	r4, [r1, r3]
 800941e:	54c4      	strb	r4, [r0, r3]
 8009420:	3301      	adds	r3, #1
 8009422:	e7f8      	b.n	8009416 <memcpy+0x4>

08009424 <_realloc_r>:
 8009424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009426:	0006      	movs	r6, r0
 8009428:	000c      	movs	r4, r1
 800942a:	0015      	movs	r5, r2
 800942c:	2900      	cmp	r1, #0
 800942e:	d105      	bne.n	800943c <_realloc_r+0x18>
 8009430:	0011      	movs	r1, r2
 8009432:	f7ff fc55 	bl	8008ce0 <_malloc_r>
 8009436:	0004      	movs	r4, r0
 8009438:	0020      	movs	r0, r4
 800943a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800943c:	2a00      	cmp	r2, #0
 800943e:	d103      	bne.n	8009448 <_realloc_r+0x24>
 8009440:	f7ff fbe2 	bl	8008c08 <_free_r>
 8009444:	002c      	movs	r4, r5
 8009446:	e7f7      	b.n	8009438 <_realloc_r+0x14>
 8009448:	f000 f81c 	bl	8009484 <_malloc_usable_size_r>
 800944c:	0007      	movs	r7, r0
 800944e:	4285      	cmp	r5, r0
 8009450:	d802      	bhi.n	8009458 <_realloc_r+0x34>
 8009452:	0843      	lsrs	r3, r0, #1
 8009454:	42ab      	cmp	r3, r5
 8009456:	d3ef      	bcc.n	8009438 <_realloc_r+0x14>
 8009458:	0029      	movs	r1, r5
 800945a:	0030      	movs	r0, r6
 800945c:	f7ff fc40 	bl	8008ce0 <_malloc_r>
 8009460:	9001      	str	r0, [sp, #4]
 8009462:	2800      	cmp	r0, #0
 8009464:	d101      	bne.n	800946a <_realloc_r+0x46>
 8009466:	9c01      	ldr	r4, [sp, #4]
 8009468:	e7e6      	b.n	8009438 <_realloc_r+0x14>
 800946a:	002a      	movs	r2, r5
 800946c:	42bd      	cmp	r5, r7
 800946e:	d900      	bls.n	8009472 <_realloc_r+0x4e>
 8009470:	003a      	movs	r2, r7
 8009472:	0021      	movs	r1, r4
 8009474:	9801      	ldr	r0, [sp, #4]
 8009476:	f7ff ffcc 	bl	8009412 <memcpy>
 800947a:	0021      	movs	r1, r4
 800947c:	0030      	movs	r0, r6
 800947e:	f7ff fbc3 	bl	8008c08 <_free_r>
 8009482:	e7f0      	b.n	8009466 <_realloc_r+0x42>

08009484 <_malloc_usable_size_r>:
 8009484:	1f0b      	subs	r3, r1, #4
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	1f18      	subs	r0, r3, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	da01      	bge.n	8009492 <_malloc_usable_size_r+0xe>
 800948e:	580b      	ldr	r3, [r1, r0]
 8009490:	18c0      	adds	r0, r0, r3
 8009492:	4770      	bx	lr

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	46c0      	nop			@ (mov r8, r8)
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
