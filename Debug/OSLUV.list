
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08008380  08008380  00009380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008520  08008520  00009520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008528  08008528  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00009528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800852c  0800852c  0000952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008530  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000078  080085a8  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080085a8  0000a520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cbe  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a3  00000000  00000000  00020d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00023e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b737  00000000  00000000  00025228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018475  00000000  00000000  0004095f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b132d  00000000  00000000  00058dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010a101  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000fa1  00000000  00000000  0010a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dfc  00000000  00000000  0010b0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0010fee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008368 	.word	0x08008368

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08008368 	.word	0x08008368

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <sendInt16UART>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


 void sendInt16UART() // UART Transmit
{
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	b08f      	sub	sp, #60	@ 0x3c
 8000634:	af04      	add	r7, sp, #16


uint8_t buffer[36];
sprintf(buffer, "%04d, %04d, %04d, %04d, %04d, %04d\r\n", adc_buffer[0], adc_buffer[1], adc_buffer[2], adc_buffer[3], adc_buffer[4], adc_buffer[5]);
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <sendInt16UART+0x5c>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	001e      	movs	r6, r3
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <sendInt16UART+0x5c>)
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	b29b      	uxth	r3, r3
 8000644:	469c      	mov	ip, r3
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <sendInt16UART+0x5c>)
 8000648:	889b      	ldrh	r3, [r3, #4]
 800064a:	b29b      	uxth	r3, r3
 800064c:	001a      	movs	r2, r3
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <sendInt16UART+0x5c>)
 8000650:	88db      	ldrh	r3, [r3, #6]
 8000652:	b29b      	uxth	r3, r3
 8000654:	001c      	movs	r4, r3
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <sendInt16UART+0x5c>)
 8000658:	891b      	ldrh	r3, [r3, #8]
 800065a:	b29b      	uxth	r3, r3
 800065c:	001d      	movs	r5, r3
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <sendInt16UART+0x5c>)
 8000660:	895b      	ldrh	r3, [r3, #10]
 8000662:	b29b      	uxth	r3, r3
 8000664:	490a      	ldr	r1, [pc, #40]	@ (8000690 <sendInt16UART+0x60>)
 8000666:	1d38      	adds	r0, r7, #4
 8000668:	9303      	str	r3, [sp, #12]
 800066a:	9502      	str	r5, [sp, #8]
 800066c:	9401      	str	r4, [sp, #4]
 800066e:	9200      	str	r2, [sp, #0]
 8000670:	4663      	mov	r3, ip
 8000672:	0032      	movs	r2, r6
 8000674:	f007 f9dc 	bl	8007a30 <siprintf>

HAL_UART_Transmit(&huart2, buffer, 36, 10);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	4806      	ldr	r0, [pc, #24]	@ (8000694 <sendInt16UART+0x64>)
 800067c:	230a      	movs	r3, #10
 800067e:	2224      	movs	r2, #36	@ 0x24
 8000680:	f006 fb26 	bl	8006cd0 <HAL_UART_Transmit>

}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b00b      	add	sp, #44	@ 0x2c
 800068a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068c:	2000009c 	.word	0x2000009c
 8000690:	08008380 	.word	0x08008380
 8000694:	20000334 	.word	0x20000334

08000698 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800069e:	f001 fbe9 	bl	8001e74 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(100);
 80006a2:	2064      	movs	r0, #100	@ 0x64
 80006a4:	f001 fc6c 	bl	8001f80 <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a8:	f000 fa7a 	bl	8000ba0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	@ 0x64
 80006ae:	f001 fc67 	bl	8001f80 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b2:	f000 fedb 	bl	800146c <MX_GPIO_Init>
	MX_DMA_Init();
 80006b6:	f000 fec3 	bl	8001440 <MX_DMA_Init>
	MX_ADC1_Init();
 80006ba:	f000 fadf 	bl	8000c7c <MX_ADC1_Init>
	MX_COMP2_Init();
 80006be:	f000 fba1 	bl	8000e04 <MX_COMP2_Init>
	MX_DAC1_Init();
 80006c2:	f000 fbcf 	bl	8000e64 <MX_DAC1_Init>
	MX_TIM1_Init();
 80006c6:	f000 fc11 	bl	8000eec <MX_TIM1_Init>
	MX_TIM2_Init();
 80006ca:	f000 fcf1 	bl	80010b0 <MX_TIM2_Init>
	MX_TIM3_Init();
 80006ce:	f000 fd4f 	bl	8001170 <MX_TIM3_Init>
	MX_TIM16_Init();
 80006d2:	f000 fe17 	bl	8001304 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 80006d6:	f000 fe65 	bl	80013a4 <MX_USART2_UART_Init>
	MX_TIM6_Init();
 80006da:	f000 fdd9 	bl	8001290 <MX_TIM6_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80006de:	f000 faa7 	bl	8000c30 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// synchronous timing interrupts
	TIM6->ARR = 1000;
 80006e2:	4bd4      	ldr	r3, [pc, #848]	@ (8000a34 <main+0x39c>)
 80006e4:	22fa      	movs	r2, #250	@ 0xfa
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 80006ea:	4bd3      	ldr	r3, [pc, #844]	@ (8000a38 <main+0x3a0>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f004 fce1 	bl	80050b4 <HAL_TIM_Base_Start_IT>

	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 80006f2:	4bd2      	ldr	r3, [pc, #840]	@ (8000a3c <main+0x3a4>)
 80006f4:	699a      	ldr	r2, [r3, #24]
 80006f6:	4bd1      	ldr	r3, [pc, #836]	@ (8000a3c <main+0x3a4>)
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	430a      	orrs	r2, r1
 80006fc:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 80006fe:	4bcf      	ldr	r3, [pc, #828]	@ (8000a3c <main+0x3a4>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4bce      	ldr	r3, [pc, #824]	@ (8000a3c <main+0x3a4>)
 8000704:	2180      	movs	r1, #128	@ 0x80
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
	//TIM1->ARR = 320; //50 kHz init frequency
	//TIM1->CCR1 = 0;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 800070a:	4bcd      	ldr	r3, [pc, #820]	@ (8000a40 <main+0x3a8>)
 800070c:	2100      	movs	r1, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f004 fd84 	bl	800521c <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 8000714:	4bca      	ldr	r3, [pc, #808]	@ (8000a40 <main+0x3a8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800071a:	4bc9      	ldr	r3, [pc, #804]	@ (8000a40 <main+0x3a8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	0209      	lsls	r1, r1, #8
 8000722:	430a      	orrs	r2, r1
 8000724:	645a      	str	r2, [r3, #68]	@ 0x44

	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 8000726:	4bc7      	ldr	r3, [pc, #796]	@ (8000a44 <main+0x3ac>)
 8000728:	2100      	movs	r1, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f002 ff7b 	bl	8003626 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 8000730:	4bc5      	ldr	r3, [pc, #788]	@ (8000a48 <main+0x3b0>)
 8000732:	48c4      	ldr	r0, [pc, #784]	@ (8000a44 <main+0x3ac>)
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	f003 f828 	bl	800378c <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 800073c:	4bc3      	ldr	r3, [pc, #780]	@ (8000a4c <main+0x3b4>)
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fe1e 	bl	8003380 <HAL_COMP_Start>

	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, numberADCchannels); // start ADC with DMA, 6 channels
 8000744:	4bc2      	ldr	r3, [pc, #776]	@ (8000a50 <main+0x3b8>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	001a      	movs	r2, r3
 800074a:	49c2      	ldr	r1, [pc, #776]	@ (8000a54 <main+0x3bc>)
 800074c:	4bc2      	ldr	r3, [pc, #776]	@ (8000a58 <main+0x3c0>)
 800074e:	0018      	movs	r0, r3
 8000750:	f001 ff36 	bl	80025c0 <HAL_ADC_Start_DMA>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]

	// blink LED
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	4abf      	ldr	r2, [pc, #764]	@ (8000a5c <main+0x3c4>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f003 fd6a 	bl	800423c <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000768:	23fa      	movs	r3, #250	@ 0xfa
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fc07 	bl	8001f80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000772:	2380      	movs	r3, #128	@ 0x80
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	4ab9      	ldr	r2, [pc, #740]	@ (8000a5c <main+0x3c4>)
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f003 fd5e 	bl	800423c <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000780:	23fa      	movs	r3, #250	@ 0xfa
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fbfb 	bl	8001f80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800078a:	2380      	movs	r3, #128	@ 0x80
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	4ab3      	ldr	r2, [pc, #716]	@ (8000a5c <main+0x3c4>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f003 fd52 	bl	800423c <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000798:	23fa      	movs	r3, #250	@ 0xfa
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fbef 	bl	8001f80 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	4aad      	ldr	r2, [pc, #692]	@ (8000a5c <main+0x3c4>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f003 fd46 	bl	800423c <HAL_GPIO_TogglePin>

		/* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request) {
 80007b0:	4bab      	ldr	r3, [pc, #684]	@ (8000a60 <main+0x3c8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <main+0x12c>
			tim6_slowIrq_request = 0;
 80007ba:	4ba9      	ldr	r3, [pc, #676]	@ (8000a60 <main+0x3c8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
			sendInt16UART();
 80007c0:	f7ff ff36 	bl	8000630 <sendInt16UART>
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 80007c4:	4ba7      	ldr	r3, [pc, #668]	@ (8000a64 <main+0x3cc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d062      	beq.n	8000894 <main+0x1fc>
			tim6_irq_request = 0;
 80007ce:	4ba5      	ldr	r3, [pc, #660]	@ (8000a64 <main+0x3cc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9); //pull low for enabling
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4aa3      	ldr	r2, [pc, #652]	@ (8000a68 <main+0x3d0>)
 80007da:	0019      	movs	r1, r3
 80007dc:	0010      	movs	r0, r2
 80007de:	f003 fcf3 	bl	80041c8 <HAL_GPIO_ReadPin>
 80007e2:	0003      	movs	r3, r0
 80007e4:	425a      	negs	r2, r3
 80007e6:	4153      	adcs	r3, r2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	001a      	movs	r2, r3
 80007ec:	4b9f      	ldr	r3, [pc, #636]	@ (8000a6c <main+0x3d4>)
 80007ee:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 80007f0:	4b9e      	ldr	r3, [pc, #632]	@ (8000a6c <main+0x3d4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d009      	beq.n	800080e <main+0x176>
 80007fa:	4b9d      	ldr	r3, [pc, #628]	@ (8000a70 <main+0x3d8>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d105      	bne.n	800080e <main+0x176>
				ignitionCounter++;
 8000802:	4b9c      	ldr	r3, [pc, #624]	@ (8000a74 <main+0x3dc>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b9a      	ldr	r3, [pc, #616]	@ (8000a74 <main+0x3dc>)
 800080c:	801a      	strh	r2, [r3, #0]
			}

			// checked in all states
			// check lamp voltage
			if (adc_uSenseLamp>adc_uSenseLampOpenCircuit) {
 800080e:	4b9a      	ldr	r3, [pc, #616]	@ (8000a78 <main+0x3e0>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b99      	ldr	r3, [pc, #612]	@ (8000a7c <main+0x3e4>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d903      	bls.n	8000824 <main+0x18c>
				lampOCFlag = 1;
 800081c:	4b98      	ldr	r3, [pc, #608]	@ (8000a80 <main+0x3e8>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e002      	b.n	800082a <main+0x192>
			}
			else {
				lampOCFlag = 0;
 8000824:	4b96      	ldr	r3, [pc, #600]	@ (8000a80 <main+0x3e8>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
			}


			// check supply voltage
			if ((adc_24V < upper_24Vsupply) && (adc_24V > lower_24Vsupply)) {
 800082a:	4b96      	ldr	r3, [pc, #600]	@ (8000a84 <main+0x3ec>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b95      	ldr	r3, [pc, #596]	@ (8000a88 <main+0x3f0>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	b29b      	uxth	r3, r3
 8000836:	429a      	cmp	r2, r3
 8000838:	d20b      	bcs.n	8000852 <main+0x1ba>
 800083a:	4b92      	ldr	r3, [pc, #584]	@ (8000a84 <main+0x3ec>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29a      	uxth	r2, r3
 8000840:	4b92      	ldr	r3, [pc, #584]	@ (8000a8c <main+0x3f4>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	429a      	cmp	r2, r3
 8000848:	d903      	bls.n	8000852 <main+0x1ba>
				supplyOKFlag = 1;
 800084a:	4b91      	ldr	r3, [pc, #580]	@ (8000a90 <main+0x3f8>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e002      	b.n	8000858 <main+0x1c0>
			}
			else {
				supplyOKFlag = 0;
 8000852:	4b8f      	ldr	r3, [pc, #572]	@ (8000a90 <main+0x3f8>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > upper_tempMOSFET) {
 8000858:	4b8e      	ldr	r3, [pc, #568]	@ (8000a94 <main+0x3fc>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b8e      	ldr	r3, [pc, #568]	@ (8000a98 <main+0x400>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	429a      	cmp	r2, r3
 8000866:	d903      	bls.n	8000870 <main+0x1d8>
				OT_flag = 1;
 8000868:	4b8c      	ldr	r3, [pc, #560]	@ (8000a9c <main+0x404>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e002      	b.n	8000876 <main+0x1de>
			}
			else {
				OT_flag = 0;
 8000870:	4b8a      	ldr	r3, [pc, #552]	@ (8000a9c <main+0x404>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > upper_iIn) {
 8000876:	4b8a      	ldr	r3, [pc, #552]	@ (8000aa0 <main+0x408>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b89      	ldr	r3, [pc, #548]	@ (8000aa4 <main+0x40c>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29b      	uxth	r3, r3
 8000882:	429a      	cmp	r2, r3
 8000884:	d903      	bls.n	800088e <main+0x1f6>
				OCPinFlag = 1;
 8000886:	4b88      	ldr	r3, [pc, #544]	@ (8000aa8 <main+0x410>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	e002      	b.n	8000894 <main+0x1fc>
			}
			else {
				OCPinFlag = 0;
 800088e:	4b86      	ldr	r3, [pc, #536]	@ (8000aa8 <main+0x410>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]


		}

		// ------------ ASM -----------------------
		switch (state) {
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d900      	bls.n	800089e <main+0x206>
 800089c:	e788      	b.n	80007b0 <main+0x118>
 800089e:	009a      	lsls	r2, r3, #2
 80008a0:	4b82      	ldr	r3, [pc, #520]	@ (8000aac <main+0x414>)
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 80008a8:	4b71      	ldr	r3, [pc, #452]	@ (8000a70 <main+0x3d8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 80008ae:	4b71      	ldr	r3, [pc, #452]	@ (8000a74 <main+0x3dc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	4868      	ldr	r0, [pc, #416]	@ (8000a5c <main+0x3c4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	0019      	movs	r1, r3
 80008be:	f003 fca0 	bl	8004202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 80008c2:	4b69      	ldr	r3, [pc, #420]	@ (8000a68 <main+0x3d0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 fc9a 	bl	8004202 <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80008ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000a40 <main+0x3a8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2200      	movs	r2, #0
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34

			// exit conditions
			if (errorFlag) {
 80008d6:	4b76      	ldr	r3, [pc, #472]	@ (8000ab0 <main+0x418>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <main+0x24e>
				state = ERROR_state;
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	2204      	movs	r2, #4
 80008e4:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag  && supplyOKFlag ) {
 80008e6:	4b61      	ldr	r3, [pc, #388]	@ (8000a6c <main+0x3d4>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d100      	bne.n	80008f2 <main+0x25a>
 80008f0:	e13b      	b.n	8000b6a <main+0x4d2>
 80008f2:	4b67      	ldr	r3, [pc, #412]	@ (8000a90 <main+0x3f8>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d100      	bne.n	80008fe <main+0x266>
 80008fc:	e135      	b.n	8000b6a <main+0x4d2>
				state = IGNITE;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2202      	movs	r2, #2
 8000902:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000904:	e131      	b.n	8000b6a <main+0x4d2>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 8000906:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab4 <main+0x41c>)
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab8 <main+0x420>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d903      	bls.n	800091a <main+0x282>
				state = ERROR_state;
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	2204      	movs	r2, #4
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	e040      	b.n	800099c <main+0x304>
			}
			else if (!ignitionFlag) {
 800091a:	4b55      	ldr	r3, [pc, #340]	@ (8000a70 <main+0x3d8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d13c      	bne.n	800099c <main+0x304>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 8000922:	4b54      	ldr	r3, [pc, #336]	@ (8000a74 <main+0x3dc>)
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	4b65      	ldr	r3, [pc, #404]	@ (8000abc <main+0x424>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d22d      	bcs.n	800098a <main+0x2f2>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	484a      	ldr	r0, [pc, #296]	@ (8000a5c <main+0x3c4>)
 8000934:	2200      	movs	r2, #0
 8000936:	0019      	movs	r1, r3
 8000938:	f003 fc63 	bl	8004202 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 800093c:	4b60      	ldr	r3, [pc, #384]	@ (8000ac0 <main+0x428>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <main+0x3a8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 8000948:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <main+0x3d0>)
 800094a:	2201      	movs	r2, #1
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fc57 	bl	8004202 <HAL_GPIO_WritePin>
					if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
 8000954:	4b5b      	ldr	r3, [pc, #364]	@ (8000ac4 <main+0x42c>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ac8 <main+0x430>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d91c      	bls.n	800099c <main+0x304>
 8000962:	4b45      	ldr	r3, [pc, #276]	@ (8000a78 <main+0x3e0>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b58      	ldr	r3, [pc, #352]	@ (8000acc <main+0x434>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d215      	bcs.n	800099c <main+0x304>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000970:	4b3d      	ldr	r3, [pc, #244]	@ (8000a68 <main+0x3d0>)
 8000972:	2200      	movs	r2, #0
 8000974:	2140      	movs	r1, #64	@ 0x40
 8000976:	0018      	movs	r0, r3
 8000978:	f003 fc43 	bl	8004202 <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 800097c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a70 <main+0x3d8>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
						state = RUN;
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e008      	b.n	800099c <main+0x304>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 800098a:	4b4c      	ldr	r3, [pc, #304]	@ (8000abc <main+0x424>)
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <main+0x3dc>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	d802      	bhi.n	800099c <main+0x304>
					state = IGN_FAIL;
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	2203      	movs	r2, #3
 800099a:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 800099c:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <main+0x3d4>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d000      	beq.n	80009a8 <main+0x310>
 80009a6:	e0e2      	b.n	8000b6e <main+0x4d6>
				state = INIT;
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
			}


			break;
 80009ae:	e0de      	b.n	8000b6e <main+0x4d6>
		case IGN_FAIL:
			ignitionFlag = 0;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <main+0x3d8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <main+0x3d0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	2140      	movs	r1, #64	@ 0x40
 80009bc:	0018      	movs	r0, r3
 80009be:	f003 fc20 	bl	8004202 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <main+0x3a8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80009ca:	2380      	movs	r3, #128	@ 0x80
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <main+0x3c4>)
 80009d0:	0019      	movs	r1, r3
 80009d2:	0010      	movs	r0, r2
 80009d4:	f003 fc32 	bl	800423c <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80009d8:	2064      	movs	r0, #100	@ 0x64
 80009da:	f001 fad1 	bl	8001f80 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a5c <main+0x3c4>)
 80009e4:	0019      	movs	r1, r3
 80009e6:	0010      	movs	r0, r2
 80009e8:	f003 fc28 	bl	800423c <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f001 fac7 	bl	8001f80 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	021b      	lsls	r3, r3, #8
 80009f6:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <main+0x3c4>)
 80009f8:	0019      	movs	r1, r3
 80009fa:	0010      	movs	r0, r2
 80009fc:	f003 fc1e 	bl	800423c <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f001 fabd 	bl	8001f80 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <main+0x3c4>)
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0010      	movs	r0, r2
 8000a10:	f003 fc14 	bl	800423c <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000a14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <main+0x438>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fab1 	bl	8001f80 <HAL_Delay>
			failedIgnitionCounter++;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <main+0x41c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <main+0x41c>)
 8000a28:	701a      	strb	r2, [r3, #0]
			state = INIT;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
			break;
 8000a30:	e0a0      	b.n	8000b74 <main+0x4dc>
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	40001000 	.word	0x40001000
 8000a38:	2000029c 	.word	0x2000029c
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	200001b8 	.word	0x200001b8
 8000a44:	200001a4 	.word	0x200001a4
 8000a48:	00000fff 	.word	0x00000fff
 8000a4c:	20000174 	.word	0x20000174
 8000a50:	20000012 	.word	0x20000012
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	200000b4 	.word	0x200000b4
 8000a5c:	50000800 	.word	0x50000800
 8000a60:	2000009a 	.word	0x2000009a
 8000a64:	20000099 	.word	0x20000099
 8000a68:	50000400 	.word	0x50000400
 8000a6c:	20000094 	.word	0x20000094
 8000a70:	200003ca 	.word	0x200003ca
 8000a74:	200003c8 	.word	0x200003c8
 8000a78:	200000ac 	.word	0x200000ac
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	200003cc 	.word	0x200003cc
 8000a84:	200000a8 	.word	0x200000a8
 8000a88:	20000014 	.word	0x20000014
 8000a8c:	20000016 	.word	0x20000016
 8000a90:	20000095 	.word	0x20000095
 8000a94:	200000aa 	.word	0x200000aa
 8000a98:	20000018 	.word	0x20000018
 8000a9c:	20000097 	.word	0x20000097
 8000aa0:	200000b2 	.word	0x200000b2
 8000aa4:	2000001a 	.word	0x2000001a
 8000aa8:	20000098 	.word	0x20000098
 8000aac:	080083a8 	.word	0x080083a8
 8000ab0:	20000096 	.word	0x20000096
 8000ab4:	200003cb 	.word	0x200003cb
 8000ab8:	2000000e 	.word	0x2000000e
 8000abc:	2000000a 	.word	0x2000000a
 8000ac0:	20000002 	.word	0x20000002
 8000ac4:	200000ae 	.word	0x200000ae
 8000ac8:	20000006 	.word	0x20000006
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	2000000c 	.word	0x2000000c

		case RUN:
			// RUN code
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	4827      	ldr	r0, [pc, #156]	@ (8000b78 <main+0x4e0>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	0019      	movs	r1, r3
 8000ade:	f003 fb90 	bl	8004202 <HAL_GPIO_WritePin>

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMax); // max. duty cycle limiting
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <main+0x4e4>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <main+0x4e8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000aee:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <main+0x4ec>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4824      	ldr	r0, [pc, #144]	@ (8000b88 <main+0x4f0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	f002 fe47 	bl	800378c <HAL_DAC_SetValue>

			// exit conditions
			if (errorFlag == 1) {
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <main+0x4f4>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d102      	bne.n	8000b0e <main+0x476>
				state = ERROR_state;
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <main+0x4f8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d004      	beq.n	8000b22 <main+0x48a>
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <main+0x4fc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <main+0x490>
				state = INIT;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
			}

			if (OT_flag || errorFlag || lampOCFlag) {
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <main+0x500>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d108      	bne.n	8000b44 <main+0x4ac>
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <main+0x4f4>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <main+0x4ac>
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <main+0x504>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d016      	beq.n	8000b72 <main+0x4da>
				state = ERROR_state;
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	2204      	movs	r2, #4
 8000b48:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000b4a:	e012      	b.n	8000b72 <main+0x4da>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <main+0x4e8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34


			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000b54:	2380      	movs	r3, #128	@ 0x80
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <main+0x4e0>)
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	0010      	movs	r0, r2
 8000b5e:	f003 fb6d 	bl	800423c <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000b62:	20c8      	movs	r0, #200	@ 0xc8
 8000b64:	f001 fa0c 	bl	8001f80 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000b68:	e004      	b.n	8000b74 <main+0x4dc>
			break;
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	e620      	b.n	80007b0 <main+0x118>
			break;
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	e61e      	b.n	80007b0 <main+0x118>
			break;
 8000b72:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request) {
 8000b74:	e61c      	b.n	80007b0 <main+0x118>
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	50000800 	.word	0x50000800
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	200001b8 	.word	0x200001b8
 8000b84:	20000000 	.word	0x20000000
 8000b88:	200001a4 	.word	0x200001a4
 8000b8c:	20000096 	.word	0x20000096
 8000b90:	20000094 	.word	0x20000094
 8000b94:	20000095 	.word	0x20000095
 8000b98:	20000097 	.word	0x20000097
 8000b9c:	200003cc 	.word	0x200003cc

08000ba0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b093      	sub	sp, #76	@ 0x4c
 8000ba4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	2410      	movs	r4, #16
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	2338      	movs	r3, #56	@ 0x38
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f006 ff5f 	bl	8007a74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2310      	movs	r3, #16
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f006 ff58 	bl	8007a74 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f003 fb53 	bl	8004274 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2240      	movs	r2, #64	@ 0x40
 8000be6:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 fb8b 	bl	800430c <HAL_RCC_OscConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x5e>
	{
		Error_Handler();
 8000bfa:	f000 fce1 	bl	80015c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c10:	003b      	movs	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c16:	003b      	movs	r3, r7
 8000c18:	2100      	movs	r1, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f003 fe90 	bl	8004940 <HAL_RCC_ClockConfig>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x88>
	{
		Error_Handler();
 8000c24:	f000 fccc 	bl	80015c0 <Error_Handler>
	}
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b013      	add	sp, #76	@ 0x4c
 8000c2e:	bd90      	pop	{r4, r7, pc}

08000c30 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	/* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2011      	movs	r0, #17
 8000c3a:	f002 fc9f 	bl	800357c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000c3e:	2011      	movs	r0, #17
 8000c40:	f002 fcb1 	bl	80035a6 <HAL_NVIC_EnableIRQ>
	/* ADC1_COMP_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	200c      	movs	r0, #12
 8000c4a:	f002 fc97 	bl	800357c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f002 fca9 	bl	80035a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2009      	movs	r0, #9
 8000c5a:	f002 fc8f 	bl	800357c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c5e:	2009      	movs	r0, #9
 8000c60:	f002 fca1 	bl	80035a6 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2010      	movs	r0, #16
 8000c6a:	f002 fc87 	bl	800357c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f002 fc99 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	0018      	movs	r0, r3
 8000c86:	230c      	movs	r3, #12
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f006 fef2 	bl	8007a74 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000c90:	4b55      	ldr	r3, [pc, #340]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000c92:	4a56      	ldr	r2, [pc, #344]	@ (8000dec <MX_ADC1_Init+0x170>)
 8000c94:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000c96:	4b54      	ldr	r3, [pc, #336]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000c98:	22a0      	movs	r2, #160	@ 0xa0
 8000c9a:	0352      	lsls	r2, r2, #13
 8000c9c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9e:	4b52      	ldr	r3, [pc, #328]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca4:	4b50      	ldr	r3, [pc, #320]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000caa:	4b4f      	ldr	r3, [pc, #316]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	0392      	lsls	r2, r2, #14
 8000cb0:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000cc4:	4b48      	ldr	r3, [pc, #288]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 6;
 8000cca:	4b47      	ldr	r3, [pc, #284]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000ccc:	2206      	movs	r2, #6
 8000cce:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cd0:	4b45      	ldr	r3, [pc, #276]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cd2:	22a8      	movs	r2, #168	@ 0xa8
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cd8:	4b43      	ldr	r3, [pc, #268]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	00d2      	lsls	r2, r2, #3
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ce0:	4b41      	ldr	r3, [pc, #260]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000ce2:	222c      	movs	r2, #44	@ 0x2c
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce8:	4b3f      	ldr	r3, [pc, #252]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8000cee:	4b3e      	ldr	r3, [pc, #248]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_7CYCLES_5;
 8000cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000cfc:	223c      	movs	r2, #60	@ 0x3c
 8000cfe:	2100      	movs	r1, #0
 8000d00:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d02:	4b39      	ldr	r3, [pc, #228]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d08:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f001 fab0 	bl	8002270 <HAL_ADC_Init>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x9c>
	{
		Error_Handler();
 8000d14:	f000 fc54 	bl	80015c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	1d3a      	adds	r2, r7, #4
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000d2e:	0011      	movs	r1, r2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f001 fe0b 	bl	800294c <HAL_ADC_ConfigChannel>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 8000d3a:	f000 fc41 	bl	80015c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4a2b      	ldr	r2, [pc, #172]	@ (8000df0 <MX_ADC1_Init+0x174>)
 8000d42:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2204      	movs	r2, #4
 8000d48:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4a:	1d3a      	adds	r2, r7, #4
 8000d4c:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f001 fdfb 	bl	800294c <HAL_ADC_ConfigChannel>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8000d5a:	f000 fc31 	bl	80015c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <MX_ADC1_Init+0x178>)
 8000d62:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2208      	movs	r2, #8
 8000d68:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	1d3a      	adds	r2, r7, #4
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fdeb 	bl	800294c <HAL_ADC_ConfigChannel>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x102>
	{
		Error_Handler();
 8000d7a:	f000 fc21 	bl	80015c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4a1d      	ldr	r2, [pc, #116]	@ (8000df8 <MX_ADC1_Init+0x17c>)
 8000d82:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	220c      	movs	r2, #12
 8000d88:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	1d3a      	adds	r2, r7, #4
 8000d8c:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 fddb 	bl	800294c <HAL_ADC_ConfigChannel>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 8000d9a:	f000 fc11 	bl	80015c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4a16      	ldr	r2, [pc, #88]	@ (8000dfc <MX_ADC1_Init+0x180>)
 8000da2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2210      	movs	r2, #16
 8000da8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000daa:	1d3a      	adds	r2, r7, #4
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fdcb 	bl	800294c <HAL_ADC_ConfigChannel>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x142>
	{
		Error_Handler();
 8000dba:	f000 fc01 	bl	80015c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <MX_ADC1_Init+0x184>)
 8000dc2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2214      	movs	r2, #20
 8000dc8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	1d3a      	adds	r2, r7, #4
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <MX_ADC1_Init+0x16c>)
 8000dce:	0011      	movs	r1, r2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 fdbb 	bl	800294c <HAL_ADC_ConfigChannel>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0x162>
	{
		Error_Handler();
 8000dda:	f000 fbf1 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	200000b4 	.word	0x200000b4
 8000dec:	40012400 	.word	0x40012400
 8000df0:	04000002 	.word	0x04000002
 8000df4:	0c000008 	.word	0x0c000008
 8000df8:	20000100 	.word	0x20000100
 8000dfc:	24000200 	.word	0x24000200
 8000e00:	28000400 	.word	0x28000400

08000e04 <MX_COMP2_Init>:
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	/* USER CODE END COMP2_Init 0 */

	/* USER CODE BEGIN COMP2_Init 1 */

	/* USER CODE END COMP2_Init 1 */
	hcomp2.Instance = COMP2;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <MX_COMP2_Init+0x5c>)
 8000e0c:	601a      	str	r2, [r3, #0]
	hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
	hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e16:	2240      	movs	r2, #64	@ 0x40
 8000e18:	615a      	str	r2, [r3, #20]
	hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
	hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
	hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
	hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
	hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <MX_COMP2_Init+0x58>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f002 f938 	bl	80030bc <HAL_COMP_Init>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_COMP2_Init+0x50>
	{
		Error_Handler();
 8000e50:	f000 fbb6 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN COMP2_Init 2 */

	/* USER CODE END COMP2_Init 2 */

}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	20000174 	.word	0x20000174
 8000e60:	40010204 	.word	0x40010204

08000e64 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	2324      	movs	r3, #36	@ 0x24
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f006 fdfe 	bl	8007a74 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_DAC1_Init+0x80>)
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <MX_DAC1_Init+0x84>)
 8000e7c:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_DAC1_Init+0x80>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f002 fbad 	bl	80035e0 <HAL_DAC_Init>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_DAC1_Init+0x2a>
	{
		Error_Handler();
 8000e8a:	f000 fb99 	bl	80015c0 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	60da      	str	r2, [r3, #12]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_DAC1_Init+0x80>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f002 fc9a 	bl	80037ec <HAL_DAC_ConfigChannel>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_DAC1_Init+0x5c>
	{
		Error_Handler();
 8000ebc:	f000 fb80 	bl	80015c0 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ec6:	1d39      	adds	r1, r7, #4
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_DAC1_Init+0x80>)
 8000eca:	2210      	movs	r2, #16
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f002 fc8d 	bl	80037ec <HAL_DAC_ConfigChannel>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <MX_DAC1_Init+0x76>
	{
		Error_Handler();
 8000ed6:	f000 fb73 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b00a      	add	sp, #40	@ 0x28
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	200001a4 	.word	0x200001a4
 8000ee8:	40007400 	.word	0x40007400

08000eec <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0a0      	sub	sp, #128	@ 0x80
 8000ef0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 8000ef2:	236c      	movs	r3, #108	@ 0x6c
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	2314      	movs	r3, #20
 8000efa:	001a      	movs	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	f006 fdb9 	bl	8007a74 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	0018      	movs	r0, r3
 8000f08:	230c      	movs	r3, #12
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f006 fdb1 	bl	8007a74 <memset>
	TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000f12:	2354      	movs	r3, #84	@ 0x54
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	0018      	movs	r0, r3
 8000f18:	230c      	movs	r3, #12
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f006 fda9 	bl	8007a74 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f22:	2338      	movs	r3, #56	@ 0x38
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	0018      	movs	r0, r3
 8000f28:	231c      	movs	r3, #28
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f006 fda1 	bl	8007a74 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	0018      	movs	r0, r3
 8000f36:	2334      	movs	r3, #52	@ 0x34
 8000f38:	001a      	movs	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f006 fd9a 	bl	8007a74 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f40:	4b59      	ldr	r3, [pc, #356]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f42:	4a5a      	ldr	r2, [pc, #360]	@ (80010ac <MX_TIM1_Init+0x1c0>)
 8000f44:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000f46:	4b58      	ldr	r3, [pc, #352]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b56      	ldr	r3, [pc, #344]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 320;
 8000f52:	4b55      	ldr	r3, [pc, #340]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f54:	22a0      	movs	r2, #160	@ 0xa0
 8000f56:	0052      	lsls	r2, r2, #1
 8000f58:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b53      	ldr	r3, [pc, #332]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000f60:	4b51      	ldr	r3, [pc, #324]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f66:	4b50      	ldr	r3, [pc, #320]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f004 f8fc 	bl	800516c <HAL_TIM_PWM_Init>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000f78:	f000 fb22 	bl	80015c0 <Error_Handler>
	}
	sClearInputConfig.ClearInputState = ENABLE;
 8000f7c:	216c      	movs	r1, #108	@ 0x6c
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
	sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_COMP2;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2201      	movs	r2, #1
 8000f88:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 8000f8a:	1879      	adds	r1, r7, r1
 8000f8c:	4b46      	ldr	r3, [pc, #280]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	0018      	movs	r0, r3
 8000f92:	f004 fd31 	bl	80059f8 <HAL_TIM_ConfigOCrefClear>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0xb2>
	{
		Error_Handler();
 8000f9a:	f000 fb11 	bl	80015c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2160      	movs	r1, #96	@ 0x60
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f005 fc65 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0xda>
	{
		Error_Handler();
 8000fc2:	f000 fafd 	bl	80015c0 <Error_Handler>
	}
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000fc6:	2154      	movs	r1, #84	@ 0x54
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
	sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_DISABLE;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
	sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000fda:	187a      	adds	r2, r7, r1
 8000fdc:	4b32      	ldr	r3, [pc, #200]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f005 fd5b 	bl	8006a9c <HAL_TIMEx_ConfigBreakInput>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x102>
	{
		Error_Handler();
 8000fea:	f000 fae9 	bl	80015c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2138      	movs	r1, #56	@ 0x38
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2260      	movs	r2, #96	@ 0x60
 8000ff4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101a:	1879      	adds	r1, r7, r1
 800101c:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 800101e:	2200      	movs	r2, #0
 8001020:	0018      	movs	r0, r3
 8001022:	f004 fbe9 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 800102a:	f000 fac9 	bl	80015c0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2280      	movs	r2, #128	@ 0x80
 800104a:	0152      	lsls	r2, r2, #5
 800104c:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2280      	movs	r2, #128	@ 0x80
 8001052:	0192      	lsls	r2, r2, #6
 8001054:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	0492      	lsls	r2, r2, #18
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001082:	1d3a      	adds	r2, r7, #4
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f005 fc6b 	bl	8006964 <HAL_TIMEx_ConfigBreakDeadTime>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x1aa>
	{
		Error_Handler();
 8001092:	f000 fa95 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <MX_TIM1_Init+0x1bc>)
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fd11 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b020      	add	sp, #128	@ 0x80
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	200001b8 	.word	0x200001b8
 80010ac:	40012c00 	.word	0x40012c00

080010b0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b6:	231c      	movs	r3, #28
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	0018      	movs	r0, r3
 80010bc:	230c      	movs	r3, #12
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f006 fcd7 	bl	8007a74 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	003b      	movs	r3, r7
 80010c8:	0018      	movs	r0, r3
 80010ca:	231c      	movs	r3, #28
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f006 fcd0 	bl	8007a74 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010d4:	4b25      	ldr	r3, [pc, #148]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	05d2      	lsls	r2, r2, #23
 80010da:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 80010dc:	4b23      	ldr	r3, [pc, #140]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010de:	2210      	movs	r2, #16
 80010e0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b22      	ldr	r3, [pc, #136]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80010e8:	4b20      	ldr	r3, [pc, #128]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010ea:	22fa      	movs	r2, #250	@ 0xfa
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_TIM2_Init+0xbc>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f004 f834 	bl	800516c <HAL_TIM_PWM_Init>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001108:	f000 fa5a 	bl	80015c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	211c      	movs	r1, #28
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111a:	187a      	adds	r2, r7, r1
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_TIM2_Init+0xbc>)
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f005 fbb1 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 800112a:	f000 fa49 	bl	80015c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	003b      	movs	r3, r7
 8001130:	2260      	movs	r2, #96	@ 0x60
 8001132:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 500;
 8001134:	003b      	movs	r3, r7
 8001136:	22fa      	movs	r2, #250	@ 0xfa
 8001138:	0052      	lsls	r2, r2, #1
 800113a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113c:	003b      	movs	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001142:	003b      	movs	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001148:	0039      	movs	r1, r7
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_TIM2_Init+0xbc>)
 800114c:	2208      	movs	r2, #8
 800114e:	0018      	movs	r0, r3
 8001150:	f004 fb52 	bl	80057f8 <HAL_TIM_PWM_ConfigChannel>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 8001158:	f000 fa32 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <MX_TIM2_Init+0xbc>)
 800115e:	0018      	movs	r0, r3
 8001160:	f000 fcae 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b00a      	add	sp, #40	@ 0x28
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000204 	.word	0x20000204

08001170 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	@ 0x30
 8001174:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001176:	231c      	movs	r3, #28
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	0018      	movs	r0, r3
 800117c:	2314      	movs	r3, #20
 800117e:	001a      	movs	r2, r3
 8001180:	2100      	movs	r1, #0
 8001182:	f006 fc77 	bl	8007a74 <memset>
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001186:	230c      	movs	r3, #12
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	0018      	movs	r0, r3
 800118c:	2310      	movs	r3, #16
 800118e:	001a      	movs	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	f006 fc6f 	bl	8007a74 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	003b      	movs	r3, r7
 8001198:	0018      	movs	r0, r3
 800119a:	230c      	movs	r3, #12
 800119c:	001a      	movs	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	f006 fc68 	bl	8007a74 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011a4:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011a6:	4a38      	ldr	r2, [pc, #224]	@ (8001288 <MX_TIM3_Init+0x118>)
 80011a8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80011aa:	4b36      	ldr	r3, [pc, #216]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80011b6:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011b8:	4a34      	ldr	r2, [pc, #208]	@ (800128c <MX_TIM3_Init+0x11c>)
 80011ba:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f004 f910 	bl	80053f0 <HAL_TIM_IC_Init>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80011d4:	f000 f9f4 	bl	80015c0 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011d8:	211c      	movs	r1, #28
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2204      	movs	r2, #4
 80011de:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2260      	movs	r2, #96	@ 0x60
 80011e4:	605a      	str	r2, [r3, #4]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
	sSlaveConfig.TriggerFilter = 0;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011f8:	187a      	adds	r2, r7, r1
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_TIM3_Init+0x114>)
 80011fc:	0011      	movs	r1, r2
 80011fe:	0018      	movs	r0, r3
 8001200:	f004 fd24 	bl	8005c4c <HAL_TIM_SlaveConfigSynchro>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001208:	f000 f9da 	bl	80015c0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800120c:	210c      	movs	r1, #12
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2202      	movs	r2, #2
 8001212:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2202      	movs	r2, #2
 8001218:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001226:	1879      	adds	r1, r7, r1
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_TIM3_Init+0x114>)
 800122a:	2200      	movs	r2, #0
 800122c:	0018      	movs	r0, r3
 800122e:	f004 fa3f 	bl	80056b0 <HAL_TIM_IC_ConfigChannel>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0xca>
	{
		Error_Handler();
 8001236:	f000 f9c3 	bl	80015c0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800123a:	210c      	movs	r1, #12
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2201      	movs	r2, #1
 8001246:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001248:	1879      	adds	r1, r7, r1
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_TIM3_Init+0x114>)
 800124c:	2204      	movs	r2, #4
 800124e:	0018      	movs	r0, r3
 8001250:	f004 fa2e 	bl	80056b0 <HAL_TIM_IC_ConfigChannel>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_TIM3_Init+0xec>
	{
		Error_Handler();
 8001258:	f000 f9b2 	bl	80015c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	003b      	movs	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	003b      	movs	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001268:	003a      	movs	r2, r7
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_TIM3_Init+0x114>)
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f005 fb0a 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x10c>
	{
		Error_Handler();
 8001278:	f000 f9a2 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b00c      	add	sp, #48	@ 0x30
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000250 	.word	0x20000250
 8001288:	40000400 	.word	0x40000400
 800128c:	0000ffff 	.word	0x0000ffff

08001290 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	0018      	movs	r0, r3
 800129a:	230c      	movs	r3, #12
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f006 fbe8 	bl	8007a74 <memset>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <MX_TIM6_Init+0x70>)
 80012a8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012b8:	22fa      	movs	r2, #250	@ 0xfa
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012c4:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f003 fe9c 	bl	8005004 <HAL_TIM_Base_Init>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM6_Init+0x44>
	{
		Error_Handler();
 80012d0:	f000 f976 	bl	80015c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2220      	movs	r2, #32
 80012d8:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012e0:	1d3a      	adds	r2, r7, #4
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_TIM6_Init+0x6c>)
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f005 face 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM6_Init+0x64>
	{
		Error_Handler();
 80012f0:	f000 f966 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000029c 	.word	0x2000029c
 8001300:	40001000 	.word	0x40001000

08001304 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_IC_InitTypeDef sConfigIC = {0};
 800130a:	003b      	movs	r3, r7
 800130c:	0018      	movs	r0, r3
 800130e:	2310      	movs	r3, #16
 8001310:	001a      	movs	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	f006 fbae 	bl	8007a74 <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <MX_TIM16_Init+0x94>)
 800131a:	4a20      	ldr	r2, [pc, #128]	@ (800139c <MX_TIM16_Init+0x98>)
 800131c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 0;
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <MX_TIM16_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <MX_TIM16_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 800132a:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <MX_TIM16_Init+0x94>)
 800132c:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <MX_TIM16_Init+0x9c>)
 800132e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <MX_TIM16_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <MX_TIM16_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <MX_TIM16_Init+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_TIM16_Init+0x94>)
 8001344:	0018      	movs	r0, r3
 8001346:	f003 fe5d 	bl	8005004 <HAL_TIM_Base_Init>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM16_Init+0x4e>
	{
		Error_Handler();
 800134e:	f000 f937 	bl	80015c0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_TIM16_Init+0x94>)
 8001354:	0018      	movs	r0, r3
 8001356:	f004 f84b 	bl	80053f0 <HAL_TIM_IC_Init>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM16_Init+0x5e>
	{
		Error_Handler();
 800135e:	f000 f92f 	bl	80015c0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001362:	003b      	movs	r3, r7
 8001364:	220a      	movs	r2, #10
 8001366:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001368:	003b      	movs	r3, r7
 800136a:	2201      	movs	r2, #1
 800136c:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800136e:	003b      	movs	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8001374:	003b      	movs	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800137a:	0039      	movs	r1, r7
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_TIM16_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	0018      	movs	r0, r3
 8001382:	f004 f995 	bl	80056b0 <HAL_TIM_IC_ConfigChannel>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <MX_TIM16_Init+0x8a>
	{
		Error_Handler();
 800138a:	f000 f919 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	200002e8 	.word	0x200002e8
 800139c:	40014400 	.word	0x40014400
 80013a0:	0000ffff 	.word	0x0000ffff

080013a4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013aa:	4a24      	ldr	r2, [pc, #144]	@ (800143c <MX_USART2_UART_Init+0x98>)
 80013ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013b0:	22e1      	movs	r2, #225	@ 0xe1
 80013b2:	0252      	lsls	r2, r2, #9
 80013b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013ee:	0018      	movs	r0, r3
 80013f0:	f005 fc18 	bl	8006c24 <HAL_UART_Init>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80013f8:	f000 f8e2 	bl	80015c0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013fe:	2100      	movs	r1, #0
 8001400:	0018      	movs	r0, r3
 8001402:	f006 fa35 	bl	8007870 <HAL_UARTEx_SetTxFifoThreshold>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 800140a:	f000 f8d9 	bl	80015c0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 8001410:	2100      	movs	r1, #0
 8001412:	0018      	movs	r0, r3
 8001414:	f006 fa6c 	bl	80078f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 800141c:	f000 f8d0 	bl	80015c0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 8001422:	0018      	movs	r0, r3
 8001424:	f006 f9ea 	bl	80077fc <HAL_UARTEx_DisableFifoMode>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 800142c:	f000 f8c8 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000334 	.word	0x20000334
 800143c:	40004400 	.word	0x40004400

08001440 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <MX_DMA_Init+0x28>)
 8001448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_DMA_Init+0x28>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	639a      	str	r2, [r3, #56]	@ 0x38
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <MX_DMA_Init+0x28>)
 8001454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001456:	2201      	movs	r2, #1
 8001458:	4013      	ands	r3, r2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	40021000 	.word	0x40021000

0800146c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	240c      	movs	r4, #12
 8001474:	193b      	adds	r3, r7, r4
 8001476:	0018      	movs	r0, r3
 8001478:	2314      	movs	r3, #20
 800147a:	001a      	movs	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	f006 faf9 	bl	8007a74 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b4c      	ldr	r3, [pc, #304]	@ (80015b4 <MX_GPIO_Init+0x148>)
 8001484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001486:	4b4b      	ldr	r3, [pc, #300]	@ (80015b4 <MX_GPIO_Init+0x148>)
 8001488:	2102      	movs	r1, #2
 800148a:	430a      	orrs	r2, r1
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
 800148e:	4b49      	ldr	r3, [pc, #292]	@ (80015b4 <MX_GPIO_Init+0x148>)
 8001490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <MX_GPIO_Init+0x148>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149e:	4b45      	ldr	r3, [pc, #276]	@ (80015b4 <MX_GPIO_Init+0x148>)
 80014a0:	2104      	movs	r1, #4
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a6:	4b43      	ldr	r3, [pc, #268]	@ (80015b4 <MX_GPIO_Init+0x148>)
 80014a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014aa:	2204      	movs	r2, #4
 80014ac:	4013      	ands	r3, r2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <MX_GPIO_Init+0x148>)
 80014b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014b6:	4b3f      	ldr	r3, [pc, #252]	@ (80015b4 <MX_GPIO_Init+0x148>)
 80014b8:	2101      	movs	r1, #1
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014be:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <MX_GPIO_Init+0x148>)
 80014c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c2:	2201      	movs	r2, #1
 80014c4:	4013      	ands	r3, r2
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	483a      	ldr	r0, [pc, #232]	@ (80015b8 <MX_GPIO_Init+0x14c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	0019      	movs	r1, r3
 80014d4:	f002 fe95 	bl	8004202 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 80014d8:	23a0      	movs	r3, #160	@ 0xa0
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	2200      	movs	r2, #0
 80014de:	2180      	movs	r1, #128	@ 0x80
 80014e0:	0018      	movs	r0, r3
 80014e2:	f002 fe8e 	bl	8004202 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 80014e6:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <MX_GPIO_Init+0x150>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	2140      	movs	r1, #64	@ 0x40
 80014ec:	0018      	movs	r0, r3
 80014ee:	f002 fe88 	bl	8004202 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : MCU_Remote_Pin */
	GPIO_InitStruct.Pin = MCU_Remote_Pin;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	193b      	adds	r3, r7, r4
 8001502:	2201      	movs	r2, #1
 8001504:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 8001506:	193b      	adds	r3, r7, r4
 8001508:	4a2c      	ldr	r2, [pc, #176]	@ (80015bc <MX_GPIO_Init+0x150>)
 800150a:	0019      	movs	r1, r3
 800150c:	0010      	movs	r0, r2
 800150e:	f002 fcf7 	bl	8003f00 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001512:	0021      	movs	r1, r4
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2280      	movs	r2, #128	@ 0x80
 8001518:	0212      	lsls	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	000c      	movs	r4, r1
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2201      	movs	r2, #1
 8001522:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	193b      	adds	r3, r7, r4
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	193b      	adds	r3, r7, r4
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001530:	193b      	adds	r3, r7, r4
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <MX_GPIO_Init+0x14c>)
 8001534:	0019      	movs	r1, r3
 8001536:	0010      	movs	r0, r2
 8001538:	f002 fce2 	bl	8003f00 <HAL_GPIO_Init>

	/*Configure GPIO pin : Status_Pin */
	GPIO_InitStruct.Pin = Status_Pin;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	193b      	adds	r3, r7, r4
 8001544:	2201      	movs	r2, #1
 8001546:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	193b      	adds	r3, r7, r4
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	193b      	adds	r3, r7, r4
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 8001554:	193a      	adds	r2, r7, r4
 8001556:	23a0      	movs	r3, #160	@ 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f002 fccf 	bl	8003f00 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
	GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 8001562:	193b      	adds	r3, r7, r4
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	193b      	adds	r3, r7, r4
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001576:	193a      	adds	r2, r7, r4
 8001578:	23a0      	movs	r3, #160	@ 0xa0
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	0011      	movs	r1, r2
 800157e:	0018      	movs	r0, r3
 8001580:	f002 fcbe 	bl	8003f00 <HAL_GPIO_Init>

	/*Configure GPIO pin : UV_LED_Pin */
	GPIO_InitStruct.Pin = UV_LED_Pin;
 8001584:	0021      	movs	r1, r4
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2240      	movs	r2, #64	@ 0x40
 800158a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2201      	movs	r2, #1
 8001590:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <MX_GPIO_Init+0x150>)
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f002 fcab 	bl	8003f00 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b009      	add	sp, #36	@ 0x24
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000
 80015b8:	50000800 	.word	0x50000800
 80015bc:	50000400 	.word	0x50000400

080015c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <Error_Handler+0x24>)
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f002 fe33 	bl	800423c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80015d6:	23fa      	movs	r3, #250	@ 0xfa
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 fcd0 	bl	8001f80 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	e7f1      	b.n	80015c8 <Error_Handler+0x8>
 80015e4:	50000800 	.word	0x50000800

080015e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <HAL_MspInit+0x44>)
 80015f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_MspInit+0x44>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <HAL_MspInit+0x44>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_MspInit+0x44>)
 8001608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <HAL_MspInit+0x44>)
 800160c:	2180      	movs	r1, #128	@ 0x80
 800160e:	0549      	lsls	r1, r1, #21
 8001610:	430a      	orrs	r2, r1
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_MspInit+0x44>)
 8001616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	055b      	lsls	r3, r3, #21
 800161c:	4013      	ands	r3, r2
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b099      	sub	sp, #100	@ 0x64
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	234c      	movs	r3, #76	@ 0x4c
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	0018      	movs	r0, r3
 800163e:	2314      	movs	r3, #20
 8001640:	001a      	movs	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	f006 fa16 	bl	8007a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	2418      	movs	r4, #24
 800164a:	193b      	adds	r3, r7, r4
 800164c:	0018      	movs	r0, r3
 800164e:	2334      	movs	r3, #52	@ 0x34
 8001650:	001a      	movs	r2, r3
 8001652:	2100      	movs	r1, #0
 8001654:	f006 fa0e 	bl	8007a74 <memset>
  if(hadc->Instance==ADC1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a43      	ldr	r2, [pc, #268]	@ (800176c <HAL_ADC_MspInit+0x13c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d000      	beq.n	8001664 <HAL_ADC_MspInit+0x34>
 8001662:	e07f      	b.n	8001764 <HAL_ADC_MspInit+0x134>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001664:	193b      	adds	r3, r7, r4
 8001666:	2280      	movs	r2, #128	@ 0x80
 8001668:	01d2      	lsls	r2, r2, #7
 800166a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800166c:	193b      	adds	r3, r7, r4
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001672:	193b      	adds	r3, r7, r4
 8001674:	0018      	movs	r0, r3
 8001676:	f003 fb0d 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800167e:	f7ff ff9f 	bl	80015c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 8001684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001686:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 8001688:	2180      	movs	r1, #128	@ 0x80
 800168a:	0349      	lsls	r1, r1, #13
 800168c:	430a      	orrs	r2, r1
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001690:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 8001692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	035b      	lsls	r3, r3, #13
 8001698:	4013      	ands	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a2:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 80016ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 80016b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 80016bc:	2102      	movs	r1, #2
 80016be:	430a      	orrs	r2, r1
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_ADC_MspInit+0x140>)
 80016c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 80016ce:	244c      	movs	r4, #76	@ 0x4c
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	220b      	movs	r2, #11
 80016d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2203      	movs	r2, #3
 80016da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	193a      	adds	r2, r7, r4
 80016e4:	23a0      	movs	r3, #160	@ 0xa0
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f002 fc08 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2207      	movs	r2, #7
 80016f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	2203      	movs	r2, #3
 80016fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	193b      	adds	r3, r7, r4
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_ADC_MspInit+0x144>)
 8001706:	0019      	movs	r1, r3
 8001708:	0010      	movs	r0, r2
 800170a:	f002 fbf9 	bl	8003f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001710:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <HAL_ADC_MspInit+0x14c>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001716:	2205      	movs	r2, #5
 8001718:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	0052      	lsls	r2, r2, #1
 8001732:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001734:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001736:	2280      	movs	r2, #128	@ 0x80
 8001738:	00d2      	lsls	r2, r2, #3
 800173a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 800173e:	2220      	movs	r2, #32
 8001740:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 800174a:	0018      	movs	r0, r3
 800174c:	f002 f986 	bl	8003a5c <HAL_DMA_Init>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001754:	f7ff ff34 	bl	80015c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 800175c:	651a      	str	r2, [r3, #80]	@ 0x50
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_ADC_MspInit+0x148>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b019      	add	sp, #100	@ 0x64
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	40012400 	.word	0x40012400
 8001770:	40021000 	.word	0x40021000
 8001774:	50000400 	.word	0x50000400
 8001778:	20000118 	.word	0x20000118
 800177c:	40020008 	.word	0x40020008

08001780 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	240c      	movs	r4, #12
 800178a:	193b      	adds	r3, r7, r4
 800178c:	0018      	movs	r0, r3
 800178e:	2314      	movs	r3, #20
 8001790:	001a      	movs	r2, r3
 8001792:	2100      	movs	r1, #0
 8001794:	f006 f96e 	bl	8007a74 <memset>
  if(hcomp->Instance==COMP2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_COMP_MspInit+0x60>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d11a      	bne.n	80017d8 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_COMP_MspInit+0x64>)
 80017a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_COMP_MspInit+0x64>)
 80017a8:	2102      	movs	r1, #2
 80017aa:	430a      	orrs	r2, r1
 80017ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_COMP_MspInit+0x64>)
 80017b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	2210      	movs	r2, #16
 80017be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	2203      	movs	r2, #3
 80017c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <HAL_COMP_MspInit+0x68>)
 80017d0:	0019      	movs	r1, r3
 80017d2:	0010      	movs	r0, r2
 80017d4:	f002 fb94 	bl	8003f00 <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 80017d8:	46c0      	nop			@ (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b009      	add	sp, #36	@ 0x24
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	40010204 	.word	0x40010204
 80017e4:	40021000 	.word	0x40021000
 80017e8:	50000400 	.word	0x50000400

080017ec <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08b      	sub	sp, #44	@ 0x2c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	2414      	movs	r4, #20
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f006 f938 	bl	8007a74 <memset>
  if(hdac->Instance==DAC1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <HAL_DAC_MspInit+0x80>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d129      	bne.n	8001862 <HAL_DAC_MspInit+0x76>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_DAC_MspInit+0x84>)
 8001810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <HAL_DAC_MspInit+0x84>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0589      	lsls	r1, r1, #22
 8001818:	430a      	orrs	r2, r1
 800181a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <HAL_DAC_MspInit+0x84>)
 800181e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	059b      	lsls	r3, r3, #22
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_DAC_MspInit+0x84>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_DAC_MspInit+0x84>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_DAC_MspInit+0x84>)
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Ilevel_DAC_Pin|DAC2_Pin;
 8001842:	193b      	adds	r3, r7, r4
 8001844:	2230      	movs	r2, #48	@ 0x30
 8001846:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	193b      	adds	r3, r7, r4
 800184a:	2203      	movs	r2, #3
 800184c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	193a      	adds	r2, r7, r4
 8001856:	23a0      	movs	r3, #160	@ 0xa0
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f002 fb4f 	bl	8003f00 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b00b      	add	sp, #44	@ 0x2c
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40007400 	.word	0x40007400
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b099      	sub	sp, #100	@ 0x64
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	234c      	movs	r3, #76	@ 0x4c
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	0018      	movs	r0, r3
 8001882:	2314      	movs	r3, #20
 8001884:	001a      	movs	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	f006 f8f4 	bl	8007a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188c:	2418      	movs	r4, #24
 800188e:	193b      	adds	r3, r7, r4
 8001890:	0018      	movs	r0, r3
 8001892:	2334      	movs	r3, #52	@ 0x34
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f006 f8ec 	bl	8007a74 <memset>
  if(htim_pwm->Instance==TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001954 <HAL_TIM_PWM_MspInit+0xe0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d140      	bne.n	8001928 <HAL_TIM_PWM_MspInit+0xb4>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	0392      	lsls	r2, r2, #14
 80018ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	0018      	movs	r0, r3
 80018b8:	f003 f9ec 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 80018c0:	f7ff fe7e 	bl	80015c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c4:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 80018c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	0109      	lsls	r1, r1, #4
 80018ce:	430a      	orrs	r2, r1
 80018d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 80018d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 80018e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 80018ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018f8:	214c      	movs	r1, #76	@ 0x4c
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2240      	movs	r2, #64	@ 0x40
 80018fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2212      	movs	r2, #18
 8001904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2201      	movs	r2, #1
 800190a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2202      	movs	r2, #2
 8001916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	187a      	adds	r2, r7, r1
 800191a:	23a0      	movs	r3, #160	@ 0xa0
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f002 faed 	bl	8003f00 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001926:	e011      	b.n	800194c <HAL_TIM_PWM_MspInit+0xd8>
  else if(htim_pwm->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	05db      	lsls	r3, r3, #23
 8001930:	429a      	cmp	r2, r3
 8001932:	d10b      	bne.n	800194c <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 8001936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_TIM_PWM_MspInit+0xe4>)
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b019      	add	sp, #100	@ 0x64
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b08b      	sub	sp, #44	@ 0x2c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	2414      	movs	r4, #20
 8001966:	193b      	adds	r3, r7, r4
 8001968:	0018      	movs	r0, r3
 800196a:	2314      	movs	r3, #20
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f006 f880 	bl	8007a74 <memset>
  if(htim_ic->Instance==TIM3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_TIM_IC_MspInit+0x88>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12d      	bne.n	80019da <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001984:	2102      	movs	r1, #2
 8001986:	430a      	orrs	r2, r1
 8001988:	63da      	str	r2, [r3, #60]	@ 0x3c
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <HAL_TIM_IC_MspInit+0x8c>)
 800198c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199a:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_TIM_IC_MspInit+0x8c>)
 800199c:	2102      	movs	r1, #2
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_TIM_IC_MspInit+0x8c>)
 80019a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a6:	2202      	movs	r2, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_Mask_Pin;
 80019ae:	0021      	movs	r1, r4
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2220      	movs	r2, #32
 80019b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2202      	movs	r2, #2
 80019ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2201      	movs	r2, #1
 80019cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_Mask_GPIO_Port, &GPIO_InitStruct);
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <HAL_TIM_IC_MspInit+0x90>)
 80019d2:	0019      	movs	r1, r3
 80019d4:	0010      	movs	r0, r2
 80019d6:	f002 fa93 	bl	8003f00 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b00b      	add	sp, #44	@ 0x2c
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	50000400 	.word	0x50000400

080019f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	2314      	movs	r3, #20
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	0018      	movs	r0, r3
 80019fe:	2314      	movs	r3, #20
 8001a00:	001a      	movs	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	f006 f836 	bl	8007a74 <memset>
  if(htim_base->Instance==TIM6)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a28      	ldr	r2, [pc, #160]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a12:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a16:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a18:	2110      	movs	r1, #16
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a22:	2210      	movs	r2, #16
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a2a:	e03d      	b.n	8001aa8 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM16)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a21      	ldr	r2, [pc, #132]	@ (8001ab8 <HAL_TIM_Base_MspInit+0xc8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d138      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	0289      	lsls	r1, r1, #10
 8001a40:	430a      	orrs	r2, r1
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a58:	2102      	movs	r1, #2
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a6a:	2114      	movs	r1, #20
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	0052      	lsls	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2202      	movs	r2, #2
 8001a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2202      	movs	r2, #2
 8001a8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_TIM_Base_MspInit+0xcc>)
 8001a90:	0019      	movs	r1, r3
 8001a92:	0010      	movs	r0, r2
 8001a94:	f002 fa34 	bl	8003f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2015      	movs	r0, #21
 8001a9e:	f001 fd6d 	bl	800357c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001aa2:	2015      	movs	r0, #21
 8001aa4:	f001 fd7f 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b00a      	add	sp, #40	@ 0x28
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40001000 	.word	0x40001000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40014400 	.word	0x40014400
 8001abc:	50000400 	.word	0x50000400

08001ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08b      	sub	sp, #44	@ 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	2414      	movs	r4, #20
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	0018      	movs	r0, r3
 8001ace:	2314      	movs	r3, #20
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f005 ffce 	bl	8007a74 <memset>
  if(htim->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <HAL_TIM_MspPostInit+0xc4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d124      	bne.n	8001b2c <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b29      	ldr	r3, [pc, #164]	@ (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aee:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	0052      	lsls	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	0021      	movs	r1, r4
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2202      	movs	r2, #2
 8001b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2203      	movs	r2, #3
 8001b14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2202      	movs	r2, #2
 8001b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	187a      	adds	r2, r7, r1
 8001b1e:	23a0      	movs	r3, #160	@ 0xa0
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f002 f9eb 	bl	8003f00 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b2a:	e027      	b.n	8001b7c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	05db      	lsls	r3, r3, #23
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d121      	bne.n	8001b7c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001b3e:	2104      	movs	r1, #4
 8001b40:	430a      	orrs	r2, r1
 8001b42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001b50:	2114      	movs	r1, #20
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2240      	movs	r2, #64	@ 0x40
 8001b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	4a06      	ldr	r2, [pc, #24]	@ (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001b74:	0019      	movs	r1, r3
 8001b76:	0010      	movs	r0, r2
 8001b78:	f002 f9c2 	bl	8003f00 <HAL_GPIO_Init>
}
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b00b      	add	sp, #44	@ 0x2c
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	50000800 	.word	0x50000800

08001b90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b097      	sub	sp, #92	@ 0x5c
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	2344      	movs	r3, #68	@ 0x44
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f005 ff66 	bl	8007a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	2410      	movs	r4, #16
 8001baa:	193b      	adds	r3, r7, r4
 8001bac:	0018      	movs	r0, r3
 8001bae:	2334      	movs	r3, #52	@ 0x34
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f005 ff5e 	bl	8007a74 <memset>
  if(huart->Instance==USART2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <HAL_UART_MspInit+0xb8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d13e      	bne.n	8001c40 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bce:	193b      	adds	r3, r7, r4
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f003 f85f 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bda:	f7ff fcf1 	bl	80015c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_UART_MspInit+0xbc>)
 8001be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001be2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <HAL_UART_MspInit+0xbc>)
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	0289      	lsls	r1, r1, #10
 8001be8:	430a      	orrs	r2, r1
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_UART_MspInit+0xbc>)
 8001bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_UART_MspInit+0xbc>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <HAL_UART_MspInit+0xbc>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_UART_MspInit+0xbc>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001c12:	2144      	movs	r1, #68	@ 0x44
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_UART_MspInit+0xc0>)
 8001c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	187a      	adds	r2, r7, r1
 8001c34:	23a0      	movs	r3, #160	@ 0xa0
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f002 f960 	bl	8003f00 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c40:	46c0      	nop			@ (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b017      	add	sp, #92	@ 0x5c
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	00008004 	.word	0x00008004

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	46c0      	nop			@ (mov r8, r8)
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 f964 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <DMA1_Channel1_IRQHandler+0x50>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f001 fff4 	bl	8003c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
	adc_24V = adc_buffer[0]; // 4095 = 36.3 V
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x54>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <DMA1_Channel1_IRQHandler+0x58>)
 8001c9c:	801a      	strh	r2, [r3, #0]
	adc_tempMOSFET = adc_buffer[1]; // 2482 = 2V = 90°C
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x54>)
 8001ca0:	885b      	ldrh	r3, [r3, #2]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <DMA1_Channel1_IRQHandler+0x5c>)
 8001ca6:	801a      	strh	r2, [r3, #0]
	adc_uSenseLamp = adc_buffer[2];
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x54>)
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <DMA1_Channel1_IRQHandler+0x60>)
 8001cb0:	801a      	strh	r2, [r3, #0]
	adc_iSenseLamp = adc_buffer[3];
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x54>)
 8001cb4:	88db      	ldrh	r3, [r3, #6]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <DMA1_Channel1_IRQHandler+0x64>)
 8001cba:	801a      	strh	r2, [r3, #0]
	adc_lampIntensity = adc_buffer[4];
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x54>)
 8001cbe:	891b      	ldrh	r3, [r3, #8]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <DMA1_Channel1_IRQHandler+0x68>)
 8001cc4:	801a      	strh	r2, [r3, #0]
	adc_iSenseIn = adc_buffer[5]; // 2707 = 24V,  4095 = 0.825 A
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <DMA1_Channel1_IRQHandler+0x54>)
 8001cc8:	895b      	ldrh	r3, [r3, #10]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <DMA1_Channel1_IRQHandler+0x6c>)
 8001cce:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cd0:	46c0      	nop			@ (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	20000118 	.word	0x20000118
 8001cdc:	2000009c 	.word	0x2000009c
 8001ce0:	200000a8 	.word	0x200000a8
 8001ce4:	200000aa 	.word	0x200000aa
 8001ce8:	200000ac 	.word	0x200000ac
 8001cec:	200000ae 	.word	0x200000ae
 8001cf0:	200000b0 	.word	0x200000b0
 8001cf4:	200000b2 	.word	0x200000b2

08001cf8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <ADC1_COMP_IRQHandler+0x14>)
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 fcec 	bl	80026dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	200000b4 	.word	0x200000b4

08001d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <TIM3_IRQHandler+0x14>)
 8001d16:	0018      	movs	r0, r3
 8001d18:	f003 fbc2 	bl	80054a0 <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	20000250 	.word	0x20000250

08001d28 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f003 fbb6 	bl	80054a0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 8001d36:	0018      	movs	r0, r3
 8001d38:	f001 fccc 	bl	80036d4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	23fa      	movs	r3, #250	@ 0xfa
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d206      	bcs.n	8001d5c <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001d58:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001d5a:	e00b      	b.n	8001d74 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	23fa      	movs	r3, #250	@ 0xfa
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d305      	bcc.n	8001d74 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 8001d68:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	2000029c 	.word	0x2000029c
 8001d80:	200001a4 	.word	0x200001a4
 8001d84:	20000099 	.word	0x20000099
 8001d88:	200003ce 	.word	0x200003ce
 8001d8c:	2000009a 	.word	0x2000009a

08001d90 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <TIM16_IRQHandler+0x14>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f003 fb82 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	200002e8 	.word	0x200002e8

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f005 fe54 	bl	8007a84 <__errno>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	425b      	negs	r3, r3
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	18d2      	adds	r2, r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <_sbrk+0x64>)
 8001df8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b006      	add	sp, #24
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20009000 	.word	0x20009000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	200003d0 	.word	0x200003d0
 8001e10:	20000520 	.word	0x20000520

08001e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	46c0      	nop			@ (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e20:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e24:	f7ff fff6 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2a:	490d      	ldr	r1, [pc, #52]	@ (8001e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <LoopForever+0xe>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e40:	4c0a      	ldr	r4, [pc, #40]	@ (8001e6c <LoopForever+0x16>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e4e:	f005 fe1f 	bl	8007a90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e52:	f7fe fc21 	bl	8000698 <main>

08001e56 <LoopForever>:

LoopForever:
  b LoopForever
 8001e56:	e7fe      	b.n	8001e56 <LoopForever>
  ldr   r0, =_estack
 8001e58:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e64:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 8001e68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e6c:	20000520 	.word	0x20000520

08001e70 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <CEC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_Init+0x3c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_Init+0x3c>)
 8001e86:	2180      	movs	r1, #128	@ 0x80
 8001e88:	0049      	lsls	r1, r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f000 f810 	bl	8001eb4 <HAL_InitTick>
 8001e94:	1e03      	subs	r3, r0, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e98:	1dfb      	adds	r3, r7, #7
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e001      	b.n	8001ea4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fba2 	bl	80015e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	781b      	ldrb	r3, [r3, #0]
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40022000 	.word	0x40022000

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_InitTick+0x88>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02b      	beq.n	8001f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_InitTick+0x8c>)
 8001ece:	681c      	ldr	r4, [r3, #0]
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_InitTick+0x88>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	23fa      	movs	r3, #250	@ 0xfa
 8001ed8:	0098      	lsls	r0, r3, #2
 8001eda:	f7fe f91d 	bl	8000118 <__udivsi3>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	f7fe f918 	bl	8000118 <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	0018      	movs	r0, r3
 8001eec:	f001 fb6b 	bl	80035c6 <HAL_SYSTICK_Config>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d112      	bne.n	8001f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d80a      	bhi.n	8001f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	2301      	movs	r3, #1
 8001efe:	425b      	negs	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	0018      	movs	r0, r3
 8001f04:	f001 fb3a 	bl	800357c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_InitTick+0x90>)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e00d      	b.n	8001f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	230f      	movs	r3, #15
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e008      	b.n	8001f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e003      	b.n	8001f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f24:	230f      	movs	r3, #15
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781b      	ldrb	r3, [r3, #0]
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b005      	add	sp, #20
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	20000024 	.word	0x20000024
 8001f40:	2000001c 	.word	0x2000001c
 8001f44:	20000020 	.word	0x20000020

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	001a      	movs	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	18d2      	adds	r2, r2, r3
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	601a      	str	r2, [r3, #0]
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	20000024 	.word	0x20000024
 8001f68:	200003d4 	.word	0x200003d4

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	@ (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	200003d4 	.word	0x200003d4

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	f7ff ffe0 	bl	8001f6c <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	20000024 	.word	0x20000024

08001fc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001fd8:	401a      	ands	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	fe3fffff 	.word	0xfe3fffff

08001ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	23e0      	movs	r3, #224	@ 0xe0
 8001ffe:	045b      	lsls	r3, r3, #17
 8002000:	4013      	ands	r3, r2
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}

0800200a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	2104      	movs	r1, #4
 800201e:	400a      	ands	r2, r1
 8002020:	2107      	movs	r1, #7
 8002022:	4091      	lsls	r1, r2
 8002024:	000a      	movs	r2, r1
 8002026:	43d2      	mvns	r2, r2
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2104      	movs	r1, #4
 800202e:	400b      	ands	r3, r1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4099      	lsls	r1, r3
 8002034:	000b      	movs	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}

08002044 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	2104      	movs	r1, #4
 8002056:	400a      	ands	r2, r1
 8002058:	2107      	movs	r1, #7
 800205a:	4091      	lsls	r1, r2
 800205c:	000a      	movs	r2, r1
 800205e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2104      	movs	r1, #4
 8002064:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002066:	40da      	lsrs	r2, r3
 8002068:	0013      	movs	r3, r2
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}

08002072 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	23c0      	movs	r3, #192	@ 0xc0
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4013      	ands	r3, r2
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	211f      	movs	r1, #31
 80020a8:	400a      	ands	r2, r1
 80020aa:	210f      	movs	r1, #15
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	43d2      	mvns	r2, r2
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	210f      	movs	r1, #15
 80020ba:	4019      	ands	r1, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	201f      	movs	r0, #31
 80020c0:	4003      	ands	r3, r0
 80020c2:	4099      	lsls	r1, r3
 80020c4:	000b      	movs	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	035b      	lsls	r3, r3, #13
 80020e6:	0b5b      	lsrs	r3, r3, #13
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	0352      	lsls	r2, r2, #13
 8002108:	0b52      	lsrs	r2, r2, #13
 800210a:	43d2      	mvns	r2, r2
 800210c:	401a      	ands	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}

0800211a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2203      	movs	r2, #3
 8002128:	4013      	ands	r3, r2
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b002      	add	sp, #8
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	0212      	lsls	r2, r2, #8
 8002148:	43d2      	mvns	r2, r2
 800214a:	401a      	ands	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	400b      	ands	r3, r1
 8002154:	4904      	ldr	r1, [pc, #16]	@ (8002168 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002156:	400b      	ands	r3, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	07ffff00 	.word	0x07ffff00

0800216c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <LL_ADC_EnableInternalRegulator+0x24>)
 800217a:	4013      	ands	r3, r2
 800217c:	2280      	movs	r2, #128	@ 0x80
 800217e:	0552      	lsls	r2, r2, #21
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b002      	add	sp, #8
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	6fffffe8 	.word	0x6fffffe8

08002194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	055b      	lsls	r3, r3, #21
 80021a4:	401a      	ands	r2, r3
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <LL_ADC_Enable+0x20>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	2201      	movs	r2, #1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021d4:	46c0      	nop			@ (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	7fffffe8 	.word	0x7fffffe8

080021e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <LL_ADC_Disable+0x20>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	2202      	movs	r2, #2
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	7fffffe8 	.word	0x7fffffe8

08002204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <LL_ADC_IsEnabled+0x18>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_ADC_IsEnabled+0x1a>
 800221c:	2300      	movs	r3, #0
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <LL_ADC_REG_StartConversion+0x20>)
 8002236:	4013      	ands	r3, r2
 8002238:	2204      	movs	r2, #4
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	7fffffe8 	.word	0x7fffffe8

0800224c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2204      	movs	r2, #4
 800225a:	4013      	ands	r3, r2
 800225c:	2b04      	cmp	r3, #4
 800225e:	d101      	bne.n	8002264 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002264:	2300      	movs	r3, #0
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b002      	add	sp, #8
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	231f      	movs	r3, #31
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e17f      	b.n	8002596 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7ff f9c5 	bl	8001630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2254      	movs	r2, #84	@ 0x54
 80022b0:	2100      	movs	r1, #0
 80022b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff ff6b 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d115      	bne.n	80022ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ff50 	bl	800216c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022cc:	4bb4      	ldr	r3, [pc, #720]	@ (80025a0 <HAL_ADC_Init+0x330>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	49b4      	ldr	r1, [pc, #720]	@ (80025a4 <HAL_ADC_Init+0x334>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fd ff20 	bl	8000118 <__udivsi3>
 80022d8:	0003      	movs	r3, r0
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff ff4e 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d10f      	bne.n	800231c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	2210      	movs	r2, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	2201      	movs	r2, #1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002314:	231f      	movs	r3, #31
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff ff93 	bl	800224c <LL_ADC_REG_IsConversionOngoing>
 8002326:	0003      	movs	r3, r0
 8002328:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	2210      	movs	r2, #16
 8002330:	4013      	ands	r3, r2
 8002332:	d000      	beq.n	8002336 <HAL_ADC_Init+0xc6>
 8002334:	e122      	b.n	800257c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d000      	beq.n	800233e <HAL_ADC_Init+0xce>
 800233c:	e11e      	b.n	800257c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	4a99      	ldr	r2, [pc, #612]	@ (80025a8 <HAL_ADC_Init+0x338>)
 8002344:	4013      	ands	r3, r2
 8002346:	2202      	movs	r2, #2
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	f7ff ff56 	bl	8002204 <LL_ADC_IsEnabled>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d000      	beq.n	800235e <HAL_ADC_Init+0xee>
 800235c:	e0ad      	b.n	80024ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7e1b      	ldrb	r3, [r3, #24]
 8002366:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002368:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7e5b      	ldrb	r3, [r3, #25]
 800236e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002370:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7e9b      	ldrb	r3, [r3, #26]
 8002376:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002378:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_ADC_Init+0x118>
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	015b      	lsls	r3, r3, #5
 8002386:	e000      	b.n	800238a <HAL_ADC_Init+0x11a>
 8002388:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800238a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002390:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da04      	bge.n	80023a4 <HAL_ADC_Init+0x134>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	e001      	b.n	80023a8 <HAL_ADC_Init+0x138>
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80023a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	212c      	movs	r1, #44	@ 0x2c
 80023ae:	5c5b      	ldrb	r3, [r3, r1]
 80023b0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023b2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d115      	bne.n	80023f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7e9b      	ldrb	r3, [r3, #26]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	0252      	lsls	r2, r2, #9
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	e00b      	b.n	80023f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	2220      	movs	r2, #32
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	2201      	movs	r2, #1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fc:	23e0      	movs	r3, #224	@ 0xe0
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002406:	4313      	orrs	r3, r2
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a65      	ldr	r2, [pc, #404]	@ (80025ac <HAL_ADC_Init+0x33c>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	430a      	orrs	r2, r1
 8002422:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0f9b      	lsrs	r3, r3, #30
 800242a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002430:	4313      	orrs	r3, r2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	223c      	movs	r2, #60	@ 0x3c
 800243c:	5c9b      	ldrb	r3, [r3, r2]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d111      	bne.n	8002466 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0f9b      	lsrs	r3, r3, #30
 8002448:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800244e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002454:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800245a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	2201      	movs	r2, #1
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <HAL_ADC_Init+0x340>)
 800246e:	4013      	ands	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	430a      	orrs	r2, r1
 800247a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	23c0      	movs	r3, #192	@ 0xc0
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	429a      	cmp	r2, r3
 8002486:	d018      	beq.n	80024ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	05db      	lsls	r3, r3, #23
 8002490:	429a      	cmp	r2, r3
 8002492:	d012      	beq.n	80024ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	429a      	cmp	r2, r3
 800249e:	d00c      	beq.n	80024ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80024a0:	4b44      	ldr	r3, [pc, #272]	@ (80025b4 <HAL_ADC_Init+0x344>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a44      	ldr	r2, [pc, #272]	@ (80025b8 <HAL_ADC_Init+0x348>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	23f0      	movs	r3, #240	@ 0xf0
 80024b0:	039b      	lsls	r3, r3, #14
 80024b2:	401a      	ands	r2, r3
 80024b4:	4b3f      	ldr	r3, [pc, #252]	@ (80025b4 <HAL_ADC_Init+0x344>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	001a      	movs	r2, r3
 80024c4:	2100      	movs	r1, #0
 80024c6:	f7ff fda0 	bl	800200a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	493a      	ldr	r1, [pc, #232]	@ (80025bc <HAL_ADC_Init+0x34c>)
 80024d4:	001a      	movs	r2, r3
 80024d6:	f7ff fd98 	bl	800200a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2110      	movs	r1, #16
 80024ee:	4249      	negs	r1, r1
 80024f0:	430a      	orrs	r2, r1
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024f4:	e018      	b.n	8002528 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	039b      	lsls	r3, r3, #14
 80024fe:	429a      	cmp	r2, r3
 8002500:	d112      	bne.n	8002528 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	3b01      	subs	r3, #1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	221c      	movs	r2, #28
 8002512:	4013      	ands	r3, r2
 8002514:	2210      	movs	r2, #16
 8002516:	4252      	negs	r2, r2
 8002518:	409a      	lsls	r2, r3
 800251a:	0011      	movs	r1, r2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2100      	movs	r1, #0
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff fd88 	bl	8002044 <LL_ADC_GetSamplingTimeCommonChannels>
 8002534:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800253a:	429a      	cmp	r2, r3
 800253c:	d10b      	bne.n	8002556 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	2203      	movs	r2, #3
 800254a:	4393      	bics	r3, r2
 800254c:	2201      	movs	r2, #1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002554:	e01c      	b.n	8002590 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	2212      	movs	r2, #18
 800255c:	4393      	bics	r3, r2
 800255e:	2210      	movs	r2, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2201      	movs	r2, #1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002572:	231f      	movs	r3, #31
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800257a:	e009      	b.n	8002590 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	2210      	movs	r2, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002588:	231f      	movs	r3, #31
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b008      	add	sp, #32
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	2000001c 	.word	0x2000001c
 80025a4:	00030d40 	.word	0x00030d40
 80025a8:	fffffefd 	.word	0xfffffefd
 80025ac:	ffde0201 	.word	0xffde0201
 80025b0:	1ffffc02 	.word	0x1ffffc02
 80025b4:	40012708 	.word	0x40012708
 80025b8:	ffc3ffff 	.word	0xffc3ffff
 80025bc:	07ffff04 	.word	0x07ffff04

080025c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff fe3b 	bl	800224c <LL_ADC_REG_IsConversionOngoing>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d16c      	bne.n	80026b4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2254      	movs	r2, #84	@ 0x54
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x28>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e06c      	b.n	80026c2 <HAL_ADC_Start_DMA+0x102>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2254      	movs	r2, #84	@ 0x54
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d113      	bne.n	8002624 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fdff 	bl	8002204 <LL_ADC_IsEnabled>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d004      	beq.n	8002614 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0018      	movs	r0, r3
 8002610:	f7ff fde6 	bl	80021e0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002624:	2517      	movs	r5, #23
 8002626:	197c      	adds	r4, r7, r5
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fb66 	bl	8002cfc <ADC_Enable>
 8002630:	0003      	movs	r3, r0
 8002632:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002634:	002c      	movs	r4, r5
 8002636:	193b      	adds	r3, r7, r4
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d13e      	bne.n	80026bc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <HAL_ADC_Start_DMA+0x10c>)
 8002644:	4013      	ands	r3, r2
 8002646:	2280      	movs	r2, #128	@ 0x80
 8002648:	0052      	lsls	r2, r2, #1
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265a:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <HAL_ADC_Start_DMA+0x110>)
 800265c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002662:	4a1c      	ldr	r2, [pc, #112]	@ (80026d4 <HAL_ADC_Start_DMA+0x114>)
 8002664:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266a:	4a1b      	ldr	r2, [pc, #108]	@ (80026d8 <HAL_ADC_Start_DMA+0x118>)
 800266c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	221c      	movs	r2, #28
 8002674:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2254      	movs	r2, #84	@ 0x54
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2110      	movs	r1, #16
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3340      	adds	r3, #64	@ 0x40
 8002698:	0019      	movs	r1, r3
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	193c      	adds	r4, r7, r4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f001 fa66 	bl	8003b70 <HAL_DMA_Start_IT>
 80026a4:	0003      	movs	r3, r0
 80026a6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff fdbb 	bl	8002228 <LL_ADC_REG_StartConversion>
 80026b2:	e003      	b.n	80026bc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026b4:	2317      	movs	r3, #23
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2202      	movs	r2, #2
 80026ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80026bc:	2317      	movs	r3, #23
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	781b      	ldrb	r3, [r3, #0]
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b006      	add	sp, #24
 80026c8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	fffff0fe 	.word	0xfffff0fe
 80026d0:	08002e09 	.word	0x08002e09
 80026d4:	08002ed1 	.word	0x08002ed1
 80026d8:	08002eef 	.word	0x08002eef

080026dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d017      	beq.n	8002730 <HAL_ADC_IRQHandler+0x54>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	2210      	movs	r2, #16
 800270e:	4013      	ands	r3, r2
 8002710:	d106      	bne.n	8002720 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fc0e 	bl	8002f44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2204      	movs	r2, #4
 8002734:	4013      	ands	r3, r2
 8002736:	d003      	beq.n	8002740 <HAL_ADC_IRQHandler+0x64>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2204      	movs	r2, #4
 800273c:	4013      	ands	r3, r2
 800273e:	d107      	bne.n	8002750 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2208      	movs	r2, #8
 8002744:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002746:	d04d      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2208      	movs	r2, #8
 800274c:	4013      	ands	r3, r2
 800274e:	d049      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	2210      	movs	r2, #16
 8002756:	4013      	ands	r3, r2
 8002758:	d106      	bne.n	8002768 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	2280      	movs	r2, #128	@ 0x80
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0018      	movs	r0, r3
 800276e:	f7ff fc80 	bl	8002072 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002772:	1e03      	subs	r3, r0, #0
 8002774:	d02e      	beq.n	80027d4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7e9b      	ldrb	r3, [r3, #26]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d12a      	bne.n	80027d4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2208      	movs	r2, #8
 8002786:	4013      	ands	r3, r2
 8002788:	2b08      	cmp	r3, #8
 800278a:	d123      	bne.n	80027d4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fd5b 	bl	800224c <LL_ADC_REG_IsConversionOngoing>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d110      	bne.n	80027bc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	210c      	movs	r1, #12
 80027a6:	438a      	bics	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	4a56      	ldr	r2, [pc, #344]	@ (8002908 <HAL_ADC_IRQHandler+0x22c>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	2201      	movs	r2, #1
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80027ba:	e00b      	b.n	80027d4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	2220      	movs	r2, #32
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	2201      	movs	r2, #1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f898 	bl	800290c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	220c      	movs	r2, #12
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2280      	movs	r2, #128	@ 0x80
 80027e8:	4013      	ands	r3, r2
 80027ea:	d012      	beq.n	8002812 <HAL_ADC_IRQHandler+0x136>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	2280      	movs	r2, #128	@ 0x80
 80027fa:	0252      	lsls	r2, r2, #9
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f891 	bl	800292c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d014      	beq.n	8002846 <HAL_ADC_IRQHandler+0x16a>
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4013      	ands	r3, r2
 8002824:	d00f      	beq.n	8002846 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	0292      	lsls	r2, r2, #10
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fb74 	bl	8002f24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2280      	movs	r2, #128	@ 0x80
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d014      	beq.n	800287a <HAL_ADC_IRQHandler+0x19e>
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4013      	ands	r3, r2
 8002858:	d00f      	beq.n	800287a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	2280      	movs	r2, #128	@ 0x80
 8002860:	02d2      	lsls	r2, r2, #11
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fb62 	bl	8002f34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2210      	movs	r2, #16
 800287e:	4013      	ands	r3, r2
 8002880:	d02b      	beq.n	80028da <HAL_ADC_IRQHandler+0x1fe>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2210      	movs	r2, #16
 8002886:	4013      	ands	r3, r2
 8002888:	d027      	beq.n	80028da <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002892:	2301      	movs	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e008      	b.n	80028aa <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff fc3c 	bl	800211a <LL_ADC_REG_GetDMATransfer>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80028a6:	2301      	movs	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d110      	bne.n	80028d2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	00d2      	lsls	r2, r2, #3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	2202      	movs	r2, #2
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f835 	bl	800293c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	019b      	lsls	r3, r3, #6
 80028e0:	4013      	ands	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_ADC_IRQHandler+0x224>
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	4013      	ands	r3, r2
 80028ec:	d008      	beq.n	8002900 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 fb2f 	bl	8002f54 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	0192      	lsls	r2, r2, #6
 80028fe:	601a      	str	r2, [r3, #0]
  }
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b006      	add	sp, #24
 8002906:	bd80      	pop	{r7, pc}
 8002908:	fffffefe 	.word	0xfffffefe

0800290c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002914:	46c0      	nop			@ (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2317      	movs	r3, #23
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2254      	movs	r2, #84	@ 0x54
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x24>
 800296c:	2302      	movs	r3, #2
 800296e:	e1c0      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x3a6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2254      	movs	r2, #84	@ 0x54
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fc65 	bl	800224c <LL_ADC_REG_IsConversionOngoing>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d000      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x3c>
 8002986:	e1a3      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d100      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x46>
 8002990:	e143      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	429a      	cmp	r2, r3
 800299c:	d004      	beq.n	80029a8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029a2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x35c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d108      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0019      	movs	r1, r3
 80029b2:	0010      	movs	r0, r2
 80029b4:	f7ff fb8e 	bl	80020d4 <LL_ADC_REG_SetSequencerChAdd>
 80029b8:	e0c9      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	211f      	movs	r1, #31
 80029c4:	400b      	ands	r3, r1
 80029c6:	210f      	movs	r1, #15
 80029c8:	4099      	lsls	r1, r3
 80029ca:	000b      	movs	r3, r1
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	035b      	lsls	r3, r3, #13
 80029d8:	0b5b      	lsrs	r3, r3, #13
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x9c>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	221f      	movs	r2, #31
 80029e4:	4013      	ands	r3, r2
 80029e6:	e098      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4013      	ands	r3, r2
 80029f0:	d000      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0xa8>
 80029f2:	e091      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1cc>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d000      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0xb4>
 80029fe:	e089      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1c8>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2204      	movs	r2, #4
 8002a06:	4013      	ands	r3, r2
 8002a08:	d000      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0xc0>
 8002a0a:	e081      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1c4>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2208      	movs	r2, #8
 8002a12:	4013      	ands	r3, r2
 8002a14:	d000      	beq.n	8002a18 <HAL_ADC_ConfigChannel+0xcc>
 8002a16:	e079      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x1c0>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d000      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0xd8>
 8002a22:	e071      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x1bc>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d000      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0xe4>
 8002a2e:	e069      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1b8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2240      	movs	r2, #64	@ 0x40
 8002a36:	4013      	ands	r3, r2
 8002a38:	d000      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0xf0>
 8002a3a:	e061      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x1b4>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2280      	movs	r2, #128	@ 0x80
 8002a42:	4013      	ands	r3, r2
 8002a44:	d000      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0xfc>
 8002a46:	e059      	b.n	8002afc <HAL_ADC_ConfigChannel+0x1b0>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d151      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1ac>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d149      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1a8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	@ 0x80
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d141      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x1a4>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	4013      	ands	r3, r2
 8002a76:	d139      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1a0>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	4013      	ands	r3, r2
 8002a82:	d131      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x19c>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	019b      	lsls	r3, r3, #6
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d129      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x198>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	01db      	lsls	r3, r3, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d121      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x194>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d119      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x190>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x18c>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	029b      	lsls	r3, r3, #10
 8002abc:	4013      	ands	r3, r2
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x188>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	02db      	lsls	r3, r3, #11
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d001      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x184>
 8002acc:	2312      	movs	r3, #18
 8002ace:	e024      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e022      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ad4:	2311      	movs	r3, #17
 8002ad6:	e020      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	e01e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002adc:	230f      	movs	r3, #15
 8002ade:	e01c      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ae0:	230e      	movs	r3, #14
 8002ae2:	e01a      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ae4:	230d      	movs	r3, #13
 8002ae6:	e018      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ae8:	230c      	movs	r3, #12
 8002aea:	e016      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002aec:	230b      	movs	r3, #11
 8002aee:	e014      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002af0:	230a      	movs	r3, #10
 8002af2:	e012      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002af4:	2309      	movs	r3, #9
 8002af6:	e010      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002af8:	2308      	movs	r3, #8
 8002afa:	e00e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002afc:	2307      	movs	r3, #7
 8002afe:	e00c      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b00:	2306      	movs	r3, #6
 8002b02:	e00a      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b04:	2305      	movs	r3, #5
 8002b06:	e008      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	e006      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e004      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e002      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1ce>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	6852      	ldr	r2, [r2, #4]
 8002b1e:	201f      	movs	r0, #31
 8002b20:	4002      	ands	r2, r0
 8002b22:	4093      	lsls	r3, r2
 8002b24:	000a      	movs	r2, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d808      	bhi.n	8002b4e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	001a      	movs	r2, r3
 8002b4a:	f7ff faa3 	bl	8002094 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	f7ff faea 	bl	8002134 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db00      	blt.n	8002b6a <HAL_ADC_ConfigChannel+0x21e>
 8002b68:	e0bc      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b6a:	4b50      	ldr	r3, [pc, #320]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff fa3f 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 8002b72:	0003      	movs	r3, r0
 8002b74:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x364>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d122      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b88:	d11d      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0412      	lsls	r2, r2, #16
 8002b90:	4313      	orrs	r3, r2
 8002b92:	4a46      	ldr	r2, [pc, #280]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002b94:	0019      	movs	r1, r3
 8002b96:	0010      	movs	r0, r2
 8002b98:	f7ff fa16 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9c:	4b45      	ldr	r3, [pc, #276]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x368>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4945      	ldr	r1, [pc, #276]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x36c>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fd fab8 	bl	8000118 <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	0013      	movs	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	189b      	adds	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bc4:	e08e      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3c      	ldr	r2, [pc, #240]	@ (8002cbc <HAL_ADC_ConfigChannel+0x370>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10e      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	045b      	lsls	r3, r3, #17
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d109      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2280      	movs	r2, #128	@ 0x80
 8002bde:	0452      	lsls	r2, r2, #17
 8002be0:	4313      	orrs	r3, r2
 8002be2:	4a32      	ldr	r2, [pc, #200]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002be4:	0019      	movs	r1, r3
 8002be6:	0010      	movs	r0, r2
 8002be8:	f7ff f9ee 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002bec:	e07a      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a33      	ldr	r2, [pc, #204]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x374>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d000      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x2ae>
 8002bf8:	e074      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	03db      	lsls	r3, r3, #15
 8002c00:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c02:	d000      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x2ba>
 8002c04:	e06e      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	03d2      	lsls	r2, r2, #15
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002c10:	0019      	movs	r1, r3
 8002c12:	0010      	movs	r0, r2
 8002c14:	f7ff f9d8 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002c18:	e064      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d004      	beq.n	8002c30 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x35c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d107      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0019      	movs	r1, r3
 8002c3a:	0010      	movs	r0, r2
 8002c3c:	f7ff fa5b 	bl	80020f6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da4d      	bge.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c48:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7ff f9d0 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 8002c50:	0003      	movs	r3, r0
 8002c52:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x364>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d108      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4a18      	ldr	r2, [pc, #96]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x378>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002c66:	0019      	movs	r1, r3
 8002c68:	0010      	movs	r0, r2
 8002c6a:	f7ff f9ad 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002c6e:	e039      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a11      	ldr	r2, [pc, #68]	@ (8002cbc <HAL_ADC_ConfigChannel+0x370>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x37c>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f7ff f99f 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002c8a:	e02b      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x374>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d126      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4a0c      	ldr	r2, [pc, #48]	@ (8002ccc <HAL_ADC_ConfigChannel+0x380>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	4a03      	ldr	r2, [pc, #12]	@ (8002cac <HAL_ADC_ConfigChannel+0x360>)
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	f7ff f991 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002ca6:	e01d      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x398>
 8002ca8:	80000004 	.word	0x80000004
 8002cac:	40012708 	.word	0x40012708
 8002cb0:	b0001000 	.word	0xb0001000
 8002cb4:	2000001c 	.word	0x2000001c
 8002cb8:	00030d40 	.word	0x00030d40
 8002cbc:	b8004000 	.word	0xb8004000
 8002cc0:	b4002000 	.word	0xb4002000
 8002cc4:	ff7fffff 	.word	0xff7fffff
 8002cc8:	feffffff 	.word	0xfeffffff
 8002ccc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cdc:	2317      	movs	r3, #23
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2254      	movs	r2, #84	@ 0x54
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002cec:	2317      	movs	r3, #23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b006      	add	sp, #24
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)

08002cfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff fa79 	bl	8002204 <LL_ADC_IsEnabled>
 8002d12:	1e03      	subs	r3, r0, #0
 8002d14:	d000      	beq.n	8002d18 <ADC_Enable+0x1c>
 8002d16:	e069      	b.n	8002dec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4a36      	ldr	r2, [pc, #216]	@ (8002df8 <ADC_Enable+0xfc>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	d00d      	beq.n	8002d40 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	2210      	movs	r2, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d34:	2201      	movs	r2, #1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e056      	b.n	8002dee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fa39 	bl	80021bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dfc <ADC_Enable+0x100>)
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff f94f 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 8002d52:	0002      	movs	r2, r0
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d00f      	beq.n	8002d7c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <ADC_Enable+0x104>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4928      	ldr	r1, [pc, #160]	@ (8002e04 <ADC_Enable+0x108>)
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd f9d8 	bl	8000118 <__udivsi3>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002d6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d6e:	e002      	b.n	8002d76 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7e5b      	ldrb	r3, [r3, #25]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d033      	beq.n	8002dec <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002d84:	f7ff f8f2 	bl	8001f6c <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d8c:	e027      	b.n	8002dde <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff fa36 	bl	8002204 <LL_ADC_IsEnabled>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d104      	bne.n	8002da6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff fa0b 	bl	80021bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002da6:	f7ff f8e1 	bl	8001f6c <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d914      	bls.n	8002dde <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d00d      	beq.n	8002dde <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e007      	b.n	8002dee <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d1d0      	bne.n	8002d8e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	80000017 	.word	0x80000017
 8002dfc:	40012708 	.word	0x40012708
 8002e00:	2000001c 	.word	0x2000001c
 8002e04:	00030d40 	.word	0x00030d40

08002e08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	2250      	movs	r2, #80	@ 0x50
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d141      	bne.n	8002ea4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff f91d 	bl	8002072 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d02e      	beq.n	8002e9a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	7e9b      	ldrb	r3, [r3, #26]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d12a      	bne.n	8002e9a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d123      	bne.n	8002e9a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7ff f9f8 	bl	800224c <LL_ADC_REG_IsConversionOngoing>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d110      	bne.n	8002e82 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	210c      	movs	r1, #12
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	4a15      	ldr	r2, [pc, #84]	@ (8002ecc <ADC_DMAConvCplt+0xc4>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	2201      	movs	r2, #1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e80:	e00b      	b.n	8002e9a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	2220      	movs	r2, #32
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	2201      	movs	r2, #1
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff fd35 	bl	800290c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ea2:	e00f      	b.n	8002ec4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff fd43 	bl	800293c <HAL_ADC_ErrorCallback>
}
 8002eb6:	e005      	b.n	8002ec4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	0010      	movs	r0, r2
 8002ec2:	4798      	blx	r3
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	fffffefe 	.word	0xfffffefe

08002ed0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fd1b 	bl	800291c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bd80      	pop	{r7, pc}

08002eee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	2240      	movs	r2, #64	@ 0x40
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff fd10 	bl	800293c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f6c:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	58d2      	ldr	r2, [r2, r3]
 8002f72:	4904      	ldr	r1, [pc, #16]	@ (8002f84 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	2280      	movs	r2, #128	@ 0x80
 8002f7a:	508b      	str	r3, [r1, r2]
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021800 	.word	0x40021800

08002f88 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f90:	4a06      	ldr	r2, [pc, #24]	@ (8002fac <LL_EXTI_DisableIT_0_31+0x24>)
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	58d3      	ldr	r3, [r2, r3]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	43d2      	mvns	r2, r2
 8002f9a:	4904      	ldr	r1, [pc, #16]	@ (8002fac <LL_EXTI_DisableIT_0_31+0x24>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	508b      	str	r3, [r1, r2]
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	40021800 	.word	0x40021800

08002fb0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002fb8:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002fba:	2384      	movs	r3, #132	@ 0x84
 8002fbc:	58d2      	ldr	r2, [r2, r3]
 8002fbe:	4904      	ldr	r1, [pc, #16]	@ (8002fd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	2284      	movs	r2, #132	@ 0x84
 8002fc6:	508b      	str	r3, [r1, r2]

}
 8002fc8:	46c0      	nop			@ (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021800 	.word	0x40021800

08002fd4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002fdc:	4a06      	ldr	r2, [pc, #24]	@ (8002ff8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002fde:	2384      	movs	r3, #132	@ 0x84
 8002fe0:	58d3      	ldr	r3, [r2, r3]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	43d2      	mvns	r2, r2
 8002fe6:	4904      	ldr	r1, [pc, #16]	@ (8002ff8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2284      	movs	r2, #132	@ 0x84
 8002fec:	508b      	str	r3, [r1, r2]
}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	40021800 	.word	0x40021800

08002ffc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021800 	.word	0x40021800

0800301c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	43d9      	mvns	r1, r3
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800302e:	400a      	ands	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	40021800 	.word	0x40021800

08003040 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021800 	.word	0x40021800

08003060 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	43d9      	mvns	r1, r3
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003072:	400a      	ands	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	40021800 	.word	0x40021800

08003084 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800308c:	4b03      	ldr	r3, [pc, #12]	@ (800309c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]
}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	40021800 	.word	0x40021800

080030a0 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80030a8:	4b03      	ldr	r3, [pc, #12]	@ (80030b8 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	40021800 	.word	0x40021800

080030bc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	211f      	movs	r1, #31
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e13d      	b.n	800335a <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0fdb      	lsrs	r3, r3, #31
 80030e6:	07da      	lsls	r2, r3, #31
 80030e8:	2380      	movs	r3, #128	@ 0x80
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d104      	bne.n	80030fa <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80030f0:	231f      	movs	r3, #31
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	e12f      	b.n	800335a <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2229      	movs	r2, #41	@ 0x29
 80030fe:	5c9b      	ldrb	r3, [r3, r2]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2228      	movs	r2, #40	@ 0x28
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f7fe fb32 	bl	8001780 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2230      	movs	r2, #48	@ 0x30
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a85      	ldr	r2, [pc, #532]	@ (8003368 <HAL_COMP_Init+0x2ac>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	429a      	cmp	r2, r3
 800316c:	d10d      	bne.n	800318a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800316e:	4b7f      	ldr	r3, [pc, #508]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b7e      	ldr	r3, [pc, #504]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003174:	497e      	ldr	r1, [pc, #504]	@ (8003370 <HAL_COMP_Init+0x2b4>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800317a:	4b7c      	ldr	r3, [pc, #496]	@ (800336c <HAL_COMP_Init+0x2b0>)
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4b7b      	ldr	r3, [pc, #492]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0109      	lsls	r1, r1, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	e01f      	b.n	80031ca <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	23c0      	movs	r3, #192	@ 0xc0
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	429a      	cmp	r2, r3
 8003194:	d10d      	bne.n	80031b2 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003196:	4b75      	ldr	r3, [pc, #468]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b74      	ldr	r3, [pc, #464]	@ (800336c <HAL_COMP_Init+0x2b0>)
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	0109      	lsls	r1, r1, #4
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80031a4:	4b71      	ldr	r3, [pc, #452]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b70      	ldr	r3, [pc, #448]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031aa:	4971      	ldr	r1, [pc, #452]	@ (8003370 <HAL_COMP_Init+0x2b4>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	e00b      	b.n	80031ca <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80031b2:	4b6e      	ldr	r3, [pc, #440]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b6d      	ldr	r3, [pc, #436]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031b8:	496d      	ldr	r1, [pc, #436]	@ (8003370 <HAL_COMP_Init+0x2b4>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80031be:	4b6b      	ldr	r3, [pc, #428]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031c4:	496a      	ldr	r1, [pc, #424]	@ (8003370 <HAL_COMP_Init+0x2b4>)
 80031c6:	400a      	ands	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	22a0      	movs	r2, #160	@ 0xa0
 80031d0:	01d2      	lsls	r2, r2, #7
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d017      	beq.n	8003206 <HAL_COMP_Init+0x14a>
 80031d6:	22a0      	movs	r2, #160	@ 0xa0
 80031d8:	01d2      	lsls	r2, r2, #7
 80031da:	4293      	cmp	r3, r2
 80031dc:	d830      	bhi.n	8003240 <HAL_COMP_Init+0x184>
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d01f      	beq.n	8003222 <HAL_COMP_Init+0x166>
 80031e2:	2280      	movs	r2, #128	@ 0x80
 80031e4:	01d2      	lsls	r2, r2, #7
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d12a      	bne.n	8003240 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031ea:	4b60      	ldr	r3, [pc, #384]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b5f      	ldr	r3, [pc, #380]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031f0:	2180      	movs	r1, #128	@ 0x80
 80031f2:	01c9      	lsls	r1, r1, #7
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031f8:	4b5c      	ldr	r3, [pc, #368]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <HAL_COMP_Init+0x2b0>)
 80031fe:	495d      	ldr	r1, [pc, #372]	@ (8003374 <HAL_COMP_Init+0x2b8>)
 8003200:	400a      	ands	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
        break;
 8003204:	e029      	b.n	800325a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003206:	4b59      	ldr	r3, [pc, #356]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_COMP_Init+0x2b0>)
 800320c:	4959      	ldr	r1, [pc, #356]	@ (8003374 <HAL_COMP_Init+0x2b8>)
 800320e:	400a      	ands	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003212:	4b56      	ldr	r3, [pc, #344]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4b55      	ldr	r3, [pc, #340]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	01c9      	lsls	r1, r1, #7
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
        break;
 8003220:	e01b      	b.n	800325a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003222:	4b52      	ldr	r3, [pc, #328]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b51      	ldr	r3, [pc, #324]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	01c9      	lsls	r1, r1, #7
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003230:	4b4e      	ldr	r3, [pc, #312]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4b4d      	ldr	r3, [pc, #308]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003236:	2180      	movs	r1, #128	@ 0x80
 8003238:	01c9      	lsls	r1, r1, #7
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
        break;
 800323e:	e00c      	b.n	800325a <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003240:	4b4a      	ldr	r3, [pc, #296]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b49      	ldr	r3, [pc, #292]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003246:	494b      	ldr	r1, [pc, #300]	@ (8003374 <HAL_COMP_Init+0x2b8>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800324c:	4b47      	ldr	r3, [pc, #284]	@ (800336c <HAL_COMP_Init+0x2b0>)
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4b46      	ldr	r3, [pc, #280]	@ (800336c <HAL_COMP_Init+0x2b0>)
 8003252:	4948      	ldr	r1, [pc, #288]	@ (8003374 <HAL_COMP_Init+0x2b8>)
 8003254:	400a      	ands	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
        break;
 8003258:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2230      	movs	r2, #48	@ 0x30
 8003262:	4013      	ands	r3, r2
 8003264:	d016      	beq.n	8003294 <HAL_COMP_Init+0x1d8>
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d113      	bne.n	8003294 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800326c:	4b42      	ldr	r3, [pc, #264]	@ (8003378 <HAL_COMP_Init+0x2bc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4942      	ldr	r1, [pc, #264]	@ (800337c <HAL_COMP_Init+0x2c0>)
 8003272:	0018      	movs	r0, r3
 8003274:	f7fc ff50 	bl	8000118 <__udivsi3>
 8003278:	0003      	movs	r3, r0
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	0013      	movs	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	189b      	adds	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003286:	e002      	b.n	800328e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3b01      	subs	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f9      	bne.n	8003288 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a34      	ldr	r2, [pc, #208]	@ (800336c <HAL_COMP_Init+0x2b0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d102      	bne.n	80032a4 <HAL_COMP_Init+0x1e8>
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	029b      	lsls	r3, r3, #10
 80032a2:	e001      	b.n	80032a8 <HAL_COMP_Init+0x1ec>
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	02db      	lsls	r3, r3, #11
 80032a8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	2203      	movs	r2, #3
 80032b0:	4013      	ands	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2210      	movs	r2, #16
 80032ba:	4013      	ands	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff fe9b 	bl	8002ffc <LL_EXTI_EnableRisingTrig_0_31>
 80032c6:	e003      	b.n	80032d0 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff fea6 	bl	800301c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	2220      	movs	r2, #32
 80032d6:	4013      	ands	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff feaf 	bl	8003040 <LL_EXTI_EnableFallingTrig_0_31>
 80032e2:	e003      	b.n	80032ec <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff feba 	bl	8003060 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff fed6 	bl	80030a0 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fec4 	bl	8003084 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	2202      	movs	r2, #2
 8003302:	4013      	ands	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff fe51 	bl	8002fb0 <LL_EXTI_EnableEvent_0_31>
 800330e:	e003      	b.n	8003318 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff fe5e 	bl	8002fd4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff fe1d 	bl	8002f64 <LL_EXTI_EnableIT_0_31>
 800332a:	e00c      	b.n	8003346 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff fe2a 	bl	8002f88 <LL_EXTI_DisableIT_0_31>
 8003334:	e007      	b.n	8003346 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff fe4b 	bl	8002fd4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fe21 	bl	8002f88 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2229      	movs	r2, #41	@ 0x29
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2229      	movs	r2, #41	@ 0x29
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800335a:	231f      	movs	r3, #31
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	781b      	ldrb	r3, [r3, #0]
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b008      	add	sp, #32
 8003366:	bd80      	pop	{r7, pc}
 8003368:	fe00740f 	.word	0xfe00740f
 800336c:	40010200 	.word	0x40010200
 8003370:	fffff7ff 	.word	0xfffff7ff
 8003374:	ffffbfff 	.word	0xffffbfff
 8003378:	2000001c 	.word	0x2000001c
 800337c:	00030d40 	.word	0x00030d40

08003380 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	210f      	movs	r1, #15
 800338e:	187b      	adds	r3, r7, r1
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800339a:	187b      	adds	r3, r7, r1
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e035      	b.n	800340e <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0fdb      	lsrs	r3, r3, #31
 80033aa:	07da      	lsls	r2, r3, #31
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d104      	bne.n	80033be <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80033b4:	230f      	movs	r3, #15
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e027      	b.n	800340e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2229      	movs	r2, #41	@ 0x29
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d11d      	bne.n	8003406 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2229      	movs	r2, #41	@ 0x29
 80033de:	2102      	movs	r1, #2
 80033e0:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <HAL_COMP_Start+0x9c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	490e      	ldr	r1, [pc, #56]	@ (8003420 <HAL_COMP_Start+0xa0>)
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fc fe95 	bl	8000118 <__udivsi3>
 80033ee:	0003      	movs	r3, r0
 80033f0:	3301      	adds	r3, #1
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033f6:	e002      	b.n	80033fe <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <HAL_COMP_Start+0x78>
 8003404:	e003      	b.n	800340e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003406:	230f      	movs	r3, #15
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800340e:	230f      	movs	r3, #15
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	781b      	ldrb	r3, [r3, #0]
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b004      	add	sp, #16
 800341a:	bd80      	pop	{r7, pc}
 800341c:	2000001c 	.word	0x2000001c
 8003420:	00030d40 	.word	0x00030d40

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	0002      	movs	r2, r0
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b7f      	cmp	r3, #127	@ 0x7f
 8003436:	d809      	bhi.n	800344c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	001a      	movs	r2, r3
 800343e:	231f      	movs	r3, #31
 8003440:	401a      	ands	r2, r3
 8003442:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <__NVIC_EnableIRQ+0x30>)
 8003444:	2101      	movs	r1, #1
 8003446:	4091      	lsls	r1, r2
 8003448:	000a      	movs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800344c:	46c0      	nop			@ (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	0002      	movs	r2, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b7f      	cmp	r3, #127	@ 0x7f
 800346c:	d828      	bhi.n	80034c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800346e:	4a2f      	ldr	r2, [pc, #188]	@ (800352c <__NVIC_SetPriority+0xd4>)
 8003470:	1dfb      	adds	r3, r7, #7
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b25b      	sxtb	r3, r3
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	33c0      	adds	r3, #192	@ 0xc0
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	589b      	ldr	r3, [r3, r2]
 800347e:	1dfa      	adds	r2, r7, #7
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	0011      	movs	r1, r2
 8003484:	2203      	movs	r2, #3
 8003486:	400a      	ands	r2, r1
 8003488:	00d2      	lsls	r2, r2, #3
 800348a:	21ff      	movs	r1, #255	@ 0xff
 800348c:	4091      	lsls	r1, r2
 800348e:	000a      	movs	r2, r1
 8003490:	43d2      	mvns	r2, r2
 8003492:	401a      	ands	r2, r3
 8003494:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	22ff      	movs	r2, #255	@ 0xff
 800349c:	401a      	ands	r2, r3
 800349e:	1dfb      	adds	r3, r7, #7
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	0018      	movs	r0, r3
 80034a4:	2303      	movs	r3, #3
 80034a6:	4003      	ands	r3, r0
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ac:	481f      	ldr	r0, [pc, #124]	@ (800352c <__NVIC_SetPriority+0xd4>)
 80034ae:	1dfb      	adds	r3, r7, #7
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	430a      	orrs	r2, r1
 80034b8:	33c0      	adds	r3, #192	@ 0xc0
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034be:	e031      	b.n	8003524 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <__NVIC_SetPriority+0xd8>)
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	0019      	movs	r1, r3
 80034c8:	230f      	movs	r3, #15
 80034ca:	400b      	ands	r3, r1
 80034cc:	3b08      	subs	r3, #8
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	3306      	adds	r3, #6
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	18d3      	adds	r3, r2, r3
 80034d6:	3304      	adds	r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1dfa      	adds	r2, r7, #7
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	0011      	movs	r1, r2
 80034e0:	2203      	movs	r2, #3
 80034e2:	400a      	ands	r2, r1
 80034e4:	00d2      	lsls	r2, r2, #3
 80034e6:	21ff      	movs	r1, #255	@ 0xff
 80034e8:	4091      	lsls	r1, r2
 80034ea:	000a      	movs	r2, r1
 80034ec:	43d2      	mvns	r2, r2
 80034ee:	401a      	ands	r2, r3
 80034f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	22ff      	movs	r2, #255	@ 0xff
 80034f8:	401a      	ands	r2, r3
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	0018      	movs	r0, r3
 8003500:	2303      	movs	r3, #3
 8003502:	4003      	ands	r3, r0
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003508:	4809      	ldr	r0, [pc, #36]	@ (8003530 <__NVIC_SetPriority+0xd8>)
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	001c      	movs	r4, r3
 8003510:	230f      	movs	r3, #15
 8003512:	4023      	ands	r3, r4
 8003514:	3b08      	subs	r3, #8
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	430a      	orrs	r2, r1
 800351a:	3306      	adds	r3, #6
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	18c3      	adds	r3, r0, r3
 8003520:	3304      	adds	r3, #4
 8003522:	601a      	str	r2, [r3, #0]
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b003      	add	sp, #12
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	045b      	lsls	r3, r3, #17
 8003544:	429a      	cmp	r2, r3
 8003546:	d301      	bcc.n	800354c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003548:	2301      	movs	r3, #1
 800354a:	e010      	b.n	800356e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <SysTick_Config+0x44>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	3a01      	subs	r2, #1
 8003552:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003554:	2301      	movs	r3, #1
 8003556:	425b      	negs	r3, r3
 8003558:	2103      	movs	r1, #3
 800355a:	0018      	movs	r0, r3
 800355c:	f7ff ff7c 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <SysTick_Config+0x44>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	@ (8003578 <SysTick_Config+0x44>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	210f      	movs	r1, #15
 8003588:	187b      	adds	r3, r7, r1
 800358a:	1c02      	adds	r2, r0, #0
 800358c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	187b      	adds	r3, r7, r1
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b25b      	sxtb	r3, r3
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f7ff ff5d 	bl	8003458 <__NVIC_SetPriority>
}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b004      	add	sp, #16
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	0002      	movs	r2, r0
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff ff33 	bl	8003424 <__NVIC_EnableIRQ>
}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b002      	add	sp, #8
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7ff ffaf 	bl	8003534 <SysTick_Config>
 80035d6:	0003      	movs	r3, r0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e015      	b.n	800361e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	791b      	ldrb	r3, [r3, #4]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f7fe f8f1 	bl	80017ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e047      	b.n	80036ca <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	795b      	ldrb	r3, [r3, #5]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_DAC_Start+0x20>
 8003642:	2302      	movs	r3, #2
 8003644:	e041      	b.n	80036ca <HAL_DAC_Start+0xa4>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2210      	movs	r2, #16
 800365c:	4013      	ands	r3, r2
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	223e      	movs	r2, #62	@ 0x3e
 8003678:	4013      	ands	r3, r2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d11e      	bne.n	80036bc <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	e015      	b.n	80036bc <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	23f8      	movs	r3, #248	@ 0xf8
 8003698:	039b      	lsls	r3, r3, #14
 800369a:	401a      	ands	r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2110      	movs	r1, #16
 80036a0:	400b      	ands	r3, r1
 80036a2:	2102      	movs	r1, #2
 80036a4:	4099      	lsls	r1, r3
 80036a6:	000b      	movs	r3, r1
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2102      	movs	r1, #2
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b002      	add	sp, #8
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	4013      	ands	r3, r2
 80036f4:	d01e      	beq.n	8003734 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	4013      	ands	r3, r2
 80036fe:	d019      	beq.n	8003734 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2204      	movs	r2, #4
 8003704:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2201      	movs	r2, #1
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	0192      	lsls	r2, r2, #6
 800371a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4917      	ldr	r1, [pc, #92]	@ (8003784 <HAL_DAC_IRQHandler+0xb0>)
 8003728:	400a      	ands	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f853 	bl	80037da <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	059b      	lsls	r3, r3, #22
 800373a:	4013      	ands	r3, r2
 800373c:	d01e      	beq.n	800377c <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	059b      	lsls	r3, r3, #22
 8003744:	4013      	ands	r3, r2
 8003746:	d019      	beq.n	800377c <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2204      	movs	r2, #4
 800374c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2202      	movs	r2, #2
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2280      	movs	r2, #128	@ 0x80
 8003760:	0592      	lsls	r2, r2, #22
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4906      	ldr	r1, [pc, #24]	@ (8003788 <HAL_DAC_IRQHandler+0xb4>)
 8003770:	400a      	ands	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0018      	movs	r0, r3
 8003778:	f000 f968 	bl	8003a4c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b004      	add	sp, #16
 8003782:	bd80      	pop	{r7, pc}
 8003784:	ffffefff 	.word	0xffffefff
 8003788:	efffffff 	.word	0xefffffff

0800378c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e014      	b.n	80037d2 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	3308      	adds	r3, #8
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e004      	b.n	80037ca <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	18d3      	adds	r3, r2, r3
 80037c6:	3314      	adds	r3, #20
 80037c8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b006      	add	sp, #24
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f8:	231f      	movs	r3, #31
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_DAC_ConfigChannel+0x20>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e115      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	795b      	ldrb	r3, [r3, #5]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_DAC_ConfigChannel+0x30>
 8003818:	2302      	movs	r3, #2
 800381a:	e10f      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x250>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2202      	movs	r2, #2
 8003826:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d000      	beq.n	8003832 <HAL_DAC_ConfigChannel+0x46>
 8003830:	e07a      	b.n	8003928 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003832:	f7fe fb9b 	bl	8001f6c <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d13d      	bne.n	80038bc <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003840:	e018      	b.n	8003874 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003842:	f7fe fb93 	bl	8001f6c <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d911      	bls.n	8003874 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	4013      	ands	r3, r2
 800385c:	d00a      	beq.n	8003874 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2208      	movs	r2, #8
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2203      	movs	r2, #3
 800386e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0e3      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	4013      	ands	r3, r2
 8003880:	d1df      	bne.n	8003842 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	6992      	ldr	r2, [r2, #24]
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40
 800388c:	e020      	b.n	80038d0 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800388e:	f7fe fb6d 	bl	8001f6c <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d90f      	bls.n	80038bc <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da0a      	bge.n	80038bc <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2208      	movs	r2, #8
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2203      	movs	r2, #3
 80038b6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0bf      	b.n	8003a3c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	dbe3      	blt.n	800388e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	6992      	ldr	r2, [r2, #24]
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	2110      	movs	r1, #16
 80038da:	400a      	ands	r2, r1
 80038dc:	4959      	ldr	r1, [pc, #356]	@ (8003a44 <HAL_DAC_ConfigChannel+0x258>)
 80038de:	4091      	lsls	r1, r2
 80038e0:	000a      	movs	r2, r1
 80038e2:	43d2      	mvns	r2, r2
 80038e4:	401a      	ands	r2, r3
 80038e6:	0011      	movs	r1, r2
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2010      	movs	r0, #16
 80038f0:	4003      	ands	r3, r0
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	2110      	movs	r1, #16
 8003906:	400a      	ands	r2, r1
 8003908:	21ff      	movs	r1, #255	@ 0xff
 800390a:	4091      	lsls	r1, r2
 800390c:	000a      	movs	r2, r1
 800390e:	43d2      	mvns	r2, r2
 8003910:	401a      	ands	r2, r3
 8003912:	0011      	movs	r1, r2
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2010      	movs	r0, #16
 800391c:	4003      	ands	r3, r0
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d11d      	bne.n	800396c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2210      	movs	r2, #16
 800393c:	4013      	ands	r3, r2
 800393e:	221f      	movs	r2, #31
 8003940:	409a      	lsls	r2, r3
 8003942:	0013      	movs	r3, r2
 8003944:	43da      	mvns	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4013      	ands	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2210      	movs	r2, #16
 8003956:	4013      	ands	r3, r2
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	409a      	lsls	r2, r3
 800395c:	0013      	movs	r3, r2
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003972:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2210      	movs	r2, #16
 8003978:	4013      	ands	r3, r2
 800397a:	2207      	movs	r2, #7
 800397c:	409a      	lsls	r2, r3
 800397e:	0013      	movs	r3, r2
 8003980:	43da      	mvns	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	431a      	orrs	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	409a      	lsls	r2, r3
 80039a4:	0013      	movs	r3, r2
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2110      	movs	r1, #16
 80039be:	400b      	ands	r3, r1
 80039c0:	2180      	movs	r1, #128	@ 0x80
 80039c2:	01c9      	lsls	r1, r1, #7
 80039c4:	4099      	lsls	r1, r3
 80039c6:	000b      	movs	r3, r1
 80039c8:	43d9      	mvns	r1, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	400a      	ands	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2210      	movs	r2, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <HAL_DAC_ConfigChannel+0x25c>)
 80039e2:	409a      	lsls	r2, r3
 80039e4:	0013      	movs	r3, r2
 80039e6:	43da      	mvns	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4013      	ands	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2210      	movs	r2, #16
 80039f8:	4013      	ands	r3, r2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	409a      	lsls	r2, r3
 80039fe:	0013      	movs	r3, r2
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2110      	movs	r1, #16
 8003a18:	400b      	ands	r3, r1
 8003a1a:	21c0      	movs	r1, #192	@ 0xc0
 8003a1c:	4099      	lsls	r1, r3
 8003a1e:	000b      	movs	r3, r1
 8003a20:	43d9      	mvns	r1, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	400a      	ands	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003a36:	231f      	movs	r3, #31
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b008      	add	sp, #32
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	000003ff 	.word	0x000003ff
 8003a48:	00000ffe 	.word	0x00000ffe

08003a4c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e077      	b.n	8003b5e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3d      	ldr	r2, [pc, #244]	@ (8003b68 <HAL_DMA_Init+0x10c>)
 8003a74:	4694      	mov	ip, r2
 8003a76:	4463      	add	r3, ip
 8003a78:	2114      	movs	r1, #20
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fc fb4c 	bl	8000118 <__udivsi3>
 8003a80:	0003      	movs	r3, r0
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2225      	movs	r2, #37	@ 0x25
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4934      	ldr	r1, [pc, #208]	@ (8003b6c <HAL_DMA_Init+0x110>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 f9c1 	bl	8003e60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	2380      	movs	r3, #128	@ 0x80
 8003ae4:	01db      	lsls	r3, r3, #7
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d102      	bne.n	8003af0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	213f      	movs	r1, #63	@ 0x3f
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b06:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <HAL_DMA_Init+0xd8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d80d      	bhi.n	8003b34 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f9cc 	bl	8003eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	e008      	b.n	8003b46 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2225      	movs	r2, #37	@ 0x25
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	@ 0x24
 8003b58:	2100      	movs	r1, #0
 8003b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	bffdfff8 	.word	0xbffdfff8
 8003b6c:	ffff800f 	.word	0xffff800f

08003b70 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2317      	movs	r3, #23
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2224      	movs	r2, #36	@ 0x24
 8003b8a:	5c9b      	ldrb	r3, [r3, r2]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_DMA_Start_IT+0x24>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e06f      	b.n	8003c74 <HAL_DMA_Start_IT+0x104>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2224      	movs	r2, #36	@ 0x24
 8003b98:	2101      	movs	r1, #1
 8003b9a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2225      	movs	r2, #37	@ 0x25
 8003ba0:	5c9b      	ldrb	r3, [r3, r2]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d157      	bne.n	8003c58 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2225      	movs	r2, #37	@ 0x25
 8003bac:	2102      	movs	r1, #2
 8003bae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	438a      	bics	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f907 	bl	8003de0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	210e      	movs	r1, #14
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e00f      	b.n	8003c0c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	210a      	movs	r1, #10
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	2380      	movs	r3, #128	@ 0x80
 8003c14:	025b      	lsls	r3, r3, #9
 8003c16:	4013      	ands	r3, r2
 8003c18:	d008      	beq.n	8003c2c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	2180      	movs	r1, #128	@ 0x80
 8003c26:	0049      	lsls	r1, r1, #1
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3e:	2180      	movs	r1, #128	@ 0x80
 8003c40:	0049      	lsls	r1, r1, #1
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e00a      	b.n	8003c6e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2224      	movs	r2, #36	@ 0x24
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003c66:	2317      	movs	r3, #23
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c6e:	2317      	movs	r3, #23
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003c84:	4b55      	ldr	r3, [pc, #340]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	221c      	movs	r2, #28
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	0013      	movs	r3, r2
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x7a>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	4013      	ands	r3, r2
 8003cac:	d023      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d107      	bne.n	8003cca <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	438a      	bics	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	221c      	movs	r2, #28
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d100      	bne.n	8003cea <HAL_DMA_IRQHandler+0x6e>
 8003ce8:	e073      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	0010      	movs	r0, r2
 8003cf2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003cf4:	e06d      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	221c      	movs	r2, #28
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2202      	movs	r2, #2
 8003d00:	409a      	lsls	r2, r3
 8003d02:	0013      	movs	r3, r2
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4013      	ands	r3, r2
 8003d08:	d02e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0xec>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d02a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d10b      	bne.n	8003d36 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	210a      	movs	r1, #10
 8003d2a:	438a      	bics	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2225      	movs	r2, #37	@ 0x25
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d36:	4b29      	ldr	r3, [pc, #164]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	221c      	movs	r2, #28
 8003d40:	4013      	ands	r3, r2
 8003d42:	2202      	movs	r2, #2
 8003d44:	409a      	lsls	r2, r3
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	@ 0x24
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03a      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	0010      	movs	r0, r2
 8003d64:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d66:	e034      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	221c      	movs	r2, #28
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2208      	movs	r2, #8
 8003d72:	409a      	lsls	r2, r3
 8003d74:	0013      	movs	r3, r2
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d02b      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x158>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2208      	movs	r2, #8
 8003d80:	4013      	ands	r3, r2
 8003d82:	d027      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	210e      	movs	r1, #14
 8003d90:	438a      	bics	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003d94:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	221c      	movs	r2, #28
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2201      	movs	r2, #1
 8003da2:	409a      	lsls	r2, r3
 8003da4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <HAL_DMA_IRQHandler+0x160>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2225      	movs	r2, #37	@ 0x25
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	@ 0x24
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	0010      	movs	r0, r2
 8003dd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	46c0      	nop			@ (mov r8, r8)
}
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40020000 	.word	0x40020000

08003de0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003df6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e08:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e0a:	4b14      	ldr	r3, [pc, #80]	@ (8003e5c <DMA_SetConfig+0x7c>)
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	221c      	movs	r2, #28
 8003e14:	4013      	ands	r3, r2
 8003e16:	2201      	movs	r2, #1
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <DMA_SetConfig+0x7c>)
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d108      	bne.n	8003e42 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e40:	e007      	b.n	8003e52 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	40020000 	.word	0x40020000

08003e60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003e70:	4694      	mov	ip, r2
 8003e72:	4463      	add	r3, ip
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	001a      	movs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	001a      	movs	r2, r3
 8003e82:	23ff      	movs	r3, #255	@ 0xff
 8003e84:	4013      	ands	r3, r2
 8003e86:	3b08      	subs	r3, #8
 8003e88:	2114      	movs	r1, #20
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fc f944 	bl	8000118 <__udivsi3>
 8003e90:	0003      	movs	r3, r0
 8003e92:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a07      	ldr	r2, [pc, #28]	@ (8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003e98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	221f      	movs	r2, #31
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	10008200 	.word	0x10008200
 8003eb4:	40020880 	.word	0x40020880

08003eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	223f      	movs	r2, #63	@ 0x3f
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ece:	4694      	mov	ip, r2
 8003ed0:	4463      	add	r3, ip
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ede:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b004      	add	sp, #16
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	1000823f 	.word	0x1000823f
 8003efc:	40020940 	.word	0x40020940

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0e:	e147      	b.n	80041a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2101      	movs	r1, #1
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4091      	lsls	r1, r2
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d100      	bne.n	8003f28 <HAL_GPIO_Init+0x28>
 8003f26:	e138      	b.n	800419a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d005      	beq.n	8003f40 <HAL_GPIO_Init+0x40>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d130      	bne.n	8003fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	0013      	movs	r3, r2
 8003f50:	43da      	mvns	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	0013      	movs	r3, r2
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f76:	2201      	movs	r2, #1
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	401a      	ands	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d017      	beq.n	8003fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d123      	bne.n	8004032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	58d3      	ldr	r3, [r2, r3]
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	220f      	movs	r2, #15
 8004002:	409a      	lsls	r2, r3
 8004004:	0013      	movs	r3, r2
 8004006:	43da      	mvns	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2107      	movs	r1, #7
 8004016:	400b      	ands	r3, r1
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	6939      	ldr	r1, [r7, #16]
 8004030:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	43da      	mvns	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2203      	movs	r2, #3
 8004050:	401a      	ands	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	23c0      	movs	r3, #192	@ 0xc0
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	4013      	ands	r3, r2
 8004070:	d100      	bne.n	8004074 <HAL_GPIO_Init+0x174>
 8004072:	e092      	b.n	800419a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004074:	4a50      	ldr	r2, [pc, #320]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	3318      	adds	r3, #24
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	589b      	ldr	r3, [r3, r2]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2203      	movs	r2, #3
 8004086:	4013      	ands	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	220f      	movs	r2, #15
 800408c:	409a      	lsls	r2, r3
 800408e:	0013      	movs	r3, r2
 8004090:	43da      	mvns	r2, r3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	23a0      	movs	r3, #160	@ 0xa0
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	429a      	cmp	r2, r3
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x1ca>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a45      	ldr	r2, [pc, #276]	@ (80041bc <HAL_GPIO_Init+0x2bc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x1c6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a44      	ldr	r2, [pc, #272]	@ (80041c0 <HAL_GPIO_Init+0x2c0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x1c2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a43      	ldr	r2, [pc, #268]	@ (80041c4 <HAL_GPIO_Init+0x2c4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x1be>
 80040ba:	2303      	movs	r3, #3
 80040bc:	e006      	b.n	80040cc <HAL_GPIO_Init+0x1cc>
 80040be:	2305      	movs	r3, #5
 80040c0:	e004      	b.n	80040cc <HAL_GPIO_Init+0x1cc>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_Init+0x1cc>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_GPIO_Init+0x1cc>
 80040ca:	2300      	movs	r3, #0
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	2103      	movs	r1, #3
 80040d0:	400a      	ands	r2, r1
 80040d2:	00d2      	lsls	r2, r2, #3
 80040d4:	4093      	lsls	r3, r2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80040dc:	4936      	ldr	r1, [pc, #216]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3318      	adds	r3, #24
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040ea:	4b33      	ldr	r3, [pc, #204]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43da      	mvns	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	035b      	lsls	r3, r3, #13
 8004102:	4013      	ands	r3, r2
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800410e:	4b2a      	ldr	r3, [pc, #168]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004114:	4b28      	ldr	r3, [pc, #160]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43da      	mvns	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	039b      	lsls	r3, r3, #14
 800412c:	4013      	ands	r3, r2
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004138:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004140:	2384      	movs	r3, #132	@ 0x84
 8004142:	58d3      	ldr	r3, [r2, r3]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43da      	mvns	r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	4013      	ands	r3, r2
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004164:	4914      	ldr	r1, [pc, #80]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004166:	2284      	movs	r2, #132	@ 0x84
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800416c:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	58d3      	ldr	r3, [r2, r3]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	43da      	mvns	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	025b      	lsls	r3, r3, #9
 8004186:	4013      	ands	r3, r2
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004192:	4909      	ldr	r1, [pc, #36]	@ (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004194:	2280      	movs	r2, #128	@ 0x80
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	3301      	adds	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	40da      	lsrs	r2, r3
 80041a8:	1e13      	subs	r3, r2, #0
 80041aa:	d000      	beq.n	80041ae <HAL_GPIO_Init+0x2ae>
 80041ac:	e6b0      	b.n	8003f10 <HAL_GPIO_Init+0x10>
  }
}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	46c0      	nop			@ (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b006      	add	sp, #24
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021800 	.word	0x40021800
 80041bc:	50000400 	.word	0x50000400
 80041c0:	50000800 	.word	0x50000800
 80041c4:	50000c00 	.word	0x50000c00

080041c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	000a      	movs	r2, r1
 80041d2:	1cbb      	adds	r3, r7, #2
 80041d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	1cba      	adds	r2, r7, #2
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	4013      	ands	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80041e2:	230f      	movs	r3, #15
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e003      	b.n	80041f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ec:	230f      	movs	r3, #15
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80041f4:	230f      	movs	r3, #15
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b004      	add	sp, #16
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	0008      	movs	r0, r1
 800420c:	0011      	movs	r1, r2
 800420e:	1cbb      	adds	r3, r7, #2
 8004210:	1c02      	adds	r2, r0, #0
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	1c7b      	adds	r3, r7, #1
 8004216:	1c0a      	adds	r2, r1, #0
 8004218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800421a:	1c7b      	adds	r3, r7, #1
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004222:	1cbb      	adds	r3, r7, #2
 8004224:	881a      	ldrh	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800422a:	e003      	b.n	8004234 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422c:	1cbb      	adds	r3, r7, #2
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004234:	46c0      	nop			@ (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	000a      	movs	r2, r1
 8004246:	1cbb      	adds	r3, r7, #2
 8004248:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004250:	1cbb      	adds	r3, r7, #2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4013      	ands	r3, r2
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	43db      	mvns	r3, r3
 800425e:	1cb9      	adds	r1, r7, #2
 8004260:	8809      	ldrh	r1, [r1, #0]
 8004262:	400b      	ands	r3, r1
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800427c:	4b19      	ldr	r3, [pc, #100]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d11f      	bne.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004298:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	0013      	movs	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	189b      	adds	r3, r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4912      	ldr	r1, [pc, #72]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7fb ff36 	bl	8000118 <__udivsi3>
 80042ac:	0003      	movs	r3, r0
 80042ae:	3301      	adds	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042b2:	e008      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3b01      	subs	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e001      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e009      	b.n	80042da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042c6:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	401a      	ands	r2, r3
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d0ed      	beq.n	80042b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b004      	add	sp, #16
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	40007000 	.word	0x40007000
 80042e8:	fffff9ff 	.word	0xfffff9ff
 80042ec:	2000001c 	.word	0x2000001c
 80042f0:	000f4240 	.word	0x000f4240

080042f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <LL_RCC_GetAPB1Prescaler+0x14>)
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	23e0      	movs	r3, #224	@ 0xe0
 80042fe:	01db      	lsls	r3, r3, #7
 8004300:	4013      	ands	r3, r2
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e2fe      	b.n	800491c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d100      	bne.n	800432a <HAL_RCC_OscConfig+0x1e>
 8004328:	e07c      	b.n	8004424 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4bc3      	ldr	r3, [pc, #780]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2238      	movs	r2, #56	@ 0x38
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004334:	4bc0      	ldr	r3, [pc, #768]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2203      	movs	r2, #3
 800433a:	4013      	ands	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b10      	cmp	r3, #16
 8004342:	d102      	bne.n	800434a <HAL_RCC_OscConfig+0x3e>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d002      	beq.n	8004350 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d10b      	bne.n	8004368 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	4bb9      	ldr	r3, [pc, #740]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	4013      	ands	r3, r2
 800435a:	d062      	beq.n	8004422 <HAL_RCC_OscConfig+0x116>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d15e      	bne.n	8004422 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e2d9      	b.n	800491c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	2380      	movs	r3, #128	@ 0x80
 800436e:	025b      	lsls	r3, r3, #9
 8004370:	429a      	cmp	r2, r3
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x78>
 8004374:	4bb0      	ldr	r3, [pc, #704]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4baf      	ldr	r3, [pc, #700]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800437a:	2180      	movs	r1, #128	@ 0x80
 800437c:	0249      	lsls	r1, r1, #9
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e020      	b.n	80043c6 <HAL_RCC_OscConfig+0xba>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	23a0      	movs	r3, #160	@ 0xa0
 800438a:	02db      	lsls	r3, r3, #11
 800438c:	429a      	cmp	r2, r3
 800438e:	d10e      	bne.n	80043ae <HAL_RCC_OscConfig+0xa2>
 8004390:	4ba9      	ldr	r3, [pc, #676]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4ba8      	ldr	r3, [pc, #672]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	02c9      	lsls	r1, r1, #11
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	4ba6      	ldr	r3, [pc, #664]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4ba5      	ldr	r3, [pc, #660]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	0249      	lsls	r1, r1, #9
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0xba>
 80043ae:	4ba2      	ldr	r3, [pc, #648]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043b4:	49a1      	ldr	r1, [pc, #644]	@ (800463c <HAL_RCC_OscConfig+0x330>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	4b9f      	ldr	r3, [pc, #636]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b9e      	ldr	r3, [pc, #632]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043c0:	499f      	ldr	r1, [pc, #636]	@ (8004640 <HAL_RCC_OscConfig+0x334>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d014      	beq.n	80043f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7fd fdcd 	bl	8001f6c <HAL_GetTick>
 80043d2:	0003      	movs	r3, r0
 80043d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd fdc8 	bl	8001f6c <HAL_GetTick>
 80043dc:	0002      	movs	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e298      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	4b93      	ldr	r3, [pc, #588]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	2380      	movs	r3, #128	@ 0x80
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	4013      	ands	r3, r2
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xcc>
 80043f6:	e015      	b.n	8004424 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fdb8 	bl	8001f6c <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004402:	f7fd fdb3 	bl	8001f6c <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b64      	cmp	r3, #100	@ 0x64
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e283      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004414:	4b88      	ldr	r3, [pc, #544]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	4013      	ands	r3, r2
 800441e:	d1f0      	bne.n	8004402 <HAL_RCC_OscConfig+0xf6>
 8004420:	e000      	b.n	8004424 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004422:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2202      	movs	r2, #2
 800442a:	4013      	ands	r3, r2
 800442c:	d100      	bne.n	8004430 <HAL_RCC_OscConfig+0x124>
 800442e:	e099      	b.n	8004564 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004430:	4b81      	ldr	r3, [pc, #516]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2238      	movs	r2, #56	@ 0x38
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800443a:	4b7f      	ldr	r3, [pc, #508]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2203      	movs	r2, #3
 8004440:	4013      	ands	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d102      	bne.n	8004450 <HAL_RCC_OscConfig+0x144>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d002      	beq.n	8004456 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d135      	bne.n	80044c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004456:	4b78      	ldr	r3, [pc, #480]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2380      	movs	r3, #128	@ 0x80
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4013      	ands	r3, r2
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x162>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e256      	b.n	800491c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	4b72      	ldr	r3, [pc, #456]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a74      	ldr	r2, [pc, #464]	@ (8004644 <HAL_RCC_OscConfig+0x338>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	021a      	lsls	r2, r3, #8
 800447e:	4b6e      	ldr	r3, [pc, #440]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d112      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800448a:	4b6b      	ldr	r3, [pc, #428]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6e      	ldr	r2, [pc, #440]	@ (8004648 <HAL_RCC_OscConfig+0x33c>)
 8004490:	4013      	ands	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	4b67      	ldr	r3, [pc, #412]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800449e:	4b66      	ldr	r3, [pc, #408]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	0adb      	lsrs	r3, r3, #11
 80044a4:	2207      	movs	r2, #7
 80044a6:	4013      	ands	r3, r2
 80044a8:	4a68      	ldr	r2, [pc, #416]	@ (800464c <HAL_RCC_OscConfig+0x340>)
 80044aa:	40da      	lsrs	r2, r3
 80044ac:	4b68      	ldr	r3, [pc, #416]	@ (8004650 <HAL_RCC_OscConfig+0x344>)
 80044ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044b0:	4b68      	ldr	r3, [pc, #416]	@ (8004654 <HAL_RCC_OscConfig+0x348>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fd fcfd 	bl	8001eb4 <HAL_InitTick>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d051      	beq.n	8004562 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e22c      	b.n	800491c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d030      	beq.n	800452c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004648 <HAL_RCC_OscConfig+0x33c>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	4b57      	ldr	r3, [pc, #348]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80044da:	430a      	orrs	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80044de:	4b56      	ldr	r3, [pc, #344]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b55      	ldr	r3, [pc, #340]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80044e4:	2180      	movs	r1, #128	@ 0x80
 80044e6:	0049      	lsls	r1, r1, #1
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fd3e 	bl	8001f6c <HAL_GetTick>
 80044f0:	0003      	movs	r3, r0
 80044f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f6:	f7fd fd39 	bl	8001f6c <HAL_GetTick>
 80044fa:	0002      	movs	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e209      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	4b4b      	ldr	r3, [pc, #300]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4013      	ands	r3, r2
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004514:	4b48      	ldr	r3, [pc, #288]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4a4a      	ldr	r2, [pc, #296]	@ (8004644 <HAL_RCC_OscConfig+0x338>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	4b44      	ldr	r3, [pc, #272]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	e01b      	b.n	8004564 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800452c:	4b42      	ldr	r3, [pc, #264]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b41      	ldr	r3, [pc, #260]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004532:	4949      	ldr	r1, [pc, #292]	@ (8004658 <HAL_RCC_OscConfig+0x34c>)
 8004534:	400a      	ands	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd fd18 	bl	8001f6c <HAL_GetTick>
 800453c:	0003      	movs	r3, r0
 800453e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004542:	f7fd fd13 	bl	8001f6c <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1e3      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004554:	4b38      	ldr	r3, [pc, #224]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4013      	ands	r3, r2
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x236>
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004562:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2208      	movs	r2, #8
 800456a:	4013      	ands	r3, r2
 800456c:	d047      	beq.n	80045fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800456e:	4b32      	ldr	r3, [pc, #200]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2238      	movs	r2, #56	@ 0x38
 8004574:	4013      	ands	r3, r2
 8004576:	2b18      	cmp	r3, #24
 8004578:	d10a      	bne.n	8004590 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800457a:	4b2f      	ldr	r3, [pc, #188]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	2202      	movs	r2, #2
 8004580:	4013      	ands	r3, r2
 8004582:	d03c      	beq.n	80045fe <HAL_RCC_OscConfig+0x2f2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d138      	bne.n	80045fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e1c5      	b.n	800491c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d019      	beq.n	80045cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004598:	4b27      	ldr	r3, [pc, #156]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800459a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800459c:	4b26      	ldr	r3, [pc, #152]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 800459e:	2101      	movs	r1, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd fce2 	bl	8001f6c <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ae:	f7fd fcdd 	bl	8001f6c <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1ad      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	2202      	movs	r2, #2
 80045c6:	4013      	ands	r3, r2
 80045c8:	d0f1      	beq.n	80045ae <HAL_RCC_OscConfig+0x2a2>
 80045ca:	e018      	b.n	80045fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80045cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80045ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80045d2:	2101      	movs	r1, #1
 80045d4:	438a      	bics	r2, r1
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fd fcc8 	bl	8001f6c <HAL_GetTick>
 80045dc:	0003      	movs	r3, r0
 80045de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e2:	f7fd fcc3 	bl	8001f6c <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e193      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f4:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 80045f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f8:	2202      	movs	r2, #2
 80045fa:	4013      	ands	r3, r2
 80045fc:	d1f1      	bne.n	80045e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2204      	movs	r2, #4
 8004604:	4013      	ands	r3, r2
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x2fe>
 8004608:	e0c6      	b.n	8004798 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	231f      	movs	r3, #31
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004612:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2238      	movs	r2, #56	@ 0x38
 8004618:	4013      	ands	r3, r2
 800461a:	2b20      	cmp	r3, #32
 800461c:	d11e      	bne.n	800465c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800461e:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_RCC_OscConfig+0x32c>)
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	2202      	movs	r2, #2
 8004624:	4013      	ands	r3, r2
 8004626:	d100      	bne.n	800462a <HAL_RCC_OscConfig+0x31e>
 8004628:	e0b6      	b.n	8004798 <HAL_RCC_OscConfig+0x48c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d000      	beq.n	8004634 <HAL_RCC_OscConfig+0x328>
 8004632:	e0b1      	b.n	8004798 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e171      	b.n	800491c <HAL_RCC_OscConfig+0x610>
 8004638:	40021000 	.word	0x40021000
 800463c:	fffeffff 	.word	0xfffeffff
 8004640:	fffbffff 	.word	0xfffbffff
 8004644:	ffff80ff 	.word	0xffff80ff
 8004648:	ffffc7ff 	.word	0xffffc7ff
 800464c:	00f42400 	.word	0x00f42400
 8004650:	2000001c 	.word	0x2000001c
 8004654:	20000020 	.word	0x20000020
 8004658:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800465c:	4bb1      	ldr	r3, [pc, #708]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800465e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	055b      	lsls	r3, r3, #21
 8004664:	4013      	ands	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_RCC_OscConfig+0x360>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x362>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d011      	beq.n	8004696 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004672:	4bac      	ldr	r3, [pc, #688]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004676:	4bab      	ldr	r3, [pc, #684]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004678:	2180      	movs	r1, #128	@ 0x80
 800467a:	0549      	lsls	r1, r1, #21
 800467c:	430a      	orrs	r2, r1
 800467e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004680:	4ba8      	ldr	r3, [pc, #672]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	055b      	lsls	r3, r3, #21
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800468e:	231f      	movs	r3, #31
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004696:	4ba4      	ldr	r3, [pc, #656]	@ (8004928 <HAL_RCC_OscConfig+0x61c>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	2380      	movs	r3, #128	@ 0x80
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4013      	ands	r3, r2
 80046a0:	d11a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a2:	4ba1      	ldr	r3, [pc, #644]	@ (8004928 <HAL_RCC_OscConfig+0x61c>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4ba0      	ldr	r3, [pc, #640]	@ (8004928 <HAL_RCC_OscConfig+0x61c>)
 80046a8:	2180      	movs	r1, #128	@ 0x80
 80046aa:	0049      	lsls	r1, r1, #1
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80046b0:	f7fd fc5c 	bl	8001f6c <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fd fc57 	bl	8001f6c <HAL_GetTick>
 80046be:	0002      	movs	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e127      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046cc:	4b96      	ldr	r3, [pc, #600]	@ (8004928 <HAL_RCC_OscConfig+0x61c>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	2380      	movs	r3, #128	@ 0x80
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x3e2>
 80046e0:	4b90      	ldr	r3, [pc, #576]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80046e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80046e6:	2101      	movs	r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046ec:	e01c      	b.n	8004728 <HAL_RCC_OscConfig+0x41c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x404>
 80046f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80046f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80046fc:	2104      	movs	r1, #4
 80046fe:	430a      	orrs	r2, r1
 8004700:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004702:	4b88      	ldr	r3, [pc, #544]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004704:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004706:	4b87      	ldr	r3, [pc, #540]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004708:	2101      	movs	r1, #1
 800470a:	430a      	orrs	r2, r1
 800470c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0x41c>
 8004710:	4b84      	ldr	r3, [pc, #528]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004714:	4b83      	ldr	r3, [pc, #524]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004716:	2101      	movs	r1, #1
 8004718:	438a      	bics	r2, r1
 800471a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800471c:	4b81      	ldr	r3, [pc, #516]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800471e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004720:	4b80      	ldr	r3, [pc, #512]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004722:	2104      	movs	r1, #4
 8004724:	438a      	bics	r2, r1
 8004726:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d014      	beq.n	800475a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd fc1c 	bl	8001f6c <HAL_GetTick>
 8004734:	0003      	movs	r3, r0
 8004736:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004738:	e009      	b.n	800474e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd fc17 	bl	8001f6c <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	4a79      	ldr	r2, [pc, #484]	@ (800492c <HAL_RCC_OscConfig+0x620>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e0e6      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474e:	4b75      	ldr	r3, [pc, #468]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004752:	2202      	movs	r2, #2
 8004754:	4013      	ands	r3, r2
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x42e>
 8004758:	e013      	b.n	8004782 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fd fc07 	bl	8001f6c <HAL_GetTick>
 800475e:	0003      	movs	r3, r0
 8004760:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004762:	e009      	b.n	8004778 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fd fc02 	bl	8001f6c <HAL_GetTick>
 8004768:	0002      	movs	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	4a6f      	ldr	r2, [pc, #444]	@ (800492c <HAL_RCC_OscConfig+0x620>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e0d1      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004778:	4b6a      	ldr	r3, [pc, #424]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800477a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477c:	2202      	movs	r2, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004782:	231f      	movs	r3, #31
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d105      	bne.n	8004798 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800478c:	4b65      	ldr	r3, [pc, #404]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800478e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004790:	4b64      	ldr	r3, [pc, #400]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004792:	4967      	ldr	r1, [pc, #412]	@ (8004930 <HAL_RCC_OscConfig+0x624>)
 8004794:	400a      	ands	r2, r1
 8004796:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d100      	bne.n	80047a2 <HAL_RCC_OscConfig+0x496>
 80047a0:	e0bb      	b.n	800491a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a2:	4b60      	ldr	r3, [pc, #384]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2238      	movs	r2, #56	@ 0x38
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d100      	bne.n	80047b0 <HAL_RCC_OscConfig+0x4a4>
 80047ae:	e07b      	b.n	80048a8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d156      	bne.n	8004866 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b59      	ldr	r3, [pc, #356]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80047be:	495d      	ldr	r1, [pc, #372]	@ (8004934 <HAL_RCC_OscConfig+0x628>)
 80047c0:	400a      	ands	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd fbd2 	bl	8001f6c <HAL_GetTick>
 80047c8:	0003      	movs	r3, r0
 80047ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fd fbcd 	bl	8001f6c <HAL_GetTick>
 80047d2:	0002      	movs	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e09d      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e0:	4b50      	ldr	r3, [pc, #320]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2380      	movs	r3, #128	@ 0x80
 80047e6:	049b      	lsls	r3, r3, #18
 80047e8:	4013      	ands	r3, r2
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a51      	ldr	r2, [pc, #324]	@ (8004938 <HAL_RCC_OscConfig+0x62c>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	0019      	movs	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004818:	431a      	orrs	r2, r3
 800481a:	4b42      	ldr	r3, [pc, #264]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b40      	ldr	r3, [pc, #256]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b3f      	ldr	r3, [pc, #252]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004826:	2180      	movs	r1, #128	@ 0x80
 8004828:	0449      	lsls	r1, r1, #17
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800482e:	4b3d      	ldr	r3, [pc, #244]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	4b3c      	ldr	r3, [pc, #240]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004834:	2180      	movs	r1, #128	@ 0x80
 8004836:	0549      	lsls	r1, r1, #21
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fd fb96 	bl	8001f6c <HAL_GetTick>
 8004840:	0003      	movs	r3, r0
 8004842:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004846:	f7fd fb91 	bl	8001f6c <HAL_GetTick>
 800484a:	0002      	movs	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e061      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004858:	4b32      	ldr	r3, [pc, #200]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	049b      	lsls	r3, r3, #18
 8004860:	4013      	ands	r3, r2
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x53a>
 8004864:	e059      	b.n	800491a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b2f      	ldr	r3, [pc, #188]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b2e      	ldr	r3, [pc, #184]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800486c:	4931      	ldr	r1, [pc, #196]	@ (8004934 <HAL_RCC_OscConfig+0x628>)
 800486e:	400a      	ands	r2, r1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fb7b 	bl	8001f6c <HAL_GetTick>
 8004876:	0003      	movs	r3, r0
 8004878:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fd fb76 	bl	8001f6c <HAL_GetTick>
 8004880:	0002      	movs	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e046      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488e:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	2380      	movs	r3, #128	@ 0x80
 8004894:	049b      	lsls	r3, r3, #18
 8004896:	4013      	ands	r3, r2
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800489a:	4b22      	ldr	r3, [pc, #136]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	4b21      	ldr	r3, [pc, #132]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80048a0:	4926      	ldr	r1, [pc, #152]	@ (800493c <HAL_RCC_OscConfig+0x630>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	e038      	b.n	800491a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e033      	b.n	800491c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x618>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2203      	movs	r2, #3
 80048be:	401a      	ands	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d126      	bne.n	8004916 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2270      	movs	r2, #112	@ 0x70
 80048cc:	401a      	ands	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d11f      	bne.n	8004916 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	23fe      	movs	r3, #254	@ 0xfe
 80048da:	01db      	lsls	r3, r3, #7
 80048dc:	401a      	ands	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d116      	bne.n	8004916 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	23f8      	movs	r3, #248	@ 0xf8
 80048ec:	039b      	lsls	r3, r3, #14
 80048ee:	401a      	ands	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d10e      	bne.n	8004916 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	23e0      	movs	r3, #224	@ 0xe0
 80048fc:	051b      	lsls	r3, r3, #20
 80048fe:	401a      	ands	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	0f5b      	lsrs	r3, r3, #29
 800490c:	075a      	lsls	r2, r3, #29
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b008      	add	sp, #32
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	40007000 	.word	0x40007000
 800492c:	00001388 	.word	0x00001388
 8004930:	efffffff 	.word	0xefffffff
 8004934:	feffffff 	.word	0xfeffffff
 8004938:	11c1808c 	.word	0x11c1808c
 800493c:	eefefffc 	.word	0xeefefffc

08004940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0e9      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b76      	ldr	r3, [pc, #472]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2207      	movs	r2, #7
 800495a:	4013      	ands	r3, r2
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d91e      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b73      	ldr	r3, [pc, #460]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2207      	movs	r2, #7
 8004968:	4393      	bics	r3, r2
 800496a:	0019      	movs	r1, r3
 800496c:	4b70      	ldr	r3, [pc, #448]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004974:	f7fd fafa 	bl	8001f6c <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800497c:	e009      	b.n	8004992 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497e:	f7fd faf5 	bl	8001f6c <HAL_GetTick>
 8004982:	0002      	movs	r2, r0
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	4a6a      	ldr	r2, [pc, #424]	@ (8004b34 <HAL_RCC_ClockConfig+0x1f4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0ca      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004992:	4b67      	ldr	r3, [pc, #412]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2207      	movs	r2, #7
 8004998:	4013      	ands	r3, r2
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d1ee      	bne.n	800497e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2202      	movs	r2, #2
 80049a6:	4013      	ands	r3, r2
 80049a8:	d015      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2204      	movs	r2, #4
 80049b0:	4013      	ands	r3, r2
 80049b2:	d006      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049b4:	4b60      	ldr	r3, [pc, #384]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	4b5f      	ldr	r3, [pc, #380]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 80049ba:	21e0      	movs	r1, #224	@ 0xe0
 80049bc:	01c9      	lsls	r1, r1, #7
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4a5d      	ldr	r2, [pc, #372]	@ (8004b3c <HAL_RCC_ClockConfig+0x1fc>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	0019      	movs	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2201      	movs	r2, #1
 80049dc:	4013      	ands	r3, r2
 80049de:	d057      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e8:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2380      	movs	r3, #128	@ 0x80
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	4013      	ands	r3, r2
 80049f2:	d12b      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e097      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a00:	4b4d      	ldr	r3, [pc, #308]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	049b      	lsls	r3, r3, #18
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d11f      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e08b      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a18:	4b47      	ldr	r3, [pc, #284]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	2380      	movs	r3, #128	@ 0x80
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4013      	ands	r3, r2
 8004a22:	d113      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e07f      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a30:	4b41      	ldr	r3, [pc, #260]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a34:	2202      	movs	r2, #2
 8004a36:	4013      	ands	r3, r2
 8004a38:	d108      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e074      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	2202      	movs	r2, #2
 8004a44:	4013      	ands	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e06d      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2207      	movs	r2, #7
 8004a52:	4393      	bics	r3, r2
 8004a54:	0019      	movs	r1, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a60:	f7fd fa84 	bl	8001f6c <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a68:	e009      	b.n	8004a7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fd fa7f 	bl	8001f6c <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	4a2f      	ldr	r2, [pc, #188]	@ (8004b34 <HAL_RCC_ClockConfig+0x1f4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e054      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2238      	movs	r2, #56	@ 0x38
 8004a84:	401a      	ands	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1ec      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b27      	ldr	r3, [pc, #156]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2207      	movs	r2, #7
 8004a96:	4013      	ands	r3, r2
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d21e      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2207      	movs	r2, #7
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	4b21      	ldr	r3, [pc, #132]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ab0:	f7fd fa5c 	bl	8001f6c <HAL_GetTick>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ab8:	e009      	b.n	8004ace <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aba:	f7fd fa57 	bl	8001f6c <HAL_GetTick>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <HAL_RCC_ClockConfig+0x1f4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e02c      	b.n	8004b28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ace:	4b18      	ldr	r3, [pc, #96]	@ (8004b30 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d1ee      	bne.n	8004aba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae6:	4b14      	ldr	r3, [pc, #80]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4a15      	ldr	r2, [pc, #84]	@ (8004b40 <HAL_RCC_ClockConfig+0x200>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	4b10      	ldr	r3, [pc, #64]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004af6:	430a      	orrs	r2, r1
 8004af8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004afa:	f000 f829 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004afe:	0001      	movs	r1, r0
 8004b00:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <HAL_RCC_ClockConfig+0x1f8>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	220f      	movs	r2, #15
 8004b08:	401a      	ands	r2, r3
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b44 <HAL_RCC_ClockConfig+0x204>)
 8004b0c:	0092      	lsls	r2, r2, #2
 8004b0e:	58d3      	ldr	r3, [r2, r3]
 8004b10:	221f      	movs	r2, #31
 8004b12:	4013      	ands	r3, r2
 8004b14:	000a      	movs	r2, r1
 8004b16:	40da      	lsrs	r2, r3
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_ClockConfig+0x208>)
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_RCC_ClockConfig+0x20c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fd f9c7 	bl	8001eb4 <HAL_InitTick>
 8004b26:	0003      	movs	r3, r0
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b004      	add	sp, #16
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40022000 	.word	0x40022000
 8004b34:	00001388 	.word	0x00001388
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	fffff0ff 	.word	0xfffff0ff
 8004b40:	ffff8fff 	.word	0xffff8fff
 8004b44:	080083bc 	.word	0x080083bc
 8004b48:	2000001c 	.word	0x2000001c
 8004b4c:	20000020 	.word	0x20000020

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b56:	4b3c      	ldr	r3, [pc, #240]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2238      	movs	r2, #56	@ 0x38
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d10f      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b60:	4b39      	ldr	r3, [pc, #228]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	0adb      	lsrs	r3, r3, #11
 8004b66:	2207      	movs	r2, #7
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	0013      	movs	r3, r2
 8004b70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	4835      	ldr	r0, [pc, #212]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b76:	f7fb facf 	bl	8000118 <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e05d      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b80:	4b31      	ldr	r3, [pc, #196]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2238      	movs	r2, #56	@ 0x38
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d102      	bne.n	8004b92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b8c:	4b30      	ldr	r3, [pc, #192]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e054      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b92:	4b2d      	ldr	r3, [pc, #180]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2238      	movs	r2, #56	@ 0x38
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d138      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba8:	4b27      	ldr	r3, [pc, #156]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	2207      	movs	r2, #7
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d10d      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	4824      	ldr	r0, [pc, #144]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x100>)
 8004bc0:	f7fb faaa 	bl	8000118 <__udivsi3>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	227f      	movs	r2, #127	@ 0x7f
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	434b      	muls	r3, r1
 8004bd4:	617b      	str	r3, [r7, #20]
        break;
 8004bd6:	e00d      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	481c      	ldr	r0, [pc, #112]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bdc:	f7fb fa9c 	bl	8000118 <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	0019      	movs	r1, r3
 8004be4:	4b18      	ldr	r3, [pc, #96]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	227f      	movs	r2, #127	@ 0x7f
 8004bec:	4013      	ands	r3, r2
 8004bee:	434b      	muls	r3, r1
 8004bf0:	617b      	str	r3, [r7, #20]
        break;
 8004bf2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004bf4:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	0f5b      	lsrs	r3, r3, #29
 8004bfa:	2207      	movs	r2, #7
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	3301      	adds	r3, #1
 8004c00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	6978      	ldr	r0, [r7, #20]
 8004c06:	f7fb fa87 	bl	8000118 <__udivsi3>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e015      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c10:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2238      	movs	r2, #56	@ 0x38
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d103      	bne.n	8004c24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c1c:	2380      	movs	r3, #128	@ 0x80
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c24:	4b08      	ldr	r3, [pc, #32]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2238      	movs	r2, #56	@ 0x38
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b18      	cmp	r3, #24
 8004c2e:	d103      	bne.n	8004c38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c30:	23fa      	movs	r3, #250	@ 0xfa
 8004c32:	01db      	lsls	r3, r3, #7
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e001      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c3c:	693b      	ldr	r3, [r7, #16]
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b006      	add	sp, #24
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	00f42400 	.word	0x00f42400
 8004c50:	007a1200 	.word	0x007a1200

08004c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c58:	4b02      	ldr	r3, [pc, #8]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	2000001c 	.word	0x2000001c

08004c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c68:	b5b0      	push	{r4, r5, r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c6c:	f7ff fff2 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004c70:	0004      	movs	r4, r0
 8004c72:	f7ff fb3f 	bl	80042f4 <LL_RCC_GetAPB1Prescaler>
 8004c76:	0003      	movs	r3, r0
 8004c78:	0b1a      	lsrs	r2, r3, #12
 8004c7a:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	58d3      	ldr	r3, [r2, r3]
 8004c80:	221f      	movs	r2, #31
 8004c82:	4013      	ands	r3, r2
 8004c84:	40dc      	lsrs	r4, r3
 8004c86:	0023      	movs	r3, r4
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	080083fc 	.word	0x080083fc

08004c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c9c:	2313      	movs	r3, #19
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ca4:	2312      	movs	r3, #18
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d100      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004cb8:	e0a3      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cba:	2011      	movs	r0, #17
 8004cbc:	183b      	adds	r3, r7, r0
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc2:	4bc3      	ldr	r3, [pc, #780]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	055b      	lsls	r3, r3, #21
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d110      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	4bc0      	ldr	r3, [pc, #768]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cd2:	4bbf      	ldr	r3, [pc, #764]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd4:	2180      	movs	r1, #128	@ 0x80
 8004cd6:	0549      	lsls	r1, r1, #21
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cdc:	4bbc      	ldr	r3, [pc, #752]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	055b      	lsls	r3, r3, #21
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cea:	183b      	adds	r3, r7, r0
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf0:	4bb8      	ldr	r3, [pc, #736]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4bb7      	ldr	r3, [pc, #732]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004cf6:	2180      	movs	r1, #128	@ 0x80
 8004cf8:	0049      	lsls	r1, r1, #1
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cfe:	f7fd f935 	bl	8001f6c <HAL_GetTick>
 8004d02:	0003      	movs	r3, r0
 8004d04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d06:	e00b      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fd f930 	bl	8001f6c <HAL_GetTick>
 8004d0c:	0002      	movs	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d904      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d16:	2313      	movs	r3, #19
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
        break;
 8004d1e:	e005      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d20:	4bac      	ldr	r3, [pc, #688]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d0ed      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d2c:	2313      	movs	r3, #19
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d154      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d36:	4ba6      	ldr	r3, [pc, #664]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d3a:	23c0      	movs	r3, #192	@ 0xc0
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4013      	ands	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d019      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d014      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d52:	4b9f      	ldr	r3, [pc, #636]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	4aa0      	ldr	r2, [pc, #640]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d60:	4b9b      	ldr	r3, [pc, #620]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d62:	2180      	movs	r1, #128	@ 0x80
 8004d64:	0249      	lsls	r1, r1, #9
 8004d66:	430a      	orrs	r2, r1
 8004d68:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6a:	4b99      	ldr	r3, [pc, #612]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d6e:	4b98      	ldr	r3, [pc, #608]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d70:	499a      	ldr	r1, [pc, #616]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d76:	4b96      	ldr	r3, [pc, #600]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d016      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd f8f2 	bl	8001f6c <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8c:	e00c      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd f8ed 	bl	8001f6c <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	4a91      	ldr	r2, [pc, #580]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d904      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d9e:	2313      	movs	r3, #19
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2203      	movs	r2, #3
 8004da4:	701a      	strb	r2, [r3, #0]
            break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da8:	4b89      	ldr	r3, [pc, #548]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	2202      	movs	r2, #2
 8004dae:	4013      	ands	r3, r2
 8004db0:	d0ed      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004db2:	2313      	movs	r3, #19
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbc:	4b84      	ldr	r3, [pc, #528]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	4a85      	ldr	r2, [pc, #532]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dca:	4b81      	ldr	r3, [pc, #516]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dd0:	e00c      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dd2:	2312      	movs	r3, #18
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2213      	movs	r2, #19
 8004dd8:	18ba      	adds	r2, r7, r2
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e005      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	2312      	movs	r3, #18
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	2213      	movs	r2, #19
 8004de6:	18ba      	adds	r2, r7, r2
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dec:	2311      	movs	r3, #17
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df6:	4b76      	ldr	r3, [pc, #472]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dfa:	4b75      	ldr	r3, [pc, #468]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dfc:	4979      	ldr	r1, [pc, #484]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004dfe:	400a      	ands	r2, r1
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2201      	movs	r2, #1
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e0c:	4b70      	ldr	r3, [pc, #448]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e10:	2203      	movs	r2, #3
 8004e12:	4393      	bics	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2202      	movs	r2, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2a:	4b69      	ldr	r3, [pc, #420]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2e:	220c      	movs	r2, #12
 8004e30:	4393      	bics	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	4b65      	ldr	r3, [pc, #404]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2210      	movs	r2, #16
 8004e44:	4013      	ands	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e48:	4b61      	ldr	r3, [pc, #388]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4c:	4a66      	ldr	r2, [pc, #408]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	0019      	movs	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4013      	ands	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e68:	4b59      	ldr	r3, [pc, #356]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	4b56      	ldr	r3, [pc, #344]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4013      	ands	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e88:	4b51      	ldr	r3, [pc, #324]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	4a58      	ldr	r2, [pc, #352]	@ (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	4a52      	ldr	r2, [pc, #328]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	4b46      	ldr	r3, [pc, #280]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	01db      	lsls	r3, r3, #7
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d015      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec6:	4b42      	ldr	r3, [pc, #264]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	0899      	lsrs	r1, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1a      	ldr	r2, [r3, #32]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	05db      	lsls	r3, r3, #23
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4b39      	ldr	r3, [pc, #228]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eea:	2180      	movs	r1, #128	@ 0x80
 8004eec:	0249      	lsls	r1, r1, #9
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	2380      	movs	r3, #128	@ 0x80
 8004ef8:	031b      	lsls	r3, r3, #12
 8004efa:	4013      	ands	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004efe:	4b34      	ldr	r3, [pc, #208]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f02:	2240      	movs	r2, #64	@ 0x40
 8004f04:	4393      	bics	r3, r2
 8004f06:	0019      	movs	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f0c:	4b30      	ldr	r3, [pc, #192]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	039b      	lsls	r3, r3, #14
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d016      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	4a35      	ldr	r2, [pc, #212]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f2c:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f36:	2380      	movs	r3, #128	@ 0x80
 8004f38:	03db      	lsls	r3, r3, #15
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d106      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f3e:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	4b23      	ldr	r3, [pc, #140]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f44:	2180      	movs	r1, #128	@ 0x80
 8004f46:	0449      	lsls	r1, r1, #17
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	03db      	lsls	r3, r3, #15
 8004f54:	4013      	ands	r3, r2
 8004f56:	d016      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	4a27      	ldr	r2, [pc, #156]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f66:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	045b      	lsls	r3, r3, #17
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d106      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f78:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f7e:	2180      	movs	r1, #128	@ 0x80
 8004f80:	0449      	lsls	r1, r1, #17
 8004f82:	430a      	orrs	r2, r1
 8004f84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d016      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f92:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f96:	4a1a      	ldr	r2, [pc, #104]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	01db      	lsls	r3, r3, #7
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fb8:	2180      	movs	r1, #128	@ 0x80
 8004fba:	0249      	lsls	r1, r1, #9
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fc0:	2312      	movs	r3, #18
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	781b      	ldrb	r3, [r3, #0]
}
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b006      	add	sp, #24
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40007000 	.word	0x40007000
 8004fd8:	fffffcff 	.word	0xfffffcff
 8004fdc:	fffeffff 	.word	0xfffeffff
 8004fe0:	00001388 	.word	0x00001388
 8004fe4:	efffffff 	.word	0xefffffff
 8004fe8:	fffff3ff 	.word	0xfffff3ff
 8004fec:	fff3ffff 	.word	0xfff3ffff
 8004ff0:	ffcfffff 	.word	0xffcfffff
 8004ff4:	ffffcfff 	.word	0xffffcfff
 8004ff8:	ffbfffff 	.word	0xffbfffff
 8004ffc:	feffffff 	.word	0xfeffffff
 8005000:	ffff3fff 	.word	0xffff3fff

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e04a      	b.n	80050ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	223d      	movs	r2, #61	@ 0x3d
 800501a:	5c9b      	ldrb	r3, [r3, r2]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	223c      	movs	r2, #60	@ 0x3c
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	0018      	movs	r0, r3
 800502e:	f7fc fcdf 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	223d      	movs	r2, #61	@ 0x3d
 8005036:	2102      	movs	r1, #2
 8005038:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3304      	adds	r3, #4
 8005042:	0019      	movs	r1, r3
 8005044:	0010      	movs	r0, r2
 8005046:	f000 fe6f 	bl	8005d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2248      	movs	r2, #72	@ 0x48
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	223e      	movs	r2, #62	@ 0x3e
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	223f      	movs	r2, #63	@ 0x3f
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2240      	movs	r2, #64	@ 0x40
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2241      	movs	r2, #65	@ 0x41
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2242      	movs	r2, #66	@ 0x42
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2243      	movs	r2, #67	@ 0x43
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2244      	movs	r2, #68	@ 0x44
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2245      	movs	r2, #69	@ 0x45
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2246      	movs	r2, #70	@ 0x46
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2247      	movs	r2, #71	@ 0x47
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	223d      	movs	r2, #61	@ 0x3d
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223d      	movs	r2, #61	@ 0x3d
 80050c0:	5c9b      	ldrb	r3, [r3, r2]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e042      	b.n	8005152 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223d      	movs	r2, #61	@ 0x3d
 80050d0:	2102      	movs	r1, #2
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2101      	movs	r1, #1
 80050e0:	430a      	orrs	r2, r1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_TIM_Base_Start_IT+0xa8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <HAL_TIM_Base_Start_IT+0x5a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	05db      	lsls	r3, r3, #23
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d009      	beq.n	800510e <HAL_TIM_Base_Start_IT+0x5a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a18      	ldr	r2, [pc, #96]	@ (8005160 <HAL_TIM_Base_Start_IT+0xac>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_TIM_Base_Start_IT+0x5a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <HAL_TIM_Base_Start_IT+0xb0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d116      	bne.n	800513c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a14      	ldr	r2, [pc, #80]	@ (8005168 <HAL_TIM_Base_Start_IT+0xb4>)
 8005116:	4013      	ands	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d016      	beq.n	800514e <HAL_TIM_Base_Start_IT+0x9a>
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	025b      	lsls	r3, r3, #9
 8005126:	429a      	cmp	r2, r3
 8005128:	d011      	beq.n	800514e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	430a      	orrs	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	e008      	b.n	800514e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	430a      	orrs	r2, r1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e000      	b.n	8005150 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b004      	add	sp, #16
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40000400 	.word	0x40000400
 8005164:	40014000 	.word	0x40014000
 8005168:	00010007 	.word	0x00010007

0800516c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e04a      	b.n	8005214 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	223d      	movs	r2, #61	@ 0x3d
 8005182:	5c9b      	ldrb	r3, [r3, r2]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d107      	bne.n	800519a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	223c      	movs	r2, #60	@ 0x3c
 800518e:	2100      	movs	r1, #0
 8005190:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f7fc fb6d 	bl	8001874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	223d      	movs	r2, #61	@ 0x3d
 800519e:	2102      	movs	r1, #2
 80051a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	0019      	movs	r1, r3
 80051ac:	0010      	movs	r0, r2
 80051ae:	f000 fdbb 	bl	8005d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2248      	movs	r2, #72	@ 0x48
 80051b6:	2101      	movs	r1, #1
 80051b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	223e      	movs	r2, #62	@ 0x3e
 80051be:	2101      	movs	r1, #1
 80051c0:	5499      	strb	r1, [r3, r2]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	223f      	movs	r2, #63	@ 0x3f
 80051c6:	2101      	movs	r1, #1
 80051c8:	5499      	strb	r1, [r3, r2]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2240      	movs	r2, #64	@ 0x40
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2241      	movs	r2, #65	@ 0x41
 80051d6:	2101      	movs	r1, #1
 80051d8:	5499      	strb	r1, [r3, r2]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2242      	movs	r2, #66	@ 0x42
 80051de:	2101      	movs	r1, #1
 80051e0:	5499      	strb	r1, [r3, r2]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2243      	movs	r2, #67	@ 0x43
 80051e6:	2101      	movs	r1, #1
 80051e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2244      	movs	r2, #68	@ 0x44
 80051ee:	2101      	movs	r1, #1
 80051f0:	5499      	strb	r1, [r3, r2]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2245      	movs	r2, #69	@ 0x45
 80051f6:	2101      	movs	r1, #1
 80051f8:	5499      	strb	r1, [r3, r2]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2246      	movs	r2, #70	@ 0x46
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2247      	movs	r2, #71	@ 0x47
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	223d      	movs	r2, #61	@ 0x3d
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <HAL_TIM_PWM_Start+0x22>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	223e      	movs	r2, #62	@ 0x3e
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	4193      	sbcs	r3, r2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e037      	b.n	80052ae <HAL_TIM_PWM_Start+0x92>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d108      	bne.n	8005256 <HAL_TIM_PWM_Start+0x3a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	223f      	movs	r2, #63	@ 0x3f
 8005248:	5c9b      	ldrb	r3, [r3, r2]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	4193      	sbcs	r3, r2
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e02b      	b.n	80052ae <HAL_TIM_PWM_Start+0x92>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d108      	bne.n	800526e <HAL_TIM_PWM_Start+0x52>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2240      	movs	r2, #64	@ 0x40
 8005260:	5c9b      	ldrb	r3, [r3, r2]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	1e5a      	subs	r2, r3, #1
 8005268:	4193      	sbcs	r3, r2
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e01f      	b.n	80052ae <HAL_TIM_PWM_Start+0x92>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d108      	bne.n	8005286 <HAL_TIM_PWM_Start+0x6a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2241      	movs	r2, #65	@ 0x41
 8005278:	5c9b      	ldrb	r3, [r3, r2]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	1e5a      	subs	r2, r3, #1
 8005280:	4193      	sbcs	r3, r2
 8005282:	b2db      	uxtb	r3, r3
 8005284:	e013      	b.n	80052ae <HAL_TIM_PWM_Start+0x92>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b10      	cmp	r3, #16
 800528a:	d108      	bne.n	800529e <HAL_TIM_PWM_Start+0x82>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2242      	movs	r2, #66	@ 0x42
 8005290:	5c9b      	ldrb	r3, [r3, r2]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	1e5a      	subs	r2, r3, #1
 8005298:	4193      	sbcs	r3, r2
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e007      	b.n	80052ae <HAL_TIM_PWM_Start+0x92>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2243      	movs	r2, #67	@ 0x43
 80052a2:	5c9b      	ldrb	r3, [r3, r2]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	4193      	sbcs	r3, r2
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e08b      	b.n	80053ce <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_PWM_Start+0xaa>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	223e      	movs	r2, #62	@ 0x3e
 80052c0:	2102      	movs	r1, #2
 80052c2:	5499      	strb	r1, [r3, r2]
 80052c4:	e023      	b.n	800530e <HAL_TIM_PWM_Start+0xf2>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_PWM_Start+0xba>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	223f      	movs	r2, #63	@ 0x3f
 80052d0:	2102      	movs	r1, #2
 80052d2:	5499      	strb	r1, [r3, r2]
 80052d4:	e01b      	b.n	800530e <HAL_TIM_PWM_Start+0xf2>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d104      	bne.n	80052e6 <HAL_TIM_PWM_Start+0xca>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2240      	movs	r2, #64	@ 0x40
 80052e0:	2102      	movs	r1, #2
 80052e2:	5499      	strb	r1, [r3, r2]
 80052e4:	e013      	b.n	800530e <HAL_TIM_PWM_Start+0xf2>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b0c      	cmp	r3, #12
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_PWM_Start+0xda>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2241      	movs	r2, #65	@ 0x41
 80052f0:	2102      	movs	r1, #2
 80052f2:	5499      	strb	r1, [r3, r2]
 80052f4:	e00b      	b.n	800530e <HAL_TIM_PWM_Start+0xf2>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0xea>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2242      	movs	r2, #66	@ 0x42
 8005300:	2102      	movs	r1, #2
 8005302:	5499      	strb	r1, [r3, r2]
 8005304:	e003      	b.n	800530e <HAL_TIM_PWM_Start+0xf2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2243      	movs	r2, #67	@ 0x43
 800530a:	2102      	movs	r1, #2
 800530c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	2201      	movs	r2, #1
 8005316:	0018      	movs	r0, r3
 8005318:	f001 fa92 	bl	8006840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <HAL_TIM_PWM_Start+0x1bc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <HAL_TIM_PWM_Start+0x128>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <HAL_TIM_PWM_Start+0x1c0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_TIM_PWM_Start+0x128>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2a      	ldr	r2, [pc, #168]	@ (80053e0 <HAL_TIM_PWM_Start+0x1c4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_TIM_PWM_Start+0x128>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a29      	ldr	r2, [pc, #164]	@ (80053e4 <HAL_TIM_PWM_Start+0x1c8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_TIM_PWM_Start+0x12c>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_TIM_PWM_Start+0x12e>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2180      	movs	r1, #128	@ 0x80
 800535a:	0209      	lsls	r1, r1, #8
 800535c:	430a      	orrs	r2, r1
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <HAL_TIM_PWM_Start+0x1bc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <HAL_TIM_PWM_Start+0x16e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	2380      	movs	r3, #128	@ 0x80
 8005370:	05db      	lsls	r3, r3, #23
 8005372:	429a      	cmp	r2, r3
 8005374:	d009      	beq.n	800538a <HAL_TIM_PWM_Start+0x16e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_TIM_PWM_Start+0x1cc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_TIM_PWM_Start+0x16e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a15      	ldr	r2, [pc, #84]	@ (80053dc <HAL_TIM_PWM_Start+0x1c0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d116      	bne.n	80053b8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a16      	ldr	r2, [pc, #88]	@ (80053ec <HAL_TIM_PWM_Start+0x1d0>)
 8005392:	4013      	ands	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d016      	beq.n	80053ca <HAL_TIM_PWM_Start+0x1ae>
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	2380      	movs	r3, #128	@ 0x80
 80053a0:	025b      	lsls	r3, r3, #9
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d011      	beq.n	80053ca <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2101      	movs	r1, #1
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	e008      	b.n	80053ca <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2101      	movs	r1, #1
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e000      	b.n	80053cc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b004      	add	sp, #16
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40000400 	.word	0x40000400
 80053ec:	00010007 	.word	0x00010007

080053f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e04a      	b.n	8005498 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	223d      	movs	r2, #61	@ 0x3d
 8005406:	5c9b      	ldrb	r3, [r3, r2]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d107      	bne.n	800541e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223c      	movs	r2, #60	@ 0x3c
 8005412:	2100      	movs	r1, #0
 8005414:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0018      	movs	r0, r3
 800541a:	f7fc fa9f 	bl	800195c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	223d      	movs	r2, #61	@ 0x3d
 8005422:	2102      	movs	r1, #2
 8005424:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	0019      	movs	r1, r3
 8005430:	0010      	movs	r0, r2
 8005432:	f000 fc79 	bl	8005d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2248      	movs	r2, #72	@ 0x48
 800543a:	2101      	movs	r1, #1
 800543c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	223e      	movs	r2, #62	@ 0x3e
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	223f      	movs	r2, #63	@ 0x3f
 800544a:	2101      	movs	r1, #1
 800544c:	5499      	strb	r1, [r3, r2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2240      	movs	r2, #64	@ 0x40
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2241      	movs	r2, #65	@ 0x41
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2242      	movs	r2, #66	@ 0x42
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2243      	movs	r2, #67	@ 0x43
 800546a:	2101      	movs	r1, #1
 800546c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2244      	movs	r2, #68	@ 0x44
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2245      	movs	r2, #69	@ 0x45
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2246      	movs	r2, #70	@ 0x46
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2247      	movs	r2, #71	@ 0x47
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	223d      	movs	r2, #61	@ 0x3d
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d021      	beq.n	8005504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2202      	movs	r2, #2
 80054c4:	4013      	ands	r3, r2
 80054c6:	d01d      	beq.n	8005504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2203      	movs	r2, #3
 80054ce:	4252      	negs	r2, r2
 80054d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2203      	movs	r2, #3
 80054e0:	4013      	ands	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 fc06 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 80054ec:	e007      	b.n	80054fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 fbf9 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 fc05 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2204      	movs	r2, #4
 8005508:	4013      	ands	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2204      	movs	r2, #4
 8005510:	4013      	ands	r3, r2
 8005512:	d01e      	beq.n	8005552 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2205      	movs	r2, #5
 800551a:	4252      	negs	r2, r2
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	23c0      	movs	r3, #192	@ 0xc0
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4013      	ands	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f000 fbdf 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 800553a:	e007      	b.n	800554c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	0018      	movs	r0, r3
 8005540:	f000 fbd2 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 fbde 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2208      	movs	r2, #8
 8005556:	4013      	ands	r3, r2
 8005558:	d021      	beq.n	800559e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2208      	movs	r2, #8
 800555e:	4013      	ands	r3, r2
 8005560:	d01d      	beq.n	800559e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2209      	movs	r2, #9
 8005568:	4252      	negs	r2, r2
 800556a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2204      	movs	r2, #4
 8005570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	2203      	movs	r2, #3
 800557a:	4013      	ands	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 fbb9 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 8005586:	e007      	b.n	8005598 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 fbac 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	0018      	movs	r0, r3
 8005594:	f000 fbb8 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2210      	movs	r2, #16
 80055a2:	4013      	ands	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2210      	movs	r2, #16
 80055aa:	4013      	ands	r3, r2
 80055ac:	d01e      	beq.n	80055ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2211      	movs	r2, #17
 80055b4:	4252      	negs	r2, r2
 80055b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2208      	movs	r2, #8
 80055bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	23c0      	movs	r3, #192	@ 0xc0
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4013      	ands	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 fb92 	bl	8005cf8 <HAL_TIM_IC_CaptureCallback>
 80055d4:	e007      	b.n	80055e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 fb85 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f000 fb91 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4013      	ands	r3, r2
 80055f2:	d00c      	beq.n	800560e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	4013      	ands	r3, r2
 80055fa:	d008      	beq.n	800560e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2202      	movs	r2, #2
 8005602:	4252      	negs	r2, r2
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0018      	movs	r0, r3
 800560a:	f000 fb65 	bl	8005cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2280      	movs	r2, #128	@ 0x80
 8005612:	4013      	ands	r3, r2
 8005614:	d104      	bne.n	8005620 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	2380      	movs	r3, #128	@ 0x80
 800561a:	019b      	lsls	r3, r3, #6
 800561c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800561e:	d00b      	beq.n	8005638 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2280      	movs	r2, #128	@ 0x80
 8005624:	4013      	ands	r3, r2
 8005626:	d007      	beq.n	8005638 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1e      	ldr	r2, [pc, #120]	@ (80056a8 <HAL_TIM_IRQHandler+0x208>)
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	0018      	movs	r0, r3
 8005634:	f001 fae5 	bl	8006c02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4013      	ands	r3, r2
 8005640:	d00b      	beq.n	800565a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2280      	movs	r2, #128	@ 0x80
 8005646:	4013      	ands	r3, r2
 8005648:	d007      	beq.n	800565a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a17      	ldr	r2, [pc, #92]	@ (80056ac <HAL_TIM_IRQHandler+0x20c>)
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f001 fadc 	bl	8006c12 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2240      	movs	r2, #64	@ 0x40
 800565e:	4013      	ands	r3, r2
 8005660:	d00c      	beq.n	800567c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2240      	movs	r2, #64	@ 0x40
 8005666:	4013      	ands	r3, r2
 8005668:	d008      	beq.n	800567c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2241      	movs	r2, #65	@ 0x41
 8005670:	4252      	negs	r2, r2
 8005672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	0018      	movs	r0, r3
 8005678:	f000 fb4e 	bl	8005d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2220      	movs	r2, #32
 8005680:	4013      	ands	r3, r2
 8005682:	d00c      	beq.n	800569e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	4013      	ands	r3, r2
 800568a:	d008      	beq.n	800569e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2221      	movs	r2, #33	@ 0x21
 8005692:	4252      	negs	r2, r2
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f001 faaa 	bl	8006bf2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	ffffdf7f 	.word	0xffffdf7f
 80056ac:	fffffeff 	.word	0xfffffeff

080056b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056bc:	2317      	movs	r3, #23
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	223c      	movs	r2, #60	@ 0x3c
 80056c8:	5c9b      	ldrb	r3, [r3, r2]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_IC_ConfigChannel+0x22>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e08c      	b.n	80057ec <HAL_TIM_IC_ConfigChannel+0x13c>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	223c      	movs	r2, #60	@ 0x3c
 80056d6:	2101      	movs	r1, #1
 80056d8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80056f0:	f000 ff02 	bl	80064f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	210c      	movs	r1, #12
 8005700:	438a      	bics	r2, r1
 8005702:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6999      	ldr	r1, [r3, #24]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	619a      	str	r2, [r3, #24]
 8005716:	e062      	b.n	80057de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d11c      	bne.n	8005758 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800572e:	f000 ff6d 	bl	800660c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699a      	ldr	r2, [r3, #24]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	492d      	ldr	r1, [pc, #180]	@ (80057f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800573e:	400a      	ands	r2, r1
 8005740:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6999      	ldr	r1, [r3, #24]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	021a      	lsls	r2, r3, #8
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
 8005756:	e042      	b.n	80057de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b08      	cmp	r3, #8
 800575c:	d11b      	bne.n	8005796 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800576e:	f000 ffc1 	bl	80066f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	210c      	movs	r1, #12
 800577e:	438a      	bics	r2, r1
 8005780:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69d9      	ldr	r1, [r3, #28]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	61da      	str	r2, [r3, #28]
 8005794:	e023      	b.n	80057de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b0c      	cmp	r3, #12
 800579a:	d11c      	bne.n	80057d6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80057ac:	f000 ffe2 	bl	8006774 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	490e      	ldr	r1, [pc, #56]	@ (80057f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80057bc:	400a      	ands	r2, r1
 80057be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69d9      	ldr	r1, [r3, #28]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	021a      	lsls	r2, r3, #8
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	61da      	str	r2, [r3, #28]
 80057d4:	e003      	b.n	80057de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80057d6:	2317      	movs	r3, #23
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	223c      	movs	r2, #60	@ 0x3c
 80057e2:	2100      	movs	r1, #0
 80057e4:	5499      	strb	r1, [r3, r2]

  return status;
 80057e6:	2317      	movs	r3, #23
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	781b      	ldrb	r3, [r3, #0]
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b006      	add	sp, #24
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	fffff3ff 	.word	0xfffff3ff

080057f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005804:	2317      	movs	r3, #23
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	223c      	movs	r2, #60	@ 0x3c
 8005810:	5c9b      	ldrb	r3, [r3, r2]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005816:	2302      	movs	r3, #2
 8005818:	e0e5      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	223c      	movs	r2, #60	@ 0x3c
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b14      	cmp	r3, #20
 8005826:	d900      	bls.n	800582a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005828:	e0d1      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	009a      	lsls	r2, r3, #2
 800582e:	4b70      	ldr	r3, [pc, #448]	@ (80059f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fb00 	bl	8005e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2108      	movs	r1, #8
 8005850:	430a      	orrs	r2, r1
 8005852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2104      	movs	r1, #4
 8005860:	438a      	bics	r2, r1
 8005862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6999      	ldr	r1, [r3, #24]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	619a      	str	r2, [r3, #24]
      break;
 8005876:	e0af      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	0011      	movs	r1, r2
 8005880:	0018      	movs	r0, r3
 8005882:	f000 fb69 	bl	8005f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2180      	movs	r1, #128	@ 0x80
 8005892:	0109      	lsls	r1, r1, #4
 8005894:	430a      	orrs	r2, r1
 8005896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4954      	ldr	r1, [pc, #336]	@ (80059f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80058a4:	400a      	ands	r2, r1
 80058a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6999      	ldr	r1, [r3, #24]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	619a      	str	r2, [r3, #24]
      break;
 80058bc:	e08c      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0011      	movs	r1, r2
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fbca 	bl	8006060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69da      	ldr	r2, [r3, #28]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2108      	movs	r1, #8
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2104      	movs	r1, #4
 80058e8:	438a      	bics	r2, r1
 80058ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69d9      	ldr	r1, [r3, #28]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	61da      	str	r2, [r3, #28]
      break;
 80058fe:	e06b      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	0011      	movs	r1, r2
 8005908:	0018      	movs	r0, r3
 800590a:	f000 fc31 	bl	8006170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2180      	movs	r1, #128	@ 0x80
 800591a:	0109      	lsls	r1, r1, #4
 800591c:	430a      	orrs	r2, r1
 800591e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4932      	ldr	r1, [pc, #200]	@ (80059f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800592c:	400a      	ands	r2, r1
 800592e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69d9      	ldr	r1, [r3, #28]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	61da      	str	r2, [r3, #28]
      break;
 8005944:	e048      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	0011      	movs	r1, r2
 800594e:	0018      	movs	r0, r3
 8005950:	f000 fc78 	bl	8006244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2108      	movs	r1, #8
 8005960:	430a      	orrs	r2, r1
 8005962:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2104      	movs	r1, #4
 8005970:	438a      	bics	r2, r1
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005986:	e027      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	0011      	movs	r1, r2
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fcb7 	bl	8006304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2180      	movs	r1, #128	@ 0x80
 80059a2:	0109      	lsls	r1, r1, #4
 80059a4:	430a      	orrs	r2, r1
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4910      	ldr	r1, [pc, #64]	@ (80059f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80059b4:	400a      	ands	r2, r1
 80059b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059cc:	e004      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80059ce:	2317      	movs	r3, #23
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
      break;
 80059d6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	223c      	movs	r2, #60	@ 0x3c
 80059dc:	2100      	movs	r1, #0
 80059de:	5499      	strb	r1, [r3, r2]

  return status;
 80059e0:	2317      	movs	r3, #23
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	781b      	ldrb	r3, [r3, #0]
}
 80059e6:	0018      	movs	r0, r3
 80059e8:	46bd      	mov	sp, r7
 80059ea:	b006      	add	sp, #24
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			@ (mov r8, r8)
 80059f0:	0800841c 	.word	0x0800841c
 80059f4:	fffffbff 	.word	0xfffffbff

080059f8 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2317      	movs	r3, #23
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	223c      	movs	r2, #60	@ 0x3c
 8005a10:	5c9b      	ldrb	r3, [r3, r2]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_ConfigOCrefClear+0x22>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e10e      	b.n	8005c38 <HAL_TIM_ConfigOCrefClear+0x240>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	223c      	movs	r2, #60	@ 0x3c
 8005a1e:	2101      	movs	r1, #1
 8005a20:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	223d      	movs	r2, #61	@ 0x3d
 8005a26:	2102      	movs	r1, #2
 8005a28:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2280      	movs	r2, #128	@ 0x80
 8005a30:	0592      	lsls	r2, r2, #22
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02f      	beq.n	8005a96 <HAL_TIM_ConfigOCrefClear+0x9e>
 8005a36:	2280      	movs	r2, #128	@ 0x80
 8005a38:	0592      	lsls	r2, r2, #22
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d854      	bhi.n	8005ae8 <HAL_TIM_ConfigOCrefClear+0xf0>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d914      	bls.n	8005a6c <HAL_TIM_ConfigOCrefClear+0x74>
 8005a42:	2280      	movs	r2, #128	@ 0x80
 8005a44:	0552      	lsls	r2, r2, #21
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d14e      	bne.n	8005ae8 <HAL_TIM_ConfigOCrefClear+0xf0>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	497a      	ldr	r1, [pc, #488]	@ (8005c40 <HAL_TIM_ConfigOCrefClear+0x248>)
 8005a56:	400a      	ands	r2, r1
 8005a58:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2101      	movs	r1, #1
 8005a66:	438a      	bics	r2, r1
 8005a68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a6a:	e042      	b.n	8005af2 <HAL_TIM_ConfigOCrefClear+0xfa>
#if defined(COMP3)
    case TIM_CLEARINPUTSOURCE_COMP3:
#endif /* COMP3 */
    {
      /* Clear the OCREF clear selection bit */
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2108      	movs	r1, #8
 8005a78:	438a      	bics	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]

      /* OCREF_CLR_INT is connected to COMPx output */
      MODIFY_REG(htim->Instance->OR1, TIMx_OR1_OCREF_CLR, sClearInputConfig->ClearInputSource);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a82:	2201      	movs	r2, #1
 8005a84:	4393      	bics	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a94:	e02d      	b.n	8005af2 <HAL_TIM_ConfigOCrefClear+0xfa>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_ConfigOCrefClear+0xba>
      {
        htim->State = HAL_TIM_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	223d      	movs	r2, #61	@ 0x3d
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(htim);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	223c      	movs	r2, #60	@ 0x3c
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e0c2      	b.n	8005c38 <HAL_TIM_ConfigOCrefClear+0x240>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac2:	f000 fe9d 	bl	8006800 <TIM_ETR_SetConfig>

      /* Set the OCREF clear selection bit */
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2108      	movs	r1, #8
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	438a      	bics	r2, r1
 8005ae4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ae6:	e004      	b.n	8005af2 <HAL_TIM_ConfigOCrefClear+0xfa>
    }

    default:
      status = HAL_ERROR;
 8005ae8:	2317      	movs	r3, #23
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
      break;
 8005af0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005af2:	2317      	movs	r3, #23
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d000      	beq.n	8005afe <HAL_TIM_ConfigOCrefClear+0x106>
 8005afc:	e091      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
  {
    switch (Channel)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b14      	cmp	r3, #20
 8005b02:	d900      	bls.n	8005b06 <HAL_TIM_ConfigOCrefClear+0x10e>
 8005b04:	e08c      	b.n	8005c20 <HAL_TIM_ConfigOCrefClear+0x228>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	009a      	lsls	r2, r3, #2
 8005b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8005c44 <HAL_TIM_ConfigOCrefClear+0x24c>)
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	469f      	mov	pc, r3
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_TIM_ConfigOCrefClear+0x134>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2180      	movs	r1, #128	@ 0x80
 8005b26:	430a      	orrs	r2, r1
 8005b28:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 8005b2a:	e07a      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2180      	movs	r1, #128	@ 0x80
 8005b38:	438a      	bics	r2, r1
 8005b3a:	619a      	str	r2, [r3, #24]
        break;
 8005b3c:	e071      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_TIM_ConfigOCrefClear+0x162>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2180      	movs	r1, #128	@ 0x80
 8005b52:	0209      	lsls	r1, r1, #8
 8005b54:	430a      	orrs	r2, r1
 8005b56:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8005b58:	e063      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4938      	ldr	r1, [pc, #224]	@ (8005c48 <HAL_TIM_ConfigOCrefClear+0x250>)
 8005b66:	400a      	ands	r2, r1
 8005b68:	619a      	str	r2, [r3, #24]
        break;
 8005b6a:	e05a      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_TIM_ConfigOCrefClear+0x18e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2180      	movs	r1, #128	@ 0x80
 8005b80:	430a      	orrs	r2, r1
 8005b82:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8005b84:	e04d      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2180      	movs	r1, #128	@ 0x80
 8005b92:	438a      	bics	r2, r1
 8005b94:	61da      	str	r2, [r3, #28]
        break;
 8005b96:	e044      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIM_ConfigOCrefClear+0x1bc>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2180      	movs	r1, #128	@ 0x80
 8005bac:	0209      	lsls	r1, r1, #8
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 8005bb2:	e036      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4922      	ldr	r1, [pc, #136]	@ (8005c48 <HAL_TIM_ConfigOCrefClear+0x250>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	61da      	str	r2, [r3, #28]
        break;
 8005bc4:	e02d      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_5:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <HAL_TIM_ConfigOCrefClear+0x1e8>
        {
          /* Enable the OCREF clear feature for Channel 5 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2180      	movs	r1, #128	@ 0x80
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 5 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
        }
        break;
 8005bde:	e020      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2180      	movs	r1, #128	@ 0x80
 8005bec:	438a      	bics	r2, r1
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005bf0:	e017      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_6:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_TIM_ConfigOCrefClear+0x216>
        {
          /* Enable the OCREF clear feature for Channel 6 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2180      	movs	r1, #128	@ 0x80
 8005c06:	0209      	lsls	r1, r1, #8
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 6 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
        }
        break;
 8005c0c:	e009      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	490b      	ldr	r1, [pc, #44]	@ (8005c48 <HAL_TIM_ConfigOCrefClear+0x250>)
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005c1e:	e000      	b.n	8005c22 <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      default:
        break;
 8005c20:	46c0      	nop			@ (mov r8, r8)
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	223d      	movs	r2, #61	@ 0x3d
 8005c26:	2101      	movs	r1, #1
 8005c28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	223c      	movs	r2, #60	@ 0x3c
 8005c2e:	2100      	movs	r1, #0
 8005c30:	5499      	strb	r1, [r3, r2]

  return status;
 8005c32:	2317      	movs	r3, #23
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	781b      	ldrb	r3, [r3, #0]
}
 8005c38:	0018      	movs	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b006      	add	sp, #24
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	ffff00f7 	.word	0xffff00f7
 8005c44:	08008470 	.word	0x08008470
 8005c48:	ffff7fff 	.word	0xffff7fff

08005c4c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	223c      	movs	r2, #60	@ 0x3c
 8005c5a:	5c9b      	ldrb	r3, [r3, r2]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e032      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	223c      	movs	r2, #60	@ 0x3c
 8005c68:	2101      	movs	r1, #1
 8005c6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	223d      	movs	r2, #61	@ 0x3d
 8005c70:	2102      	movs	r1, #2
 8005c72:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0011      	movs	r1, r2
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 fba6 	bl	80063cc <TIM_SlaveTimer_SetConfig>
 8005c80:	1e03      	subs	r3, r0, #0
 8005c82:	d009      	beq.n	8005c98 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	223d      	movs	r2, #61	@ 0x3d
 8005c88:	2101      	movs	r1, #1
 8005c8a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	223c      	movs	r2, #60	@ 0x3c
 8005c90:	2100      	movs	r1, #0
 8005c92:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e018      	b.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2140      	movs	r1, #64	@ 0x40
 8005ca4:	438a      	bics	r2, r1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4908      	ldr	r1, [pc, #32]	@ (8005cd4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	223d      	movs	r2, #61	@ 0x3d
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	223c      	movs	r2, #60	@ 0x3c
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b002      	add	sp, #8
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	ffffbfff 	.word	0xffffbfff

08005cd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ce0:	46c0      	nop			@ (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf0:	46c0      	nop			@ (mov r8, r8)
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b002      	add	sp, #8
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b002      	add	sp, #8
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d10:	46c0      	nop			@ (mov r8, r8)
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b002      	add	sp, #8
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d20:	46c0      	nop			@ (mov r8, r8)
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b002      	add	sp, #8
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e28 <TIM_Base_SetConfig+0x100>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d008      	beq.n	8005d52 <TIM_Base_SetConfig+0x2a>
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	05db      	lsls	r3, r3, #23
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0x2a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a37      	ldr	r2, [pc, #220]	@ (8005e2c <TIM_Base_SetConfig+0x104>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2270      	movs	r2, #112	@ 0x70
 8005d56:	4393      	bics	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a30      	ldr	r2, [pc, #192]	@ (8005e28 <TIM_Base_SetConfig+0x100>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d018      	beq.n	8005d9e <TIM_Base_SetConfig+0x76>
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	2380      	movs	r3, #128	@ 0x80
 8005d70:	05db      	lsls	r3, r3, #23
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d013      	beq.n	8005d9e <TIM_Base_SetConfig+0x76>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2c      	ldr	r2, [pc, #176]	@ (8005e2c <TIM_Base_SetConfig+0x104>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <TIM_Base_SetConfig+0x76>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2b      	ldr	r2, [pc, #172]	@ (8005e30 <TIM_Base_SetConfig+0x108>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_Base_SetConfig+0x76>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2a      	ldr	r2, [pc, #168]	@ (8005e34 <TIM_Base_SetConfig+0x10c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_Base_SetConfig+0x76>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a29      	ldr	r2, [pc, #164]	@ (8005e38 <TIM_Base_SetConfig+0x110>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_Base_SetConfig+0x76>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a28      	ldr	r2, [pc, #160]	@ (8005e3c <TIM_Base_SetConfig+0x114>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a27      	ldr	r2, [pc, #156]	@ (8005e40 <TIM_Base_SetConfig+0x118>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2280      	movs	r2, #128	@ 0x80
 8005db4:	4393      	bics	r3, r2
 8005db6:	001a      	movs	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a13      	ldr	r2, [pc, #76]	@ (8005e28 <TIM_Base_SetConfig+0x100>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_Base_SetConfig+0xce>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a14      	ldr	r2, [pc, #80]	@ (8005e34 <TIM_Base_SetConfig+0x10c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_Base_SetConfig+0xce>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a13      	ldr	r2, [pc, #76]	@ (8005e38 <TIM_Base_SetConfig+0x110>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_Base_SetConfig+0xce>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a12      	ldr	r2, [pc, #72]	@ (8005e3c <TIM_Base_SetConfig+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d103      	bne.n	8005dfe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2201      	movs	r2, #1
 8005e16:	4393      	bics	r3, r2
 8005e18:	001a      	movs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	611a      	str	r2, [r3, #16]
  }
}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b004      	add	sp, #16
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40002000 	.word	0x40002000
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800
 8005e40:	fffffcff 	.word	0xfffffcff

08005e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4393      	bics	r3, r2
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a32      	ldr	r2, [pc, #200]	@ (8005f3c <TIM_OC1_SetConfig+0xf8>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4393      	bics	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	4393      	bics	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a28      	ldr	r2, [pc, #160]	@ (8005f40 <TIM_OC1_SetConfig+0xfc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_OC1_SetConfig+0x76>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a27      	ldr	r2, [pc, #156]	@ (8005f44 <TIM_OC1_SetConfig+0x100>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_OC1_SetConfig+0x76>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a26      	ldr	r2, [pc, #152]	@ (8005f48 <TIM_OC1_SetConfig+0x104>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC1_SetConfig+0x76>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	@ (8005f4c <TIM_OC1_SetConfig+0x108>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10c      	bne.n	8005ed4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	4393      	bics	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	4393      	bics	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f40 <TIM_OC1_SetConfig+0xfc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00b      	beq.n	8005ef4 <TIM_OC1_SetConfig+0xb0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a19      	ldr	r2, [pc, #100]	@ (8005f44 <TIM_OC1_SetConfig+0x100>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d007      	beq.n	8005ef4 <TIM_OC1_SetConfig+0xb0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a18      	ldr	r2, [pc, #96]	@ (8005f48 <TIM_OC1_SetConfig+0x104>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_OC1_SetConfig+0xb0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a17      	ldr	r2, [pc, #92]	@ (8005f4c <TIM_OC1_SetConfig+0x108>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d111      	bne.n	8005f18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4a16      	ldr	r2, [pc, #88]	@ (8005f50 <TIM_OC1_SetConfig+0x10c>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4a15      	ldr	r2, [pc, #84]	@ (8005f54 <TIM_OC1_SetConfig+0x110>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b006      	add	sp, #24
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	fffeff8f 	.word	0xfffeff8f
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800
 8005f50:	fffffeff 	.word	0xfffffeff
 8005f54:	fffffdff 	.word	0xfffffdff

08005f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	4393      	bics	r3, r2
 8005f70:	001a      	movs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a2e      	ldr	r2, [pc, #184]	@ (8006040 <TIM_OC2_SetConfig+0xe8>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006044 <TIM_OC2_SetConfig+0xec>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	4393      	bics	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a24      	ldr	r2, [pc, #144]	@ (8006048 <TIM_OC2_SetConfig+0xf0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2280      	movs	r2, #128	@ 0x80
 8005fbe:	4393      	bics	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2240      	movs	r2, #64	@ 0x40
 8005fd2:	4393      	bics	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006048 <TIM_OC2_SetConfig+0xf0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <TIM_OC2_SetConfig+0x9e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800604c <TIM_OC2_SetConfig+0xf4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <TIM_OC2_SetConfig+0x9e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	@ (8006050 <TIM_OC2_SetConfig+0xf8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC2_SetConfig+0x9e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <TIM_OC2_SetConfig+0xfc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d113      	bne.n	800601e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	@ (8006058 <TIM_OC2_SetConfig+0x100>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4a16      	ldr	r2, [pc, #88]	@ (800605c <TIM_OC2_SetConfig+0x104>)
 8006002:	4013      	ands	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	621a      	str	r2, [r3, #32]
}
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b006      	add	sp, #24
 800603e:	bd80      	pop	{r7, pc}
 8006040:	feff8fff 	.word	0xfeff8fff
 8006044:	fffffcff 	.word	0xfffffcff
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40014000 	.word	0x40014000
 8006050:	40014400 	.word	0x40014400
 8006054:	40014800 	.word	0x40014800
 8006058:	fffffbff 	.word	0xfffffbff
 800605c:	fffff7ff 	.word	0xfffff7ff

08006060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	4a33      	ldr	r2, [pc, #204]	@ (8006144 <TIM_OC3_SetConfig+0xe4>)
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a2f      	ldr	r2, [pc, #188]	@ (8006148 <TIM_OC3_SetConfig+0xe8>)
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2203      	movs	r2, #3
 8006094:	4393      	bics	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4a29      	ldr	r2, [pc, #164]	@ (800614c <TIM_OC3_SetConfig+0xec>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <TIM_OC3_SetConfig+0xf0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d10d      	bne.n	80060da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4a24      	ldr	r2, [pc, #144]	@ (8006154 <TIM_OC3_SetConfig+0xf4>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4a20      	ldr	r2, [pc, #128]	@ (8006158 <TIM_OC3_SetConfig+0xf8>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006150 <TIM_OC3_SetConfig+0xf0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00b      	beq.n	80060fa <TIM_OC3_SetConfig+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <TIM_OC3_SetConfig+0xfc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_OC3_SetConfig+0x9a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006160 <TIM_OC3_SetConfig+0x100>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_OC3_SetConfig+0x9a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006164 <TIM_OC3_SetConfig+0x104>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d113      	bne.n	8006122 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006168 <TIM_OC3_SetConfig+0x108>)
 80060fe:	4013      	ands	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4a19      	ldr	r2, [pc, #100]	@ (800616c <TIM_OC3_SetConfig+0x10c>)
 8006106:	4013      	ands	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	46c0      	nop			@ (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	b006      	add	sp, #24
 8006142:	bd80      	pop	{r7, pc}
 8006144:	fffffeff 	.word	0xfffffeff
 8006148:	fffeff8f 	.word	0xfffeff8f
 800614c:	fffffdff 	.word	0xfffffdff
 8006150:	40012c00 	.word	0x40012c00
 8006154:	fffff7ff 	.word	0xfffff7ff
 8006158:	fffffbff 	.word	0xfffffbff
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800
 8006168:	ffffefff 	.word	0xffffefff
 800616c:	ffffdfff 	.word	0xffffdfff

08006170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <TIM_OC4_SetConfig+0xb0>)
 8006186:	401a      	ands	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a22      	ldr	r2, [pc, #136]	@ (8006224 <TIM_OC4_SetConfig+0xb4>)
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a21      	ldr	r2, [pc, #132]	@ (8006228 <TIM_OC4_SetConfig+0xb8>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	@ (800622c <TIM_OC4_SetConfig+0xbc>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	031b      	lsls	r3, r3, #12
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a19      	ldr	r2, [pc, #100]	@ (8006230 <TIM_OC4_SetConfig+0xc0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00b      	beq.n	80061e8 <TIM_OC4_SetConfig+0x78>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a18      	ldr	r2, [pc, #96]	@ (8006234 <TIM_OC4_SetConfig+0xc4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d007      	beq.n	80061e8 <TIM_OC4_SetConfig+0x78>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a17      	ldr	r2, [pc, #92]	@ (8006238 <TIM_OC4_SetConfig+0xc8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_OC4_SetConfig+0x78>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a16      	ldr	r2, [pc, #88]	@ (800623c <TIM_OC4_SetConfig+0xcc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d109      	bne.n	80061fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <TIM_OC4_SetConfig+0xd0>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	019b      	lsls	r3, r3, #6
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	46bd      	mov	sp, r7
 800621a:	b006      	add	sp, #24
 800621c:	bd80      	pop	{r7, pc}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	ffffefff 	.word	0xffffefff
 8006224:	feff8fff 	.word	0xfeff8fff
 8006228:	fffffcff 	.word	0xfffffcff
 800622c:	ffffdfff 	.word	0xffffdfff
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800
 8006240:	ffffbfff 	.word	0xffffbfff

08006244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4a23      	ldr	r2, [pc, #140]	@ (80062e8 <TIM_OC5_SetConfig+0xa4>)
 800625a:	401a      	ands	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <TIM_OC5_SetConfig+0xa8>)
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <TIM_OC5_SetConfig+0xac>)
 8006282:	4013      	ands	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a17      	ldr	r2, [pc, #92]	@ (80062f4 <TIM_OC5_SetConfig+0xb0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00b      	beq.n	80062b2 <TIM_OC5_SetConfig+0x6e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <TIM_OC5_SetConfig+0xb4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <TIM_OC5_SetConfig+0x6e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <TIM_OC5_SetConfig+0xb8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_OC5_SetConfig+0x6e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <TIM_OC5_SetConfig+0xbc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d109      	bne.n	80062c6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4a0c      	ldr	r2, [pc, #48]	@ (80062e8 <TIM_OC5_SetConfig+0xa4>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	fffeffff 	.word	0xfffeffff
 80062ec:	fffeff8f 	.word	0xfffeff8f
 80062f0:	fffdffff 	.word	0xfffdffff
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4a24      	ldr	r2, [pc, #144]	@ (80063ac <TIM_OC6_SetConfig+0xa8>)
 800631a:	401a      	ands	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a20      	ldr	r2, [pc, #128]	@ (80063b0 <TIM_OC6_SetConfig+0xac>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4a1c      	ldr	r2, [pc, #112]	@ (80063b4 <TIM_OC6_SetConfig+0xb0>)
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a18      	ldr	r2, [pc, #96]	@ (80063b8 <TIM_OC6_SetConfig+0xb4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_OC6_SetConfig+0x70>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a17      	ldr	r2, [pc, #92]	@ (80063bc <TIM_OC6_SetConfig+0xb8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_OC6_SetConfig+0x70>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a16      	ldr	r2, [pc, #88]	@ (80063c0 <TIM_OC6_SetConfig+0xbc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC6_SetConfig+0x70>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a15      	ldr	r2, [pc, #84]	@ (80063c4 <TIM_OC6_SetConfig+0xc0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d109      	bne.n	8006388 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4a14      	ldr	r2, [pc, #80]	@ (80063c8 <TIM_OC6_SetConfig+0xc4>)
 8006378:	4013      	ands	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b006      	add	sp, #24
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	ffefffff 	.word	0xffefffff
 80063b0:	feff8fff 	.word	0xfeff8fff
 80063b4:	ffdfffff 	.word	0xffdfffff
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800
 80063c8:	fffbffff 	.word	0xfffbffff

080063cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2317      	movs	r3, #23
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4a41      	ldr	r2, [pc, #260]	@ (80064f0 <TIM_SlaveTimer_SetConfig+0x124>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4a3e      	ldr	r2, [pc, #248]	@ (80064f4 <TIM_SlaveTimer_SetConfig+0x128>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b70      	cmp	r3, #112	@ 0x70
 8006418:	d015      	beq.n	8006446 <TIM_SlaveTimer_SetConfig+0x7a>
 800641a:	d900      	bls.n	800641e <TIM_SlaveTimer_SetConfig+0x52>
 800641c:	e05b      	b.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
 800641e:	2b60      	cmp	r3, #96	@ 0x60
 8006420:	d04f      	beq.n	80064c2 <TIM_SlaveTimer_SetConfig+0xf6>
 8006422:	d858      	bhi.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
 8006424:	2b50      	cmp	r3, #80	@ 0x50
 8006426:	d042      	beq.n	80064ae <TIM_SlaveTimer_SetConfig+0xe2>
 8006428:	d855      	bhi.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d016      	beq.n	800645c <TIM_SlaveTimer_SetConfig+0x90>
 800642e:	d852      	bhi.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
 8006430:	2b30      	cmp	r3, #48	@ 0x30
 8006432:	d055      	beq.n	80064e0 <TIM_SlaveTimer_SetConfig+0x114>
 8006434:	d84f      	bhi.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
 8006436:	2b20      	cmp	r3, #32
 8006438:	d052      	beq.n	80064e0 <TIM_SlaveTimer_SetConfig+0x114>
 800643a:	d84c      	bhi.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d04f      	beq.n	80064e0 <TIM_SlaveTimer_SetConfig+0x114>
 8006440:	2b10      	cmp	r3, #16
 8006442:	d04d      	beq.n	80064e0 <TIM_SlaveTimer_SetConfig+0x114>
 8006444:	e047      	b.n	80064d6 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006456:	f000 f9d3 	bl	8006800 <TIM_ETR_SetConfig>
      break;
 800645a:	e042      	b.n	80064e2 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b05      	cmp	r3, #5
 8006462:	d101      	bne.n	8006468 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e03f      	b.n	80064e8 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2101      	movs	r1, #1
 800647c:	438a      	bics	r2, r1
 800647e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	22f0      	movs	r2, #240	@ 0xf0
 800648c:	4393      	bics	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4313      	orrs	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	621a      	str	r2, [r3, #32]
      break;
 80064ac:	e019      	b.n	80064e2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ba:	001a      	movs	r2, r3
 80064bc:	f000 f878 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      break;
 80064c0:	e00f      	b.n	80064e2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ce:	001a      	movs	r2, r3
 80064d0:	f000 f8de 	bl	8006690 <TIM_TI2_ConfigInputStage>
      break;
 80064d4:	e005      	b.n	80064e2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80064d6:	2317      	movs	r3, #23
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
      break;
 80064de:	e000      	b.n	80064e2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80064e0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80064e2:	2317      	movs	r3, #23
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	781b      	ldrb	r3, [r3, #0]
}
 80064e8:	0018      	movs	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b006      	add	sp, #24
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	ffcfff8f 	.word	0xffcfff8f
 80064f4:	fffefff8 	.word	0xfffefff8

080064f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	2201      	movs	r2, #1
 8006512:	4393      	bics	r3, r2
 8006514:	001a      	movs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a20      	ldr	r2, [pc, #128]	@ (80065a4 <TIM_TI1_SetConfig+0xac>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00c      	beq.n	8006542 <TIM_TI1_SetConfig+0x4a>
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	2380      	movs	r3, #128	@ 0x80
 800652c:	05db      	lsls	r3, r3, #23
 800652e:	429a      	cmp	r2, r3
 8006530:	d007      	beq.n	8006542 <TIM_TI1_SetConfig+0x4a>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <TIM_TI1_SetConfig+0xb0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_TI1_SetConfig+0x4a>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <TIM_TI1_SetConfig+0xb4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <TIM_TI1_SetConfig+0x4e>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <TIM_TI1_SetConfig+0x50>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2203      	movs	r2, #3
 8006550:	4393      	bics	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e003      	b.n	8006566 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2201      	movs	r2, #1
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	22f0      	movs	r2, #240	@ 0xf0
 800656a:	4393      	bics	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	22ff      	movs	r2, #255	@ 0xff
 8006574:	4013      	ands	r3, r2
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	220a      	movs	r2, #10
 8006580:	4393      	bics	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	220a      	movs	r2, #10
 8006588:	4013      	ands	r3, r2
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	46c0      	nop			@ (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b006      	add	sp, #24
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40014000 	.word	0x40014000

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	2201      	movs	r2, #1
 80065c8:	4393      	bics	r3, r2
 80065ca:	001a      	movs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	22f0      	movs	r2, #240	@ 0xf0
 80065da:	4393      	bics	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	220a      	movs	r2, #10
 80065ec:	4393      	bics	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	621a      	str	r2, [r3, #32]
}
 8006604:	46c0      	nop			@ (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b006      	add	sp, #24
 800660a:	bd80      	pop	{r7, pc}

0800660c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	2210      	movs	r2, #16
 8006626:	4393      	bics	r3, r2
 8006628:	001a      	movs	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4a14      	ldr	r2, [pc, #80]	@ (8006688 <TIM_TI2_SetConfig+0x7c>)
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4a10      	ldr	r2, [pc, #64]	@ (800668c <TIM_TI2_SetConfig+0x80>)
 800664a:	4013      	ands	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	22a0      	movs	r2, #160	@ 0xa0
 8006660:	4393      	bics	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	22a0      	movs	r2, #160	@ 0xa0
 800666a:	4013      	ands	r3, r2
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	46bd      	mov	sp, r7
 8006682:	b006      	add	sp, #24
 8006684:	bd80      	pop	{r7, pc}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	fffffcff 	.word	0xfffffcff
 800668c:	ffff0fff 	.word	0xffff0fff

08006690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	2210      	movs	r2, #16
 80066a8:	4393      	bics	r3, r2
 80066aa:	001a      	movs	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4a0d      	ldr	r2, [pc, #52]	@ (80066f0 <TIM_TI2_ConfigInputStage+0x60>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	22a0      	movs	r2, #160	@ 0xa0
 80066cc:	4393      	bics	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b006      	add	sp, #24
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	ffff0fff 	.word	0xffff0fff

080066f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	4a17      	ldr	r2, [pc, #92]	@ (800676c <TIM_TI3_SetConfig+0x78>)
 800670e:	401a      	ands	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2203      	movs	r2, #3
 800671e:	4393      	bics	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	22f0      	movs	r2, #240	@ 0xf0
 800672e:	4393      	bics	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	22ff      	movs	r2, #255	@ 0xff
 8006738:	4013      	ands	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	4a0b      	ldr	r2, [pc, #44]	@ (8006770 <TIM_TI3_SetConfig+0x7c>)
 8006744:	4013      	ands	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	021a      	lsls	r2, r3, #8
 800674c:	23a0      	movs	r3, #160	@ 0xa0
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	4013      	ands	r3, r2
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	46c0      	nop			@ (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b006      	add	sp, #24
 800676a:	bd80      	pop	{r7, pc}
 800676c:	fffffeff 	.word	0xfffffeff
 8006770:	fffff5ff 	.word	0xfffff5ff

08006774 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <TIM_TI4_SetConfig+0x7c>)
 800678e:	401a      	ands	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	4a15      	ldr	r2, [pc, #84]	@ (80067f4 <TIM_TI4_SetConfig+0x80>)
 800679e:	4013      	ands	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4a12      	ldr	r2, [pc, #72]	@ (80067f8 <TIM_TI4_SetConfig+0x84>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	031b      	lsls	r3, r3, #12
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	0c1b      	lsrs	r3, r3, #16
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4a0d      	ldr	r2, [pc, #52]	@ (80067fc <TIM_TI4_SetConfig+0x88>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	031a      	lsls	r2, r3, #12
 80067ce:	23a0      	movs	r3, #160	@ 0xa0
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	4013      	ands	r3, r2
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b006      	add	sp, #24
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	ffffefff 	.word	0xffffefff
 80067f4:	fffffcff 	.word	0xfffffcff
 80067f8:	ffff0fff 	.word	0xffff0fff
 80067fc:	ffff5fff 	.word	0xffff5fff

08006800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4a09      	ldr	r2, [pc, #36]	@ (800683c <TIM_ETR_SetConfig+0x3c>)
 8006818:	4013      	ands	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	021a      	lsls	r2, r3, #8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	431a      	orrs	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4313      	orrs	r3, r2
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	609a      	str	r2, [r3, #8]
}
 8006834:	46c0      	nop			@ (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b006      	add	sp, #24
 800683a:	bd80      	pop	{r7, pc}
 800683c:	ffff00ff 	.word	0xffff00ff

08006840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	221f      	movs	r2, #31
 8006850:	4013      	ands	r3, r2
 8006852:	2201      	movs	r2, #1
 8006854:	409a      	lsls	r2, r3
 8006856:	0013      	movs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	43d2      	mvns	r2, r2
 8006862:	401a      	ands	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	211f      	movs	r1, #31
 8006870:	400b      	ands	r3, r1
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	4099      	lsls	r1, r3
 8006876:	000b      	movs	r3, r1
 8006878:	431a      	orrs	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	46bd      	mov	sp, r7
 8006882:	b006      	add	sp, #24
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	223c      	movs	r2, #60	@ 0x3c
 8006896:	5c9b      	ldrb	r3, [r3, r2]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e055      	b.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	223c      	movs	r2, #60	@ 0x3c
 80068a4:	2101      	movs	r1, #1
 80068a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	223d      	movs	r2, #61	@ 0x3d
 80068ac:	2102      	movs	r1, #2
 80068ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a23      	ldr	r2, [pc, #140]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a22      	ldr	r2, [pc, #136]	@ (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2270      	movs	r2, #112	@ 0x70
 80068e0:	4393      	bics	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a16      	ldr	r2, [pc, #88]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00f      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	2380      	movs	r3, #128	@ 0x80
 8006906:	05db      	lsls	r3, r3, #23
 8006908:	429a      	cmp	r2, r3
 800690a:	d009      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a12      	ldr	r2, [pc, #72]	@ (800695c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a11      	ldr	r2, [pc, #68]	@ (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10c      	bne.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2280      	movs	r2, #128	@ 0x80
 8006924:	4393      	bics	r3, r2
 8006926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	4313      	orrs	r3, r2
 8006930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	223d      	movs	r2, #61	@ 0x3d
 800693e:	2101      	movs	r1, #1
 8006940:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	223c      	movs	r2, #60	@ 0x3c
 8006946:	2100      	movs	r1, #0
 8006948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	0018      	movs	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	b004      	add	sp, #16
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40012c00 	.word	0x40012c00
 8006958:	ff0fffff 	.word	0xff0fffff
 800695c:	40000400 	.word	0x40000400
 8006960:	40014000 	.word	0x40014000

08006964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	223c      	movs	r2, #60	@ 0x3c
 8006976:	5c9b      	ldrb	r3, [r3, r2]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800697c:	2302      	movs	r3, #2
 800697e:	e06f      	b.n	8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	223c      	movs	r2, #60	@ 0x3c
 8006984:	2101      	movs	r1, #1
 8006986:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	22ff      	movs	r2, #255	@ 0xff
 800698c:	4393      	bics	r3, r2
 800698e:	001a      	movs	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4a33      	ldr	r2, [pc, #204]	@ (8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800699c:	401a      	ands	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a30      	ldr	r2, [pc, #192]	@ (8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80069aa:	401a      	ands	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80069b8:	401a      	ands	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006a74 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80069c6:	401a      	ands	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a29      	ldr	r2, [pc, #164]	@ (8006a78 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80069d4:	401a      	ands	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a26      	ldr	r2, [pc, #152]	@ (8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80069e2:	401a      	ands	r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a24      	ldr	r2, [pc, #144]	@ (8006a80 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80069f0:	401a      	ands	r2, r3
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a21      	ldr	r2, [pc, #132]	@ (8006a84 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a00:	401a      	ands	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a88 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d11c      	bne.n	8006a4e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a1d      	ldr	r2, [pc, #116]	@ (8006a8c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006a18:	401a      	ands	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	051b      	lsls	r3, r3, #20
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	@ (8006a90 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006a28:	401a      	ands	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a17      	ldr	r2, [pc, #92]	@ (8006a94 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006a36:	401a      	ands	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a15      	ldr	r2, [pc, #84]	@ (8006a98 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006a44:	401a      	ands	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	223c      	movs	r2, #60	@ 0x3c
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b004      	add	sp, #16
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	fffffcff 	.word	0xfffffcff
 8006a6c:	fffffbff 	.word	0xfffffbff
 8006a70:	fffff7ff 	.word	0xfffff7ff
 8006a74:	ffffefff 	.word	0xffffefff
 8006a78:	ffffdfff 	.word	0xffffdfff
 8006a7c:	ffffbfff 	.word	0xffffbfff
 8006a80:	fff0ffff 	.word	0xfff0ffff
 8006a84:	efffffff 	.word	0xefffffff
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	ff0fffff 	.word	0xff0fffff
 8006a90:	feffffff 	.word	0xfeffffff
 8006a94:	fdffffff 	.word	0xfdffffff
 8006a98:	dfffffff 	.word	0xdfffffff

08006a9c <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	@ 0x28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa8:	2327      	movs	r3, #39	@ 0x27
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	223c      	movs	r2, #60	@ 0x3c
 8006ab4:	5c9b      	ldrb	r3, [r3, r2]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_TIMEx_ConfigBreakInput+0x22>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e095      	b.n	8006bea <HAL_TIMEx_ConfigBreakInput+0x14e>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	223c      	movs	r2, #60	@ 0x3c
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d019      	beq.n	8006b02 <HAL_TIMEx_ConfigBreakInput+0x66>
 8006ace:	d822      	bhi.n	8006b16 <HAL_TIMEx_ConfigBreakInput+0x7a>
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d002      	beq.n	8006ada <HAL_TIMEx_ConfigBreakInput+0x3e>
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d00a      	beq.n	8006aee <HAL_TIMEx_ConfigBreakInput+0x52>
 8006ad8:	e01d      	b.n	8006b16 <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006ada:	2301      	movs	r3, #1
 8006adc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006ae2:	2380      	movs	r3, #128	@ 0x80
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006ae8:	2309      	movs	r3, #9
 8006aea:	617b      	str	r3, [r7, #20]
      break;
 8006aec:	e01c      	b.n	8006b28 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006aee:	2302      	movs	r3, #2
 8006af0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006af6:	2380      	movs	r3, #128	@ 0x80
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006afc:	230a      	movs	r3, #10
 8006afe:	617b      	str	r3, [r7, #20]
      break;
 8006b00:	e012      	b.n	8006b28 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006b02:	2304      	movs	r3, #4
 8006b04:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006b06:	2302      	movs	r3, #2
 8006b08:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006b10:	230b      	movs	r3, #11
 8006b12:	617b      	str	r3, [r7, #20]
      break;
 8006b14:	e008      	b.n	8006b28 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
      break;
 8006b26:	46c0      	nop			@ (mov r8, r8)
    }
  }

  switch (BreakInput)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakInput+0x9a>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d027      	beq.n	8006b84 <HAL_TIMEx_ConfigBreakInput+0xe8>
 8006b34:	e04d      	b.n	8006bd2 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b3c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	43da      	mvns	r2, r3
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4013      	ands	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	409a      	lsls	r2, r3
 8006b50:	0013      	movs	r3, r2
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	4013      	ands	r3, r2
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	43da      	mvns	r2, r3
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4013      	ands	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	409a      	lsls	r2, r3
 8006b6e:	0013      	movs	r3, r2
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	4013      	ands	r3, r2
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8006b82:	e02b      	b.n	8006bdc <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	43da      	mvns	r2, r3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	0013      	movs	r3, r2
 8006ba0:	6a3a      	ldr	r2, [r7, #32]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	43da      	mvns	r2, r3
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	0013      	movs	r3, r2
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006bd0:	e004      	b.n	8006bdc <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 8006bd2:	2327      	movs	r3, #39	@ 0x27
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
      break;
 8006bda:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	223c      	movs	r2, #60	@ 0x3c
 8006be0:	2100      	movs	r1, #0
 8006be2:	5499      	strb	r1, [r3, r2]

  return status;
 8006be4:	2327      	movs	r3, #39	@ 0x27
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	781b      	ldrb	r3, [r3, #0]
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b00a      	add	sp, #40	@ 0x28
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bfa:	46c0      	nop			@ (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	b002      	add	sp, #8
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e046      	b.n	8006cc4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2288      	movs	r2, #136	@ 0x88
 8006c3a:	589b      	ldr	r3, [r3, r2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d107      	bne.n	8006c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2284      	movs	r2, #132	@ 0x84
 8006c44:	2100      	movs	r1, #0
 8006c46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7fa ffa0 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2288      	movs	r2, #136	@ 0x88
 8006c54:	2124      	movs	r1, #36	@ 0x24
 8006c56:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2101      	movs	r1, #1
 8006c64:	438a      	bics	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 fb8e 	bl	8007394 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 f8cc 	bl	8006e18 <UART_SetConfig>
 8006c80:	0003      	movs	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e01c      	b.n	8006cc4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	490d      	ldr	r1, [pc, #52]	@ (8006ccc <HAL_UART_Init+0xa8>)
 8006c96:	400a      	ands	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	212a      	movs	r1, #42	@ 0x2a
 8006ca6:	438a      	bics	r2, r1
 8006ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f000 fc1d 	bl	80074fc <UART_CheckIdleState>
 8006cc2:	0003      	movs	r3, r0
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	ffffb7ff 	.word	0xffffb7ff

08006cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	@ 0x28
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	1dbb      	adds	r3, r7, #6
 8006cde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2288      	movs	r2, #136	@ 0x88
 8006ce4:	589b      	ldr	r3, [r3, r2]
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d000      	beq.n	8006cec <HAL_UART_Transmit+0x1c>
 8006cea:	e090      	b.n	8006e0e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_UART_Transmit+0x2a>
 8006cf2:	1dbb      	adds	r3, r7, #6
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e088      	b.n	8006e10 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	015b      	lsls	r3, r3, #5
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d109      	bne.n	8006d1e <HAL_UART_Transmit+0x4e>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2201      	movs	r2, #1
 8006d16:	4013      	ands	r3, r2
 8006d18:	d001      	beq.n	8006d1e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e078      	b.n	8006e10 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2290      	movs	r2, #144	@ 0x90
 8006d22:	2100      	movs	r1, #0
 8006d24:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2288      	movs	r2, #136	@ 0x88
 8006d2a:	2121      	movs	r1, #33	@ 0x21
 8006d2c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d2e:	f7fb f91d 	bl	8001f6c <HAL_GetTick>
 8006d32:	0003      	movs	r3, r0
 8006d34:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1dba      	adds	r2, r7, #6
 8006d3a:	2154      	movs	r1, #84	@ 0x54
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1dba      	adds	r2, r7, #6
 8006d44:	2156      	movs	r1, #86	@ 0x56
 8006d46:	8812      	ldrh	r2, [r2, #0]
 8006d48:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	2380      	movs	r3, #128	@ 0x80
 8006d50:	015b      	lsls	r3, r3, #5
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d108      	bne.n	8006d68 <HAL_UART_Transmit+0x98>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e003      	b.n	8006d70 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d70:	e030      	b.n	8006dd4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	0013      	movs	r3, r2
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2180      	movs	r1, #128	@ 0x80
 8006d80:	f000 fc66 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8006d84:	1e03      	subs	r3, r0, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2288      	movs	r2, #136	@ 0x88
 8006d8c:	2120      	movs	r1, #32
 8006d8e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e03d      	b.n	8006e10 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	001a      	movs	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	05d2      	lsls	r2, r2, #23
 8006da6:	0dd2      	lsrs	r2, r2, #23
 8006da8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	3302      	adds	r3, #2
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	e007      	b.n	8006dc2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	781a      	ldrb	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2256      	movs	r2, #86	@ 0x56
 8006dc6:	5a9b      	ldrh	r3, [r3, r2]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b299      	uxth	r1, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2256      	movs	r2, #86	@ 0x56
 8006dd2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2256      	movs	r2, #86	@ 0x56
 8006dd8:	5a9b      	ldrh	r3, [r3, r2]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1c8      	bne.n	8006d72 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	0013      	movs	r3, r2
 8006dea:	2200      	movs	r2, #0
 8006dec:	2140      	movs	r1, #64	@ 0x40
 8006dee:	f000 fc2f 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8006df2:	1e03      	subs	r3, r0, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2288      	movs	r2, #136	@ 0x88
 8006dfa:	2120      	movs	r1, #32
 8006dfc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e006      	b.n	8006e10 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2288      	movs	r2, #136	@ 0x88
 8006e06:	2120      	movs	r1, #32
 8006e08:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e000      	b.n	8006e10 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006e0e:	2302      	movs	r3, #2
  }
}
 8006e10:	0018      	movs	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b008      	add	sp, #32
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e18:	b5b0      	push	{r4, r5, r7, lr}
 8006e1a:	b090      	sub	sp, #64	@ 0x40
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e20:	231a      	movs	r3, #26
 8006e22:	2220      	movs	r2, #32
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	19db      	adds	r3, r3, r7
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4aaf      	ldr	r2, [pc, #700]	@ (8007108 <UART_SetConfig+0x2f0>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	0019      	movs	r1, r3
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4aaa      	ldr	r2, [pc, #680]	@ (800710c <UART_SetConfig+0x2f4>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	0018      	movs	r0, r3
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	68d9      	ldr	r1, [r3, #12]
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	0003      	movs	r3, r0
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4aa4      	ldr	r2, [pc, #656]	@ (8007110 <UART_SetConfig+0x2f8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4a9f      	ldr	r2, [pc, #636]	@ (8007114 <UART_SetConfig+0x2fc>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	0019      	movs	r1, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	220f      	movs	r2, #15
 8006eac:	4393      	bics	r3, r2
 8006eae:	0018      	movs	r0, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	0003      	movs	r3, r0
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a95      	ldr	r2, [pc, #596]	@ (8007118 <UART_SetConfig+0x300>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d131      	bne.n	8006f2c <UART_SetConfig+0x114>
 8006ec8:	4b94      	ldr	r3, [pc, #592]	@ (800711c <UART_SetConfig+0x304>)
 8006eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ecc:	2203      	movs	r2, #3
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d01d      	beq.n	8006f10 <UART_SetConfig+0xf8>
 8006ed4:	d823      	bhi.n	8006f1e <UART_SetConfig+0x106>
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d00c      	beq.n	8006ef4 <UART_SetConfig+0xdc>
 8006eda:	d820      	bhi.n	8006f1e <UART_SetConfig+0x106>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <UART_SetConfig+0xce>
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d00e      	beq.n	8006f02 <UART_SetConfig+0xea>
 8006ee4:	e01b      	b.n	8006f1e <UART_SetConfig+0x106>
 8006ee6:	231b      	movs	r3, #27
 8006ee8:	2220      	movs	r2, #32
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	19db      	adds	r3, r3, r7
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e0b4      	b.n	800705e <UART_SetConfig+0x246>
 8006ef4:	231b      	movs	r3, #27
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	189b      	adds	r3, r3, r2
 8006efa:	19db      	adds	r3, r3, r7
 8006efc:	2202      	movs	r2, #2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	e0ad      	b.n	800705e <UART_SetConfig+0x246>
 8006f02:	231b      	movs	r3, #27
 8006f04:	2220      	movs	r2, #32
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	19db      	adds	r3, r3, r7
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e0a6      	b.n	800705e <UART_SetConfig+0x246>
 8006f10:	231b      	movs	r3, #27
 8006f12:	2220      	movs	r2, #32
 8006f14:	189b      	adds	r3, r3, r2
 8006f16:	19db      	adds	r3, r3, r7
 8006f18:	2208      	movs	r2, #8
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	e09f      	b.n	800705e <UART_SetConfig+0x246>
 8006f1e:	231b      	movs	r3, #27
 8006f20:	2220      	movs	r2, #32
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	19db      	adds	r3, r3, r7
 8006f26:	2210      	movs	r2, #16
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e098      	b.n	800705e <UART_SetConfig+0x246>
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a7b      	ldr	r2, [pc, #492]	@ (8007120 <UART_SetConfig+0x308>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d131      	bne.n	8006f9a <UART_SetConfig+0x182>
 8006f36:	4b79      	ldr	r3, [pc, #484]	@ (800711c <UART_SetConfig+0x304>)
 8006f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3a:	220c      	movs	r2, #12
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b0c      	cmp	r3, #12
 8006f40:	d01d      	beq.n	8006f7e <UART_SetConfig+0x166>
 8006f42:	d823      	bhi.n	8006f8c <UART_SetConfig+0x174>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d00c      	beq.n	8006f62 <UART_SetConfig+0x14a>
 8006f48:	d820      	bhi.n	8006f8c <UART_SetConfig+0x174>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <UART_SetConfig+0x13c>
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d00e      	beq.n	8006f70 <UART_SetConfig+0x158>
 8006f52:	e01b      	b.n	8006f8c <UART_SetConfig+0x174>
 8006f54:	231b      	movs	r3, #27
 8006f56:	2220      	movs	r2, #32
 8006f58:	189b      	adds	r3, r3, r2
 8006f5a:	19db      	adds	r3, r3, r7
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e07d      	b.n	800705e <UART_SetConfig+0x246>
 8006f62:	231b      	movs	r3, #27
 8006f64:	2220      	movs	r2, #32
 8006f66:	189b      	adds	r3, r3, r2
 8006f68:	19db      	adds	r3, r3, r7
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e076      	b.n	800705e <UART_SetConfig+0x246>
 8006f70:	231b      	movs	r3, #27
 8006f72:	2220      	movs	r2, #32
 8006f74:	189b      	adds	r3, r3, r2
 8006f76:	19db      	adds	r3, r3, r7
 8006f78:	2204      	movs	r2, #4
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e06f      	b.n	800705e <UART_SetConfig+0x246>
 8006f7e:	231b      	movs	r3, #27
 8006f80:	2220      	movs	r2, #32
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	19db      	adds	r3, r3, r7
 8006f86:	2208      	movs	r2, #8
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e068      	b.n	800705e <UART_SetConfig+0x246>
 8006f8c:	231b      	movs	r3, #27
 8006f8e:	2220      	movs	r2, #32
 8006f90:	189b      	adds	r3, r3, r2
 8006f92:	19db      	adds	r3, r3, r7
 8006f94:	2210      	movs	r2, #16
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e061      	b.n	800705e <UART_SetConfig+0x246>
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a61      	ldr	r2, [pc, #388]	@ (8007124 <UART_SetConfig+0x30c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d106      	bne.n	8006fb2 <UART_SetConfig+0x19a>
 8006fa4:	231b      	movs	r3, #27
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	19db      	adds	r3, r3, r7
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e055      	b.n	800705e <UART_SetConfig+0x246>
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8007128 <UART_SetConfig+0x310>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d106      	bne.n	8006fca <UART_SetConfig+0x1b2>
 8006fbc:	231b      	movs	r3, #27
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	19db      	adds	r3, r3, r7
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	e049      	b.n	800705e <UART_SetConfig+0x246>
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a50      	ldr	r2, [pc, #320]	@ (8007110 <UART_SetConfig+0x2f8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d13e      	bne.n	8007052 <UART_SetConfig+0x23a>
 8006fd4:	4b51      	ldr	r3, [pc, #324]	@ (800711c <UART_SetConfig+0x304>)
 8006fd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fd8:	23c0      	movs	r3, #192	@ 0xc0
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	4013      	ands	r3, r2
 8006fde:	22c0      	movs	r2, #192	@ 0xc0
 8006fe0:	0112      	lsls	r2, r2, #4
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d027      	beq.n	8007036 <UART_SetConfig+0x21e>
 8006fe6:	22c0      	movs	r2, #192	@ 0xc0
 8006fe8:	0112      	lsls	r2, r2, #4
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d82a      	bhi.n	8007044 <UART_SetConfig+0x22c>
 8006fee:	2280      	movs	r2, #128	@ 0x80
 8006ff0:	0112      	lsls	r2, r2, #4
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d011      	beq.n	800701a <UART_SetConfig+0x202>
 8006ff6:	2280      	movs	r2, #128	@ 0x80
 8006ff8:	0112      	lsls	r2, r2, #4
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d822      	bhi.n	8007044 <UART_SetConfig+0x22c>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <UART_SetConfig+0x1f4>
 8007002:	2280      	movs	r2, #128	@ 0x80
 8007004:	00d2      	lsls	r2, r2, #3
 8007006:	4293      	cmp	r3, r2
 8007008:	d00e      	beq.n	8007028 <UART_SetConfig+0x210>
 800700a:	e01b      	b.n	8007044 <UART_SetConfig+0x22c>
 800700c:	231b      	movs	r3, #27
 800700e:	2220      	movs	r2, #32
 8007010:	189b      	adds	r3, r3, r2
 8007012:	19db      	adds	r3, r3, r7
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e021      	b.n	800705e <UART_SetConfig+0x246>
 800701a:	231b      	movs	r3, #27
 800701c:	2220      	movs	r2, #32
 800701e:	189b      	adds	r3, r3, r2
 8007020:	19db      	adds	r3, r3, r7
 8007022:	2202      	movs	r2, #2
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e01a      	b.n	800705e <UART_SetConfig+0x246>
 8007028:	231b      	movs	r3, #27
 800702a:	2220      	movs	r2, #32
 800702c:	189b      	adds	r3, r3, r2
 800702e:	19db      	adds	r3, r3, r7
 8007030:	2204      	movs	r2, #4
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e013      	b.n	800705e <UART_SetConfig+0x246>
 8007036:	231b      	movs	r3, #27
 8007038:	2220      	movs	r2, #32
 800703a:	189b      	adds	r3, r3, r2
 800703c:	19db      	adds	r3, r3, r7
 800703e:	2208      	movs	r2, #8
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e00c      	b.n	800705e <UART_SetConfig+0x246>
 8007044:	231b      	movs	r3, #27
 8007046:	2220      	movs	r2, #32
 8007048:	189b      	adds	r3, r3, r2
 800704a:	19db      	adds	r3, r3, r7
 800704c:	2210      	movs	r2, #16
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e005      	b.n	800705e <UART_SetConfig+0x246>
 8007052:	231b      	movs	r3, #27
 8007054:	2220      	movs	r2, #32
 8007056:	189b      	adds	r3, r3, r2
 8007058:	19db      	adds	r3, r3, r7
 800705a:	2210      	movs	r2, #16
 800705c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2b      	ldr	r2, [pc, #172]	@ (8007110 <UART_SetConfig+0x2f8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d000      	beq.n	800706a <UART_SetConfig+0x252>
 8007068:	e0a9      	b.n	80071be <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800706a:	231b      	movs	r3, #27
 800706c:	2220      	movs	r2, #32
 800706e:	189b      	adds	r3, r3, r2
 8007070:	19db      	adds	r3, r3, r7
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d015      	beq.n	80070a4 <UART_SetConfig+0x28c>
 8007078:	dc18      	bgt.n	80070ac <UART_SetConfig+0x294>
 800707a:	2b04      	cmp	r3, #4
 800707c:	d00d      	beq.n	800709a <UART_SetConfig+0x282>
 800707e:	dc15      	bgt.n	80070ac <UART_SetConfig+0x294>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <UART_SetConfig+0x272>
 8007084:	2b02      	cmp	r3, #2
 8007086:	d005      	beq.n	8007094 <UART_SetConfig+0x27c>
 8007088:	e010      	b.n	80070ac <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800708a:	f7fd fded 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 800708e:	0003      	movs	r3, r0
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007092:	e014      	b.n	80070be <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007094:	4b25      	ldr	r3, [pc, #148]	@ (800712c <UART_SetConfig+0x314>)
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007098:	e011      	b.n	80070be <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800709a:	f7fd fd59 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 800709e:	0003      	movs	r3, r0
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070a2:	e00c      	b.n	80070be <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070aa:	e008      	b.n	80070be <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80070b0:	231a      	movs	r3, #26
 80070b2:	2220      	movs	r2, #32
 80070b4:	189b      	adds	r3, r3, r2
 80070b6:	19db      	adds	r3, r3, r7
 80070b8:	2201      	movs	r2, #1
 80070ba:	701a      	strb	r2, [r3, #0]
        break;
 80070bc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d100      	bne.n	80070c6 <UART_SetConfig+0x2ae>
 80070c4:	e14b      	b.n	800735e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070ca:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <UART_SetConfig+0x318>)
 80070cc:	0052      	lsls	r2, r2, #1
 80070ce:	5ad3      	ldrh	r3, [r2, r3]
 80070d0:	0019      	movs	r1, r3
 80070d2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80070d4:	f7f9 f820 	bl	8000118 <__udivsi3>
 80070d8:	0003      	movs	r3, r0
 80070da:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	0013      	movs	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	189b      	adds	r3, r3, r2
 80070e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d305      	bcc.n	80070f8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d91d      	bls.n	8007134 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80070f8:	231a      	movs	r3, #26
 80070fa:	2220      	movs	r2, #32
 80070fc:	189b      	adds	r3, r3, r2
 80070fe:	19db      	adds	r3, r3, r7
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e12b      	b.n	800735e <UART_SetConfig+0x546>
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	cfff69f3 	.word	0xcfff69f3
 800710c:	ffffcfff 	.word	0xffffcfff
 8007110:	40008000 	.word	0x40008000
 8007114:	11fff4ff 	.word	0x11fff4ff
 8007118:	40013800 	.word	0x40013800
 800711c:	40021000 	.word	0x40021000
 8007120:	40004400 	.word	0x40004400
 8007124:	40004800 	.word	0x40004800
 8007128:	40004c00 	.word	0x40004c00
 800712c:	00f42400 	.word	0x00f42400
 8007130:	080084c4 	.word	0x080084c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	2300      	movs	r3, #0
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007140:	4b92      	ldr	r3, [pc, #584]	@ (800738c <UART_SetConfig+0x574>)
 8007142:	0052      	lsls	r2, r2, #1
 8007144:	5ad3      	ldrh	r3, [r2, r3]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	69b8      	ldr	r0, [r7, #24]
 8007152:	69f9      	ldr	r1, [r7, #28]
 8007154:	f7f9 f956 	bl	8000404 <__aeabi_uldivmod>
 8007158:	0002      	movs	r2, r0
 800715a:	000b      	movs	r3, r1
 800715c:	0e11      	lsrs	r1, r2, #24
 800715e:	021d      	lsls	r5, r3, #8
 8007160:	430d      	orrs	r5, r1
 8007162:	0214      	lsls	r4, r2, #8
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	60bb      	str	r3, [r7, #8]
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	1900      	adds	r0, r0, r4
 8007176:	4169      	adcs	r1, r5
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f7f9 f93d 	bl	8000404 <__aeabi_uldivmod>
 800718a:	0002      	movs	r2, r0
 800718c:	000b      	movs	r3, r1
 800718e:	0013      	movs	r3, r2
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007194:	23c0      	movs	r3, #192	@ 0xc0
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	429a      	cmp	r2, r3
 800719a:	d309      	bcc.n	80071b0 <UART_SetConfig+0x398>
 800719c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719e:	2380      	movs	r3, #128	@ 0x80
 80071a0:	035b      	lsls	r3, r3, #13
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d204      	bcs.n	80071b0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ac:	60da      	str	r2, [r3, #12]
 80071ae:	e0d6      	b.n	800735e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80071b0:	231a      	movs	r3, #26
 80071b2:	2220      	movs	r2, #32
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	19db      	adds	r3, r3, r7
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	e0cf      	b.n	800735e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	2380      	movs	r3, #128	@ 0x80
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d000      	beq.n	80071cc <UART_SetConfig+0x3b4>
 80071ca:	e070      	b.n	80072ae <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80071cc:	231b      	movs	r3, #27
 80071ce:	2220      	movs	r2, #32
 80071d0:	189b      	adds	r3, r3, r2
 80071d2:	19db      	adds	r3, r3, r7
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d015      	beq.n	8007206 <UART_SetConfig+0x3ee>
 80071da:	dc18      	bgt.n	800720e <UART_SetConfig+0x3f6>
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d00d      	beq.n	80071fc <UART_SetConfig+0x3e4>
 80071e0:	dc15      	bgt.n	800720e <UART_SetConfig+0x3f6>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <UART_SetConfig+0x3d4>
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d005      	beq.n	80071f6 <UART_SetConfig+0x3de>
 80071ea:	e010      	b.n	800720e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ec:	f7fd fd3c 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 80071f0:	0003      	movs	r3, r0
 80071f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071f4:	e014      	b.n	8007220 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f6:	4b66      	ldr	r3, [pc, #408]	@ (8007390 <UART_SetConfig+0x578>)
 80071f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071fa:	e011      	b.n	8007220 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071fc:	f7fd fca8 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8007200:	0003      	movs	r3, r0
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007204:	e00c      	b.n	8007220 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007206:	2380      	movs	r3, #128	@ 0x80
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800720c:	e008      	b.n	8007220 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007212:	231a      	movs	r3, #26
 8007214:	2220      	movs	r2, #32
 8007216:	189b      	adds	r3, r3, r2
 8007218:	19db      	adds	r3, r3, r7
 800721a:	2201      	movs	r2, #1
 800721c:	701a      	strb	r2, [r3, #0]
        break;
 800721e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007222:	2b00      	cmp	r3, #0
 8007224:	d100      	bne.n	8007228 <UART_SetConfig+0x410>
 8007226:	e09a      	b.n	800735e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800722c:	4b57      	ldr	r3, [pc, #348]	@ (800738c <UART_SetConfig+0x574>)
 800722e:	0052      	lsls	r2, r2, #1
 8007230:	5ad3      	ldrh	r3, [r2, r3]
 8007232:	0019      	movs	r1, r3
 8007234:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007236:	f7f8 ff6f 	bl	8000118 <__udivsi3>
 800723a:	0003      	movs	r3, r0
 800723c:	005a      	lsls	r2, r3, #1
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	18d2      	adds	r2, r2, r3
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	0019      	movs	r1, r3
 800724c:	0010      	movs	r0, r2
 800724e:	f7f8 ff63 	bl	8000118 <__udivsi3>
 8007252:	0003      	movs	r3, r0
 8007254:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	2b0f      	cmp	r3, #15
 800725a:	d921      	bls.n	80072a0 <UART_SetConfig+0x488>
 800725c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800725e:	2380      	movs	r3, #128	@ 0x80
 8007260:	025b      	lsls	r3, r3, #9
 8007262:	429a      	cmp	r2, r3
 8007264:	d21c      	bcs.n	80072a0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	b29a      	uxth	r2, r3
 800726a:	200e      	movs	r0, #14
 800726c:	2420      	movs	r4, #32
 800726e:	1903      	adds	r3, r0, r4
 8007270:	19db      	adds	r3, r3, r7
 8007272:	210f      	movs	r1, #15
 8007274:	438a      	bics	r2, r1
 8007276:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	b29b      	uxth	r3, r3
 800727e:	2207      	movs	r2, #7
 8007280:	4013      	ands	r3, r2
 8007282:	b299      	uxth	r1, r3
 8007284:	1903      	adds	r3, r0, r4
 8007286:	19db      	adds	r3, r3, r7
 8007288:	1902      	adds	r2, r0, r4
 800728a:	19d2      	adds	r2, r2, r7
 800728c:	8812      	ldrh	r2, [r2, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	1902      	adds	r2, r0, r4
 8007298:	19d2      	adds	r2, r2, r7
 800729a:	8812      	ldrh	r2, [r2, #0]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	e05e      	b.n	800735e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80072a0:	231a      	movs	r3, #26
 80072a2:	2220      	movs	r2, #32
 80072a4:	189b      	adds	r3, r3, r2
 80072a6:	19db      	adds	r3, r3, r7
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e057      	b.n	800735e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ae:	231b      	movs	r3, #27
 80072b0:	2220      	movs	r2, #32
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	19db      	adds	r3, r3, r7
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d015      	beq.n	80072e8 <UART_SetConfig+0x4d0>
 80072bc:	dc18      	bgt.n	80072f0 <UART_SetConfig+0x4d8>
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d00d      	beq.n	80072de <UART_SetConfig+0x4c6>
 80072c2:	dc15      	bgt.n	80072f0 <UART_SetConfig+0x4d8>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <UART_SetConfig+0x4b6>
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d005      	beq.n	80072d8 <UART_SetConfig+0x4c0>
 80072cc:	e010      	b.n	80072f0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ce:	f7fd fccb 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 80072d2:	0003      	movs	r3, r0
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072d6:	e014      	b.n	8007302 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007390 <UART_SetConfig+0x578>)
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072dc:	e011      	b.n	8007302 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072de:	f7fd fc37 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80072e2:	0003      	movs	r3, r0
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e6:	e00c      	b.n	8007302 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e8:	2380      	movs	r3, #128	@ 0x80
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ee:	e008      	b.n	8007302 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80072f4:	231a      	movs	r3, #26
 80072f6:	2220      	movs	r2, #32
 80072f8:	189b      	adds	r3, r3, r2
 80072fa:	19db      	adds	r3, r3, r7
 80072fc:	2201      	movs	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]
        break;
 8007300:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	2b00      	cmp	r3, #0
 8007306:	d02a      	beq.n	800735e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800730c:	4b1f      	ldr	r3, [pc, #124]	@ (800738c <UART_SetConfig+0x574>)
 800730e:	0052      	lsls	r2, r2, #1
 8007310:	5ad3      	ldrh	r3, [r2, r3]
 8007312:	0019      	movs	r1, r3
 8007314:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007316:	f7f8 feff 	bl	8000118 <__udivsi3>
 800731a:	0003      	movs	r3, r0
 800731c:	001a      	movs	r2, r3
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	18d2      	adds	r2, r2, r3
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	0019      	movs	r1, r3
 800732c:	0010      	movs	r0, r2
 800732e:	f7f8 fef3 	bl	8000118 <__udivsi3>
 8007332:	0003      	movs	r3, r0
 8007334:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	2b0f      	cmp	r3, #15
 800733a:	d90a      	bls.n	8007352 <UART_SetConfig+0x53a>
 800733c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733e:	2380      	movs	r3, #128	@ 0x80
 8007340:	025b      	lsls	r3, r3, #9
 8007342:	429a      	cmp	r2, r3
 8007344:	d205      	bcs.n	8007352 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	b29a      	uxth	r2, r3
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60da      	str	r2, [r3, #12]
 8007350:	e005      	b.n	800735e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007352:	231a      	movs	r3, #26
 8007354:	2220      	movs	r2, #32
 8007356:	189b      	adds	r3, r3, r2
 8007358:	19db      	adds	r3, r3, r7
 800735a:	2201      	movs	r2, #1
 800735c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	226a      	movs	r2, #106	@ 0x6a
 8007362:	2101      	movs	r1, #1
 8007364:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	2268      	movs	r2, #104	@ 0x68
 800736a:	2101      	movs	r1, #1
 800736c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	2200      	movs	r2, #0
 8007372:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	2200      	movs	r2, #0
 8007378:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800737a:	231a      	movs	r3, #26
 800737c:	2220      	movs	r2, #32
 800737e:	189b      	adds	r3, r3, r2
 8007380:	19db      	adds	r3, r3, r7
 8007382:	781b      	ldrb	r3, [r3, #0]
}
 8007384:	0018      	movs	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	b010      	add	sp, #64	@ 0x40
 800738a:	bdb0      	pop	{r4, r5, r7, pc}
 800738c:	080084c4 	.word	0x080084c4
 8007390:	00f42400 	.word	0x00f42400

08007394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	2208      	movs	r2, #8
 80073a2:	4013      	ands	r3, r2
 80073a4:	d00b      	beq.n	80073be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4a4a      	ldr	r2, [pc, #296]	@ (80074d8 <UART_AdvFeatureConfig+0x144>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	0019      	movs	r1, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	2201      	movs	r2, #1
 80073c4:	4013      	ands	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	4a43      	ldr	r2, [pc, #268]	@ (80074dc <UART_AdvFeatureConfig+0x148>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	0019      	movs	r1, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	2202      	movs	r2, #2
 80073e6:	4013      	ands	r3, r2
 80073e8:	d00b      	beq.n	8007402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a3b      	ldr	r2, [pc, #236]	@ (80074e0 <UART_AdvFeatureConfig+0x14c>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	0019      	movs	r1, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	2204      	movs	r2, #4
 8007408:	4013      	ands	r3, r2
 800740a:	d00b      	beq.n	8007424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	4a34      	ldr	r2, [pc, #208]	@ (80074e4 <UART_AdvFeatureConfig+0x150>)
 8007414:	4013      	ands	r3, r2
 8007416:	0019      	movs	r1, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007428:	2210      	movs	r2, #16
 800742a:	4013      	ands	r3, r2
 800742c:	d00b      	beq.n	8007446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	4a2c      	ldr	r2, [pc, #176]	@ (80074e8 <UART_AdvFeatureConfig+0x154>)
 8007436:	4013      	ands	r3, r2
 8007438:	0019      	movs	r1, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744a:	2220      	movs	r2, #32
 800744c:	4013      	ands	r3, r2
 800744e:	d00b      	beq.n	8007468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	4a25      	ldr	r2, [pc, #148]	@ (80074ec <UART_AdvFeatureConfig+0x158>)
 8007458:	4013      	ands	r3, r2
 800745a:	0019      	movs	r1, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746c:	2240      	movs	r2, #64	@ 0x40
 800746e:	4013      	ands	r3, r2
 8007470:	d01d      	beq.n	80074ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4a1d      	ldr	r2, [pc, #116]	@ (80074f0 <UART_AdvFeatureConfig+0x15c>)
 800747a:	4013      	ands	r3, r2
 800747c:	0019      	movs	r1, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800748e:	2380      	movs	r3, #128	@ 0x80
 8007490:	035b      	lsls	r3, r3, #13
 8007492:	429a      	cmp	r2, r3
 8007494:	d10b      	bne.n	80074ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <UART_AdvFeatureConfig+0x160>)
 800749e:	4013      	ands	r3, r2
 80074a0:	0019      	movs	r1, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	2280      	movs	r2, #128	@ 0x80
 80074b4:	4013      	ands	r3, r2
 80074b6:	d00b      	beq.n	80074d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4a0e      	ldr	r2, [pc, #56]	@ (80074f8 <UART_AdvFeatureConfig+0x164>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	0019      	movs	r1, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }
}
 80074d0:	46c0      	nop			@ (mov r8, r8)
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b002      	add	sp, #8
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	ffff7fff 	.word	0xffff7fff
 80074dc:	fffdffff 	.word	0xfffdffff
 80074e0:	fffeffff 	.word	0xfffeffff
 80074e4:	fffbffff 	.word	0xfffbffff
 80074e8:	ffffefff 	.word	0xffffefff
 80074ec:	ffffdfff 	.word	0xffffdfff
 80074f0:	ffefffff 	.word	0xffefffff
 80074f4:	ff9fffff 	.word	0xff9fffff
 80074f8:	fff7ffff 	.word	0xfff7ffff

080074fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b092      	sub	sp, #72	@ 0x48
 8007500:	af02      	add	r7, sp, #8
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2290      	movs	r2, #144	@ 0x90
 8007508:	2100      	movs	r1, #0
 800750a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800750c:	f7fa fd2e 	bl	8001f6c <HAL_GetTick>
 8007510:	0003      	movs	r3, r0
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2208      	movs	r2, #8
 800751c:	4013      	ands	r3, r2
 800751e:	2b08      	cmp	r3, #8
 8007520:	d12d      	bne.n	800757e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007524:	2280      	movs	r2, #128	@ 0x80
 8007526:	0391      	lsls	r1, r2, #14
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4a47      	ldr	r2, [pc, #284]	@ (8007648 <UART_CheckIdleState+0x14c>)
 800752c:	9200      	str	r2, [sp, #0]
 800752e:	2200      	movs	r2, #0
 8007530:	f000 f88e 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8007534:	1e03      	subs	r3, r0, #0
 8007536:	d022      	beq.n	800757e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007538:	f3ef 8310 	mrs	r3, PRIMASK
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007540:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007542:	2301      	movs	r3, #1
 8007544:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	f383 8810 	msr	PRIMASK, r3
}
 800754c:	46c0      	nop			@ (mov r8, r8)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2180      	movs	r1, #128	@ 0x80
 800755a:	438a      	bics	r2, r1
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007564:	f383 8810 	msr	PRIMASK, r3
}
 8007568:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2288      	movs	r2, #136	@ 0x88
 800756e:	2120      	movs	r1, #32
 8007570:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2284      	movs	r2, #132	@ 0x84
 8007576:	2100      	movs	r1, #0
 8007578:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e060      	b.n	8007640 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2204      	movs	r2, #4
 8007586:	4013      	ands	r3, r2
 8007588:	2b04      	cmp	r3, #4
 800758a:	d146      	bne.n	800761a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758e:	2280      	movs	r2, #128	@ 0x80
 8007590:	03d1      	lsls	r1, r2, #15
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4a2c      	ldr	r2, [pc, #176]	@ (8007648 <UART_CheckIdleState+0x14c>)
 8007596:	9200      	str	r2, [sp, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	f000 f859 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 800759e:	1e03      	subs	r3, r0, #0
 80075a0:	d03b      	beq.n	800761a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a2:	f3ef 8310 	mrs	r3, PRIMASK
 80075a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80075a8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ac:	2301      	movs	r3, #1
 80075ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f383 8810 	msr	PRIMASK, r3
}
 80075b6:	46c0      	nop			@ (mov r8, r8)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4922      	ldr	r1, [pc, #136]	@ (800764c <UART_CheckIdleState+0x150>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f383 8810 	msr	PRIMASK, r3
}
 80075d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d4:	f3ef 8310 	mrs	r3, PRIMASK
 80075d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80075da:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80075de:	2301      	movs	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f383 8810 	msr	PRIMASK, r3
}
 80075e8:	46c0      	nop			@ (mov r8, r8)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2101      	movs	r1, #1
 80075f6:	438a      	bics	r2, r1
 80075f8:	609a      	str	r2, [r3, #8]
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f383 8810 	msr	PRIMASK, r3
}
 8007604:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	228c      	movs	r2, #140	@ 0x8c
 800760a:	2120      	movs	r1, #32
 800760c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2284      	movs	r2, #132	@ 0x84
 8007612:	2100      	movs	r1, #0
 8007614:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e012      	b.n	8007640 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2288      	movs	r2, #136	@ 0x88
 800761e:	2120      	movs	r1, #32
 8007620:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	228c      	movs	r2, #140	@ 0x8c
 8007626:	2120      	movs	r1, #32
 8007628:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2284      	movs	r2, #132	@ 0x84
 800763a:	2100      	movs	r1, #0
 800763c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b010      	add	sp, #64	@ 0x40
 8007646:	bd80      	pop	{r7, pc}
 8007648:	01ffffff 	.word	0x01ffffff
 800764c:	fffffedf 	.word	0xfffffedf

08007650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	1dfb      	adds	r3, r7, #7
 800765e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	e051      	b.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	3301      	adds	r3, #1
 8007666:	d04e      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007668:	f7fa fc80 	bl	8001f6c <HAL_GetTick>
 800766c:	0002      	movs	r2, r0
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e051      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2204      	movs	r2, #4
 800768a:	4013      	ands	r3, r2
 800768c:	d03b      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb6>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b80      	cmp	r3, #128	@ 0x80
 8007692:	d038      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b40      	cmp	r3, #64	@ 0x40
 8007698:	d035      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	2208      	movs	r2, #8
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d111      	bne.n	80076cc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2208      	movs	r2, #8
 80076ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 f83c 	bl	8007730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2290      	movs	r2, #144	@ 0x90
 80076bc:	2108      	movs	r1, #8
 80076be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2284      	movs	r2, #132	@ 0x84
 80076c4:	2100      	movs	r1, #0
 80076c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e02c      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	2380      	movs	r3, #128	@ 0x80
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	401a      	ands	r2, r3
 80076d8:	2380      	movs	r3, #128	@ 0x80
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	429a      	cmp	r2, r3
 80076de:	d112      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2280      	movs	r2, #128	@ 0x80
 80076e6:	0112      	lsls	r2, r2, #4
 80076e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	0018      	movs	r0, r3
 80076ee:	f000 f81f 	bl	8007730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2290      	movs	r2, #144	@ 0x90
 80076f6:	2120      	movs	r1, #32
 80076f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2284      	movs	r2, #132	@ 0x84
 80076fe:	2100      	movs	r1, #0
 8007700:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e00f      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	425a      	negs	r2, r3
 8007716:	4153      	adcs	r3, r2
 8007718:	b2db      	uxtb	r3, r3
 800771a:	001a      	movs	r2, r3
 800771c:	1dfb      	adds	r3, r7, #7
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d09e      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	0018      	movs	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	b004      	add	sp, #16
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08e      	sub	sp, #56	@ 0x38
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	617b      	str	r3, [r7, #20]
  return(result);
 800773e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
 8007742:	2301      	movs	r3, #1
 8007744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			@ (mov r8, r8)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4926      	ldr	r1, [pc, #152]	@ (80077f4 <UART_EndRxTransfer+0xc4>)
 800775a:	400a      	ands	r2, r1
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	f383 8810 	msr	PRIMASK, r3
}
 8007768:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776a:	f3ef 8310 	mrs	r3, PRIMASK
 800776e:	623b      	str	r3, [r7, #32]
  return(result);
 8007770:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30
 8007774:	2301      	movs	r3, #1
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	491b      	ldr	r1, [pc, #108]	@ (80077f8 <UART_EndRxTransfer+0xc8>)
 800778c:	400a      	ands	r2, r1
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d118      	bne.n	80077d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a4:	f3ef 8310 	mrs	r3, PRIMASK
 80077a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80077aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ae:	2301      	movs	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f383 8810 	msr	PRIMASK, r3
}
 80077b8:	46c0      	nop			@ (mov r8, r8)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2110      	movs	r1, #16
 80077c6:	438a      	bics	r2, r1
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f383 8810 	msr	PRIMASK, r3
}
 80077d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	228c      	movs	r2, #140	@ 0x8c
 80077da:	2120      	movs	r1, #32
 80077dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077ea:	46c0      	nop			@ (mov r8, r8)
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b00e      	add	sp, #56	@ 0x38
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	46c0      	nop			@ (mov r8, r8)
 80077f4:	fffffedf 	.word	0xfffffedf
 80077f8:	effffffe 	.word	0xeffffffe

080077fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2284      	movs	r2, #132	@ 0x84
 8007808:	5c9b      	ldrb	r3, [r3, r2]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UARTEx_DisableFifoMode+0x16>
 800780e:	2302      	movs	r3, #2
 8007810:	e027      	b.n	8007862 <HAL_UARTEx_DisableFifoMode+0x66>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2284      	movs	r2, #132	@ 0x84
 8007816:	2101      	movs	r1, #1
 8007818:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2288      	movs	r2, #136	@ 0x88
 800781e:	2124      	movs	r1, #36	@ 0x24
 8007820:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2101      	movs	r1, #1
 8007836:	438a      	bics	r2, r1
 8007838:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4a0b      	ldr	r2, [pc, #44]	@ (800786c <HAL_UARTEx_DisableFifoMode+0x70>)
 800783e:	4013      	ands	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2288      	movs	r2, #136	@ 0x88
 8007854:	2120      	movs	r1, #32
 8007856:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2284      	movs	r2, #132	@ 0x84
 800785c:	2100      	movs	r1, #0
 800785e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	0018      	movs	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	b004      	add	sp, #16
 8007868:	bd80      	pop	{r7, pc}
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	dfffffff 	.word	0xdfffffff

08007870 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2284      	movs	r2, #132	@ 0x84
 800787e:	5c9b      	ldrb	r3, [r3, r2]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007884:	2302      	movs	r3, #2
 8007886:	e02e      	b.n	80078e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2284      	movs	r2, #132	@ 0x84
 800788c:	2101      	movs	r1, #1
 800788e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2288      	movs	r2, #136	@ 0x88
 8007894:	2124      	movs	r1, #36	@ 0x24
 8007896:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2101      	movs	r1, #1
 80078ac:	438a      	bics	r2, r1
 80078ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	08d9      	lsrs	r1, r3, #3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	0018      	movs	r0, r3
 80078c8:	f000 f854 	bl	8007974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2288      	movs	r2, #136	@ 0x88
 80078d8:	2120      	movs	r1, #32
 80078da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2284      	movs	r2, #132	@ 0x84
 80078e0:	2100      	movs	r1, #0
 80078e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	0018      	movs	r0, r3
 80078e8:	46bd      	mov	sp, r7
 80078ea:	b004      	add	sp, #16
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2284      	movs	r2, #132	@ 0x84
 80078fe:	5c9b      	ldrb	r3, [r3, r2]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007904:	2302      	movs	r3, #2
 8007906:	e02f      	b.n	8007968 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2284      	movs	r2, #132	@ 0x84
 800790c:	2101      	movs	r1, #1
 800790e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2288      	movs	r2, #136	@ 0x88
 8007914:	2124      	movs	r1, #36	@ 0x24
 8007916:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	438a      	bics	r2, r1
 800792e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	4a0e      	ldr	r2, [pc, #56]	@ (8007970 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007938:	4013      	ands	r3, r2
 800793a:	0019      	movs	r1, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	0018      	movs	r0, r3
 800794a:	f000 f813 	bl	8007974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2288      	movs	r2, #136	@ 0x88
 800795a:	2120      	movs	r1, #32
 800795c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2284      	movs	r2, #132	@ 0x84
 8007962:	2100      	movs	r1, #0
 8007964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b004      	add	sp, #16
 800796e:	bd80      	pop	{r7, pc}
 8007970:	f1ffffff 	.word	0xf1ffffff

08007974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007980:	2b00      	cmp	r3, #0
 8007982:	d108      	bne.n	8007996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	226a      	movs	r2, #106	@ 0x6a
 8007988:	2101      	movs	r1, #1
 800798a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2268      	movs	r2, #104	@ 0x68
 8007990:	2101      	movs	r1, #1
 8007992:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007994:	e043      	b.n	8007a1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007996:	260f      	movs	r6, #15
 8007998:	19bb      	adds	r3, r7, r6
 800799a:	2208      	movs	r2, #8
 800799c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800799e:	200e      	movs	r0, #14
 80079a0:	183b      	adds	r3, r7, r0
 80079a2:	2208      	movs	r2, #8
 80079a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	0e5b      	lsrs	r3, r3, #25
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	240d      	movs	r4, #13
 80079b2:	193b      	adds	r3, r7, r4
 80079b4:	2107      	movs	r1, #7
 80079b6:	400a      	ands	r2, r1
 80079b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	0f5b      	lsrs	r3, r3, #29
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	250c      	movs	r5, #12
 80079c6:	197b      	adds	r3, r7, r5
 80079c8:	2107      	movs	r1, #7
 80079ca:	400a      	ands	r2, r1
 80079cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079ce:	183b      	adds	r3, r7, r0
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	197a      	adds	r2, r7, r5
 80079d4:	7812      	ldrb	r2, [r2, #0]
 80079d6:	4914      	ldr	r1, [pc, #80]	@ (8007a28 <UARTEx_SetNbDataToProcess+0xb4>)
 80079d8:	5c8a      	ldrb	r2, [r1, r2]
 80079da:	435a      	muls	r2, r3
 80079dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80079de:	197b      	adds	r3, r7, r5
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	4a12      	ldr	r2, [pc, #72]	@ (8007a2c <UARTEx_SetNbDataToProcess+0xb8>)
 80079e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079e6:	0019      	movs	r1, r3
 80079e8:	f7f8 fc20 	bl	800022c <__divsi3>
 80079ec:	0003      	movs	r3, r0
 80079ee:	b299      	uxth	r1, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	226a      	movs	r2, #106	@ 0x6a
 80079f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079f6:	19bb      	adds	r3, r7, r6
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	193a      	adds	r2, r7, r4
 80079fc:	7812      	ldrb	r2, [r2, #0]
 80079fe:	490a      	ldr	r1, [pc, #40]	@ (8007a28 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a00:	5c8a      	ldrb	r2, [r1, r2]
 8007a02:	435a      	muls	r2, r3
 8007a04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a06:	193b      	adds	r3, r7, r4
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	4a08      	ldr	r2, [pc, #32]	@ (8007a2c <UARTEx_SetNbDataToProcess+0xb8>)
 8007a0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a0e:	0019      	movs	r1, r3
 8007a10:	f7f8 fc0c 	bl	800022c <__divsi3>
 8007a14:	0003      	movs	r3, r0
 8007a16:	b299      	uxth	r1, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2268      	movs	r2, #104	@ 0x68
 8007a1c:	5299      	strh	r1, [r3, r2]
}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	46bd      	mov	sp, r7
 8007a22:	b005      	add	sp, #20
 8007a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	080084dc 	.word	0x080084dc
 8007a2c:	080084e4 	.word	0x080084e4

08007a30 <siprintf>:
 8007a30:	b40e      	push	{r1, r2, r3}
 8007a32:	b510      	push	{r4, lr}
 8007a34:	2400      	movs	r4, #0
 8007a36:	490c      	ldr	r1, [pc, #48]	@ (8007a68 <siprintf+0x38>)
 8007a38:	b09d      	sub	sp, #116	@ 0x74
 8007a3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007a3c:	9002      	str	r0, [sp, #8]
 8007a3e:	9006      	str	r0, [sp, #24]
 8007a40:	9107      	str	r1, [sp, #28]
 8007a42:	9104      	str	r1, [sp, #16]
 8007a44:	4809      	ldr	r0, [pc, #36]	@ (8007a6c <siprintf+0x3c>)
 8007a46:	490a      	ldr	r1, [pc, #40]	@ (8007a70 <siprintf+0x40>)
 8007a48:	cb04      	ldmia	r3!, {r2}
 8007a4a:	9105      	str	r1, [sp, #20]
 8007a4c:	6800      	ldr	r0, [r0, #0]
 8007a4e:	a902      	add	r1, sp, #8
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007a54:	f000 f99e 	bl	8007d94 <_svfiprintf_r>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	701c      	strb	r4, [r3, #0]
 8007a5c:	b01d      	add	sp, #116	@ 0x74
 8007a5e:	bc10      	pop	{r4}
 8007a60:	bc08      	pop	{r3}
 8007a62:	b003      	add	sp, #12
 8007a64:	4718      	bx	r3
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	7fffffff 	.word	0x7fffffff
 8007a6c:	20000028 	.word	0x20000028
 8007a70:	ffff0208 	.word	0xffff0208

08007a74 <memset>:
 8007a74:	0003      	movs	r3, r0
 8007a76:	1882      	adds	r2, r0, r2
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d100      	bne.n	8007a7e <memset+0xa>
 8007a7c:	4770      	bx	lr
 8007a7e:	7019      	strb	r1, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	e7f9      	b.n	8007a78 <memset+0x4>

08007a84 <__errno>:
 8007a84:	4b01      	ldr	r3, [pc, #4]	@ (8007a8c <__errno+0x8>)
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	4770      	bx	lr
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	20000028 	.word	0x20000028

08007a90 <__libc_init_array>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	2600      	movs	r6, #0
 8007a94:	4c0c      	ldr	r4, [pc, #48]	@ (8007ac8 <__libc_init_array+0x38>)
 8007a96:	4d0d      	ldr	r5, [pc, #52]	@ (8007acc <__libc_init_array+0x3c>)
 8007a98:	1b64      	subs	r4, r4, r5
 8007a9a:	10a4      	asrs	r4, r4, #2
 8007a9c:	42a6      	cmp	r6, r4
 8007a9e:	d109      	bne.n	8007ab4 <__libc_init_array+0x24>
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	f000 fc61 	bl	8008368 <_init>
 8007aa6:	4c0a      	ldr	r4, [pc, #40]	@ (8007ad0 <__libc_init_array+0x40>)
 8007aa8:	4d0a      	ldr	r5, [pc, #40]	@ (8007ad4 <__libc_init_array+0x44>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	42a6      	cmp	r6, r4
 8007ab0:	d105      	bne.n	8007abe <__libc_init_array+0x2e>
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	00b3      	lsls	r3, r6, #2
 8007ab6:	58eb      	ldr	r3, [r5, r3]
 8007ab8:	4798      	blx	r3
 8007aba:	3601      	adds	r6, #1
 8007abc:	e7ee      	b.n	8007a9c <__libc_init_array+0xc>
 8007abe:	00b3      	lsls	r3, r6, #2
 8007ac0:	58eb      	ldr	r3, [r5, r3]
 8007ac2:	4798      	blx	r3
 8007ac4:	3601      	adds	r6, #1
 8007ac6:	e7f2      	b.n	8007aae <__libc_init_array+0x1e>
 8007ac8:	08008528 	.word	0x08008528
 8007acc:	08008528 	.word	0x08008528
 8007ad0:	0800852c 	.word	0x0800852c
 8007ad4:	08008528 	.word	0x08008528

08007ad8 <__retarget_lock_acquire_recursive>:
 8007ad8:	4770      	bx	lr

08007ada <__retarget_lock_release_recursive>:
 8007ada:	4770      	bx	lr

08007adc <_free_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	0005      	movs	r5, r0
 8007ae0:	1e0c      	subs	r4, r1, #0
 8007ae2:	d010      	beq.n	8007b06 <_free_r+0x2a>
 8007ae4:	3c04      	subs	r4, #4
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da00      	bge.n	8007aee <_free_r+0x12>
 8007aec:	18e4      	adds	r4, r4, r3
 8007aee:	0028      	movs	r0, r5
 8007af0:	f000 f8e0 	bl	8007cb4 <__malloc_lock>
 8007af4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b6c <_free_r+0x90>)
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d105      	bne.n	8007b08 <_free_r+0x2c>
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	6014      	str	r4, [r2, #0]
 8007b00:	0028      	movs	r0, r5
 8007b02:	f000 f8df 	bl	8007cc4 <__malloc_unlock>
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d908      	bls.n	8007b1e <_free_r+0x42>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	1821      	adds	r1, r4, r0
 8007b10:	428b      	cmp	r3, r1
 8007b12:	d1f3      	bne.n	8007afc <_free_r+0x20>
 8007b14:	6819      	ldr	r1, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	1809      	adds	r1, r1, r0
 8007b1a:	6021      	str	r1, [r4, #0]
 8007b1c:	e7ee      	b.n	8007afc <_free_r+0x20>
 8007b1e:	001a      	movs	r2, r3
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <_free_r+0x4e>
 8007b26:	42a3      	cmp	r3, r4
 8007b28:	d9f9      	bls.n	8007b1e <_free_r+0x42>
 8007b2a:	6811      	ldr	r1, [r2, #0]
 8007b2c:	1850      	adds	r0, r2, r1
 8007b2e:	42a0      	cmp	r0, r4
 8007b30:	d10b      	bne.n	8007b4a <_free_r+0x6e>
 8007b32:	6820      	ldr	r0, [r4, #0]
 8007b34:	1809      	adds	r1, r1, r0
 8007b36:	1850      	adds	r0, r2, r1
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	4283      	cmp	r3, r0
 8007b3c:	d1e0      	bne.n	8007b00 <_free_r+0x24>
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	1841      	adds	r1, r0, r1
 8007b44:	6011      	str	r1, [r2, #0]
 8007b46:	6053      	str	r3, [r2, #4]
 8007b48:	e7da      	b.n	8007b00 <_free_r+0x24>
 8007b4a:	42a0      	cmp	r0, r4
 8007b4c:	d902      	bls.n	8007b54 <_free_r+0x78>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	e7d5      	b.n	8007b00 <_free_r+0x24>
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	1821      	adds	r1, r4, r0
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	d103      	bne.n	8007b64 <_free_r+0x88>
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	1809      	adds	r1, r1, r0
 8007b62:	6021      	str	r1, [r4, #0]
 8007b64:	6063      	str	r3, [r4, #4]
 8007b66:	6054      	str	r4, [r2, #4]
 8007b68:	e7ca      	b.n	8007b00 <_free_r+0x24>
 8007b6a:	46c0      	nop			@ (mov r8, r8)
 8007b6c:	2000051c 	.word	0x2000051c

08007b70 <sbrk_aligned>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	4e0f      	ldr	r6, [pc, #60]	@ (8007bb0 <sbrk_aligned+0x40>)
 8007b74:	000d      	movs	r5, r1
 8007b76:	6831      	ldr	r1, [r6, #0]
 8007b78:	0004      	movs	r4, r0
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	d102      	bne.n	8007b84 <sbrk_aligned+0x14>
 8007b7e:	f000 fb95 	bl	80082ac <_sbrk_r>
 8007b82:	6030      	str	r0, [r6, #0]
 8007b84:	0029      	movs	r1, r5
 8007b86:	0020      	movs	r0, r4
 8007b88:	f000 fb90 	bl	80082ac <_sbrk_r>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d103      	bne.n	8007b98 <sbrk_aligned+0x28>
 8007b90:	2501      	movs	r5, #1
 8007b92:	426d      	negs	r5, r5
 8007b94:	0028      	movs	r0, r5
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	2303      	movs	r3, #3
 8007b9a:	1cc5      	adds	r5, r0, #3
 8007b9c:	439d      	bics	r5, r3
 8007b9e:	42a8      	cmp	r0, r5
 8007ba0:	d0f8      	beq.n	8007b94 <sbrk_aligned+0x24>
 8007ba2:	1a29      	subs	r1, r5, r0
 8007ba4:	0020      	movs	r0, r4
 8007ba6:	f000 fb81 	bl	80082ac <_sbrk_r>
 8007baa:	3001      	adds	r0, #1
 8007bac:	d1f2      	bne.n	8007b94 <sbrk_aligned+0x24>
 8007bae:	e7ef      	b.n	8007b90 <sbrk_aligned+0x20>
 8007bb0:	20000518 	.word	0x20000518

08007bb4 <_malloc_r>:
 8007bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	1ccb      	adds	r3, r1, #3
 8007bba:	4393      	bics	r3, r2
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	0005      	movs	r5, r0
 8007bc0:	001f      	movs	r7, r3
 8007bc2:	2b0c      	cmp	r3, #12
 8007bc4:	d234      	bcs.n	8007c30 <_malloc_r+0x7c>
 8007bc6:	270c      	movs	r7, #12
 8007bc8:	42b9      	cmp	r1, r7
 8007bca:	d833      	bhi.n	8007c34 <_malloc_r+0x80>
 8007bcc:	0028      	movs	r0, r5
 8007bce:	f000 f871 	bl	8007cb4 <__malloc_lock>
 8007bd2:	4e37      	ldr	r6, [pc, #220]	@ (8007cb0 <_malloc_r+0xfc>)
 8007bd4:	6833      	ldr	r3, [r6, #0]
 8007bd6:	001c      	movs	r4, r3
 8007bd8:	2c00      	cmp	r4, #0
 8007bda:	d12f      	bne.n	8007c3c <_malloc_r+0x88>
 8007bdc:	0039      	movs	r1, r7
 8007bde:	0028      	movs	r0, r5
 8007be0:	f7ff ffc6 	bl	8007b70 <sbrk_aligned>
 8007be4:	0004      	movs	r4, r0
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	d15f      	bne.n	8007caa <_malloc_r+0xf6>
 8007bea:	6834      	ldr	r4, [r6, #0]
 8007bec:	9400      	str	r4, [sp, #0]
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d14a      	bne.n	8007c8a <_malloc_r+0xd6>
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	d052      	beq.n	8007c9e <_malloc_r+0xea>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	0028      	movs	r0, r5
 8007bfc:	18e3      	adds	r3, r4, r3
 8007bfe:	9900      	ldr	r1, [sp, #0]
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	f000 fb53 	bl	80082ac <_sbrk_r>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	4283      	cmp	r3, r0
 8007c0a:	d148      	bne.n	8007c9e <_malloc_r+0xea>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	0028      	movs	r0, r5
 8007c10:	1aff      	subs	r7, r7, r3
 8007c12:	0039      	movs	r1, r7
 8007c14:	f7ff ffac 	bl	8007b70 <sbrk_aligned>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d040      	beq.n	8007c9e <_malloc_r+0xea>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	19db      	adds	r3, r3, r7
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	6833      	ldr	r3, [r6, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	d133      	bne.n	8007c92 <_malloc_r+0xde>
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	e019      	b.n	8007c64 <_malloc_r+0xb0>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dac9      	bge.n	8007bc8 <_malloc_r+0x14>
 8007c34:	230c      	movs	r3, #12
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	2000      	movs	r0, #0
 8007c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c3c:	6821      	ldr	r1, [r4, #0]
 8007c3e:	1bc9      	subs	r1, r1, r7
 8007c40:	d420      	bmi.n	8007c84 <_malloc_r+0xd0>
 8007c42:	290b      	cmp	r1, #11
 8007c44:	d90a      	bls.n	8007c5c <_malloc_r+0xa8>
 8007c46:	19e2      	adds	r2, r4, r7
 8007c48:	6027      	str	r7, [r4, #0]
 8007c4a:	42a3      	cmp	r3, r4
 8007c4c:	d104      	bne.n	8007c58 <_malloc_r+0xa4>
 8007c4e:	6032      	str	r2, [r6, #0]
 8007c50:	6863      	ldr	r3, [r4, #4]
 8007c52:	6011      	str	r1, [r2, #0]
 8007c54:	6053      	str	r3, [r2, #4]
 8007c56:	e005      	b.n	8007c64 <_malloc_r+0xb0>
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	e7f9      	b.n	8007c50 <_malloc_r+0x9c>
 8007c5c:	6862      	ldr	r2, [r4, #4]
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	d10e      	bne.n	8007c80 <_malloc_r+0xcc>
 8007c62:	6032      	str	r2, [r6, #0]
 8007c64:	0028      	movs	r0, r5
 8007c66:	f000 f82d 	bl	8007cc4 <__malloc_unlock>
 8007c6a:	0020      	movs	r0, r4
 8007c6c:	2207      	movs	r2, #7
 8007c6e:	300b      	adds	r0, #11
 8007c70:	1d23      	adds	r3, r4, #4
 8007c72:	4390      	bics	r0, r2
 8007c74:	1ac2      	subs	r2, r0, r3
 8007c76:	4298      	cmp	r0, r3
 8007c78:	d0df      	beq.n	8007c3a <_malloc_r+0x86>
 8007c7a:	1a1b      	subs	r3, r3, r0
 8007c7c:	50a3      	str	r3, [r4, r2]
 8007c7e:	e7dc      	b.n	8007c3a <_malloc_r+0x86>
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	e7ef      	b.n	8007c64 <_malloc_r+0xb0>
 8007c84:	0023      	movs	r3, r4
 8007c86:	6864      	ldr	r4, [r4, #4]
 8007c88:	e7a6      	b.n	8007bd8 <_malloc_r+0x24>
 8007c8a:	9c00      	ldr	r4, [sp, #0]
 8007c8c:	6863      	ldr	r3, [r4, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	e7ad      	b.n	8007bee <_malloc_r+0x3a>
 8007c92:	001a      	movs	r2, r3
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	d1fb      	bne.n	8007c92 <_malloc_r+0xde>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e7da      	b.n	8007c54 <_malloc_r+0xa0>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	0028      	movs	r0, r5
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f000 f80e 	bl	8007cc4 <__malloc_unlock>
 8007ca8:	e7c6      	b.n	8007c38 <_malloc_r+0x84>
 8007caa:	6007      	str	r7, [r0, #0]
 8007cac:	e7da      	b.n	8007c64 <_malloc_r+0xb0>
 8007cae:	46c0      	nop			@ (mov r8, r8)
 8007cb0:	2000051c 	.word	0x2000051c

08007cb4 <__malloc_lock>:
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	4802      	ldr	r0, [pc, #8]	@ (8007cc0 <__malloc_lock+0xc>)
 8007cb8:	f7ff ff0e 	bl	8007ad8 <__retarget_lock_acquire_recursive>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	46c0      	nop			@ (mov r8, r8)
 8007cc0:	20000514 	.word	0x20000514

08007cc4 <__malloc_unlock>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4802      	ldr	r0, [pc, #8]	@ (8007cd0 <__malloc_unlock+0xc>)
 8007cc8:	f7ff ff07 	bl	8007ada <__retarget_lock_release_recursive>
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	46c0      	nop			@ (mov r8, r8)
 8007cd0:	20000514 	.word	0x20000514

08007cd4 <__ssputs_r>:
 8007cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd6:	688e      	ldr	r6, [r1, #8]
 8007cd8:	b085      	sub	sp, #20
 8007cda:	001f      	movs	r7, r3
 8007cdc:	000c      	movs	r4, r1
 8007cde:	680b      	ldr	r3, [r1, #0]
 8007ce0:	9002      	str	r0, [sp, #8]
 8007ce2:	9203      	str	r2, [sp, #12]
 8007ce4:	42be      	cmp	r6, r7
 8007ce6:	d830      	bhi.n	8007d4a <__ssputs_r+0x76>
 8007ce8:	210c      	movs	r1, #12
 8007cea:	5e62      	ldrsh	r2, [r4, r1]
 8007cec:	2190      	movs	r1, #144	@ 0x90
 8007cee:	00c9      	lsls	r1, r1, #3
 8007cf0:	420a      	tst	r2, r1
 8007cf2:	d028      	beq.n	8007d46 <__ssputs_r+0x72>
 8007cf4:	2003      	movs	r0, #3
 8007cf6:	6921      	ldr	r1, [r4, #16]
 8007cf8:	1a5b      	subs	r3, r3, r1
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	6963      	ldr	r3, [r4, #20]
 8007cfe:	4343      	muls	r3, r0
 8007d00:	9801      	ldr	r0, [sp, #4]
 8007d02:	0fdd      	lsrs	r5, r3, #31
 8007d04:	18ed      	adds	r5, r5, r3
 8007d06:	1c7b      	adds	r3, r7, #1
 8007d08:	181b      	adds	r3, r3, r0
 8007d0a:	106d      	asrs	r5, r5, #1
 8007d0c:	42ab      	cmp	r3, r5
 8007d0e:	d900      	bls.n	8007d12 <__ssputs_r+0x3e>
 8007d10:	001d      	movs	r5, r3
 8007d12:	0552      	lsls	r2, r2, #21
 8007d14:	d528      	bpl.n	8007d68 <__ssputs_r+0x94>
 8007d16:	0029      	movs	r1, r5
 8007d18:	9802      	ldr	r0, [sp, #8]
 8007d1a:	f7ff ff4b 	bl	8007bb4 <_malloc_r>
 8007d1e:	1e06      	subs	r6, r0, #0
 8007d20:	d02c      	beq.n	8007d7c <__ssputs_r+0xa8>
 8007d22:	9a01      	ldr	r2, [sp, #4]
 8007d24:	6921      	ldr	r1, [r4, #16]
 8007d26:	f000 fade 	bl	80082e6 <memcpy>
 8007d2a:	89a2      	ldrh	r2, [r4, #12]
 8007d2c:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <__ssputs_r+0xbc>)
 8007d2e:	401a      	ands	r2, r3
 8007d30:	2380      	movs	r3, #128	@ 0x80
 8007d32:	4313      	orrs	r3, r2
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	6126      	str	r6, [r4, #16]
 8007d3a:	18f6      	adds	r6, r6, r3
 8007d3c:	6026      	str	r6, [r4, #0]
 8007d3e:	003e      	movs	r6, r7
 8007d40:	6165      	str	r5, [r4, #20]
 8007d42:	1aed      	subs	r5, r5, r3
 8007d44:	60a5      	str	r5, [r4, #8]
 8007d46:	42be      	cmp	r6, r7
 8007d48:	d900      	bls.n	8007d4c <__ssputs_r+0x78>
 8007d4a:	003e      	movs	r6, r7
 8007d4c:	0032      	movs	r2, r6
 8007d4e:	9903      	ldr	r1, [sp, #12]
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	f000 fa99 	bl	8008288 <memmove>
 8007d56:	2000      	movs	r0, #0
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	1b9b      	subs	r3, r3, r6
 8007d5c:	60a3      	str	r3, [r4, #8]
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	199b      	adds	r3, r3, r6
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	b005      	add	sp, #20
 8007d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d68:	002a      	movs	r2, r5
 8007d6a:	9802      	ldr	r0, [sp, #8]
 8007d6c:	f000 fac4 	bl	80082f8 <_realloc_r>
 8007d70:	1e06      	subs	r6, r0, #0
 8007d72:	d1e0      	bne.n	8007d36 <__ssputs_r+0x62>
 8007d74:	6921      	ldr	r1, [r4, #16]
 8007d76:	9802      	ldr	r0, [sp, #8]
 8007d78:	f7ff feb0 	bl	8007adc <_free_r>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	2001      	movs	r0, #1
 8007d80:	9a02      	ldr	r2, [sp, #8]
 8007d82:	4240      	negs	r0, r0
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	89a2      	ldrh	r2, [r4, #12]
 8007d88:	3334      	adds	r3, #52	@ 0x34
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	e7e9      	b.n	8007d64 <__ssputs_r+0x90>
 8007d90:	fffffb7f 	.word	0xfffffb7f

08007d94 <_svfiprintf_r>:
 8007d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d96:	b0a1      	sub	sp, #132	@ 0x84
 8007d98:	9003      	str	r0, [sp, #12]
 8007d9a:	001d      	movs	r5, r3
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	000f      	movs	r7, r1
 8007da0:	0016      	movs	r6, r2
 8007da2:	061b      	lsls	r3, r3, #24
 8007da4:	d511      	bpl.n	8007dca <_svfiprintf_r+0x36>
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10e      	bne.n	8007dca <_svfiprintf_r+0x36>
 8007dac:	2140      	movs	r1, #64	@ 0x40
 8007dae:	f7ff ff01 	bl	8007bb4 <_malloc_r>
 8007db2:	6038      	str	r0, [r7, #0]
 8007db4:	6138      	str	r0, [r7, #16]
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d105      	bne.n	8007dc6 <_svfiprintf_r+0x32>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	9a03      	ldr	r2, [sp, #12]
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	4240      	negs	r0, r0
 8007dc4:	e0cf      	b.n	8007f66 <_svfiprintf_r+0x1d2>
 8007dc6:	2340      	movs	r3, #64	@ 0x40
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	ac08      	add	r4, sp, #32
 8007dce:	6163      	str	r3, [r4, #20]
 8007dd0:	3320      	adds	r3, #32
 8007dd2:	7663      	strb	r3, [r4, #25]
 8007dd4:	3310      	adds	r3, #16
 8007dd6:	76a3      	strb	r3, [r4, #26]
 8007dd8:	9507      	str	r5, [sp, #28]
 8007dda:	0035      	movs	r5, r6
 8007ddc:	782b      	ldrb	r3, [r5, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <_svfiprintf_r+0x52>
 8007de2:	2b25      	cmp	r3, #37	@ 0x25
 8007de4:	d148      	bne.n	8007e78 <_svfiprintf_r+0xe4>
 8007de6:	1bab      	subs	r3, r5, r6
 8007de8:	9305      	str	r3, [sp, #20]
 8007dea:	42b5      	cmp	r5, r6
 8007dec:	d00b      	beq.n	8007e06 <_svfiprintf_r+0x72>
 8007dee:	0032      	movs	r2, r6
 8007df0:	0039      	movs	r1, r7
 8007df2:	9803      	ldr	r0, [sp, #12]
 8007df4:	f7ff ff6e 	bl	8007cd4 <__ssputs_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d100      	bne.n	8007dfe <_svfiprintf_r+0x6a>
 8007dfc:	e0ae      	b.n	8007f5c <_svfiprintf_r+0x1c8>
 8007dfe:	6963      	ldr	r3, [r4, #20]
 8007e00:	9a05      	ldr	r2, [sp, #20]
 8007e02:	189b      	adds	r3, r3, r2
 8007e04:	6163      	str	r3, [r4, #20]
 8007e06:	782b      	ldrb	r3, [r5, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d100      	bne.n	8007e0e <_svfiprintf_r+0x7a>
 8007e0c:	e0a6      	b.n	8007f5c <_svfiprintf_r+0x1c8>
 8007e0e:	2201      	movs	r2, #1
 8007e10:	2300      	movs	r3, #0
 8007e12:	4252      	negs	r2, r2
 8007e14:	6062      	str	r2, [r4, #4]
 8007e16:	a904      	add	r1, sp, #16
 8007e18:	3254      	adds	r2, #84	@ 0x54
 8007e1a:	1852      	adds	r2, r2, r1
 8007e1c:	1c6e      	adds	r6, r5, #1
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	60e3      	str	r3, [r4, #12]
 8007e22:	60a3      	str	r3, [r4, #8]
 8007e24:	7013      	strb	r3, [r2, #0]
 8007e26:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007e28:	4b54      	ldr	r3, [pc, #336]	@ (8007f7c <_svfiprintf_r+0x1e8>)
 8007e2a:	2205      	movs	r2, #5
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	7831      	ldrb	r1, [r6, #0]
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	f000 fa4d 	bl	80082d0 <memchr>
 8007e36:	1c75      	adds	r5, r6, #1
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d11f      	bne.n	8007e7c <_svfiprintf_r+0xe8>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	06d3      	lsls	r3, r2, #27
 8007e40:	d504      	bpl.n	8007e4c <_svfiprintf_r+0xb8>
 8007e42:	2353      	movs	r3, #83	@ 0x53
 8007e44:	a904      	add	r1, sp, #16
 8007e46:	185b      	adds	r3, r3, r1
 8007e48:	2120      	movs	r1, #32
 8007e4a:	7019      	strb	r1, [r3, #0]
 8007e4c:	0713      	lsls	r3, r2, #28
 8007e4e:	d504      	bpl.n	8007e5a <_svfiprintf_r+0xc6>
 8007e50:	2353      	movs	r3, #83	@ 0x53
 8007e52:	a904      	add	r1, sp, #16
 8007e54:	185b      	adds	r3, r3, r1
 8007e56:	212b      	movs	r1, #43	@ 0x2b
 8007e58:	7019      	strb	r1, [r3, #0]
 8007e5a:	7833      	ldrb	r3, [r6, #0]
 8007e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e5e:	d016      	beq.n	8007e8e <_svfiprintf_r+0xfa>
 8007e60:	0035      	movs	r5, r6
 8007e62:	2100      	movs	r1, #0
 8007e64:	200a      	movs	r0, #10
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	782a      	ldrb	r2, [r5, #0]
 8007e6a:	1c6e      	adds	r6, r5, #1
 8007e6c:	3a30      	subs	r2, #48	@ 0x30
 8007e6e:	2a09      	cmp	r2, #9
 8007e70:	d950      	bls.n	8007f14 <_svfiprintf_r+0x180>
 8007e72:	2900      	cmp	r1, #0
 8007e74:	d111      	bne.n	8007e9a <_svfiprintf_r+0x106>
 8007e76:	e017      	b.n	8007ea8 <_svfiprintf_r+0x114>
 8007e78:	3501      	adds	r5, #1
 8007e7a:	e7af      	b.n	8007ddc <_svfiprintf_r+0x48>
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	1ac0      	subs	r0, r0, r3
 8007e82:	2301      	movs	r3, #1
 8007e84:	4083      	lsls	r3, r0
 8007e86:	4313      	orrs	r3, r2
 8007e88:	002e      	movs	r6, r5
 8007e8a:	6023      	str	r3, [r4, #0]
 8007e8c:	e7cc      	b.n	8007e28 <_svfiprintf_r+0x94>
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	9107      	str	r1, [sp, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	db01      	blt.n	8007e9e <_svfiprintf_r+0x10a>
 8007e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e9c:	e004      	b.n	8007ea8 <_svfiprintf_r+0x114>
 8007e9e:	425b      	negs	r3, r3
 8007ea0:	60e3      	str	r3, [r4, #12]
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	782b      	ldrb	r3, [r5, #0]
 8007eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eac:	d10c      	bne.n	8007ec8 <_svfiprintf_r+0x134>
 8007eae:	786b      	ldrb	r3, [r5, #1]
 8007eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eb2:	d134      	bne.n	8007f1e <_svfiprintf_r+0x18a>
 8007eb4:	9b07      	ldr	r3, [sp, #28]
 8007eb6:	3502      	adds	r5, #2
 8007eb8:	1d1a      	adds	r2, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	9207      	str	r2, [sp, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da01      	bge.n	8007ec6 <_svfiprintf_r+0x132>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	425b      	negs	r3, r3
 8007ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec8:	4e2d      	ldr	r6, [pc, #180]	@ (8007f80 <_svfiprintf_r+0x1ec>)
 8007eca:	2203      	movs	r2, #3
 8007ecc:	0030      	movs	r0, r6
 8007ece:	7829      	ldrb	r1, [r5, #0]
 8007ed0:	f000 f9fe 	bl	80082d0 <memchr>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d006      	beq.n	8007ee6 <_svfiprintf_r+0x152>
 8007ed8:	2340      	movs	r3, #64	@ 0x40
 8007eda:	1b80      	subs	r0, r0, r6
 8007edc:	4083      	lsls	r3, r0
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	7829      	ldrb	r1, [r5, #0]
 8007ee8:	2206      	movs	r2, #6
 8007eea:	4826      	ldr	r0, [pc, #152]	@ (8007f84 <_svfiprintf_r+0x1f0>)
 8007eec:	1c6e      	adds	r6, r5, #1
 8007eee:	7621      	strb	r1, [r4, #24]
 8007ef0:	f000 f9ee 	bl	80082d0 <memchr>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d038      	beq.n	8007f6a <_svfiprintf_r+0x1d6>
 8007ef8:	4b23      	ldr	r3, [pc, #140]	@ (8007f88 <_svfiprintf_r+0x1f4>)
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d122      	bne.n	8007f44 <_svfiprintf_r+0x1b0>
 8007efe:	2207      	movs	r2, #7
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	3307      	adds	r3, #7
 8007f04:	4393      	bics	r3, r2
 8007f06:	3308      	adds	r3, #8
 8007f08:	9307      	str	r3, [sp, #28]
 8007f0a:	6963      	ldr	r3, [r4, #20]
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	6163      	str	r3, [r4, #20]
 8007f12:	e762      	b.n	8007dda <_svfiprintf_r+0x46>
 8007f14:	4343      	muls	r3, r0
 8007f16:	0035      	movs	r5, r6
 8007f18:	2101      	movs	r1, #1
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	e7a4      	b.n	8007e68 <_svfiprintf_r+0xd4>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	200a      	movs	r0, #10
 8007f22:	0019      	movs	r1, r3
 8007f24:	3501      	adds	r5, #1
 8007f26:	6063      	str	r3, [r4, #4]
 8007f28:	782a      	ldrb	r2, [r5, #0]
 8007f2a:	1c6e      	adds	r6, r5, #1
 8007f2c:	3a30      	subs	r2, #48	@ 0x30
 8007f2e:	2a09      	cmp	r2, #9
 8007f30:	d903      	bls.n	8007f3a <_svfiprintf_r+0x1a6>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0c8      	beq.n	8007ec8 <_svfiprintf_r+0x134>
 8007f36:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f38:	e7c6      	b.n	8007ec8 <_svfiprintf_r+0x134>
 8007f3a:	4341      	muls	r1, r0
 8007f3c:	0035      	movs	r5, r6
 8007f3e:	2301      	movs	r3, #1
 8007f40:	1889      	adds	r1, r1, r2
 8007f42:	e7f1      	b.n	8007f28 <_svfiprintf_r+0x194>
 8007f44:	aa07      	add	r2, sp, #28
 8007f46:	9200      	str	r2, [sp, #0]
 8007f48:	0021      	movs	r1, r4
 8007f4a:	003a      	movs	r2, r7
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f8c <_svfiprintf_r+0x1f8>)
 8007f4e:	9803      	ldr	r0, [sp, #12]
 8007f50:	e000      	b.n	8007f54 <_svfiprintf_r+0x1c0>
 8007f52:	bf00      	nop
 8007f54:	9004      	str	r0, [sp, #16]
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	d1d6      	bne.n	8007f0a <_svfiprintf_r+0x176>
 8007f5c:	89bb      	ldrh	r3, [r7, #12]
 8007f5e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007f60:	065b      	lsls	r3, r3, #25
 8007f62:	d500      	bpl.n	8007f66 <_svfiprintf_r+0x1d2>
 8007f64:	e72c      	b.n	8007dc0 <_svfiprintf_r+0x2c>
 8007f66:	b021      	add	sp, #132	@ 0x84
 8007f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6a:	aa07      	add	r2, sp, #28
 8007f6c:	9200      	str	r2, [sp, #0]
 8007f6e:	0021      	movs	r1, r4
 8007f70:	003a      	movs	r2, r7
 8007f72:	4b06      	ldr	r3, [pc, #24]	@ (8007f8c <_svfiprintf_r+0x1f8>)
 8007f74:	9803      	ldr	r0, [sp, #12]
 8007f76:	f000 f87b 	bl	8008070 <_printf_i>
 8007f7a:	e7eb      	b.n	8007f54 <_svfiprintf_r+0x1c0>
 8007f7c:	080084ec 	.word	0x080084ec
 8007f80:	080084f2 	.word	0x080084f2
 8007f84:	080084f6 	.word	0x080084f6
 8007f88:	00000000 	.word	0x00000000
 8007f8c:	08007cd5 	.word	0x08007cd5

08007f90 <_printf_common>:
 8007f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f92:	0016      	movs	r6, r2
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	688a      	ldr	r2, [r1, #8]
 8007f98:	690b      	ldr	r3, [r1, #16]
 8007f9a:	000c      	movs	r4, r1
 8007f9c:	9000      	str	r0, [sp, #0]
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	da00      	bge.n	8007fa4 <_printf_common+0x14>
 8007fa2:	0013      	movs	r3, r2
 8007fa4:	0022      	movs	r2, r4
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	3243      	adds	r2, #67	@ 0x43
 8007faa:	7812      	ldrb	r2, [r2, #0]
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	d001      	beq.n	8007fb4 <_printf_common+0x24>
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	6033      	str	r3, [r6, #0]
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	069b      	lsls	r3, r3, #26
 8007fb8:	d502      	bpl.n	8007fc0 <_printf_common+0x30>
 8007fba:	6833      	ldr	r3, [r6, #0]
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	6033      	str	r3, [r6, #0]
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	2306      	movs	r3, #6
 8007fc4:	0015      	movs	r5, r2
 8007fc6:	401d      	ands	r5, r3
 8007fc8:	421a      	tst	r2, r3
 8007fca:	d027      	beq.n	800801c <_printf_common+0x8c>
 8007fcc:	0023      	movs	r3, r4
 8007fce:	3343      	adds	r3, #67	@ 0x43
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	1e5a      	subs	r2, r3, #1
 8007fd4:	4193      	sbcs	r3, r2
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	0692      	lsls	r2, r2, #26
 8007fda:	d430      	bmi.n	800803e <_printf_common+0xae>
 8007fdc:	0022      	movs	r2, r4
 8007fde:	9901      	ldr	r1, [sp, #4]
 8007fe0:	9800      	ldr	r0, [sp, #0]
 8007fe2:	9d08      	ldr	r5, [sp, #32]
 8007fe4:	3243      	adds	r2, #67	@ 0x43
 8007fe6:	47a8      	blx	r5
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d025      	beq.n	8008038 <_printf_common+0xa8>
 8007fec:	2206      	movs	r2, #6
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d105      	bne.n	8008004 <_printf_common+0x74>
 8007ff8:	6833      	ldr	r3, [r6, #0]
 8007ffa:	68e5      	ldr	r5, [r4, #12]
 8007ffc:	1aed      	subs	r5, r5, r3
 8007ffe:	43eb      	mvns	r3, r5
 8008000:	17db      	asrs	r3, r3, #31
 8008002:	401d      	ands	r5, r3
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	6922      	ldr	r2, [r4, #16]
 8008008:	4293      	cmp	r3, r2
 800800a:	dd01      	ble.n	8008010 <_printf_common+0x80>
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	18ed      	adds	r5, r5, r3
 8008010:	2600      	movs	r6, #0
 8008012:	42b5      	cmp	r5, r6
 8008014:	d120      	bne.n	8008058 <_printf_common+0xc8>
 8008016:	2000      	movs	r0, #0
 8008018:	e010      	b.n	800803c <_printf_common+0xac>
 800801a:	3501      	adds	r5, #1
 800801c:	68e3      	ldr	r3, [r4, #12]
 800801e:	6832      	ldr	r2, [r6, #0]
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	42ab      	cmp	r3, r5
 8008024:	ddd2      	ble.n	8007fcc <_printf_common+0x3c>
 8008026:	0022      	movs	r2, r4
 8008028:	2301      	movs	r3, #1
 800802a:	9901      	ldr	r1, [sp, #4]
 800802c:	9800      	ldr	r0, [sp, #0]
 800802e:	9f08      	ldr	r7, [sp, #32]
 8008030:	3219      	adds	r2, #25
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d1f0      	bne.n	800801a <_printf_common+0x8a>
 8008038:	2001      	movs	r0, #1
 800803a:	4240      	negs	r0, r0
 800803c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800803e:	2030      	movs	r0, #48	@ 0x30
 8008040:	18e1      	adds	r1, r4, r3
 8008042:	3143      	adds	r1, #67	@ 0x43
 8008044:	7008      	strb	r0, [r1, #0]
 8008046:	0021      	movs	r1, r4
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	3145      	adds	r1, #69	@ 0x45
 800804c:	7809      	ldrb	r1, [r1, #0]
 800804e:	18a2      	adds	r2, r4, r2
 8008050:	3243      	adds	r2, #67	@ 0x43
 8008052:	3302      	adds	r3, #2
 8008054:	7011      	strb	r1, [r2, #0]
 8008056:	e7c1      	b.n	8007fdc <_printf_common+0x4c>
 8008058:	0022      	movs	r2, r4
 800805a:	2301      	movs	r3, #1
 800805c:	9901      	ldr	r1, [sp, #4]
 800805e:	9800      	ldr	r0, [sp, #0]
 8008060:	9f08      	ldr	r7, [sp, #32]
 8008062:	321a      	adds	r2, #26
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	d0e6      	beq.n	8008038 <_printf_common+0xa8>
 800806a:	3601      	adds	r6, #1
 800806c:	e7d1      	b.n	8008012 <_printf_common+0x82>
	...

08008070 <_printf_i>:
 8008070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008072:	b08b      	sub	sp, #44	@ 0x2c
 8008074:	9206      	str	r2, [sp, #24]
 8008076:	000a      	movs	r2, r1
 8008078:	3243      	adds	r2, #67	@ 0x43
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	9005      	str	r0, [sp, #20]
 800807e:	9203      	str	r2, [sp, #12]
 8008080:	7e0a      	ldrb	r2, [r1, #24]
 8008082:	000c      	movs	r4, r1
 8008084:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008086:	2a78      	cmp	r2, #120	@ 0x78
 8008088:	d809      	bhi.n	800809e <_printf_i+0x2e>
 800808a:	2a62      	cmp	r2, #98	@ 0x62
 800808c:	d80b      	bhi.n	80080a6 <_printf_i+0x36>
 800808e:	2a00      	cmp	r2, #0
 8008090:	d100      	bne.n	8008094 <_printf_i+0x24>
 8008092:	e0ba      	b.n	800820a <_printf_i+0x19a>
 8008094:	497a      	ldr	r1, [pc, #488]	@ (8008280 <_printf_i+0x210>)
 8008096:	9104      	str	r1, [sp, #16]
 8008098:	2a58      	cmp	r2, #88	@ 0x58
 800809a:	d100      	bne.n	800809e <_printf_i+0x2e>
 800809c:	e08e      	b.n	80081bc <_printf_i+0x14c>
 800809e:	0025      	movs	r5, r4
 80080a0:	3542      	adds	r5, #66	@ 0x42
 80080a2:	702a      	strb	r2, [r5, #0]
 80080a4:	e022      	b.n	80080ec <_printf_i+0x7c>
 80080a6:	0010      	movs	r0, r2
 80080a8:	3863      	subs	r0, #99	@ 0x63
 80080aa:	2815      	cmp	r0, #21
 80080ac:	d8f7      	bhi.n	800809e <_printf_i+0x2e>
 80080ae:	f7f8 f829 	bl	8000104 <__gnu_thumb1_case_shi>
 80080b2:	0016      	.short	0x0016
 80080b4:	fff6001f 	.word	0xfff6001f
 80080b8:	fff6fff6 	.word	0xfff6fff6
 80080bc:	001ffff6 	.word	0x001ffff6
 80080c0:	fff6fff6 	.word	0xfff6fff6
 80080c4:	fff6fff6 	.word	0xfff6fff6
 80080c8:	0036009f 	.word	0x0036009f
 80080cc:	fff6007e 	.word	0xfff6007e
 80080d0:	00b0fff6 	.word	0x00b0fff6
 80080d4:	0036fff6 	.word	0x0036fff6
 80080d8:	fff6fff6 	.word	0xfff6fff6
 80080dc:	0082      	.short	0x0082
 80080de:	0025      	movs	r5, r4
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	3542      	adds	r5, #66	@ 0x42
 80080e4:	1d11      	adds	r1, r2, #4
 80080e6:	6019      	str	r1, [r3, #0]
 80080e8:	6813      	ldr	r3, [r2, #0]
 80080ea:	702b      	strb	r3, [r5, #0]
 80080ec:	2301      	movs	r3, #1
 80080ee:	e09e      	b.n	800822e <_printf_i+0x1be>
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	6809      	ldr	r1, [r1, #0]
 80080f4:	1d02      	adds	r2, r0, #4
 80080f6:	060d      	lsls	r5, r1, #24
 80080f8:	d50b      	bpl.n	8008112 <_printf_i+0xa2>
 80080fa:	6806      	ldr	r6, [r0, #0]
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	2e00      	cmp	r6, #0
 8008100:	da03      	bge.n	800810a <_printf_i+0x9a>
 8008102:	232d      	movs	r3, #45	@ 0x2d
 8008104:	9a03      	ldr	r2, [sp, #12]
 8008106:	4276      	negs	r6, r6
 8008108:	7013      	strb	r3, [r2, #0]
 800810a:	4b5d      	ldr	r3, [pc, #372]	@ (8008280 <_printf_i+0x210>)
 800810c:	270a      	movs	r7, #10
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	e018      	b.n	8008144 <_printf_i+0xd4>
 8008112:	6806      	ldr	r6, [r0, #0]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	0649      	lsls	r1, r1, #25
 8008118:	d5f1      	bpl.n	80080fe <_printf_i+0x8e>
 800811a:	b236      	sxth	r6, r6
 800811c:	e7ef      	b.n	80080fe <_printf_i+0x8e>
 800811e:	6808      	ldr	r0, [r1, #0]
 8008120:	6819      	ldr	r1, [r3, #0]
 8008122:	c940      	ldmia	r1!, {r6}
 8008124:	0605      	lsls	r5, r0, #24
 8008126:	d402      	bmi.n	800812e <_printf_i+0xbe>
 8008128:	0640      	lsls	r0, r0, #25
 800812a:	d500      	bpl.n	800812e <_printf_i+0xbe>
 800812c:	b2b6      	uxth	r6, r6
 800812e:	6019      	str	r1, [r3, #0]
 8008130:	4b53      	ldr	r3, [pc, #332]	@ (8008280 <_printf_i+0x210>)
 8008132:	270a      	movs	r7, #10
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	2a6f      	cmp	r2, #111	@ 0x6f
 8008138:	d100      	bne.n	800813c <_printf_i+0xcc>
 800813a:	3f02      	subs	r7, #2
 800813c:	0023      	movs	r3, r4
 800813e:	2200      	movs	r2, #0
 8008140:	3343      	adds	r3, #67	@ 0x43
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	60a3      	str	r3, [r4, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db06      	blt.n	800815a <_printf_i+0xea>
 800814c:	2104      	movs	r1, #4
 800814e:	6822      	ldr	r2, [r4, #0]
 8008150:	9d03      	ldr	r5, [sp, #12]
 8008152:	438a      	bics	r2, r1
 8008154:	6022      	str	r2, [r4, #0]
 8008156:	4333      	orrs	r3, r6
 8008158:	d00c      	beq.n	8008174 <_printf_i+0x104>
 800815a:	9d03      	ldr	r5, [sp, #12]
 800815c:	0030      	movs	r0, r6
 800815e:	0039      	movs	r1, r7
 8008160:	f7f8 f860 	bl	8000224 <__aeabi_uidivmod>
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	3d01      	subs	r5, #1
 8008168:	5c5b      	ldrb	r3, [r3, r1]
 800816a:	702b      	strb	r3, [r5, #0]
 800816c:	0033      	movs	r3, r6
 800816e:	0006      	movs	r6, r0
 8008170:	429f      	cmp	r7, r3
 8008172:	d9f3      	bls.n	800815c <_printf_i+0xec>
 8008174:	2f08      	cmp	r7, #8
 8008176:	d109      	bne.n	800818c <_printf_i+0x11c>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07db      	lsls	r3, r3, #31
 800817c:	d506      	bpl.n	800818c <_printf_i+0x11c>
 800817e:	6862      	ldr	r2, [r4, #4]
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	429a      	cmp	r2, r3
 8008184:	dc02      	bgt.n	800818c <_printf_i+0x11c>
 8008186:	2330      	movs	r3, #48	@ 0x30
 8008188:	3d01      	subs	r5, #1
 800818a:	702b      	strb	r3, [r5, #0]
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1b5b      	subs	r3, r3, r5
 8008190:	6123      	str	r3, [r4, #16]
 8008192:	9b07      	ldr	r3, [sp, #28]
 8008194:	0021      	movs	r1, r4
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	9805      	ldr	r0, [sp, #20]
 800819a:	9b06      	ldr	r3, [sp, #24]
 800819c:	aa09      	add	r2, sp, #36	@ 0x24
 800819e:	f7ff fef7 	bl	8007f90 <_printf_common>
 80081a2:	3001      	adds	r0, #1
 80081a4:	d148      	bne.n	8008238 <_printf_i+0x1c8>
 80081a6:	2001      	movs	r0, #1
 80081a8:	4240      	negs	r0, r0
 80081aa:	b00b      	add	sp, #44	@ 0x2c
 80081ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ae:	2220      	movs	r2, #32
 80081b0:	6809      	ldr	r1, [r1, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	2278      	movs	r2, #120	@ 0x78
 80081b8:	4932      	ldr	r1, [pc, #200]	@ (8008284 <_printf_i+0x214>)
 80081ba:	9104      	str	r1, [sp, #16]
 80081bc:	0021      	movs	r1, r4
 80081be:	3145      	adds	r1, #69	@ 0x45
 80081c0:	700a      	strb	r2, [r1, #0]
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6822      	ldr	r2, [r4, #0]
 80081c6:	c940      	ldmia	r1!, {r6}
 80081c8:	0610      	lsls	r0, r2, #24
 80081ca:	d402      	bmi.n	80081d2 <_printf_i+0x162>
 80081cc:	0650      	lsls	r0, r2, #25
 80081ce:	d500      	bpl.n	80081d2 <_printf_i+0x162>
 80081d0:	b2b6      	uxth	r6, r6
 80081d2:	6019      	str	r1, [r3, #0]
 80081d4:	07d3      	lsls	r3, r2, #31
 80081d6:	d502      	bpl.n	80081de <_printf_i+0x16e>
 80081d8:	2320      	movs	r3, #32
 80081da:	4313      	orrs	r3, r2
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	2e00      	cmp	r6, #0
 80081e0:	d001      	beq.n	80081e6 <_printf_i+0x176>
 80081e2:	2710      	movs	r7, #16
 80081e4:	e7aa      	b.n	800813c <_printf_i+0xcc>
 80081e6:	2220      	movs	r2, #32
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	4393      	bics	r3, r2
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	e7f8      	b.n	80081e2 <_printf_i+0x172>
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	680d      	ldr	r5, [r1, #0]
 80081f4:	1d10      	adds	r0, r2, #4
 80081f6:	6949      	ldr	r1, [r1, #20]
 80081f8:	6018      	str	r0, [r3, #0]
 80081fa:	6813      	ldr	r3, [r2, #0]
 80081fc:	062e      	lsls	r6, r5, #24
 80081fe:	d501      	bpl.n	8008204 <_printf_i+0x194>
 8008200:	6019      	str	r1, [r3, #0]
 8008202:	e002      	b.n	800820a <_printf_i+0x19a>
 8008204:	066d      	lsls	r5, r5, #25
 8008206:	d5fb      	bpl.n	8008200 <_printf_i+0x190>
 8008208:	8019      	strh	r1, [r3, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	9d03      	ldr	r5, [sp, #12]
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	e7bf      	b.n	8008192 <_printf_i+0x122>
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	1d11      	adds	r1, r2, #4
 8008216:	6019      	str	r1, [r3, #0]
 8008218:	6815      	ldr	r5, [r2, #0]
 800821a:	2100      	movs	r1, #0
 800821c:	0028      	movs	r0, r5
 800821e:	6862      	ldr	r2, [r4, #4]
 8008220:	f000 f856 	bl	80082d0 <memchr>
 8008224:	2800      	cmp	r0, #0
 8008226:	d001      	beq.n	800822c <_printf_i+0x1bc>
 8008228:	1b40      	subs	r0, r0, r5
 800822a:	6060      	str	r0, [r4, #4]
 800822c:	6863      	ldr	r3, [r4, #4]
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	2300      	movs	r3, #0
 8008232:	9a03      	ldr	r2, [sp, #12]
 8008234:	7013      	strb	r3, [r2, #0]
 8008236:	e7ac      	b.n	8008192 <_printf_i+0x122>
 8008238:	002a      	movs	r2, r5
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	9906      	ldr	r1, [sp, #24]
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	9d07      	ldr	r5, [sp, #28]
 8008242:	47a8      	blx	r5
 8008244:	3001      	adds	r0, #1
 8008246:	d0ae      	beq.n	80081a6 <_printf_i+0x136>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	079b      	lsls	r3, r3, #30
 800824c:	d415      	bmi.n	800827a <_printf_i+0x20a>
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	68e0      	ldr	r0, [r4, #12]
 8008252:	4298      	cmp	r0, r3
 8008254:	daa9      	bge.n	80081aa <_printf_i+0x13a>
 8008256:	0018      	movs	r0, r3
 8008258:	e7a7      	b.n	80081aa <_printf_i+0x13a>
 800825a:	0022      	movs	r2, r4
 800825c:	2301      	movs	r3, #1
 800825e:	9906      	ldr	r1, [sp, #24]
 8008260:	9805      	ldr	r0, [sp, #20]
 8008262:	9e07      	ldr	r6, [sp, #28]
 8008264:	3219      	adds	r2, #25
 8008266:	47b0      	blx	r6
 8008268:	3001      	adds	r0, #1
 800826a:	d09c      	beq.n	80081a6 <_printf_i+0x136>
 800826c:	3501      	adds	r5, #1
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	42ab      	cmp	r3, r5
 8008276:	dcf0      	bgt.n	800825a <_printf_i+0x1ea>
 8008278:	e7e9      	b.n	800824e <_printf_i+0x1de>
 800827a:	2500      	movs	r5, #0
 800827c:	e7f7      	b.n	800826e <_printf_i+0x1fe>
 800827e:	46c0      	nop			@ (mov r8, r8)
 8008280:	080084fd 	.word	0x080084fd
 8008284:	0800850e 	.word	0x0800850e

08008288 <memmove>:
 8008288:	b510      	push	{r4, lr}
 800828a:	4288      	cmp	r0, r1
 800828c:	d902      	bls.n	8008294 <memmove+0xc>
 800828e:	188b      	adds	r3, r1, r2
 8008290:	4298      	cmp	r0, r3
 8008292:	d308      	bcc.n	80082a6 <memmove+0x1e>
 8008294:	2300      	movs	r3, #0
 8008296:	429a      	cmp	r2, r3
 8008298:	d007      	beq.n	80082aa <memmove+0x22>
 800829a:	5ccc      	ldrb	r4, [r1, r3]
 800829c:	54c4      	strb	r4, [r0, r3]
 800829e:	3301      	adds	r3, #1
 80082a0:	e7f9      	b.n	8008296 <memmove+0xe>
 80082a2:	5c8b      	ldrb	r3, [r1, r2]
 80082a4:	5483      	strb	r3, [r0, r2]
 80082a6:	3a01      	subs	r2, #1
 80082a8:	d2fb      	bcs.n	80082a2 <memmove+0x1a>
 80082aa:	bd10      	pop	{r4, pc}

080082ac <_sbrk_r>:
 80082ac:	2300      	movs	r3, #0
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	4d06      	ldr	r5, [pc, #24]	@ (80082cc <_sbrk_r+0x20>)
 80082b2:	0004      	movs	r4, r0
 80082b4:	0008      	movs	r0, r1
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f7f9 fd76 	bl	8001da8 <_sbrk>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d103      	bne.n	80082c8 <_sbrk_r+0x1c>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d000      	beq.n	80082c8 <_sbrk_r+0x1c>
 80082c6:	6023      	str	r3, [r4, #0]
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	20000510 	.word	0x20000510

080082d0 <memchr>:
 80082d0:	b2c9      	uxtb	r1, r1
 80082d2:	1882      	adds	r2, r0, r2
 80082d4:	4290      	cmp	r0, r2
 80082d6:	d101      	bne.n	80082dc <memchr+0xc>
 80082d8:	2000      	movs	r0, #0
 80082da:	4770      	bx	lr
 80082dc:	7803      	ldrb	r3, [r0, #0]
 80082de:	428b      	cmp	r3, r1
 80082e0:	d0fb      	beq.n	80082da <memchr+0xa>
 80082e2:	3001      	adds	r0, #1
 80082e4:	e7f6      	b.n	80082d4 <memchr+0x4>

080082e6 <memcpy>:
 80082e6:	2300      	movs	r3, #0
 80082e8:	b510      	push	{r4, lr}
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d100      	bne.n	80082f0 <memcpy+0xa>
 80082ee:	bd10      	pop	{r4, pc}
 80082f0:	5ccc      	ldrb	r4, [r1, r3]
 80082f2:	54c4      	strb	r4, [r0, r3]
 80082f4:	3301      	adds	r3, #1
 80082f6:	e7f8      	b.n	80082ea <memcpy+0x4>

080082f8 <_realloc_r>:
 80082f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fa:	0006      	movs	r6, r0
 80082fc:	000c      	movs	r4, r1
 80082fe:	0015      	movs	r5, r2
 8008300:	2900      	cmp	r1, #0
 8008302:	d105      	bne.n	8008310 <_realloc_r+0x18>
 8008304:	0011      	movs	r1, r2
 8008306:	f7ff fc55 	bl	8007bb4 <_malloc_r>
 800830a:	0004      	movs	r4, r0
 800830c:	0020      	movs	r0, r4
 800830e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008310:	2a00      	cmp	r2, #0
 8008312:	d103      	bne.n	800831c <_realloc_r+0x24>
 8008314:	f7ff fbe2 	bl	8007adc <_free_r>
 8008318:	002c      	movs	r4, r5
 800831a:	e7f7      	b.n	800830c <_realloc_r+0x14>
 800831c:	f000 f81c 	bl	8008358 <_malloc_usable_size_r>
 8008320:	0007      	movs	r7, r0
 8008322:	4285      	cmp	r5, r0
 8008324:	d802      	bhi.n	800832c <_realloc_r+0x34>
 8008326:	0843      	lsrs	r3, r0, #1
 8008328:	42ab      	cmp	r3, r5
 800832a:	d3ef      	bcc.n	800830c <_realloc_r+0x14>
 800832c:	0029      	movs	r1, r5
 800832e:	0030      	movs	r0, r6
 8008330:	f7ff fc40 	bl	8007bb4 <_malloc_r>
 8008334:	9001      	str	r0, [sp, #4]
 8008336:	2800      	cmp	r0, #0
 8008338:	d101      	bne.n	800833e <_realloc_r+0x46>
 800833a:	9c01      	ldr	r4, [sp, #4]
 800833c:	e7e6      	b.n	800830c <_realloc_r+0x14>
 800833e:	002a      	movs	r2, r5
 8008340:	42bd      	cmp	r5, r7
 8008342:	d900      	bls.n	8008346 <_realloc_r+0x4e>
 8008344:	003a      	movs	r2, r7
 8008346:	0021      	movs	r1, r4
 8008348:	9801      	ldr	r0, [sp, #4]
 800834a:	f7ff ffcc 	bl	80082e6 <memcpy>
 800834e:	0021      	movs	r1, r4
 8008350:	0030      	movs	r0, r6
 8008352:	f7ff fbc3 	bl	8007adc <_free_r>
 8008356:	e7f0      	b.n	800833a <_realloc_r+0x42>

08008358 <_malloc_usable_size_r>:
 8008358:	1f0b      	subs	r3, r1, #4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	1f18      	subs	r0, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	da01      	bge.n	8008366 <_malloc_usable_size_r+0xe>
 8008362:	580b      	ldr	r3, [r1, r0]
 8008364:	18c0      	adds	r0, r0, r3
 8008366:	4770      	bx	lr

08008368 <_init>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	46c0      	nop			@ (mov r8, r8)
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr

08008374 <_fini>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	46c0      	nop			@ (mov r8, r8)
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr
