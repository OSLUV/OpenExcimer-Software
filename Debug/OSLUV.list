
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c08  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08009cc4  08009cc4  0000acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a010  0800a010  0000c09c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a010  0800a010  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a018  0800a018  0000c09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a018  0800a018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a01c  0800a01c  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800a020  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000009c  0800a0bc  0000c09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800a0bc  0000c5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001712d  00000000  00000000  0000c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003135  00000000  00000000  000231f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00026328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b9bc  00000000  00000000  00027750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000187d4  00000000  00000000  0004310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b1622  00000000  00000000  0005b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010cf02  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000fa7  00000000  00000000  0010cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ef0  00000000  00000000  0010deec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00112ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009cac 	.word	0x08009cac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08009cac 	.word	0x08009cac

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_UART_RxCpltCallback>:
//
//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b089      	sub	sp, #36	@ 0x24
 8000644:	af06      	add	r7, sp, #24
 8000646:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4ac5      	ldr	r2, [pc, #788]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d000      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x14>
 8000652:	e183      	b.n	800095c <HAL_UART_RxCpltCallback+0x31c>

		if (uart_rx_byte == '\n' || uart_rx_byte == '\r')  // End of input
 8000654:	4bc4      	ldr	r3, [pc, #784]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d004      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 800065c:	4bc2      	ldr	r3, [pc, #776]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0d      	cmp	r3, #13
 8000662:	d000      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 8000664:	e165      	b.n	8000932 <HAL_UART_RxCpltCallback+0x2f2>
		{
			uart_rx_buffer[uart_index] = '\0';
 8000666:	4bc1      	ldr	r3, [pc, #772]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	001a      	movs	r2, r3
 800066c:	4bc0      	ldr	r3, [pc, #768]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]


			if (uart_rx_buffer[0]=='F') // Change frequency
 8000672:	4bbf      	ldr	r3, [pc, #764]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b46      	cmp	r3, #70	@ 0x46
 8000678:	d141      	bne.n	80006fe <HAL_UART_RxCpltCallback+0xbe>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 800067a:	4abe      	ldr	r2, [pc, #760]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 800067c:	4bbe      	ldr	r3, [pc, #760]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f008 fec5 	bl	8009410 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000686:	4bbc      	ldr	r3, [pc, #752]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 8000688:	0018      	movs	r0, r3
 800068a:	f008 fdbb 	bl	8009204 <atoi>
 800068e:	0002      	movs	r2, r0
 8000690:	4bba      	ldr	r3, [pc, #744]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000692:	601a      	str	r2, [r3, #0]
				if (value>=FREQ_MIN && value <=FREQ_MAX) { // limit frequency to between 10 - 120 kHz
 8000694:	4bb9      	ldr	r3, [pc, #740]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b09      	cmp	r3, #9
 800069a:	dc00      	bgt.n	800069e <HAL_UART_RxCpltCallback+0x5e>
 800069c:	e145      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
 800069e:	4bb7      	ldr	r3, [pc, #732]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b78      	cmp	r3, #120	@ 0x78
 80006a4:	dd00      	ble.n	80006a8 <HAL_UART_RxCpltCallback+0x68>
 80006a6:	e140      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
					operationFrequency = (uint16_t)((TMR_COUNTER + value / 2) / value);
 80006a8:	4bb4      	ldr	r3, [pc, #720]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da00      	bge.n	80006b2 <HAL_UART_RxCpltCallback+0x72>
 80006b0:	3301      	adds	r3, #1
 80006b2:	105b      	asrs	r3, r3, #1
 80006b4:	22fa      	movs	r2, #250	@ 0xfa
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	189a      	adds	r2, r3, r2
 80006ba:	4bb0      	ldr	r3, [pc, #704]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	0019      	movs	r1, r3
 80006c0:	0010      	movs	r0, r2
 80006c2:	f7ff fdbb 	bl	800023c <__divsi3>
 80006c6:	0003      	movs	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4bad      	ldr	r3, [pc, #692]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 80006cc:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Freq:%d kHz ARR:%d\r\n", value, operationFrequency);
 80006ce:	4bab      	ldr	r3, [pc, #684]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4bab      	ldr	r3, [pc, #684]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4aaa      	ldr	r2, [pc, #680]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 80006da:	48ab      	ldr	r0, [pc, #684]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	000b      	movs	r3, r1
 80006e0:	213c      	movs	r1, #60	@ 0x3c
 80006e2:	f008 fe2b 	bl	800933c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80006e6:	4ba8      	ldr	r3, [pc, #672]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fd0b 	bl	8000104 <strlen>
 80006ee:	0003      	movs	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	49a5      	ldr	r1, [pc, #660]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80006f4:	48a5      	ldr	r0, [pc, #660]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 80006f6:	230a      	movs	r3, #10
 80006f8:	f006 fca4 	bl	8007044 <HAL_UART_Transmit>
 80006fc:	e115      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
				}
			}
			else if (uart_rx_buffer[0]=='A') // Change ARR directly -> frequency
 80006fe:	4b9c      	ldr	r3, [pc, #624]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b41      	cmp	r3, #65	@ 0x41
 8000704:	d135      	bne.n	8000772 <HAL_UART_RxCpltCallback+0x132>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 8000706:	4a9b      	ldr	r2, [pc, #620]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 8000708:	4b9b      	ldr	r3, [pc, #620]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f008 fe7f 	bl	8009410 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000712:	4b99      	ldr	r3, [pc, #612]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 8000714:	0018      	movs	r0, r3
 8000716:	f008 fd75 	bl	8009204 <atoi>
 800071a:	0002      	movs	r2, r0
 800071c:	4b97      	ldr	r3, [pc, #604]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 800071e:	601a      	str	r2, [r3, #0]
				if (value>=ARR_MIN && value <=ARR_MAX) { // limit frequency to between 10 - 120 kHz
 8000720:	4b96      	ldr	r3, [pc, #600]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b81      	cmp	r3, #129	@ 0x81
 8000726:	dc00      	bgt.n	800072a <HAL_UART_RxCpltCallback+0xea>
 8000728:	e0ff      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
 800072a:	4b94      	ldr	r3, [pc, #592]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	23fa      	movs	r3, #250	@ 0xfa
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	429a      	cmp	r2, r3
 8000734:	dd00      	ble.n	8000738 <HAL_UART_RxCpltCallback+0xf8>
 8000736:	e0f8      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
					operationFrequency = value;
 8000738:	4b90      	ldr	r3, [pc, #576]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b90      	ldr	r3, [pc, #576]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000740:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "ARR: %d Freq: %d\r\n", value, operationFrequency);
 8000742:	4b8e      	ldr	r3, [pc, #568]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000744:	6819      	ldr	r1, [r3, #0]
 8000746:	4b8e      	ldr	r3, [pc, #568]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	4a90      	ldr	r2, [pc, #576]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 800074e:	488e      	ldr	r0, [pc, #568]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	000b      	movs	r3, r1
 8000754:	213c      	movs	r1, #60	@ 0x3c
 8000756:	f008 fdf1 	bl	800933c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 800075a:	4b8b      	ldr	r3, [pc, #556]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fcd1 	bl	8000104 <strlen>
 8000762:	0003      	movs	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	4988      	ldr	r1, [pc, #544]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000768:	4888      	ldr	r0, [pc, #544]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 800076a:	230a      	movs	r3, #10
 800076c:	f006 fc6a 	bl	8007044 <HAL_UART_Transmit>
 8000770:	e0db      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
				}
			}
			else if (uart_rx_buffer[0]=='C') // change CCR -> charge time
 8000772:	4b7f      	ldr	r3, [pc, #508]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b43      	cmp	r3, #67	@ 0x43
 8000778:	d12e      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x198>
			{
				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 800077a:	4a7e      	ldr	r2, [pc, #504]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 800077c:	4b7e      	ldr	r3, [pc, #504]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f008 fe45 	bl	8009410 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000786:	4b7c      	ldr	r3, [pc, #496]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 8000788:	0018      	movs	r0, r3
 800078a:	f008 fd3b 	bl	8009204 <atoi>
 800078e:	0002      	movs	r2, r0
 8000790:	4b7a      	ldr	r3, [pc, #488]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000792:	601a      	str	r2, [r3, #0]
				if (value>=CCR_MIN && value <=CCR_MAX) { // limit charge time to between 3 - 5 µs
 8000794:	4b79      	ldr	r3, [pc, #484]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b31      	cmp	r3, #49	@ 0x31
 800079a:	dc00      	bgt.n	800079e <HAL_UART_RxCpltCallback+0x15e>
 800079c:	e0c5      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
 800079e:	4b77      	ldr	r3, [pc, #476]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b50      	cmp	r3, #80	@ 0x50
 80007a4:	dd00      	ble.n	80007a8 <HAL_UART_RxCpltCallback+0x168>
 80007a6:	e0c0      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
					chargeTimeOperation = value;
 80007a8:	4b74      	ldr	r3, [pc, #464]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b79      	ldr	r3, [pc, #484]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80007b0:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Charge: %d\r\n", value);
 80007b2:	4b72      	ldr	r3, [pc, #456]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a78      	ldr	r2, [pc, #480]	@ (8000998 <HAL_UART_RxCpltCallback+0x358>)
 80007b8:	4873      	ldr	r0, [pc, #460]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80007ba:	213c      	movs	r1, #60	@ 0x3c
 80007bc:	f008 fdbe 	bl	800933c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80007c0:	4b71      	ldr	r3, [pc, #452]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fc9e 	bl	8000104 <strlen>
 80007c8:	0003      	movs	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	496e      	ldr	r1, [pc, #440]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80007ce:	486f      	ldr	r0, [pc, #444]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 80007d0:	230a      	movs	r3, #10
 80007d2:	f006 fc37 	bl	8007044 <HAL_UART_Transmit>
 80007d6:	e0a8      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
				}

			}
			else if (uart_rx_buffer[0]=='D') // report ADC DATA
 80007d8:	4b65      	ldr	r3, [pc, #404]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b44      	cmp	r3, #68	@ 0x44
 80007de:	d12d      	bne.n	800083c <HAL_UART_RxCpltCallback+0x1fc>
			{
				snprintf(msg, sizeof(msg), "Ui %04d, T %04d, Ul %04d, Il %04d, Li %04d, Ii %04d\r\n",  adc_24V, adc_tempMOSFET, adc_uSenseLamp, adc_iSenseLamp, adc_lampIntensity, adc_iSenseIn);
 80007e0:	4b6e      	ldr	r3, [pc, #440]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	469c      	mov	ip, r3
 80007e8:	4b6d      	ldr	r3, [pc, #436]	@ (80009a0 <HAL_UART_RxCpltCallback+0x360>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	0019      	movs	r1, r3
 80007f0:	4b6c      	ldr	r3, [pc, #432]	@ (80009a4 <HAL_UART_RxCpltCallback+0x364>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	001c      	movs	r4, r3
 80007f8:	4b6b      	ldr	r3, [pc, #428]	@ (80009a8 <HAL_UART_RxCpltCallback+0x368>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	001d      	movs	r5, r3
 8000800:	4b6a      	ldr	r3, [pc, #424]	@ (80009ac <HAL_UART_RxCpltCallback+0x36c>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b29b      	uxth	r3, r3
 8000806:	001e      	movs	r6, r3
 8000808:	4b69      	ldr	r3, [pc, #420]	@ (80009b0 <HAL_UART_RxCpltCallback+0x370>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4a69      	ldr	r2, [pc, #420]	@ (80009b4 <HAL_UART_RxCpltCallback+0x374>)
 8000810:	485d      	ldr	r0, [pc, #372]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000812:	9304      	str	r3, [sp, #16]
 8000814:	9603      	str	r6, [sp, #12]
 8000816:	9502      	str	r5, [sp, #8]
 8000818:	9401      	str	r4, [sp, #4]
 800081a:	9100      	str	r1, [sp, #0]
 800081c:	4663      	mov	r3, ip
 800081e:	213c      	movs	r1, #60	@ 0x3c
 8000820:	f008 fd8c 	bl	800933c <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000824:	4b58      	ldr	r3, [pc, #352]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fc6c 	bl	8000104 <strlen>
 800082c:	0003      	movs	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	4955      	ldr	r1, [pc, #340]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000832:	4856      	ldr	r0, [pc, #344]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 8000834:	230a      	movs	r3, #10
 8000836:	f006 fc05 	bl	8007044 <HAL_UART_Transmit>
 800083a:	e076      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
			}
			else if (uart_rx_buffer[0]=='T') // report TIMER data
 800083c:	4b4c      	ldr	r3, [pc, #304]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b54      	cmp	r3, #84	@ 0x54
 8000842:	d130      	bne.n	80008a6 <HAL_UART_RxCpltCallback+0x266>
			{
				value =  (uint16_t)((TMR_COUNTER + operationFrequency / 2) / operationFrequency);
 8000844:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	085b      	lsrs	r3, r3, #1
 800084c:	b29b      	uxth	r3, r3
 800084e:	22fa      	movs	r2, #250	@ 0xfa
 8000850:	0192      	lsls	r2, r2, #6
 8000852:	189a      	adds	r2, r3, r2
 8000854:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	0019      	movs	r1, r3
 800085c:	0010      	movs	r0, r2
 800085e:	f7ff fced 	bl	800023c <__divsi3>
 8000862:	0003      	movs	r3, r0
 8000864:	b29b      	uxth	r3, r3
 8000866:	001a      	movs	r2, r3
 8000868:	4b44      	ldr	r3, [pc, #272]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 800086a:	601a      	str	r2, [r3, #0]
				snprintf(msg, sizeof(msg), "F: %d kHz, ARR: %d, CCR: %d\r\n",  value, operationFrequency, chargeTimeOperation);
 800086c:	4b43      	ldr	r3, [pc, #268]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 800086e:	6819      	ldr	r1, [r3, #0]
 8000870:	4b43      	ldr	r3, [pc, #268]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	001c      	movs	r4, r3
 8000878:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	4a4e      	ldr	r2, [pc, #312]	@ (80009b8 <HAL_UART_RxCpltCallback+0x378>)
 8000880:	4841      	ldr	r0, [pc, #260]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9400      	str	r4, [sp, #0]
 8000886:	000b      	movs	r3, r1
 8000888:	213c      	movs	r1, #60	@ 0x3c
 800088a:	f008 fd57 	bl	800933c <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 800088e:	4b3e      	ldr	r3, [pc, #248]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff fc37 	bl	8000104 <strlen>
 8000896:	0003      	movs	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	493b      	ldr	r1, [pc, #236]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 800089c:	483b      	ldr	r0, [pc, #236]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 800089e:	230a      	movs	r3, #10
 80008a0:	f006 fbd0 	bl	8007044 <HAL_UART_Transmit>
 80008a4:	e041      	b.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
			}
			else { // dimming levels
				value = atoi(uart_rx_buffer);
 80008a6:	4b32      	ldr	r3, [pc, #200]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f008 fcab 	bl	8009204 <atoi>
 80008ae:	0002      	movs	r2, r0
 80008b0:	4b32      	ldr	r3, [pc, #200]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80008b2:	601a      	str	r2, [r3, #0]

				if (value <= 10)
 80008b4:	4b31      	ldr	r3, [pc, #196]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b0a      	cmp	r3, #10
 80008ba:	dc36      	bgt.n	800092a <HAL_UART_RxCpltCallback+0x2ea>
				{
					if (value < 1)
 80008bc:	4b2f      	ldr	r3, [pc, #188]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dc06      	bgt.n	80008d2 <HAL_UART_RxCpltCallback+0x292>
					{
						uartEnableFlag = 0; // turn off if zero
 80008c4:	4b3d      	ldr	r3, [pc, #244]	@ (80009bc <HAL_UART_RxCpltCallback+0x37c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
						powerLevel = 1; // clip lowest value
 80008ca:	4b3d      	ldr	r3, [pc, #244]	@ (80009c0 <HAL_UART_RxCpltCallback+0x380>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e007      	b.n	80008e2 <HAL_UART_RxCpltCallback+0x2a2>
					}
					else {
						uartEnableFlag = 1; // turn on for all other valuesw
 80008d2:	4b3a      	ldr	r3, [pc, #232]	@ (80009bc <HAL_UART_RxCpltCallback+0x37c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
						powerLevel = (uint8_t)value;
 80008d8:	4b28      	ldr	r3, [pc, #160]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b38      	ldr	r3, [pc, #224]	@ (80009c0 <HAL_UART_RxCpltCallback+0x380>)
 80008e0:	701a      	strb	r2, [r3, #0]

					}
					snprintf(msg, sizeof(msg), "Set: %d\r\n", powerLevel);
 80008e2:	4b37      	ldr	r3, [pc, #220]	@ (80009c0 <HAL_UART_RxCpltCallback+0x380>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4a37      	ldr	r2, [pc, #220]	@ (80009c4 <HAL_UART_RxCpltCallback+0x384>)
 80008e8:	4827      	ldr	r0, [pc, #156]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80008ea:	213c      	movs	r1, #60	@ 0x3c
 80008ec:	f008 fd26 	bl	800933c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fc06 	bl	8000104 <strlen>
 80008f8:	0003      	movs	r3, r0
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4922      	ldr	r1, [pc, #136]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 80008fe:	4823      	ldr	r0, [pc, #140]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 8000900:	230a      	movs	r3, #10
 8000902:	f006 fb9f 	bl	8007044 <HAL_UART_Transmit>
					chargeTimeOperation = operationPoints[powerLevel-1][0];
 8000906:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <HAL_UART_RxCpltCallback+0x380>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <HAL_UART_RxCpltCallback+0x388>)
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	5ad2      	ldrh	r2, [r2, r3]
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 8000914:	801a      	strh	r2, [r3, #0]
					operationFrequency = operationPoints[powerLevel-1][1];
 8000916:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <HAL_UART_RxCpltCallback+0x380>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	3b01      	subs	r3, #1
 800091c:	4a2a      	ldr	r2, [pc, #168]	@ (80009c8 <HAL_UART_RxCpltCallback+0x388>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	3302      	adds	r3, #2
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000928:	801a      	strh	r2, [r3, #0]
				{
					// do nothing
				}
			}

			uart_index = 0;
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e00e      	b.n	8000950 <HAL_UART_RxCpltCallback+0x310>
		}
		else
		{


			if (uart_index < RX_BUFFER_SIZE - 1)
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b08      	cmp	r3, #8
 8000938:	d80a      	bhi.n	8000950 <HAL_UART_RxCpltCallback+0x310>
			{
				uart_rx_buffer[uart_index++] = uart_rx_byte;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	b2d1      	uxtb	r1, r2
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 8000944:	7011      	strb	r1, [r2, #0]
 8000946:	001a      	movs	r2, r3
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800094a:	7819      	ldrb	r1, [r3, #0]
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 800094e:	5499      	strb	r1, [r3, r2]
			}
		}

		HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000950:	4905      	ldr	r1, [pc, #20]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 8000954:	2201      	movs	r2, #1
 8000956:	0018      	movs	r0, r3
 8000958:	f006 fc18 	bl	800718c <HAL_UART_Receive_IT>
	}
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000964:	40004400 	.word	0x40004400
 8000968:	2000040f 	.word	0x2000040f
 800096c:	2000040e 	.word	0x2000040e
 8000970:	200003f8 	.word	0x200003f8
 8000974:	200003f9 	.word	0x200003f9
 8000978:	20000404 	.word	0x20000404
 800097c:	2000044c 	.word	0x2000044c
 8000980:	2000000a 	.word	0x2000000a
 8000984:	08009cc4 	.word	0x08009cc4
 8000988:	20000410 	.word	0x20000410
 800098c:	20000364 	.word	0x20000364
 8000990:	08009cdc 	.word	0x08009cdc
 8000994:	20000008 	.word	0x20000008
 8000998:	08009cf0 	.word	0x08009cf0
 800099c:	200000d8 	.word	0x200000d8
 80009a0:	200000da 	.word	0x200000da
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	200000de 	.word	0x200000de
 80009ac:	200000e0 	.word	0x200000e0
 80009b0:	200000e2 	.word	0x200000e2
 80009b4:	08009d00 	.word	0x08009d00
 80009b8:	08009d38 	.word	0x08009d38
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	2000000d 	.word	0x2000000d
 80009c4:	08009d58 	.word	0x08009d58
 80009c8:	20000010 	.word	0x20000010

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f001 fbe9 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */
	//HAL_Delay(100);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 fac5 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f000 ff01 	bl	80017e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009de:	f000 fee9 	bl	80017b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80009e2:	f000 fb4b 	bl	800107c <MX_ADC1_Init>
  MX_COMP2_Init();
 80009e6:	f000 fc0d 	bl	8001204 <MX_COMP2_Init>
  MX_DAC1_Init();
 80009ea:	f000 fc3b 	bl	8001264 <MX_DAC1_Init>
  MX_TIM1_Init();
 80009ee:	f000 fc7d 	bl	80012ec <MX_TIM1_Init>
  MX_TIM2_Init();
 80009f2:	f000 fd3f 	bl	8001474 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009f6:	f000 fd9d 	bl	8001534 <MX_TIM3_Init>
  MX_TIM16_Init();
 80009fa:	f000 fe65 	bl	80016c8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80009fe:	f000 fe8b 	bl	8001718 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000a02:	f000 fe27 	bl	8001654 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a06:	f000 fb0b 	bl	8001020 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	// synchronous timing interrupts
	TIM6->ARR = 1000;
 8000a0a:	4bc8      	ldr	r3, [pc, #800]	@ (8000d2c <main+0x360>)
 8000a0c:	22fa      	movs	r2, #250	@ 0xfa
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 8000a12:	4bc7      	ldr	r3, [pc, #796]	@ (8000d30 <main+0x364>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f004 fdb3 	bl	8005580 <HAL_TIM_Base_Start_IT>

	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 8000a1a:	4bc6      	ldr	r3, [pc, #792]	@ (8000d34 <main+0x368>)
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	4bc5      	ldr	r3, [pc, #788]	@ (8000d34 <main+0x368>)
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	430a      	orrs	r2, r1
 8000a24:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 8000a26:	4bc3      	ldr	r3, [pc, #780]	@ (8000d34 <main+0x368>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4bc2      	ldr	r3, [pc, #776]	@ (8000d34 <main+0x368>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 8000a32:	4bc1      	ldr	r3, [pc, #772]	@ (8000d38 <main+0x36c>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f004 fe56 	bl	80056e8 <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 8000a3c:	4bbe      	ldr	r3, [pc, #760]	@ (8000d38 <main+0x36c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a42:	4bbd      	ldr	r3, [pc, #756]	@ (8000d38 <main+0x36c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	0209      	lsls	r1, r1, #8
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	645a      	str	r2, [r3, #68]	@ 0x44

	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 8000a4e:	4bbb      	ldr	r3, [pc, #748]	@ (8000d3c <main+0x370>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 ff81 	bl	800395a <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 8000a58:	4bb9      	ldr	r3, [pc, #740]	@ (8000d40 <main+0x374>)
 8000a5a:	48b8      	ldr	r0, [pc, #736]	@ (8000d3c <main+0x370>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f003 f82e 	bl	8003ac0 <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 8000a64:	4bb7      	ldr	r3, [pc, #732]	@ (8000d44 <main+0x378>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fe24 	bl	80036b4 <HAL_COMP_Start>

	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_DMA, numberADCchannels); // start ADC with DMA, 6 channels
 8000a6c:	4bb6      	ldr	r3, [pc, #728]	@ (8000d48 <main+0x37c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	001a      	movs	r2, r3
 8000a74:	49b5      	ldr	r1, [pc, #724]	@ (8000d4c <main+0x380>)
 8000a76:	4bb6      	ldr	r3, [pc, #728]	@ (8000d50 <main+0x384>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 ff3b 	bl	80028f4 <HAL_ADC_Start_DMA>
	 * 4 = Ch9: Lamp Intensity
	 * 5 = Ch10: Isense_In
	 */


	HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000a7e:	49b5      	ldr	r1, [pc, #724]	@ (8000d54 <main+0x388>)
 8000a80:	4bb5      	ldr	r3, [pc, #724]	@ (8000d58 <main+0x38c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f006 fb81 	bl	800718c <HAL_UART_Receive_IT>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]

	// blink LED
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	4ab1      	ldr	r2, [pc, #708]	@ (8000d5c <main+0x390>)
 8000a96:	0019      	movs	r1, r3
 8000a98:	0010      	movs	r0, r2
 8000a9a:	f003 fe35 	bl	8004708 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000a9e:	20c8      	movs	r0, #200	@ 0xc8
 8000aa0:	f001 fc08 	bl	80022b4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	4aac      	ldr	r2, [pc, #688]	@ (8000d5c <main+0x390>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f003 fe2b 	bl	8004708 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000ab2:	20c8      	movs	r0, #200	@ 0xc8
 8000ab4:	f001 fbfe 	bl	80022b4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	4aa7      	ldr	r2, [pc, #668]	@ (8000d5c <main+0x390>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f003 fe21 	bl	8004708 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000ac6:	20c8      	movs	r0, #200	@ 0xc8
 8000ac8:	f001 fbf4 	bl	80022b4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4aa2      	ldr	r2, [pc, #648]	@ (8000d5c <main+0x390>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f003 fe17 	bl	8004708 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	snprintf(msg, sizeof(msg), "INIT\r\n");
 8000ada:	4aa1      	ldr	r2, [pc, #644]	@ (8000d60 <main+0x394>)
 8000adc:	4ba1      	ldr	r3, [pc, #644]	@ (8000d64 <main+0x398>)
 8000ade:	213c      	movs	r1, #60	@ 0x3c
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f008 fc2b 	bl	800933c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000ae6:	4b9f      	ldr	r3, [pc, #636]	@ (8000d64 <main+0x398>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fb0b 	bl	8000104 <strlen>
 8000aee:	0003      	movs	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	499c      	ldr	r1, [pc, #624]	@ (8000d64 <main+0x398>)
 8000af4:	4898      	ldr	r0, [pc, #608]	@ (8000d58 <main+0x38c>)
 8000af6:	230a      	movs	r3, #10
 8000af8:	f006 faa4 	bl	8007044 <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request && enableUART) {
 8000afc:	4b9a      	ldr	r3, [pc, #616]	@ (8000d68 <main+0x39c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <main+0x140>
			tim6_slowIrq_request = 0;
 8000b06:	4b98      	ldr	r3, [pc, #608]	@ (8000d68 <main+0x39c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 8000b0c:	4b97      	ldr	r3, [pc, #604]	@ (8000d6c <main+0x3a0>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d053      	beq.n	8000bbe <main+0x1f2>
			tim6_irq_request = 0;
 8000b16:	4b95      	ldr	r3, [pc, #596]	@ (8000d6c <main+0x3a0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) && uartEnableFlag; //pull low for enabling
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4a93      	ldr	r2, [pc, #588]	@ (8000d70 <main+0x3a4>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f003 fdb5 	bl	8004694 <HAL_GPIO_ReadPin>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d105      	bne.n	8000b3a <main+0x16e>
 8000b2e:	4b91      	ldr	r3, [pc, #580]	@ (8000d74 <main+0x3a8>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <main+0x16e>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <main+0x170>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b8e      	ldr	r3, [pc, #568]	@ (8000d78 <main+0x3ac>)
 8000b40:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 8000b42:	4b8d      	ldr	r3, [pc, #564]	@ (8000d78 <main+0x3ac>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <main+0x194>
 8000b4c:	4b8b      	ldr	r3, [pc, #556]	@ (8000d7c <main+0x3b0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <main+0x194>
				ignitionCounter++;
 8000b54:	4b8a      	ldr	r3, [pc, #552]	@ (8000d80 <main+0x3b4>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b88      	ldr	r3, [pc, #544]	@ (8000d80 <main+0x3b4>)
 8000b5e:	801a      	strh	r2, [r3, #0]
			}

			// checked in all states, lower priority

			// check supply voltage
			if ((adc_24V < UPPER_24VSUPPLY) && (adc_24V > LOWER_24VSUPPLY)) {
 8000b60:	4b88      	ldr	r3, [pc, #544]	@ (8000d84 <main+0x3b8>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4a88      	ldr	r2, [pc, #544]	@ (8000d88 <main+0x3bc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d80a      	bhi.n	8000b82 <main+0x1b6>
 8000b6c:	4b85      	ldr	r3, [pc, #532]	@ (8000d84 <main+0x3b8>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	238d      	movs	r3, #141	@ 0x8d
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d903      	bls.n	8000b82 <main+0x1b6>
				supplyOKFlag = 1;
 8000b7a:	4b84      	ldr	r3, [pc, #528]	@ (8000d8c <main+0x3c0>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e002      	b.n	8000b88 <main+0x1bc>
			}
			else {
				supplyOKFlag = 0;
 8000b82:	4b82      	ldr	r3, [pc, #520]	@ (8000d8c <main+0x3c0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > UPPER_TEMP_MOSFET) {
 8000b88:	4b81      	ldr	r3, [pc, #516]	@ (8000d90 <main+0x3c4>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	23fa      	movs	r3, #250	@ 0xfa
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d903      	bls.n	8000b9e <main+0x1d2>
				OT_flag = 1;
 8000b96:	4b7f      	ldr	r3, [pc, #508]	@ (8000d94 <main+0x3c8>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e002      	b.n	8000ba4 <main+0x1d8>
			}
			else {
				OT_flag = 0;
 8000b9e:	4b7d      	ldr	r3, [pc, #500]	@ (8000d94 <main+0x3c8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > UPPER_I_IN) {
 8000ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8000d98 <main+0x3cc>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4a7c      	ldr	r2, [pc, #496]	@ (8000d9c <main+0x3d0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d903      	bls.n	8000bb8 <main+0x1ec>
				OCPinFlag = 1;
 8000bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8000da0 <main+0x3d4>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e002      	b.n	8000bbe <main+0x1f2>
			}
			else {
				OCPinFlag = 0;
 8000bb8:	4b79      	ldr	r3, [pc, #484]	@ (8000da0 <main+0x3d4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]




		// ------------ ASM -----------------------
		switch (state) {
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d89a      	bhi.n	8000afc <main+0x130>
 8000bc6:	009a      	lsls	r2, r3, #2
 8000bc8:	4b76      	ldr	r3, [pc, #472]	@ (8000da4 <main+0x3d8>)
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 8000bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8000d7c <main+0x3b0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 8000bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8000d80 <main+0x3b4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	485e      	ldr	r0, [pc, #376]	@ (8000d5c <main+0x390>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	0019      	movs	r1, r3
 8000be6:	f003 fd72 	bl	80046ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 8000bea:	4b61      	ldr	r3, [pc, #388]	@ (8000d70 <main+0x3a4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	2140      	movs	r1, #64	@ 0x40
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 fd6c 	bl	80046ce <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bf6:	4b50      	ldr	r3, [pc, #320]	@ (8000d38 <main+0x36c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->ARR = ignFrequency;
 8000bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8000da8 <main+0x3dc>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b4b      	ldr	r3, [pc, #300]	@ (8000d34 <main+0x368>)
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c


			// exit conditions
			if (enableFlag  && supplyOKFlag && !OT_flag) {
 8000c08:	4b5b      	ldr	r3, [pc, #364]	@ (8000d78 <main+0x3ac>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <main+0x248>
 8000c12:	e17d      	b.n	8000f10 <main+0x544>
 8000c14:	4b5d      	ldr	r3, [pc, #372]	@ (8000d8c <main+0x3c0>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <main+0x254>
 8000c1e:	e177      	b.n	8000f10 <main+0x544>
 8000c20:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <main+0x3c8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d000      	beq.n	8000c2c <main+0x260>
 8000c2a:	e171      	b.n	8000f10 <main+0x544>
				snprintf(msg, sizeof(msg), "IGNITE\r\n");
 8000c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8000dac <main+0x3e0>)
 8000c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d64 <main+0x398>)
 8000c30:	213c      	movs	r1, #60	@ 0x3c
 8000c32:	0018      	movs	r0, r3
 8000c34:	f008 fb82 	bl	800933c <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <main+0x398>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fa62 	bl	8000104 <strlen>
 8000c40:	0003      	movs	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4947      	ldr	r1, [pc, #284]	@ (8000d64 <main+0x398>)
 8000c46:	4844      	ldr	r0, [pc, #272]	@ (8000d58 <main+0x38c>)
 8000c48:	230a      	movs	r3, #10
 8000c4a:	f006 f9fb 	bl	8007044 <HAL_UART_Transmit>
				state = IGNITE;
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	2202      	movs	r2, #2
 8000c52:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c54:	e15c      	b.n	8000f10 <main+0x544>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 8000c56:	4b56      	ldr	r3, [pc, #344]	@ (8000db0 <main+0x3e4>)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	4b56      	ldr	r3, [pc, #344]	@ (8000db4 <main+0x3e8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d903      	bls.n	8000c6a <main+0x29e>
				state = ERROR_state;
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	2204      	movs	r2, #4
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e055      	b.n	8000d16 <main+0x34a>
			}
			else if (!ignitionFlag) {
 8000c6a:	4b44      	ldr	r3, [pc, #272]	@ (8000d7c <main+0x3b0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d151      	bne.n	8000d16 <main+0x34a>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 8000c72:	4b43      	ldr	r3, [pc, #268]	@ (8000d80 <main+0x3b4>)
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	4b50      	ldr	r3, [pc, #320]	@ (8000db8 <main+0x3ec>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d242      	bcs.n	8000d04 <main+0x338>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	4836      	ldr	r0, [pc, #216]	@ (8000d5c <main+0x390>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	0019      	movs	r1, r3
 8000c88:	f003 fd21 	bl	80046ce <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000dbc <main+0x3f0>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <main+0x36c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM1->ARR = ignFrequency;
 8000c98:	4b43      	ldr	r3, [pc, #268]	@ (8000da8 <main+0x3dc>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <main+0x368>)
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 8000ca2:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <main+0x3a4>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2140      	movs	r1, #64	@ 0x40
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f003 fd10 	bl	80046ce <HAL_GPIO_WritePin>
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
					if (adc_iSenseLamp > ILAMP_IGNITED
 8000cae:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <main+0x3f4>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	23fa      	movs	r3, #250	@ 0xfa
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d92c      	bls.n	8000d16 <main+0x34a>
							&& ignitionCounter > MIN_IGNITION_TIME) { // minimum ignition time 1000 ms
 8000cbc:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <main+0x3b4>)
 8000cbe:	881a      	ldrh	r2, [r3, #0]
 8000cc0:	23fa      	movs	r3, #250	@ 0xfa
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d926      	bls.n	8000d16 <main+0x34a>
					//if ( ignitionCounter > 1000) { // minimum ignition time 1000 ms
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000cc8:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <main+0x3a4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2140      	movs	r1, #64	@ 0x40
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 fcfd 	bl	80046ce <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <main+0x3b0>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
						snprintf(msg, sizeof(msg), "RUN\r\n");
 8000cda:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc4 <main+0x3f8>)
 8000cdc:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <main+0x398>)
 8000cde:	213c      	movs	r1, #60	@ 0x3c
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f008 fb2b 	bl	800933c <sniprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <main+0x398>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fa0b 	bl	8000104 <strlen>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	491c      	ldr	r1, [pc, #112]	@ (8000d64 <main+0x398>)
 8000cf4:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <main+0x38c>)
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	f006 f9a4 	bl	8007044 <HAL_UART_Transmit>
						state = RUN;
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e008      	b.n	8000d16 <main+0x34a>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 8000d04:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <main+0x3ec>)
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <main+0x3b4>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d802      	bhi.n	8000d16 <main+0x34a>
					state = IGN_FAIL;
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <main+0x3ac>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d000      	beq.n	8000d22 <main+0x356>
 8000d20:	e0f8      	b.n	8000f14 <main+0x548>
				state = INIT;
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000d28:	e0f4      	b.n	8000f14 <main+0x548>
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40001000 	.word	0x40001000
 8000d30:	200002cc 	.word	0x200002cc
 8000d34:	40012c00 	.word	0x40012c00
 8000d38:	200001e8 	.word	0x200001e8
 8000d3c:	200001d4 	.word	0x200001d4
 8000d40:	00000fff 	.word	0x00000fff
 8000d44:	200001a4 	.word	0x200001a4
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	200000c0 	.word	0x200000c0
 8000d50:	200000e4 	.word	0x200000e4
 8000d54:	2000040f 	.word	0x2000040f
 8000d58:	20000364 	.word	0x20000364
 8000d5c:	50000800 	.word	0x50000800
 8000d60:	08009d64 	.word	0x08009d64
 8000d64:	20000410 	.word	0x20000410
 8000d68:	200000bd 	.word	0x200000bd
 8000d6c:	200000bc 	.word	0x200000bc
 8000d70:	50000400 	.word	0x50000400
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	200000b8 	.word	0x200000b8
 8000d7c:	20000452 	.word	0x20000452
 8000d80:	20000450 	.word	0x20000450
 8000d84:	200000d8 	.word	0x200000d8
 8000d88:	00000c56 	.word	0x00000c56
 8000d8c:	200000b9 	.word	0x200000b9
 8000d90:	200000da 	.word	0x200000da
 8000d94:	200000ba 	.word	0x200000ba
 8000d98:	200000e2 	.word	0x200000e2
 8000d9c:	00000a28 	.word	0x00000a28
 8000da0:	200000bb 	.word	0x200000bb
 8000da4:	08009d98 	.word	0x08009d98
 8000da8:	20000006 	.word	0x20000006
 8000dac:	08009d6c 	.word	0x08009d6c
 8000db0:	20000453 	.word	0x20000453
 8000db4:	2000003c 	.word	0x2000003c
 8000db8:	20000038 	.word	0x20000038
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	200000de 	.word	0x200000de
 8000dc4:	08009d78 	.word	0x08009d78
		case IGN_FAIL:
			ignitionFlag = 0;
 8000dc8:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <main+0x550>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
			snprintf(msg, sizeof(msg), "IGNITION FAIL\r\n");
 8000dce:	4a54      	ldr	r2, [pc, #336]	@ (8000f20 <main+0x554>)
 8000dd0:	4b54      	ldr	r3, [pc, #336]	@ (8000f24 <main+0x558>)
 8000dd2:	213c      	movs	r1, #60	@ 0x3c
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f008 fab1 	bl	800933c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000dda:	4b52      	ldr	r3, [pc, #328]	@ (8000f24 <main+0x558>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff f991 	bl	8000104 <strlen>
 8000de2:	0003      	movs	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	494f      	ldr	r1, [pc, #316]	@ (8000f24 <main+0x558>)
 8000de8:	484f      	ldr	r0, [pc, #316]	@ (8000f28 <main+0x55c>)
 8000dea:	230a      	movs	r3, #10
 8000dec:	f006 f92a 	bl	8007044 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000df0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f2c <main+0x560>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	2140      	movs	r1, #64	@ 0x40
 8000df6:	0018      	movs	r0, r3
 8000df8:	f003 fc69 	bl	80046ce <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 8000dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <main+0x564>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	4a4a      	ldr	r2, [pc, #296]	@ (8000f34 <main+0x568>)
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	f003 fc7b 	bl	8004708 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e12:	2064      	movs	r0, #100	@ 0x64
 8000e14:	f001 fa4e 	bl	80022b4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	4a45      	ldr	r2, [pc, #276]	@ (8000f34 <main+0x568>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f003 fc71 	bl	8004708 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e26:	2064      	movs	r0, #100	@ 0x64
 8000e28:	f001 fa44 	bl	80022b4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	4a40      	ldr	r2, [pc, #256]	@ (8000f34 <main+0x568>)
 8000e32:	0019      	movs	r1, r3
 8000e34:	0010      	movs	r0, r2
 8000e36:	f003 fc67 	bl	8004708 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	@ 0x64
 8000e3c:	f001 fa3a 	bl	80022b4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	4a3b      	ldr	r2, [pc, #236]	@ (8000f34 <main+0x568>)
 8000e46:	0019      	movs	r1, r3
 8000e48:	0010      	movs	r0, r2
 8000e4a:	f003 fc5d 	bl	8004708 <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f38 <main+0x56c>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	0018      	movs	r0, r3
 8000e54:	f001 fa2e 	bl	80022b4 <HAL_Delay>
			failedIgnitionCounter++;
 8000e58:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <main+0x570>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <main+0x570>)
 8000e62:	701a      	strb	r2, [r3, #0]
			state = INIT;
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
			break;
 8000e6a:	e056      	b.n	8000f1a <main+0x54e>


		case RUN:
			// RUN code
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	4830      	ldr	r0, [pc, #192]	@ (8000f34 <main+0x568>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	0019      	movs	r1, r3
 8000e76:	f003 fc2a 	bl	80046ce <HAL_GPIO_WritePin>
			TIM1->ARR=operationFrequency;
 8000e7a:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <main+0x574>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <main+0x578>)
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, chargeTimeOperation); // chargingTime setpoint
 8000e84:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <main+0x57c>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <main+0x564>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <main+0x580>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	482e      	ldr	r0, [pc, #184]	@ (8000f50 <main+0x584>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f002 fe10 	bl	8003ac0 <HAL_DAC_SetValue>

			// exit conditions

			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <main+0x588>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d004      	beq.n	8000eb4 <main+0x4e8>
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <main+0x58c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <main+0x4ee>
				state = INIT;
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			}

			/*if (OT_flag || errorFlag || (adc_uSenseLamp>adc_uSenseLampOpenCircuit)) {
				state = ERROR_state;
			}*/
			if (OT_flag ) {
 8000eba:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <main+0x590>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d029      	beq.n	8000f18 <main+0x54c>
				state = INIT;
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000eca:	e025      	b.n	8000f18 <main+0x54c>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <main+0x564>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	@ 0x34
			snprintf(msg, sizeof(msg), "ERROR\r\n");
 8000ed4:	4a22      	ldr	r2, [pc, #136]	@ (8000f60 <main+0x594>)
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <main+0x558>)
 8000ed8:	213c      	movs	r1, #60	@ 0x3c
 8000eda:	0018      	movs	r0, r3
 8000edc:	f008 fa2e 	bl	800933c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <main+0x558>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff f90e 	bl	8000104 <strlen>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	490d      	ldr	r1, [pc, #52]	@ (8000f24 <main+0x558>)
 8000eee:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <main+0x55c>)
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	f006 f8a7 	bl	8007044 <HAL_UART_Transmit>

			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <main+0x568>)
 8000efc:	0019      	movs	r1, r3
 8000efe:	0010      	movs	r0, r2
 8000f00:	f003 fc02 	bl	8004708 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000f04:	23fa      	movs	r3, #250	@ 0xfa
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 f9d3 	bl	80022b4 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000f0e:	e004      	b.n	8000f1a <main+0x54e>
			break;
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	e5f3      	b.n	8000afc <main+0x130>
			break;
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	e5f1      	b.n	8000afc <main+0x130>
			break;
 8000f18:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request && enableUART) {
 8000f1a:	e5ef      	b.n	8000afc <main+0x130>
 8000f1c:	20000452 	.word	0x20000452
 8000f20:	08009d80 	.word	0x08009d80
 8000f24:	20000410 	.word	0x20000410
 8000f28:	20000364 	.word	0x20000364
 8000f2c:	50000400 	.word	0x50000400
 8000f30:	200001e8 	.word	0x200001e8
 8000f34:	50000800 	.word	0x50000800
 8000f38:	2000003a 	.word	0x2000003a
 8000f3c:	20000453 	.word	0x20000453
 8000f40:	2000000a 	.word	0x2000000a
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000002 	.word	0x20000002
 8000f50:	200001d4 	.word	0x200001d4
 8000f54:	200000b8 	.word	0x200000b8
 8000f58:	200000b9 	.word	0x200000b9
 8000f5c:	200000ba 	.word	0x200000ba
 8000f60:	08009d90 	.word	0x08009d90

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b093      	sub	sp, #76	@ 0x4c
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	2410      	movs	r4, #16
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2338      	movs	r3, #56	@ 0x38
 8000f72:	001a      	movs	r2, r3
 8000f74:	2100      	movs	r1, #0
 8000f76:	f008 fa17 	bl	80093a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	2310      	movs	r3, #16
 8000f80:	001a      	movs	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f008 fa10 	bl	80093a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f003 fbd7 	bl	8004740 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2202      	movs	r2, #2
 8000f96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000fa0:	0021      	movs	r1, r4
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2240      	movs	r2, #64	@ 0x40
 8000fac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	22e0      	movs	r2, #224	@ 0xe0
 8000fca:	0312      	lsls	r2, r2, #12
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	22e0      	movs	r2, #224	@ 0xe0
 8000fd2:	0512      	lsls	r2, r2, #20
 8000fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2280      	movs	r2, #128	@ 0x80
 8000fda:	0592      	lsls	r2, r2, #22
 8000fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f003 fbf9 	bl	80047d8 <HAL_RCC_OscConfig>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fea:	f000 fca3 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	003b      	movs	r3, r7
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	003b      	movs	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001000:	003b      	movs	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001006:	003b      	movs	r3, r7
 8001008:	2100      	movs	r1, #0
 800100a:	0018      	movs	r0, r3
 800100c:	f003 fefe 	bl	8004e0c <HAL_RCC_ClockConfig>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001014:	f000 fc8e 	bl	8001934 <Error_Handler>
  }
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b013      	add	sp, #76	@ 0x4c
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2011      	movs	r0, #17
 800102a:	f002 fc41 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800102e:	2011      	movs	r0, #17
 8001030:	f002 fc53 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* ADC1_COMP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	200c      	movs	r0, #12
 800103a:	f002 fc39 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800103e:	200c      	movs	r0, #12
 8001040:	f002 fc4b 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2009      	movs	r0, #9
 800104a:	f002 fc31 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800104e:	2009      	movs	r0, #9
 8001050:	f002 fc43 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2010      	movs	r0, #16
 800105a:	f002 fc29 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800105e:	2010      	movs	r0, #16
 8001060:	f002 fc3b 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	201c      	movs	r0, #28
 800106a:	f002 fc21 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800106e:	201c      	movs	r0, #28
 8001070:	f002 fc33 	bl	80038da <HAL_NVIC_EnableIRQ>
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	0018      	movs	r0, r3
 8001086:	230c      	movs	r3, #12
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f008 f98c 	bl	80093a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001090:	4b55      	ldr	r3, [pc, #340]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 8001092:	4a56      	ldr	r2, [pc, #344]	@ (80011ec <MX_ADC1_Init+0x170>)
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001096:	4b54      	ldr	r3, [pc, #336]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 8001098:	22a0      	movs	r2, #160	@ 0xa0
 800109a:	0352      	lsls	r2, r2, #13
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b52      	ldr	r3, [pc, #328]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b50      	ldr	r3, [pc, #320]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010aa:	4b4f      	ldr	r3, [pc, #316]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	0392      	lsls	r2, r2, #14
 80010b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b2:	4b4d      	ldr	r3, [pc, #308]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b8:	4b4b      	ldr	r3, [pc, #300]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80010be:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c4:	4b48      	ldr	r3, [pc, #288]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 6;
 80010ca:	4b47      	ldr	r3, [pc, #284]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80010d0:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010d2:	22a8      	movs	r2, #168	@ 0xa8
 80010d4:	00d2      	lsls	r2, r2, #3
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d8:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e0:	4b41      	ldr	r3, [pc, #260]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010e2:	222c      	movs	r2, #44	@ 0x2c
 80010e4:	2101      	movs	r1, #1
 80010e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e8:	4b3f      	ldr	r3, [pc, #252]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010f0:	2206      	movs	r2, #6
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010f6:	2206      	movs	r2, #6
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80010fc:	223c      	movs	r2, #60	@ 0x3c
 80010fe:	2100      	movs	r1, #0
 8001100:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001102:	4b39      	ldr	r3, [pc, #228]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 8001104:	2200      	movs	r2, #0
 8001106:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001108:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 800110a:	0018      	movs	r0, r3
 800110c:	f001 fa4a 	bl	80025a4 <HAL_ADC_Init>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001114:	f000 fc0e 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	1d3a      	adds	r2, r7, #4
 800112c:	4b2e      	ldr	r3, [pc, #184]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f001 fda5 	bl	8002c80 <HAL_ADC_ConfigChannel>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800113a:	f000 fbfb 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4a2b      	ldr	r2, [pc, #172]	@ (80011f0 <MX_ADC1_Init+0x174>)
 8001142:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2204      	movs	r2, #4
 8001148:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f001 fd95 	bl	8002c80 <HAL_ADC_ConfigChannel>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800115a:	f000 fbeb 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4a24      	ldr	r2, [pc, #144]	@ (80011f4 <MX_ADC1_Init+0x178>)
 8001162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2208      	movs	r2, #8
 8001168:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3a      	adds	r2, r7, #4
 800116c:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f001 fd85 	bl	8002c80 <HAL_ADC_ConfigChannel>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800117a:	f000 fbdb 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <MX_ADC1_Init+0x17c>)
 8001182:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	220c      	movs	r2, #12
 8001188:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f001 fd75 	bl	8002c80 <HAL_ADC_ConfigChannel>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800119a:	f000 fbcb 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <MX_ADC1_Init+0x180>)
 80011a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2210      	movs	r2, #16
 80011a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	1d3a      	adds	r2, r7, #4
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fd65 	bl	8002c80 <HAL_ADC_ConfigChannel>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80011ba:	f000 fbbb 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <MX_ADC1_Init+0x184>)
 80011c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2214      	movs	r2, #20
 80011c8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	1d3a      	adds	r2, r7, #4
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_ADC1_Init+0x16c>)
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 fd55 	bl	8002c80 <HAL_ADC_ConfigChannel>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80011da:	f000 fbab 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	200000e4 	.word	0x200000e4
 80011ec:	40012400 	.word	0x40012400
 80011f0:	04000002 	.word	0x04000002
 80011f4:	0c000008 	.word	0x0c000008
 80011f8:	20000100 	.word	0x20000100
 80011fc:	24000200 	.word	0x24000200
 8001200:	28000400 	.word	0x28000400

08001204 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_COMP2_Init+0x58>)
 800120a:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <MX_COMP2_Init+0x5c>)
 800120c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_COMP2_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_COMP2_Init+0x58>)
 8001216:	2240      	movs	r2, #64	@ 0x40
 8001218:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_COMP2_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_COMP2_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_COMP2_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_COMP2_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_COMP2_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_COMP2_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_COMP2_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <MX_COMP2_Init+0x58>)
 8001246:	0018      	movs	r0, r3
 8001248:	f002 f8d2 	bl	80033f0 <HAL_COMP_Init>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d001      	beq.n	8001254 <MX_COMP2_Init+0x50>
  {
    Error_Handler();
 8001250:	f000 fb70 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	200001a4 	.word	0x200001a4
 8001260:	40010204 	.word	0x40010204

08001264 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	0018      	movs	r0, r3
 800126e:	2324      	movs	r3, #36	@ 0x24
 8001270:	001a      	movs	r2, r3
 8001272:	2100      	movs	r1, #0
 8001274:	f008 f898 	bl	80093a8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_DAC1_Init+0x80>)
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <MX_DAC1_Init+0x84>)
 800127c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <MX_DAC1_Init+0x80>)
 8001280:	0018      	movs	r0, r3
 8001282:	f002 fb47 	bl	8003914 <HAL_DAC_Init>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800128a:	f000 fb53 	bl	8001934 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2201      	movs	r2, #1
 80012a4:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ac:	1d39      	adds	r1, r7, #4
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <MX_DAC1_Init+0x80>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	0018      	movs	r0, r3
 80012b4:	f002 fc34 	bl	8003b20 <HAL_DAC_ConfigChannel>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d001      	beq.n	80012c0 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f000 fb3a 	bl	8001934 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012c6:	1d39      	adds	r1, r7, #4
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_DAC1_Init+0x80>)
 80012ca:	2210      	movs	r2, #16
 80012cc:	0018      	movs	r0, r3
 80012ce:	f002 fc27 	bl	8003b20 <HAL_DAC_ConfigChannel>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <MX_DAC1_Init+0x76>
  {
    Error_Handler();
 80012d6:	f000 fb2d 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b00a      	add	sp, #40	@ 0x28
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	200001d4 	.word	0x200001d4
 80012e8:	40007400 	.word	0x40007400

080012ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09c      	sub	sp, #112	@ 0x70
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 80012f2:	235c      	movs	r3, #92	@ 0x5c
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	0018      	movs	r0, r3
 80012f8:	2314      	movs	r3, #20
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f008 f853 	bl	80093a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	2350      	movs	r3, #80	@ 0x50
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	0018      	movs	r0, r3
 8001308:	230c      	movs	r3, #12
 800130a:	001a      	movs	r2, r3
 800130c:	2100      	movs	r1, #0
 800130e:	f008 f84b 	bl	80093a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	2334      	movs	r3, #52	@ 0x34
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	0018      	movs	r0, r3
 8001318:	231c      	movs	r3, #28
 800131a:	001a      	movs	r2, r3
 800131c:	2100      	movs	r1, #0
 800131e:	f008 f843 	bl	80093a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001322:	003b      	movs	r3, r7
 8001324:	0018      	movs	r0, r3
 8001326:	2334      	movs	r3, #52	@ 0x34
 8001328:	001a      	movs	r2, r3
 800132a:	2100      	movs	r1, #0
 800132c:	f008 f83c 	bl	80093a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001330:	4b4e      	ldr	r3, [pc, #312]	@ (800146c <MX_TIM1_Init+0x180>)
 8001332:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <MX_TIM1_Init+0x184>)
 8001334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001336:	4b4d      	ldr	r3, [pc, #308]	@ (800146c <MX_TIM1_Init+0x180>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <MX_TIM1_Init+0x180>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320;
 8001342:	4b4a      	ldr	r3, [pc, #296]	@ (800146c <MX_TIM1_Init+0x180>)
 8001344:	22a0      	movs	r2, #160	@ 0xa0
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b48      	ldr	r3, [pc, #288]	@ (800146c <MX_TIM1_Init+0x180>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001350:	4b46      	ldr	r3, [pc, #280]	@ (800146c <MX_TIM1_Init+0x180>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001356:	4b45      	ldr	r3, [pc, #276]	@ (800146c <MX_TIM1_Init+0x180>)
 8001358:	2280      	movs	r2, #128	@ 0x80
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800135c:	4b43      	ldr	r3, [pc, #268]	@ (800146c <MX_TIM1_Init+0x180>)
 800135e:	0018      	movs	r0, r3
 8001360:	f004 f96a 	bl	8005638 <HAL_TIM_PWM_Init>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001368:	f000 fae4 	bl	8001934 <Error_Handler>
  }
  sClearInputConfig.ClearInputState = ENABLE;
 800136c:	215c      	movs	r1, #92	@ 0x5c
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
  sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_COMP2;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2201      	movs	r2, #1
 8001378:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 800137a:	1879      	adds	r1, r7, r1
 800137c:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <MX_TIM1_Init+0x180>)
 800137e:	2200      	movs	r2, #0
 8001380:	0018      	movs	r0, r3
 8001382:	f004 fd9f 	bl	8005ec4 <HAL_TIM_ConfigOCrefClear>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800138a:	f000 fad3 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2150      	movs	r1, #80	@ 0x50
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a2:	187a      	adds	r2, r7, r1
 80013a4:	4b31      	ldr	r3, [pc, #196]	@ (800146c <MX_TIM1_Init+0x180>)
 80013a6:	0011      	movs	r1, r2
 80013a8:	0018      	movs	r0, r3
 80013aa:	f005 fcd3 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013b2:	f000 fabf 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2134      	movs	r1, #52	@ 0x34
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2260      	movs	r2, #96	@ 0x60
 80013bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e2:	1879      	adds	r1, r7, r1
 80013e4:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_TIM1_Init+0x180>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	0018      	movs	r0, r3
 80013ea:	f004 fc6b 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80013f2:	f000 fa9f 	bl	8001934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f6:	003b      	movs	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013fc:	003b      	movs	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001402:	003b      	movs	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001408:	003b      	movs	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140e:	003b      	movs	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001414:	003b      	movs	r3, r7
 8001416:	2280      	movs	r2, #128	@ 0x80
 8001418:	0192      	lsls	r2, r2, #6
 800141a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800141c:	003b      	movs	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001422:	003b      	movs	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001428:	003b      	movs	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800142e:	003b      	movs	r3, r7
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	0492      	lsls	r2, r2, #18
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001436:	003b      	movs	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800143c:	003b      	movs	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001442:	003b      	movs	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001448:	003a      	movs	r2, r7
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_TIM1_Init+0x180>)
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f005 fcee 	bl	8006e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001458:	f000 fa6c 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <MX_TIM1_Init+0x180>)
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fc94 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b01c      	add	sp, #112	@ 0x70
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001e8 	.word	0x200001e8
 8001470:	40012c00 	.word	0x40012c00

08001474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	231c      	movs	r3, #28
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	0018      	movs	r0, r3
 8001480:	230c      	movs	r3, #12
 8001482:	001a      	movs	r2, r3
 8001484:	2100      	movs	r1, #0
 8001486:	f007 ff8f 	bl	80093a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	003b      	movs	r3, r7
 800148c:	0018      	movs	r0, r3
 800148e:	231c      	movs	r3, #28
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f007 ff88 	bl	80093a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <MX_TIM2_Init+0xbc>)
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	05d2      	lsls	r2, r2, #23
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014a2:	2210      	movs	r2, #16
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014ae:	22fa      	movs	r2, #250	@ 0xfa
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f004 f8b8 	bl	8005638 <HAL_TIM_PWM_Init>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014cc:	f000 fa32 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	211c      	movs	r1, #28
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014de:	187a      	adds	r2, r7, r1
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <MX_TIM2_Init+0xbc>)
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f005 fc35 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014ee:	f000 fa21 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f2:	003b      	movs	r3, r7
 80014f4:	2260      	movs	r2, #96	@ 0x60
 80014f6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80014f8:	003b      	movs	r3, r7
 80014fa:	22fa      	movs	r2, #250	@ 0xfa
 80014fc:	0052      	lsls	r2, r2, #1
 80014fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	003b      	movs	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001506:	003b      	movs	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800150c:	0039      	movs	r1, r7
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_TIM2_Init+0xbc>)
 8001510:	2208      	movs	r2, #8
 8001512:	0018      	movs	r0, r3
 8001514:	f004 fbd6 	bl	8005cc4 <HAL_TIM_PWM_ConfigChannel>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800151c:	f000 fa0a 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <MX_TIM2_Init+0xbc>)
 8001522:	0018      	movs	r0, r3
 8001524:	f000 fc32 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001528:	46c0      	nop			@ (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b00a      	add	sp, #40	@ 0x28
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000234 	.word	0x20000234

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	@ 0x30
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800153a:	231c      	movs	r3, #28
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	0018      	movs	r0, r3
 8001540:	2314      	movs	r3, #20
 8001542:	001a      	movs	r2, r3
 8001544:	2100      	movs	r1, #0
 8001546:	f007 ff2f 	bl	80093a8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800154a:	230c      	movs	r3, #12
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	0018      	movs	r0, r3
 8001550:	2310      	movs	r3, #16
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f007 ff27 	bl	80093a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	003b      	movs	r3, r7
 800155c:	0018      	movs	r0, r3
 800155e:	230c      	movs	r3, #12
 8001560:	001a      	movs	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	f007 ff20 	bl	80093a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001568:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <MX_TIM3_Init+0x114>)
 800156a:	4a38      	ldr	r2, [pc, #224]	@ (800164c <MX_TIM3_Init+0x118>)
 800156c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800156e:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <MX_TIM3_Init+0x114>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <MX_TIM3_Init+0x114>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800157a:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <MX_TIM3_Init+0x114>)
 800157c:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <MX_TIM3_Init+0x11c>)
 800157e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <MX_TIM3_Init+0x114>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <MX_TIM3_Init+0x114>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <MX_TIM3_Init+0x114>)
 800158e:	0018      	movs	r0, r3
 8001590:	f004 f994 	bl	80058bc <HAL_TIM_IC_Init>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001598:	f000 f9cc 	bl	8001934 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800159c:	211c      	movs	r1, #28
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2204      	movs	r2, #4
 80015a2:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2260      	movs	r2, #96	@ 0x60
 80015a8:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80015bc:	187a      	adds	r2, r7, r1
 80015be:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <MX_TIM3_Init+0x114>)
 80015c0:	0011      	movs	r1, r2
 80015c2:	0018      	movs	r0, r3
 80015c4:	f004 fda8 	bl	8006118 <HAL_TIM_SlaveConfigSynchro>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015cc:	f000 f9b2 	bl	8001934 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015d0:	210c      	movs	r1, #12
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2202      	movs	r2, #2
 80015d6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2202      	movs	r2, #2
 80015dc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ea:	1879      	adds	r1, r7, r1
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <MX_TIM3_Init+0x114>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	0018      	movs	r0, r3
 80015f2:	f004 fac3 	bl	8005b7c <HAL_TIM_IC_ConfigChannel>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80015fa:	f000 f99b 	bl	8001934 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015fe:	210c      	movs	r1, #12
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2201      	movs	r2, #1
 800160a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800160c:	1879      	adds	r1, r7, r1
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_TIM3_Init+0x114>)
 8001610:	2204      	movs	r2, #4
 8001612:	0018      	movs	r0, r3
 8001614:	f004 fab2 	bl	8005b7c <HAL_TIM_IC_ConfigChannel>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800161c:	f000 f98a 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	003b      	movs	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	003b      	movs	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162c:	003a      	movs	r2, r7
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_TIM3_Init+0x114>)
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f005 fb8e 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800163c:	f000 f97a 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b00c      	add	sp, #48	@ 0x30
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000280 	.word	0x20000280
 800164c:	40000400 	.word	0x40000400
 8001650:	0000ffff 	.word	0x0000ffff

08001654 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	0018      	movs	r0, r3
 800165e:	230c      	movs	r3, #12
 8001660:	001a      	movs	r2, r3
 8001662:	2100      	movs	r1, #0
 8001664:	f007 fea0 	bl	80093a8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <MX_TIM6_Init+0x70>)
 800166c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 8001670:	2210      	movs	r2, #16
 8001672:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 800167c:	22fa      	movs	r2, #250	@ 0xfa
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 800168a:	0018      	movs	r0, r3
 800168c:	f003 ff20 	bl	80054d0 <HAL_TIM_Base_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001694:	f000 f94e 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2220      	movs	r2, #32
 800169c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016a4:	1d3a      	adds	r2, r7, #4
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_TIM6_Init+0x6c>)
 80016a8:	0011      	movs	r1, r2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f005 fb52 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	1e03      	subs	r3, r0, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80016b4:	f000 f93e 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002cc 	.word	0x200002cc
 80016c4:	40001000 	.word	0x40001000

080016c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_TIM16_Init+0x44>)
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <MX_TIM16_Init+0x48>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_TIM16_Init+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_TIM16_Init+0x44>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_TIM16_Init+0x44>)
 80016e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <MX_TIM16_Init+0x4c>)
 80016e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_TIM16_Init+0x44>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_TIM16_Init+0x44>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_TIM16_Init+0x44>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <MX_TIM16_Init+0x44>)
 80016f8:	0018      	movs	r0, r3
 80016fa:	f003 fee9 	bl	80054d0 <HAL_TIM_Base_Init>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001702:	f000 f917 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000318 	.word	0x20000318
 8001710:	40014400 	.word	0x40014400
 8001714:	0000ffff 	.word	0x0000ffff

08001718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800171c:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 800171e:	4a24      	ldr	r2, [pc, #144]	@ (80017b0 <MX_USART2_UART_Init+0x98>)
 8001720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001724:	22e1      	movs	r2, #225	@ 0xe1
 8001726:	0252      	lsls	r2, r2, #9
 8001728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001762:	0018      	movs	r0, r3
 8001764:	f005 fc18 	bl	8006f98 <HAL_UART_Init>
 8001768:	1e03      	subs	r3, r0, #0
 800176a:	d001      	beq.n	8001770 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 f8e2 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001772:	2100      	movs	r1, #0
 8001774:	0018      	movs	r0, r3
 8001776:	f007 fc65 	bl	8009044 <HAL_UARTEx_SetTxFifoThreshold>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d001      	beq.n	8001782 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800177e:	f000 f8d9 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001784:	2100      	movs	r1, #0
 8001786:	0018      	movs	r0, r3
 8001788:	f007 fc9c 	bl	80090c4 <HAL_UARTEx_SetRxFifoThreshold>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 f8d0 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <MX_USART2_UART_Init+0x94>)
 8001796:	0018      	movs	r0, r3
 8001798:	f007 fc1a 	bl	8008fd0 <HAL_UARTEx_DisableFifoMode>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 f8c8 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	20000364 	.word	0x20000364
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <MX_DMA_Init+0x28>)
 80017bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <MX_DMA_Init+0x28>)
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <MX_DMA_Init+0x28>)
 80017c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ca:	2201      	movs	r2, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	40021000 	.word	0x40021000

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	240c      	movs	r4, #12
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	0018      	movs	r0, r3
 80017ec:	2314      	movs	r3, #20
 80017ee:	001a      	movs	r2, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	f007 fdd9 	bl	80093a8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <MX_GPIO_Init+0x148>)
 80017f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001928 <MX_GPIO_Init+0x148>)
 80017fc:	2102      	movs	r1, #2
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
 8001802:	4b49      	ldr	r3, [pc, #292]	@ (8001928 <MX_GPIO_Init+0x148>)
 8001804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b46      	ldr	r3, [pc, #280]	@ (8001928 <MX_GPIO_Init+0x148>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001812:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <MX_GPIO_Init+0x148>)
 8001814:	2104      	movs	r1, #4
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34
 800181a:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <MX_GPIO_Init+0x148>)
 800181c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b40      	ldr	r3, [pc, #256]	@ (8001928 <MX_GPIO_Init+0x148>)
 8001828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182a:	4b3f      	ldr	r3, [pc, #252]	@ (8001928 <MX_GPIO_Init+0x148>)
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	635a      	str	r2, [r3, #52]	@ 0x34
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <MX_GPIO_Init+0x148>)
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	2201      	movs	r2, #1
 8001838:	4013      	ands	r3, r2
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	483a      	ldr	r0, [pc, #232]	@ (800192c <MX_GPIO_Init+0x14c>)
 8001844:	2200      	movs	r2, #0
 8001846:	0019      	movs	r1, r3
 8001848:	f002 ff41 	bl	80046ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 800184c:	23a0      	movs	r3, #160	@ 0xa0
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	2200      	movs	r2, #0
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0018      	movs	r0, r3
 8001856:	f002 ff3a 	bl	80046ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <MX_GPIO_Init+0x150>)
 800185c:	2200      	movs	r2, #0
 800185e:	2140      	movs	r1, #64	@ 0x40
 8001860:	0018      	movs	r0, r3
 8001862:	f002 ff34 	bl	80046ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCU_Remote_Pin */
  GPIO_InitStruct.Pin = MCU_Remote_Pin;
 8001866:	193b      	adds	r3, r7, r4
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2201      	movs	r2, #1
 8001878:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 800187a:	193b      	adds	r3, r7, r4
 800187c:	4a2c      	ldr	r2, [pc, #176]	@ (8001930 <MX_GPIO_Init+0x150>)
 800187e:	0019      	movs	r1, r3
 8001880:	0010      	movs	r0, r2
 8001882:	f002 fda3 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001886:	0021      	movs	r1, r4
 8001888:	187b      	adds	r3, r7, r1
 800188a:	2280      	movs	r2, #128	@ 0x80
 800188c:	0212      	lsls	r2, r2, #8
 800188e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	000c      	movs	r4, r1
 8001892:	193b      	adds	r3, r7, r4
 8001894:	2201      	movs	r2, #1
 8001896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	193b      	adds	r3, r7, r4
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	4a21      	ldr	r2, [pc, #132]	@ (800192c <MX_GPIO_Init+0x14c>)
 80018a8:	0019      	movs	r1, r3
 80018aa:	0010      	movs	r0, r2
 80018ac:	f002 fd8e 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_Pin */
  GPIO_InitStruct.Pin = Status_Pin;
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	2201      	movs	r2, #1
 80018ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	193b      	adds	r3, r7, r4
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 80018c8:	193a      	adds	r2, r7, r4
 80018ca:	23a0      	movs	r3, #160	@ 0xa0
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f002 fd7b 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 80018ea:	193a      	adds	r2, r7, r4
 80018ec:	23a0      	movs	r3, #160	@ 0xa0
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f002 fd6a 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UV_LED_Pin */
  GPIO_InitStruct.Pin = UV_LED_Pin;
 80018f8:	0021      	movs	r1, r4
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2240      	movs	r2, #64	@ 0x40
 80018fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2201      	movs	r2, #1
 8001904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 8001912:	187b      	adds	r3, r7, r1
 8001914:	4a06      	ldr	r2, [pc, #24]	@ (8001930 <MX_GPIO_Init+0x150>)
 8001916:	0019      	movs	r1, r3
 8001918:	0010      	movs	r0, r2
 800191a:	f002 fd57 	bl	80043cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b009      	add	sp, #36	@ 0x24
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	40021000 	.word	0x40021000
 800192c:	50000800 	.word	0x50000800
 8001930:	50000400 	.word	0x50000400

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <Error_Handler+0x24>)
 8001942:	0019      	movs	r1, r3
 8001944:	0010      	movs	r0, r2
 8001946:	f002 fedf 	bl	8004708 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800194a:	23fa      	movs	r3, #250	@ 0xfa
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	0018      	movs	r0, r3
 8001950:	f000 fcb0 	bl	80022b4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001954:	46c0      	nop			@ (mov r8, r8)
 8001956:	e7f1      	b.n	800193c <Error_Handler+0x8>
 8001958:	50000800 	.word	0x50000800

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x44>)
 8001964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_MspInit+0x44>)
 8001968:	2101      	movs	r1, #1
 800196a:	430a      	orrs	r2, r1
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_MspInit+0x44>)
 800197c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_MspInit+0x44>)
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	0549      	lsls	r1, r1, #21
 8001984:	430a      	orrs	r2, r1
 8001986:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_MspInit+0x44>)
 800198a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	055b      	lsls	r3, r3, #21
 8001990:	4013      	ands	r3, r2
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b099      	sub	sp, #100	@ 0x64
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	234c      	movs	r3, #76	@ 0x4c
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	0018      	movs	r0, r3
 80019b2:	2314      	movs	r3, #20
 80019b4:	001a      	movs	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f007 fcf6 	bl	80093a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	2418      	movs	r4, #24
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	0018      	movs	r0, r3
 80019c2:	2334      	movs	r3, #52	@ 0x34
 80019c4:	001a      	movs	r2, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	f007 fcee 	bl	80093a8 <memset>
  if(hadc->Instance==ADC1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a44      	ldr	r2, [pc, #272]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d000      	beq.n	80019d8 <HAL_ADC_MspInit+0x34>
 80019d6:	e080      	b.n	8001ada <HAL_ADC_MspInit+0x136>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	01d2      	lsls	r2, r2, #7
 80019de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	05d2      	lsls	r2, r2, #23
 80019e6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	0018      	movs	r0, r3
 80019ec:	f003 fbb8 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 80019f4:	f7ff ff9e 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 80019fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019fc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 80019fe:	2180      	movs	r1, #128	@ 0x80
 8001a00:	0349      	lsls	r1, r1, #13
 8001a02:	430a      	orrs	r2, r1
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a06:	4b38      	ldr	r3, [pc, #224]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	035b      	lsls	r3, r3, #13
 8001a0e:	4013      	ands	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a18:	4b33      	ldr	r3, [pc, #204]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a32:	2102      	movs	r1, #2
 8001a34:	430a      	orrs	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 8001a44:	244c      	movs	r4, #76	@ 0x4c
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	220b      	movs	r2, #11
 8001a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	2203      	movs	r2, #3
 8001a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	193a      	adds	r2, r7, r4
 8001a5a:	23a0      	movs	r3, #160	@ 0xa0
 8001a5c:	05db      	lsls	r3, r3, #23
 8001a5e:	0011      	movs	r1, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	f002 fcb3 	bl	80043cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	2203      	movs	r2, #3
 8001a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <HAL_ADC_MspInit+0x148>)
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	0010      	movs	r0, r2
 8001a80:	f002 fca4 	bl	80043cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001a86:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_ADC_MspInit+0x150>)
 8001a88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001aa4:	2280      	movs	r2, #128	@ 0x80
 8001aa6:	0052      	lsls	r2, r2, #1
 8001aa8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001aac:	2280      	movs	r2, #128	@ 0x80
 8001aae:	00d2      	lsls	r2, r2, #3
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f002 f965 	bl	8003d90 <HAL_DMA_Init>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001aca:	f7ff ff33 	bl	8001934 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001ad2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_ADC_MspInit+0x14c>)
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b019      	add	sp, #100	@ 0x64
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40012400 	.word	0x40012400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	50000400 	.word	0x50000400
 8001af0:	20000148 	.word	0x20000148
 8001af4:	40020008 	.word	0x40020008

08001af8 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	240c      	movs	r4, #12
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	0018      	movs	r0, r3
 8001b06:	2314      	movs	r3, #20
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f007 fc4c 	bl	80093a8 <memset>
  if(hcomp->Instance==COMP2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <HAL_COMP_MspInit+0x60>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d11a      	bne.n	8001b50 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_COMP_MspInit+0x64>)
 8001b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_COMP_MspInit+0x64>)
 8001b20:	2102      	movs	r1, #2
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_COMP_MspInit+0x64>)
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	2210      	movs	r2, #16
 8001b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	4a06      	ldr	r2, [pc, #24]	@ (8001b60 <HAL_COMP_MspInit+0x68>)
 8001b48:	0019      	movs	r1, r3
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	f002 fc3e 	bl	80043cc <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b009      	add	sp, #36	@ 0x24
 8001b56:	bd90      	pop	{r4, r7, pc}
 8001b58:	40010204 	.word	0x40010204
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	50000400 	.word	0x50000400

08001b64 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b08b      	sub	sp, #44	@ 0x2c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	2414      	movs	r4, #20
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	0018      	movs	r0, r3
 8001b72:	2314      	movs	r3, #20
 8001b74:	001a      	movs	r2, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	f007 fc16 	bl	80093a8 <memset>
  if(hdac->Instance==DAC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <HAL_DAC_MspInit+0x80>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d129      	bne.n	8001bda <HAL_DAC_MspInit+0x76>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_DAC_MspInit+0x84>)
 8001b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_DAC_MspInit+0x84>)
 8001b8c:	2180      	movs	r1, #128	@ 0x80
 8001b8e:	0589      	lsls	r1, r1, #22
 8001b90:	430a      	orrs	r2, r1
 8001b92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_DAC_MspInit+0x84>)
 8001b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	059b      	lsls	r3, r3, #22
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_DAC_MspInit+0x84>)
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_DAC_MspInit+0x84>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_DAC_MspInit+0x84>)
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Ilevel_DAC_Pin|DAC2_Pin;
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	2230      	movs	r2, #48	@ 0x30
 8001bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	193b      	adds	r3, r7, r4
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	193b      	adds	r3, r7, r4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	193a      	adds	r2, r7, r4
 8001bce:	23a0      	movs	r3, #160	@ 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f002 fbf9 	bl	80043cc <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b00b      	add	sp, #44	@ 0x2c
 8001be0:	bd90      	pop	{r4, r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	40007400 	.word	0x40007400
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b093      	sub	sp, #76	@ 0x4c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf4:	2414      	movs	r4, #20
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	2334      	movs	r3, #52	@ 0x34
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	2100      	movs	r1, #0
 8001c00:	f007 fbd2 	bl	80093a8 <memset>
  if(htim_pwm->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d11d      	bne.n	8001c4a <HAL_TIM_PWM_MspInit+0x5e>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	0392      	lsls	r2, r2, #14
 8001c14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f003 fa9e 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001c28:	f7ff fe84 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x90>)
 8001c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x90>)
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0109      	lsls	r1, r1, #4
 8001c36:	430a      	orrs	r2, r1
 8001c38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x90>)
 8001c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c48:	e011      	b.n	8001c6e <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	05db      	lsls	r3, r3, #23
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d10b      	bne.n	8001c6e <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x90>)
 8001c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x90>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x90>)
 8001c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b013      	add	sp, #76	@ 0x4c
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b08b      	sub	sp, #44	@ 0x2c
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	2414      	movs	r4, #20
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	2314      	movs	r3, #20
 8001c90:	001a      	movs	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	f007 fb88 	bl	80093a8 <memset>
  if(htim_ic->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <HAL_TIM_IC_MspInit+0x88>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12d      	bne.n	8001cfe <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca6:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ca8:	2102      	movs	r1, #2
 8001caa:	430a      	orrs	r2, r1
 8001cac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_TIM_IC_MspInit+0x8c>)
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_TIM_IC_MspInit+0x8c>)
 8001cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cbe:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_TIM_IC_MspInit+0x8c>)
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_TIM_IC_MspInit+0x8c>)
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_INPUT_Pin;
 8001cd2:	0021      	movs	r1, r4
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2202      	movs	r2, #2
 8001cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2201      	movs	r2, #1
 8001cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	4a06      	ldr	r2, [pc, #24]	@ (8001d10 <HAL_TIM_IC_MspInit+0x90>)
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	f002 fb67 	bl	80043cc <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b00b      	add	sp, #44	@ 0x2c
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	50000400 	.word	0x50000400

08001d14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10c      	bne.n	8001d40 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d36:	2210      	movs	r2, #16
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d3e:	e01a      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <HAL_TIM_Base_MspInit+0x74>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d115      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	0289      	lsls	r1, r1, #10
 8001d54:	430a      	orrs	r2, r1
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2015      	movs	r0, #21
 8001d6c:	f001 fda0 	bl	80038b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001d70:	2015      	movs	r0, #21
 8001d72:	f001 fdb2 	bl	80038da <HAL_NVIC_EnableIRQ>
}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	40001000 	.word	0x40001000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40014400 	.word	0x40014400

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b08b      	sub	sp, #44	@ 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	2414      	movs	r4, #20
 8001d96:	193b      	adds	r3, r7, r4
 8001d98:	0018      	movs	r0, r3
 8001d9a:	2314      	movs	r3, #20
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f007 fb02 	bl	80093a8 <memset>
  if(htim->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a29      	ldr	r2, [pc, #164]	@ (8001e50 <HAL_TIM_MspPostInit+0xc4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d124      	bne.n	8001df8 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <HAL_TIM_MspPostInit+0xc8>)
 8001db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db2:	4b28      	ldr	r3, [pc, #160]	@ (8001e54 <HAL_TIM_MspPostInit+0xc8>)
 8001db4:	2101      	movs	r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_TIM_MspPostInit+0xc8>)
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001dc6:	193b      	adds	r3, r7, r4
 8001dc8:	2280      	movs	r2, #128	@ 0x80
 8001dca:	0052      	lsls	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	0021      	movs	r1, r4
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2203      	movs	r2, #3
 8001de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2202      	movs	r2, #2
 8001de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001de8:	187a      	adds	r2, r7, r1
 8001dea:	23a0      	movs	r3, #160	@ 0xa0
 8001dec:	05db      	lsls	r3, r3, #23
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f002 faeb 	bl	80043cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001df6:	e027      	b.n	8001e48 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	05db      	lsls	r3, r3, #23
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d121      	bne.n	8001e48 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <HAL_TIM_MspPostInit+0xc8>)
 8001e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_TIM_MspPostInit+0xc8>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_TIM_MspPostInit+0xc8>)
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	2204      	movs	r2, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001e1c:	2114      	movs	r1, #20
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	2240      	movs	r2, #64	@ 0x40
 8001e22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	2202      	movs	r2, #2
 8001e28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	2202      	movs	r2, #2
 8001e3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	4a06      	ldr	r2, [pc, #24]	@ (8001e58 <HAL_TIM_MspPostInit+0xcc>)
 8001e40:	0019      	movs	r1, r3
 8001e42:	0010      	movs	r0, r2
 8001e44:	f002 fac2 	bl	80043cc <HAL_GPIO_Init>
}
 8001e48:	46c0      	nop			@ (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b00b      	add	sp, #44	@ 0x2c
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	50000800 	.word	0x50000800

08001e5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b097      	sub	sp, #92	@ 0x5c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	2344      	movs	r3, #68	@ 0x44
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	0018      	movs	r0, r3
 8001e6a:	2314      	movs	r3, #20
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f007 fa9a 	bl	80093a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e74:	2410      	movs	r4, #16
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	0018      	movs	r0, r3
 8001e7a:	2334      	movs	r3, #52	@ 0x34
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f007 fa92 	bl	80093a8 <memset>
  if(huart->Instance==USART2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_UART_MspInit+0xb8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d13e      	bne.n	8001f0c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f003 f95f 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ea6:	f7ff fd45 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eae:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	0289      	lsls	r1, r1, #10
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_UART_MspInit+0xbc>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001ede:	2144      	movs	r1, #68	@ 0x44
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <HAL_UART_MspInit+0xc0>)
 8001ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2202      	movs	r2, #2
 8001eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2201      	movs	r2, #1
 8001efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	187a      	adds	r2, r7, r1
 8001f00:	23a0      	movs	r3, #160	@ 0xa0
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f002 fa60 	bl	80043cc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b017      	add	sp, #92	@ 0x5c
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	00008004 	.word	0x00008004

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	e7fd      	b.n	8001f2c <HardFault_Handler+0x4>

08001f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 f998 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <DMA1_Channel1_IRQHandler+0x98>)
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f002 f8f3 	bl	8004148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
  for (int ch = 0; ch < numberADCchannels; ch++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	e017      	b.n	8001f98 <DMA1_Channel1_IRQHandler+0x44>
      adc_buffer[ch] = (adc_buffer[ch] * 3 + (adc_DMA[ch])) >> 2;
 8001f68:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	0052      	lsls	r2, r2, #1
 8001f6e:	5ad3      	ldrh	r3, [r2, r3]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	001a      	movs	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	189b      	adds	r3, r3, r2
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <DMA1_Channel1_IRQHandler+0xa0>)
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	0049      	lsls	r1, r1, #1
 8001f80:	5a8a      	ldrh	r2, [r1, r2]
 8001f82:	b292      	uxth	r2, r2
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	109b      	asrs	r3, r3, #2
 8001f88:	b299      	uxth	r1, r3
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	0052      	lsls	r2, r2, #1
 8001f90:	52d1      	strh	r1, [r2, r3]
  for (int ch = 0; ch < numberADCchannels; ch++) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3301      	adds	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <DMA1_Channel1_IRQHandler+0xa4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	dbe0      	blt.n	8001f68 <DMA1_Channel1_IRQHandler+0x14>
  }

  // Assign named channels
  adc_24V          = adc_buffer[0]; // 4095 = 36.3 V
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <DMA1_Channel1_IRQHandler+0xa8>)
 8001fae:	801a      	strh	r2, [r3, #0]
  adc_tempMOSFET   = adc_buffer[1]; // 2482 = 2V = 90°C
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fb2:	885b      	ldrh	r3, [r3, #2]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <DMA1_Channel1_IRQHandler+0xac>)
 8001fb8:	801a      	strh	r2, [r3, #0]
  adc_uSenseLamp   = adc_buffer[2];
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <DMA1_Channel1_IRQHandler+0xb0>)
 8001fc2:	801a      	strh	r2, [r3, #0]
  adc_iSenseLamp   = adc_buffer[3];
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fc6:	88db      	ldrh	r3, [r3, #6]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <DMA1_Channel1_IRQHandler+0xb4>)
 8001fcc:	801a      	strh	r2, [r3, #0]
  adc_lampIntensity= adc_buffer[4];
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fd0:	891b      	ldrh	r3, [r3, #8]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <DMA1_Channel1_IRQHandler+0xb8>)
 8001fd6:	801a      	strh	r2, [r3, #0]
  adc_iSenseIn     = adc_buffer[5]; // 2707 = 24V, 4095 = 0.825 A
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fda:	895b      	ldrh	r3, [r3, #10]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <DMA1_Channel1_IRQHandler+0xbc>)
 8001fe0:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	20000148 	.word	0x20000148
 8001ff0:	200000cc 	.word	0x200000cc
 8001ff4:	200000c0 	.word	0x200000c0
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	200000d8 	.word	0x200000d8
 8002000:	200000da 	.word	0x200000da
 8002004:	200000dc 	.word	0x200000dc
 8002008:	200000de 	.word	0x200000de
 800200c:	200000e0 	.word	0x200000e0
 8002010:	200000e2 	.word	0x200000e2

08002014 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <ADC1_COMP_IRQHandler+0x14>)
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fcf8 	bl	8002a10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002020:	46c0      	nop			@ (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	200000e4 	.word	0x200000e4

0800202c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <TIM3_IRQHandler+0x14>)
 8002032:	0018      	movs	r0, r3
 8002034:	f003 fc9a 	bl	800596c <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	20000280 	.word	0x20000280

08002044 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 800204a:	0018      	movs	r0, r3
 800204c:	f003 fc8e 	bl	800596c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 8002052:	0018      	movs	r0, r3
 8002054:	f001 fcd8 	bl	8003a08 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	23fa      	movs	r3, #250	@ 0xfa
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	429a      	cmp	r2, r3
 8002068:	d206      	bcs.n	8002078 <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002074:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002076:	e00b      	b.n	8002090 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	23fa      	movs	r3, #250	@ 0xfa
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d305      	bcc.n	8002090 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002086:	2200      	movs	r2, #0
 8002088:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	200002cc 	.word	0x200002cc
 800209c:	200001d4 	.word	0x200001d4
 80020a0:	200000bc 	.word	0x200000bc
 80020a4:	20000454 	.word	0x20000454
 80020a8:	200000bd 	.word	0x200000bd

080020ac <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <TIM16_IRQHandler+0x14>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f003 fc5a 	bl	800596c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	20000318 	.word	0x20000318

080020c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <USART2_IRQHandler+0x14>)
 80020ca:	0018      	movs	r0, r3
 80020cc:	f005 f8bc 	bl	8007248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	20000364 	.word	0x20000364

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	18d3      	adds	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f007 f954 	bl	80093b8 <__errno>
 8002110:	0003      	movs	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	2301      	movs	r3, #1
 8002118:	425b      	negs	r3, r3
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	18d2      	adds	r2, r2, r3
 800212a:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <_sbrk+0x64>)
 800212c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b006      	add	sp, #24
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20009000 	.word	0x20009000
 800213c:	00000400 	.word	0x00000400
 8002140:	20000458 	.word	0x20000458
 8002144:	200005a8 	.word	0x200005a8

08002148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800214c:	46c0      	nop			@ (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002154:	480d      	ldr	r0, [pc, #52]	@ (800218c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002156:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002158:	f7ff fff6 	bl	8002148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <LoopForever+0x6>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	@ (8002194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <LoopForever+0xe>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	@ (80021a0 <LoopForever+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002182:	f007 f91f 	bl	80093c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002186:	f7fe fc21 	bl	80009cc <main>

0800218a <LoopForever>:

LoopForever:
  b LoopForever
 800218a:	e7fe      	b.n	800218a <LoopForever>
  ldr   r0, =_estack
 800218c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002198:	0800a020 	.word	0x0800a020
  ldr r2, =_sbss
 800219c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80021a0:	200005a8 	.word	0x200005a8

080021a4 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <CEC_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_Init+0x3c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_Init+0x3c>)
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	0049      	lsls	r1, r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	2003      	movs	r0, #3
 80021c4:	f000 f810 	bl	80021e8 <HAL_InitTick>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e001      	b.n	80021d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fbc2 	bl	800195c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	781b      	ldrb	r3, [r3, #0]
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021f0:	230f      	movs	r3, #15
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_InitTick+0x88>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02b      	beq.n	8002258 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002200:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <HAL_InitTick+0x8c>)
 8002202:	681c      	ldr	r4, [r3, #0]
 8002204:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <HAL_InitTick+0x88>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	0019      	movs	r1, r3
 800220a:	23fa      	movs	r3, #250	@ 0xfa
 800220c:	0098      	lsls	r0, r3, #2
 800220e:	f7fd ff8b 	bl	8000128 <__udivsi3>
 8002212:	0003      	movs	r3, r0
 8002214:	0019      	movs	r1, r3
 8002216:	0020      	movs	r0, r4
 8002218:	f7fd ff86 	bl	8000128 <__udivsi3>
 800221c:	0003      	movs	r3, r0
 800221e:	0018      	movs	r0, r3
 8002220:	f001 fb6b 	bl	80038fa <HAL_SYSTICK_Config>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d112      	bne.n	800224e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d80a      	bhi.n	8002244 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	2301      	movs	r3, #1
 8002232:	425b      	negs	r3, r3
 8002234:	2200      	movs	r2, #0
 8002236:	0018      	movs	r0, r3
 8002238:	f001 fb3a 	bl	80038b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_InitTick+0x90>)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00d      	b.n	8002260 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002244:	230f      	movs	r3, #15
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e008      	b.n	8002260 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800224e:	230f      	movs	r3, #15
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e003      	b.n	8002260 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002258:	230f      	movs	r3, #15
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002260:	230f      	movs	r3, #15
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	781b      	ldrb	r3, [r3, #0]
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b005      	add	sp, #20
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	20000048 	.word	0x20000048
 8002274:	20000040 	.word	0x20000040
 8002278:	20000044 	.word	0x20000044

0800227c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_IncTick+0x1c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	001a      	movs	r2, r3
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_IncTick+0x20>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	18d2      	adds	r2, r2, r3
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_IncTick+0x20>)
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	20000048 	.word	0x20000048
 800229c:	2000045c 	.word	0x2000045c

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b02      	ldr	r3, [pc, #8]	@ (80022b0 <HAL_GetTick+0x10>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	2000045c 	.word	0x2000045c

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff fff0 	bl	80022a0 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	001a      	movs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	f7ff ffe0 	bl	80022a0 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	20000048 	.word	0x20000048

080022fc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800230c:	401a      	ands	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	fe3fffff 	.word	0xfe3fffff

08002324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	23e0      	movs	r3, #224	@ 0xe0
 8002332:	045b      	lsls	r3, r3, #17
 8002334:	4013      	ands	r3, r2
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}

0800233e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	2104      	movs	r1, #4
 8002352:	400a      	ands	r2, r1
 8002354:	2107      	movs	r1, #7
 8002356:	4091      	lsls	r1, r2
 8002358:	000a      	movs	r2, r1
 800235a:	43d2      	mvns	r2, r2
 800235c:	401a      	ands	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2104      	movs	r1, #4
 8002362:	400b      	ands	r3, r1
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4099      	lsls	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	431a      	orrs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002370:	46c0      	nop			@ (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bd80      	pop	{r7, pc}

08002378 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	2104      	movs	r1, #4
 800238a:	400a      	ands	r2, r1
 800238c:	2107      	movs	r1, #7
 800238e:	4091      	lsls	r1, r2
 8002390:	000a      	movs	r2, r1
 8002392:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2104      	movs	r1, #4
 8002398:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800239a:	40da      	lsrs	r2, r3
 800239c:	0013      	movs	r3, r2
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	23c0      	movs	r3, #192	@ 0xc0
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4013      	ands	r3, r2
 80023b8:	d101      	bne.n	80023be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	211f      	movs	r1, #31
 80023dc:	400a      	ands	r2, r1
 80023de:	210f      	movs	r1, #15
 80023e0:	4091      	lsls	r1, r2
 80023e2:	000a      	movs	r2, r1
 80023e4:	43d2      	mvns	r2, r2
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	210f      	movs	r1, #15
 80023ee:	4019      	ands	r1, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	201f      	movs	r0, #31
 80023f4:	4003      	ands	r3, r0
 80023f6:	4099      	lsls	r1, r3
 80023f8:	000b      	movs	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002400:	46c0      	nop			@ (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}

08002408 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	035b      	lsls	r3, r3, #13
 800241a:	0b5b      	lsrs	r3, r3, #13
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b002      	add	sp, #8
 8002428:	bd80      	pop	{r7, pc}

0800242a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	0352      	lsls	r2, r2, #13
 800243c:	0b52      	lsrs	r2, r2, #13
 800243e:	43d2      	mvns	r2, r2
 8002440:	401a      	ands	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}

0800244e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2203      	movs	r2, #3
 800245c:	4013      	ands	r3, r2
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	0212      	lsls	r2, r2, #8
 800247c:	43d2      	mvns	r2, r2
 800247e:	401a      	ands	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	400b      	ands	r3, r1
 8002488:	4904      	ldr	r1, [pc, #16]	@ (800249c <LL_ADC_SetChannelSamplingTime+0x34>)
 800248a:	400b      	ands	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	07ffff00 	.word	0x07ffff00

080024a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	2280      	movs	r2, #128	@ 0x80
 80024b2:	0552      	lsls	r2, r2, #21
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	6fffffe8 	.word	0x6fffffe8

080024c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	055b      	lsls	r3, r3, #21
 80024d8:	401a      	ands	r2, r3
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	055b      	lsls	r3, r3, #21
 80024de:	429a      	cmp	r2, r3
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <LL_ADC_Enable+0x20>)
 80024fe:	4013      	ands	r3, r2
 8002500:	2201      	movs	r2, #1
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002508:	46c0      	nop			@ (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}
 8002510:	7fffffe8 	.word	0x7fffffe8

08002514 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <LL_ADC_Disable+0x20>)
 8002522:	4013      	ands	r3, r2
 8002524:	2202      	movs	r2, #2
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}
 8002534:	7fffffe8 	.word	0x7fffffe8

08002538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <LL_ADC_IsEnabled+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_IsEnabled+0x1a>
 8002550:	2300      	movs	r3, #0
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <LL_ADC_REG_StartConversion+0x20>)
 800256a:	4013      	ands	r3, r2
 800256c:	2204      	movs	r2, #4
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	7fffffe8 	.word	0x7fffffe8

08002580 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2204      	movs	r2, #4
 800258e:	4013      	ands	r3, r2
 8002590:	2b04      	cmp	r3, #4
 8002592:	d101      	bne.n	8002598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	231f      	movs	r3, #31
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e17f      	b.n	80028ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff f9e5 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2254      	movs	r2, #84	@ 0x54
 80025e4:	2100      	movs	r1, #0
 80025e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff ff6b 	bl	80024c8 <LL_ADC_IsInternalRegulatorEnabled>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d115      	bne.n	8002622 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff50 	bl	80024a0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002600:	4bb4      	ldr	r3, [pc, #720]	@ (80028d4 <HAL_ADC_Init+0x330>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	49b4      	ldr	r1, [pc, #720]	@ (80028d8 <HAL_ADC_Init+0x334>)
 8002606:	0018      	movs	r0, r3
 8002608:	f7fd fd8e 	bl	8000128 <__udivsi3>
 800260c:	0003      	movs	r3, r0
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002614:	e002      	b.n	800261c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0018      	movs	r0, r3
 8002628:	f7ff ff4e 	bl	80024c8 <LL_ADC_IsInternalRegulatorEnabled>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d10f      	bne.n	8002650 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	2210      	movs	r2, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2201      	movs	r2, #1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff93 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 800265a:	0003      	movs	r3, r0
 800265c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	2210      	movs	r2, #16
 8002664:	4013      	ands	r3, r2
 8002666:	d000      	beq.n	800266a <HAL_ADC_Init+0xc6>
 8002668:	e122      	b.n	80028b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d000      	beq.n	8002672 <HAL_ADC_Init+0xce>
 8002670:	e11e      	b.n	80028b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a99      	ldr	r2, [pc, #612]	@ (80028dc <HAL_ADC_Init+0x338>)
 8002678:	4013      	ands	r3, r2
 800267a:	2202      	movs	r2, #2
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff56 	bl	8002538 <LL_ADC_IsEnabled>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d000      	beq.n	8002692 <HAL_ADC_Init+0xee>
 8002690:	e0ad      	b.n	80027ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7e1b      	ldrb	r3, [r3, #24]
 800269a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800269c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e5b      	ldrb	r3, [r3, #25]
 80026a2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7e9b      	ldrb	r3, [r3, #26]
 80026aa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_ADC_Init+0x118>
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	e000      	b.n	80026be <HAL_ADC_Init+0x11a>
 80026bc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026be:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026c4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da04      	bge.n	80026d8 <HAL_ADC_Init+0x134>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	e001      	b.n	80026dc <HAL_ADC_Init+0x138>
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80026dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	212c      	movs	r1, #44	@ 0x2c
 80026e2:	5c5b      	ldrb	r3, [r3, r1]
 80026e4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026e6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	5c9b      	ldrb	r3, [r3, r2]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d115      	bne.n	8002724 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e9b      	ldrb	r3, [r3, #26]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2280      	movs	r2, #128	@ 0x80
 8002704:	0252      	lsls	r2, r2, #9
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e00b      	b.n	8002724 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002710:	2220      	movs	r2, #32
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	2201      	movs	r2, #1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002730:	23e0      	movs	r3, #224	@ 0xe0
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800273a:	4313      	orrs	r3, r2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_ADC_Init+0x33c>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0f9b      	lsrs	r3, r3, #30
 800275e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002764:	4313      	orrs	r3, r2
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223c      	movs	r2, #60	@ 0x3c
 8002770:	5c9b      	ldrb	r3, [r3, r2]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d111      	bne.n	800279a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0f9b      	lsrs	r3, r3, #30
 800277c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002782:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002788:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800278e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	2201      	movs	r2, #1
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	4a50      	ldr	r2, [pc, #320]	@ (80028e4 <HAL_ADC_Init+0x340>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	23c0      	movs	r3, #192	@ 0xc0
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d018      	beq.n	80027ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	05db      	lsls	r3, r3, #23
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d012      	beq.n	80027ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	061b      	lsls	r3, r3, #24
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d00c      	beq.n	80027ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027d4:	4b44      	ldr	r3, [pc, #272]	@ (80028e8 <HAL_ADC_Init+0x344>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a44      	ldr	r2, [pc, #272]	@ (80028ec <HAL_ADC_Init+0x348>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	23f0      	movs	r3, #240	@ 0xf0
 80027e4:	039b      	lsls	r3, r3, #14
 80027e6:	401a      	ands	r2, r3
 80027e8:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_ADC_Init+0x344>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	001a      	movs	r2, r3
 80027f8:	2100      	movs	r1, #0
 80027fa:	f7ff fda0 	bl	800233e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	493a      	ldr	r1, [pc, #232]	@ (80028f0 <HAL_ADC_Init+0x34c>)
 8002808:	001a      	movs	r2, r3
 800280a:	f7ff fd98 	bl	800233e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2110      	movs	r1, #16
 8002822:	4249      	negs	r1, r1
 8002824:	430a      	orrs	r2, r1
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
 8002828:	e018      	b.n	800285c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	039b      	lsls	r3, r3, #14
 8002832:	429a      	cmp	r2, r3
 8002834:	d112      	bne.n	800285c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	3b01      	subs	r3, #1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	221c      	movs	r2, #28
 8002846:	4013      	ands	r3, r2
 8002848:	2210      	movs	r2, #16
 800284a:	4252      	negs	r2, r2
 800284c:	409a      	lsls	r2, r3
 800284e:	0011      	movs	r1, r2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2100      	movs	r1, #0
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff fd88 	bl	8002378 <LL_ADC_GetSamplingTimeCommonChannels>
 8002868:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800286e:	429a      	cmp	r2, r3
 8002870:	d10b      	bne.n	800288a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	2203      	movs	r2, #3
 800287e:	4393      	bics	r3, r2
 8002880:	2201      	movs	r2, #1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002888:	e01c      	b.n	80028c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	2212      	movs	r2, #18
 8002890:	4393      	bics	r3, r2
 8002892:	2210      	movs	r2, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028ae:	e009      	b.n	80028c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	2210      	movs	r2, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028bc:	231f      	movs	r3, #31
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	781b      	ldrb	r3, [r3, #0]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b008      	add	sp, #32
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	20000040 	.word	0x20000040
 80028d8:	00030d40 	.word	0x00030d40
 80028dc:	fffffefd 	.word	0xfffffefd
 80028e0:	ffde0201 	.word	0xffde0201
 80028e4:	1ffffc02 	.word	0x1ffffc02
 80028e8:	40012708 	.word	0x40012708
 80028ec:	ffc3ffff 	.word	0xffc3ffff
 80028f0:	07ffff04 	.word	0x07ffff04

080028f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff fe3b 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d16c      	bne.n	80029e8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2254      	movs	r2, #84	@ 0x54
 8002912:	5c9b      	ldrb	r3, [r3, r2]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_ADC_Start_DMA+0x28>
 8002918:	2302      	movs	r3, #2
 800291a:	e06c      	b.n	80029f6 <HAL_ADC_Start_DMA+0x102>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2254      	movs	r2, #84	@ 0x54
 8002920:	2101      	movs	r1, #1
 8002922:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d113      	bne.n	8002958 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff fdff 	bl	8002538 <LL_ADC_IsEnabled>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d004      	beq.n	8002948 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff fde6 	bl	8002514 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2101      	movs	r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002958:	2517      	movs	r5, #23
 800295a:	197c      	adds	r4, r7, r5
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fb66 	bl	8003030 <ADC_Enable>
 8002964:	0003      	movs	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002968:	002c      	movs	r4, r5
 800296a:	193b      	adds	r3, r7, r4
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d13e      	bne.n	80029f0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	4a22      	ldr	r2, [pc, #136]	@ (8002a00 <HAL_ADC_Start_DMA+0x10c>)
 8002978:	4013      	ands	r3, r2
 800297a:	2280      	movs	r2, #128	@ 0x80
 800297c:	0052      	lsls	r2, r2, #1
 800297e:	431a      	orrs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_ADC_Start_DMA+0x110>)
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002996:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_ADC_Start_DMA+0x114>)
 8002998:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_ADC_Start_DMA+0x118>)
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	221c      	movs	r2, #28
 80029a8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2254      	movs	r2, #84	@ 0x54
 80029ae:	2100      	movs	r1, #0
 80029b0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2110      	movs	r1, #16
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3340      	adds	r3, #64	@ 0x40
 80029cc:	0019      	movs	r1, r3
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	193c      	adds	r4, r7, r4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f001 fa66 	bl	8003ea4 <HAL_DMA_Start_IT>
 80029d8:	0003      	movs	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff fdbb 	bl	800255c <LL_ADC_REG_StartConversion>
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029e8:	2317      	movs	r3, #23
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80029f0:	2317      	movs	r3, #23
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b006      	add	sp, #24
 80029fc:	bdb0      	pop	{r4, r5, r7, pc}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	fffff0fe 	.word	0xfffff0fe
 8002a04:	0800313d 	.word	0x0800313d
 8002a08:	08003205 	.word	0x08003205
 8002a0c:	08003223 	.word	0x08003223

08002a10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d017      	beq.n	8002a64 <HAL_ADC_IRQHandler+0x54>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	2210      	movs	r2, #16
 8002a42:	4013      	ands	r3, r2
 8002a44:	d106      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 fc0e 	bl	8003278 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2204      	movs	r2, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x64>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	4013      	ands	r3, r2
 8002a72:	d107      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2208      	movs	r2, #8
 8002a78:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a7a:	d04d      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4013      	ands	r3, r2
 8002a82:	d049      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	2210      	movs	r2, #16
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	2280      	movs	r2, #128	@ 0x80
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff fc80 	bl	80023a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d02e      	beq.n	8002b08 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7e9b      	ldrb	r3, [r3, #26]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d12a      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d123      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fd5b 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d110      	bne.n	8002af0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	210c      	movs	r1, #12
 8002ada:	438a      	bics	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	4a56      	ldr	r2, [pc, #344]	@ (8002c3c <HAL_ADC_IRQHandler+0x22c>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aee:	e00b      	b.n	8002b08 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	2220      	movs	r2, #32
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	2201      	movs	r2, #1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f898 	bl	8002c40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	220c      	movs	r2, #12
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2280      	movs	r2, #128	@ 0x80
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d012      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x136>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	0252      	lsls	r2, r2, #9
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f891 	bl	8002c60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2280      	movs	r2, #128	@ 0x80
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d014      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x16a>
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	0292      	lsls	r2, r2, #10
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 fb74 	bl	8003258 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	0052      	lsls	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	d014      	beq.n	8002bae <HAL_ADC_IRQHandler+0x19e>
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	02d2      	lsls	r2, r2, #11
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fb62 	bl	8003268 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d02b      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x1fe>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e008      	b.n	8002bde <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff fc3c 	bl	800244e <LL_ADC_REG_GetDMATransfer>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d110      	bne.n	8002c06 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	2280      	movs	r2, #128	@ 0x80
 8002bea:	00d2      	lsls	r2, r2, #3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 f835 	bl	8002c70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	019b      	lsls	r3, r3, #6
 8002c14:	4013      	ands	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x224>
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d008      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 fb2f 	bl	8003288 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2280      	movs	r2, #128	@ 0x80
 8002c30:	0192      	lsls	r2, r2, #6
 8002c32:	601a      	str	r2, [r3, #0]
  }
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffffefe 	.word	0xfffffefe

08002c40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8a:	2317      	movs	r3, #23
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2254      	movs	r2, #84	@ 0x54
 8002c9a:	5c9b      	ldrb	r3, [r3, r2]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x24>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e1c0      	b.n	8003026 <HAL_ADC_ConfigChannel+0x3a6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2254      	movs	r2, #84	@ 0x54
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff fc65 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d000      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x3c>
 8002cba:	e1a3      	b.n	8003004 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d100      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x46>
 8002cc4:	e143      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	2380      	movs	r3, #128	@ 0x80
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cd6:	4ac1      	ldr	r2, [pc, #772]	@ (8002fdc <HAL_ADC_ConfigChannel+0x35c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	f7ff fb8e 	bl	8002408 <LL_ADC_REG_SetSequencerChAdd>
 8002cec:	e0c9      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	211f      	movs	r1, #31
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	4099      	lsls	r1, r3
 8002cfe:	000b      	movs	r3, r1
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	035b      	lsls	r3, r3, #13
 8002d0c:	0b5b      	lsrs	r3, r3, #13
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x9c>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	221f      	movs	r2, #31
 8002d18:	4013      	ands	r3, r2
 8002d1a:	e098      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	d000      	beq.n	8002d28 <HAL_ADC_ConfigChannel+0xa8>
 8002d26:	e091      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1cc>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d000      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0xb4>
 8002d32:	e089      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x1c8>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d000      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0xc0>
 8002d3e:	e081      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1c4>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2208      	movs	r2, #8
 8002d46:	4013      	ands	r3, r2
 8002d48:	d000      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0xcc>
 8002d4a:	e079      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1c0>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2210      	movs	r2, #16
 8002d52:	4013      	ands	r3, r2
 8002d54:	d000      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0xd8>
 8002d56:	e071      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x1bc>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d000      	beq.n	8002d64 <HAL_ADC_ConfigChannel+0xe4>
 8002d62:	e069      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x1b8>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2240      	movs	r2, #64	@ 0x40
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d000      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0xf0>
 8002d6e:	e061      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x1b4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2280      	movs	r2, #128	@ 0x80
 8002d76:	4013      	ands	r3, r2
 8002d78:	d000      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0xfc>
 8002d7a:	e059      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x1b0>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d151      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1ac>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d149      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1a8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d141      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1a4>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	d139      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1a0>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	015b      	lsls	r3, r3, #5
 8002db4:	4013      	ands	r3, r2
 8002db6:	d131      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x19c>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d129      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x198>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	01db      	lsls	r3, r3, #7
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d121      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x194>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	@ 0x80
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d119      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x190>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	4013      	ands	r3, r2
 8002de6:	d111      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x18c>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x188>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	02db      	lsls	r3, r3, #11
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d001      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x184>
 8002e00:	2312      	movs	r3, #18
 8002e02:	e024      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e04:	2300      	movs	r3, #0
 8002e06:	e022      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e08:	2311      	movs	r3, #17
 8002e0a:	e020      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	e01e      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e10:	230f      	movs	r3, #15
 8002e12:	e01c      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e14:	230e      	movs	r3, #14
 8002e16:	e01a      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	230d      	movs	r3, #13
 8002e1a:	e018      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	e016      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e20:	230b      	movs	r3, #11
 8002e22:	e014      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e24:	230a      	movs	r3, #10
 8002e26:	e012      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e28:	2309      	movs	r3, #9
 8002e2a:	e010      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	e00e      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e30:	2307      	movs	r3, #7
 8002e32:	e00c      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e34:	2306      	movs	r3, #6
 8002e36:	e00a      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e38:	2305      	movs	r3, #5
 8002e3a:	e008      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	e006      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e004      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e002      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1ce>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6852      	ldr	r2, [r2, #4]
 8002e52:	201f      	movs	r0, #31
 8002e54:	4002      	ands	r2, r0
 8002e56:	4093      	lsls	r3, r2
 8002e58:	000a      	movs	r2, r1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d808      	bhi.n	8002e82 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	f7ff faa3 	bl	80023c8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	001a      	movs	r2, r3
 8002e90:	f7ff faea 	bl	8002468 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db00      	blt.n	8002e9e <HAL_ADC_ConfigChannel+0x21e>
 8002e9c:	e0bc      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e9e:	4b50      	ldr	r3, [pc, #320]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff fa3f 	bl	8002324 <LL_ADC_GetCommonPathInternalCh>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x364>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d122      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ebc:	d11d      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2280      	movs	r2, #128	@ 0x80
 8002ec2:	0412      	lsls	r2, r2, #16
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002ec8:	0019      	movs	r1, r3
 8002eca:	0010      	movs	r0, r2
 8002ecc:	f7ff fa16 	bl	80022fc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed0:	4b45      	ldr	r3, [pc, #276]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x368>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4945      	ldr	r1, [pc, #276]	@ (8002fec <HAL_ADC_ConfigChannel+0x36c>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7fd f926 	bl	8000128 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eea:	e002      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f9      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ef8:	e08e      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3c      	ldr	r2, [pc, #240]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x370>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10e      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	045b      	lsls	r3, r3, #17
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d109      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2280      	movs	r2, #128	@ 0x80
 8002f12:	0452      	lsls	r2, r2, #17
 8002f14:	4313      	orrs	r3, r2
 8002f16:	4a32      	ldr	r2, [pc, #200]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002f18:	0019      	movs	r1, r3
 8002f1a:	0010      	movs	r0, r2
 8002f1c:	f7ff f9ee 	bl	80022fc <LL_ADC_SetCommonPathInternalCh>
 8002f20:	e07a      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a33      	ldr	r2, [pc, #204]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x374>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d000      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x2ae>
 8002f2c:	e074      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	03db      	lsls	r3, r3, #15
 8002f34:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f36:	d000      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x2ba>
 8002f38:	e06e      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2280      	movs	r2, #128	@ 0x80
 8002f3e:	03d2      	lsls	r2, r2, #15
 8002f40:	4313      	orrs	r3, r2
 8002f42:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002f44:	0019      	movs	r1, r3
 8002f46:	0010      	movs	r0, r2
 8002f48:	f7ff f9d8 	bl	80022fc <LL_ADC_SetCommonPathInternalCh>
 8002f4c:	e064      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d004      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_ADC_ConfigChannel+0x35c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d107      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	0010      	movs	r0, r2
 8002f70:	f7ff fa5b 	bl	800242a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da4d      	bge.n	8003018 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7c:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff f9d0 	bl	8002324 <LL_ADC_GetCommonPathInternalCh>
 8002f84:	0003      	movs	r3, r0
 8002f86:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x364>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x378>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	4a11      	ldr	r2, [pc, #68]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	f7ff f9ad 	bl	80022fc <LL_ADC_SetCommonPathInternalCh>
 8002fa2:	e039      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x370>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4a12      	ldr	r2, [pc, #72]	@ (8002ffc <HAL_ADC_ConfigChannel+0x37c>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	0010      	movs	r0, r2
 8002fba:	f7ff f99f 	bl	80022fc <LL_ADC_SetCommonPathInternalCh>
 8002fbe:	e02b      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x374>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d126      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8003000 <HAL_ADC_ConfigChannel+0x380>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	4a03      	ldr	r2, [pc, #12]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x360>)
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	f7ff f991 	bl	80022fc <LL_ADC_SetCommonPathInternalCh>
 8002fda:	e01d      	b.n	8003018 <HAL_ADC_ConfigChannel+0x398>
 8002fdc:	80000004 	.word	0x80000004
 8002fe0:	40012708 	.word	0x40012708
 8002fe4:	b0001000 	.word	0xb0001000
 8002fe8:	20000040 	.word	0x20000040
 8002fec:	00030d40 	.word	0x00030d40
 8002ff0:	b8004000 	.word	0xb8004000
 8002ff4:	b4002000 	.word	0xb4002000
 8002ff8:	ff7fffff 	.word	0xff7fffff
 8002ffc:	feffffff 	.word	0xfeffffff
 8003000:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	2220      	movs	r2, #32
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003010:	2317      	movs	r3, #23
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2254      	movs	r2, #84	@ 0x54
 800301c:	2100      	movs	r1, #0
 800301e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003020:	2317      	movs	r3, #23
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	781b      	ldrb	r3, [r3, #0]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b006      	add	sp, #24
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			@ (mov r8, r8)

08003030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff fa79 	bl	8002538 <LL_ADC_IsEnabled>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d000      	beq.n	800304c <ADC_Enable+0x1c>
 800304a:	e069      	b.n	8003120 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	4a36      	ldr	r2, [pc, #216]	@ (800312c <ADC_Enable+0xfc>)
 8003054:	4013      	ands	r3, r2
 8003056:	d00d      	beq.n	8003074 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	2210      	movs	r2, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	2201      	movs	r2, #1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e056      	b.n	8003122 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fa39 	bl	80024f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800307e:	4b2c      	ldr	r3, [pc, #176]	@ (8003130 <ADC_Enable+0x100>)
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff f94f 	bl	8002324 <LL_ADC_GetCommonPathInternalCh>
 8003086:	0002      	movs	r2, r0
 8003088:	2380      	movs	r3, #128	@ 0x80
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	4013      	ands	r3, r2
 800308e:	d00f      	beq.n	80030b0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003090:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <ADC_Enable+0x104>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4928      	ldr	r1, [pc, #160]	@ (8003138 <ADC_Enable+0x108>)
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd f846 	bl	8000128 <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80030a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030a2:	e002      	b.n	80030aa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f9      	bne.n	80030a4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7e5b      	ldrb	r3, [r3, #25]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d033      	beq.n	8003120 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030b8:	f7ff f8f2 	bl	80022a0 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c0:	e027      	b.n	8003112 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7ff fa36 	bl	8002538 <LL_ADC_IsEnabled>
 80030cc:	1e03      	subs	r3, r0, #0
 80030ce:	d104      	bne.n	80030da <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff fa0b 	bl	80024f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030da:	f7ff f8e1 	bl	80022a0 <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d914      	bls.n	8003112 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d00d      	beq.n	8003112 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	2210      	movs	r2, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	2201      	movs	r2, #1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	2b01      	cmp	r3, #1
 800311e:	d1d0      	bne.n	80030c2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	80000017 	.word	0x80000017
 8003130:	40012708 	.word	0x40012708
 8003134:	20000040 	.word	0x20000040
 8003138:	00030d40 	.word	0x00030d40

0800313c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	2250      	movs	r2, #80	@ 0x50
 8003150:	4013      	ands	r3, r2
 8003152:	d141      	bne.n	80031d8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	2280      	movs	r2, #128	@ 0x80
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	f7ff f91d 	bl	80023a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d02e      	beq.n	80031ce <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	7e9b      	ldrb	r3, [r3, #26]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d12a      	bne.n	80031ce <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2208      	movs	r2, #8
 8003180:	4013      	ands	r3, r2
 8003182:	2b08      	cmp	r3, #8
 8003184:	d123      	bne.n	80031ce <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff f9f8 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d110      	bne.n	80031b6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	210c      	movs	r1, #12
 80031a0:	438a      	bics	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <ADC_DMAConvCplt+0xc4>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	2201      	movs	r2, #1
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80031b4:	e00b      	b.n	80031ce <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	2220      	movs	r2, #32
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	2201      	movs	r2, #1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff fd35 	bl	8002c40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d6:	e00f      	b.n	80031f8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	2210      	movs	r2, #16
 80031de:	4013      	ands	r3, r2
 80031e0:	d004      	beq.n	80031ec <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff fd43 	bl	8002c70 <HAL_ADC_ErrorCallback>
}
 80031ea:	e005      	b.n	80031f8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	0010      	movs	r0, r2
 80031f6:	4798      	blx	r3
}
 80031f8:	46c0      	nop			@ (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b004      	add	sp, #16
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	fffffefe 	.word	0xfffffefe

08003204 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fd1b 	bl	8002c50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b004      	add	sp, #16
 8003220:	bd80      	pop	{r7, pc}

08003222 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	2240      	movs	r2, #64	@ 0x40
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	2204      	movs	r2, #4
 8003242:	431a      	orrs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff fd10 	bl	8002c70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80032a0:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	58d2      	ldr	r2, [r2, r3]
 80032a6:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	508b      	str	r3, [r1, r2]
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021800 	.word	0x40021800

080032bc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80032c4:	4a06      	ldr	r2, [pc, #24]	@ (80032e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	58d3      	ldr	r3, [r2, r3]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	43d2      	mvns	r2, r2
 80032ce:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	2280      	movs	r2, #128	@ 0x80
 80032d4:	508b      	str	r3, [r1, r2]
}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b002      	add	sp, #8
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	40021800 	.word	0x40021800

080032e4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80032ec:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80032ee:	2384      	movs	r3, #132	@ 0x84
 80032f0:	58d2      	ldr	r2, [r2, r3]
 80032f2:	4904      	ldr	r1, [pc, #16]	@ (8003304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	2284      	movs	r2, #132	@ 0x84
 80032fa:	508b      	str	r3, [r1, r2]

}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021800 	.word	0x40021800

08003308 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003310:	4a06      	ldr	r2, [pc, #24]	@ (800332c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003312:	2384      	movs	r3, #132	@ 0x84
 8003314:	58d3      	ldr	r3, [r2, r3]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	43d2      	mvns	r2, r2
 800331a:	4904      	ldr	r1, [pc, #16]	@ (800332c <LL_EXTI_DisableEvent_0_31+0x24>)
 800331c:	4013      	ands	r3, r2
 800331e:	2284      	movs	r2, #132	@ 0x84
 8003320:	508b      	str	r3, [r1, r2]
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	40021800 	.word	0x40021800

08003330 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003338:	4b04      	ldr	r3, [pc, #16]	@ (800334c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	4b03      	ldr	r3, [pc, #12]	@ (800334c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021800 	.word	0x40021800

08003350 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	43d9      	mvns	r1, r3
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003362:	400a      	ands	r2, r1
 8003364:	601a      	str	r2, [r3, #0]

}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	40021800 	.word	0x40021800

08003374 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021800 	.word	0x40021800

08003394 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	4b03      	ldr	r3, [pc, #12]	@ (80033b4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80033a6:	400a      	ands	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	40021800 	.word	0x40021800

080033b8 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b002      	add	sp, #8
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	40021800 	.word	0x40021800

080033d4 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	40021800 	.word	0x40021800

080033f0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80033fc:	211f      	movs	r1, #31
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e13d      	b.n	800368e <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0fdb      	lsrs	r3, r3, #31
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	429a      	cmp	r2, r3
 8003422:	d104      	bne.n	800342e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003424:	231f      	movs	r3, #31
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e12f      	b.n	800368e <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2229      	movs	r2, #41	@ 0x29
 8003432:	5c9b      	ldrb	r3, [r3, r2]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2228      	movs	r2, #40	@ 0x28
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f7fe fb54 	bl	8001af8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2230      	movs	r2, #48	@ 0x30
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a85      	ldr	r2, [pc, #532]	@ (800369c <HAL_COMP_Init+0x2ac>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	2380      	movs	r3, #128	@ 0x80
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10d      	bne.n	80034be <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80034a2:	4b7f      	ldr	r3, [pc, #508]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b7e      	ldr	r3, [pc, #504]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034a8:	497e      	ldr	r1, [pc, #504]	@ (80036a4 <HAL_COMP_Init+0x2b4>)
 80034aa:	400a      	ands	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80034ae:	4b7c      	ldr	r3, [pc, #496]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4b7b      	ldr	r3, [pc, #492]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034b4:	2180      	movs	r1, #128	@ 0x80
 80034b6:	0109      	lsls	r1, r1, #4
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	e01f      	b.n	80034fe <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	23c0      	movs	r3, #192	@ 0xc0
 80034c4:	015b      	lsls	r3, r3, #5
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10d      	bne.n	80034e6 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80034ca:	4b75      	ldr	r3, [pc, #468]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b74      	ldr	r3, [pc, #464]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034d0:	2180      	movs	r1, #128	@ 0x80
 80034d2:	0109      	lsls	r1, r1, #4
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80034d8:	4b71      	ldr	r3, [pc, #452]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4b70      	ldr	r3, [pc, #448]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034de:	4971      	ldr	r1, [pc, #452]	@ (80036a4 <HAL_COMP_Init+0x2b4>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	e00b      	b.n	80034fe <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80034e6:	4b6e      	ldr	r3, [pc, #440]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b6d      	ldr	r3, [pc, #436]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034ec:	496d      	ldr	r1, [pc, #436]	@ (80036a4 <HAL_COMP_Init+0x2b4>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80034f2:	4b6b      	ldr	r3, [pc, #428]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4b6a      	ldr	r3, [pc, #424]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80034f8:	496a      	ldr	r1, [pc, #424]	@ (80036a4 <HAL_COMP_Init+0x2b4>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	22a0      	movs	r2, #160	@ 0xa0
 8003504:	01d2      	lsls	r2, r2, #7
 8003506:	4293      	cmp	r3, r2
 8003508:	d017      	beq.n	800353a <HAL_COMP_Init+0x14a>
 800350a:	22a0      	movs	r2, #160	@ 0xa0
 800350c:	01d2      	lsls	r2, r2, #7
 800350e:	4293      	cmp	r3, r2
 8003510:	d830      	bhi.n	8003574 <HAL_COMP_Init+0x184>
 8003512:	2b01      	cmp	r3, #1
 8003514:	d01f      	beq.n	8003556 <HAL_COMP_Init+0x166>
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	01d2      	lsls	r2, r2, #7
 800351a:	4293      	cmp	r3, r2
 800351c:	d12a      	bne.n	8003574 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800351e:	4b60      	ldr	r3, [pc, #384]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b5f      	ldr	r3, [pc, #380]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003524:	2180      	movs	r1, #128	@ 0x80
 8003526:	01c9      	lsls	r1, r1, #7
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800352c:	4b5c      	ldr	r3, [pc, #368]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4b5b      	ldr	r3, [pc, #364]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003532:	495d      	ldr	r1, [pc, #372]	@ (80036a8 <HAL_COMP_Init+0x2b8>)
 8003534:	400a      	ands	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
        break;
 8003538:	e029      	b.n	800358e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800353a:	4b59      	ldr	r3, [pc, #356]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b58      	ldr	r3, [pc, #352]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003540:	4959      	ldr	r1, [pc, #356]	@ (80036a8 <HAL_COMP_Init+0x2b8>)
 8003542:	400a      	ands	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003546:	4b56      	ldr	r3, [pc, #344]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4b55      	ldr	r3, [pc, #340]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 800354c:	2180      	movs	r1, #128	@ 0x80
 800354e:	01c9      	lsls	r1, r1, #7
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
        break;
 8003554:	e01b      	b.n	800358e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003556:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b51      	ldr	r3, [pc, #324]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	01c9      	lsls	r1, r1, #7
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003564:	4b4e      	ldr	r3, [pc, #312]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b4d      	ldr	r3, [pc, #308]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 800356a:	2180      	movs	r1, #128	@ 0x80
 800356c:	01c9      	lsls	r1, r1, #7
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
        break;
 8003572:	e00c      	b.n	800358e <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003574:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b49      	ldr	r3, [pc, #292]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 800357a:	494b      	ldr	r1, [pc, #300]	@ (80036a8 <HAL_COMP_Init+0x2b8>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003580:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4b46      	ldr	r3, [pc, #280]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 8003586:	4948      	ldr	r1, [pc, #288]	@ (80036a8 <HAL_COMP_Init+0x2b8>)
 8003588:	400a      	ands	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
        break;
 800358c:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2230      	movs	r2, #48	@ 0x30
 8003596:	4013      	ands	r3, r2
 8003598:	d016      	beq.n	80035c8 <HAL_COMP_Init+0x1d8>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035a0:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <HAL_COMP_Init+0x2bc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4942      	ldr	r1, [pc, #264]	@ (80036b0 <HAL_COMP_Init+0x2c0>)
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fc fdbe 	bl	8000128 <__udivsi3>
 80035ac:	0003      	movs	r3, r0
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	0013      	movs	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80035ba:	e002      	b.n	80035c2 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3b01      	subs	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f9      	bne.n	80035bc <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a34      	ldr	r2, [pc, #208]	@ (80036a0 <HAL_COMP_Init+0x2b0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d102      	bne.n	80035d8 <HAL_COMP_Init+0x1e8>
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	e001      	b.n	80035dc <HAL_COMP_Init+0x1ec>
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	02db      	lsls	r3, r3, #11
 80035dc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2203      	movs	r2, #3
 80035e4:	4013      	ands	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	2210      	movs	r2, #16
 80035ee:	4013      	ands	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fe9b 	bl	8003330 <LL_EXTI_EnableRisingTrig_0_31>
 80035fa:	e003      	b.n	8003604 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	0018      	movs	r0, r3
 8003600:	f7ff fea6 	bl	8003350 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	2220      	movs	r2, #32
 800360a:	4013      	ands	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	0018      	movs	r0, r3
 8003612:	f7ff feaf 	bl	8003374 <LL_EXTI_EnableFallingTrig_0_31>
 8003616:	e003      	b.n	8003620 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	0018      	movs	r0, r3
 800361c:	f7ff feba 	bl	8003394 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fed6 	bl	80033d4 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fec4 	bl	80033b8 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	2202      	movs	r2, #2
 8003636:	4013      	ands	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff fe51 	bl	80032e4 <LL_EXTI_EnableEvent_0_31>
 8003642:	e003      	b.n	800364c <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	0018      	movs	r0, r3
 8003648:	f7ff fe5e 	bl	8003308 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff fe1d 	bl	8003298 <LL_EXTI_EnableIT_0_31>
 800365e:	e00c      	b.n	800367a <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff fe2a 	bl	80032bc <LL_EXTI_DisableIT_0_31>
 8003668:	e007      	b.n	800367a <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff fe4b 	bl	8003308 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	0018      	movs	r0, r3
 8003676:	f7ff fe21 	bl	80032bc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2229      	movs	r2, #41	@ 0x29
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2229      	movs	r2, #41	@ 0x29
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800368e:	231f      	movs	r3, #31
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	781b      	ldrb	r3, [r3, #0]
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b008      	add	sp, #32
 800369a:	bd80      	pop	{r7, pc}
 800369c:	fe00740f 	.word	0xfe00740f
 80036a0:	40010200 	.word	0x40010200
 80036a4:	fffff7ff 	.word	0xfffff7ff
 80036a8:	ffffbfff 	.word	0xffffbfff
 80036ac:	20000040 	.word	0x20000040
 80036b0:	00030d40 	.word	0x00030d40

080036b4 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	210f      	movs	r1, #15
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e035      	b.n	8003742 <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0fdb      	lsrs	r3, r3, #31
 80036de:	07da      	lsls	r2, r3, #31
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d104      	bne.n	80036f2 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80036e8:	230f      	movs	r3, #15
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e027      	b.n	8003742 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2229      	movs	r2, #41	@ 0x29
 80036f6:	5c9b      	ldrb	r3, [r3, r2]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d11d      	bne.n	800373a <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2229      	movs	r2, #41	@ 0x29
 8003712:	2102      	movs	r1, #2
 8003714:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <HAL_COMP_Start+0x9c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	490e      	ldr	r1, [pc, #56]	@ (8003754 <HAL_COMP_Start+0xa0>)
 800371c:	0018      	movs	r0, r3
 800371e:	f7fc fd03 	bl	8000128 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	3301      	adds	r3, #1
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800372a:	e002      	b.n	8003732 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	3b01      	subs	r3, #1
 8003730:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f9      	bne.n	800372c <HAL_COMP_Start+0x78>
 8003738:	e003      	b.n	8003742 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800373a:	230f      	movs	r3, #15
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003742:	230f      	movs	r3, #15
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	781b      	ldrb	r3, [r3, #0]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b004      	add	sp, #16
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000040 	.word	0x20000040
 8003754:	00030d40 	.word	0x00030d40

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	0002      	movs	r2, r0
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b7f      	cmp	r3, #127	@ 0x7f
 800376a:	d809      	bhi.n	8003780 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	001a      	movs	r2, r3
 8003772:	231f      	movs	r3, #31
 8003774:	401a      	ands	r2, r3
 8003776:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <__NVIC_EnableIRQ+0x30>)
 8003778:	2101      	movs	r1, #1
 800377a:	4091      	lsls	r1, r2
 800377c:	000a      	movs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003780:	46c0      	nop			@ (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	0002      	movs	r2, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b7f      	cmp	r3, #127	@ 0x7f
 80037a0:	d828      	bhi.n	80037f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003860 <__NVIC_SetPriority+0xd4>)
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	33c0      	adds	r3, #192	@ 0xc0
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	589b      	ldr	r3, [r3, r2]
 80037b2:	1dfa      	adds	r2, r7, #7
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	0011      	movs	r1, r2
 80037b8:	2203      	movs	r2, #3
 80037ba:	400a      	ands	r2, r1
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	21ff      	movs	r1, #255	@ 0xff
 80037c0:	4091      	lsls	r1, r2
 80037c2:	000a      	movs	r2, r1
 80037c4:	43d2      	mvns	r2, r2
 80037c6:	401a      	ands	r2, r3
 80037c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	22ff      	movs	r2, #255	@ 0xff
 80037d0:	401a      	ands	r2, r3
 80037d2:	1dfb      	adds	r3, r7, #7
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	0018      	movs	r0, r3
 80037d8:	2303      	movs	r3, #3
 80037da:	4003      	ands	r3, r0
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e0:	481f      	ldr	r0, [pc, #124]	@ (8003860 <__NVIC_SetPriority+0xd4>)
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	430a      	orrs	r2, r1
 80037ec:	33c0      	adds	r3, #192	@ 0xc0
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037f2:	e031      	b.n	8003858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <__NVIC_SetPriority+0xd8>)
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	0019      	movs	r1, r3
 80037fc:	230f      	movs	r3, #15
 80037fe:	400b      	ands	r3, r1
 8003800:	3b08      	subs	r3, #8
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3306      	adds	r3, #6
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	18d3      	adds	r3, r2, r3
 800380a:	3304      	adds	r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1dfa      	adds	r2, r7, #7
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	0011      	movs	r1, r2
 8003814:	2203      	movs	r2, #3
 8003816:	400a      	ands	r2, r1
 8003818:	00d2      	lsls	r2, r2, #3
 800381a:	21ff      	movs	r1, #255	@ 0xff
 800381c:	4091      	lsls	r1, r2
 800381e:	000a      	movs	r2, r1
 8003820:	43d2      	mvns	r2, r2
 8003822:	401a      	ands	r2, r3
 8003824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	019b      	lsls	r3, r3, #6
 800382a:	22ff      	movs	r2, #255	@ 0xff
 800382c:	401a      	ands	r2, r3
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	0018      	movs	r0, r3
 8003834:	2303      	movs	r3, #3
 8003836:	4003      	ands	r3, r0
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800383c:	4809      	ldr	r0, [pc, #36]	@ (8003864 <__NVIC_SetPriority+0xd8>)
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	001c      	movs	r4, r3
 8003844:	230f      	movs	r3, #15
 8003846:	4023      	ands	r3, r4
 8003848:	3b08      	subs	r3, #8
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	430a      	orrs	r2, r1
 800384e:	3306      	adds	r3, #6
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	18c3      	adds	r3, r0, r3
 8003854:	3304      	adds	r3, #4
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b003      	add	sp, #12
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1e5a      	subs	r2, r3, #1
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	045b      	lsls	r3, r3, #17
 8003878:	429a      	cmp	r2, r3
 800387a:	d301      	bcc.n	8003880 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387c:	2301      	movs	r3, #1
 800387e:	e010      	b.n	80038a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003880:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <SysTick_Config+0x44>)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	3a01      	subs	r2, #1
 8003886:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003888:	2301      	movs	r3, #1
 800388a:	425b      	negs	r3, r3
 800388c:	2103      	movs	r1, #3
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff ff7c 	bl	800378c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <SysTick_Config+0x44>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <SysTick_Config+0x44>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b002      	add	sp, #8
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	210f      	movs	r1, #15
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	1c02      	adds	r2, r0, #0
 80038c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b25b      	sxtb	r3, r3
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff ff5d 	bl	800378c <__NVIC_SetPriority>
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	0002      	movs	r2, r0
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7ff ff33 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f7ff ffaf 	bl	8003868 <SysTick_Config>
 800390a:	0003      	movs	r3, r0
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e015      	b.n	8003952 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	791b      	ldrb	r3, [r3, #4]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7fe f913 	bl	8001b64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e047      	b.n	80039fe <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	795b      	ldrb	r3, [r3, #5]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_DAC_Start+0x20>
 8003976:	2302      	movs	r3, #2
 8003978:	e041      	b.n	80039fe <HAL_DAC_Start+0xa4>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	4013      	ands	r3, r2
 8003992:	2201      	movs	r2, #1
 8003994:	409a      	lsls	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	223e      	movs	r2, #62	@ 0x3e
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d11e      	bne.n	80039f0 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	e015      	b.n	80039f0 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	23f8      	movs	r3, #248	@ 0xf8
 80039cc:	039b      	lsls	r3, r3, #14
 80039ce:	401a      	ands	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2110      	movs	r1, #16
 80039d4:	400b      	ands	r3, r1
 80039d6:	2102      	movs	r1, #2
 80039d8:	4099      	lsls	r1, r3
 80039da:	000b      	movs	r3, r1
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2102      	movs	r1, #2
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	4013      	ands	r3, r2
 8003a28:	d01e      	beq.n	8003a68 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	019b      	lsls	r3, r3, #6
 8003a30:	4013      	ands	r3, r2
 8003a32:	d019      	beq.n	8003a68 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2280      	movs	r2, #128	@ 0x80
 8003a4c:	0192      	lsls	r2, r2, #6
 8003a4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4917      	ldr	r1, [pc, #92]	@ (8003ab8 <HAL_DAC_IRQHandler+0xb0>)
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 f853 	bl	8003b0e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	059b      	lsls	r3, r3, #22
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d01e      	beq.n	8003ab0 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	2380      	movs	r3, #128	@ 0x80
 8003a76:	059b      	lsls	r3, r3, #22
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d019      	beq.n	8003ab0 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2202      	movs	r2, #2
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	0592      	lsls	r2, r2, #22
 8003a96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4906      	ldr	r1, [pc, #24]	@ (8003abc <HAL_DAC_IRQHandler+0xb4>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 f968 	bl	8003d80 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003ab0:	46c0      	nop			@ (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	ffffefff 	.word	0xffffefff
 8003abc:	efffffff 	.word	0xefffffff

08003ac0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e014      	b.n	8003b06 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	18d3      	adds	r3, r2, r3
 8003aee:	3308      	adds	r3, #8
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e004      	b.n	8003afe <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	3314      	adds	r3, #20
 8003afc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b006      	add	sp, #24
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	231f      	movs	r3, #31
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_DAC_ConfigChannel+0x20>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e115      	b.n	8003d70 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	795b      	ldrb	r3, [r3, #5]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_DAC_ConfigChannel+0x30>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e10f      	b.n	8003d70 <HAL_DAC_ConfigChannel+0x250>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d000      	beq.n	8003b66 <HAL_DAC_ConfigChannel+0x46>
 8003b64:	e07a      	b.n	8003c5c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b66:	f7fe fb9b 	bl	80022a0 <HAL_GetTick>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d13d      	bne.n	8003bf0 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b74:	e018      	b.n	8003ba8 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b76:	f7fe fb93 	bl	80022a0 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d911      	bls.n	8003ba8 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d00a      	beq.n	8003ba8 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2208      	movs	r2, #8
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0e3      	b.n	8003d70 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d1df      	bne.n	8003b76 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	6992      	ldr	r2, [r2, #24]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bc0:	e020      	b.n	8003c04 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bc2:	f7fe fb6d 	bl	80022a0 <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d90f      	bls.n	8003bf0 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da0a      	bge.n	8003bf0 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2208      	movs	r2, #8
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2203      	movs	r2, #3
 8003bea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0bf      	b.n	8003d70 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	dbe3      	blt.n	8003bc2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	6992      	ldr	r2, [r2, #24]
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	400a      	ands	r2, r1
 8003c10:	4959      	ldr	r1, [pc, #356]	@ (8003d78 <HAL_DAC_ConfigChannel+0x258>)
 8003c12:	4091      	lsls	r1, r2
 8003c14:	000a      	movs	r2, r1
 8003c16:	43d2      	mvns	r2, r2
 8003c18:	401a      	ands	r2, r3
 8003c1a:	0011      	movs	r1, r2
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2010      	movs	r0, #16
 8003c24:	4003      	ands	r3, r0
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	2110      	movs	r1, #16
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	21ff      	movs	r1, #255	@ 0xff
 8003c3e:	4091      	lsls	r1, r2
 8003c40:	000a      	movs	r2, r1
 8003c42:	43d2      	mvns	r2, r2
 8003c44:	401a      	ands	r2, r3
 8003c46:	0011      	movs	r1, r2
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2010      	movs	r0, #16
 8003c50:	4003      	ands	r3, r0
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d11d      	bne.n	8003ca0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2210      	movs	r2, #16
 8003c70:	4013      	ands	r3, r2
 8003c72:	221f      	movs	r2, #31
 8003c74:	409a      	lsls	r2, r3
 8003c76:	0013      	movs	r3, r2
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2210      	movs	r2, #16
 8003cac:	4013      	ands	r3, r2
 8003cae:	2207      	movs	r2, #7
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2110      	movs	r1, #16
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	2180      	movs	r1, #128	@ 0x80
 8003cf6:	01c9      	lsls	r1, r1, #7
 8003cf8:	4099      	lsls	r1, r3
 8003cfa:	000b      	movs	r3, r1
 8003cfc:	43d9      	mvns	r1, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	400a      	ands	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2210      	movs	r2, #16
 8003d12:	4013      	ands	r3, r2
 8003d14:	4a19      	ldr	r2, [pc, #100]	@ (8003d7c <HAL_DAC_ConfigChannel+0x25c>)
 8003d16:	409a      	lsls	r2, r3
 8003d18:	0013      	movs	r3, r2
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	409a      	lsls	r2, r3
 8003d32:	0013      	movs	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2110      	movs	r1, #16
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	21c0      	movs	r1, #192	@ 0xc0
 8003d50:	4099      	lsls	r1, r3
 8003d52:	000b      	movs	r3, r1
 8003d54:	43d9      	mvns	r1, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003d6a:	231f      	movs	r3, #31
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	781b      	ldrb	r3, [r3, #0]
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b008      	add	sp, #32
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	000003ff 	.word	0x000003ff
 8003d7c:	00000ffe 	.word	0x00000ffe

08003d80 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e077      	b.n	8003e92 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3d      	ldr	r2, [pc, #244]	@ (8003e9c <HAL_DMA_Init+0x10c>)
 8003da8:	4694      	mov	ip, r2
 8003daa:	4463      	add	r3, ip
 8003dac:	2114      	movs	r1, #20
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fc f9ba 	bl	8000128 <__udivsi3>
 8003db4:	0003      	movs	r3, r0
 8003db6:	009a      	lsls	r2, r3, #2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2225      	movs	r2, #37	@ 0x25
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4934      	ldr	r1, [pc, #208]	@ (8003ea0 <HAL_DMA_Init+0x110>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fa8d 	bl	800432c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	01db      	lsls	r3, r3, #7
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d102      	bne.n	8003e24 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2c:	213f      	movs	r1, #63	@ 0x3f
 8003e2e:	400a      	ands	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d011      	beq.n	8003e68 <HAL_DMA_Init+0xd8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d80d      	bhi.n	8003e68 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 fa98 	bl	8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	e008      	b.n	8003e7a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2225      	movs	r2, #37	@ 0x25
 8003e84:	2101      	movs	r1, #1
 8003e86:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	@ 0x24
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			@ (mov r8, r8)
 8003e9c:	bffdfff8 	.word	0xbffdfff8
 8003ea0:	ffff800f 	.word	0xffff800f

08003ea4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2317      	movs	r3, #23
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2224      	movs	r2, #36	@ 0x24
 8003ebe:	5c9b      	ldrb	r3, [r3, r2]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_DMA_Start_IT+0x24>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e06f      	b.n	8003fa8 <HAL_DMA_Start_IT+0x104>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	2101      	movs	r1, #1
 8003ece:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2225      	movs	r2, #37	@ 0x25
 8003ed4:	5c9b      	ldrb	r3, [r3, r2]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d157      	bne.n	8003f8c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2225      	movs	r2, #37	@ 0x25
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f9d3 	bl	80042ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	210e      	movs	r1, #14
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e00f      	b.n	8003f40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	210a      	movs	r1, #10
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	2380      	movs	r3, #128	@ 0x80
 8003f48:	025b      	lsls	r3, r3, #9
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d008      	beq.n	8003f60 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	2180      	movs	r1, #128	@ 0x80
 8003f5a:	0049      	lsls	r1, r1, #1
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	0049      	lsls	r1, r1, #1
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e00a      	b.n	8003fa2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2280      	movs	r2, #128	@ 0x80
 8003f90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2224      	movs	r2, #36	@ 0x24
 8003f96:	2100      	movs	r1, #0
 8003f98:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003f9a:	2317      	movs	r3, #23
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003fa2:	2317      	movs	r3, #23
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e050      	b.n	8004064 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2225      	movs	r2, #37	@ 0x25
 8003fc6:	5c9b      	ldrb	r3, [r3, r2]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d008      	beq.n	8003fe0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	@ 0x24
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e041      	b.n	8004064 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	210e      	movs	r1, #14
 8003fec:	438a      	bics	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	491c      	ldr	r1, [pc, #112]	@ (800406c <HAL_DMA_Abort+0xbc>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	438a      	bics	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004010:	4b17      	ldr	r3, [pc, #92]	@ (8004070 <HAL_DMA_Abort+0xc0>)
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	221c      	movs	r2, #28
 800401a:	4013      	ands	r3, r2
 800401c:	2201      	movs	r2, #1
 800401e:	409a      	lsls	r2, r3
 8004020:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <HAL_DMA_Abort+0xc0>)
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800402e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	490a      	ldr	r1, [pc, #40]	@ (800406c <HAL_DMA_Abort+0xbc>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004050:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2225      	movs	r2, #37	@ 0x25
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	@ 0x24
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}
 800406c:	fffffeff 	.word	0xfffffeff
 8004070:	40020000 	.word	0x40020000

08004074 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	210f      	movs	r1, #15
 800407e:	187b      	adds	r3, r7, r1
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2225      	movs	r2, #37	@ 0x25
 8004088:	5c9b      	ldrb	r3, [r3, r2]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d006      	beq.n	800409e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2204      	movs	r2, #4
 8004094:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004096:	187b      	adds	r3, r7, r1
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e049      	b.n	8004132 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	210e      	movs	r1, #14
 80040aa:	438a      	bics	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	438a      	bics	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	491d      	ldr	r1, [pc, #116]	@ (8004140 <HAL_DMA_Abort_IT+0xcc>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_DMA_Abort_IT+0xd0>)
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	221c      	movs	r2, #28
 80040d8:	4013      	ands	r3, r2
 80040da:	2201      	movs	r2, #1
 80040dc:	409a      	lsls	r2, r3
 80040de:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_DMA_Abort_IT+0xd0>)
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004100:	490f      	ldr	r1, [pc, #60]	@ (8004140 <HAL_DMA_Abort_IT+0xcc>)
 8004102:	400a      	ands	r2, r1
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800410e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2225      	movs	r2, #37	@ 0x25
 8004114:	2101      	movs	r1, #1
 8004116:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	@ 0x24
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	0010      	movs	r0, r2
 8004130:	4798      	blx	r3
    }
  }
  return status;
 8004132:	230f      	movs	r3, #15
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	781b      	ldrb	r3, [r3, #0]
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}
 8004140:	fffffeff 	.word	0xfffffeff
 8004144:	40020000 	.word	0x40020000

08004148 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004150:	4b55      	ldr	r3, [pc, #340]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	221c      	movs	r2, #28
 8004164:	4013      	ands	r3, r2
 8004166:	2204      	movs	r2, #4
 8004168:	409a      	lsls	r2, r3
 800416a:	0013      	movs	r3, r2
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4013      	ands	r3, r2
 8004170:	d027      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x7a>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2204      	movs	r2, #4
 8004176:	4013      	ands	r3, r2
 8004178:	d023      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2220      	movs	r2, #32
 8004182:	4013      	ands	r3, r2
 8004184:	d107      	bne.n	8004196 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2104      	movs	r1, #4
 8004192:	438a      	bics	r2, r1
 8004194:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004196:	4b44      	ldr	r3, [pc, #272]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	221c      	movs	r2, #28
 80041a0:	4013      	ands	r3, r2
 80041a2:	2204      	movs	r2, #4
 80041a4:	409a      	lsls	r2, r3
 80041a6:	4b40      	ldr	r3, [pc, #256]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d100      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x6e>
 80041b4:	e073      	b.n	800429e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	0010      	movs	r0, r2
 80041be:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80041c0:	e06d      	b.n	800429e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	221c      	movs	r2, #28
 80041c8:	4013      	ands	r3, r2
 80041ca:	2202      	movs	r2, #2
 80041cc:	409a      	lsls	r2, r3
 80041ce:	0013      	movs	r3, r2
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4013      	ands	r3, r2
 80041d4:	d02e      	beq.n	8004234 <HAL_DMA_IRQHandler+0xec>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2202      	movs	r2, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	d02a      	beq.n	8004234 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2220      	movs	r2, #32
 80041e6:	4013      	ands	r3, r2
 80041e8:	d10b      	bne.n	8004202 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	210a      	movs	r1, #10
 80041f6:	438a      	bics	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2225      	movs	r2, #37	@ 0x25
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004202:	4b29      	ldr	r3, [pc, #164]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	221c      	movs	r2, #28
 800420c:	4013      	ands	r3, r2
 800420e:	2202      	movs	r2, #2
 8004210:	409a      	lsls	r2, r3
 8004212:	4b25      	ldr	r3, [pc, #148]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	@ 0x24
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03a      	beq.n	800429e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	0010      	movs	r0, r2
 8004230:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004232:	e034      	b.n	800429e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	221c      	movs	r2, #28
 800423a:	4013      	ands	r3, r2
 800423c:	2208      	movs	r2, #8
 800423e:	409a      	lsls	r2, r3
 8004240:	0013      	movs	r3, r2
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4013      	ands	r3, r2
 8004246:	d02b      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x158>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2208      	movs	r2, #8
 800424c:	4013      	ands	r3, r2
 800424e:	d027      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	210e      	movs	r1, #14
 800425c:	438a      	bics	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	221c      	movs	r2, #28
 800426a:	4013      	ands	r3, r2
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <HAL_DMA_IRQHandler+0x160>)
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2225      	movs	r2, #37	@ 0x25
 8004280:	2101      	movs	r1, #1
 8004282:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	@ 0x24
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	0010      	movs	r0, r2
 800429c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46c0      	nop			@ (mov r8, r8)
}
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40020000 	.word	0x40020000

080042ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042d4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <DMA_SetConfig+0x7c>)
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	221c      	movs	r2, #28
 80042e0:	4013      	ands	r3, r2
 80042e2:	2201      	movs	r2, #1
 80042e4:	409a      	lsls	r2, r3
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <DMA_SetConfig+0x7c>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d108      	bne.n	800430e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800430c:	e007      	b.n	800431e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]
}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b004      	add	sp, #16
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	40020000 	.word	0x40020000

0800432c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	4a10      	ldr	r2, [pc, #64]	@ (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800433c:	4694      	mov	ip, r2
 800433e:	4463      	add	r3, ip
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	001a      	movs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	001a      	movs	r2, r3
 800434e:	23ff      	movs	r3, #255	@ 0xff
 8004350:	4013      	ands	r3, r2
 8004352:	3b08      	subs	r3, #8
 8004354:	2114      	movs	r1, #20
 8004356:	0018      	movs	r0, r3
 8004358:	f7fb fee6 	bl	8000128 <__udivsi3>
 800435c:	0003      	movs	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a07      	ldr	r2, [pc, #28]	@ (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004364:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	221f      	movs	r2, #31
 800436a:	4013      	ands	r3, r2
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b004      	add	sp, #16
 800437a:	bd80      	pop	{r7, pc}
 800437c:	10008200 	.word	0x10008200
 8004380:	40020880 	.word	0x40020880

08004384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	223f      	movs	r2, #63	@ 0x3f
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800439a:	4694      	mov	ip, r2
 800439c:	4463      	add	r3, ip
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	001a      	movs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	2203      	movs	r2, #3
 80043b2:	4013      	ands	r3, r2
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80043bc:	46c0      	nop			@ (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	1000823f 	.word	0x1000823f
 80043c8:	40020940 	.word	0x40020940

080043cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043da:	e147      	b.n	800466c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4091      	lsls	r1, r2
 80043e6:	000a      	movs	r2, r1
 80043e8:	4013      	ands	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d100      	bne.n	80043f4 <HAL_GPIO_Init+0x28>
 80043f2:	e138      	b.n	8004666 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d005      	beq.n	800440c <HAL_GPIO_Init+0x40>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2203      	movs	r2, #3
 8004406:	4013      	ands	r3, r2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d130      	bne.n	800446e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	409a      	lsls	r2, r3
 800441a:	0013      	movs	r3, r2
 800441c:	43da      	mvns	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	409a      	lsls	r2, r3
 800442e:	0013      	movs	r3, r2
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004442:	2201      	movs	r2, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	409a      	lsls	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	43da      	mvns	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	2201      	movs	r2, #1
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
 8004460:	0013      	movs	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2203      	movs	r2, #3
 8004474:	4013      	ands	r3, r2
 8004476:	2b03      	cmp	r3, #3
 8004478:	d017      	beq.n	80044aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	409a      	lsls	r2, r3
 8004488:	0013      	movs	r3, r2
 800448a:	43da      	mvns	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	0013      	movs	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2203      	movs	r2, #3
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d123      	bne.n	80044fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	0092      	lsls	r2, r2, #2
 80044c0:	58d3      	ldr	r3, [r2, r3]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2207      	movs	r2, #7
 80044c8:	4013      	ands	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	409a      	lsls	r2, r3
 80044d0:	0013      	movs	r3, r2
 80044d2:	43da      	mvns	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2107      	movs	r1, #7
 80044e2:	400b      	ands	r3, r1
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	409a      	lsls	r2, r3
 80044e8:	0013      	movs	r3, r2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	6939      	ldr	r1, [r7, #16]
 80044fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2203      	movs	r2, #3
 800450a:	409a      	lsls	r2, r3
 800450c:	0013      	movs	r3, r2
 800450e:	43da      	mvns	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2203      	movs	r2, #3
 800451c:	401a      	ands	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	0013      	movs	r3, r2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	23c0      	movs	r3, #192	@ 0xc0
 8004538:	029b      	lsls	r3, r3, #10
 800453a:	4013      	ands	r3, r2
 800453c:	d100      	bne.n	8004540 <HAL_GPIO_Init+0x174>
 800453e:	e092      	b.n	8004666 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004540:	4a50      	ldr	r2, [pc, #320]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3318      	adds	r3, #24
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	589b      	ldr	r3, [r3, r2]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2203      	movs	r2, #3
 8004552:	4013      	ands	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	220f      	movs	r2, #15
 8004558:	409a      	lsls	r2, r3
 800455a:	0013      	movs	r3, r2
 800455c:	43da      	mvns	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	23a0      	movs	r3, #160	@ 0xa0
 8004568:	05db      	lsls	r3, r3, #23
 800456a:	429a      	cmp	r2, r3
 800456c:	d013      	beq.n	8004596 <HAL_GPIO_Init+0x1ca>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a45      	ldr	r2, [pc, #276]	@ (8004688 <HAL_GPIO_Init+0x2bc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00d      	beq.n	8004592 <HAL_GPIO_Init+0x1c6>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a44      	ldr	r2, [pc, #272]	@ (800468c <HAL_GPIO_Init+0x2c0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <HAL_GPIO_Init+0x1c2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a43      	ldr	r2, [pc, #268]	@ (8004690 <HAL_GPIO_Init+0x2c4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_GPIO_Init+0x1be>
 8004586:	2303      	movs	r3, #3
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x1cc>
 800458a:	2305      	movs	r3, #5
 800458c:	e004      	b.n	8004598 <HAL_GPIO_Init+0x1cc>
 800458e:	2302      	movs	r3, #2
 8004590:	e002      	b.n	8004598 <HAL_GPIO_Init+0x1cc>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x1cc>
 8004596:	2300      	movs	r3, #0
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	2103      	movs	r1, #3
 800459c:	400a      	ands	r2, r1
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	4093      	lsls	r3, r2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80045a8:	4936      	ldr	r1, [pc, #216]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3318      	adds	r3, #24
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045b6:	4b33      	ldr	r3, [pc, #204]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	43da      	mvns	r2, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	035b      	lsls	r3, r3, #13
 80045ce:	4013      	ands	r3, r2
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045da:	4b2a      	ldr	r3, [pc, #168]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045e0:	4b28      	ldr	r3, [pc, #160]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	43da      	mvns	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	039b      	lsls	r3, r3, #14
 80045f8:	4013      	ands	r3, r2
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004604:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800460a:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 800460c:	2384      	movs	r3, #132	@ 0x84
 800460e:	58d3      	ldr	r3, [r2, r3]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	43da      	mvns	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	2380      	movs	r3, #128	@ 0x80
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	4013      	ands	r3, r2
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004630:	4914      	ldr	r1, [pc, #80]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 8004632:	2284      	movs	r2, #132	@ 0x84
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004638:	4a12      	ldr	r2, [pc, #72]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	58d3      	ldr	r3, [r2, r3]
 800463e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	43da      	mvns	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	025b      	lsls	r3, r3, #9
 8004652:	4013      	ands	r3, r2
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800465e:	4909      	ldr	r1, [pc, #36]	@ (8004684 <HAL_GPIO_Init+0x2b8>)
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3301      	adds	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	40da      	lsrs	r2, r3
 8004674:	1e13      	subs	r3, r2, #0
 8004676:	d000      	beq.n	800467a <HAL_GPIO_Init+0x2ae>
 8004678:	e6b0      	b.n	80043dc <HAL_GPIO_Init+0x10>
  }
}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b006      	add	sp, #24
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021800 	.word	0x40021800
 8004688:	50000400 	.word	0x50000400
 800468c:	50000800 	.word	0x50000800
 8004690:	50000c00 	.word	0x50000c00

08004694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	000a      	movs	r2, r1
 800469e:	1cbb      	adds	r3, r7, #2
 80046a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	1cba      	adds	r2, r7, #2
 80046a8:	8812      	ldrh	r2, [r2, #0]
 80046aa:	4013      	ands	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80046ae:	230f      	movs	r3, #15
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e003      	b.n	80046c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046b8:	230f      	movs	r3, #15
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046c0:	230f      	movs	r3, #15
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	781b      	ldrb	r3, [r3, #0]
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	0008      	movs	r0, r1
 80046d8:	0011      	movs	r1, r2
 80046da:	1cbb      	adds	r3, r7, #2
 80046dc:	1c02      	adds	r2, r0, #0
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	1c7b      	adds	r3, r7, #1
 80046e2:	1c0a      	adds	r2, r1, #0
 80046e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e6:	1c7b      	adds	r3, r7, #1
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ee:	1cbb      	adds	r3, r7, #2
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046f6:	e003      	b.n	8004700 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046f8:	1cbb      	adds	r3, r7, #2
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	b002      	add	sp, #8
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	000a      	movs	r2, r1
 8004712:	1cbb      	adds	r3, r7, #2
 8004714:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800471c:	1cbb      	adds	r3, r7, #2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4013      	ands	r3, r2
 8004724:	041a      	lsls	r2, r3, #16
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	1cb9      	adds	r1, r7, #2
 800472c:	8809      	ldrh	r1, [r1, #0]
 800472e:	400b      	ands	r3, r1
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b004      	add	sp, #16
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004748:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	429a      	cmp	r2, r3
 8004762:	d11f      	bne.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004764:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	0013      	movs	r3, r2
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	189b      	adds	r3, r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4912      	ldr	r1, [pc, #72]	@ (80047bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004772:	0018      	movs	r0, r3
 8004774:	f7fb fcd8 	bl	8000128 <__udivsi3>
 8004778:	0003      	movs	r3, r0
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800477e:	e008      	b.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b01      	subs	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e001      	b.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e009      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	401a      	ands	r2, r3
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d0ed      	beq.n	8004780 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b004      	add	sp, #16
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	40007000 	.word	0x40007000
 80047b4:	fffff9ff 	.word	0xfffff9ff
 80047b8:	20000040 	.word	0x20000040
 80047bc:	000f4240 	.word	0x000f4240

080047c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80047c4:	4b03      	ldr	r3, [pc, #12]	@ (80047d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	23e0      	movs	r3, #224	@ 0xe0
 80047ca:	01db      	lsls	r3, r3, #7
 80047cc:	4013      	ands	r3, r2
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000

080047d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e2fe      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2201      	movs	r2, #1
 80047f0:	4013      	ands	r3, r2
 80047f2:	d100      	bne.n	80047f6 <HAL_RCC_OscConfig+0x1e>
 80047f4:	e07c      	b.n	80048f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f6:	4bc3      	ldr	r3, [pc, #780]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2238      	movs	r2, #56	@ 0x38
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004800:	4bc0      	ldr	r3, [pc, #768]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2203      	movs	r2, #3
 8004806:	4013      	ands	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b10      	cmp	r3, #16
 800480e:	d102      	bne.n	8004816 <HAL_RCC_OscConfig+0x3e>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d002      	beq.n	800481c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4bb9      	ldr	r3, [pc, #740]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	029b      	lsls	r3, r3, #10
 8004824:	4013      	ands	r3, r2
 8004826:	d062      	beq.n	80048ee <HAL_RCC_OscConfig+0x116>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d15e      	bne.n	80048ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e2d9      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	025b      	lsls	r3, r3, #9
 800483c:	429a      	cmp	r2, r3
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x78>
 8004840:	4bb0      	ldr	r3, [pc, #704]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4baf      	ldr	r3, [pc, #700]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004846:	2180      	movs	r1, #128	@ 0x80
 8004848:	0249      	lsls	r1, r1, #9
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e020      	b.n	8004892 <HAL_RCC_OscConfig+0xba>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	23a0      	movs	r3, #160	@ 0xa0
 8004856:	02db      	lsls	r3, r3, #11
 8004858:	429a      	cmp	r2, r3
 800485a:	d10e      	bne.n	800487a <HAL_RCC_OscConfig+0xa2>
 800485c:	4ba9      	ldr	r3, [pc, #676]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4ba8      	ldr	r3, [pc, #672]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004862:	2180      	movs	r1, #128	@ 0x80
 8004864:	02c9      	lsls	r1, r1, #11
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	4ba6      	ldr	r3, [pc, #664]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4ba5      	ldr	r3, [pc, #660]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004870:	2180      	movs	r1, #128	@ 0x80
 8004872:	0249      	lsls	r1, r1, #9
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e00b      	b.n	8004892 <HAL_RCC_OscConfig+0xba>
 800487a:	4ba2      	ldr	r3, [pc, #648]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4ba1      	ldr	r3, [pc, #644]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004880:	49a1      	ldr	r1, [pc, #644]	@ (8004b08 <HAL_RCC_OscConfig+0x330>)
 8004882:	400a      	ands	r2, r1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	4b9f      	ldr	r3, [pc, #636]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b9e      	ldr	r3, [pc, #632]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800488c:	499f      	ldr	r1, [pc, #636]	@ (8004b0c <HAL_RCC_OscConfig+0x334>)
 800488e:	400a      	ands	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fd fd01 	bl	80022a0 <HAL_GetTick>
 800489e:	0003      	movs	r3, r0
 80048a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fd fcfc 	bl	80022a0 <HAL_GetTick>
 80048a8:	0002      	movs	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e298      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b6:	4b93      	ldr	r3, [pc, #588]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	029b      	lsls	r3, r3, #10
 80048be:	4013      	ands	r3, r2
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0xcc>
 80048c2:	e015      	b.n	80048f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fcec 	bl	80022a0 <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ce:	f7fd fce7 	bl	80022a0 <HAL_GetTick>
 80048d2:	0002      	movs	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b64      	cmp	r3, #100	@ 0x64
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e283      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e0:	4b88      	ldr	r3, [pc, #544]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2380      	movs	r3, #128	@ 0x80
 80048e6:	029b      	lsls	r3, r3, #10
 80048e8:	4013      	ands	r3, r2
 80048ea:	d1f0      	bne.n	80048ce <HAL_RCC_OscConfig+0xf6>
 80048ec:	e000      	b.n	80048f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2202      	movs	r2, #2
 80048f6:	4013      	ands	r3, r2
 80048f8:	d100      	bne.n	80048fc <HAL_RCC_OscConfig+0x124>
 80048fa:	e099      	b.n	8004a30 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fc:	4b81      	ldr	r3, [pc, #516]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2238      	movs	r2, #56	@ 0x38
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004906:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2203      	movs	r2, #3
 800490c:	4013      	ands	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b10      	cmp	r3, #16
 8004914:	d102      	bne.n	800491c <HAL_RCC_OscConfig+0x144>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d002      	beq.n	8004922 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d135      	bne.n	800498e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004922:	4b78      	ldr	r3, [pc, #480]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4013      	ands	r3, r2
 800492c:	d005      	beq.n	800493a <HAL_RCC_OscConfig+0x162>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e256      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493a:	4b72      	ldr	r3, [pc, #456]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4a74      	ldr	r2, [pc, #464]	@ (8004b10 <HAL_RCC_OscConfig+0x338>)
 8004940:	4013      	ands	r3, r2
 8004942:	0019      	movs	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	021a      	lsls	r2, r3, #8
 800494a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d112      	bne.n	800497c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004956:	4b6b      	ldr	r3, [pc, #428]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b14 <HAL_RCC_OscConfig+0x33c>)
 800495c:	4013      	ands	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	4b67      	ldr	r3, [pc, #412]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800496a:	4b66      	ldr	r3, [pc, #408]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	0adb      	lsrs	r3, r3, #11
 8004970:	2207      	movs	r2, #7
 8004972:	4013      	ands	r3, r2
 8004974:	4a68      	ldr	r2, [pc, #416]	@ (8004b18 <HAL_RCC_OscConfig+0x340>)
 8004976:	40da      	lsrs	r2, r3
 8004978:	4b68      	ldr	r3, [pc, #416]	@ (8004b1c <HAL_RCC_OscConfig+0x344>)
 800497a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800497c:	4b68      	ldr	r3, [pc, #416]	@ (8004b20 <HAL_RCC_OscConfig+0x348>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0018      	movs	r0, r3
 8004982:	f7fd fc31 	bl	80021e8 <HAL_InitTick>
 8004986:	1e03      	subs	r3, r0, #0
 8004988:	d051      	beq.n	8004a2e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e22c      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d030      	beq.n	80049f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004996:	4b5b      	ldr	r3, [pc, #364]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5e      	ldr	r2, [pc, #376]	@ (8004b14 <HAL_RCC_OscConfig+0x33c>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	4b57      	ldr	r3, [pc, #348]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80049aa:	4b56      	ldr	r3, [pc, #344]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b55      	ldr	r3, [pc, #340]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049b0:	2180      	movs	r1, #128	@ 0x80
 80049b2:	0049      	lsls	r1, r1, #1
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd fc72 	bl	80022a0 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c2:	f7fd fc6d 	bl	80022a0 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e209      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4013      	ands	r3, r2
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e0:	4b48      	ldr	r3, [pc, #288]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004b10 <HAL_RCC_OscConfig+0x338>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	4b44      	ldr	r3, [pc, #272]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	e01b      	b.n	8004a30 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80049f8:	4b42      	ldr	r3, [pc, #264]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b41      	ldr	r3, [pc, #260]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 80049fe:	4949      	ldr	r1, [pc, #292]	@ (8004b24 <HAL_RCC_OscConfig+0x34c>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd fc4c 	bl	80022a0 <HAL_GetTick>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0e:	f7fd fc47 	bl	80022a0 <HAL_GetTick>
 8004a12:	0002      	movs	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e1e3      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a20:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x236>
 8004a2c:	e000      	b.n	8004a30 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a2e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2208      	movs	r2, #8
 8004a36:	4013      	ands	r3, r2
 8004a38:	d047      	beq.n	8004aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a3a:	4b32      	ldr	r3, [pc, #200]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2238      	movs	r2, #56	@ 0x38
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b18      	cmp	r3, #24
 8004a44:	d10a      	bne.n	8004a5c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a46:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d03c      	beq.n	8004aca <HAL_RCC_OscConfig+0x2f2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d138      	bne.n	8004aca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e1c5      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d019      	beq.n	8004a98 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a64:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a68:	4b26      	ldr	r3, [pc, #152]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fd fc16 	bl	80022a0 <HAL_GetTick>
 8004a74:	0003      	movs	r3, r0
 8004a76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7fd fc11 	bl	80022a0 <HAL_GetTick>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1ad      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d0f1      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2a2>
 8004a96:	e018      	b.n	8004aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a9c:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fbfc 	bl	80022a0 <HAL_GetTick>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fd fbf7 	bl	80022a0 <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e193      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ac0:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d1f1      	bne.n	8004aae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x2fe>
 8004ad4:	e0c6      	b.n	8004c64 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad6:	231f      	movs	r3, #31
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ade:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2238      	movs	r2, #56	@ 0x38
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d11e      	bne.n	8004b28 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_RCC_OscConfig+0x32c>)
 8004aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d100      	bne.n	8004af6 <HAL_RCC_OscConfig+0x31e>
 8004af4:	e0b6      	b.n	8004c64 <HAL_RCC_OscConfig+0x48c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d000      	beq.n	8004b00 <HAL_RCC_OscConfig+0x328>
 8004afe:	e0b1      	b.n	8004c64 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e171      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	fffeffff 	.word	0xfffeffff
 8004b0c:	fffbffff 	.word	0xfffbffff
 8004b10:	ffff80ff 	.word	0xffff80ff
 8004b14:	ffffc7ff 	.word	0xffffc7ff
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	20000040 	.word	0x20000040
 8004b20:	20000044 	.word	0x20000044
 8004b24:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b28:	4bb1      	ldr	r3, [pc, #708]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b2c:	2380      	movs	r3, #128	@ 0x80
 8004b2e:	055b      	lsls	r3, r3, #21
 8004b30:	4013      	ands	r3, r2
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_OscConfig+0x360>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x362>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4bac      	ldr	r3, [pc, #688]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b42:	4bab      	ldr	r3, [pc, #684]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004b44:	2180      	movs	r1, #128	@ 0x80
 8004b46:	0549      	lsls	r1, r1, #21
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b4c:	4ba8      	ldr	r3, [pc, #672]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	055b      	lsls	r3, r3, #21
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b5a:	231f      	movs	r3, #31
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b62:	4ba4      	ldr	r3, [pc, #656]	@ (8004df4 <HAL_RCC_OscConfig+0x61c>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	2380      	movs	r3, #128	@ 0x80
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d11a      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b6e:	4ba1      	ldr	r3, [pc, #644]	@ (8004df4 <HAL_RCC_OscConfig+0x61c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4ba0      	ldr	r3, [pc, #640]	@ (8004df4 <HAL_RCC_OscConfig+0x61c>)
 8004b74:	2180      	movs	r1, #128	@ 0x80
 8004b76:	0049      	lsls	r1, r1, #1
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fb90 	bl	80022a0 <HAL_GetTick>
 8004b80:	0003      	movs	r3, r0
 8004b82:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fd fb8b 	bl	80022a0 <HAL_GetTick>
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e127      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b98:	4b96      	ldr	r3, [pc, #600]	@ (8004df4 <HAL_RCC_OscConfig+0x61c>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x3e2>
 8004bac:	4b90      	ldr	r3, [pc, #576]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bb8:	e01c      	b.n	8004bf4 <HAL_RCC_OscConfig+0x41c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x404>
 8004bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bc8:	2104      	movs	r1, #4
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bce:	4b88      	ldr	r3, [pc, #544]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bd2:	4b87      	ldr	r3, [pc, #540]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x41c>
 8004bdc:	4b84      	ldr	r3, [pc, #528]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004be0:	4b83      	ldr	r3, [pc, #524]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004be2:	2101      	movs	r1, #1
 8004be4:	438a      	bics	r2, r1
 8004be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004be8:	4b81      	ldr	r3, [pc, #516]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bec:	4b80      	ldr	r3, [pc, #512]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004bee:	2104      	movs	r1, #4
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d014      	beq.n	8004c26 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fb50 	bl	80022a0 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c04:	e009      	b.n	8004c1a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd fb4b 	bl	80022a0 <HAL_GetTick>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	4a79      	ldr	r2, [pc, #484]	@ (8004df8 <HAL_RCC_OscConfig+0x620>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e0e6      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1a:	4b75      	ldr	r3, [pc, #468]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1e:	2202      	movs	r2, #2
 8004c20:	4013      	ands	r3, r2
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x42e>
 8004c24:	e013      	b.n	8004c4e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fd fb3b 	bl	80022a0 <HAL_GetTick>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c2e:	e009      	b.n	8004c44 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fd fb36 	bl	80022a0 <HAL_GetTick>
 8004c34:	0002      	movs	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8004df8 <HAL_RCC_OscConfig+0x620>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e0d1      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c44:	4b6a      	ldr	r3, [pc, #424]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	2202      	movs	r2, #2
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c4e:	231f      	movs	r3, #31
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c58:	4b65      	ldr	r3, [pc, #404]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5c:	4b64      	ldr	r3, [pc, #400]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c5e:	4967      	ldr	r1, [pc, #412]	@ (8004dfc <HAL_RCC_OscConfig+0x624>)
 8004c60:	400a      	ands	r2, r1
 8004c62:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d100      	bne.n	8004c6e <HAL_RCC_OscConfig+0x496>
 8004c6c:	e0bb      	b.n	8004de6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c6e:	4b60      	ldr	r3, [pc, #384]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2238      	movs	r2, #56	@ 0x38
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d100      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4a4>
 8004c7a:	e07b      	b.n	8004d74 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d156      	bne.n	8004d32 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c84:	4b5a      	ldr	r3, [pc, #360]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b59      	ldr	r3, [pc, #356]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c8a:	495d      	ldr	r1, [pc, #372]	@ (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fd fb06 	bl	80022a0 <HAL_GetTick>
 8004c94:	0003      	movs	r3, r0
 8004c96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9a:	f7fd fb01 	bl	80022a0 <HAL_GetTick>
 8004c9e:	0002      	movs	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e09d      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cac:	4b50      	ldr	r3, [pc, #320]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	049b      	lsls	r3, r3, #18
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a51      	ldr	r2, [pc, #324]	@ (8004e04 <HAL_RCC_OscConfig+0x62c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	4b42      	ldr	r3, [pc, #264]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cec:	4b40      	ldr	r3, [pc, #256]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	2180      	movs	r1, #128	@ 0x80
 8004cf4:	0449      	lsls	r1, r1, #17
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d00:	2180      	movs	r1, #128	@ 0x80
 8004d02:	0549      	lsls	r1, r1, #21
 8004d04:	430a      	orrs	r2, r1
 8004d06:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd faca 	bl	80022a0 <HAL_GetTick>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d12:	f7fd fac5 	bl	80022a0 <HAL_GetTick>
 8004d16:	0002      	movs	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e061      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d24:	4b32      	ldr	r3, [pc, #200]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	049b      	lsls	r3, r3, #18
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x53a>
 8004d30:	e059      	b.n	8004de6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b2f      	ldr	r3, [pc, #188]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b2e      	ldr	r3, [pc, #184]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d38:	4931      	ldr	r1, [pc, #196]	@ (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fd faaf 	bl	80022a0 <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd faaa 	bl	80022a0 <HAL_GetTick>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e046      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5a:	4b25      	ldr	r3, [pc, #148]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	049b      	lsls	r3, r3, #18
 8004d62:	4013      	ands	r3, r2
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004d66:	4b22      	ldr	r3, [pc, #136]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d6c:	4926      	ldr	r1, [pc, #152]	@ (8004e08 <HAL_RCC_OscConfig+0x630>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	e038      	b.n	8004de6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e033      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004d80:	4b1b      	ldr	r3, [pc, #108]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2203      	movs	r2, #3
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d126      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2270      	movs	r2, #112	@ 0x70
 8004d98:	401a      	ands	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d11f      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	23fe      	movs	r3, #254	@ 0xfe
 8004da6:	01db      	lsls	r3, r3, #7
 8004da8:	401a      	ands	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d116      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	23f8      	movs	r3, #248	@ 0xf8
 8004db8:	039b      	lsls	r3, r3, #14
 8004dba:	401a      	ands	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d10e      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	23e0      	movs	r3, #224	@ 0xe0
 8004dc8:	051b      	lsls	r3, r3, #20
 8004dca:	401a      	ands	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	0f5b      	lsrs	r3, r3, #29
 8004dd8:	075a      	lsls	r2, r3, #29
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b008      	add	sp, #32
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	00001388 	.word	0x00001388
 8004dfc:	efffffff 	.word	0xefffffff
 8004e00:	feffffff 	.word	0xfeffffff
 8004e04:	11c1808c 	.word	0x11c1808c
 8004e08:	eefefffc 	.word	0xeefefffc

08004e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0e9      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e20:	4b76      	ldr	r3, [pc, #472]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2207      	movs	r2, #7
 8004e26:	4013      	ands	r3, r2
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d91e      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b73      	ldr	r3, [pc, #460]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2207      	movs	r2, #7
 8004e34:	4393      	bics	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e40:	f7fd fa2e 	bl	80022a0 <HAL_GetTick>
 8004e44:	0003      	movs	r3, r0
 8004e46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e48:	e009      	b.n	8004e5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4a:	f7fd fa29 	bl	80022a0 <HAL_GetTick>
 8004e4e:	0002      	movs	r2, r0
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	4a6a      	ldr	r2, [pc, #424]	@ (8005000 <HAL_RCC_ClockConfig+0x1f4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e0ca      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e5e:	4b67      	ldr	r3, [pc, #412]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2207      	movs	r2, #7
 8004e64:	4013      	ands	r3, r2
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d1ee      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2202      	movs	r2, #2
 8004e72:	4013      	ands	r3, r2
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d006      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e80:	4b60      	ldr	r3, [pc, #384]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	4b5f      	ldr	r3, [pc, #380]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004e86:	21e0      	movs	r1, #224	@ 0xe0
 8004e88:	01c9      	lsls	r1, r1, #7
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4a5d      	ldr	r2, [pc, #372]	@ (8005008 <HAL_RCC_ClockConfig+0x1fc>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b59      	ldr	r3, [pc, #356]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d057      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb4:	4b53      	ldr	r3, [pc, #332]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	029b      	lsls	r3, r3, #10
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d12b      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e097      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	2380      	movs	r3, #128	@ 0x80
 8004ed2:	049b      	lsls	r3, r3, #18
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d11f      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e08b      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee4:	4b47      	ldr	r3, [pc, #284]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4013      	ands	r3, r2
 8004eee:	d113      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e07f      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d106      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004efc:	4b41      	ldr	r3, [pc, #260]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	2202      	movs	r2, #2
 8004f02:	4013      	ands	r3, r2
 8004f04:	d108      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e074      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0e:	2202      	movs	r2, #2
 8004f10:	4013      	ands	r3, r2
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e06d      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f18:	4b3a      	ldr	r3, [pc, #232]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2207      	movs	r2, #7
 8004f1e:	4393      	bics	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4b37      	ldr	r3, [pc, #220]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fd f9b8 	bl	80022a0 <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f34:	e009      	b.n	8004f4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f36:	f7fd f9b3 	bl	80022a0 <HAL_GetTick>
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	4a2f      	ldr	r2, [pc, #188]	@ (8005000 <HAL_RCC_ClockConfig+0x1f4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e054      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2238      	movs	r2, #56	@ 0x38
 8004f50:	401a      	ands	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1ec      	bne.n	8004f36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b27      	ldr	r3, [pc, #156]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2207      	movs	r2, #7
 8004f62:	4013      	ands	r3, r2
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d21e      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b24      	ldr	r3, [pc, #144]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2207      	movs	r2, #7
 8004f70:	4393      	bics	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	4b21      	ldr	r3, [pc, #132]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd f990 	bl	80022a0 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f84:	e009      	b.n	8004f9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f86:	f7fd f98b 	bl	80022a0 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4a1b      	ldr	r2, [pc, #108]	@ (8005000 <HAL_RCC_ClockConfig+0x1f4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e02c      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f9a:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <HAL_RCC_ClockConfig+0x1f0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2207      	movs	r2, #7
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1ee      	bne.n	8004f86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2204      	movs	r2, #4
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	4a15      	ldr	r2, [pc, #84]	@ (800500c <HAL_RCC_ClockConfig+0x200>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	0019      	movs	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004fc6:	f000 f829 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8004fca:	0001      	movs	r1, r0
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <HAL_RCC_ClockConfig+0x1f8>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	220f      	movs	r2, #15
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005010 <HAL_RCC_ClockConfig+0x204>)
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	58d3      	ldr	r3, [r2, r3]
 8004fdc:	221f      	movs	r2, #31
 8004fde:	4013      	ands	r3, r2
 8004fe0:	000a      	movs	r2, r1
 8004fe2:	40da      	lsrs	r2, r3
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <HAL_RCC_ClockConfig+0x208>)
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <HAL_RCC_ClockConfig+0x20c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7fd f8fb 	bl	80021e8 <HAL_InitTick>
 8004ff2:	0003      	movs	r3, r0
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b004      	add	sp, #16
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40022000 	.word	0x40022000
 8005000:	00001388 	.word	0x00001388
 8005004:	40021000 	.word	0x40021000
 8005008:	fffff0ff 	.word	0xfffff0ff
 800500c:	ffff8fff 	.word	0xffff8fff
 8005010:	08009dac 	.word	0x08009dac
 8005014:	20000040 	.word	0x20000040
 8005018:	20000044 	.word	0x20000044

0800501c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005022:	4b3c      	ldr	r3, [pc, #240]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2238      	movs	r2, #56	@ 0x38
 8005028:	4013      	ands	r3, r2
 800502a:	d10f      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800502c:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0adb      	lsrs	r3, r3, #11
 8005032:	2207      	movs	r2, #7
 8005034:	4013      	ands	r3, r2
 8005036:	2201      	movs	r2, #1
 8005038:	409a      	lsls	r2, r3
 800503a:	0013      	movs	r3, r2
 800503c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	4835      	ldr	r0, [pc, #212]	@ (8005118 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005042:	f7fb f871 	bl	8000128 <__udivsi3>
 8005046:	0003      	movs	r3, r0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	e05d      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800504c:	4b31      	ldr	r3, [pc, #196]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2238      	movs	r2, #56	@ 0x38
 8005052:	4013      	ands	r3, r2
 8005054:	2b08      	cmp	r3, #8
 8005056:	d102      	bne.n	800505e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005058:	4b30      	ldr	r3, [pc, #192]	@ (800511c <HAL_RCC_GetSysClockFreq+0x100>)
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	e054      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800505e:	4b2d      	ldr	r3, [pc, #180]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2238      	movs	r2, #56	@ 0x38
 8005064:	4013      	ands	r3, r2
 8005066:	2b10      	cmp	r3, #16
 8005068:	d138      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800506a:	4b2a      	ldr	r3, [pc, #168]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2203      	movs	r2, #3
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005074:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	2207      	movs	r2, #7
 800507c:	4013      	ands	r3, r2
 800507e:	3301      	adds	r3, #1
 8005080:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d10d      	bne.n	80050a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4824      	ldr	r0, [pc, #144]	@ (800511c <HAL_RCC_GetSysClockFreq+0x100>)
 800508c:	f7fb f84c 	bl	8000128 <__udivsi3>
 8005090:	0003      	movs	r3, r0
 8005092:	0019      	movs	r1, r3
 8005094:	4b1f      	ldr	r3, [pc, #124]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	227f      	movs	r2, #127	@ 0x7f
 800509c:	4013      	ands	r3, r2
 800509e:	434b      	muls	r3, r1
 80050a0:	617b      	str	r3, [r7, #20]
        break;
 80050a2:	e00d      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	481c      	ldr	r0, [pc, #112]	@ (8005118 <HAL_RCC_GetSysClockFreq+0xfc>)
 80050a8:	f7fb f83e 	bl	8000128 <__udivsi3>
 80050ac:	0003      	movs	r3, r0
 80050ae:	0019      	movs	r1, r3
 80050b0:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	227f      	movs	r2, #127	@ 0x7f
 80050b8:	4013      	ands	r3, r2
 80050ba:	434b      	muls	r3, r1
 80050bc:	617b      	str	r3, [r7, #20]
        break;
 80050be:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050c0:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0f5b      	lsrs	r3, r3, #29
 80050c6:	2207      	movs	r2, #7
 80050c8:	4013      	ands	r3, r2
 80050ca:	3301      	adds	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	6978      	ldr	r0, [r7, #20]
 80050d2:	f7fb f829 	bl	8000128 <__udivsi3>
 80050d6:	0003      	movs	r3, r0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e015      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2238      	movs	r2, #56	@ 0x38
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d103      	bne.n	80050f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e00b      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050f0:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2238      	movs	r2, #56	@ 0x38
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b18      	cmp	r3, #24
 80050fa:	d103      	bne.n	8005104 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80050fc:	23fa      	movs	r3, #250	@ 0xfa
 80050fe:	01db      	lsls	r3, r3, #7
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e001      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005108:	693b      	ldr	r3, [r7, #16]
}
 800510a:	0018      	movs	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	b006      	add	sp, #24
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	40021000 	.word	0x40021000
 8005118:	00f42400 	.word	0x00f42400
 800511c:	007a1200 	.word	0x007a1200

08005120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005124:	4b02      	ldr	r3, [pc, #8]	@ (8005130 <HAL_RCC_GetHCLKFreq+0x10>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	20000040 	.word	0x20000040

08005134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005134:	b5b0      	push	{r4, r5, r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005138:	f7ff fff2 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 800513c:	0004      	movs	r4, r0
 800513e:	f7ff fb3f 	bl	80047c0 <LL_RCC_GetAPB1Prescaler>
 8005142:	0003      	movs	r3, r0
 8005144:	0b1a      	lsrs	r2, r3, #12
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005148:	0092      	lsls	r2, r2, #2
 800514a:	58d3      	ldr	r3, [r2, r3]
 800514c:	221f      	movs	r2, #31
 800514e:	4013      	ands	r3, r2
 8005150:	40dc      	lsrs	r4, r3
 8005152:	0023      	movs	r3, r4
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	bdb0      	pop	{r4, r5, r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	08009dec 	.word	0x08009dec

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005168:	2313      	movs	r3, #19
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005170:	2312      	movs	r3, #18
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	@ 0x80
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	4013      	ands	r3, r2
 8005182:	d100      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005184:	e0a3      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2011      	movs	r0, #17
 8005188:	183b      	adds	r3, r7, r0
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800518e:	4bc3      	ldr	r3, [pc, #780]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	055b      	lsls	r3, r3, #21
 8005196:	4013      	ands	r3, r2
 8005198:	d110      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519a:	4bc0      	ldr	r3, [pc, #768]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800519c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800519e:	4bbf      	ldr	r3, [pc, #764]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051a0:	2180      	movs	r1, #128	@ 0x80
 80051a2:	0549      	lsls	r1, r1, #21
 80051a4:	430a      	orrs	r2, r1
 80051a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051a8:	4bbc      	ldr	r3, [pc, #752]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	055b      	lsls	r3, r3, #21
 80051b0:	4013      	ands	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b6:	183b      	adds	r3, r7, r0
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051bc:	4bb8      	ldr	r3, [pc, #736]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4bb7      	ldr	r3, [pc, #732]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051c2:	2180      	movs	r1, #128	@ 0x80
 80051c4:	0049      	lsls	r1, r1, #1
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ca:	f7fd f869 	bl	80022a0 <HAL_GetTick>
 80051ce:	0003      	movs	r3, r0
 80051d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051d2:	e00b      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d4:	f7fd f864 	bl	80022a0 <HAL_GetTick>
 80051d8:	0002      	movs	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d904      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80051e2:	2313      	movs	r3, #19
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	2203      	movs	r2, #3
 80051e8:	701a      	strb	r2, [r3, #0]
        break;
 80051ea:	e005      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ec:	4bac      	ldr	r3, [pc, #688]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4013      	ands	r3, r2
 80051f6:	d0ed      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80051f8:	2313      	movs	r3, #19
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d154      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005202:	4ba6      	ldr	r3, [pc, #664]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005204:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005206:	23c0      	movs	r3, #192	@ 0xc0
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4013      	ands	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d019      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	429a      	cmp	r2, r3
 800521c:	d014      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800521e:	4b9f      	ldr	r3, [pc, #636]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	4aa0      	ldr	r2, [pc, #640]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005224:	4013      	ands	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005228:	4b9c      	ldr	r3, [pc, #624]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800522a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800522c:	4b9b      	ldr	r3, [pc, #620]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800522e:	2180      	movs	r1, #128	@ 0x80
 8005230:	0249      	lsls	r1, r1, #9
 8005232:	430a      	orrs	r2, r1
 8005234:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005236:	4b99      	ldr	r3, [pc, #612]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005238:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800523a:	4b98      	ldr	r3, [pc, #608]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800523c:	499a      	ldr	r1, [pc, #616]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800523e:	400a      	ands	r2, r1
 8005240:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005242:	4b96      	ldr	r3, [pc, #600]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2201      	movs	r2, #1
 800524c:	4013      	ands	r3, r2
 800524e:	d016      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd f826 	bl	80022a0 <HAL_GetTick>
 8005254:	0003      	movs	r3, r0
 8005256:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005258:	e00c      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7fd f821 	bl	80022a0 <HAL_GetTick>
 800525e:	0002      	movs	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	4a91      	ldr	r2, [pc, #580]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d904      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800526a:	2313      	movs	r3, #19
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	2203      	movs	r2, #3
 8005270:	701a      	strb	r2, [r3, #0]
            break;
 8005272:	e004      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005274:	4b89      	ldr	r3, [pc, #548]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005278:	2202      	movs	r2, #2
 800527a:	4013      	ands	r3, r2
 800527c:	d0ed      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800527e:	2313      	movs	r3, #19
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005288:	4b84      	ldr	r3, [pc, #528]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800528a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528c:	4a85      	ldr	r2, [pc, #532]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800528e:	4013      	ands	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005296:	4b81      	ldr	r3, [pc, #516]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005298:	430a      	orrs	r2, r1
 800529a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800529c:	e00c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800529e:	2312      	movs	r3, #18
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	2213      	movs	r2, #19
 80052a4:	18ba      	adds	r2, r7, r2
 80052a6:	7812      	ldrb	r2, [r2, #0]
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	2312      	movs	r3, #18
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	2213      	movs	r2, #19
 80052b2:	18ba      	adds	r2, r7, r2
 80052b4:	7812      	ldrb	r2, [r2, #0]
 80052b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052b8:	2311      	movs	r3, #17
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c2:	4b76      	ldr	r3, [pc, #472]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052c6:	4b75      	ldr	r3, [pc, #468]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c8:	4979      	ldr	r1, [pc, #484]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80052ca:	400a      	ands	r2, r1
 80052cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	4013      	ands	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d8:	4b70      	ldr	r3, [pc, #448]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052dc:	2203      	movs	r2, #3
 80052de:	4393      	bics	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	4013      	ands	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052f6:	4b69      	ldr	r3, [pc, #420]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	220c      	movs	r2, #12
 80052fc:	4393      	bics	r3, r2
 80052fe:	0019      	movs	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4b65      	ldr	r3, [pc, #404]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005306:	430a      	orrs	r2, r1
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2210      	movs	r2, #16
 8005310:	4013      	ands	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005314:	4b61      	ldr	r3, [pc, #388]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	4a66      	ldr	r2, [pc, #408]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800531a:	4013      	ands	r3, r2
 800531c:	0019      	movs	r1, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	4b5e      	ldr	r3, [pc, #376]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005324:	430a      	orrs	r2, r1
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4013      	ands	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005334:	4b59      	ldr	r3, [pc, #356]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005338:	4a5f      	ldr	r2, [pc, #380]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800533a:	4013      	ands	r3, r2
 800533c:	0019      	movs	r1, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	4b56      	ldr	r3, [pc, #344]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005344:	430a      	orrs	r2, r1
 8005346:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4013      	ands	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005354:	4b51      	ldr	r3, [pc, #324]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	4a58      	ldr	r2, [pc, #352]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800535a:	4013      	ands	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	4b4e      	ldr	r3, [pc, #312]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005364:	430a      	orrs	r2, r1
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2220      	movs	r2, #32
 800536e:	4013      	ands	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005372:	4b4a      	ldr	r3, [pc, #296]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	4a52      	ldr	r2, [pc, #328]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005378:	4013      	ands	r3, r2
 800537a:	0019      	movs	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	4b46      	ldr	r3, [pc, #280]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005382:	430a      	orrs	r2, r1
 8005384:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	01db      	lsls	r3, r3, #7
 800538e:	4013      	ands	r3, r2
 8005390:	d015      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005392:	4b42      	ldr	r3, [pc, #264]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	0899      	lsrs	r1, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	4b3f      	ldr	r3, [pc, #252]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053a0:	430a      	orrs	r2, r1
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	05db      	lsls	r3, r3, #23
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d106      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80053b0:	4b3a      	ldr	r3, [pc, #232]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	4b39      	ldr	r3, [pc, #228]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b6:	2180      	movs	r1, #128	@ 0x80
 80053b8:	0249      	lsls	r1, r1, #9
 80053ba:	430a      	orrs	r2, r1
 80053bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	@ 0x80
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	4013      	ands	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053ca:	4b34      	ldr	r3, [pc, #208]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	2240      	movs	r2, #64	@ 0x40
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053d8:	4b30      	ldr	r3, [pc, #192]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	@ 0x80
 80053e4:	039b      	lsls	r3, r3, #14
 80053e6:	4013      	ands	r3, r2
 80053e8:	d016      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053ea:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	4a35      	ldr	r2, [pc, #212]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053f8:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053fa:	430a      	orrs	r2, r1
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	03db      	lsls	r3, r3, #15
 8005406:	429a      	cmp	r2, r3
 8005408:	d106      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800540a:	4b24      	ldr	r3, [pc, #144]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	4b23      	ldr	r3, [pc, #140]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005410:	2180      	movs	r1, #128	@ 0x80
 8005412:	0449      	lsls	r1, r1, #17
 8005414:	430a      	orrs	r2, r1
 8005416:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	03db      	lsls	r3, r3, #15
 8005420:	4013      	ands	r3, r2
 8005422:	d016      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005428:	4a27      	ldr	r2, [pc, #156]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800542a:	4013      	ands	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005432:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005434:	430a      	orrs	r2, r1
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	045b      	lsls	r3, r3, #17
 8005440:	429a      	cmp	r2, r3
 8005442:	d106      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005444:	4b15      	ldr	r3, [pc, #84]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	4b14      	ldr	r3, [pc, #80]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800544a:	2180      	movs	r1, #128	@ 0x80
 800544c:	0449      	lsls	r1, r1, #17
 800544e:	430a      	orrs	r2, r1
 8005450:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	2380      	movs	r3, #128	@ 0x80
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	4013      	ands	r3, r2
 800545c:	d016      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800545e:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	4a1a      	ldr	r2, [pc, #104]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800546e:	430a      	orrs	r2, r1
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	01db      	lsls	r3, r3, #7
 800547a:	429a      	cmp	r2, r3
 800547c:	d106      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800547e:	4b07      	ldr	r3, [pc, #28]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	4b06      	ldr	r3, [pc, #24]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005484:	2180      	movs	r1, #128	@ 0x80
 8005486:	0249      	lsls	r1, r1, #9
 8005488:	430a      	orrs	r2, r1
 800548a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800548c:	2312      	movs	r3, #18
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	781b      	ldrb	r3, [r3, #0]
}
 8005492:	0018      	movs	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	b006      	add	sp, #24
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	40021000 	.word	0x40021000
 80054a0:	40007000 	.word	0x40007000
 80054a4:	fffffcff 	.word	0xfffffcff
 80054a8:	fffeffff 	.word	0xfffeffff
 80054ac:	00001388 	.word	0x00001388
 80054b0:	efffffff 	.word	0xefffffff
 80054b4:	fffff3ff 	.word	0xfffff3ff
 80054b8:	fff3ffff 	.word	0xfff3ffff
 80054bc:	ffcfffff 	.word	0xffcfffff
 80054c0:	ffffcfff 	.word	0xffffcfff
 80054c4:	ffbfffff 	.word	0xffbfffff
 80054c8:	feffffff 	.word	0xfeffffff
 80054cc:	ffff3fff 	.word	0xffff3fff

080054d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e04a      	b.n	8005578 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223d      	movs	r2, #61	@ 0x3d
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	223c      	movs	r2, #60	@ 0x3c
 80054f2:	2100      	movs	r1, #0
 80054f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7fc fc0b 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	223d      	movs	r2, #61	@ 0x3d
 8005502:	2102      	movs	r1, #2
 8005504:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	0019      	movs	r1, r3
 8005510:	0010      	movs	r0, r2
 8005512:	f000 fe6f 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2248      	movs	r2, #72	@ 0x48
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	223e      	movs	r2, #62	@ 0x3e
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	223f      	movs	r2, #63	@ 0x3f
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2240      	movs	r2, #64	@ 0x40
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2241      	movs	r2, #65	@ 0x41
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2242      	movs	r2, #66	@ 0x42
 8005542:	2101      	movs	r1, #1
 8005544:	5499      	strb	r1, [r3, r2]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2243      	movs	r2, #67	@ 0x43
 800554a:	2101      	movs	r1, #1
 800554c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2244      	movs	r2, #68	@ 0x44
 8005552:	2101      	movs	r1, #1
 8005554:	5499      	strb	r1, [r3, r2]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2245      	movs	r2, #69	@ 0x45
 800555a:	2101      	movs	r1, #1
 800555c:	5499      	strb	r1, [r3, r2]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2246      	movs	r2, #70	@ 0x46
 8005562:	2101      	movs	r1, #1
 8005564:	5499      	strb	r1, [r3, r2]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2247      	movs	r2, #71	@ 0x47
 800556a:	2101      	movs	r1, #1
 800556c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	223d      	movs	r2, #61	@ 0x3d
 8005572:	2101      	movs	r1, #1
 8005574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b002      	add	sp, #8
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	223d      	movs	r2, #61	@ 0x3d
 800558c:	5c9b      	ldrb	r3, [r3, r2]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e042      	b.n	800561e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	223d      	movs	r2, #61	@ 0x3d
 800559c:	2102      	movs	r1, #2
 800559e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2101      	movs	r1, #1
 80055ac:	430a      	orrs	r2, r1
 80055ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <HAL_TIM_Base_Start_IT+0xa8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x5a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	05db      	lsls	r3, r3, #23
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d009      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x5a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a18      	ldr	r2, [pc, #96]	@ (800562c <HAL_TIM_Base_Start_IT+0xac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x5a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <HAL_TIM_Base_Start_IT+0xb0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d116      	bne.n	8005608 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4a14      	ldr	r2, [pc, #80]	@ (8005634 <HAL_TIM_Base_Start_IT+0xb4>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d016      	beq.n	800561a <HAL_TIM_Base_Start_IT+0x9a>
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	2380      	movs	r3, #128	@ 0x80
 80055f0:	025b      	lsls	r3, r3, #9
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d011      	beq.n	800561a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2101      	movs	r1, #1
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	e008      	b.n	800561a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2101      	movs	r1, #1
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e000      	b.n	800561c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b004      	add	sp, #16
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40000400 	.word	0x40000400
 8005630:	40014000 	.word	0x40014000
 8005634:	00010007 	.word	0x00010007

08005638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e04a      	b.n	80056e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223d      	movs	r2, #61	@ 0x3d
 800564e:	5c9b      	ldrb	r3, [r3, r2]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d107      	bne.n	8005666 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	223c      	movs	r2, #60	@ 0x3c
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0018      	movs	r0, r3
 8005662:	f7fc fac3 	bl	8001bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	223d      	movs	r2, #61	@ 0x3d
 800566a:	2102      	movs	r1, #2
 800566c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	0019      	movs	r1, r3
 8005678:	0010      	movs	r0, r2
 800567a:	f000 fdbb 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2248      	movs	r2, #72	@ 0x48
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	223e      	movs	r2, #62	@ 0x3e
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	223f      	movs	r2, #63	@ 0x3f
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2240      	movs	r2, #64	@ 0x40
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2241      	movs	r2, #65	@ 0x41
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2242      	movs	r2, #66	@ 0x42
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2243      	movs	r2, #67	@ 0x43
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2244      	movs	r2, #68	@ 0x44
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2245      	movs	r2, #69	@ 0x45
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2246      	movs	r2, #70	@ 0x46
 80056ca:	2101      	movs	r1, #1
 80056cc:	5499      	strb	r1, [r3, r2]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2247      	movs	r2, #71	@ 0x47
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	223d      	movs	r2, #61	@ 0x3d
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <HAL_TIM_PWM_Start+0x22>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	223e      	movs	r2, #62	@ 0x3e
 80056fc:	5c9b      	ldrb	r3, [r3, r2]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	1e5a      	subs	r2, r3, #1
 8005704:	4193      	sbcs	r3, r2
 8005706:	b2db      	uxtb	r3, r3
 8005708:	e037      	b.n	800577a <HAL_TIM_PWM_Start+0x92>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b04      	cmp	r3, #4
 800570e:	d108      	bne.n	8005722 <HAL_TIM_PWM_Start+0x3a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223f      	movs	r2, #63	@ 0x3f
 8005714:	5c9b      	ldrb	r3, [r3, r2]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	1e5a      	subs	r2, r3, #1
 800571c:	4193      	sbcs	r3, r2
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e02b      	b.n	800577a <HAL_TIM_PWM_Start+0x92>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d108      	bne.n	800573a <HAL_TIM_PWM_Start+0x52>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2240      	movs	r2, #64	@ 0x40
 800572c:	5c9b      	ldrb	r3, [r3, r2]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	1e5a      	subs	r2, r3, #1
 8005734:	4193      	sbcs	r3, r2
 8005736:	b2db      	uxtb	r3, r3
 8005738:	e01f      	b.n	800577a <HAL_TIM_PWM_Start+0x92>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d108      	bne.n	8005752 <HAL_TIM_PWM_Start+0x6a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2241      	movs	r2, #65	@ 0x41
 8005744:	5c9b      	ldrb	r3, [r3, r2]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	4193      	sbcs	r3, r2
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e013      	b.n	800577a <HAL_TIM_PWM_Start+0x92>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d108      	bne.n	800576a <HAL_TIM_PWM_Start+0x82>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2242      	movs	r2, #66	@ 0x42
 800575c:	5c9b      	ldrb	r3, [r3, r2]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	1e5a      	subs	r2, r3, #1
 8005764:	4193      	sbcs	r3, r2
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e007      	b.n	800577a <HAL_TIM_PWM_Start+0x92>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2243      	movs	r2, #67	@ 0x43
 800576e:	5c9b      	ldrb	r3, [r3, r2]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	4193      	sbcs	r3, r2
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e08b      	b.n	800589a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0xaa>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	223e      	movs	r2, #62	@ 0x3e
 800578c:	2102      	movs	r1, #2
 800578e:	5499      	strb	r1, [r3, r2]
 8005790:	e023      	b.n	80057da <HAL_TIM_PWM_Start+0xf2>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xba>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	223f      	movs	r2, #63	@ 0x3f
 800579c:	2102      	movs	r1, #2
 800579e:	5499      	strb	r1, [r3, r2]
 80057a0:	e01b      	b.n	80057da <HAL_TIM_PWM_Start+0xf2>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xca>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2240      	movs	r2, #64	@ 0x40
 80057ac:	2102      	movs	r1, #2
 80057ae:	5499      	strb	r1, [r3, r2]
 80057b0:	e013      	b.n	80057da <HAL_TIM_PWM_Start+0xf2>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xda>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2241      	movs	r2, #65	@ 0x41
 80057bc:	2102      	movs	r1, #2
 80057be:	5499      	strb	r1, [r3, r2]
 80057c0:	e00b      	b.n	80057da <HAL_TIM_PWM_Start+0xf2>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xea>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2242      	movs	r2, #66	@ 0x42
 80057cc:	2102      	movs	r1, #2
 80057ce:	5499      	strb	r1, [r3, r2]
 80057d0:	e003      	b.n	80057da <HAL_TIM_PWM_Start+0xf2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2243      	movs	r2, #67	@ 0x43
 80057d6:	2102      	movs	r1, #2
 80057d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	2201      	movs	r2, #1
 80057e2:	0018      	movs	r0, r3
 80057e4:	f001 fa92 	bl	8006d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <HAL_TIM_PWM_Start+0x1bc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_TIM_PWM_Start+0x128>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2c      	ldr	r2, [pc, #176]	@ (80058a8 <HAL_TIM_PWM_Start+0x1c0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_TIM_PWM_Start+0x128>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <HAL_TIM_PWM_Start+0x1c4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIM_PWM_Start+0x128>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a29      	ldr	r2, [pc, #164]	@ (80058b0 <HAL_TIM_PWM_Start+0x1c8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_TIM_PWM_Start+0x12c>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_TIM_PWM_Start+0x12e>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2180      	movs	r1, #128	@ 0x80
 8005826:	0209      	lsls	r1, r1, #8
 8005828:	430a      	orrs	r2, r1
 800582a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_TIM_PWM_Start+0x1bc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <HAL_TIM_PWM_Start+0x16e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	2380      	movs	r3, #128	@ 0x80
 800583c:	05db      	lsls	r3, r3, #23
 800583e:	429a      	cmp	r2, r3
 8005840:	d009      	beq.n	8005856 <HAL_TIM_PWM_Start+0x16e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1b      	ldr	r2, [pc, #108]	@ (80058b4 <HAL_TIM_PWM_Start+0x1cc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_PWM_Start+0x16e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <HAL_TIM_PWM_Start+0x1c0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d116      	bne.n	8005884 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4a16      	ldr	r2, [pc, #88]	@ (80058b8 <HAL_TIM_PWM_Start+0x1d0>)
 800585e:	4013      	ands	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d016      	beq.n	8005896 <HAL_TIM_PWM_Start+0x1ae>
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	2380      	movs	r3, #128	@ 0x80
 800586c:	025b      	lsls	r3, r3, #9
 800586e:	429a      	cmp	r2, r3
 8005870:	d011      	beq.n	8005896 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	430a      	orrs	r2, r1
 8005880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005882:	e008      	b.n	8005896 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2101      	movs	r1, #1
 8005890:	430a      	orrs	r2, r1
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e000      	b.n	8005898 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005896:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	0018      	movs	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	b004      	add	sp, #16
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	40000400 	.word	0x40000400
 80058b8:	00010007 	.word	0x00010007

080058bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e04a      	b.n	8005964 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	223d      	movs	r2, #61	@ 0x3d
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	223c      	movs	r2, #60	@ 0x3c
 80058de:	2100      	movs	r1, #0
 80058e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7fc f9cb 	bl	8001c80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	223d      	movs	r2, #61	@ 0x3d
 80058ee:	2102      	movs	r1, #2
 80058f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	0019      	movs	r1, r3
 80058fc:	0010      	movs	r0, r2
 80058fe:	f000 fc79 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2248      	movs	r2, #72	@ 0x48
 8005906:	2101      	movs	r1, #1
 8005908:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	223e      	movs	r2, #62	@ 0x3e
 800590e:	2101      	movs	r1, #1
 8005910:	5499      	strb	r1, [r3, r2]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	223f      	movs	r2, #63	@ 0x3f
 8005916:	2101      	movs	r1, #1
 8005918:	5499      	strb	r1, [r3, r2]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2240      	movs	r2, #64	@ 0x40
 800591e:	2101      	movs	r1, #1
 8005920:	5499      	strb	r1, [r3, r2]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2241      	movs	r2, #65	@ 0x41
 8005926:	2101      	movs	r1, #1
 8005928:	5499      	strb	r1, [r3, r2]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2242      	movs	r2, #66	@ 0x42
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2243      	movs	r2, #67	@ 0x43
 8005936:	2101      	movs	r1, #1
 8005938:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2244      	movs	r2, #68	@ 0x44
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2245      	movs	r2, #69	@ 0x45
 8005946:	2101      	movs	r1, #1
 8005948:	5499      	strb	r1, [r3, r2]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2246      	movs	r2, #70	@ 0x46
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2247      	movs	r2, #71	@ 0x47
 8005956:	2101      	movs	r1, #1
 8005958:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	223d      	movs	r2, #61	@ 0x3d
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2202      	movs	r2, #2
 8005988:	4013      	ands	r3, r2
 800598a:	d021      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2202      	movs	r2, #2
 8005990:	4013      	ands	r3, r2
 8005992:	d01d      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2203      	movs	r2, #3
 800599a:	4252      	negs	r2, r2
 800599c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2203      	movs	r2, #3
 80059ac:	4013      	ands	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 fc06 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 80059b8:	e007      	b.n	80059ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 fbf9 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fc05 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2204      	movs	r2, #4
 80059d4:	4013      	ands	r3, r2
 80059d6:	d022      	beq.n	8005a1e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2204      	movs	r2, #4
 80059dc:	4013      	ands	r3, r2
 80059de:	d01e      	beq.n	8005a1e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2205      	movs	r2, #5
 80059e6:	4252      	negs	r2, r2
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	23c0      	movs	r3, #192	@ 0xc0
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4013      	ands	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 fbdf 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005a06:	e007      	b.n	8005a18 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f000 fbd2 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 fbde 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2208      	movs	r2, #8
 8005a22:	4013      	ands	r3, r2
 8005a24:	d021      	beq.n	8005a6a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d01d      	beq.n	8005a6a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2209      	movs	r2, #9
 8005a34:	4252      	negs	r2, r2
 8005a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2203      	movs	r2, #3
 8005a46:	4013      	ands	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 fbb9 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005a52:	e007      	b.n	8005a64 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 fbac 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 fbb8 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d022      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2210      	movs	r2, #16
 8005a76:	4013      	ands	r3, r2
 8005a78:	d01e      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2211      	movs	r2, #17
 8005a80:	4252      	negs	r2, r2
 8005a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2208      	movs	r2, #8
 8005a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	23c0      	movs	r3, #192	@ 0xc0
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4013      	ands	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 fb92 	bl	80061c4 <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e007      	b.n	8005ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 fb85 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f000 fb91 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2201      	movs	r2, #1
 8005abc:	4013      	ands	r3, r2
 8005abe:	d00c      	beq.n	8005ada <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d008      	beq.n	8005ada <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2202      	movs	r2, #2
 8005ace:	4252      	negs	r2, r2
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f000 fb65 	bl	80061a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2280      	movs	r2, #128	@ 0x80
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d104      	bne.n	8005aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	019b      	lsls	r3, r3, #6
 8005ae8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aea:	d00b      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2280      	movs	r2, #128	@ 0x80
 8005af0:	4013      	ands	r3, r2
 8005af2:	d007      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b74 <HAL_TIM_IRQHandler+0x208>)
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f001 fa3a 	bl	8006f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	2380      	movs	r3, #128	@ 0x80
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2280      	movs	r2, #128	@ 0x80
 8005b12:	4013      	ands	r3, r2
 8005b14:	d007      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <HAL_TIM_IRQHandler+0x20c>)
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f001 fa31 	bl	8006f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2240      	movs	r2, #64	@ 0x40
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d00c      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2240      	movs	r2, #64	@ 0x40
 8005b32:	4013      	ands	r3, r2
 8005b34:	d008      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2241      	movs	r2, #65	@ 0x41
 8005b3c:	4252      	negs	r2, r2
 8005b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 fb4e 	bl	80061e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d00c      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	4013      	ands	r3, r2
 8005b56:	d008      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2221      	movs	r2, #33	@ 0x21
 8005b5e:	4252      	negs	r2, r2
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f001 f9ff 	bl	8006f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	ffffdf7f 	.word	0xffffdf7f
 8005b78:	fffffeff 	.word	0xfffffeff

08005b7c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	2317      	movs	r3, #23
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	223c      	movs	r2, #60	@ 0x3c
 8005b94:	5c9b      	ldrb	r3, [r3, r2]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_IC_ConfigChannel+0x22>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e08c      	b.n	8005cb8 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	223c      	movs	r2, #60	@ 0x3c
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11b      	bne.n	8005be4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005bbc:	f000 ff02 	bl	80069c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	210c      	movs	r1, #12
 8005bcc:	438a      	bics	r2, r1
 8005bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e062      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d11c      	bne.n	8005c24 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005bfa:	f000 ff6d 	bl	8006ad8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	492d      	ldr	r1, [pc, #180]	@ (8005cc0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6999      	ldr	r1, [r3, #24]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	021a      	lsls	r2, r3, #8
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	e042      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d11b      	bne.n	8005c62 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c3a:	f000 ffc1 	bl	8006bc0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	210c      	movs	r1, #12
 8005c4a:	438a      	bics	r2, r1
 8005c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	61da      	str	r2, [r3, #28]
 8005c60:	e023      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d11c      	bne.n	8005ca2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c78:	f000 ffe2 	bl	8006c40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	490e      	ldr	r1, [pc, #56]	@ (8005cc0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005c88:	400a      	ands	r2, r1
 8005c8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69d9      	ldr	r1, [r3, #28]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	61da      	str	r2, [r3, #28]
 8005ca0:	e003      	b.n	8005caa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005ca2:	2317      	movs	r3, #23
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	223c      	movs	r2, #60	@ 0x3c
 8005cae:	2100      	movs	r1, #0
 8005cb0:	5499      	strb	r1, [r3, r2]

  return status;
 8005cb2:	2317      	movs	r3, #23
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
}
 8005cb8:	0018      	movs	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b006      	add	sp, #24
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	fffff3ff 	.word	0xfffff3ff

08005cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd0:	2317      	movs	r3, #23
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	223c      	movs	r2, #60	@ 0x3c
 8005cdc:	5c9b      	ldrb	r3, [r3, r2]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e0e5      	b.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	223c      	movs	r2, #60	@ 0x3c
 8005cea:	2101      	movs	r1, #1
 8005cec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b14      	cmp	r3, #20
 8005cf2:	d900      	bls.n	8005cf6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005cf4:	e0d1      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	009a      	lsls	r2, r3, #2
 8005cfa:	4b70      	ldr	r3, [pc, #448]	@ (8005ebc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005cfc:	18d3      	adds	r3, r2, r3
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	0011      	movs	r1, r2
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fb00 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2108      	movs	r1, #8
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	438a      	bics	r2, r1
 8005d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6999      	ldr	r1, [r3, #24]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	619a      	str	r2, [r3, #24]
      break;
 8005d42:	e0af      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0011      	movs	r1, r2
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fb69 	bl	8006424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2180      	movs	r1, #128	@ 0x80
 8005d5e:	0109      	lsls	r1, r1, #4
 8005d60:	430a      	orrs	r2, r1
 8005d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4954      	ldr	r1, [pc, #336]	@ (8005ec0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d70:	400a      	ands	r2, r1
 8005d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6999      	ldr	r1, [r3, #24]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	021a      	lsls	r2, r3, #8
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	619a      	str	r2, [r3, #24]
      break;
 8005d88:	e08c      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	0011      	movs	r1, r2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fbca 	bl	800652c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2108      	movs	r1, #8
 8005da4:	430a      	orrs	r2, r1
 8005da6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2104      	movs	r1, #4
 8005db4:	438a      	bics	r2, r1
 8005db6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69d9      	ldr	r1, [r3, #28]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	61da      	str	r2, [r3, #28]
      break;
 8005dca:	e06b      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f000 fc31 	bl	800663c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2180      	movs	r1, #128	@ 0x80
 8005de6:	0109      	lsls	r1, r1, #4
 8005de8:	430a      	orrs	r2, r1
 8005dea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4932      	ldr	r1, [pc, #200]	@ (8005ec0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005df8:	400a      	ands	r2, r1
 8005dfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69d9      	ldr	r1, [r3, #28]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
      break;
 8005e10:	e048      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0011      	movs	r1, r2
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 fc78 	bl	8006710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2108      	movs	r1, #8
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	438a      	bics	r2, r1
 8005e3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e52:	e027      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 fcb7 	bl	80067d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2180      	movs	r1, #128	@ 0x80
 8005e6e:	0109      	lsls	r1, r1, #4
 8005e70:	430a      	orrs	r2, r1
 8005e72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4910      	ldr	r1, [pc, #64]	@ (8005ec0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	021a      	lsls	r2, r3, #8
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e98:	e004      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005e9a:	2317      	movs	r3, #23
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	701a      	strb	r2, [r3, #0]
      break;
 8005ea2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	223c      	movs	r2, #60	@ 0x3c
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	5499      	strb	r1, [r3, r2]

  return status;
 8005eac:	2317      	movs	r3, #23
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	781b      	ldrb	r3, [r3, #0]
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b006      	add	sp, #24
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	08009e0c 	.word	0x08009e0c
 8005ec0:	fffffbff 	.word	0xfffffbff

08005ec4 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2317      	movs	r3, #23
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	223c      	movs	r2, #60	@ 0x3c
 8005edc:	5c9b      	ldrb	r3, [r3, r2]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_TIM_ConfigOCrefClear+0x22>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e10e      	b.n	8006104 <HAL_TIM_ConfigOCrefClear+0x240>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	223c      	movs	r2, #60	@ 0x3c
 8005eea:	2101      	movs	r1, #1
 8005eec:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	223d      	movs	r2, #61	@ 0x3d
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2280      	movs	r2, #128	@ 0x80
 8005efc:	0592      	lsls	r2, r2, #22
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d02f      	beq.n	8005f62 <HAL_TIM_ConfigOCrefClear+0x9e>
 8005f02:	2280      	movs	r2, #128	@ 0x80
 8005f04:	0592      	lsls	r2, r2, #22
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d854      	bhi.n	8005fb4 <HAL_TIM_ConfigOCrefClear+0xf0>
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d914      	bls.n	8005f38 <HAL_TIM_ConfigOCrefClear+0x74>
 8005f0e:	2280      	movs	r2, #128	@ 0x80
 8005f10:	0552      	lsls	r2, r2, #21
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d14e      	bne.n	8005fb4 <HAL_TIM_ConfigOCrefClear+0xf0>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	497a      	ldr	r1, [pc, #488]	@ (800610c <HAL_TIM_ConfigOCrefClear+0x248>)
 8005f22:	400a      	ands	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2101      	movs	r1, #1
 8005f32:	438a      	bics	r2, r1
 8005f34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f36:	e042      	b.n	8005fbe <HAL_TIM_ConfigOCrefClear+0xfa>
#if defined(COMP3)
    case TIM_CLEARINPUTSOURCE_COMP3:
#endif /* COMP3 */
    {
      /* Clear the OCREF clear selection bit */
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2108      	movs	r1, #8
 8005f44:	438a      	bics	r2, r1
 8005f46:	609a      	str	r2, [r3, #8]

      /* OCREF_CLR_INT is connected to COMPx output */
      MODIFY_REG(htim->Instance->OR1, TIMx_OR1_OCREF_CLR, sClearInputConfig->ClearInputSource);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4393      	bics	r3, r2
 8005f52:	0019      	movs	r1, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f60:	e02d      	b.n	8005fbe <HAL_TIM_ConfigOCrefClear+0xfa>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_TIM_ConfigOCrefClear+0xba>
      {
        htim->State = HAL_TIM_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	223d      	movs	r2, #61	@ 0x3d
 8005f6e:	2101      	movs	r1, #1
 8005f70:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(htim);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	223c      	movs	r2, #60	@ 0x3c
 8005f76:	2100      	movs	r1, #0
 8005f78:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e0c2      	b.n	8006104 <HAL_TIM_ConfigOCrefClear+0x240>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f8e:	f000 fe9d 	bl	8006ccc <TIM_ETR_SetConfig>

      /* Set the OCREF clear selection bit */
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2108      	movs	r1, #8
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2101      	movs	r1, #1
 8005fae:	438a      	bics	r2, r1
 8005fb0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fb2:	e004      	b.n	8005fbe <HAL_TIM_ConfigOCrefClear+0xfa>
    }

    default:
      status = HAL_ERROR;
 8005fb4:	2317      	movs	r3, #23
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
      break;
 8005fbc:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005fbe:	2317      	movs	r3, #23
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d000      	beq.n	8005fca <HAL_TIM_ConfigOCrefClear+0x106>
 8005fc8:	e091      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
  {
    switch (Channel)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b14      	cmp	r3, #20
 8005fce:	d900      	bls.n	8005fd2 <HAL_TIM_ConfigOCrefClear+0x10e>
 8005fd0:	e08c      	b.n	80060ec <HAL_TIM_ConfigOCrefClear+0x228>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	009a      	lsls	r2, r3, #2
 8005fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8006110 <HAL_TIM_ConfigOCrefClear+0x24c>)
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	469f      	mov	pc, r3
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_TIM_ConfigOCrefClear+0x134>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2180      	movs	r1, #128	@ 0x80
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 8005ff6:	e07a      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2180      	movs	r1, #128	@ 0x80
 8006004:	438a      	bics	r2, r1
 8006006:	619a      	str	r2, [r3, #24]
        break;
 8006008:	e071      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_TIM_ConfigOCrefClear+0x162>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2180      	movs	r1, #128	@ 0x80
 800601e:	0209      	lsls	r1, r1, #8
 8006020:	430a      	orrs	r2, r1
 8006022:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8006024:	e063      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4938      	ldr	r1, [pc, #224]	@ (8006114 <HAL_TIM_ConfigOCrefClear+0x250>)
 8006032:	400a      	ands	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
        break;
 8006036:	e05a      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <HAL_TIM_ConfigOCrefClear+0x18e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2180      	movs	r1, #128	@ 0x80
 800604c:	430a      	orrs	r2, r1
 800604e:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8006050:	e04d      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2180      	movs	r1, #128	@ 0x80
 800605e:	438a      	bics	r2, r1
 8006060:	61da      	str	r2, [r3, #28]
        break;
 8006062:	e044      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <HAL_TIM_ConfigOCrefClear+0x1bc>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2180      	movs	r1, #128	@ 0x80
 8006078:	0209      	lsls	r1, r1, #8
 800607a:	430a      	orrs	r2, r1
 800607c:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 800607e:	e036      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4922      	ldr	r1, [pc, #136]	@ (8006114 <HAL_TIM_ConfigOCrefClear+0x250>)
 800608c:	400a      	ands	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
        break;
 8006090:	e02d      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_5:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d008      	beq.n	80060ac <HAL_TIM_ConfigOCrefClear+0x1e8>
        {
          /* Enable the OCREF clear feature for Channel 5 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2180      	movs	r1, #128	@ 0x80
 80060a6:	430a      	orrs	r2, r1
 80060a8:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 5 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
        }
        break;
 80060aa:	e020      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2180      	movs	r1, #128	@ 0x80
 80060b8:	438a      	bics	r2, r1
 80060ba:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80060bc:	e017      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_6:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <HAL_TIM_ConfigOCrefClear+0x216>
        {
          /* Enable the OCREF clear feature for Channel 6 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2180      	movs	r1, #128	@ 0x80
 80060d2:	0209      	lsls	r1, r1, #8
 80060d4:	430a      	orrs	r2, r1
 80060d6:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 6 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
        }
        break;
 80060d8:	e009      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	490b      	ldr	r1, [pc, #44]	@ (8006114 <HAL_TIM_ConfigOCrefClear+0x250>)
 80060e6:	400a      	ands	r2, r1
 80060e8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80060ea:	e000      	b.n	80060ee <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      default:
        break;
 80060ec:	46c0      	nop			@ (mov r8, r8)
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	223d      	movs	r2, #61	@ 0x3d
 80060f2:	2101      	movs	r1, #1
 80060f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	223c      	movs	r2, #60	@ 0x3c
 80060fa:	2100      	movs	r1, #0
 80060fc:	5499      	strb	r1, [r3, r2]

  return status;
 80060fe:	2317      	movs	r3, #23
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b006      	add	sp, #24
 800610a:	bd80      	pop	{r7, pc}
 800610c:	ffff00f7 	.word	0xffff00f7
 8006110:	08009e60 	.word	0x08009e60
 8006114:	ffff7fff 	.word	0xffff7fff

08006118 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	223c      	movs	r2, #60	@ 0x3c
 8006126:	5c9b      	ldrb	r3, [r3, r2]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_TIM_SlaveConfigSynchro+0x18>
 800612c:	2302      	movs	r3, #2
 800612e:	e032      	b.n	8006196 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	223c      	movs	r2, #60	@ 0x3c
 8006134:	2101      	movs	r1, #1
 8006136:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	223d      	movs	r2, #61	@ 0x3d
 800613c:	2102      	movs	r1, #2
 800613e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	0011      	movs	r1, r2
 8006146:	0018      	movs	r0, r3
 8006148:	f000 fba6 	bl	8006898 <TIM_SlaveTimer_SetConfig>
 800614c:	1e03      	subs	r3, r0, #0
 800614e:	d009      	beq.n	8006164 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	223d      	movs	r2, #61	@ 0x3d
 8006154:	2101      	movs	r1, #1
 8006156:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	223c      	movs	r2, #60	@ 0x3c
 800615c:	2100      	movs	r1, #0
 800615e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e018      	b.n	8006196 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2140      	movs	r1, #64	@ 0x40
 8006170:	438a      	bics	r2, r1
 8006172:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4908      	ldr	r1, [pc, #32]	@ (80061a0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8006180:	400a      	ands	r2, r1
 8006182:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	223d      	movs	r2, #61	@ 0x3d
 8006188:	2101      	movs	r1, #1
 800618a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	223c      	movs	r2, #60	@ 0x3c
 8006190:	2100      	movs	r1, #0
 8006192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b002      	add	sp, #8
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			@ (mov r8, r8)
 80061a0:	ffffbfff 	.word	0xffffbfff

080061a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061ac:	46c0      	nop			@ (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b002      	add	sp, #8
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061bc:	46c0      	nop			@ (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061cc:	46c0      	nop			@ (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061dc:	46c0      	nop			@ (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b002      	add	sp, #8
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ec:	46c0      	nop			@ (mov r8, r8)
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b002      	add	sp, #8
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a3b      	ldr	r2, [pc, #236]	@ (80062f4 <TIM_Base_SetConfig+0x100>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d008      	beq.n	800621e <TIM_Base_SetConfig+0x2a>
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	2380      	movs	r3, #128	@ 0x80
 8006210:	05db      	lsls	r3, r3, #23
 8006212:	429a      	cmp	r2, r3
 8006214:	d003      	beq.n	800621e <TIM_Base_SetConfig+0x2a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a37      	ldr	r2, [pc, #220]	@ (80062f8 <TIM_Base_SetConfig+0x104>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d108      	bne.n	8006230 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2270      	movs	r2, #112	@ 0x70
 8006222:	4393      	bics	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a30      	ldr	r2, [pc, #192]	@ (80062f4 <TIM_Base_SetConfig+0x100>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d018      	beq.n	800626a <TIM_Base_SetConfig+0x76>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	2380      	movs	r3, #128	@ 0x80
 800623c:	05db      	lsls	r3, r3, #23
 800623e:	429a      	cmp	r2, r3
 8006240:	d013      	beq.n	800626a <TIM_Base_SetConfig+0x76>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2c      	ldr	r2, [pc, #176]	@ (80062f8 <TIM_Base_SetConfig+0x104>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00f      	beq.n	800626a <TIM_Base_SetConfig+0x76>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2b      	ldr	r2, [pc, #172]	@ (80062fc <TIM_Base_SetConfig+0x108>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00b      	beq.n	800626a <TIM_Base_SetConfig+0x76>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2a      	ldr	r2, [pc, #168]	@ (8006300 <TIM_Base_SetConfig+0x10c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <TIM_Base_SetConfig+0x76>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a29      	ldr	r2, [pc, #164]	@ (8006304 <TIM_Base_SetConfig+0x110>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_Base_SetConfig+0x76>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a28      	ldr	r2, [pc, #160]	@ (8006308 <TIM_Base_SetConfig+0x114>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d108      	bne.n	800627c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a27      	ldr	r2, [pc, #156]	@ (800630c <TIM_Base_SetConfig+0x118>)
 800626e:	4013      	ands	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2280      	movs	r2, #128	@ 0x80
 8006280:	4393      	bics	r3, r2
 8006282:	001a      	movs	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a13      	ldr	r2, [pc, #76]	@ (80062f4 <TIM_Base_SetConfig+0x100>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_Base_SetConfig+0xce>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <TIM_Base_SetConfig+0x10c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_Base_SetConfig+0xce>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a13      	ldr	r2, [pc, #76]	@ (8006304 <TIM_Base_SetConfig+0x110>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_Base_SetConfig+0xce>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <TIM_Base_SetConfig+0x114>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d103      	bne.n	80062ca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2201      	movs	r2, #1
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d106      	bne.n	80062ea <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2201      	movs	r2, #1
 80062e2:	4393      	bics	r3, r2
 80062e4:	001a      	movs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	611a      	str	r2, [r3, #16]
  }
}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b004      	add	sp, #16
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40002000 	.word	0x40002000
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800
 800630c:	fffffcff 	.word	0xfffffcff

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	2201      	movs	r2, #1
 8006326:	4393      	bics	r3, r2
 8006328:	001a      	movs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a32      	ldr	r2, [pc, #200]	@ (8006408 <TIM_OC1_SetConfig+0xf8>)
 800633e:	4013      	ands	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2203      	movs	r2, #3
 8006346:	4393      	bics	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2202      	movs	r2, #2
 8006358:	4393      	bics	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a28      	ldr	r2, [pc, #160]	@ (800640c <TIM_OC1_SetConfig+0xfc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_OC1_SetConfig+0x76>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <TIM_OC1_SetConfig+0x100>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_OC1_SetConfig+0x76>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	@ (8006414 <TIM_OC1_SetConfig+0x104>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_OC1_SetConfig+0x76>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <TIM_OC1_SetConfig+0x108>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10c      	bne.n	80063a0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2208      	movs	r2, #8
 800638a:	4393      	bics	r3, r2
 800638c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2204      	movs	r2, #4
 800639c:	4393      	bics	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a1a      	ldr	r2, [pc, #104]	@ (800640c <TIM_OC1_SetConfig+0xfc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_OC1_SetConfig+0xb0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <TIM_OC1_SetConfig+0x100>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_OC1_SetConfig+0xb0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a18      	ldr	r2, [pc, #96]	@ (8006414 <TIM_OC1_SetConfig+0x104>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC1_SetConfig+0xb0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a17      	ldr	r2, [pc, #92]	@ (8006418 <TIM_OC1_SetConfig+0x108>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d111      	bne.n	80063e4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4a16      	ldr	r2, [pc, #88]	@ (800641c <TIM_OC1_SetConfig+0x10c>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4a15      	ldr	r2, [pc, #84]	@ (8006420 <TIM_OC1_SetConfig+0x110>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	621a      	str	r2, [r3, #32]
}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b006      	add	sp, #24
 8006404:	bd80      	pop	{r7, pc}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	fffeff8f 	.word	0xfffeff8f
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40014000 	.word	0x40014000
 8006414:	40014400 	.word	0x40014400
 8006418:	40014800 	.word	0x40014800
 800641c:	fffffeff 	.word	0xfffffeff
 8006420:	fffffdff 	.word	0xfffffdff

08006424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	2210      	movs	r2, #16
 800643a:	4393      	bics	r3, r2
 800643c:	001a      	movs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a2e      	ldr	r2, [pc, #184]	@ (800650c <TIM_OC2_SetConfig+0xe8>)
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a2d      	ldr	r2, [pc, #180]	@ (8006510 <TIM_OC2_SetConfig+0xec>)
 800645a:	4013      	ands	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2220      	movs	r2, #32
 800646e:	4393      	bics	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a24      	ldr	r2, [pc, #144]	@ (8006514 <TIM_OC2_SetConfig+0xf0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10d      	bne.n	80064a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2280      	movs	r2, #128	@ 0x80
 800648a:	4393      	bics	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2240      	movs	r2, #64	@ 0x40
 800649e:	4393      	bics	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006514 <TIM_OC2_SetConfig+0xf0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <TIM_OC2_SetConfig+0x9e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <TIM_OC2_SetConfig+0xf4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <TIM_OC2_SetConfig+0x9e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a19      	ldr	r2, [pc, #100]	@ (800651c <TIM_OC2_SetConfig+0xf8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_OC2_SetConfig+0x9e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <TIM_OC2_SetConfig+0xfc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d113      	bne.n	80064ea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4a17      	ldr	r2, [pc, #92]	@ (8006524 <TIM_OC2_SetConfig+0x100>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4a16      	ldr	r2, [pc, #88]	@ (8006528 <TIM_OC2_SetConfig+0x104>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	621a      	str	r2, [r3, #32]
}
 8006504:	46c0      	nop			@ (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b006      	add	sp, #24
 800650a:	bd80      	pop	{r7, pc}
 800650c:	feff8fff 	.word	0xfeff8fff
 8006510:	fffffcff 	.word	0xfffffcff
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800
 8006524:	fffffbff 	.word	0xfffffbff
 8006528:	fffff7ff 	.word	0xfffff7ff

0800652c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4a33      	ldr	r2, [pc, #204]	@ (8006610 <TIM_OC3_SetConfig+0xe4>)
 8006542:	401a      	ands	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a2f      	ldr	r2, [pc, #188]	@ (8006614 <TIM_OC3_SetConfig+0xe8>)
 8006558:	4013      	ands	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2203      	movs	r2, #3
 8006560:	4393      	bics	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4a29      	ldr	r2, [pc, #164]	@ (8006618 <TIM_OC3_SetConfig+0xec>)
 8006572:	4013      	ands	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a25      	ldr	r2, [pc, #148]	@ (800661c <TIM_OC3_SetConfig+0xf0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d10d      	bne.n	80065a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4a24      	ldr	r2, [pc, #144]	@ (8006620 <TIM_OC3_SetConfig+0xf4>)
 800658e:	4013      	ands	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4a20      	ldr	r2, [pc, #128]	@ (8006624 <TIM_OC3_SetConfig+0xf8>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1c      	ldr	r2, [pc, #112]	@ (800661c <TIM_OC3_SetConfig+0xf0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <TIM_OC3_SetConfig+0x9a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <TIM_OC3_SetConfig+0xfc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <TIM_OC3_SetConfig+0x9a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <TIM_OC3_SetConfig+0x100>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_OC3_SetConfig+0x9a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006630 <TIM_OC3_SetConfig+0x104>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d113      	bne.n	80065ee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006634 <TIM_OC3_SetConfig+0x108>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <TIM_OC3_SetConfig+0x10c>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b006      	add	sp, #24
 800660e:	bd80      	pop	{r7, pc}
 8006610:	fffffeff 	.word	0xfffffeff
 8006614:	fffeff8f 	.word	0xfffeff8f
 8006618:	fffffdff 	.word	0xfffffdff
 800661c:	40012c00 	.word	0x40012c00
 8006620:	fffff7ff 	.word	0xfffff7ff
 8006624:	fffffbff 	.word	0xfffffbff
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800
 8006634:	ffffefff 	.word	0xffffefff
 8006638:	ffffdfff 	.word	0xffffdfff

0800663c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	4a26      	ldr	r2, [pc, #152]	@ (80066ec <TIM_OC4_SetConfig+0xb0>)
 8006652:	401a      	ands	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a22      	ldr	r2, [pc, #136]	@ (80066f0 <TIM_OC4_SetConfig+0xb4>)
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a21      	ldr	r2, [pc, #132]	@ (80066f4 <TIM_OC4_SetConfig+0xb8>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4a1d      	ldr	r2, [pc, #116]	@ (80066f8 <TIM_OC4_SetConfig+0xbc>)
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a19      	ldr	r2, [pc, #100]	@ (80066fc <TIM_OC4_SetConfig+0xc0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <TIM_OC4_SetConfig+0x78>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a18      	ldr	r2, [pc, #96]	@ (8006700 <TIM_OC4_SetConfig+0xc4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_OC4_SetConfig+0x78>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a17      	ldr	r2, [pc, #92]	@ (8006704 <TIM_OC4_SetConfig+0xc8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC4_SetConfig+0x78>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a16      	ldr	r2, [pc, #88]	@ (8006708 <TIM_OC4_SetConfig+0xcc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d109      	bne.n	80066c8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4a15      	ldr	r2, [pc, #84]	@ (800670c <TIM_OC4_SetConfig+0xd0>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b006      	add	sp, #24
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	ffffefff 	.word	0xffffefff
 80066f0:	feff8fff 	.word	0xfeff8fff
 80066f4:	fffffcff 	.word	0xfffffcff
 80066f8:	ffffdfff 	.word	0xffffdfff
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40014000 	.word	0x40014000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800
 800670c:	ffffbfff 	.word	0xffffbfff

08006710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	4a23      	ldr	r2, [pc, #140]	@ (80067b4 <TIM_OC5_SetConfig+0xa4>)
 8006726:	401a      	ands	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a1f      	ldr	r2, [pc, #124]	@ (80067b8 <TIM_OC5_SetConfig+0xa8>)
 800673c:	4013      	ands	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4a1b      	ldr	r2, [pc, #108]	@ (80067bc <TIM_OC5_SetConfig+0xac>)
 800674e:	4013      	ands	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a17      	ldr	r2, [pc, #92]	@ (80067c0 <TIM_OC5_SetConfig+0xb0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_OC5_SetConfig+0x6e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <TIM_OC5_SetConfig+0xb4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_OC5_SetConfig+0x6e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a15      	ldr	r2, [pc, #84]	@ (80067c8 <TIM_OC5_SetConfig+0xb8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC5_SetConfig+0x6e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a14      	ldr	r2, [pc, #80]	@ (80067cc <TIM_OC5_SetConfig+0xbc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d109      	bne.n	8006792 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4a0c      	ldr	r2, [pc, #48]	@ (80067b4 <TIM_OC5_SetConfig+0xa4>)
 8006782:	4013      	ands	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	46c0      	nop			@ (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b006      	add	sp, #24
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	fffeffff 	.word	0xfffeffff
 80067b8:	fffeff8f 	.word	0xfffeff8f
 80067bc:	fffdffff 	.word	0xfffdffff
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40014000 	.word	0x40014000
 80067c8:	40014400 	.word	0x40014400
 80067cc:	40014800 	.word	0x40014800

080067d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	4a24      	ldr	r2, [pc, #144]	@ (8006878 <TIM_OC6_SetConfig+0xa8>)
 80067e6:	401a      	ands	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a20      	ldr	r2, [pc, #128]	@ (800687c <TIM_OC6_SetConfig+0xac>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	4a1c      	ldr	r2, [pc, #112]	@ (8006880 <TIM_OC6_SetConfig+0xb0>)
 8006810:	4013      	ands	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	051b      	lsls	r3, r3, #20
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a18      	ldr	r2, [pc, #96]	@ (8006884 <TIM_OC6_SetConfig+0xb4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00b      	beq.n	8006840 <TIM_OC6_SetConfig+0x70>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <TIM_OC6_SetConfig+0xb8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_OC6_SetConfig+0x70>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a16      	ldr	r2, [pc, #88]	@ (800688c <TIM_OC6_SetConfig+0xbc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_OC6_SetConfig+0x70>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a15      	ldr	r2, [pc, #84]	@ (8006890 <TIM_OC6_SetConfig+0xc0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d109      	bne.n	8006854 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4a14      	ldr	r2, [pc, #80]	@ (8006894 <TIM_OC6_SetConfig+0xc4>)
 8006844:	4013      	ands	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	46bd      	mov	sp, r7
 8006872:	b006      	add	sp, #24
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	ffefffff 	.word	0xffefffff
 800687c:	feff8fff 	.word	0xfeff8fff
 8006880:	ffdfffff 	.word	0xffdfffff
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800
 8006894:	fffbffff 	.word	0xfffbffff

08006898 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068a2:	2317      	movs	r3, #23
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4a41      	ldr	r2, [pc, #260]	@ (80069bc <TIM_SlaveTimer_SetConfig+0x124>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4a3e      	ldr	r2, [pc, #248]	@ (80069c0 <TIM_SlaveTimer_SetConfig+0x128>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b70      	cmp	r3, #112	@ 0x70
 80068e4:	d015      	beq.n	8006912 <TIM_SlaveTimer_SetConfig+0x7a>
 80068e6:	d900      	bls.n	80068ea <TIM_SlaveTimer_SetConfig+0x52>
 80068e8:	e05b      	b.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80068ea:	2b60      	cmp	r3, #96	@ 0x60
 80068ec:	d04f      	beq.n	800698e <TIM_SlaveTimer_SetConfig+0xf6>
 80068ee:	d858      	bhi.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80068f0:	2b50      	cmp	r3, #80	@ 0x50
 80068f2:	d042      	beq.n	800697a <TIM_SlaveTimer_SetConfig+0xe2>
 80068f4:	d855      	bhi.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	d016      	beq.n	8006928 <TIM_SlaveTimer_SetConfig+0x90>
 80068fa:	d852      	bhi.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80068fc:	2b30      	cmp	r3, #48	@ 0x30
 80068fe:	d055      	beq.n	80069ac <TIM_SlaveTimer_SetConfig+0x114>
 8006900:	d84f      	bhi.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
 8006902:	2b20      	cmp	r3, #32
 8006904:	d052      	beq.n	80069ac <TIM_SlaveTimer_SetConfig+0x114>
 8006906:	d84c      	bhi.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d04f      	beq.n	80069ac <TIM_SlaveTimer_SetConfig+0x114>
 800690c:	2b10      	cmp	r3, #16
 800690e:	d04d      	beq.n	80069ac <TIM_SlaveTimer_SetConfig+0x114>
 8006910:	e047      	b.n	80069a2 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	f000 f9d3 	bl	8006ccc <TIM_ETR_SetConfig>
      break;
 8006926:	e042      	b.n	80069ae <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b05      	cmp	r3, #5
 800692e:	d101      	bne.n	8006934 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e03f      	b.n	80069b4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a1a      	ldr	r2, [r3, #32]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2101      	movs	r1, #1
 8006948:	438a      	bics	r2, r1
 800694a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	22f0      	movs	r2, #240	@ 0xf0
 8006958:	4393      	bics	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	4313      	orrs	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]
      break;
 8006978:	e019      	b.n	80069ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	001a      	movs	r2, r3
 8006988:	f000 f878 	bl	8006a7c <TIM_TI1_ConfigInputStage>
      break;
 800698c:	e00f      	b.n	80069ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800699a:	001a      	movs	r2, r3
 800699c:	f000 f8de 	bl	8006b5c <TIM_TI2_ConfigInputStage>
      break;
 80069a0:	e005      	b.n	80069ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80069a2:	2317      	movs	r3, #23
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
      break;
 80069aa:	e000      	b.n	80069ae <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80069ac:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80069ae:	2317      	movs	r3, #23
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	781b      	ldrb	r3, [r3, #0]
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b006      	add	sp, #24
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	ffcfff8f 	.word	0xffcfff8f
 80069c0:	fffefff8 	.word	0xfffefff8

080069c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	2201      	movs	r2, #1
 80069de:	4393      	bics	r3, r2
 80069e0:	001a      	movs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a20      	ldr	r2, [pc, #128]	@ (8006a70 <TIM_TI1_SetConfig+0xac>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00c      	beq.n	8006a0e <TIM_TI1_SetConfig+0x4a>
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	2380      	movs	r3, #128	@ 0x80
 80069f8:	05db      	lsls	r3, r3, #23
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d007      	beq.n	8006a0e <TIM_TI1_SetConfig+0x4a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a1c      	ldr	r2, [pc, #112]	@ (8006a74 <TIM_TI1_SetConfig+0xb0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d003      	beq.n	8006a0e <TIM_TI1_SetConfig+0x4a>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	@ (8006a78 <TIM_TI1_SetConfig+0xb4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d101      	bne.n	8006a12 <TIM_TI1_SetConfig+0x4e>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <TIM_TI1_SetConfig+0x50>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	4393      	bics	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e003      	b.n	8006a32 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	22f0      	movs	r2, #240	@ 0xf0
 8006a36:	4393      	bics	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	22ff      	movs	r2, #255	@ 0xff
 8006a40:	4013      	ands	r3, r2
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	4393      	bics	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	220a      	movs	r2, #10
 8006a54:	4013      	ands	r3, r2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	46c0      	nop			@ (mov r8, r8)
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b006      	add	sp, #24
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40014000 	.word	0x40014000

08006a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	2201      	movs	r2, #1
 8006a94:	4393      	bics	r3, r2
 8006a96:	001a      	movs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	22f0      	movs	r2, #240	@ 0xf0
 8006aa6:	4393      	bics	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	4393      	bics	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	621a      	str	r2, [r3, #32]
}
 8006ad0:	46c0      	nop			@ (mov r8, r8)
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b006      	add	sp, #24
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	2210      	movs	r2, #16
 8006af2:	4393      	bics	r3, r2
 8006af4:	001a      	movs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4a14      	ldr	r2, [pc, #80]	@ (8006b54 <TIM_TI2_SetConfig+0x7c>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4a10      	ldr	r2, [pc, #64]	@ (8006b58 <TIM_TI2_SetConfig+0x80>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	031b      	lsls	r3, r3, #12
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	22a0      	movs	r2, #160	@ 0xa0
 8006b2c:	4393      	bics	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	22a0      	movs	r2, #160	@ 0xa0
 8006b36:	4013      	ands	r3, r2
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b006      	add	sp, #24
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	46c0      	nop			@ (mov r8, r8)
 8006b54:	fffffcff 	.word	0xfffffcff
 8006b58:	ffff0fff 	.word	0xffff0fff

08006b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	2210      	movs	r2, #16
 8006b74:	4393      	bics	r3, r2
 8006b76:	001a      	movs	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4a0d      	ldr	r2, [pc, #52]	@ (8006bbc <TIM_TI2_ConfigInputStage+0x60>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	031b      	lsls	r3, r3, #12
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	22a0      	movs	r2, #160	@ 0xa0
 8006b98:	4393      	bics	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b006      	add	sp, #24
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	ffff0fff 	.word	0xffff0fff

08006bc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	4a17      	ldr	r2, [pc, #92]	@ (8006c38 <TIM_TI3_SetConfig+0x78>)
 8006bda:	401a      	ands	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4393      	bics	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	22f0      	movs	r2, #240	@ 0xf0
 8006bfa:	4393      	bics	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	22ff      	movs	r2, #255	@ 0xff
 8006c04:	4013      	ands	r3, r2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8006c3c <TIM_TI3_SetConfig+0x7c>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	23a0      	movs	r3, #160	@ 0xa0
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	621a      	str	r2, [r3, #32]
}
 8006c30:	46c0      	nop			@ (mov r8, r8)
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b006      	add	sp, #24
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	fffffeff 	.word	0xfffffeff
 8006c3c:	fffff5ff 	.word	0xfffff5ff

08006c40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	4a18      	ldr	r2, [pc, #96]	@ (8006cbc <TIM_TI4_SetConfig+0x7c>)
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4a15      	ldr	r2, [pc, #84]	@ (8006cc0 <TIM_TI4_SetConfig+0x80>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4a12      	ldr	r2, [pc, #72]	@ (8006cc4 <TIM_TI4_SetConfig+0x84>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	031b      	lsls	r3, r3, #12
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	0c1b      	lsrs	r3, r3, #16
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc8 <TIM_TI4_SetConfig+0x88>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	031a      	lsls	r2, r3, #12
 8006c9a:	23a0      	movs	r3, #160	@ 0xa0
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	46c0      	nop			@ (mov r8, r8)
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b006      	add	sp, #24
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			@ (mov r8, r8)
 8006cbc:	ffffefff 	.word	0xffffefff
 8006cc0:	fffffcff 	.word	0xfffffcff
 8006cc4:	ffff0fff 	.word	0xffff0fff
 8006cc8:	ffff5fff 	.word	0xffff5fff

08006ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	4a09      	ldr	r2, [pc, #36]	@ (8006d08 <TIM_ETR_SetConfig+0x3c>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	021a      	lsls	r2, r3, #8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	46c0      	nop			@ (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b006      	add	sp, #24
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	ffff00ff 	.word	0xffff00ff

08006d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	221f      	movs	r2, #31
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2201      	movs	r2, #1
 8006d20:	409a      	lsls	r2, r3
 8006d22:	0013      	movs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	43d2      	mvns	r2, r2
 8006d2e:	401a      	ands	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1a      	ldr	r2, [r3, #32]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	211f      	movs	r1, #31
 8006d3c:	400b      	ands	r3, r1
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4099      	lsls	r1, r3
 8006d42:	000b      	movs	r3, r1
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b006      	add	sp, #24
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	223c      	movs	r2, #60	@ 0x3c
 8006d62:	5c9b      	ldrb	r3, [r3, r2]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e055      	b.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	223c      	movs	r2, #60	@ 0x3c
 8006d70:	2101      	movs	r1, #1
 8006d72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	223d      	movs	r2, #61	@ 0x3d
 8006d78:	2102      	movs	r1, #2
 8006d7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a23      	ldr	r2, [pc, #140]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a22      	ldr	r2, [pc, #136]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2270      	movs	r2, #112	@ 0x70
 8006dac:	4393      	bics	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a16      	ldr	r2, [pc, #88]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00f      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	05db      	lsls	r3, r3, #23
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d009      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a12      	ldr	r2, [pc, #72]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a11      	ldr	r2, [pc, #68]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d10c      	bne.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2280      	movs	r2, #128	@ 0x80
 8006df0:	4393      	bics	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	223d      	movs	r2, #61	@ 0x3d
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	223c      	movs	r2, #60	@ 0x3c
 8006e12:	2100      	movs	r1, #0
 8006e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b004      	add	sp, #16
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	ff0fffff 	.word	0xff0fffff
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	223c      	movs	r2, #60	@ 0x3c
 8006e42:	5c9b      	ldrb	r3, [r3, r2]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e06f      	b.n	8006f2c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	223c      	movs	r2, #60	@ 0x3c
 8006e50:	2101      	movs	r1, #1
 8006e52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	22ff      	movs	r2, #255	@ 0xff
 8006e58:	4393      	bics	r3, r2
 8006e5a:	001a      	movs	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a33      	ldr	r2, [pc, #204]	@ (8006f34 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006e68:	401a      	ands	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a30      	ldr	r2, [pc, #192]	@ (8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006e76:	401a      	ands	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a2e      	ldr	r2, [pc, #184]	@ (8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006e84:	401a      	ands	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4a2b      	ldr	r2, [pc, #172]	@ (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e92:	401a      	ands	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a29      	ldr	r2, [pc, #164]	@ (8006f44 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a26      	ldr	r2, [pc, #152]	@ (8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006eae:	401a      	ands	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a24      	ldr	r2, [pc, #144]	@ (8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ebc:	401a      	ands	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a21      	ldr	r2, [pc, #132]	@ (8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ecc:	401a      	ands	r2, r3
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1e      	ldr	r2, [pc, #120]	@ (8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d11c      	bne.n	8006f1a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006ee4:	401a      	ands	r2, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	051b      	lsls	r3, r3, #20
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006ef4:	401a      	ands	r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4a17      	ldr	r2, [pc, #92]	@ (8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006f02:	401a      	ands	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	@ (8006f64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006f10:	401a      	ands	r2, r3
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	223c      	movs	r2, #60	@ 0x3c
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b004      	add	sp, #16
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	fffffcff 	.word	0xfffffcff
 8006f38:	fffffbff 	.word	0xfffffbff
 8006f3c:	fffff7ff 	.word	0xfffff7ff
 8006f40:	ffffefff 	.word	0xffffefff
 8006f44:	ffffdfff 	.word	0xffffdfff
 8006f48:	ffffbfff 	.word	0xffffbfff
 8006f4c:	fff0ffff 	.word	0xfff0ffff
 8006f50:	efffffff 	.word	0xefffffff
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	ff0fffff 	.word	0xff0fffff
 8006f5c:	feffffff 	.word	0xfeffffff
 8006f60:	fdffffff 	.word	0xfdffffff
 8006f64:	dfffffff 	.word	0xdfffffff

08006f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f70:	46c0      	nop			@ (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b002      	add	sp, #8
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f80:	46c0      	nop			@ (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b002      	add	sp, #8
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f90:	46c0      	nop			@ (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b002      	add	sp, #8
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e046      	b.n	8007038 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2288      	movs	r2, #136	@ 0x88
 8006fae:	589b      	ldr	r3, [r3, r2]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d107      	bne.n	8006fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2284      	movs	r2, #132	@ 0x84
 8006fb8:	2100      	movs	r1, #0
 8006fba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f7fa ff4c 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2288      	movs	r2, #136	@ 0x88
 8006fc8:	2124      	movs	r1, #36	@ 0x24
 8006fca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	438a      	bics	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f000 ff2e 	bl	8007e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 fc6c 	bl	80078cc <UART_SetConfig>
 8006ff4:	0003      	movs	r3, r0
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e01c      	b.n	8007038 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	490d      	ldr	r1, [pc, #52]	@ (8007040 <HAL_UART_Init+0xa8>)
 800700a:	400a      	ands	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	212a      	movs	r1, #42	@ 0x2a
 800701a:	438a      	bics	r2, r1
 800701c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2101      	movs	r1, #1
 800702a:	430a      	orrs	r2, r1
 800702c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	0018      	movs	r0, r3
 8007032:	f000 ffbd 	bl	8007fb0 <UART_CheckIdleState>
 8007036:	0003      	movs	r3, r0
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b002      	add	sp, #8
 800703e:	bd80      	pop	{r7, pc}
 8007040:	ffffb7ff 	.word	0xffffb7ff

08007044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	@ 0x28
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	1dbb      	adds	r3, r7, #6
 8007052:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2288      	movs	r2, #136	@ 0x88
 8007058:	589b      	ldr	r3, [r3, r2]
 800705a:	2b20      	cmp	r3, #32
 800705c:	d000      	beq.n	8007060 <HAL_UART_Transmit+0x1c>
 800705e:	e090      	b.n	8007182 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_UART_Transmit+0x2a>
 8007066:	1dbb      	adds	r3, r7, #6
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e088      	b.n	8007184 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	2380      	movs	r3, #128	@ 0x80
 8007078:	015b      	lsls	r3, r3, #5
 800707a:	429a      	cmp	r2, r3
 800707c:	d109      	bne.n	8007092 <HAL_UART_Transmit+0x4e>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2201      	movs	r2, #1
 800708a:	4013      	ands	r3, r2
 800708c:	d001      	beq.n	8007092 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e078      	b.n	8007184 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2290      	movs	r2, #144	@ 0x90
 8007096:	2100      	movs	r1, #0
 8007098:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2288      	movs	r2, #136	@ 0x88
 800709e:	2121      	movs	r1, #33	@ 0x21
 80070a0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070a2:	f7fb f8fd 	bl	80022a0 <HAL_GetTick>
 80070a6:	0003      	movs	r3, r0
 80070a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1dba      	adds	r2, r7, #6
 80070ae:	2154      	movs	r1, #84	@ 0x54
 80070b0:	8812      	ldrh	r2, [r2, #0]
 80070b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	1dba      	adds	r2, r7, #6
 80070b8:	2156      	movs	r1, #86	@ 0x56
 80070ba:	8812      	ldrh	r2, [r2, #0]
 80070bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	2380      	movs	r3, #128	@ 0x80
 80070c4:	015b      	lsls	r3, r3, #5
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d108      	bne.n	80070dc <HAL_UART_Transmit+0x98>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e003      	b.n	80070e4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070e4:	e030      	b.n	8007148 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	0013      	movs	r3, r2
 80070f0:	2200      	movs	r2, #0
 80070f2:	2180      	movs	r1, #128	@ 0x80
 80070f4:	f001 f806 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d005      	beq.n	8007108 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2288      	movs	r2, #136	@ 0x88
 8007100:	2120      	movs	r1, #32
 8007102:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e03d      	b.n	8007184 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	001a      	movs	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	05d2      	lsls	r2, r2, #23
 800711a:	0dd2      	lsrs	r2, r2, #23
 800711c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	3302      	adds	r3, #2
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	e007      	b.n	8007136 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2256      	movs	r2, #86	@ 0x56
 800713a:	5a9b      	ldrh	r3, [r3, r2]
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b299      	uxth	r1, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2256      	movs	r2, #86	@ 0x56
 8007146:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2256      	movs	r2, #86	@ 0x56
 800714c:	5a9b      	ldrh	r3, [r3, r2]
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1c8      	bne.n	80070e6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	0013      	movs	r3, r2
 800715e:	2200      	movs	r2, #0
 8007160:	2140      	movs	r1, #64	@ 0x40
 8007162:	f000 ffcf 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 8007166:	1e03      	subs	r3, r0, #0
 8007168:	d005      	beq.n	8007176 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2288      	movs	r2, #136	@ 0x88
 800716e:	2120      	movs	r1, #32
 8007170:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e006      	b.n	8007184 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2288      	movs	r2, #136	@ 0x88
 800717a:	2120      	movs	r1, #32
 800717c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	e000      	b.n	8007184 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007182:	2302      	movs	r3, #2
  }
}
 8007184:	0018      	movs	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	b008      	add	sp, #32
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	1dbb      	adds	r3, r7, #6
 8007198:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	228c      	movs	r2, #140	@ 0x8c
 800719e:	589b      	ldr	r3, [r3, r2]
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d14a      	bne.n	800723a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_UART_Receive_IT+0x26>
 80071aa:	1dbb      	adds	r3, r7, #6
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e042      	b.n	800723c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	2380      	movs	r3, #128	@ 0x80
 80071bc:	015b      	lsls	r3, r3, #5
 80071be:	429a      	cmp	r2, r3
 80071c0:	d109      	bne.n	80071d6 <HAL_UART_Receive_IT+0x4a>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2201      	movs	r2, #1
 80071ce:	4013      	ands	r3, r2
 80071d0:	d001      	beq.n	80071d6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e032      	b.n	800723c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a18      	ldr	r2, [pc, #96]	@ (8007244 <HAL_UART_Receive_IT+0xb8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d020      	beq.n	8007228 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	041b      	lsls	r3, r3, #16
 80071f0:	4013      	ands	r3, r2
 80071f2:	d019      	beq.n	8007228 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f4:	f3ef 8310 	mrs	r3, PRIMASK
 80071f8:	613b      	str	r3, [r7, #16]
  return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	2301      	movs	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	46c0      	nop			@ (mov r8, r8)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2180      	movs	r1, #128	@ 0x80
 8007216:	04c9      	lsls	r1, r1, #19
 8007218:	430a      	orrs	r2, r1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f383 8810 	msr	PRIMASK, r3
}
 8007226:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007228:	1dbb      	adds	r3, r7, #6
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	0018      	movs	r0, r3
 8007232:	f000 ffd7 	bl	80081e4 <UART_Start_Receive_IT>
 8007236:	0003      	movs	r3, r0
 8007238:	e000      	b.n	800723c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800723a:	2302      	movs	r3, #2
  }
}
 800723c:	0018      	movs	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	b008      	add	sp, #32
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40008000 	.word	0x40008000

08007248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007248:	b5b0      	push	{r4, r5, r7, lr}
 800724a:	b0aa      	sub	sp, #168	@ 0xa8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	22a4      	movs	r2, #164	@ 0xa4
 8007258:	18b9      	adds	r1, r7, r2
 800725a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	20a0      	movs	r0, #160	@ 0xa0
 8007264:	1839      	adds	r1, r7, r0
 8007266:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	249c      	movs	r4, #156	@ 0x9c
 8007270:	1939      	adds	r1, r7, r4
 8007272:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007274:	0011      	movs	r1, r2
 8007276:	18bb      	adds	r3, r7, r2
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4aa2      	ldr	r2, [pc, #648]	@ (8007504 <HAL_UART_IRQHandler+0x2bc>)
 800727c:	4013      	ands	r3, r2
 800727e:	2298      	movs	r2, #152	@ 0x98
 8007280:	18bd      	adds	r5, r7, r2
 8007282:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007284:	18bb      	adds	r3, r7, r2
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d11a      	bne.n	80072c2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800728c:	187b      	adds	r3, r7, r1
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2220      	movs	r2, #32
 8007292:	4013      	ands	r3, r2
 8007294:	d015      	beq.n	80072c2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007296:	183b      	adds	r3, r7, r0
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2220      	movs	r2, #32
 800729c:	4013      	ands	r3, r2
 800729e:	d105      	bne.n	80072ac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072a0:	193b      	adds	r3, r7, r4
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	2380      	movs	r3, #128	@ 0x80
 80072a6:	055b      	lsls	r3, r3, #21
 80072a8:	4013      	ands	r3, r2
 80072aa:	d00a      	beq.n	80072c2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d100      	bne.n	80072b6 <HAL_UART_IRQHandler+0x6e>
 80072b4:	e2dc      	b.n	8007870 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	0010      	movs	r0, r2
 80072be:	4798      	blx	r3
      }
      return;
 80072c0:	e2d6      	b.n	8007870 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072c2:	2398      	movs	r3, #152	@ 0x98
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d100      	bne.n	80072ce <HAL_UART_IRQHandler+0x86>
 80072cc:	e122      	b.n	8007514 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072ce:	239c      	movs	r3, #156	@ 0x9c
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a8c      	ldr	r2, [pc, #560]	@ (8007508 <HAL_UART_IRQHandler+0x2c0>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	d106      	bne.n	80072e8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072da:	23a0      	movs	r3, #160	@ 0xa0
 80072dc:	18fb      	adds	r3, r7, r3
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a8a      	ldr	r2, [pc, #552]	@ (800750c <HAL_UART_IRQHandler+0x2c4>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	d100      	bne.n	80072e8 <HAL_UART_IRQHandler+0xa0>
 80072e6:	e115      	b.n	8007514 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072e8:	23a4      	movs	r3, #164	@ 0xa4
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2201      	movs	r2, #1
 80072f0:	4013      	ands	r3, r2
 80072f2:	d012      	beq.n	800731a <HAL_UART_IRQHandler+0xd2>
 80072f4:	23a0      	movs	r3, #160	@ 0xa0
 80072f6:	18fb      	adds	r3, r7, r3
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	2380      	movs	r3, #128	@ 0x80
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4013      	ands	r3, r2
 8007300:	d00b      	beq.n	800731a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2201      	movs	r2, #1
 8007308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2290      	movs	r2, #144	@ 0x90
 800730e:	589b      	ldr	r3, [r3, r2]
 8007310:	2201      	movs	r2, #1
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2190      	movs	r1, #144	@ 0x90
 8007318:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800731a:	23a4      	movs	r3, #164	@ 0xa4
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2202      	movs	r2, #2
 8007322:	4013      	ands	r3, r2
 8007324:	d011      	beq.n	800734a <HAL_UART_IRQHandler+0x102>
 8007326:	239c      	movs	r3, #156	@ 0x9c
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2201      	movs	r2, #1
 800732e:	4013      	ands	r3, r2
 8007330:	d00b      	beq.n	800734a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2202      	movs	r2, #2
 8007338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2290      	movs	r2, #144	@ 0x90
 800733e:	589b      	ldr	r3, [r3, r2]
 8007340:	2204      	movs	r2, #4
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2190      	movs	r1, #144	@ 0x90
 8007348:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800734a:	23a4      	movs	r3, #164	@ 0xa4
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2204      	movs	r2, #4
 8007352:	4013      	ands	r3, r2
 8007354:	d011      	beq.n	800737a <HAL_UART_IRQHandler+0x132>
 8007356:	239c      	movs	r3, #156	@ 0x9c
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2201      	movs	r2, #1
 800735e:	4013      	ands	r3, r2
 8007360:	d00b      	beq.n	800737a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2204      	movs	r2, #4
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2290      	movs	r2, #144	@ 0x90
 800736e:	589b      	ldr	r3, [r3, r2]
 8007370:	2202      	movs	r2, #2
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2190      	movs	r1, #144	@ 0x90
 8007378:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800737a:	23a4      	movs	r3, #164	@ 0xa4
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2208      	movs	r2, #8
 8007382:	4013      	ands	r3, r2
 8007384:	d017      	beq.n	80073b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007386:	23a0      	movs	r3, #160	@ 0xa0
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2220      	movs	r2, #32
 800738e:	4013      	ands	r3, r2
 8007390:	d105      	bne.n	800739e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007392:	239c      	movs	r3, #156	@ 0x9c
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a5b      	ldr	r2, [pc, #364]	@ (8007508 <HAL_UART_IRQHandler+0x2c0>)
 800739a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800739c:	d00b      	beq.n	80073b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2208      	movs	r2, #8
 80073a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2290      	movs	r2, #144	@ 0x90
 80073aa:	589b      	ldr	r3, [r3, r2]
 80073ac:	2208      	movs	r2, #8
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2190      	movs	r1, #144	@ 0x90
 80073b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073b6:	23a4      	movs	r3, #164	@ 0xa4
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	2380      	movs	r3, #128	@ 0x80
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	4013      	ands	r3, r2
 80073c2:	d013      	beq.n	80073ec <HAL_UART_IRQHandler+0x1a4>
 80073c4:	23a0      	movs	r3, #160	@ 0xa0
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	2380      	movs	r3, #128	@ 0x80
 80073cc:	04db      	lsls	r3, r3, #19
 80073ce:	4013      	ands	r3, r2
 80073d0:	d00c      	beq.n	80073ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2280      	movs	r2, #128	@ 0x80
 80073d8:	0112      	lsls	r2, r2, #4
 80073da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2290      	movs	r2, #144	@ 0x90
 80073e0:	589b      	ldr	r3, [r3, r2]
 80073e2:	2220      	movs	r2, #32
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2190      	movs	r1, #144	@ 0x90
 80073ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2290      	movs	r2, #144	@ 0x90
 80073f0:	589b      	ldr	r3, [r3, r2]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d100      	bne.n	80073f8 <HAL_UART_IRQHandler+0x1b0>
 80073f6:	e23d      	b.n	8007874 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073f8:	23a4      	movs	r3, #164	@ 0xa4
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2220      	movs	r2, #32
 8007400:	4013      	ands	r3, r2
 8007402:	d015      	beq.n	8007430 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007404:	23a0      	movs	r3, #160	@ 0xa0
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2220      	movs	r2, #32
 800740c:	4013      	ands	r3, r2
 800740e:	d106      	bne.n	800741e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007410:	239c      	movs	r3, #156	@ 0x9c
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	2380      	movs	r3, #128	@ 0x80
 8007418:	055b      	lsls	r3, r3, #21
 800741a:	4013      	ands	r3, r2
 800741c:	d008      	beq.n	8007430 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	0010      	movs	r0, r2
 800742e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2290      	movs	r2, #144	@ 0x90
 8007434:	589b      	ldr	r3, [r3, r2]
 8007436:	2194      	movs	r1, #148	@ 0x94
 8007438:	187a      	adds	r2, r7, r1
 800743a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2240      	movs	r2, #64	@ 0x40
 8007444:	4013      	ands	r3, r2
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d004      	beq.n	8007454 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800744a:	187b      	adds	r3, r7, r1
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2228      	movs	r2, #40	@ 0x28
 8007450:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007452:	d04c      	beq.n	80074ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	0018      	movs	r0, r3
 8007458:	f000 ffe8 	bl	800842c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2240      	movs	r2, #64	@ 0x40
 8007464:	4013      	ands	r3, r2
 8007466:	2b40      	cmp	r3, #64	@ 0x40
 8007468:	d13c      	bne.n	80074e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746a:	f3ef 8310 	mrs	r3, PRIMASK
 800746e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8007470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007472:	2090      	movs	r0, #144	@ 0x90
 8007474:	183a      	adds	r2, r7, r0
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	2301      	movs	r3, #1
 800747a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800747e:	f383 8810 	msr	PRIMASK, r3
}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2140      	movs	r1, #64	@ 0x40
 8007490:	438a      	bics	r2, r1
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	183b      	adds	r3, r7, r0
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800749c:	f383 8810 	msr	PRIMASK, r3
}
 80074a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2280      	movs	r2, #128	@ 0x80
 80074a6:	589b      	ldr	r3, [r3, r2]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d016      	beq.n	80074da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	@ 0x80
 80074b0:	589b      	ldr	r3, [r3, r2]
 80074b2:	4a17      	ldr	r2, [pc, #92]	@ (8007510 <HAL_UART_IRQHandler+0x2c8>)
 80074b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2280      	movs	r2, #128	@ 0x80
 80074ba:	589b      	ldr	r3, [r3, r2]
 80074bc:	0018      	movs	r0, r3
 80074be:	f7fc fdd9 	bl	8004074 <HAL_DMA_Abort_IT>
 80074c2:	1e03      	subs	r3, r0, #0
 80074c4:	d01c      	beq.n	8007500 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2280      	movs	r2, #128	@ 0x80
 80074ca:	589b      	ldr	r3, [r3, r2]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	2180      	movs	r1, #128	@ 0x80
 80074d2:	5852      	ldr	r2, [r2, r1]
 80074d4:	0010      	movs	r0, r2
 80074d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	e012      	b.n	8007500 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f000 f9e1 	bl	80078a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e2:	e00d      	b.n	8007500 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	0018      	movs	r0, r3
 80074e8:	f000 f9dc 	bl	80078a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e008      	b.n	8007500 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	0018      	movs	r0, r3
 80074f2:	f000 f9d7 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2290      	movs	r2, #144	@ 0x90
 80074fa:	2100      	movs	r1, #0
 80074fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80074fe:	e1b9      	b.n	8007874 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007500:	46c0      	nop			@ (mov r8, r8)
    return;
 8007502:	e1b7      	b.n	8007874 <HAL_UART_IRQHandler+0x62c>
 8007504:	0000080f 	.word	0x0000080f
 8007508:	10000001 	.word	0x10000001
 800750c:	04000120 	.word	0x04000120
 8007510:	080084f9 	.word	0x080084f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d000      	beq.n	800751e <HAL_UART_IRQHandler+0x2d6>
 800751c:	e13e      	b.n	800779c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800751e:	23a4      	movs	r3, #164	@ 0xa4
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2210      	movs	r2, #16
 8007526:	4013      	ands	r3, r2
 8007528:	d100      	bne.n	800752c <HAL_UART_IRQHandler+0x2e4>
 800752a:	e137      	b.n	800779c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800752c:	23a0      	movs	r3, #160	@ 0xa0
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2210      	movs	r2, #16
 8007534:	4013      	ands	r3, r2
 8007536:	d100      	bne.n	800753a <HAL_UART_IRQHandler+0x2f2>
 8007538:	e130      	b.n	800779c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2210      	movs	r2, #16
 8007540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2240      	movs	r2, #64	@ 0x40
 800754a:	4013      	ands	r3, r2
 800754c:	2b40      	cmp	r3, #64	@ 0x40
 800754e:	d000      	beq.n	8007552 <HAL_UART_IRQHandler+0x30a>
 8007550:	e0a4      	b.n	800769c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2280      	movs	r2, #128	@ 0x80
 8007556:	589b      	ldr	r3, [r3, r2]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	217e      	movs	r1, #126	@ 0x7e
 800755e:	187b      	adds	r3, r7, r1
 8007560:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007562:	187b      	adds	r3, r7, r1
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d100      	bne.n	800756c <HAL_UART_IRQHandler+0x324>
 800756a:	e185      	b.n	8007878 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	225c      	movs	r2, #92	@ 0x5c
 8007570:	5a9b      	ldrh	r3, [r3, r2]
 8007572:	187a      	adds	r2, r7, r1
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d300      	bcc.n	800757c <HAL_UART_IRQHandler+0x334>
 800757a:	e17d      	b.n	8007878 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	187a      	adds	r2, r7, r1
 8007580:	215e      	movs	r1, #94	@ 0x5e
 8007582:	8812      	ldrh	r2, [r2, #0]
 8007584:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2280      	movs	r2, #128	@ 0x80
 800758a:	589b      	ldr	r3, [r3, r2]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2220      	movs	r2, #32
 8007592:	4013      	ands	r3, r2
 8007594:	d170      	bne.n	8007678 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007596:	f3ef 8310 	mrs	r3, PRIMASK
 800759a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800759e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075a0:	2301      	movs	r3, #1
 80075a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a6:	f383 8810 	msr	PRIMASK, r3
}
 80075aa:	46c0      	nop			@ (mov r8, r8)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	49b4      	ldr	r1, [pc, #720]	@ (8007888 <HAL_UART_IRQHandler+0x640>)
 80075b8:	400a      	ands	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c8:	f3ef 8310 	mrs	r3, PRIMASK
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80075ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80075d2:	2301      	movs	r3, #1
 80075d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d8:	f383 8810 	msr	PRIMASK, r3
}
 80075dc:	46c0      	nop			@ (mov r8, r8)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2101      	movs	r1, #1
 80075ea:	438a      	bics	r2, r1
 80075ec:	609a      	str	r2, [r3, #8]
 80075ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075f4:	f383 8810 	msr	PRIMASK, r3
}
 80075f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fa:	f3ef 8310 	mrs	r3, PRIMASK
 80075fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007602:	673b      	str	r3, [r7, #112]	@ 0x70
 8007604:	2301      	movs	r3, #1
 8007606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800760a:	f383 8810 	msr	PRIMASK, r3
}
 800760e:	46c0      	nop			@ (mov r8, r8)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2140      	movs	r1, #64	@ 0x40
 800761c:	438a      	bics	r2, r1
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007622:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007626:	f383 8810 	msr	PRIMASK, r3
}
 800762a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	228c      	movs	r2, #140	@ 0x8c
 8007630:	2120      	movs	r1, #32
 8007632:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763a:	f3ef 8310 	mrs	r3, PRIMASK
 800763e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8007640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007642:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007644:	2301      	movs	r3, #1
 8007646:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800764a:	f383 8810 	msr	PRIMASK, r3
}
 800764e:	46c0      	nop			@ (mov r8, r8)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2110      	movs	r1, #16
 800765c:	438a      	bics	r2, r1
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007662:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007666:	f383 8810 	msr	PRIMASK, r3
}
 800766a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2280      	movs	r2, #128	@ 0x80
 8007670:	589b      	ldr	r3, [r3, r2]
 8007672:	0018      	movs	r0, r3
 8007674:	f7fc fc9c 	bl	8003fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	225c      	movs	r2, #92	@ 0x5c
 8007682:	5a9a      	ldrh	r2, [r3, r2]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	215e      	movs	r1, #94	@ 0x5e
 8007688:	5a5b      	ldrh	r3, [r3, r1]
 800768a:	b29b      	uxth	r3, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	b29a      	uxth	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	0011      	movs	r1, r2
 8007694:	0018      	movs	r0, r3
 8007696:	f000 f90d 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800769a:	e0ed      	b.n	8007878 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	225c      	movs	r2, #92	@ 0x5c
 80076a0:	5a99      	ldrh	r1, [r3, r2]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	225e      	movs	r2, #94	@ 0x5e
 80076a6:	5a9b      	ldrh	r3, [r3, r2]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	208e      	movs	r0, #142	@ 0x8e
 80076ac:	183b      	adds	r3, r7, r0
 80076ae:	1a8a      	subs	r2, r1, r2
 80076b0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	225e      	movs	r2, #94	@ 0x5e
 80076b6:	5a9b      	ldrh	r3, [r3, r2]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d100      	bne.n	80076c0 <HAL_UART_IRQHandler+0x478>
 80076be:	e0dd      	b.n	800787c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80076c0:	183b      	adds	r3, r7, r0
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d100      	bne.n	80076ca <HAL_UART_IRQHandler+0x482>
 80076c8:	e0d8      	b.n	800787c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ca:	f3ef 8310 	mrs	r3, PRIMASK
 80076ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d2:	2488      	movs	r4, #136	@ 0x88
 80076d4:	193a      	adds	r2, r7, r4
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	2301      	movs	r3, #1
 80076da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f383 8810 	msr	PRIMASK, r3
}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4967      	ldr	r1, [pc, #412]	@ (800788c <HAL_UART_IRQHandler+0x644>)
 80076f0:	400a      	ands	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	193b      	adds	r3, r7, r4
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f383 8810 	msr	PRIMASK, r3
}
 8007700:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007702:	f3ef 8310 	mrs	r3, PRIMASK
 8007706:	61bb      	str	r3, [r7, #24]
  return(result);
 8007708:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800770a:	2484      	movs	r4, #132	@ 0x84
 800770c:	193a      	adds	r2, r7, r4
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	2301      	movs	r3, #1
 8007712:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f383 8810 	msr	PRIMASK, r3
}
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	495a      	ldr	r1, [pc, #360]	@ (8007890 <HAL_UART_IRQHandler+0x648>)
 8007728:	400a      	ands	r2, r1
 800772a:	609a      	str	r2, [r3, #8]
 800772c:	193b      	adds	r3, r7, r4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	f383 8810 	msr	PRIMASK, r3
}
 8007738:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	228c      	movs	r2, #140	@ 0x8c
 800773e:	2120      	movs	r1, #32
 8007740:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774e:	f3ef 8310 	mrs	r3, PRIMASK
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007756:	2480      	movs	r4, #128	@ 0x80
 8007758:	193a      	adds	r2, r7, r4
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	2301      	movs	r3, #1
 800775e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	f383 8810 	msr	PRIMASK, r3
}
 8007766:	46c0      	nop			@ (mov r8, r8)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2110      	movs	r1, #16
 8007774:	438a      	bics	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	193b      	adds	r3, r7, r4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007780:	f383 8810 	msr	PRIMASK, r3
}
 8007784:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800778c:	183b      	adds	r3, r7, r0
 800778e:	881a      	ldrh	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	0011      	movs	r1, r2
 8007794:	0018      	movs	r0, r3
 8007796:	f000 f88d 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800779a:	e06f      	b.n	800787c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800779c:	23a4      	movs	r3, #164	@ 0xa4
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	2380      	movs	r3, #128	@ 0x80
 80077a4:	035b      	lsls	r3, r3, #13
 80077a6:	4013      	ands	r3, r2
 80077a8:	d010      	beq.n	80077cc <HAL_UART_IRQHandler+0x584>
 80077aa:	239c      	movs	r3, #156	@ 0x9c
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	2380      	movs	r3, #128	@ 0x80
 80077b2:	03db      	lsls	r3, r3, #15
 80077b4:	4013      	ands	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2280      	movs	r2, #128	@ 0x80
 80077be:	0352      	lsls	r2, r2, #13
 80077c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0018      	movs	r0, r3
 80077c6:	f001 fbeb 	bl	8008fa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077ca:	e05a      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80077cc:	23a4      	movs	r3, #164	@ 0xa4
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2280      	movs	r2, #128	@ 0x80
 80077d4:	4013      	ands	r3, r2
 80077d6:	d016      	beq.n	8007806 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077d8:	23a0      	movs	r3, #160	@ 0xa0
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2280      	movs	r2, #128	@ 0x80
 80077e0:	4013      	ands	r3, r2
 80077e2:	d106      	bne.n	80077f2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077e4:	239c      	movs	r3, #156	@ 0x9c
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	2380      	movs	r3, #128	@ 0x80
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	4013      	ands	r3, r2
 80077f0:	d009      	beq.n	8007806 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d042      	beq.n	8007880 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	0010      	movs	r0, r2
 8007802:	4798      	blx	r3
    }
    return;
 8007804:	e03c      	b.n	8007880 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007806:	23a4      	movs	r3, #164	@ 0xa4
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2240      	movs	r2, #64	@ 0x40
 800780e:	4013      	ands	r3, r2
 8007810:	d00a      	beq.n	8007828 <HAL_UART_IRQHandler+0x5e0>
 8007812:	23a0      	movs	r3, #160	@ 0xa0
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2240      	movs	r2, #64	@ 0x40
 800781a:	4013      	ands	r3, r2
 800781c:	d004      	beq.n	8007828 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	0018      	movs	r0, r3
 8007822:	f000 fe80 	bl	8008526 <UART_EndTransmit_IT>
    return;
 8007826:	e02c      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007828:	23a4      	movs	r3, #164	@ 0xa4
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	2380      	movs	r3, #128	@ 0x80
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	4013      	ands	r3, r2
 8007834:	d00b      	beq.n	800784e <HAL_UART_IRQHandler+0x606>
 8007836:	23a0      	movs	r3, #160	@ 0xa0
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	05db      	lsls	r3, r3, #23
 8007840:	4013      	ands	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	0018      	movs	r0, r3
 8007848:	f001 fbba 	bl	8008fc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800784c:	e019      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800784e:	23a4      	movs	r3, #164	@ 0xa4
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	2380      	movs	r3, #128	@ 0x80
 8007856:	045b      	lsls	r3, r3, #17
 8007858:	4013      	ands	r3, r2
 800785a:	d012      	beq.n	8007882 <HAL_UART_IRQHandler+0x63a>
 800785c:	23a0      	movs	r3, #160	@ 0xa0
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	da0d      	bge.n	8007882 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	0018      	movs	r0, r3
 800786a:	f001 fba1 	bl	8008fb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800786e:	e008      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
      return;
 8007870:	46c0      	nop			@ (mov r8, r8)
 8007872:	e006      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
    return;
 8007874:	46c0      	nop			@ (mov r8, r8)
 8007876:	e004      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
      return;
 8007878:	46c0      	nop			@ (mov r8, r8)
 800787a:	e002      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
      return;
 800787c:	46c0      	nop			@ (mov r8, r8)
 800787e:	e000      	b.n	8007882 <HAL_UART_IRQHandler+0x63a>
    return;
 8007880:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007882:	46bd      	mov	sp, r7
 8007884:	b02a      	add	sp, #168	@ 0xa8
 8007886:	bdb0      	pop	{r4, r5, r7, pc}
 8007888:	fffffeff 	.word	0xfffffeff
 800788c:	fffffedf 	.word	0xfffffedf
 8007890:	effffffe 	.word	0xeffffffe

08007894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800789c:	46c0      	nop			@ (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b002      	add	sp, #8
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078ac:	46c0      	nop			@ (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b002      	add	sp, #8
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	000a      	movs	r2, r1
 80078be:	1cbb      	adds	r3, r7, #2
 80078c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078c2:	46c0      	nop			@ (mov r8, r8)
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b002      	add	sp, #8
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078cc:	b5b0      	push	{r4, r5, r7, lr}
 80078ce:	b090      	sub	sp, #64	@ 0x40
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078d4:	231a      	movs	r3, #26
 80078d6:	2220      	movs	r2, #32
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	19db      	adds	r3, r3, r7
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	431a      	orrs	r2, r3
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	431a      	orrs	r2, r3
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4aaf      	ldr	r2, [pc, #700]	@ (8007bbc <UART_SetConfig+0x2f0>)
 8007900:	4013      	ands	r3, r2
 8007902:	0019      	movs	r1, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800790a:	430b      	orrs	r3, r1
 800790c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4aaa      	ldr	r2, [pc, #680]	@ (8007bc0 <UART_SetConfig+0x2f4>)
 8007916:	4013      	ands	r3, r2
 8007918:	0018      	movs	r0, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	68d9      	ldr	r1, [r3, #12]
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	0003      	movs	r3, r0
 8007924:	430b      	orrs	r3, r1
 8007926:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4aa4      	ldr	r2, [pc, #656]	@ (8007bc4 <UART_SetConfig+0x2f8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800793e:	4313      	orrs	r3, r2
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	4a9f      	ldr	r2, [pc, #636]	@ (8007bc8 <UART_SetConfig+0x2fc>)
 800794a:	4013      	ands	r3, r2
 800794c:	0019      	movs	r1, r3
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007954:	430b      	orrs	r3, r1
 8007956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	220f      	movs	r2, #15
 8007960:	4393      	bics	r3, r2
 8007962:	0018      	movs	r0, r3
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	0003      	movs	r3, r0
 800796e:	430b      	orrs	r3, r1
 8007970:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a95      	ldr	r2, [pc, #596]	@ (8007bcc <UART_SetConfig+0x300>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d131      	bne.n	80079e0 <UART_SetConfig+0x114>
 800797c:	4b94      	ldr	r3, [pc, #592]	@ (8007bd0 <UART_SetConfig+0x304>)
 800797e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007980:	2203      	movs	r2, #3
 8007982:	4013      	ands	r3, r2
 8007984:	2b03      	cmp	r3, #3
 8007986:	d01d      	beq.n	80079c4 <UART_SetConfig+0xf8>
 8007988:	d823      	bhi.n	80079d2 <UART_SetConfig+0x106>
 800798a:	2b02      	cmp	r3, #2
 800798c:	d00c      	beq.n	80079a8 <UART_SetConfig+0xdc>
 800798e:	d820      	bhi.n	80079d2 <UART_SetConfig+0x106>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <UART_SetConfig+0xce>
 8007994:	2b01      	cmp	r3, #1
 8007996:	d00e      	beq.n	80079b6 <UART_SetConfig+0xea>
 8007998:	e01b      	b.n	80079d2 <UART_SetConfig+0x106>
 800799a:	231b      	movs	r3, #27
 800799c:	2220      	movs	r2, #32
 800799e:	189b      	adds	r3, r3, r2
 80079a0:	19db      	adds	r3, r3, r7
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	e0b4      	b.n	8007b12 <UART_SetConfig+0x246>
 80079a8:	231b      	movs	r3, #27
 80079aa:	2220      	movs	r2, #32
 80079ac:	189b      	adds	r3, r3, r2
 80079ae:	19db      	adds	r3, r3, r7
 80079b0:	2202      	movs	r2, #2
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e0ad      	b.n	8007b12 <UART_SetConfig+0x246>
 80079b6:	231b      	movs	r3, #27
 80079b8:	2220      	movs	r2, #32
 80079ba:	189b      	adds	r3, r3, r2
 80079bc:	19db      	adds	r3, r3, r7
 80079be:	2204      	movs	r2, #4
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	e0a6      	b.n	8007b12 <UART_SetConfig+0x246>
 80079c4:	231b      	movs	r3, #27
 80079c6:	2220      	movs	r2, #32
 80079c8:	189b      	adds	r3, r3, r2
 80079ca:	19db      	adds	r3, r3, r7
 80079cc:	2208      	movs	r2, #8
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	e09f      	b.n	8007b12 <UART_SetConfig+0x246>
 80079d2:	231b      	movs	r3, #27
 80079d4:	2220      	movs	r2, #32
 80079d6:	189b      	adds	r3, r3, r2
 80079d8:	19db      	adds	r3, r3, r7
 80079da:	2210      	movs	r2, #16
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e098      	b.n	8007b12 <UART_SetConfig+0x246>
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a7b      	ldr	r2, [pc, #492]	@ (8007bd4 <UART_SetConfig+0x308>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d131      	bne.n	8007a4e <UART_SetConfig+0x182>
 80079ea:	4b79      	ldr	r3, [pc, #484]	@ (8007bd0 <UART_SetConfig+0x304>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	220c      	movs	r2, #12
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b0c      	cmp	r3, #12
 80079f4:	d01d      	beq.n	8007a32 <UART_SetConfig+0x166>
 80079f6:	d823      	bhi.n	8007a40 <UART_SetConfig+0x174>
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d00c      	beq.n	8007a16 <UART_SetConfig+0x14a>
 80079fc:	d820      	bhi.n	8007a40 <UART_SetConfig+0x174>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <UART_SetConfig+0x13c>
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d00e      	beq.n	8007a24 <UART_SetConfig+0x158>
 8007a06:	e01b      	b.n	8007a40 <UART_SetConfig+0x174>
 8007a08:	231b      	movs	r3, #27
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	189b      	adds	r3, r3, r2
 8007a0e:	19db      	adds	r3, r3, r7
 8007a10:	2200      	movs	r2, #0
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	e07d      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a16:	231b      	movs	r3, #27
 8007a18:	2220      	movs	r2, #32
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	19db      	adds	r3, r3, r7
 8007a1e:	2202      	movs	r2, #2
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e076      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a24:	231b      	movs	r3, #27
 8007a26:	2220      	movs	r2, #32
 8007a28:	189b      	adds	r3, r3, r2
 8007a2a:	19db      	adds	r3, r3, r7
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e06f      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a32:	231b      	movs	r3, #27
 8007a34:	2220      	movs	r2, #32
 8007a36:	189b      	adds	r3, r3, r2
 8007a38:	19db      	adds	r3, r3, r7
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	e068      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a40:	231b      	movs	r3, #27
 8007a42:	2220      	movs	r2, #32
 8007a44:	189b      	adds	r3, r3, r2
 8007a46:	19db      	adds	r3, r3, r7
 8007a48:	2210      	movs	r2, #16
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e061      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a61      	ldr	r2, [pc, #388]	@ (8007bd8 <UART_SetConfig+0x30c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d106      	bne.n	8007a66 <UART_SetConfig+0x19a>
 8007a58:	231b      	movs	r3, #27
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	189b      	adds	r3, r3, r2
 8007a5e:	19db      	adds	r3, r3, r7
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e055      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8007bdc <UART_SetConfig+0x310>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d106      	bne.n	8007a7e <UART_SetConfig+0x1b2>
 8007a70:	231b      	movs	r3, #27
 8007a72:	2220      	movs	r2, #32
 8007a74:	189b      	adds	r3, r3, r2
 8007a76:	19db      	adds	r3, r3, r7
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e049      	b.n	8007b12 <UART_SetConfig+0x246>
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a50      	ldr	r2, [pc, #320]	@ (8007bc4 <UART_SetConfig+0x2f8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d13e      	bne.n	8007b06 <UART_SetConfig+0x23a>
 8007a88:	4b51      	ldr	r3, [pc, #324]	@ (8007bd0 <UART_SetConfig+0x304>)
 8007a8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a8c:	23c0      	movs	r3, #192	@ 0xc0
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	4013      	ands	r3, r2
 8007a92:	22c0      	movs	r2, #192	@ 0xc0
 8007a94:	0112      	lsls	r2, r2, #4
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d027      	beq.n	8007aea <UART_SetConfig+0x21e>
 8007a9a:	22c0      	movs	r2, #192	@ 0xc0
 8007a9c:	0112      	lsls	r2, r2, #4
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d82a      	bhi.n	8007af8 <UART_SetConfig+0x22c>
 8007aa2:	2280      	movs	r2, #128	@ 0x80
 8007aa4:	0112      	lsls	r2, r2, #4
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d011      	beq.n	8007ace <UART_SetConfig+0x202>
 8007aaa:	2280      	movs	r2, #128	@ 0x80
 8007aac:	0112      	lsls	r2, r2, #4
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d822      	bhi.n	8007af8 <UART_SetConfig+0x22c>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <UART_SetConfig+0x1f4>
 8007ab6:	2280      	movs	r2, #128	@ 0x80
 8007ab8:	00d2      	lsls	r2, r2, #3
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00e      	beq.n	8007adc <UART_SetConfig+0x210>
 8007abe:	e01b      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007ac0:	231b      	movs	r3, #27
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	189b      	adds	r3, r3, r2
 8007ac6:	19db      	adds	r3, r3, r7
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e021      	b.n	8007b12 <UART_SetConfig+0x246>
 8007ace:	231b      	movs	r3, #27
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	189b      	adds	r3, r3, r2
 8007ad4:	19db      	adds	r3, r3, r7
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e01a      	b.n	8007b12 <UART_SetConfig+0x246>
 8007adc:	231b      	movs	r3, #27
 8007ade:	2220      	movs	r2, #32
 8007ae0:	189b      	adds	r3, r3, r2
 8007ae2:	19db      	adds	r3, r3, r7
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e013      	b.n	8007b12 <UART_SetConfig+0x246>
 8007aea:	231b      	movs	r3, #27
 8007aec:	2220      	movs	r2, #32
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	19db      	adds	r3, r3, r7
 8007af2:	2208      	movs	r2, #8
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e00c      	b.n	8007b12 <UART_SetConfig+0x246>
 8007af8:	231b      	movs	r3, #27
 8007afa:	2220      	movs	r2, #32
 8007afc:	189b      	adds	r3, r3, r2
 8007afe:	19db      	adds	r3, r3, r7
 8007b00:	2210      	movs	r2, #16
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e005      	b.n	8007b12 <UART_SetConfig+0x246>
 8007b06:	231b      	movs	r3, #27
 8007b08:	2220      	movs	r2, #32
 8007b0a:	189b      	adds	r3, r3, r2
 8007b0c:	19db      	adds	r3, r3, r7
 8007b0e:	2210      	movs	r2, #16
 8007b10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a2b      	ldr	r2, [pc, #172]	@ (8007bc4 <UART_SetConfig+0x2f8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d000      	beq.n	8007b1e <UART_SetConfig+0x252>
 8007b1c:	e0a9      	b.n	8007c72 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b1e:	231b      	movs	r3, #27
 8007b20:	2220      	movs	r2, #32
 8007b22:	189b      	adds	r3, r3, r2
 8007b24:	19db      	adds	r3, r3, r7
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d015      	beq.n	8007b58 <UART_SetConfig+0x28c>
 8007b2c:	dc18      	bgt.n	8007b60 <UART_SetConfig+0x294>
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d00d      	beq.n	8007b4e <UART_SetConfig+0x282>
 8007b32:	dc15      	bgt.n	8007b60 <UART_SetConfig+0x294>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <UART_SetConfig+0x272>
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d005      	beq.n	8007b48 <UART_SetConfig+0x27c>
 8007b3c:	e010      	b.n	8007b60 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3e:	f7fd faf9 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007b42:	0003      	movs	r3, r0
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b46:	e014      	b.n	8007b72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b48:	4b25      	ldr	r3, [pc, #148]	@ (8007be0 <UART_SetConfig+0x314>)
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b4c:	e011      	b.n	8007b72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4e:	f7fd fa65 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8007b52:	0003      	movs	r3, r0
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b56:	e00c      	b.n	8007b72 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b58:	2380      	movs	r3, #128	@ 0x80
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b5e:	e008      	b.n	8007b72 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007b64:	231a      	movs	r3, #26
 8007b66:	2220      	movs	r2, #32
 8007b68:	189b      	adds	r3, r3, r2
 8007b6a:	19db      	adds	r3, r3, r7
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	701a      	strb	r2, [r3, #0]
        break;
 8007b70:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d100      	bne.n	8007b7a <UART_SetConfig+0x2ae>
 8007b78:	e14b      	b.n	8007e12 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b7e:	4b19      	ldr	r3, [pc, #100]	@ (8007be4 <UART_SetConfig+0x318>)
 8007b80:	0052      	lsls	r2, r2, #1
 8007b82:	5ad3      	ldrh	r3, [r2, r3]
 8007b84:	0019      	movs	r1, r3
 8007b86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007b88:	f7f8 face 	bl	8000128 <__udivsi3>
 8007b8c:	0003      	movs	r3, r0
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	0013      	movs	r3, r2
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	189b      	adds	r3, r3, r2
 8007b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d305      	bcc.n	8007bac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d91d      	bls.n	8007be8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007bac:	231a      	movs	r3, #26
 8007bae:	2220      	movs	r2, #32
 8007bb0:	189b      	adds	r3, r3, r2
 8007bb2:	19db      	adds	r3, r3, r7
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e12b      	b.n	8007e12 <UART_SetConfig+0x546>
 8007bba:	46c0      	nop			@ (mov r8, r8)
 8007bbc:	cfff69f3 	.word	0xcfff69f3
 8007bc0:	ffffcfff 	.word	0xffffcfff
 8007bc4:	40008000 	.word	0x40008000
 8007bc8:	11fff4ff 	.word	0x11fff4ff
 8007bcc:	40013800 	.word	0x40013800
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	40004400 	.word	0x40004400
 8007bd8:	40004800 	.word	0x40004800
 8007bdc:	40004c00 	.word	0x40004c00
 8007be0:	00f42400 	.word	0x00f42400
 8007be4:	08009eb4 	.word	0x08009eb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	2300      	movs	r3, #0
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bf4:	4b92      	ldr	r3, [pc, #584]	@ (8007e40 <UART_SetConfig+0x574>)
 8007bf6:	0052      	lsls	r2, r2, #1
 8007bf8:	5ad3      	ldrh	r3, [r2, r3]
 8007bfa:	613b      	str	r3, [r7, #16]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	69b8      	ldr	r0, [r7, #24]
 8007c06:	69f9      	ldr	r1, [r7, #28]
 8007c08:	f7f8 fc04 	bl	8000414 <__aeabi_uldivmod>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	000b      	movs	r3, r1
 8007c10:	0e11      	lsrs	r1, r2, #24
 8007c12:	021d      	lsls	r5, r3, #8
 8007c14:	430d      	orrs	r5, r1
 8007c16:	0214      	lsls	r4, r2, #8
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	085b      	lsrs	r3, r3, #1
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68b8      	ldr	r0, [r7, #8]
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	1900      	adds	r0, r0, r4
 8007c2a:	4169      	adcs	r1, r5
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f7f8 fbeb 	bl	8000414 <__aeabi_uldivmod>
 8007c3e:	0002      	movs	r2, r0
 8007c40:	000b      	movs	r3, r1
 8007c42:	0013      	movs	r3, r2
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c48:	23c0      	movs	r3, #192	@ 0xc0
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d309      	bcc.n	8007c64 <UART_SetConfig+0x398>
 8007c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c52:	2380      	movs	r3, #128	@ 0x80
 8007c54:	035b      	lsls	r3, r3, #13
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d204      	bcs.n	8007c64 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	e0d6      	b.n	8007e12 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007c64:	231a      	movs	r3, #26
 8007c66:	2220      	movs	r2, #32
 8007c68:	189b      	adds	r3, r3, r2
 8007c6a:	19db      	adds	r3, r3, r7
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	e0cf      	b.n	8007e12 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	69da      	ldr	r2, [r3, #28]
 8007c76:	2380      	movs	r3, #128	@ 0x80
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d000      	beq.n	8007c80 <UART_SetConfig+0x3b4>
 8007c7e:	e070      	b.n	8007d62 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007c80:	231b      	movs	r3, #27
 8007c82:	2220      	movs	r2, #32
 8007c84:	189b      	adds	r3, r3, r2
 8007c86:	19db      	adds	r3, r3, r7
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d015      	beq.n	8007cba <UART_SetConfig+0x3ee>
 8007c8e:	dc18      	bgt.n	8007cc2 <UART_SetConfig+0x3f6>
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d00d      	beq.n	8007cb0 <UART_SetConfig+0x3e4>
 8007c94:	dc15      	bgt.n	8007cc2 <UART_SetConfig+0x3f6>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <UART_SetConfig+0x3d4>
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d005      	beq.n	8007caa <UART_SetConfig+0x3de>
 8007c9e:	e010      	b.n	8007cc2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca0:	f7fd fa48 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007ca4:	0003      	movs	r3, r0
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ca8:	e014      	b.n	8007cd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007caa:	4b66      	ldr	r3, [pc, #408]	@ (8007e44 <UART_SetConfig+0x578>)
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cae:	e011      	b.n	8007cd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb0:	f7fd f9b4 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cb8:	e00c      	b.n	8007cd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cba:	2380      	movs	r3, #128	@ 0x80
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cc0:	e008      	b.n	8007cd4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007cc6:	231a      	movs	r3, #26
 8007cc8:	2220      	movs	r2, #32
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	19db      	adds	r3, r3, r7
 8007cce:	2201      	movs	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
        break;
 8007cd2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d100      	bne.n	8007cdc <UART_SetConfig+0x410>
 8007cda:	e09a      	b.n	8007e12 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce0:	4b57      	ldr	r3, [pc, #348]	@ (8007e40 <UART_SetConfig+0x574>)
 8007ce2:	0052      	lsls	r2, r2, #1
 8007ce4:	5ad3      	ldrh	r3, [r2, r3]
 8007ce6:	0019      	movs	r1, r3
 8007ce8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007cea:	f7f8 fa1d 	bl	8000128 <__udivsi3>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	005a      	lsls	r2, r3, #1
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	18d2      	adds	r2, r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	0019      	movs	r1, r3
 8007d00:	0010      	movs	r0, r2
 8007d02:	f7f8 fa11 	bl	8000128 <__udivsi3>
 8007d06:	0003      	movs	r3, r0
 8007d08:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d921      	bls.n	8007d54 <UART_SetConfig+0x488>
 8007d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d12:	2380      	movs	r3, #128	@ 0x80
 8007d14:	025b      	lsls	r3, r3, #9
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d21c      	bcs.n	8007d54 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	200e      	movs	r0, #14
 8007d20:	2420      	movs	r4, #32
 8007d22:	1903      	adds	r3, r0, r4
 8007d24:	19db      	adds	r3, r3, r7
 8007d26:	210f      	movs	r1, #15
 8007d28:	438a      	bics	r2, r1
 8007d2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2207      	movs	r2, #7
 8007d34:	4013      	ands	r3, r2
 8007d36:	b299      	uxth	r1, r3
 8007d38:	1903      	adds	r3, r0, r4
 8007d3a:	19db      	adds	r3, r3, r7
 8007d3c:	1902      	adds	r2, r0, r4
 8007d3e:	19d2      	adds	r2, r2, r7
 8007d40:	8812      	ldrh	r2, [r2, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	1902      	adds	r2, r0, r4
 8007d4c:	19d2      	adds	r2, r2, r7
 8007d4e:	8812      	ldrh	r2, [r2, #0]
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	e05e      	b.n	8007e12 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007d54:	231a      	movs	r3, #26
 8007d56:	2220      	movs	r2, #32
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	19db      	adds	r3, r3, r7
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	e057      	b.n	8007e12 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d62:	231b      	movs	r3, #27
 8007d64:	2220      	movs	r2, #32
 8007d66:	189b      	adds	r3, r3, r2
 8007d68:	19db      	adds	r3, r3, r7
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d015      	beq.n	8007d9c <UART_SetConfig+0x4d0>
 8007d70:	dc18      	bgt.n	8007da4 <UART_SetConfig+0x4d8>
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d00d      	beq.n	8007d92 <UART_SetConfig+0x4c6>
 8007d76:	dc15      	bgt.n	8007da4 <UART_SetConfig+0x4d8>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <UART_SetConfig+0x4b6>
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d005      	beq.n	8007d8c <UART_SetConfig+0x4c0>
 8007d80:	e010      	b.n	8007da4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d82:	f7fd f9d7 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007d86:	0003      	movs	r3, r0
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d8a:	e014      	b.n	8007db6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e44 <UART_SetConfig+0x578>)
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d90:	e011      	b.n	8007db6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d92:	f7fd f943 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8007d96:	0003      	movs	r3, r0
 8007d98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d9a:	e00c      	b.n	8007db6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9c:	2380      	movs	r3, #128	@ 0x80
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007da2:	e008      	b.n	8007db6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007da8:	231a      	movs	r3, #26
 8007daa:	2220      	movs	r2, #32
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	19db      	adds	r3, r3, r7
 8007db0:	2201      	movs	r2, #1
 8007db2:	701a      	strb	r2, [r3, #0]
        break;
 8007db4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d02a      	beq.n	8007e12 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e40 <UART_SetConfig+0x574>)
 8007dc2:	0052      	lsls	r2, r2, #1
 8007dc4:	5ad3      	ldrh	r3, [r2, r3]
 8007dc6:	0019      	movs	r1, r3
 8007dc8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007dca:	f7f8 f9ad 	bl	8000128 <__udivsi3>
 8007dce:	0003      	movs	r3, r0
 8007dd0:	001a      	movs	r2, r3
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	18d2      	adds	r2, r2, r3
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	0019      	movs	r1, r3
 8007de0:	0010      	movs	r0, r2
 8007de2:	f7f8 f9a1 	bl	8000128 <__udivsi3>
 8007de6:	0003      	movs	r3, r0
 8007de8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	2b0f      	cmp	r3, #15
 8007dee:	d90a      	bls.n	8007e06 <UART_SetConfig+0x53a>
 8007df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df2:	2380      	movs	r3, #128	@ 0x80
 8007df4:	025b      	lsls	r3, r3, #9
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d205      	bcs.n	8007e06 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	e005      	b.n	8007e12 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007e06:	231a      	movs	r3, #26
 8007e08:	2220      	movs	r2, #32
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	19db      	adds	r3, r3, r7
 8007e0e:	2201      	movs	r2, #1
 8007e10:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	226a      	movs	r2, #106	@ 0x6a
 8007e16:	2101      	movs	r1, #1
 8007e18:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	2268      	movs	r2, #104	@ 0x68
 8007e1e:	2101      	movs	r1, #1
 8007e20:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	2200      	movs	r2, #0
 8007e26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e2e:	231a      	movs	r3, #26
 8007e30:	2220      	movs	r2, #32
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	19db      	adds	r3, r3, r7
 8007e36:	781b      	ldrb	r3, [r3, #0]
}
 8007e38:	0018      	movs	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b010      	add	sp, #64	@ 0x40
 8007e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e40:	08009eb4 	.word	0x08009eb4
 8007e44:	00f42400 	.word	0x00f42400

08007e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	2208      	movs	r2, #8
 8007e56:	4013      	ands	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a4a      	ldr	r2, [pc, #296]	@ (8007f8c <UART_AdvFeatureConfig+0x144>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	0019      	movs	r1, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e76:	2201      	movs	r2, #1
 8007e78:	4013      	ands	r3, r2
 8007e7a:	d00b      	beq.n	8007e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	4a43      	ldr	r2, [pc, #268]	@ (8007f90 <UART_AdvFeatureConfig+0x148>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	0019      	movs	r1, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e98:	2202      	movs	r2, #2
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8007f94 <UART_AdvFeatureConfig+0x14c>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	0019      	movs	r1, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eba:	2204      	movs	r2, #4
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d00b      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4a34      	ldr	r2, [pc, #208]	@ (8007f98 <UART_AdvFeatureConfig+0x150>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	0019      	movs	r1, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	2210      	movs	r2, #16
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d00b      	beq.n	8007efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f9c <UART_AdvFeatureConfig+0x154>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	0019      	movs	r1, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efe:	2220      	movs	r2, #32
 8007f00:	4013      	ands	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	4a25      	ldr	r2, [pc, #148]	@ (8007fa0 <UART_AdvFeatureConfig+0x158>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	0019      	movs	r1, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	2240      	movs	r2, #64	@ 0x40
 8007f22:	4013      	ands	r3, r2
 8007f24:	d01d      	beq.n	8007f62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa4 <UART_AdvFeatureConfig+0x15c>)
 8007f2e:	4013      	ands	r3, r2
 8007f30:	0019      	movs	r1, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f42:	2380      	movs	r3, #128	@ 0x80
 8007f44:	035b      	lsls	r3, r3, #13
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d10b      	bne.n	8007f62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a15      	ldr	r2, [pc, #84]	@ (8007fa8 <UART_AdvFeatureConfig+0x160>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	0019      	movs	r1, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f66:	2280      	movs	r2, #128	@ 0x80
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	4a0e      	ldr	r2, [pc, #56]	@ (8007fac <UART_AdvFeatureConfig+0x164>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	0019      	movs	r1, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }
}
 8007f84:	46c0      	nop			@ (mov r8, r8)
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b002      	add	sp, #8
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	ffff7fff 	.word	0xffff7fff
 8007f90:	fffdffff 	.word	0xfffdffff
 8007f94:	fffeffff 	.word	0xfffeffff
 8007f98:	fffbffff 	.word	0xfffbffff
 8007f9c:	ffffefff 	.word	0xffffefff
 8007fa0:	ffffdfff 	.word	0xffffdfff
 8007fa4:	ffefffff 	.word	0xffefffff
 8007fa8:	ff9fffff 	.word	0xff9fffff
 8007fac:	fff7ffff 	.word	0xfff7ffff

08007fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b092      	sub	sp, #72	@ 0x48
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2290      	movs	r2, #144	@ 0x90
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc0:	f7fa f96e 	bl	80022a0 <HAL_GetTick>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2208      	movs	r2, #8
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d12d      	bne.n	8008032 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd8:	2280      	movs	r2, #128	@ 0x80
 8007fda:	0391      	lsls	r1, r2, #14
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4a47      	ldr	r2, [pc, #284]	@ (80080fc <UART_CheckIdleState+0x14c>)
 8007fe0:	9200      	str	r2, [sp, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f000 f88e 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 8007fe8:	1e03      	subs	r3, r0, #0
 8007fea:	d022      	beq.n	8008032 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fec:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	f383 8810 	msr	PRIMASK, r3
}
 8008000:	46c0      	nop			@ (mov r8, r8)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2180      	movs	r1, #128	@ 0x80
 800800e:	438a      	bics	r2, r1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008018:	f383 8810 	msr	PRIMASK, r3
}
 800801c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2288      	movs	r2, #136	@ 0x88
 8008022:	2120      	movs	r1, #32
 8008024:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2284      	movs	r2, #132	@ 0x84
 800802a:	2100      	movs	r1, #0
 800802c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e060      	b.n	80080f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2204      	movs	r2, #4
 800803a:	4013      	ands	r3, r2
 800803c:	2b04      	cmp	r3, #4
 800803e:	d146      	bne.n	80080ce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008042:	2280      	movs	r2, #128	@ 0x80
 8008044:	03d1      	lsls	r1, r2, #15
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4a2c      	ldr	r2, [pc, #176]	@ (80080fc <UART_CheckIdleState+0x14c>)
 800804a:	9200      	str	r2, [sp, #0]
 800804c:	2200      	movs	r2, #0
 800804e:	f000 f859 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 8008052:	1e03      	subs	r3, r0, #0
 8008054:	d03b      	beq.n	80080ce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008056:	f3ef 8310 	mrs	r3, PRIMASK
 800805a:	60fb      	str	r3, [r7, #12]
  return(result);
 800805c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008060:	2301      	movs	r3, #1
 8008062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f383 8810 	msr	PRIMASK, r3
}
 800806a:	46c0      	nop			@ (mov r8, r8)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4922      	ldr	r1, [pc, #136]	@ (8008100 <UART_CheckIdleState+0x150>)
 8008078:	400a      	ands	r2, r1
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f383 8810 	msr	PRIMASK, r3
}
 8008086:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008088:	f3ef 8310 	mrs	r3, PRIMASK
 800808c:	61bb      	str	r3, [r7, #24]
  return(result);
 800808e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008090:	633b      	str	r3, [r7, #48]	@ 0x30
 8008092:	2301      	movs	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	46c0      	nop			@ (mov r8, r8)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2101      	movs	r1, #1
 80080aa:	438a      	bics	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f383 8810 	msr	PRIMASK, r3
}
 80080b8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	228c      	movs	r2, #140	@ 0x8c
 80080be:	2120      	movs	r1, #32
 80080c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2284      	movs	r2, #132	@ 0x84
 80080c6:	2100      	movs	r1, #0
 80080c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e012      	b.n	80080f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2288      	movs	r2, #136	@ 0x88
 80080d2:	2120      	movs	r1, #32
 80080d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	228c      	movs	r2, #140	@ 0x8c
 80080da:	2120      	movs	r1, #32
 80080dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2284      	movs	r2, #132	@ 0x84
 80080ee:	2100      	movs	r1, #0
 80080f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	0018      	movs	r0, r3
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b010      	add	sp, #64	@ 0x40
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	01ffffff 	.word	0x01ffffff
 8008100:	fffffedf 	.word	0xfffffedf

08008104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	1dfb      	adds	r3, r7, #7
 8008112:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008114:	e051      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	3301      	adds	r3, #1
 800811a:	d04e      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811c:	f7fa f8c0 	bl	80022a0 <HAL_GetTick>
 8008120:	0002      	movs	r2, r0
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	d302      	bcc.n	8008132 <UART_WaitOnFlagUntilTimeout+0x2e>
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e051      	b.n	80081da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2204      	movs	r2, #4
 800813e:	4013      	ands	r3, r2
 8008140:	d03b      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b80      	cmp	r3, #128	@ 0x80
 8008146:	d038      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b40      	cmp	r3, #64	@ 0x40
 800814c:	d035      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	2208      	movs	r2, #8
 8008156:	4013      	ands	r3, r2
 8008158:	2b08      	cmp	r3, #8
 800815a:	d111      	bne.n	8008180 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2208      	movs	r2, #8
 8008162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	0018      	movs	r0, r3
 8008168:	f000 f960 	bl	800842c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2290      	movs	r2, #144	@ 0x90
 8008170:	2108      	movs	r1, #8
 8008172:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2284      	movs	r2, #132	@ 0x84
 8008178:	2100      	movs	r1, #0
 800817a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e02c      	b.n	80081da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	69da      	ldr	r2, [r3, #28]
 8008186:	2380      	movs	r3, #128	@ 0x80
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	401a      	ands	r2, r3
 800818c:	2380      	movs	r3, #128	@ 0x80
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	429a      	cmp	r2, r3
 8008192:	d112      	bne.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2280      	movs	r2, #128	@ 0x80
 800819a:	0112      	lsls	r2, r2, #4
 800819c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	0018      	movs	r0, r3
 80081a2:	f000 f943 	bl	800842c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2290      	movs	r2, #144	@ 0x90
 80081aa:	2120      	movs	r1, #32
 80081ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2284      	movs	r2, #132	@ 0x84
 80081b2:	2100      	movs	r1, #0
 80081b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e00f      	b.n	80081da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4013      	ands	r3, r2
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	425a      	negs	r2, r3
 80081ca:	4153      	adcs	r3, r2
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	001a      	movs	r2, r3
 80081d0:	1dfb      	adds	r3, r7, #7
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d09e      	beq.n	8008116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	0018      	movs	r0, r3
 80081dc:	46bd      	mov	sp, r7
 80081de:	b004      	add	sp, #16
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b098      	sub	sp, #96	@ 0x60
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	1dbb      	adds	r3, r7, #6
 80081f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1dba      	adds	r2, r7, #6
 80081fc:	215c      	movs	r1, #92	@ 0x5c
 80081fe:	8812      	ldrh	r2, [r2, #0]
 8008200:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1dba      	adds	r2, r7, #6
 8008206:	215e      	movs	r1, #94	@ 0x5e
 8008208:	8812      	ldrh	r2, [r2, #0]
 800820a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	2380      	movs	r3, #128	@ 0x80
 8008218:	015b      	lsls	r3, r3, #5
 800821a:	429a      	cmp	r2, r3
 800821c:	d10d      	bne.n	800823a <UART_Start_Receive_IT+0x56>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d104      	bne.n	8008230 <UART_Start_Receive_IT+0x4c>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2260      	movs	r2, #96	@ 0x60
 800822a:	497b      	ldr	r1, [pc, #492]	@ (8008418 <UART_Start_Receive_IT+0x234>)
 800822c:	5299      	strh	r1, [r3, r2]
 800822e:	e02e      	b.n	800828e <UART_Start_Receive_IT+0xaa>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2260      	movs	r2, #96	@ 0x60
 8008234:	21ff      	movs	r1, #255	@ 0xff
 8008236:	5299      	strh	r1, [r3, r2]
 8008238:	e029      	b.n	800828e <UART_Start_Receive_IT+0xaa>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10d      	bne.n	800825e <UART_Start_Receive_IT+0x7a>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <UART_Start_Receive_IT+0x70>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2260      	movs	r2, #96	@ 0x60
 800824e:	21ff      	movs	r1, #255	@ 0xff
 8008250:	5299      	strh	r1, [r3, r2]
 8008252:	e01c      	b.n	800828e <UART_Start_Receive_IT+0xaa>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2260      	movs	r2, #96	@ 0x60
 8008258:	217f      	movs	r1, #127	@ 0x7f
 800825a:	5299      	strh	r1, [r3, r2]
 800825c:	e017      	b.n	800828e <UART_Start_Receive_IT+0xaa>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	2380      	movs	r3, #128	@ 0x80
 8008264:	055b      	lsls	r3, r3, #21
 8008266:	429a      	cmp	r2, r3
 8008268:	d10d      	bne.n	8008286 <UART_Start_Receive_IT+0xa2>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <UART_Start_Receive_IT+0x98>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2260      	movs	r2, #96	@ 0x60
 8008276:	217f      	movs	r1, #127	@ 0x7f
 8008278:	5299      	strh	r1, [r3, r2]
 800827a:	e008      	b.n	800828e <UART_Start_Receive_IT+0xaa>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2260      	movs	r2, #96	@ 0x60
 8008280:	213f      	movs	r1, #63	@ 0x3f
 8008282:	5299      	strh	r1, [r3, r2]
 8008284:	e003      	b.n	800828e <UART_Start_Receive_IT+0xaa>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2260      	movs	r2, #96	@ 0x60
 800828a:	2100      	movs	r1, #0
 800828c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2290      	movs	r2, #144	@ 0x90
 8008292:	2100      	movs	r1, #0
 8008294:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	228c      	movs	r2, #140	@ 0x8c
 800829a:	2122      	movs	r1, #34	@ 0x22
 800829c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800829e:	f3ef 8310 	mrs	r3, PRIMASK
 80082a2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80082a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082a8:	2301      	movs	r3, #1
 80082aa:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ae:	f383 8810 	msr	PRIMASK, r3
}
 80082b2:	46c0      	nop			@ (mov r8, r8)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2101      	movs	r1, #1
 80082c0:	430a      	orrs	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
 80082c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ca:	f383 8810 	msr	PRIMASK, r3
}
 80082ce:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80082d4:	2380      	movs	r3, #128	@ 0x80
 80082d6:	059b      	lsls	r3, r3, #22
 80082d8:	429a      	cmp	r2, r3
 80082da:	d150      	bne.n	800837e <UART_Start_Receive_IT+0x19a>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2268      	movs	r2, #104	@ 0x68
 80082e0:	5a9b      	ldrh	r3, [r3, r2]
 80082e2:	1dba      	adds	r2, r7, #6
 80082e4:	8812      	ldrh	r2, [r2, #0]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d349      	bcc.n	800837e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	2380      	movs	r3, #128	@ 0x80
 80082f0:	015b      	lsls	r3, r3, #5
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d107      	bne.n	8008306 <UART_Start_Receive_IT+0x122>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d103      	bne.n	8008306 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4a46      	ldr	r2, [pc, #280]	@ (800841c <UART_Start_Receive_IT+0x238>)
 8008302:	675a      	str	r2, [r3, #116]	@ 0x74
 8008304:	e002      	b.n	800830c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a45      	ldr	r2, [pc, #276]	@ (8008420 <UART_Start_Receive_IT+0x23c>)
 800830a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d019      	beq.n	8008348 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008314:	f3ef 8310 	mrs	r3, PRIMASK
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800831e:	2301      	movs	r3, #1
 8008320:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	f383 8810 	msr	PRIMASK, r3
}
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2180      	movs	r1, #128	@ 0x80
 8008336:	0049      	lsls	r1, r1, #1
 8008338:	430a      	orrs	r2, r1
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008342:	f383 8810 	msr	PRIMASK, r3
}
 8008346:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008348:	f3ef 8310 	mrs	r3, PRIMASK
 800834c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800834e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008350:	657b      	str	r3, [r7, #84]	@ 0x54
 8008352:	2301      	movs	r3, #1
 8008354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008358:	f383 8810 	msr	PRIMASK, r3
}
 800835c:	46c0      	nop			@ (mov r8, r8)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2180      	movs	r1, #128	@ 0x80
 800836a:	0549      	lsls	r1, r1, #21
 800836c:	430a      	orrs	r2, r1
 800836e:	609a      	str	r2, [r3, #8]
 8008370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008372:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	46c0      	nop			@ (mov r8, r8)
 800837c:	e047      	b.n	800840e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	2380      	movs	r3, #128	@ 0x80
 8008384:	015b      	lsls	r3, r3, #5
 8008386:	429a      	cmp	r2, r3
 8008388:	d107      	bne.n	800839a <UART_Start_Receive_IT+0x1b6>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4a23      	ldr	r2, [pc, #140]	@ (8008424 <UART_Start_Receive_IT+0x240>)
 8008396:	675a      	str	r2, [r3, #116]	@ 0x74
 8008398:	e002      	b.n	80083a0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4a22      	ldr	r2, [pc, #136]	@ (8008428 <UART_Start_Receive_IT+0x244>)
 800839e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d019      	beq.n	80083dc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80083ae:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b2:	2301      	movs	r3, #1
 80083b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	46c0      	nop			@ (mov r8, r8)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2190      	movs	r1, #144	@ 0x90
 80083ca:	0049      	lsls	r1, r1, #1
 80083cc:	430a      	orrs	r2, r1
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	f383 8810 	msr	PRIMASK, r3
}
 80083da:	e018      	b.n	800840e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083dc:	f3ef 8310 	mrs	r3, PRIMASK
 80083e0:	613b      	str	r3, [r7, #16]
  return(result);
 80083e2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80083e6:	2301      	movs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f383 8810 	msr	PRIMASK, r3
}
 80083f0:	46c0      	nop			@ (mov r8, r8)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2120      	movs	r1, #32
 80083fe:	430a      	orrs	r2, r1
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f383 8810 	msr	PRIMASK, r3
}
 800840c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b018      	add	sp, #96	@ 0x60
 8008416:	bd80      	pop	{r7, pc}
 8008418:	000001ff 	.word	0x000001ff
 800841c:	08008c49 	.word	0x08008c49
 8008420:	08008909 	.word	0x08008909
 8008424:	08008745 	.word	0x08008745
 8008428:	08008581 	.word	0x08008581

0800842c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08e      	sub	sp, #56	@ 0x38
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008434:	f3ef 8310 	mrs	r3, PRIMASK
 8008438:	617b      	str	r3, [r7, #20]
  return(result);
 800843a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
 800843e:	2301      	movs	r3, #1
 8008440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	f383 8810 	msr	PRIMASK, r3
}
 8008448:	46c0      	nop			@ (mov r8, r8)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4926      	ldr	r1, [pc, #152]	@ (80084f0 <UART_EndRxTransfer+0xc4>)
 8008456:	400a      	ands	r2, r1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f383 8810 	msr	PRIMASK, r3
}
 8008464:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008466:	f3ef 8310 	mrs	r3, PRIMASK
 800846a:	623b      	str	r3, [r7, #32]
  return(result);
 800846c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800846e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008470:	2301      	movs	r3, #1
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	f383 8810 	msr	PRIMASK, r3
}
 800847a:	46c0      	nop			@ (mov r8, r8)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	491b      	ldr	r1, [pc, #108]	@ (80084f4 <UART_EndRxTransfer+0xc8>)
 8008488:	400a      	ands	r2, r1
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008492:	f383 8810 	msr	PRIMASK, r3
}
 8008496:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800849c:	2b01      	cmp	r3, #1
 800849e:	d118      	bne.n	80084d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a0:	f3ef 8310 	mrs	r3, PRIMASK
 80084a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80084a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084aa:	2301      	movs	r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f383 8810 	msr	PRIMASK, r3
}
 80084b4:	46c0      	nop			@ (mov r8, r8)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2110      	movs	r1, #16
 80084c2:	438a      	bics	r2, r1
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f383 8810 	msr	PRIMASK, r3
}
 80084d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	228c      	movs	r2, #140	@ 0x8c
 80084d6:	2120      	movs	r1, #32
 80084d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b00e      	add	sp, #56	@ 0x38
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	46c0      	nop			@ (mov r8, r8)
 80084f0:	fffffedf 	.word	0xfffffedf
 80084f4:	effffffe 	.word	0xeffffffe

080084f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	225e      	movs	r2, #94	@ 0x5e
 800850a:	2100      	movs	r1, #0
 800850c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2256      	movs	r2, #86	@ 0x56
 8008512:	2100      	movs	r1, #0
 8008514:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	0018      	movs	r0, r3
 800851a:	f7ff f9c3 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	46bd      	mov	sp, r7
 8008522:	b004      	add	sp, #16
 8008524:	bd80      	pop	{r7, pc}

08008526 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b086      	sub	sp, #24
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852e:	f3ef 8310 	mrs	r3, PRIMASK
 8008532:	60bb      	str	r3, [r7, #8]
  return(result);
 8008534:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	2301      	movs	r3, #1
 800853a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f383 8810 	msr	PRIMASK, r3
}
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2140      	movs	r1, #64	@ 0x40
 8008550:	438a      	bics	r2, r1
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f383 8810 	msr	PRIMASK, r3
}
 800855e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2288      	movs	r2, #136	@ 0x88
 8008564:	2120      	movs	r1, #32
 8008566:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	0018      	movs	r0, r3
 8008572:	f7ff f98f 	bl	8007894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008576:	46c0      	nop			@ (mov r8, r8)
 8008578:	46bd      	mov	sp, r7
 800857a:	b006      	add	sp, #24
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b094      	sub	sp, #80	@ 0x50
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008588:	204e      	movs	r0, #78	@ 0x4e
 800858a:	183b      	adds	r3, r7, r0
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	2160      	movs	r1, #96	@ 0x60
 8008590:	5a52      	ldrh	r2, [r2, r1]
 8008592:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	228c      	movs	r2, #140	@ 0x8c
 8008598:	589b      	ldr	r3, [r3, r2]
 800859a:	2b22      	cmp	r3, #34	@ 0x22
 800859c:	d000      	beq.n	80085a0 <UART_RxISR_8BIT+0x20>
 800859e:	e0bf      	b.n	8008720 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085a6:	214c      	movs	r1, #76	@ 0x4c
 80085a8:	187b      	adds	r3, r7, r1
 80085aa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085ac:	187b      	adds	r3, r7, r1
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	183b      	adds	r3, r7, r0
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b2d9      	uxtb	r1, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085bc:	400a      	ands	r2, r1
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	225e      	movs	r2, #94	@ 0x5e
 80085d0:	5a9b      	ldrh	r3, [r3, r2]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b299      	uxth	r1, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	225e      	movs	r2, #94	@ 0x5e
 80085dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	225e      	movs	r2, #94	@ 0x5e
 80085e2:	5a9b      	ldrh	r3, [r3, r2]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d000      	beq.n	80085ec <UART_RxISR_8BIT+0x6c>
 80085ea:	e0a1      	b.n	8008730 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ec:	f3ef 8310 	mrs	r3, PRIMASK
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f6:	2301      	movs	r3, #1
 80085f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fc:	f383 8810 	msr	PRIMASK, r3
}
 8008600:	46c0      	nop			@ (mov r8, r8)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	494a      	ldr	r1, [pc, #296]	@ (8008738 <UART_RxISR_8BIT+0x1b8>)
 800860e:	400a      	ands	r2, r1
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008618:	f383 8810 	msr	PRIMASK, r3
}
 800861c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800861e:	f3ef 8310 	mrs	r3, PRIMASK
 8008622:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008626:	647b      	str	r3, [r7, #68]	@ 0x44
 8008628:	2301      	movs	r3, #1
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862e:	f383 8810 	msr	PRIMASK, r3
}
 8008632:	46c0      	nop			@ (mov r8, r8)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2101      	movs	r1, #1
 8008640:	438a      	bics	r2, r1
 8008642:	609a      	str	r2, [r3, #8]
 8008644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	f383 8810 	msr	PRIMASK, r3
}
 800864e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	228c      	movs	r2, #140	@ 0x8c
 8008654:	2120      	movs	r1, #32
 8008656:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a34      	ldr	r2, [pc, #208]	@ (800873c <UART_RxISR_8BIT+0x1bc>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d01f      	beq.n	80086ae <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	2380      	movs	r3, #128	@ 0x80
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	4013      	ands	r3, r2
 800867a:	d018      	beq.n	80086ae <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867c:	f3ef 8310 	mrs	r3, PRIMASK
 8008680:	61bb      	str	r3, [r7, #24]
  return(result);
 8008682:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008684:	643b      	str	r3, [r7, #64]	@ 0x40
 8008686:	2301      	movs	r3, #1
 8008688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f383 8810 	msr	PRIMASK, r3
}
 8008690:	46c0      	nop			@ (mov r8, r8)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4928      	ldr	r1, [pc, #160]	@ (8008740 <UART_RxISR_8BIT+0x1c0>)
 800869e:	400a      	ands	r2, r1
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	f383 8810 	msr	PRIMASK, r3
}
 80086ac:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d12f      	bne.n	8008716 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086bc:	f3ef 8310 	mrs	r3, PRIMASK
 80086c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086c2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c6:	2301      	movs	r3, #1
 80086c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	46c0      	nop			@ (mov r8, r8)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2110      	movs	r1, #16
 80086de:	438a      	bics	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f383 8810 	msr	PRIMASK, r3
}
 80086ec:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	2210      	movs	r2, #16
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d103      	bne.n	8008704 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2210      	movs	r2, #16
 8008702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	225c      	movs	r2, #92	@ 0x5c
 8008708:	5a9a      	ldrh	r2, [r3, r2]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0011      	movs	r1, r2
 800870e:	0018      	movs	r0, r3
 8008710:	f7ff f8d0 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008714:	e00c      	b.n	8008730 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	0018      	movs	r0, r3
 800871a:	f7f7 ff91 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 800871e:	e007      	b.n	8008730 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2108      	movs	r1, #8
 800872c:	430a      	orrs	r2, r1
 800872e:	619a      	str	r2, [r3, #24]
}
 8008730:	46c0      	nop			@ (mov r8, r8)
 8008732:	46bd      	mov	sp, r7
 8008734:	b014      	add	sp, #80	@ 0x50
 8008736:	bd80      	pop	{r7, pc}
 8008738:	fffffedf 	.word	0xfffffedf
 800873c:	40008000 	.word	0x40008000
 8008740:	fbffffff 	.word	0xfbffffff

08008744 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b094      	sub	sp, #80	@ 0x50
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800874c:	204e      	movs	r0, #78	@ 0x4e
 800874e:	183b      	adds	r3, r7, r0
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	2160      	movs	r1, #96	@ 0x60
 8008754:	5a52      	ldrh	r2, [r2, r1]
 8008756:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	228c      	movs	r2, #140	@ 0x8c
 800875c:	589b      	ldr	r3, [r3, r2]
 800875e:	2b22      	cmp	r3, #34	@ 0x22
 8008760:	d000      	beq.n	8008764 <UART_RxISR_16BIT+0x20>
 8008762:	e0bf      	b.n	80088e4 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800876a:	214c      	movs	r1, #76	@ 0x4c
 800876c:	187b      	adds	r3, r7, r1
 800876e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008774:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008776:	187b      	adds	r3, r7, r1
 8008778:	183a      	adds	r2, r7, r0
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	8812      	ldrh	r2, [r2, #0]
 800877e:	4013      	ands	r3, r2
 8008780:	b29a      	uxth	r2, r3
 8008782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008784:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878a:	1c9a      	adds	r2, r3, #2
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	225e      	movs	r2, #94	@ 0x5e
 8008794:	5a9b      	ldrh	r3, [r3, r2]
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b299      	uxth	r1, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	225e      	movs	r2, #94	@ 0x5e
 80087a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	225e      	movs	r2, #94	@ 0x5e
 80087a6:	5a9b      	ldrh	r3, [r3, r2]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d000      	beq.n	80087b0 <UART_RxISR_16BIT+0x6c>
 80087ae:	e0a1      	b.n	80088f4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b0:	f3ef 8310 	mrs	r3, PRIMASK
 80087b4:	623b      	str	r3, [r7, #32]
  return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ba:	2301      	movs	r3, #1
 80087bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	f383 8810 	msr	PRIMASK, r3
}
 80087c4:	46c0      	nop			@ (mov r8, r8)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	494a      	ldr	r1, [pc, #296]	@ (80088fc <UART_RxISR_16BIT+0x1b8>)
 80087d2:	400a      	ands	r2, r1
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	f383 8810 	msr	PRIMASK, r3
}
 80087e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087e2:	f3ef 8310 	mrs	r3, PRIMASK
 80087e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80087e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ec:	2301      	movs	r3, #1
 80087ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	f383 8810 	msr	PRIMASK, r3
}
 80087f6:	46c0      	nop			@ (mov r8, r8)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2101      	movs	r1, #1
 8008804:	438a      	bics	r2, r1
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880e:	f383 8810 	msr	PRIMASK, r3
}
 8008812:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	228c      	movs	r2, #140	@ 0x8c
 8008818:	2120      	movs	r1, #32
 800881a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a34      	ldr	r2, [pc, #208]	@ (8008900 <UART_RxISR_16BIT+0x1bc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01f      	beq.n	8008872 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	2380      	movs	r3, #128	@ 0x80
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	4013      	ands	r3, r2
 800883e:	d018      	beq.n	8008872 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008840:	f3ef 8310 	mrs	r3, PRIMASK
 8008844:	617b      	str	r3, [r7, #20]
  return(result);
 8008846:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800884a:	2301      	movs	r3, #1
 800884c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	f383 8810 	msr	PRIMASK, r3
}
 8008854:	46c0      	nop			@ (mov r8, r8)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4928      	ldr	r1, [pc, #160]	@ (8008904 <UART_RxISR_16BIT+0x1c0>)
 8008862:	400a      	ands	r2, r1
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	f383 8810 	msr	PRIMASK, r3
}
 8008870:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008876:	2b01      	cmp	r3, #1
 8008878:	d12f      	bne.n	80088da <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008880:	f3ef 8310 	mrs	r3, PRIMASK
 8008884:	60bb      	str	r3, [r7, #8]
  return(result);
 8008886:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800888a:	2301      	movs	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f383 8810 	msr	PRIMASK, r3
}
 8008894:	46c0      	nop			@ (mov r8, r8)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2110      	movs	r1, #16
 80088a2:	438a      	bics	r2, r1
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f383 8810 	msr	PRIMASK, r3
}
 80088b0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	2210      	movs	r2, #16
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b10      	cmp	r3, #16
 80088be:	d103      	bne.n	80088c8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2210      	movs	r2, #16
 80088c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	225c      	movs	r2, #92	@ 0x5c
 80088cc:	5a9a      	ldrh	r2, [r3, r2]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	0011      	movs	r1, r2
 80088d2:	0018      	movs	r0, r3
 80088d4:	f7fe ffee 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d8:	e00c      	b.n	80088f4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0018      	movs	r0, r3
 80088de:	f7f7 feaf 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 80088e2:	e007      	b.n	80088f4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2108      	movs	r1, #8
 80088f0:	430a      	orrs	r2, r1
 80088f2:	619a      	str	r2, [r3, #24]
}
 80088f4:	46c0      	nop			@ (mov r8, r8)
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b014      	add	sp, #80	@ 0x50
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	fffffedf 	.word	0xfffffedf
 8008900:	40008000 	.word	0x40008000
 8008904:	fbffffff 	.word	0xfbffffff

08008908 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b0a0      	sub	sp, #128	@ 0x80
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008910:	237a      	movs	r3, #122	@ 0x7a
 8008912:	18fb      	adds	r3, r7, r3
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	2160      	movs	r1, #96	@ 0x60
 8008918:	5a52      	ldrh	r2, [r2, r1]
 800891a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	228c      	movs	r2, #140	@ 0x8c
 8008938:	589b      	ldr	r3, [r3, r2]
 800893a:	2b22      	cmp	r3, #34	@ 0x22
 800893c:	d000      	beq.n	8008940 <UART_RxISR_8BIT_FIFOEN+0x38>
 800893e:	e16a      	b.n	8008c16 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008940:	236e      	movs	r3, #110	@ 0x6e
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	2168      	movs	r1, #104	@ 0x68
 8008948:	5a52      	ldrh	r2, [r2, r1]
 800894a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800894c:	e111      	b.n	8008b72 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008954:	216c      	movs	r1, #108	@ 0x6c
 8008956:	187b      	adds	r3, r7, r1
 8008958:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800895a:	187b      	adds	r3, r7, r1
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b2da      	uxtb	r2, r3
 8008960:	237a      	movs	r3, #122	@ 0x7a
 8008962:	18fb      	adds	r3, r7, r3
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b2d9      	uxtb	r1, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896c:	400a      	ands	r2, r1
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	225e      	movs	r2, #94	@ 0x5e
 8008980:	5a9b      	ldrh	r3, [r3, r2]
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	b299      	uxth	r1, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	225e      	movs	r2, #94	@ 0x5e
 800898c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008998:	2207      	movs	r2, #7
 800899a:	4013      	ands	r3, r2
 800899c:	d049      	beq.n	8008a32 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800899e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089a0:	2201      	movs	r2, #1
 80089a2:	4013      	ands	r3, r2
 80089a4:	d010      	beq.n	80089c8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80089a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80089a8:	2380      	movs	r3, #128	@ 0x80
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	4013      	ands	r3, r2
 80089ae:	d00b      	beq.n	80089c8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2201      	movs	r2, #1
 80089b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2290      	movs	r2, #144	@ 0x90
 80089bc:	589b      	ldr	r3, [r3, r2]
 80089be:	2201      	movs	r2, #1
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2190      	movs	r1, #144	@ 0x90
 80089c6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089ca:	2202      	movs	r2, #2
 80089cc:	4013      	ands	r3, r2
 80089ce:	d00f      	beq.n	80089f0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80089d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089d2:	2201      	movs	r2, #1
 80089d4:	4013      	ands	r3, r2
 80089d6:	d00b      	beq.n	80089f0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2202      	movs	r2, #2
 80089de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2290      	movs	r2, #144	@ 0x90
 80089e4:	589b      	ldr	r3, [r3, r2]
 80089e6:	2204      	movs	r2, #4
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2190      	movs	r1, #144	@ 0x90
 80089ee:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089f2:	2204      	movs	r2, #4
 80089f4:	4013      	ands	r3, r2
 80089f6:	d00f      	beq.n	8008a18 <UART_RxISR_8BIT_FIFOEN+0x110>
 80089f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089fa:	2201      	movs	r2, #1
 80089fc:	4013      	ands	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2204      	movs	r2, #4
 8008a06:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2290      	movs	r2, #144	@ 0x90
 8008a0c:	589b      	ldr	r3, [r3, r2]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2190      	movs	r1, #144	@ 0x90
 8008a16:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2290      	movs	r2, #144	@ 0x90
 8008a1c:	589b      	ldr	r3, [r3, r2]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	0018      	movs	r0, r3
 8008a26:	f7fe ff3d 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2290      	movs	r2, #144	@ 0x90
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	225e      	movs	r2, #94	@ 0x5e
 8008a36:	5a9b      	ldrh	r3, [r3, r2]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d000      	beq.n	8008a40 <UART_RxISR_8BIT_FIFOEN+0x138>
 8008a3e:	e098      	b.n	8008b72 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a40:	f3ef 8310 	mrs	r3, PRIMASK
 8008a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a50:	f383 8810 	msr	PRIMASK, r3
}
 8008a54:	46c0      	nop			@ (mov r8, r8)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4973      	ldr	r1, [pc, #460]	@ (8008c30 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8008a62:	400a      	ands	r2, r1
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a68:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a6c:	f383 8810 	msr	PRIMASK, r3
}
 8008a70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a72:	f3ef 8310 	mrs	r3, PRIMASK
 8008a76:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8008a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a82:	f383 8810 	msr	PRIMASK, r3
}
 8008a86:	46c0      	nop			@ (mov r8, r8)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4968      	ldr	r1, [pc, #416]	@ (8008c34 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8008a94:	400a      	ands	r2, r1
 8008a96:	609a      	str	r2, [r3, #8]
 8008a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9e:	f383 8810 	msr	PRIMASK, r3
}
 8008aa2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	228c      	movs	r2, #140	@ 0x8c
 8008aa8:	2120      	movs	r1, #32
 8008aaa:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a5e      	ldr	r2, [pc, #376]	@ (8008c38 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01f      	beq.n	8008b02 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	2380      	movs	r3, #128	@ 0x80
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	4013      	ands	r3, r2
 8008ace:	d018      	beq.n	8008b02 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ad8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ada:	2301      	movs	r3, #1
 8008adc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	f383 8810 	msr	PRIMASK, r3
}
 8008ae4:	46c0      	nop			@ (mov r8, r8)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4952      	ldr	r1, [pc, #328]	@ (8008c3c <UART_RxISR_8BIT_FIFOEN+0x334>)
 8008af2:	400a      	ands	r2, r1
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	f383 8810 	msr	PRIMASK, r3
}
 8008b00:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d12f      	bne.n	8008b6a <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b10:	f3ef 8310 	mrs	r3, PRIMASK
 8008b14:	623b      	str	r3, [r7, #32]
  return(result);
 8008b16:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	f383 8810 	msr	PRIMASK, r3
}
 8008b24:	46c0      	nop			@ (mov r8, r8)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2110      	movs	r1, #16
 8008b32:	438a      	bics	r2, r1
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3c:	f383 8810 	msr	PRIMASK, r3
}
 8008b40:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	2210      	movs	r2, #16
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	d103      	bne.n	8008b58 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2210      	movs	r2, #16
 8008b56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	225c      	movs	r2, #92	@ 0x5c
 8008b5c:	5a9a      	ldrh	r2, [r3, r2]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0011      	movs	r1, r2
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7fe fea6 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
 8008b68:	e003      	b.n	8008b72 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f7f7 fd67 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b72:	236e      	movs	r3, #110	@ 0x6e
 8008b74:	18fb      	adds	r3, r7, r3
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008b7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b7e:	2220      	movs	r2, #32
 8008b80:	4013      	ands	r3, r2
 8008b82:	d000      	beq.n	8008b86 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008b84:	e6e3      	b.n	800894e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b86:	205a      	movs	r0, #90	@ 0x5a
 8008b88:	183b      	adds	r3, r7, r0
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	215e      	movs	r1, #94	@ 0x5e
 8008b8e:	5a52      	ldrh	r2, [r2, r1]
 8008b90:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b92:	0001      	movs	r1, r0
 8008b94:	187b      	adds	r3, r7, r1
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d044      	beq.n	8008c26 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2268      	movs	r2, #104	@ 0x68
 8008ba0:	5a9b      	ldrh	r3, [r3, r2]
 8008ba2:	187a      	adds	r2, r7, r1
 8008ba4:	8812      	ldrh	r2, [r2, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d23d      	bcs.n	8008c26 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008baa:	f3ef 8310 	mrs	r3, PRIMASK
 8008bae:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f383 8810 	msr	PRIMASK, r3
}
 8008bbe:	46c0      	nop			@ (mov r8, r8)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	491d      	ldr	r1, [pc, #116]	@ (8008c40 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8008bcc:	400a      	ands	r2, r1
 8008bce:	609a      	str	r2, [r3, #8]
 8008bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f383 8810 	msr	PRIMASK, r3
}
 8008bda:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a19      	ldr	r2, [pc, #100]	@ (8008c44 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8008be0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be2:	f3ef 8310 	mrs	r3, PRIMASK
 8008be6:	617b      	str	r3, [r7, #20]
  return(result);
 8008be8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bec:	2301      	movs	r3, #1
 8008bee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f383 8810 	msr	PRIMASK, r3
}
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2120      	movs	r1, #32
 8008c04:	430a      	orrs	r2, r1
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f383 8810 	msr	PRIMASK, r3
}
 8008c12:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c14:	e007      	b.n	8008c26 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699a      	ldr	r2, [r3, #24]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2108      	movs	r1, #8
 8008c22:	430a      	orrs	r2, r1
 8008c24:	619a      	str	r2, [r3, #24]
}
 8008c26:	46c0      	nop			@ (mov r8, r8)
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b020      	add	sp, #128	@ 0x80
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	fffffeff 	.word	0xfffffeff
 8008c34:	effffffe 	.word	0xeffffffe
 8008c38:	40008000 	.word	0x40008000
 8008c3c:	fbffffff 	.word	0xfbffffff
 8008c40:	efffffff 	.word	0xefffffff
 8008c44:	08008581 	.word	0x08008581

08008c48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b0a2      	sub	sp, #136	@ 0x88
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c50:	2382      	movs	r3, #130	@ 0x82
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	2160      	movs	r1, #96	@ 0x60
 8008c58:	5a52      	ldrh	r2, [r2, r1]
 8008c5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	2284      	movs	r2, #132	@ 0x84
 8008c64:	18ba      	adds	r2, r7, r2
 8008c66:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	228c      	movs	r2, #140	@ 0x8c
 8008c7c:	589b      	ldr	r3, [r3, r2]
 8008c7e:	2b22      	cmp	r3, #34	@ 0x22
 8008c80:	d000      	beq.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8008c82:	e174      	b.n	8008f6e <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c84:	2376      	movs	r3, #118	@ 0x76
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	2168      	movs	r1, #104	@ 0x68
 8008c8c:	5a52      	ldrh	r2, [r2, r1]
 8008c8e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c90:	e119      	b.n	8008ec6 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c98:	2174      	movs	r1, #116	@ 0x74
 8008c9a:	187b      	adds	r3, r7, r1
 8008c9c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca2:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8008ca4:	187b      	adds	r3, r7, r1
 8008ca6:	2282      	movs	r2, #130	@ 0x82
 8008ca8:	18ba      	adds	r2, r7, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	8812      	ldrh	r2, [r2, #0]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cba:	1c9a      	adds	r2, r3, #2
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	225e      	movs	r2, #94	@ 0x5e
 8008cc4:	5a9b      	ldrh	r3, [r3, r2]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b299      	uxth	r1, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	225e      	movs	r2, #94	@ 0x5e
 8008cd0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	2184      	movs	r1, #132	@ 0x84
 8008cda:	187a      	adds	r2, r7, r1
 8008cdc:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008cde:	187b      	adds	r3, r7, r1
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2207      	movs	r2, #7
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	d04e      	beq.n	8008d86 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ce8:	187b      	adds	r3, r7, r1
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2201      	movs	r2, #1
 8008cee:	4013      	ands	r3, r2
 8008cf0:	d010      	beq.n	8008d14 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8008cf2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cf4:	2380      	movs	r3, #128	@ 0x80
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2201      	movs	r2, #1
 8008d02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2290      	movs	r2, #144	@ 0x90
 8008d08:	589b      	ldr	r3, [r3, r2]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2190      	movs	r1, #144	@ 0x90
 8008d12:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d14:	2384      	movs	r3, #132	@ 0x84
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d00f      	beq.n	8008d40 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d22:	2201      	movs	r2, #1
 8008d24:	4013      	ands	r3, r2
 8008d26:	d00b      	beq.n	8008d40 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2290      	movs	r2, #144	@ 0x90
 8008d34:	589b      	ldr	r3, [r3, r2]
 8008d36:	2204      	movs	r2, #4
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2190      	movs	r1, #144	@ 0x90
 8008d3e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d40:	2384      	movs	r3, #132	@ 0x84
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2204      	movs	r2, #4
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d00f      	beq.n	8008d6c <UART_RxISR_16BIT_FIFOEN+0x124>
 8008d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4013      	ands	r3, r2
 8008d52:	d00b      	beq.n	8008d6c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2204      	movs	r2, #4
 8008d5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2290      	movs	r2, #144	@ 0x90
 8008d60:	589b      	ldr	r3, [r3, r2]
 8008d62:	2202      	movs	r2, #2
 8008d64:	431a      	orrs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2190      	movs	r1, #144	@ 0x90
 8008d6a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2290      	movs	r2, #144	@ 0x90
 8008d70:	589b      	ldr	r3, [r3, r2]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f7fe fd93 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2290      	movs	r2, #144	@ 0x90
 8008d82:	2100      	movs	r1, #0
 8008d84:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	225e      	movs	r2, #94	@ 0x5e
 8008d8a:	5a9b      	ldrh	r3, [r3, r2]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d000      	beq.n	8008d94 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8008d92:	e098      	b.n	8008ec6 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d94:	f3ef 8310 	mrs	r3, PRIMASK
 8008d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d9e:	2301      	movs	r3, #1
 8008da0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008da4:	f383 8810 	msr	PRIMASK, r3
}
 8008da8:	46c0      	nop			@ (mov r8, r8)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4974      	ldr	r1, [pc, #464]	@ (8008f88 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8008db6:	400a      	ands	r2, r1
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dc0:	f383 8810 	msr	PRIMASK, r3
}
 8008dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dd6:	f383 8810 	msr	PRIMASK, r3
}
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4969      	ldr	r1, [pc, #420]	@ (8008f8c <UART_RxISR_16BIT_FIFOEN+0x344>)
 8008de8:	400a      	ands	r2, r1
 8008dea:	609a      	str	r2, [r3, #8]
 8008dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df2:	f383 8810 	msr	PRIMASK, r3
}
 8008df6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	228c      	movs	r2, #140	@ 0x8c
 8008dfc:	2120      	movs	r1, #32
 8008dfe:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a5f      	ldr	r2, [pc, #380]	@ (8008f90 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01f      	beq.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	041b      	lsls	r3, r3, #16
 8008e20:	4013      	ands	r3, r2
 8008e22:	d018      	beq.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e24:	f3ef 8310 	mrs	r3, PRIMASK
 8008e28:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e2e:	2301      	movs	r3, #1
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e34:	f383 8810 	msr	PRIMASK, r3
}
 8008e38:	46c0      	nop			@ (mov r8, r8)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4953      	ldr	r1, [pc, #332]	@ (8008f94 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8008e46:	400a      	ands	r2, r1
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	f383 8810 	msr	PRIMASK, r3
}
 8008e54:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d12f      	bne.n	8008ebe <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e64:	f3ef 8310 	mrs	r3, PRIMASK
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e6e:	2301      	movs	r3, #1
 8008e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	f383 8810 	msr	PRIMASK, r3
}
 8008e78:	46c0      	nop			@ (mov r8, r8)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2110      	movs	r1, #16
 8008e86:	438a      	bics	r2, r1
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	f383 8810 	msr	PRIMASK, r3
}
 8008e94:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	2210      	movs	r2, #16
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b10      	cmp	r3, #16
 8008ea2:	d103      	bne.n	8008eac <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	225c      	movs	r2, #92	@ 0x5c
 8008eb0:	5a9a      	ldrh	r2, [r3, r2]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	0011      	movs	r1, r2
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f7fe fcfc 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
 8008ebc:	e003      	b.n	8008ec6 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f7f7 fbbd 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ec6:	2376      	movs	r3, #118	@ 0x76
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d006      	beq.n	8008ede <UART_RxISR_16BIT_FIFOEN+0x296>
 8008ed0:	2384      	movs	r3, #132	@ 0x84
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	4013      	ands	r3, r2
 8008eda:	d000      	beq.n	8008ede <UART_RxISR_16BIT_FIFOEN+0x296>
 8008edc:	e6d9      	b.n	8008c92 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ede:	205e      	movs	r0, #94	@ 0x5e
 8008ee0:	183b      	adds	r3, r7, r0
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	215e      	movs	r1, #94	@ 0x5e
 8008ee6:	5a52      	ldrh	r2, [r2, r1]
 8008ee8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eea:	0001      	movs	r1, r0
 8008eec:	187b      	adds	r3, r7, r1
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d044      	beq.n	8008f7e <UART_RxISR_16BIT_FIFOEN+0x336>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2268      	movs	r2, #104	@ 0x68
 8008ef8:	5a9b      	ldrh	r3, [r3, r2]
 8008efa:	187a      	adds	r2, r7, r1
 8008efc:	8812      	ldrh	r2, [r2, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d23d      	bcs.n	8008f7e <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f02:	f3ef 8310 	mrs	r3, PRIMASK
 8008f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f383 8810 	msr	PRIMASK, r3
}
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	491d      	ldr	r1, [pc, #116]	@ (8008f98 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8008f24:	400a      	ands	r2, r1
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f383 8810 	msr	PRIMASK, r3
}
 8008f32:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a19      	ldr	r2, [pc, #100]	@ (8008f9c <UART_RxISR_16BIT_FIFOEN+0x354>)
 8008f38:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f40:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f44:	2301      	movs	r3, #1
 8008f46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f383 8810 	msr	PRIMASK, r3
}
 8008f4e:	46c0      	nop			@ (mov r8, r8)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2120      	movs	r1, #32
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	f383 8810 	msr	PRIMASK, r3
}
 8008f6a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f6c:	e007      	b.n	8008f7e <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2108      	movs	r1, #8
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	619a      	str	r2, [r3, #24]
}
 8008f7e:	46c0      	nop			@ (mov r8, r8)
 8008f80:	46bd      	mov	sp, r7
 8008f82:	b022      	add	sp, #136	@ 0x88
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	46c0      	nop			@ (mov r8, r8)
 8008f88:	fffffeff 	.word	0xfffffeff
 8008f8c:	effffffe 	.word	0xeffffffe
 8008f90:	40008000 	.word	0x40008000
 8008f94:	fbffffff 	.word	0xfbffffff
 8008f98:	efffffff 	.word	0xefffffff
 8008f9c:	08008745 	.word	0x08008745

08008fa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fa8:	46c0      	nop			@ (mov r8, r8)
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b002      	add	sp, #8
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fb8:	46c0      	nop			@ (mov r8, r8)
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b002      	add	sp, #8
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fc8:	46c0      	nop			@ (mov r8, r8)
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b002      	add	sp, #8
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2284      	movs	r2, #132	@ 0x84
 8008fdc:	5c9b      	ldrb	r3, [r3, r2]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d101      	bne.n	8008fe6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e027      	b.n	8009036 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2284      	movs	r2, #132	@ 0x84
 8008fea:	2101      	movs	r1, #1
 8008fec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2288      	movs	r2, #136	@ 0x88
 8008ff2:	2124      	movs	r1, #36	@ 0x24
 8008ff4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2101      	movs	r1, #1
 800900a:	438a      	bics	r2, r1
 800900c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a0b      	ldr	r2, [pc, #44]	@ (8009040 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009012:	4013      	ands	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2288      	movs	r2, #136	@ 0x88
 8009028:	2120      	movs	r1, #32
 800902a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2284      	movs	r2, #132	@ 0x84
 8009030:	2100      	movs	r1, #0
 8009032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	0018      	movs	r0, r3
 8009038:	46bd      	mov	sp, r7
 800903a:	b004      	add	sp, #16
 800903c:	bd80      	pop	{r7, pc}
 800903e:	46c0      	nop			@ (mov r8, r8)
 8009040:	dfffffff 	.word	0xdfffffff

08009044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2284      	movs	r2, #132	@ 0x84
 8009052:	5c9b      	ldrb	r3, [r3, r2]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d101      	bne.n	800905c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009058:	2302      	movs	r3, #2
 800905a:	e02e      	b.n	80090ba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2284      	movs	r2, #132	@ 0x84
 8009060:	2101      	movs	r1, #1
 8009062:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2288      	movs	r2, #136	@ 0x88
 8009068:	2124      	movs	r1, #36	@ 0x24
 800906a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2101      	movs	r1, #1
 8009080:	438a      	bics	r2, r1
 8009082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	08d9      	lsrs	r1, r3, #3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0018      	movs	r0, r3
 800909c:	f000 f854 	bl	8009148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2288      	movs	r2, #136	@ 0x88
 80090ac:	2120      	movs	r1, #32
 80090ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2284      	movs	r2, #132	@ 0x84
 80090b4:	2100      	movs	r1, #0
 80090b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	0018      	movs	r0, r3
 80090bc:	46bd      	mov	sp, r7
 80090be:	b004      	add	sp, #16
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2284      	movs	r2, #132	@ 0x84
 80090d2:	5c9b      	ldrb	r3, [r3, r2]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090d8:	2302      	movs	r3, #2
 80090da:	e02f      	b.n	800913c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2284      	movs	r2, #132	@ 0x84
 80090e0:	2101      	movs	r1, #1
 80090e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2288      	movs	r2, #136	@ 0x88
 80090e8:	2124      	movs	r1, #36	@ 0x24
 80090ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2101      	movs	r1, #1
 8009100:	438a      	bics	r2, r1
 8009102:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	4a0e      	ldr	r2, [pc, #56]	@ (8009144 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800910c:	4013      	ands	r3, r2
 800910e:	0019      	movs	r1, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	0018      	movs	r0, r3
 800911e:	f000 f813 	bl	8009148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2288      	movs	r2, #136	@ 0x88
 800912e:	2120      	movs	r1, #32
 8009130:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2284      	movs	r2, #132	@ 0x84
 8009136:	2100      	movs	r1, #0
 8009138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	0018      	movs	r0, r3
 800913e:	46bd      	mov	sp, r7
 8009140:	b004      	add	sp, #16
 8009142:	bd80      	pop	{r7, pc}
 8009144:	f1ffffff 	.word	0xf1ffffff

08009148 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	226a      	movs	r2, #106	@ 0x6a
 800915c:	2101      	movs	r1, #1
 800915e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2268      	movs	r2, #104	@ 0x68
 8009164:	2101      	movs	r1, #1
 8009166:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009168:	e043      	b.n	80091f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800916a:	260f      	movs	r6, #15
 800916c:	19bb      	adds	r3, r7, r6
 800916e:	2208      	movs	r2, #8
 8009170:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009172:	200e      	movs	r0, #14
 8009174:	183b      	adds	r3, r7, r0
 8009176:	2208      	movs	r2, #8
 8009178:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	0e5b      	lsrs	r3, r3, #25
 8009182:	b2da      	uxtb	r2, r3
 8009184:	240d      	movs	r4, #13
 8009186:	193b      	adds	r3, r7, r4
 8009188:	2107      	movs	r1, #7
 800918a:	400a      	ands	r2, r1
 800918c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	0f5b      	lsrs	r3, r3, #29
 8009196:	b2da      	uxtb	r2, r3
 8009198:	250c      	movs	r5, #12
 800919a:	197b      	adds	r3, r7, r5
 800919c:	2107      	movs	r1, #7
 800919e:	400a      	ands	r2, r1
 80091a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	197a      	adds	r2, r7, r5
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	4914      	ldr	r1, [pc, #80]	@ (80091fc <UARTEx_SetNbDataToProcess+0xb4>)
 80091ac:	5c8a      	ldrb	r2, [r1, r2]
 80091ae:	435a      	muls	r2, r3
 80091b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80091b2:	197b      	adds	r3, r7, r5
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	4a12      	ldr	r2, [pc, #72]	@ (8009200 <UARTEx_SetNbDataToProcess+0xb8>)
 80091b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ba:	0019      	movs	r1, r3
 80091bc:	f7f7 f83e 	bl	800023c <__divsi3>
 80091c0:	0003      	movs	r3, r0
 80091c2:	b299      	uxth	r1, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	226a      	movs	r2, #106	@ 0x6a
 80091c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ca:	19bb      	adds	r3, r7, r6
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	193a      	adds	r2, r7, r4
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	490a      	ldr	r1, [pc, #40]	@ (80091fc <UARTEx_SetNbDataToProcess+0xb4>)
 80091d4:	5c8a      	ldrb	r2, [r1, r2]
 80091d6:	435a      	muls	r2, r3
 80091d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80091da:	193b      	adds	r3, r7, r4
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	4a08      	ldr	r2, [pc, #32]	@ (8009200 <UARTEx_SetNbDataToProcess+0xb8>)
 80091e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091e2:	0019      	movs	r1, r3
 80091e4:	f7f7 f82a 	bl	800023c <__divsi3>
 80091e8:	0003      	movs	r3, r0
 80091ea:	b299      	uxth	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2268      	movs	r2, #104	@ 0x68
 80091f0:	5299      	strh	r1, [r3, r2]
}
 80091f2:	46c0      	nop			@ (mov r8, r8)
 80091f4:	46bd      	mov	sp, r7
 80091f6:	b005      	add	sp, #20
 80091f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fa:	46c0      	nop			@ (mov r8, r8)
 80091fc:	08009ecc 	.word	0x08009ecc
 8009200:	08009ed4 	.word	0x08009ed4

08009204 <atoi>:
 8009204:	b510      	push	{r4, lr}
 8009206:	220a      	movs	r2, #10
 8009208:	2100      	movs	r1, #0
 800920a:	f000 f88b 	bl	8009324 <strtol>
 800920e:	bd10      	pop	{r4, pc}

08009210 <_strtol_l.isra.0>:
 8009210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009212:	b085      	sub	sp, #20
 8009214:	0017      	movs	r7, r2
 8009216:	001e      	movs	r6, r3
 8009218:	9003      	str	r0, [sp, #12]
 800921a:	9101      	str	r1, [sp, #4]
 800921c:	2b24      	cmp	r3, #36	@ 0x24
 800921e:	d823      	bhi.n	8009268 <_strtol_l.isra.0+0x58>
 8009220:	000c      	movs	r4, r1
 8009222:	2b01      	cmp	r3, #1
 8009224:	d020      	beq.n	8009268 <_strtol_l.isra.0+0x58>
 8009226:	4b3d      	ldr	r3, [pc, #244]	@ (800931c <_strtol_l.isra.0+0x10c>)
 8009228:	2208      	movs	r2, #8
 800922a:	469c      	mov	ip, r3
 800922c:	0023      	movs	r3, r4
 800922e:	4661      	mov	r1, ip
 8009230:	781d      	ldrb	r5, [r3, #0]
 8009232:	3401      	adds	r4, #1
 8009234:	5d48      	ldrb	r0, [r1, r5]
 8009236:	0001      	movs	r1, r0
 8009238:	4011      	ands	r1, r2
 800923a:	4210      	tst	r0, r2
 800923c:	d1f6      	bne.n	800922c <_strtol_l.isra.0+0x1c>
 800923e:	2d2d      	cmp	r5, #45	@ 0x2d
 8009240:	d119      	bne.n	8009276 <_strtol_l.isra.0+0x66>
 8009242:	7825      	ldrb	r5, [r4, #0]
 8009244:	1c9c      	adds	r4, r3, #2
 8009246:	2301      	movs	r3, #1
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	2210      	movs	r2, #16
 800924c:	0033      	movs	r3, r6
 800924e:	4393      	bics	r3, r2
 8009250:	d11d      	bne.n	800928e <_strtol_l.isra.0+0x7e>
 8009252:	2d30      	cmp	r5, #48	@ 0x30
 8009254:	d115      	bne.n	8009282 <_strtol_l.isra.0+0x72>
 8009256:	2120      	movs	r1, #32
 8009258:	7823      	ldrb	r3, [r4, #0]
 800925a:	438b      	bics	r3, r1
 800925c:	2b58      	cmp	r3, #88	@ 0x58
 800925e:	d110      	bne.n	8009282 <_strtol_l.isra.0+0x72>
 8009260:	7865      	ldrb	r5, [r4, #1]
 8009262:	3402      	adds	r4, #2
 8009264:	2610      	movs	r6, #16
 8009266:	e012      	b.n	800928e <_strtol_l.isra.0+0x7e>
 8009268:	f000 f8a6 	bl	80093b8 <__errno>
 800926c:	2316      	movs	r3, #22
 800926e:	6003      	str	r3, [r0, #0]
 8009270:	2000      	movs	r0, #0
 8009272:	b005      	add	sp, #20
 8009274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009276:	9100      	str	r1, [sp, #0]
 8009278:	2d2b      	cmp	r5, #43	@ 0x2b
 800927a:	d1e6      	bne.n	800924a <_strtol_l.isra.0+0x3a>
 800927c:	7825      	ldrb	r5, [r4, #0]
 800927e:	1c9c      	adds	r4, r3, #2
 8009280:	e7e3      	b.n	800924a <_strtol_l.isra.0+0x3a>
 8009282:	2e00      	cmp	r6, #0
 8009284:	d1ee      	bne.n	8009264 <_strtol_l.isra.0+0x54>
 8009286:	360a      	adds	r6, #10
 8009288:	2d30      	cmp	r5, #48	@ 0x30
 800928a:	d100      	bne.n	800928e <_strtol_l.isra.0+0x7e>
 800928c:	3e02      	subs	r6, #2
 800928e:	4a24      	ldr	r2, [pc, #144]	@ (8009320 <_strtol_l.isra.0+0x110>)
 8009290:	9b00      	ldr	r3, [sp, #0]
 8009292:	4694      	mov	ip, r2
 8009294:	4463      	add	r3, ip
 8009296:	0031      	movs	r1, r6
 8009298:	0018      	movs	r0, r3
 800929a:	9302      	str	r3, [sp, #8]
 800929c:	f7f6 ffca 	bl	8000234 <__aeabi_uidivmod>
 80092a0:	2200      	movs	r2, #0
 80092a2:	4684      	mov	ip, r0
 80092a4:	0010      	movs	r0, r2
 80092a6:	002b      	movs	r3, r5
 80092a8:	3b30      	subs	r3, #48	@ 0x30
 80092aa:	2b09      	cmp	r3, #9
 80092ac:	d811      	bhi.n	80092d2 <_strtol_l.isra.0+0xc2>
 80092ae:	001d      	movs	r5, r3
 80092b0:	42ae      	cmp	r6, r5
 80092b2:	dd1d      	ble.n	80092f0 <_strtol_l.isra.0+0xe0>
 80092b4:	1c53      	adds	r3, r2, #1
 80092b6:	d009      	beq.n	80092cc <_strtol_l.isra.0+0xbc>
 80092b8:	2201      	movs	r2, #1
 80092ba:	4252      	negs	r2, r2
 80092bc:	4584      	cmp	ip, r0
 80092be:	d305      	bcc.n	80092cc <_strtol_l.isra.0+0xbc>
 80092c0:	d101      	bne.n	80092c6 <_strtol_l.isra.0+0xb6>
 80092c2:	42a9      	cmp	r1, r5
 80092c4:	db11      	blt.n	80092ea <_strtol_l.isra.0+0xda>
 80092c6:	2201      	movs	r2, #1
 80092c8:	4370      	muls	r0, r6
 80092ca:	1828      	adds	r0, r5, r0
 80092cc:	7825      	ldrb	r5, [r4, #0]
 80092ce:	3401      	adds	r4, #1
 80092d0:	e7e9      	b.n	80092a6 <_strtol_l.isra.0+0x96>
 80092d2:	002b      	movs	r3, r5
 80092d4:	3b41      	subs	r3, #65	@ 0x41
 80092d6:	2b19      	cmp	r3, #25
 80092d8:	d801      	bhi.n	80092de <_strtol_l.isra.0+0xce>
 80092da:	3d37      	subs	r5, #55	@ 0x37
 80092dc:	e7e8      	b.n	80092b0 <_strtol_l.isra.0+0xa0>
 80092de:	002b      	movs	r3, r5
 80092e0:	3b61      	subs	r3, #97	@ 0x61
 80092e2:	2b19      	cmp	r3, #25
 80092e4:	d804      	bhi.n	80092f0 <_strtol_l.isra.0+0xe0>
 80092e6:	3d57      	subs	r5, #87	@ 0x57
 80092e8:	e7e2      	b.n	80092b0 <_strtol_l.isra.0+0xa0>
 80092ea:	2201      	movs	r2, #1
 80092ec:	4252      	negs	r2, r2
 80092ee:	e7ed      	b.n	80092cc <_strtol_l.isra.0+0xbc>
 80092f0:	1c53      	adds	r3, r2, #1
 80092f2:	d108      	bne.n	8009306 <_strtol_l.isra.0+0xf6>
 80092f4:	2322      	movs	r3, #34	@ 0x22
 80092f6:	9a03      	ldr	r2, [sp, #12]
 80092f8:	9802      	ldr	r0, [sp, #8]
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	d0b8      	beq.n	8009272 <_strtol_l.isra.0+0x62>
 8009300:	1e63      	subs	r3, r4, #1
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	e007      	b.n	8009316 <_strtol_l.isra.0+0x106>
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d000      	beq.n	800930e <_strtol_l.isra.0+0xfe>
 800930c:	4240      	negs	r0, r0
 800930e:	2f00      	cmp	r7, #0
 8009310:	d0af      	beq.n	8009272 <_strtol_l.isra.0+0x62>
 8009312:	2a00      	cmp	r2, #0
 8009314:	d1f4      	bne.n	8009300 <_strtol_l.isra.0+0xf0>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	e7aa      	b.n	8009272 <_strtol_l.isra.0+0x62>
 800931c:	08009edd 	.word	0x08009edd
 8009320:	7fffffff 	.word	0x7fffffff

08009324 <strtol>:
 8009324:	b510      	push	{r4, lr}
 8009326:	4c04      	ldr	r4, [pc, #16]	@ (8009338 <strtol+0x14>)
 8009328:	0013      	movs	r3, r2
 800932a:	000a      	movs	r2, r1
 800932c:	0001      	movs	r1, r0
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	f7ff ff6e 	bl	8009210 <_strtol_l.isra.0>
 8009334:	bd10      	pop	{r4, pc}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	2000004c 	.word	0x2000004c

0800933c <sniprintf>:
 800933c:	b40c      	push	{r2, r3}
 800933e:	b530      	push	{r4, r5, lr}
 8009340:	4b18      	ldr	r3, [pc, #96]	@ (80093a4 <sniprintf+0x68>)
 8009342:	000c      	movs	r4, r1
 8009344:	681d      	ldr	r5, [r3, #0]
 8009346:	b09d      	sub	sp, #116	@ 0x74
 8009348:	2900      	cmp	r1, #0
 800934a:	da08      	bge.n	800935e <sniprintf+0x22>
 800934c:	238b      	movs	r3, #139	@ 0x8b
 800934e:	2001      	movs	r0, #1
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	4240      	negs	r0, r0
 8009354:	b01d      	add	sp, #116	@ 0x74
 8009356:	bc30      	pop	{r4, r5}
 8009358:	bc08      	pop	{r3}
 800935a:	b002      	add	sp, #8
 800935c:	4718      	bx	r3
 800935e:	2382      	movs	r3, #130	@ 0x82
 8009360:	466a      	mov	r2, sp
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	8293      	strh	r3, [r2, #20]
 8009366:	2300      	movs	r3, #0
 8009368:	9002      	str	r0, [sp, #8]
 800936a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800936c:	9006      	str	r0, [sp, #24]
 800936e:	4299      	cmp	r1, r3
 8009370:	d000      	beq.n	8009374 <sniprintf+0x38>
 8009372:	1e4b      	subs	r3, r1, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	2301      	movs	r3, #1
 800937a:	466a      	mov	r2, sp
 800937c:	425b      	negs	r3, r3
 800937e:	82d3      	strh	r3, [r2, #22]
 8009380:	0028      	movs	r0, r5
 8009382:	ab21      	add	r3, sp, #132	@ 0x84
 8009384:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009386:	a902      	add	r1, sp, #8
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	f000 f9a5 	bl	80096d8 <_svfiprintf_r>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	da01      	bge.n	8009396 <sniprintf+0x5a>
 8009392:	238b      	movs	r3, #139	@ 0x8b
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	2c00      	cmp	r4, #0
 8009398:	d0dc      	beq.n	8009354 <sniprintf+0x18>
 800939a:	2200      	movs	r2, #0
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e7d8      	b.n	8009354 <sniprintf+0x18>
 80093a2:	46c0      	nop			@ (mov r8, r8)
 80093a4:	2000004c 	.word	0x2000004c

080093a8 <memset>:
 80093a8:	0003      	movs	r3, r0
 80093aa:	1882      	adds	r2, r0, r2
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d100      	bne.n	80093b2 <memset+0xa>
 80093b0:	4770      	bx	lr
 80093b2:	7019      	strb	r1, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	e7f9      	b.n	80093ac <memset+0x4>

080093b8 <__errno>:
 80093b8:	4b01      	ldr	r3, [pc, #4]	@ (80093c0 <__errno+0x8>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	4770      	bx	lr
 80093be:	46c0      	nop			@ (mov r8, r8)
 80093c0:	2000004c 	.word	0x2000004c

080093c4 <__libc_init_array>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	2600      	movs	r6, #0
 80093c8:	4c0c      	ldr	r4, [pc, #48]	@ (80093fc <__libc_init_array+0x38>)
 80093ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009400 <__libc_init_array+0x3c>)
 80093cc:	1b64      	subs	r4, r4, r5
 80093ce:	10a4      	asrs	r4, r4, #2
 80093d0:	42a6      	cmp	r6, r4
 80093d2:	d109      	bne.n	80093e8 <__libc_init_array+0x24>
 80093d4:	2600      	movs	r6, #0
 80093d6:	f000 fc69 	bl	8009cac <_init>
 80093da:	4c0a      	ldr	r4, [pc, #40]	@ (8009404 <__libc_init_array+0x40>)
 80093dc:	4d0a      	ldr	r5, [pc, #40]	@ (8009408 <__libc_init_array+0x44>)
 80093de:	1b64      	subs	r4, r4, r5
 80093e0:	10a4      	asrs	r4, r4, #2
 80093e2:	42a6      	cmp	r6, r4
 80093e4:	d105      	bne.n	80093f2 <__libc_init_array+0x2e>
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	00b3      	lsls	r3, r6, #2
 80093ea:	58eb      	ldr	r3, [r5, r3]
 80093ec:	4798      	blx	r3
 80093ee:	3601      	adds	r6, #1
 80093f0:	e7ee      	b.n	80093d0 <__libc_init_array+0xc>
 80093f2:	00b3      	lsls	r3, r6, #2
 80093f4:	58eb      	ldr	r3, [r5, r3]
 80093f6:	4798      	blx	r3
 80093f8:	3601      	adds	r6, #1
 80093fa:	e7f2      	b.n	80093e2 <__libc_init_array+0x1e>
 80093fc:	0800a018 	.word	0x0800a018
 8009400:	0800a018 	.word	0x0800a018
 8009404:	0800a01c 	.word	0x0800a01c
 8009408:	0800a018 	.word	0x0800a018

0800940c <__retarget_lock_acquire_recursive>:
 800940c:	4770      	bx	lr

0800940e <__retarget_lock_release_recursive>:
 800940e:	4770      	bx	lr

08009410 <strcpy>:
 8009410:	0003      	movs	r3, r0
 8009412:	780a      	ldrb	r2, [r1, #0]
 8009414:	3101      	adds	r1, #1
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	2a00      	cmp	r2, #0
 800941c:	d1f9      	bne.n	8009412 <strcpy+0x2>
 800941e:	4770      	bx	lr

08009420 <_free_r>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	0005      	movs	r5, r0
 8009424:	1e0c      	subs	r4, r1, #0
 8009426:	d010      	beq.n	800944a <_free_r+0x2a>
 8009428:	3c04      	subs	r4, #4
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	da00      	bge.n	8009432 <_free_r+0x12>
 8009430:	18e4      	adds	r4, r4, r3
 8009432:	0028      	movs	r0, r5
 8009434:	f000 f8e0 	bl	80095f8 <__malloc_lock>
 8009438:	4a1d      	ldr	r2, [pc, #116]	@ (80094b0 <_free_r+0x90>)
 800943a:	6813      	ldr	r3, [r2, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d105      	bne.n	800944c <_free_r+0x2c>
 8009440:	6063      	str	r3, [r4, #4]
 8009442:	6014      	str	r4, [r2, #0]
 8009444:	0028      	movs	r0, r5
 8009446:	f000 f8df 	bl	8009608 <__malloc_unlock>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	42a3      	cmp	r3, r4
 800944e:	d908      	bls.n	8009462 <_free_r+0x42>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	1821      	adds	r1, r4, r0
 8009454:	428b      	cmp	r3, r1
 8009456:	d1f3      	bne.n	8009440 <_free_r+0x20>
 8009458:	6819      	ldr	r1, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	1809      	adds	r1, r1, r0
 800945e:	6021      	str	r1, [r4, #0]
 8009460:	e7ee      	b.n	8009440 <_free_r+0x20>
 8009462:	001a      	movs	r2, r3
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <_free_r+0x4e>
 800946a:	42a3      	cmp	r3, r4
 800946c:	d9f9      	bls.n	8009462 <_free_r+0x42>
 800946e:	6811      	ldr	r1, [r2, #0]
 8009470:	1850      	adds	r0, r2, r1
 8009472:	42a0      	cmp	r0, r4
 8009474:	d10b      	bne.n	800948e <_free_r+0x6e>
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	1809      	adds	r1, r1, r0
 800947a:	1850      	adds	r0, r2, r1
 800947c:	6011      	str	r1, [r2, #0]
 800947e:	4283      	cmp	r3, r0
 8009480:	d1e0      	bne.n	8009444 <_free_r+0x24>
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	1841      	adds	r1, r0, r1
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	6053      	str	r3, [r2, #4]
 800948c:	e7da      	b.n	8009444 <_free_r+0x24>
 800948e:	42a0      	cmp	r0, r4
 8009490:	d902      	bls.n	8009498 <_free_r+0x78>
 8009492:	230c      	movs	r3, #12
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	e7d5      	b.n	8009444 <_free_r+0x24>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	1821      	adds	r1, r4, r0
 800949c:	428b      	cmp	r3, r1
 800949e:	d103      	bne.n	80094a8 <_free_r+0x88>
 80094a0:	6819      	ldr	r1, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	1809      	adds	r1, r1, r0
 80094a6:	6021      	str	r1, [r4, #0]
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	6054      	str	r4, [r2, #4]
 80094ac:	e7ca      	b.n	8009444 <_free_r+0x24>
 80094ae:	46c0      	nop			@ (mov r8, r8)
 80094b0:	200005a4 	.word	0x200005a4

080094b4 <sbrk_aligned>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4e0f      	ldr	r6, [pc, #60]	@ (80094f4 <sbrk_aligned+0x40>)
 80094b8:	000d      	movs	r5, r1
 80094ba:	6831      	ldr	r1, [r6, #0]
 80094bc:	0004      	movs	r4, r0
 80094be:	2900      	cmp	r1, #0
 80094c0:	d102      	bne.n	80094c8 <sbrk_aligned+0x14>
 80094c2:	f000 fb95 	bl	8009bf0 <_sbrk_r>
 80094c6:	6030      	str	r0, [r6, #0]
 80094c8:	0029      	movs	r1, r5
 80094ca:	0020      	movs	r0, r4
 80094cc:	f000 fb90 	bl	8009bf0 <_sbrk_r>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d103      	bne.n	80094dc <sbrk_aligned+0x28>
 80094d4:	2501      	movs	r5, #1
 80094d6:	426d      	negs	r5, r5
 80094d8:	0028      	movs	r0, r5
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	2303      	movs	r3, #3
 80094de:	1cc5      	adds	r5, r0, #3
 80094e0:	439d      	bics	r5, r3
 80094e2:	42a8      	cmp	r0, r5
 80094e4:	d0f8      	beq.n	80094d8 <sbrk_aligned+0x24>
 80094e6:	1a29      	subs	r1, r5, r0
 80094e8:	0020      	movs	r0, r4
 80094ea:	f000 fb81 	bl	8009bf0 <_sbrk_r>
 80094ee:	3001      	adds	r0, #1
 80094f0:	d1f2      	bne.n	80094d8 <sbrk_aligned+0x24>
 80094f2:	e7ef      	b.n	80094d4 <sbrk_aligned+0x20>
 80094f4:	200005a0 	.word	0x200005a0

080094f8 <_malloc_r>:
 80094f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094fa:	2203      	movs	r2, #3
 80094fc:	1ccb      	adds	r3, r1, #3
 80094fe:	4393      	bics	r3, r2
 8009500:	3308      	adds	r3, #8
 8009502:	0005      	movs	r5, r0
 8009504:	001f      	movs	r7, r3
 8009506:	2b0c      	cmp	r3, #12
 8009508:	d234      	bcs.n	8009574 <_malloc_r+0x7c>
 800950a:	270c      	movs	r7, #12
 800950c:	42b9      	cmp	r1, r7
 800950e:	d833      	bhi.n	8009578 <_malloc_r+0x80>
 8009510:	0028      	movs	r0, r5
 8009512:	f000 f871 	bl	80095f8 <__malloc_lock>
 8009516:	4e37      	ldr	r6, [pc, #220]	@ (80095f4 <_malloc_r+0xfc>)
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	001c      	movs	r4, r3
 800951c:	2c00      	cmp	r4, #0
 800951e:	d12f      	bne.n	8009580 <_malloc_r+0x88>
 8009520:	0039      	movs	r1, r7
 8009522:	0028      	movs	r0, r5
 8009524:	f7ff ffc6 	bl	80094b4 <sbrk_aligned>
 8009528:	0004      	movs	r4, r0
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	d15f      	bne.n	80095ee <_malloc_r+0xf6>
 800952e:	6834      	ldr	r4, [r6, #0]
 8009530:	9400      	str	r4, [sp, #0]
 8009532:	9b00      	ldr	r3, [sp, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d14a      	bne.n	80095ce <_malloc_r+0xd6>
 8009538:	2c00      	cmp	r4, #0
 800953a:	d052      	beq.n	80095e2 <_malloc_r+0xea>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	0028      	movs	r0, r5
 8009540:	18e3      	adds	r3, r4, r3
 8009542:	9900      	ldr	r1, [sp, #0]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f000 fb53 	bl	8009bf0 <_sbrk_r>
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	4283      	cmp	r3, r0
 800954e:	d148      	bne.n	80095e2 <_malloc_r+0xea>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	0028      	movs	r0, r5
 8009554:	1aff      	subs	r7, r7, r3
 8009556:	0039      	movs	r1, r7
 8009558:	f7ff ffac 	bl	80094b4 <sbrk_aligned>
 800955c:	3001      	adds	r0, #1
 800955e:	d040      	beq.n	80095e2 <_malloc_r+0xea>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	19db      	adds	r3, r3, r7
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	6833      	ldr	r3, [r6, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	2a00      	cmp	r2, #0
 800956c:	d133      	bne.n	80095d6 <_malloc_r+0xde>
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	6033      	str	r3, [r6, #0]
 8009572:	e019      	b.n	80095a8 <_malloc_r+0xb0>
 8009574:	2b00      	cmp	r3, #0
 8009576:	dac9      	bge.n	800950c <_malloc_r+0x14>
 8009578:	230c      	movs	r3, #12
 800957a:	602b      	str	r3, [r5, #0]
 800957c:	2000      	movs	r0, #0
 800957e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009580:	6821      	ldr	r1, [r4, #0]
 8009582:	1bc9      	subs	r1, r1, r7
 8009584:	d420      	bmi.n	80095c8 <_malloc_r+0xd0>
 8009586:	290b      	cmp	r1, #11
 8009588:	d90a      	bls.n	80095a0 <_malloc_r+0xa8>
 800958a:	19e2      	adds	r2, r4, r7
 800958c:	6027      	str	r7, [r4, #0]
 800958e:	42a3      	cmp	r3, r4
 8009590:	d104      	bne.n	800959c <_malloc_r+0xa4>
 8009592:	6032      	str	r2, [r6, #0]
 8009594:	6863      	ldr	r3, [r4, #4]
 8009596:	6011      	str	r1, [r2, #0]
 8009598:	6053      	str	r3, [r2, #4]
 800959a:	e005      	b.n	80095a8 <_malloc_r+0xb0>
 800959c:	605a      	str	r2, [r3, #4]
 800959e:	e7f9      	b.n	8009594 <_malloc_r+0x9c>
 80095a0:	6862      	ldr	r2, [r4, #4]
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	d10e      	bne.n	80095c4 <_malloc_r+0xcc>
 80095a6:	6032      	str	r2, [r6, #0]
 80095a8:	0028      	movs	r0, r5
 80095aa:	f000 f82d 	bl	8009608 <__malloc_unlock>
 80095ae:	0020      	movs	r0, r4
 80095b0:	2207      	movs	r2, #7
 80095b2:	300b      	adds	r0, #11
 80095b4:	1d23      	adds	r3, r4, #4
 80095b6:	4390      	bics	r0, r2
 80095b8:	1ac2      	subs	r2, r0, r3
 80095ba:	4298      	cmp	r0, r3
 80095bc:	d0df      	beq.n	800957e <_malloc_r+0x86>
 80095be:	1a1b      	subs	r3, r3, r0
 80095c0:	50a3      	str	r3, [r4, r2]
 80095c2:	e7dc      	b.n	800957e <_malloc_r+0x86>
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	e7ef      	b.n	80095a8 <_malloc_r+0xb0>
 80095c8:	0023      	movs	r3, r4
 80095ca:	6864      	ldr	r4, [r4, #4]
 80095cc:	e7a6      	b.n	800951c <_malloc_r+0x24>
 80095ce:	9c00      	ldr	r4, [sp, #0]
 80095d0:	6863      	ldr	r3, [r4, #4]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	e7ad      	b.n	8009532 <_malloc_r+0x3a>
 80095d6:	001a      	movs	r2, r3
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	42a3      	cmp	r3, r4
 80095dc:	d1fb      	bne.n	80095d6 <_malloc_r+0xde>
 80095de:	2300      	movs	r3, #0
 80095e0:	e7da      	b.n	8009598 <_malloc_r+0xa0>
 80095e2:	230c      	movs	r3, #12
 80095e4:	0028      	movs	r0, r5
 80095e6:	602b      	str	r3, [r5, #0]
 80095e8:	f000 f80e 	bl	8009608 <__malloc_unlock>
 80095ec:	e7c6      	b.n	800957c <_malloc_r+0x84>
 80095ee:	6007      	str	r7, [r0, #0]
 80095f0:	e7da      	b.n	80095a8 <_malloc_r+0xb0>
 80095f2:	46c0      	nop			@ (mov r8, r8)
 80095f4:	200005a4 	.word	0x200005a4

080095f8 <__malloc_lock>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	4802      	ldr	r0, [pc, #8]	@ (8009604 <__malloc_lock+0xc>)
 80095fc:	f7ff ff06 	bl	800940c <__retarget_lock_acquire_recursive>
 8009600:	bd10      	pop	{r4, pc}
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	2000059c 	.word	0x2000059c

08009608 <__malloc_unlock>:
 8009608:	b510      	push	{r4, lr}
 800960a:	4802      	ldr	r0, [pc, #8]	@ (8009614 <__malloc_unlock+0xc>)
 800960c:	f7ff feff 	bl	800940e <__retarget_lock_release_recursive>
 8009610:	bd10      	pop	{r4, pc}
 8009612:	46c0      	nop			@ (mov r8, r8)
 8009614:	2000059c 	.word	0x2000059c

08009618 <__ssputs_r>:
 8009618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800961a:	688e      	ldr	r6, [r1, #8]
 800961c:	b085      	sub	sp, #20
 800961e:	001f      	movs	r7, r3
 8009620:	000c      	movs	r4, r1
 8009622:	680b      	ldr	r3, [r1, #0]
 8009624:	9002      	str	r0, [sp, #8]
 8009626:	9203      	str	r2, [sp, #12]
 8009628:	42be      	cmp	r6, r7
 800962a:	d830      	bhi.n	800968e <__ssputs_r+0x76>
 800962c:	210c      	movs	r1, #12
 800962e:	5e62      	ldrsh	r2, [r4, r1]
 8009630:	2190      	movs	r1, #144	@ 0x90
 8009632:	00c9      	lsls	r1, r1, #3
 8009634:	420a      	tst	r2, r1
 8009636:	d028      	beq.n	800968a <__ssputs_r+0x72>
 8009638:	2003      	movs	r0, #3
 800963a:	6921      	ldr	r1, [r4, #16]
 800963c:	1a5b      	subs	r3, r3, r1
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	6963      	ldr	r3, [r4, #20]
 8009642:	4343      	muls	r3, r0
 8009644:	9801      	ldr	r0, [sp, #4]
 8009646:	0fdd      	lsrs	r5, r3, #31
 8009648:	18ed      	adds	r5, r5, r3
 800964a:	1c7b      	adds	r3, r7, #1
 800964c:	181b      	adds	r3, r3, r0
 800964e:	106d      	asrs	r5, r5, #1
 8009650:	42ab      	cmp	r3, r5
 8009652:	d900      	bls.n	8009656 <__ssputs_r+0x3e>
 8009654:	001d      	movs	r5, r3
 8009656:	0552      	lsls	r2, r2, #21
 8009658:	d528      	bpl.n	80096ac <__ssputs_r+0x94>
 800965a:	0029      	movs	r1, r5
 800965c:	9802      	ldr	r0, [sp, #8]
 800965e:	f7ff ff4b 	bl	80094f8 <_malloc_r>
 8009662:	1e06      	subs	r6, r0, #0
 8009664:	d02c      	beq.n	80096c0 <__ssputs_r+0xa8>
 8009666:	9a01      	ldr	r2, [sp, #4]
 8009668:	6921      	ldr	r1, [r4, #16]
 800966a:	f000 fade 	bl	8009c2a <memcpy>
 800966e:	89a2      	ldrh	r2, [r4, #12]
 8009670:	4b18      	ldr	r3, [pc, #96]	@ (80096d4 <__ssputs_r+0xbc>)
 8009672:	401a      	ands	r2, r3
 8009674:	2380      	movs	r3, #128	@ 0x80
 8009676:	4313      	orrs	r3, r2
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	6126      	str	r6, [r4, #16]
 800967e:	18f6      	adds	r6, r6, r3
 8009680:	6026      	str	r6, [r4, #0]
 8009682:	003e      	movs	r6, r7
 8009684:	6165      	str	r5, [r4, #20]
 8009686:	1aed      	subs	r5, r5, r3
 8009688:	60a5      	str	r5, [r4, #8]
 800968a:	42be      	cmp	r6, r7
 800968c:	d900      	bls.n	8009690 <__ssputs_r+0x78>
 800968e:	003e      	movs	r6, r7
 8009690:	0032      	movs	r2, r6
 8009692:	9903      	ldr	r1, [sp, #12]
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	f000 fa99 	bl	8009bcc <memmove>
 800969a:	2000      	movs	r0, #0
 800969c:	68a3      	ldr	r3, [r4, #8]
 800969e:	1b9b      	subs	r3, r3, r6
 80096a0:	60a3      	str	r3, [r4, #8]
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	199b      	adds	r3, r3, r6
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	b005      	add	sp, #20
 80096aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ac:	002a      	movs	r2, r5
 80096ae:	9802      	ldr	r0, [sp, #8]
 80096b0:	f000 fac4 	bl	8009c3c <_realloc_r>
 80096b4:	1e06      	subs	r6, r0, #0
 80096b6:	d1e0      	bne.n	800967a <__ssputs_r+0x62>
 80096b8:	6921      	ldr	r1, [r4, #16]
 80096ba:	9802      	ldr	r0, [sp, #8]
 80096bc:	f7ff feb0 	bl	8009420 <_free_r>
 80096c0:	230c      	movs	r3, #12
 80096c2:	2001      	movs	r0, #1
 80096c4:	9a02      	ldr	r2, [sp, #8]
 80096c6:	4240      	negs	r0, r0
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	89a2      	ldrh	r2, [r4, #12]
 80096cc:	3334      	adds	r3, #52	@ 0x34
 80096ce:	4313      	orrs	r3, r2
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	e7e9      	b.n	80096a8 <__ssputs_r+0x90>
 80096d4:	fffffb7f 	.word	0xfffffb7f

080096d8 <_svfiprintf_r>:
 80096d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096da:	b0a1      	sub	sp, #132	@ 0x84
 80096dc:	9003      	str	r0, [sp, #12]
 80096de:	001d      	movs	r5, r3
 80096e0:	898b      	ldrh	r3, [r1, #12]
 80096e2:	000f      	movs	r7, r1
 80096e4:	0016      	movs	r6, r2
 80096e6:	061b      	lsls	r3, r3, #24
 80096e8:	d511      	bpl.n	800970e <_svfiprintf_r+0x36>
 80096ea:	690b      	ldr	r3, [r1, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10e      	bne.n	800970e <_svfiprintf_r+0x36>
 80096f0:	2140      	movs	r1, #64	@ 0x40
 80096f2:	f7ff ff01 	bl	80094f8 <_malloc_r>
 80096f6:	6038      	str	r0, [r7, #0]
 80096f8:	6138      	str	r0, [r7, #16]
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d105      	bne.n	800970a <_svfiprintf_r+0x32>
 80096fe:	230c      	movs	r3, #12
 8009700:	9a03      	ldr	r2, [sp, #12]
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	2001      	movs	r0, #1
 8009706:	4240      	negs	r0, r0
 8009708:	e0cf      	b.n	80098aa <_svfiprintf_r+0x1d2>
 800970a:	2340      	movs	r3, #64	@ 0x40
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	2300      	movs	r3, #0
 8009710:	ac08      	add	r4, sp, #32
 8009712:	6163      	str	r3, [r4, #20]
 8009714:	3320      	adds	r3, #32
 8009716:	7663      	strb	r3, [r4, #25]
 8009718:	3310      	adds	r3, #16
 800971a:	76a3      	strb	r3, [r4, #26]
 800971c:	9507      	str	r5, [sp, #28]
 800971e:	0035      	movs	r5, r6
 8009720:	782b      	ldrb	r3, [r5, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <_svfiprintf_r+0x52>
 8009726:	2b25      	cmp	r3, #37	@ 0x25
 8009728:	d148      	bne.n	80097bc <_svfiprintf_r+0xe4>
 800972a:	1bab      	subs	r3, r5, r6
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	42b5      	cmp	r5, r6
 8009730:	d00b      	beq.n	800974a <_svfiprintf_r+0x72>
 8009732:	0032      	movs	r2, r6
 8009734:	0039      	movs	r1, r7
 8009736:	9803      	ldr	r0, [sp, #12]
 8009738:	f7ff ff6e 	bl	8009618 <__ssputs_r>
 800973c:	3001      	adds	r0, #1
 800973e:	d100      	bne.n	8009742 <_svfiprintf_r+0x6a>
 8009740:	e0ae      	b.n	80098a0 <_svfiprintf_r+0x1c8>
 8009742:	6963      	ldr	r3, [r4, #20]
 8009744:	9a05      	ldr	r2, [sp, #20]
 8009746:	189b      	adds	r3, r3, r2
 8009748:	6163      	str	r3, [r4, #20]
 800974a:	782b      	ldrb	r3, [r5, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d100      	bne.n	8009752 <_svfiprintf_r+0x7a>
 8009750:	e0a6      	b.n	80098a0 <_svfiprintf_r+0x1c8>
 8009752:	2201      	movs	r2, #1
 8009754:	2300      	movs	r3, #0
 8009756:	4252      	negs	r2, r2
 8009758:	6062      	str	r2, [r4, #4]
 800975a:	a904      	add	r1, sp, #16
 800975c:	3254      	adds	r2, #84	@ 0x54
 800975e:	1852      	adds	r2, r2, r1
 8009760:	1c6e      	adds	r6, r5, #1
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	60e3      	str	r3, [r4, #12]
 8009766:	60a3      	str	r3, [r4, #8]
 8009768:	7013      	strb	r3, [r2, #0]
 800976a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800976c:	4b54      	ldr	r3, [pc, #336]	@ (80098c0 <_svfiprintf_r+0x1e8>)
 800976e:	2205      	movs	r2, #5
 8009770:	0018      	movs	r0, r3
 8009772:	7831      	ldrb	r1, [r6, #0]
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	f000 fa4d 	bl	8009c14 <memchr>
 800977a:	1c75      	adds	r5, r6, #1
 800977c:	2800      	cmp	r0, #0
 800977e:	d11f      	bne.n	80097c0 <_svfiprintf_r+0xe8>
 8009780:	6822      	ldr	r2, [r4, #0]
 8009782:	06d3      	lsls	r3, r2, #27
 8009784:	d504      	bpl.n	8009790 <_svfiprintf_r+0xb8>
 8009786:	2353      	movs	r3, #83	@ 0x53
 8009788:	a904      	add	r1, sp, #16
 800978a:	185b      	adds	r3, r3, r1
 800978c:	2120      	movs	r1, #32
 800978e:	7019      	strb	r1, [r3, #0]
 8009790:	0713      	lsls	r3, r2, #28
 8009792:	d504      	bpl.n	800979e <_svfiprintf_r+0xc6>
 8009794:	2353      	movs	r3, #83	@ 0x53
 8009796:	a904      	add	r1, sp, #16
 8009798:	185b      	adds	r3, r3, r1
 800979a:	212b      	movs	r1, #43	@ 0x2b
 800979c:	7019      	strb	r1, [r3, #0]
 800979e:	7833      	ldrb	r3, [r6, #0]
 80097a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a2:	d016      	beq.n	80097d2 <_svfiprintf_r+0xfa>
 80097a4:	0035      	movs	r5, r6
 80097a6:	2100      	movs	r1, #0
 80097a8:	200a      	movs	r0, #10
 80097aa:	68e3      	ldr	r3, [r4, #12]
 80097ac:	782a      	ldrb	r2, [r5, #0]
 80097ae:	1c6e      	adds	r6, r5, #1
 80097b0:	3a30      	subs	r2, #48	@ 0x30
 80097b2:	2a09      	cmp	r2, #9
 80097b4:	d950      	bls.n	8009858 <_svfiprintf_r+0x180>
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d111      	bne.n	80097de <_svfiprintf_r+0x106>
 80097ba:	e017      	b.n	80097ec <_svfiprintf_r+0x114>
 80097bc:	3501      	adds	r5, #1
 80097be:	e7af      	b.n	8009720 <_svfiprintf_r+0x48>
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	1ac0      	subs	r0, r0, r3
 80097c6:	2301      	movs	r3, #1
 80097c8:	4083      	lsls	r3, r0
 80097ca:	4313      	orrs	r3, r2
 80097cc:	002e      	movs	r6, r5
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	e7cc      	b.n	800976c <_svfiprintf_r+0x94>
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	1d19      	adds	r1, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9107      	str	r1, [sp, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db01      	blt.n	80097e2 <_svfiprintf_r+0x10a>
 80097de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097e0:	e004      	b.n	80097ec <_svfiprintf_r+0x114>
 80097e2:	425b      	negs	r3, r3
 80097e4:	60e3      	str	r3, [r4, #12]
 80097e6:	2302      	movs	r3, #2
 80097e8:	4313      	orrs	r3, r2
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	782b      	ldrb	r3, [r5, #0]
 80097ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80097f0:	d10c      	bne.n	800980c <_svfiprintf_r+0x134>
 80097f2:	786b      	ldrb	r3, [r5, #1]
 80097f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097f6:	d134      	bne.n	8009862 <_svfiprintf_r+0x18a>
 80097f8:	9b07      	ldr	r3, [sp, #28]
 80097fa:	3502      	adds	r5, #2
 80097fc:	1d1a      	adds	r2, r3, #4
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	9207      	str	r2, [sp, #28]
 8009802:	2b00      	cmp	r3, #0
 8009804:	da01      	bge.n	800980a <_svfiprintf_r+0x132>
 8009806:	2301      	movs	r3, #1
 8009808:	425b      	negs	r3, r3
 800980a:	9309      	str	r3, [sp, #36]	@ 0x24
 800980c:	4e2d      	ldr	r6, [pc, #180]	@ (80098c4 <_svfiprintf_r+0x1ec>)
 800980e:	2203      	movs	r2, #3
 8009810:	0030      	movs	r0, r6
 8009812:	7829      	ldrb	r1, [r5, #0]
 8009814:	f000 f9fe 	bl	8009c14 <memchr>
 8009818:	2800      	cmp	r0, #0
 800981a:	d006      	beq.n	800982a <_svfiprintf_r+0x152>
 800981c:	2340      	movs	r3, #64	@ 0x40
 800981e:	1b80      	subs	r0, r0, r6
 8009820:	4083      	lsls	r3, r0
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	3501      	adds	r5, #1
 8009826:	4313      	orrs	r3, r2
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	7829      	ldrb	r1, [r5, #0]
 800982c:	2206      	movs	r2, #6
 800982e:	4826      	ldr	r0, [pc, #152]	@ (80098c8 <_svfiprintf_r+0x1f0>)
 8009830:	1c6e      	adds	r6, r5, #1
 8009832:	7621      	strb	r1, [r4, #24]
 8009834:	f000 f9ee 	bl	8009c14 <memchr>
 8009838:	2800      	cmp	r0, #0
 800983a:	d038      	beq.n	80098ae <_svfiprintf_r+0x1d6>
 800983c:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <_svfiprintf_r+0x1f4>)
 800983e:	2b00      	cmp	r3, #0
 8009840:	d122      	bne.n	8009888 <_svfiprintf_r+0x1b0>
 8009842:	2207      	movs	r2, #7
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	3307      	adds	r3, #7
 8009848:	4393      	bics	r3, r2
 800984a:	3308      	adds	r3, #8
 800984c:	9307      	str	r3, [sp, #28]
 800984e:	6963      	ldr	r3, [r4, #20]
 8009850:	9a04      	ldr	r2, [sp, #16]
 8009852:	189b      	adds	r3, r3, r2
 8009854:	6163      	str	r3, [r4, #20]
 8009856:	e762      	b.n	800971e <_svfiprintf_r+0x46>
 8009858:	4343      	muls	r3, r0
 800985a:	0035      	movs	r5, r6
 800985c:	2101      	movs	r1, #1
 800985e:	189b      	adds	r3, r3, r2
 8009860:	e7a4      	b.n	80097ac <_svfiprintf_r+0xd4>
 8009862:	2300      	movs	r3, #0
 8009864:	200a      	movs	r0, #10
 8009866:	0019      	movs	r1, r3
 8009868:	3501      	adds	r5, #1
 800986a:	6063      	str	r3, [r4, #4]
 800986c:	782a      	ldrb	r2, [r5, #0]
 800986e:	1c6e      	adds	r6, r5, #1
 8009870:	3a30      	subs	r2, #48	@ 0x30
 8009872:	2a09      	cmp	r2, #9
 8009874:	d903      	bls.n	800987e <_svfiprintf_r+0x1a6>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0c8      	beq.n	800980c <_svfiprintf_r+0x134>
 800987a:	9109      	str	r1, [sp, #36]	@ 0x24
 800987c:	e7c6      	b.n	800980c <_svfiprintf_r+0x134>
 800987e:	4341      	muls	r1, r0
 8009880:	0035      	movs	r5, r6
 8009882:	2301      	movs	r3, #1
 8009884:	1889      	adds	r1, r1, r2
 8009886:	e7f1      	b.n	800986c <_svfiprintf_r+0x194>
 8009888:	aa07      	add	r2, sp, #28
 800988a:	9200      	str	r2, [sp, #0]
 800988c:	0021      	movs	r1, r4
 800988e:	003a      	movs	r2, r7
 8009890:	4b0f      	ldr	r3, [pc, #60]	@ (80098d0 <_svfiprintf_r+0x1f8>)
 8009892:	9803      	ldr	r0, [sp, #12]
 8009894:	e000      	b.n	8009898 <_svfiprintf_r+0x1c0>
 8009896:	bf00      	nop
 8009898:	9004      	str	r0, [sp, #16]
 800989a:	9b04      	ldr	r3, [sp, #16]
 800989c:	3301      	adds	r3, #1
 800989e:	d1d6      	bne.n	800984e <_svfiprintf_r+0x176>
 80098a0:	89bb      	ldrh	r3, [r7, #12]
 80098a2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80098a4:	065b      	lsls	r3, r3, #25
 80098a6:	d500      	bpl.n	80098aa <_svfiprintf_r+0x1d2>
 80098a8:	e72c      	b.n	8009704 <_svfiprintf_r+0x2c>
 80098aa:	b021      	add	sp, #132	@ 0x84
 80098ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ae:	aa07      	add	r2, sp, #28
 80098b0:	9200      	str	r2, [sp, #0]
 80098b2:	0021      	movs	r1, r4
 80098b4:	003a      	movs	r2, r7
 80098b6:	4b06      	ldr	r3, [pc, #24]	@ (80098d0 <_svfiprintf_r+0x1f8>)
 80098b8:	9803      	ldr	r0, [sp, #12]
 80098ba:	f000 f87b 	bl	80099b4 <_printf_i>
 80098be:	e7eb      	b.n	8009898 <_svfiprintf_r+0x1c0>
 80098c0:	08009fdd 	.word	0x08009fdd
 80098c4:	08009fe3 	.word	0x08009fe3
 80098c8:	08009fe7 	.word	0x08009fe7
 80098cc:	00000000 	.word	0x00000000
 80098d0:	08009619 	.word	0x08009619

080098d4 <_printf_common>:
 80098d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098d6:	0016      	movs	r6, r2
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	688a      	ldr	r2, [r1, #8]
 80098dc:	690b      	ldr	r3, [r1, #16]
 80098de:	000c      	movs	r4, r1
 80098e0:	9000      	str	r0, [sp, #0]
 80098e2:	4293      	cmp	r3, r2
 80098e4:	da00      	bge.n	80098e8 <_printf_common+0x14>
 80098e6:	0013      	movs	r3, r2
 80098e8:	0022      	movs	r2, r4
 80098ea:	6033      	str	r3, [r6, #0]
 80098ec:	3243      	adds	r2, #67	@ 0x43
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	d001      	beq.n	80098f8 <_printf_common+0x24>
 80098f4:	3301      	adds	r3, #1
 80098f6:	6033      	str	r3, [r6, #0]
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	069b      	lsls	r3, r3, #26
 80098fc:	d502      	bpl.n	8009904 <_printf_common+0x30>
 80098fe:	6833      	ldr	r3, [r6, #0]
 8009900:	3302      	adds	r3, #2
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	6822      	ldr	r2, [r4, #0]
 8009906:	2306      	movs	r3, #6
 8009908:	0015      	movs	r5, r2
 800990a:	401d      	ands	r5, r3
 800990c:	421a      	tst	r2, r3
 800990e:	d027      	beq.n	8009960 <_printf_common+0x8c>
 8009910:	0023      	movs	r3, r4
 8009912:	3343      	adds	r3, #67	@ 0x43
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	1e5a      	subs	r2, r3, #1
 8009918:	4193      	sbcs	r3, r2
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	0692      	lsls	r2, r2, #26
 800991e:	d430      	bmi.n	8009982 <_printf_common+0xae>
 8009920:	0022      	movs	r2, r4
 8009922:	9901      	ldr	r1, [sp, #4]
 8009924:	9800      	ldr	r0, [sp, #0]
 8009926:	9d08      	ldr	r5, [sp, #32]
 8009928:	3243      	adds	r2, #67	@ 0x43
 800992a:	47a8      	blx	r5
 800992c:	3001      	adds	r0, #1
 800992e:	d025      	beq.n	800997c <_printf_common+0xa8>
 8009930:	2206      	movs	r2, #6
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	2500      	movs	r5, #0
 8009936:	4013      	ands	r3, r2
 8009938:	2b04      	cmp	r3, #4
 800993a:	d105      	bne.n	8009948 <_printf_common+0x74>
 800993c:	6833      	ldr	r3, [r6, #0]
 800993e:	68e5      	ldr	r5, [r4, #12]
 8009940:	1aed      	subs	r5, r5, r3
 8009942:	43eb      	mvns	r3, r5
 8009944:	17db      	asrs	r3, r3, #31
 8009946:	401d      	ands	r5, r3
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	4293      	cmp	r3, r2
 800994e:	dd01      	ble.n	8009954 <_printf_common+0x80>
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	18ed      	adds	r5, r5, r3
 8009954:	2600      	movs	r6, #0
 8009956:	42b5      	cmp	r5, r6
 8009958:	d120      	bne.n	800999c <_printf_common+0xc8>
 800995a:	2000      	movs	r0, #0
 800995c:	e010      	b.n	8009980 <_printf_common+0xac>
 800995e:	3501      	adds	r5, #1
 8009960:	68e3      	ldr	r3, [r4, #12]
 8009962:	6832      	ldr	r2, [r6, #0]
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	42ab      	cmp	r3, r5
 8009968:	ddd2      	ble.n	8009910 <_printf_common+0x3c>
 800996a:	0022      	movs	r2, r4
 800996c:	2301      	movs	r3, #1
 800996e:	9901      	ldr	r1, [sp, #4]
 8009970:	9800      	ldr	r0, [sp, #0]
 8009972:	9f08      	ldr	r7, [sp, #32]
 8009974:	3219      	adds	r2, #25
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	d1f0      	bne.n	800995e <_printf_common+0x8a>
 800997c:	2001      	movs	r0, #1
 800997e:	4240      	negs	r0, r0
 8009980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009982:	2030      	movs	r0, #48	@ 0x30
 8009984:	18e1      	adds	r1, r4, r3
 8009986:	3143      	adds	r1, #67	@ 0x43
 8009988:	7008      	strb	r0, [r1, #0]
 800998a:	0021      	movs	r1, r4
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	3145      	adds	r1, #69	@ 0x45
 8009990:	7809      	ldrb	r1, [r1, #0]
 8009992:	18a2      	adds	r2, r4, r2
 8009994:	3243      	adds	r2, #67	@ 0x43
 8009996:	3302      	adds	r3, #2
 8009998:	7011      	strb	r1, [r2, #0]
 800999a:	e7c1      	b.n	8009920 <_printf_common+0x4c>
 800999c:	0022      	movs	r2, r4
 800999e:	2301      	movs	r3, #1
 80099a0:	9901      	ldr	r1, [sp, #4]
 80099a2:	9800      	ldr	r0, [sp, #0]
 80099a4:	9f08      	ldr	r7, [sp, #32]
 80099a6:	321a      	adds	r2, #26
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0e6      	beq.n	800997c <_printf_common+0xa8>
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7d1      	b.n	8009956 <_printf_common+0x82>
	...

080099b4 <_printf_i>:
 80099b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b6:	b08b      	sub	sp, #44	@ 0x2c
 80099b8:	9206      	str	r2, [sp, #24]
 80099ba:	000a      	movs	r2, r1
 80099bc:	3243      	adds	r2, #67	@ 0x43
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	9005      	str	r0, [sp, #20]
 80099c2:	9203      	str	r2, [sp, #12]
 80099c4:	7e0a      	ldrb	r2, [r1, #24]
 80099c6:	000c      	movs	r4, r1
 80099c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099ca:	2a78      	cmp	r2, #120	@ 0x78
 80099cc:	d809      	bhi.n	80099e2 <_printf_i+0x2e>
 80099ce:	2a62      	cmp	r2, #98	@ 0x62
 80099d0:	d80b      	bhi.n	80099ea <_printf_i+0x36>
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d100      	bne.n	80099d8 <_printf_i+0x24>
 80099d6:	e0ba      	b.n	8009b4e <_printf_i+0x19a>
 80099d8:	497a      	ldr	r1, [pc, #488]	@ (8009bc4 <_printf_i+0x210>)
 80099da:	9104      	str	r1, [sp, #16]
 80099dc:	2a58      	cmp	r2, #88	@ 0x58
 80099de:	d100      	bne.n	80099e2 <_printf_i+0x2e>
 80099e0:	e08e      	b.n	8009b00 <_printf_i+0x14c>
 80099e2:	0025      	movs	r5, r4
 80099e4:	3542      	adds	r5, #66	@ 0x42
 80099e6:	702a      	strb	r2, [r5, #0]
 80099e8:	e022      	b.n	8009a30 <_printf_i+0x7c>
 80099ea:	0010      	movs	r0, r2
 80099ec:	3863      	subs	r0, #99	@ 0x63
 80099ee:	2815      	cmp	r0, #21
 80099f0:	d8f7      	bhi.n	80099e2 <_printf_i+0x2e>
 80099f2:	f7f6 fb8f 	bl	8000114 <__gnu_thumb1_case_shi>
 80099f6:	0016      	.short	0x0016
 80099f8:	fff6001f 	.word	0xfff6001f
 80099fc:	fff6fff6 	.word	0xfff6fff6
 8009a00:	001ffff6 	.word	0x001ffff6
 8009a04:	fff6fff6 	.word	0xfff6fff6
 8009a08:	fff6fff6 	.word	0xfff6fff6
 8009a0c:	0036009f 	.word	0x0036009f
 8009a10:	fff6007e 	.word	0xfff6007e
 8009a14:	00b0fff6 	.word	0x00b0fff6
 8009a18:	0036fff6 	.word	0x0036fff6
 8009a1c:	fff6fff6 	.word	0xfff6fff6
 8009a20:	0082      	.short	0x0082
 8009a22:	0025      	movs	r5, r4
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	3542      	adds	r5, #66	@ 0x42
 8009a28:	1d11      	adds	r1, r2, #4
 8009a2a:	6019      	str	r1, [r3, #0]
 8009a2c:	6813      	ldr	r3, [r2, #0]
 8009a2e:	702b      	strb	r3, [r5, #0]
 8009a30:	2301      	movs	r3, #1
 8009a32:	e09e      	b.n	8009b72 <_printf_i+0x1be>
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	6809      	ldr	r1, [r1, #0]
 8009a38:	1d02      	adds	r2, r0, #4
 8009a3a:	060d      	lsls	r5, r1, #24
 8009a3c:	d50b      	bpl.n	8009a56 <_printf_i+0xa2>
 8009a3e:	6806      	ldr	r6, [r0, #0]
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	2e00      	cmp	r6, #0
 8009a44:	da03      	bge.n	8009a4e <_printf_i+0x9a>
 8009a46:	232d      	movs	r3, #45	@ 0x2d
 8009a48:	9a03      	ldr	r2, [sp, #12]
 8009a4a:	4276      	negs	r6, r6
 8009a4c:	7013      	strb	r3, [r2, #0]
 8009a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8009bc4 <_printf_i+0x210>)
 8009a50:	270a      	movs	r7, #10
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	e018      	b.n	8009a88 <_printf_i+0xd4>
 8009a56:	6806      	ldr	r6, [r0, #0]
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	0649      	lsls	r1, r1, #25
 8009a5c:	d5f1      	bpl.n	8009a42 <_printf_i+0x8e>
 8009a5e:	b236      	sxth	r6, r6
 8009a60:	e7ef      	b.n	8009a42 <_printf_i+0x8e>
 8009a62:	6808      	ldr	r0, [r1, #0]
 8009a64:	6819      	ldr	r1, [r3, #0]
 8009a66:	c940      	ldmia	r1!, {r6}
 8009a68:	0605      	lsls	r5, r0, #24
 8009a6a:	d402      	bmi.n	8009a72 <_printf_i+0xbe>
 8009a6c:	0640      	lsls	r0, r0, #25
 8009a6e:	d500      	bpl.n	8009a72 <_printf_i+0xbe>
 8009a70:	b2b6      	uxth	r6, r6
 8009a72:	6019      	str	r1, [r3, #0]
 8009a74:	4b53      	ldr	r3, [pc, #332]	@ (8009bc4 <_printf_i+0x210>)
 8009a76:	270a      	movs	r7, #10
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	2a6f      	cmp	r2, #111	@ 0x6f
 8009a7c:	d100      	bne.n	8009a80 <_printf_i+0xcc>
 8009a7e:	3f02      	subs	r7, #2
 8009a80:	0023      	movs	r3, r4
 8009a82:	2200      	movs	r2, #0
 8009a84:	3343      	adds	r3, #67	@ 0x43
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	6863      	ldr	r3, [r4, #4]
 8009a8a:	60a3      	str	r3, [r4, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	db06      	blt.n	8009a9e <_printf_i+0xea>
 8009a90:	2104      	movs	r1, #4
 8009a92:	6822      	ldr	r2, [r4, #0]
 8009a94:	9d03      	ldr	r5, [sp, #12]
 8009a96:	438a      	bics	r2, r1
 8009a98:	6022      	str	r2, [r4, #0]
 8009a9a:	4333      	orrs	r3, r6
 8009a9c:	d00c      	beq.n	8009ab8 <_printf_i+0x104>
 8009a9e:	9d03      	ldr	r5, [sp, #12]
 8009aa0:	0030      	movs	r0, r6
 8009aa2:	0039      	movs	r1, r7
 8009aa4:	f7f6 fbc6 	bl	8000234 <__aeabi_uidivmod>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	3d01      	subs	r5, #1
 8009aac:	5c5b      	ldrb	r3, [r3, r1]
 8009aae:	702b      	strb	r3, [r5, #0]
 8009ab0:	0033      	movs	r3, r6
 8009ab2:	0006      	movs	r6, r0
 8009ab4:	429f      	cmp	r7, r3
 8009ab6:	d9f3      	bls.n	8009aa0 <_printf_i+0xec>
 8009ab8:	2f08      	cmp	r7, #8
 8009aba:	d109      	bne.n	8009ad0 <_printf_i+0x11c>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	07db      	lsls	r3, r3, #31
 8009ac0:	d506      	bpl.n	8009ad0 <_printf_i+0x11c>
 8009ac2:	6862      	ldr	r2, [r4, #4]
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	dc02      	bgt.n	8009ad0 <_printf_i+0x11c>
 8009aca:	2330      	movs	r3, #48	@ 0x30
 8009acc:	3d01      	subs	r5, #1
 8009ace:	702b      	strb	r3, [r5, #0]
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	1b5b      	subs	r3, r3, r5
 8009ad4:	6123      	str	r3, [r4, #16]
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	0021      	movs	r1, r4
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	9805      	ldr	r0, [sp, #20]
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	aa09      	add	r2, sp, #36	@ 0x24
 8009ae2:	f7ff fef7 	bl	80098d4 <_printf_common>
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d148      	bne.n	8009b7c <_printf_i+0x1c8>
 8009aea:	2001      	movs	r0, #1
 8009aec:	4240      	negs	r0, r0
 8009aee:	b00b      	add	sp, #44	@ 0x2c
 8009af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009af2:	2220      	movs	r2, #32
 8009af4:	6809      	ldr	r1, [r1, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	2278      	movs	r2, #120	@ 0x78
 8009afc:	4932      	ldr	r1, [pc, #200]	@ (8009bc8 <_printf_i+0x214>)
 8009afe:	9104      	str	r1, [sp, #16]
 8009b00:	0021      	movs	r1, r4
 8009b02:	3145      	adds	r1, #69	@ 0x45
 8009b04:	700a      	strb	r2, [r1, #0]
 8009b06:	6819      	ldr	r1, [r3, #0]
 8009b08:	6822      	ldr	r2, [r4, #0]
 8009b0a:	c940      	ldmia	r1!, {r6}
 8009b0c:	0610      	lsls	r0, r2, #24
 8009b0e:	d402      	bmi.n	8009b16 <_printf_i+0x162>
 8009b10:	0650      	lsls	r0, r2, #25
 8009b12:	d500      	bpl.n	8009b16 <_printf_i+0x162>
 8009b14:	b2b6      	uxth	r6, r6
 8009b16:	6019      	str	r1, [r3, #0]
 8009b18:	07d3      	lsls	r3, r2, #31
 8009b1a:	d502      	bpl.n	8009b22 <_printf_i+0x16e>
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	2e00      	cmp	r6, #0
 8009b24:	d001      	beq.n	8009b2a <_printf_i+0x176>
 8009b26:	2710      	movs	r7, #16
 8009b28:	e7aa      	b.n	8009a80 <_printf_i+0xcc>
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	4393      	bics	r3, r2
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	e7f8      	b.n	8009b26 <_printf_i+0x172>
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	680d      	ldr	r5, [r1, #0]
 8009b38:	1d10      	adds	r0, r2, #4
 8009b3a:	6949      	ldr	r1, [r1, #20]
 8009b3c:	6018      	str	r0, [r3, #0]
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	062e      	lsls	r6, r5, #24
 8009b42:	d501      	bpl.n	8009b48 <_printf_i+0x194>
 8009b44:	6019      	str	r1, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <_printf_i+0x19a>
 8009b48:	066d      	lsls	r5, r5, #25
 8009b4a:	d5fb      	bpl.n	8009b44 <_printf_i+0x190>
 8009b4c:	8019      	strh	r1, [r3, #0]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9d03      	ldr	r5, [sp, #12]
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	e7bf      	b.n	8009ad6 <_printf_i+0x122>
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	1d11      	adds	r1, r2, #4
 8009b5a:	6019      	str	r1, [r3, #0]
 8009b5c:	6815      	ldr	r5, [r2, #0]
 8009b5e:	2100      	movs	r1, #0
 8009b60:	0028      	movs	r0, r5
 8009b62:	6862      	ldr	r2, [r4, #4]
 8009b64:	f000 f856 	bl	8009c14 <memchr>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d001      	beq.n	8009b70 <_printf_i+0x1bc>
 8009b6c:	1b40      	subs	r0, r0, r5
 8009b6e:	6060      	str	r0, [r4, #4]
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	2300      	movs	r3, #0
 8009b76:	9a03      	ldr	r2, [sp, #12]
 8009b78:	7013      	strb	r3, [r2, #0]
 8009b7a:	e7ac      	b.n	8009ad6 <_printf_i+0x122>
 8009b7c:	002a      	movs	r2, r5
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	9906      	ldr	r1, [sp, #24]
 8009b82:	9805      	ldr	r0, [sp, #20]
 8009b84:	9d07      	ldr	r5, [sp, #28]
 8009b86:	47a8      	blx	r5
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d0ae      	beq.n	8009aea <_printf_i+0x136>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	079b      	lsls	r3, r3, #30
 8009b90:	d415      	bmi.n	8009bbe <_printf_i+0x20a>
 8009b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b94:	68e0      	ldr	r0, [r4, #12]
 8009b96:	4298      	cmp	r0, r3
 8009b98:	daa9      	bge.n	8009aee <_printf_i+0x13a>
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	e7a7      	b.n	8009aee <_printf_i+0x13a>
 8009b9e:	0022      	movs	r2, r4
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9906      	ldr	r1, [sp, #24]
 8009ba4:	9805      	ldr	r0, [sp, #20]
 8009ba6:	9e07      	ldr	r6, [sp, #28]
 8009ba8:	3219      	adds	r2, #25
 8009baa:	47b0      	blx	r6
 8009bac:	3001      	adds	r0, #1
 8009bae:	d09c      	beq.n	8009aea <_printf_i+0x136>
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	68e3      	ldr	r3, [r4, #12]
 8009bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb6:	1a9b      	subs	r3, r3, r2
 8009bb8:	42ab      	cmp	r3, r5
 8009bba:	dcf0      	bgt.n	8009b9e <_printf_i+0x1ea>
 8009bbc:	e7e9      	b.n	8009b92 <_printf_i+0x1de>
 8009bbe:	2500      	movs	r5, #0
 8009bc0:	e7f7      	b.n	8009bb2 <_printf_i+0x1fe>
 8009bc2:	46c0      	nop			@ (mov r8, r8)
 8009bc4:	08009fee 	.word	0x08009fee
 8009bc8:	08009fff 	.word	0x08009fff

08009bcc <memmove>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	4288      	cmp	r0, r1
 8009bd0:	d902      	bls.n	8009bd8 <memmove+0xc>
 8009bd2:	188b      	adds	r3, r1, r2
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	d308      	bcc.n	8009bea <memmove+0x1e>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d007      	beq.n	8009bee <memmove+0x22>
 8009bde:	5ccc      	ldrb	r4, [r1, r3]
 8009be0:	54c4      	strb	r4, [r0, r3]
 8009be2:	3301      	adds	r3, #1
 8009be4:	e7f9      	b.n	8009bda <memmove+0xe>
 8009be6:	5c8b      	ldrb	r3, [r1, r2]
 8009be8:	5483      	strb	r3, [r0, r2]
 8009bea:	3a01      	subs	r2, #1
 8009bec:	d2fb      	bcs.n	8009be6 <memmove+0x1a>
 8009bee:	bd10      	pop	{r4, pc}

08009bf0 <_sbrk_r>:
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	b570      	push	{r4, r5, r6, lr}
 8009bf4:	4d06      	ldr	r5, [pc, #24]	@ (8009c10 <_sbrk_r+0x20>)
 8009bf6:	0004      	movs	r4, r0
 8009bf8:	0008      	movs	r0, r1
 8009bfa:	602b      	str	r3, [r5, #0]
 8009bfc:	f7f8 fa6e 	bl	80020dc <_sbrk>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d103      	bne.n	8009c0c <_sbrk_r+0x1c>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d000      	beq.n	8009c0c <_sbrk_r+0x1c>
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
 8009c0e:	46c0      	nop			@ (mov r8, r8)
 8009c10:	20000598 	.word	0x20000598

08009c14 <memchr>:
 8009c14:	b2c9      	uxtb	r1, r1
 8009c16:	1882      	adds	r2, r0, r2
 8009c18:	4290      	cmp	r0, r2
 8009c1a:	d101      	bne.n	8009c20 <memchr+0xc>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	4770      	bx	lr
 8009c20:	7803      	ldrb	r3, [r0, #0]
 8009c22:	428b      	cmp	r3, r1
 8009c24:	d0fb      	beq.n	8009c1e <memchr+0xa>
 8009c26:	3001      	adds	r0, #1
 8009c28:	e7f6      	b.n	8009c18 <memchr+0x4>

08009c2a <memcpy>:
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d100      	bne.n	8009c34 <memcpy+0xa>
 8009c32:	bd10      	pop	{r4, pc}
 8009c34:	5ccc      	ldrb	r4, [r1, r3]
 8009c36:	54c4      	strb	r4, [r0, r3]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	e7f8      	b.n	8009c2e <memcpy+0x4>

08009c3c <_realloc_r>:
 8009c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3e:	0006      	movs	r6, r0
 8009c40:	000c      	movs	r4, r1
 8009c42:	0015      	movs	r5, r2
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d105      	bne.n	8009c54 <_realloc_r+0x18>
 8009c48:	0011      	movs	r1, r2
 8009c4a:	f7ff fc55 	bl	80094f8 <_malloc_r>
 8009c4e:	0004      	movs	r4, r0
 8009c50:	0020      	movs	r0, r4
 8009c52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d103      	bne.n	8009c60 <_realloc_r+0x24>
 8009c58:	f7ff fbe2 	bl	8009420 <_free_r>
 8009c5c:	002c      	movs	r4, r5
 8009c5e:	e7f7      	b.n	8009c50 <_realloc_r+0x14>
 8009c60:	f000 f81c 	bl	8009c9c <_malloc_usable_size_r>
 8009c64:	0007      	movs	r7, r0
 8009c66:	4285      	cmp	r5, r0
 8009c68:	d802      	bhi.n	8009c70 <_realloc_r+0x34>
 8009c6a:	0843      	lsrs	r3, r0, #1
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	d3ef      	bcc.n	8009c50 <_realloc_r+0x14>
 8009c70:	0029      	movs	r1, r5
 8009c72:	0030      	movs	r0, r6
 8009c74:	f7ff fc40 	bl	80094f8 <_malloc_r>
 8009c78:	9001      	str	r0, [sp, #4]
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d101      	bne.n	8009c82 <_realloc_r+0x46>
 8009c7e:	9c01      	ldr	r4, [sp, #4]
 8009c80:	e7e6      	b.n	8009c50 <_realloc_r+0x14>
 8009c82:	002a      	movs	r2, r5
 8009c84:	42bd      	cmp	r5, r7
 8009c86:	d900      	bls.n	8009c8a <_realloc_r+0x4e>
 8009c88:	003a      	movs	r2, r7
 8009c8a:	0021      	movs	r1, r4
 8009c8c:	9801      	ldr	r0, [sp, #4]
 8009c8e:	f7ff ffcc 	bl	8009c2a <memcpy>
 8009c92:	0021      	movs	r1, r4
 8009c94:	0030      	movs	r0, r6
 8009c96:	f7ff fbc3 	bl	8009420 <_free_r>
 8009c9a:	e7f0      	b.n	8009c7e <_realloc_r+0x42>

08009c9c <_malloc_usable_size_r>:
 8009c9c:	1f0b      	subs	r3, r1, #4
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	1f18      	subs	r0, r3, #4
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	da01      	bge.n	8009caa <_malloc_usable_size_r+0xe>
 8009ca6:	580b      	ldr	r3, [r1, r0]
 8009ca8:	18c0      	adds	r0, r0, r3
 8009caa:	4770      	bx	lr

08009cac <_init>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb2:	bc08      	pop	{r3}
 8009cb4:	469e      	mov	lr, r3
 8009cb6:	4770      	bx	lr

08009cb8 <_fini>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	46c0      	nop			@ (mov r8, r8)
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr
