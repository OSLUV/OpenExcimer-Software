
OSLUV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  0000b09c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  0000b09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  0000afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08009ff4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000009c  0800a090  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800a090  0000b5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017149  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003135  00000000  00000000  0002220d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b9b6  00000000  00000000  00026770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000187bf  00000000  00000000  00042126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b1628  00000000  00000000  0005a8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010bf0d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000fa7  00000000  00000000  0010bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ef0  00000000  00000000  0010cef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00111de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009c8c 	.word	0x08009c8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08009c8c 	.word	0x08009c8c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_UART_RxCpltCallback>:
//
//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b089      	sub	sp, #36	@ 0x24
 8000644:	af06      	add	r7, sp, #24
 8000646:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4aba      	ldr	r2, [pc, #744]	@ (8000938 <HAL_UART_RxCpltCallback+0x2f8>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d000      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x14>
 8000652:	e16c      	b.n	800092e <HAL_UART_RxCpltCallback+0x2ee>

		if (uart_rx_byte == '\n' || uart_rx_byte == '\r')  // End of input
 8000654:	4bb9      	ldr	r3, [pc, #740]	@ (800093c <HAL_UART_RxCpltCallback+0x2fc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d004      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 800065c:	4bb7      	ldr	r3, [pc, #732]	@ (800093c <HAL_UART_RxCpltCallback+0x2fc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0d      	cmp	r3, #13
 8000662:	d000      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x26>
 8000664:	e14e      	b.n	8000904 <HAL_UART_RxCpltCallback+0x2c4>
		{
			uart_rx_buffer[uart_index] = '\0';
 8000666:	4bb6      	ldr	r3, [pc, #728]	@ (8000940 <HAL_UART_RxCpltCallback+0x300>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	001a      	movs	r2, r3
 800066c:	4bb5      	ldr	r3, [pc, #724]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]


			if (uart_rx_buffer[0]=='F') // Change frequency
 8000672:	4bb4      	ldr	r3, [pc, #720]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b46      	cmp	r3, #70	@ 0x46
 8000678:	d141      	bne.n	80006fe <HAL_UART_RxCpltCallback+0xbe>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 800067a:	4ab3      	ldr	r2, [pc, #716]	@ (8000948 <HAL_UART_RxCpltCallback+0x308>)
 800067c:	4bb3      	ldr	r3, [pc, #716]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f008 feb5 	bl	80093f0 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000686:	4bb1      	ldr	r3, [pc, #708]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000688:	0018      	movs	r0, r3
 800068a:	f008 fdab 	bl	80091e4 <atoi>
 800068e:	0002      	movs	r2, r0
 8000690:	4baf      	ldr	r3, [pc, #700]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000692:	601a      	str	r2, [r3, #0]
				if (value>=FREQ_MIN && value <=FREQ_MAX) { // limit frequency to between 10 - 120 kHz
 8000694:	4bae      	ldr	r3, [pc, #696]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b09      	cmp	r3, #9
 800069a:	dc00      	bgt.n	800069e <HAL_UART_RxCpltCallback+0x5e>
 800069c:	e12e      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
 800069e:	4bac      	ldr	r3, [pc, #688]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b78      	cmp	r3, #120	@ 0x78
 80006a4:	dd00      	ble.n	80006a8 <HAL_UART_RxCpltCallback+0x68>
 80006a6:	e129      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
					operationFrequency = (uint16_t)((TMR_COUNTER + value / 2) / value);
 80006a8:	4ba9      	ldr	r3, [pc, #676]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da00      	bge.n	80006b2 <HAL_UART_RxCpltCallback+0x72>
 80006b0:	3301      	adds	r3, #1
 80006b2:	105b      	asrs	r3, r3, #1
 80006b4:	22fa      	movs	r2, #250	@ 0xfa
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	189a      	adds	r2, r3, r2
 80006ba:	4ba5      	ldr	r3, [pc, #660]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	0019      	movs	r1, r3
 80006c0:	0010      	movs	r0, r2
 80006c2:	f7ff fdbb 	bl	800023c <__divsi3>
 80006c6:	0003      	movs	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4ba2      	ldr	r3, [pc, #648]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 80006cc:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Freq:%d kHz ARR:%d\r\n", value, operationFrequency);
 80006ce:	4ba0      	ldr	r3, [pc, #640]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4ba0      	ldr	r3, [pc, #640]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4a9f      	ldr	r2, [pc, #636]	@ (8000958 <HAL_UART_RxCpltCallback+0x318>)
 80006da:	48a0      	ldr	r0, [pc, #640]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	000b      	movs	r3, r1
 80006e0:	213c      	movs	r1, #60	@ 0x3c
 80006e2:	f008 fe1b 	bl	800931c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80006e6:	4b9d      	ldr	r3, [pc, #628]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fd0b 	bl	8000104 <strlen>
 80006ee:	0003      	movs	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	499a      	ldr	r1, [pc, #616]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80006f4:	489a      	ldr	r0, [pc, #616]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 80006f6:	230a      	movs	r3, #10
 80006f8:	f006 fc94 	bl	8007024 <HAL_UART_Transmit>
 80006fc:	e0fe      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
				}
			}
			else if (uart_rx_buffer[0]=='A') // Change ARR directly -> frequency
 80006fe:	4b91      	ldr	r3, [pc, #580]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b41      	cmp	r3, #65	@ 0x41
 8000704:	d135      	bne.n	8000772 <HAL_UART_RxCpltCallback+0x132>
			{

				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 8000706:	4a90      	ldr	r2, [pc, #576]	@ (8000948 <HAL_UART_RxCpltCallback+0x308>)
 8000708:	4b90      	ldr	r3, [pc, #576]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f008 fe6f 	bl	80093f0 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000712:	4b8e      	ldr	r3, [pc, #568]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000714:	0018      	movs	r0, r3
 8000716:	f008 fd65 	bl	80091e4 <atoi>
 800071a:	0002      	movs	r2, r0
 800071c:	4b8c      	ldr	r3, [pc, #560]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 800071e:	601a      	str	r2, [r3, #0]
				if (value>=ARR_MIN && value <=ARR_MAX) { // limit frequency to between 10 - 120 kHz
 8000720:	4b8b      	ldr	r3, [pc, #556]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b81      	cmp	r3, #129	@ 0x81
 8000726:	dc00      	bgt.n	800072a <HAL_UART_RxCpltCallback+0xea>
 8000728:	e0e8      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
 800072a:	4b89      	ldr	r3, [pc, #548]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	23fa      	movs	r3, #250	@ 0xfa
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	429a      	cmp	r2, r3
 8000734:	dd00      	ble.n	8000738 <HAL_UART_RxCpltCallback+0xf8>
 8000736:	e0e1      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
					operationFrequency = value;
 8000738:	4b85      	ldr	r3, [pc, #532]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b85      	ldr	r3, [pc, #532]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000740:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "ARR: %d Freq: %d\r\n", value, operationFrequency);
 8000742:	4b83      	ldr	r3, [pc, #524]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000744:	6819      	ldr	r1, [r3, #0]
 8000746:	4b83      	ldr	r3, [pc, #524]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	4a85      	ldr	r2, [pc, #532]	@ (8000964 <HAL_UART_RxCpltCallback+0x324>)
 800074e:	4883      	ldr	r0, [pc, #524]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	000b      	movs	r3, r1
 8000754:	213c      	movs	r1, #60	@ 0x3c
 8000756:	f008 fde1 	bl	800931c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 800075a:	4b80      	ldr	r3, [pc, #512]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fcd1 	bl	8000104 <strlen>
 8000762:	0003      	movs	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	497d      	ldr	r1, [pc, #500]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000768:	487d      	ldr	r0, [pc, #500]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 800076a:	230a      	movs	r3, #10
 800076c:	f006 fc5a 	bl	8007024 <HAL_UART_Transmit>
 8000770:	e0c4      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
				}
			}
			else if (uart_rx_buffer[0]=='C') // change CCR -> charge time
 8000772:	4b74      	ldr	r3, [pc, #464]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b43      	cmp	r3, #67	@ 0x43
 8000778:	d12e      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x198>
			{
				strcpy(uart_rx_buffer_stripped, &uart_rx_buffer[1]);
 800077a:	4a73      	ldr	r2, [pc, #460]	@ (8000948 <HAL_UART_RxCpltCallback+0x308>)
 800077c:	4b73      	ldr	r3, [pc, #460]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f008 fe35 	bl	80093f0 <strcpy>
				value = atoi(uart_rx_buffer_stripped);
 8000786:	4b71      	ldr	r3, [pc, #452]	@ (800094c <HAL_UART_RxCpltCallback+0x30c>)
 8000788:	0018      	movs	r0, r3
 800078a:	f008 fd2b 	bl	80091e4 <atoi>
 800078e:	0002      	movs	r2, r0
 8000790:	4b6f      	ldr	r3, [pc, #444]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000792:	601a      	str	r2, [r3, #0]
				if (value>=CCR_MIN && value <=CCR_MAX) { // limit charge time to between 3 - 5 µs
 8000794:	4b6e      	ldr	r3, [pc, #440]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b31      	cmp	r3, #49	@ 0x31
 800079a:	dc00      	bgt.n	800079e <HAL_UART_RxCpltCallback+0x15e>
 800079c:	e0ae      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
 800079e:	4b6c      	ldr	r3, [pc, #432]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b50      	cmp	r3, #80	@ 0x50
 80007a4:	dd00      	ble.n	80007a8 <HAL_UART_RxCpltCallback+0x168>
 80007a6:	e0a9      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
					chargeTimeOperation = value;
 80007a8:	4b69      	ldr	r3, [pc, #420]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b6e      	ldr	r3, [pc, #440]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 80007b0:	801a      	strh	r2, [r3, #0]
					snprintf(msg, sizeof(msg), "Charge: %d\r\n", value);
 80007b2:	4b67      	ldr	r3, [pc, #412]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a6d      	ldr	r2, [pc, #436]	@ (800096c <HAL_UART_RxCpltCallback+0x32c>)
 80007b8:	4868      	ldr	r0, [pc, #416]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80007ba:	213c      	movs	r1, #60	@ 0x3c
 80007bc:	f008 fdae 	bl	800931c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80007c0:	4b66      	ldr	r3, [pc, #408]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fc9e 	bl	8000104 <strlen>
 80007c8:	0003      	movs	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4963      	ldr	r1, [pc, #396]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80007ce:	4864      	ldr	r0, [pc, #400]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 80007d0:	230a      	movs	r3, #10
 80007d2:	f006 fc27 	bl	8007024 <HAL_UART_Transmit>
 80007d6:	e091      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
				}

			}
			else if (uart_rx_buffer[0]=='D') // report ADC DATA
 80007d8:	4b5a      	ldr	r3, [pc, #360]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b44      	cmp	r3, #68	@ 0x44
 80007de:	d12d      	bne.n	800083c <HAL_UART_RxCpltCallback+0x1fc>
			{
				snprintf(msg, sizeof(msg), "Ui %04d, T %04d, Ul %04d, Il %04d, Li %04d, Ii %04d\r\n",  adc_24V, adc_tempMOSFET, adc_uSenseLamp, adc_iSenseLamp, adc_lampIntensity, adc_iSenseIn);
 80007e0:	4b63      	ldr	r3, [pc, #396]	@ (8000970 <HAL_UART_RxCpltCallback+0x330>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	469c      	mov	ip, r3
 80007e8:	4b62      	ldr	r3, [pc, #392]	@ (8000974 <HAL_UART_RxCpltCallback+0x334>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	0019      	movs	r1, r3
 80007f0:	4b61      	ldr	r3, [pc, #388]	@ (8000978 <HAL_UART_RxCpltCallback+0x338>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	001c      	movs	r4, r3
 80007f8:	4b60      	ldr	r3, [pc, #384]	@ (800097c <HAL_UART_RxCpltCallback+0x33c>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	001d      	movs	r5, r3
 8000800:	4b5f      	ldr	r3, [pc, #380]	@ (8000980 <HAL_UART_RxCpltCallback+0x340>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b29b      	uxth	r3, r3
 8000806:	001e      	movs	r6, r3
 8000808:	4b5e      	ldr	r3, [pc, #376]	@ (8000984 <HAL_UART_RxCpltCallback+0x344>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4a5e      	ldr	r2, [pc, #376]	@ (8000988 <HAL_UART_RxCpltCallback+0x348>)
 8000810:	4852      	ldr	r0, [pc, #328]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000812:	9304      	str	r3, [sp, #16]
 8000814:	9603      	str	r6, [sp, #12]
 8000816:	9502      	str	r5, [sp, #8]
 8000818:	9401      	str	r4, [sp, #4]
 800081a:	9100      	str	r1, [sp, #0]
 800081c:	4663      	mov	r3, ip
 800081e:	213c      	movs	r1, #60	@ 0x3c
 8000820:	f008 fd7c 	bl	800931c <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000824:	4b4d      	ldr	r3, [pc, #308]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fc6c 	bl	8000104 <strlen>
 800082c:	0003      	movs	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	494a      	ldr	r1, [pc, #296]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000832:	484b      	ldr	r0, [pc, #300]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000834:	230a      	movs	r3, #10
 8000836:	f006 fbf5 	bl	8007024 <HAL_UART_Transmit>
 800083a:	e05f      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
			}
			else if (uart_rx_buffer[0]=='T') // report TIMER data
 800083c:	4b41      	ldr	r3, [pc, #260]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b54      	cmp	r3, #84	@ 0x54
 8000842:	d119      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x238>
			{
				snprintf(msg, sizeof(msg), "ARR: %d, CCR: %d\r\n",  operationFrequency, chargeTimeOperation);
 8000844:	4b43      	ldr	r3, [pc, #268]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	0019      	movs	r1, r3
 800084c:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	4a4e      	ldr	r2, [pc, #312]	@ (800098c <HAL_UART_RxCpltCallback+0x34c>)
 8000854:	4841      	ldr	r0, [pc, #260]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	000b      	movs	r3, r1
 800085a:	213c      	movs	r1, #60	@ 0x3c
 800085c:	f008 fd5e 	bl	800931c <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000860:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fc4e 	bl	8000104 <strlen>
 8000868:	0003      	movs	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	493b      	ldr	r1, [pc, #236]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 800086e:	483c      	ldr	r0, [pc, #240]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000870:	230a      	movs	r3, #10
 8000872:	f006 fbd7 	bl	8007024 <HAL_UART_Transmit>
 8000876:	e041      	b.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
			}
			else { // dimming levels
				value = atoi(uart_rx_buffer);
 8000878:	4b32      	ldr	r3, [pc, #200]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 800087a:	0018      	movs	r0, r3
 800087c:	f008 fcb2 	bl	80091e4 <atoi>
 8000880:	0002      	movs	r2, r0
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000884:	601a      	str	r2, [r3, #0]

				if (value <= 10)
 8000886:	4b32      	ldr	r3, [pc, #200]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b0a      	cmp	r3, #10
 800088c:	dc36      	bgt.n	80008fc <HAL_UART_RxCpltCallback+0x2bc>
				{
					if (value < 1)
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	dc06      	bgt.n	80008a4 <HAL_UART_RxCpltCallback+0x264>
					{
						uartEnableFlag = 0; // turn off if zero
 8000896:	4b3e      	ldr	r3, [pc, #248]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
						powerLevel = 1; // clip lowest value
 800089c:	4b3d      	ldr	r3, [pc, #244]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e007      	b.n	80008b4 <HAL_UART_RxCpltCallback+0x274>
					}
					else {
						uartEnableFlag = 1; // turn on for all other valuesw
 80008a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000990 <HAL_UART_RxCpltCallback+0x350>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
						powerLevel = (uint8_t)value;
 80008aa:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <HAL_UART_RxCpltCallback+0x310>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008b2:	701a      	strb	r2, [r3, #0]

					}
					snprintf(msg, sizeof(msg), "Set: %d\r\n", powerLevel);
 80008b4:	4b37      	ldr	r3, [pc, #220]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4a37      	ldr	r2, [pc, #220]	@ (8000998 <HAL_UART_RxCpltCallback+0x358>)
 80008ba:	4828      	ldr	r0, [pc, #160]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80008bc:	213c      	movs	r1, #60	@ 0x3c
 80008be:	f008 fd2d 	bl	800931c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff fc1d 	bl	8000104 <strlen>
 80008ca:	0003      	movs	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4923      	ldr	r1, [pc, #140]	@ (800095c <HAL_UART_RxCpltCallback+0x31c>)
 80008d0:	4823      	ldr	r0, [pc, #140]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 80008d2:	230a      	movs	r3, #10
 80008d4:	f006 fba6 	bl	8007024 <HAL_UART_Transmit>
					chargeTimeOperation = operationPoints[powerLevel-1][0];
 80008d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	5ad2      	ldrh	r2, [r2, r3]
 80008e4:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <HAL_UART_RxCpltCallback+0x328>)
 80008e6:	801a      	strh	r2, [r3, #0]
					operationFrequency = operationPoints[powerLevel-1][1];
 80008e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <HAL_UART_RxCpltCallback+0x354>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a2b      	ldr	r2, [pc, #172]	@ (800099c <HAL_UART_RxCpltCallback+0x35c>)
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18d3      	adds	r3, r2, r3
 80008f4:	3302      	adds	r3, #2
 80008f6:	881a      	ldrh	r2, [r3, #0]
 80008f8:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <HAL_UART_RxCpltCallback+0x314>)
 80008fa:	801a      	strh	r2, [r3, #0]
				{
					// do nothing
				}
			}

			uart_index = 0;
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_UART_RxCpltCallback+0x300>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e00e      	b.n	8000922 <HAL_UART_RxCpltCallback+0x2e2>
		}
		else
		{


			if (uart_index < RX_BUFFER_SIZE - 1)
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_UART_RxCpltCallback+0x300>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b08      	cmp	r3, #8
 800090a:	d80a      	bhi.n	8000922 <HAL_UART_RxCpltCallback+0x2e2>
			{
				uart_rx_buffer[uart_index++] = uart_rx_byte;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_UART_RxCpltCallback+0x300>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	b2d1      	uxtb	r1, r2
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_UART_RxCpltCallback+0x300>)
 8000916:	7011      	strb	r1, [r2, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_UART_RxCpltCallback+0x2fc>)
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_UART_RxCpltCallback+0x304>)
 8000920:	5499      	strb	r1, [r3, r2]
			}
		}

		HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000922:	4906      	ldr	r1, [pc, #24]	@ (800093c <HAL_UART_RxCpltCallback+0x2fc>)
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <HAL_UART_RxCpltCallback+0x320>)
 8000926:	2201      	movs	r2, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f006 fc1f 	bl	800716c <HAL_UART_Receive_IT>
	}
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b003      	add	sp, #12
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	40004400 	.word	0x40004400
 800093c:	2000040f 	.word	0x2000040f
 8000940:	2000040e 	.word	0x2000040e
 8000944:	200003f8 	.word	0x200003f8
 8000948:	200003f9 	.word	0x200003f9
 800094c:	20000404 	.word	0x20000404
 8000950:	2000044c 	.word	0x2000044c
 8000954:	2000000a 	.word	0x2000000a
 8000958:	08009ca4 	.word	0x08009ca4
 800095c:	20000410 	.word	0x20000410
 8000960:	20000364 	.word	0x20000364
 8000964:	08009cbc 	.word	0x08009cbc
 8000968:	20000008 	.word	0x20000008
 800096c:	08009cd0 	.word	0x08009cd0
 8000970:	200000d8 	.word	0x200000d8
 8000974:	200000da 	.word	0x200000da
 8000978:	200000dc 	.word	0x200000dc
 800097c:	200000de 	.word	0x200000de
 8000980:	200000e0 	.word	0x200000e0
 8000984:	200000e2 	.word	0x200000e2
 8000988:	08009ce0 	.word	0x08009ce0
 800098c:	08009d18 	.word	0x08009d18
 8000990:	2000000c 	.word	0x2000000c
 8000994:	2000000d 	.word	0x2000000d
 8000998:	08009d2c 	.word	0x08009d2c
 800099c:	20000010 	.word	0x20000010

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f001 fbef 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */
	//HAL_Delay(100);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 facb 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 ff07 	bl	80017c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009b2:	f000 feef 	bl	8001794 <MX_DMA_Init>
  MX_ADC1_Init();
 80009b6:	f000 fb51 	bl	800105c <MX_ADC1_Init>
  MX_COMP2_Init();
 80009ba:	f000 fc13 	bl	80011e4 <MX_COMP2_Init>
  MX_DAC1_Init();
 80009be:	f000 fc41 	bl	8001244 <MX_DAC1_Init>
  MX_TIM1_Init();
 80009c2:	f000 fc83 	bl	80012cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009c6:	f000 fd45 	bl	8001454 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009ca:	f000 fda3 	bl	8001514 <MX_TIM3_Init>
  MX_TIM16_Init();
 80009ce:	f000 fe6b 	bl	80016a8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80009d2:	f000 fe91 	bl	80016f8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009d6:	f000 fe2d 	bl	8001634 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009da:	f000 fb11 	bl	8001000 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	// synchronous timing interrupts
	TIM6->ARR = 1000;
 80009de:	4bc8      	ldr	r3, [pc, #800]	@ (8000d00 <main+0x360>)
 80009e0:	22fa      	movs	r2, #250	@ 0xfa
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 80009e6:	4bc7      	ldr	r3, [pc, #796]	@ (8000d04 <main+0x364>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 fdb9 	bl	8005560 <HAL_TIM_Base_Start_IT>

	// DRV PWM output
	TIM1->CCMR1 |= TIM_CCMR1_OC1CE; // enable OCREF clear
 80009ee:	4bc6      	ldr	r3, [pc, #792]	@ (8000d08 <main+0x368>)
 80009f0:	699a      	ldr	r2, [r3, #24]
 80009f2:	4bc5      	ldr	r3, [pc, #788]	@ (8000d08 <main+0x368>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	430a      	orrs	r2, r1
 80009f8:	619a      	str	r2, [r3, #24]
	TIM1->CR1 |= TIM_CR1_ARPE; // auto-reload preload
 80009fa:	4bc3      	ldr	r3, [pc, #780]	@ (8000d08 <main+0x368>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4bc2      	ldr	r3, [pc, #776]	@ (8000d08 <main+0x368>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // start PWM
 8000a06:	4bc1      	ldr	r3, [pc, #772]	@ (8000d0c <main+0x36c>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f004 fe5c 	bl	80056c8 <HAL_TIM_PWM_Start>
	__HAL_TIM_MOE_ENABLE(&htim1); //master enable
 8000a10:	4bbe      	ldr	r3, [pc, #760]	@ (8000d0c <main+0x36c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a16:	4bbd      	ldr	r3, [pc, #756]	@ (8000d0c <main+0x36c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2180      	movs	r1, #128	@ 0x80
 8000a1c:	0209      	lsls	r1, r1, #8
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	645a      	str	r2, [r3, #68]	@ 0x44

	// Start DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // DAC for current setpoint (intput to Comp2 in-)
 8000a22:	4bbb      	ldr	r3, [pc, #748]	@ (8000d10 <main+0x370>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 ff87 	bl	800393a <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095); // disable current limit for init
 8000a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8000d14 <main+0x374>)
 8000a2e:	48b8      	ldr	r0, [pc, #736]	@ (8000d10 <main+0x370>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	f003 f834 	bl	8003aa0 <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2); // start comparator for peak current control
 8000a38:	4bb7      	ldr	r3, [pc, #732]	@ (8000d18 <main+0x378>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fe2a 	bl	8003694 <HAL_COMP_Start>

	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_DMA, numberADCchannels); // start ADC with DMA, 6 channels
 8000a40:	4bb6      	ldr	r3, [pc, #728]	@ (8000d1c <main+0x37c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	001a      	movs	r2, r3
 8000a48:	49b5      	ldr	r1, [pc, #724]	@ (8000d20 <main+0x380>)
 8000a4a:	4bb6      	ldr	r3, [pc, #728]	@ (8000d24 <main+0x384>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 ff41 	bl	80028d4 <HAL_ADC_Start_DMA>
	 * 4 = Ch9: Lamp Intensity
	 * 5 = Ch10: Isense_In
	 */


	HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000a52:	49b5      	ldr	r1, [pc, #724]	@ (8000d28 <main+0x388>)
 8000a54:	4bb5      	ldr	r3, [pc, #724]	@ (8000d2c <main+0x38c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f006 fb87 	bl	800716c <HAL_UART_Receive_IT>
	// TIM3 for input capture - read PWM for power setting.
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Primary channel - rising edge
	//HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);    // Secondary channel - falling edge


	enum States state = INIT;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]

	// blink LED
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4ab1      	ldr	r2, [pc, #708]	@ (8000d30 <main+0x390>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f003 fe3b 	bl	80046e8 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000a72:	20c8      	movs	r0, #200	@ 0xc8
 8000a74:	f001 fc0e 	bl	8002294 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	4aac      	ldr	r2, [pc, #688]	@ (8000d30 <main+0x390>)
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f003 fe31 	bl	80046e8 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000a86:	20c8      	movs	r0, #200	@ 0xc8
 8000a88:	f001 fc04 	bl	8002294 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	4aa7      	ldr	r2, [pc, #668]	@ (8000d30 <main+0x390>)
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f003 fe27 	bl	80046e8 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000a9a:	20c8      	movs	r0, #200	@ 0xc8
 8000a9c:	f001 fbfa 	bl	8002294 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	4aa2      	ldr	r2, [pc, #648]	@ (8000d30 <main+0x390>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f003 fe1d 	bl	80046e8 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	snprintf(msg, sizeof(msg), "INIT\r\n");
 8000aae:	4aa1      	ldr	r2, [pc, #644]	@ (8000d34 <main+0x394>)
 8000ab0:	4ba1      	ldr	r3, [pc, #644]	@ (8000d38 <main+0x398>)
 8000ab2:	213c      	movs	r1, #60	@ 0x3c
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f008 fc31 	bl	800931c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000aba:	4b9f      	ldr	r3, [pc, #636]	@ (8000d38 <main+0x398>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fb21 	bl	8000104 <strlen>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	499c      	ldr	r1, [pc, #624]	@ (8000d38 <main+0x398>)
 8000ac8:	4898      	ldr	r0, [pc, #608]	@ (8000d2c <main+0x38c>)
 8000aca:	230a      	movs	r3, #10
 8000acc:	f006 faaa 	bl	8007024 <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */

		// ------------ Interrupts -----------------------
		// interrupt 1 Hz for UART send
		if (tim6_slowIrq_request && enableUART) {
 8000ad0:	4b9a      	ldr	r3, [pc, #616]	@ (8000d3c <main+0x39c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <main+0x140>
			tim6_slowIrq_request = 0;
 8000ada:	4b98      	ldr	r3, [pc, #608]	@ (8000d3c <main+0x39c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
		}


		// interrupt  1 kHz
		if (tim6_irq_request) {
 8000ae0:	4b97      	ldr	r3, [pc, #604]	@ (8000d40 <main+0x3a0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d052      	beq.n	8000b90 <main+0x1f0>
			tim6_irq_request = 0;
 8000aea:	4b95      	ldr	r3, [pc, #596]	@ (8000d40 <main+0x3a0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]

			// Check enable flag
			enableFlag = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) && uartEnableFlag; //pull low for enabling
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4a93      	ldr	r2, [pc, #588]	@ (8000d44 <main+0x3a4>)
 8000af6:	0019      	movs	r1, r3
 8000af8:	0010      	movs	r0, r2
 8000afa:	f003 fdbb 	bl	8004674 <HAL_GPIO_ReadPin>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d105      	bne.n	8000b0e <main+0x16e>
 8000b02:	4b91      	ldr	r3, [pc, #580]	@ (8000d48 <main+0x3a8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <main+0x16e>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <main+0x170>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b8e      	ldr	r3, [pc, #568]	@ (8000d4c <main+0x3ac>)
 8000b14:	701a      	strb	r2, [r3, #0]
			// check ignition
			if (enableFlag && !ignitionFlag) {
 8000b16:	4b8d      	ldr	r3, [pc, #564]	@ (8000d4c <main+0x3ac>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d009      	beq.n	8000b34 <main+0x194>
 8000b20:	4b8b      	ldr	r3, [pc, #556]	@ (8000d50 <main+0x3b0>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d105      	bne.n	8000b34 <main+0x194>
				ignitionCounter++;
 8000b28:	4b8a      	ldr	r3, [pc, #552]	@ (8000d54 <main+0x3b4>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b88      	ldr	r3, [pc, #544]	@ (8000d54 <main+0x3b4>)
 8000b32:	801a      	strh	r2, [r3, #0]
			}

			// checked in all states, lower priority

			// check supply voltage
			if ((adc_24V < UPPER_24VSUPPLY) && (adc_24V > LOWER_24VSUPPLY)) {
 8000b34:	4b88      	ldr	r3, [pc, #544]	@ (8000d58 <main+0x3b8>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4a88      	ldr	r2, [pc, #544]	@ (8000d5c <main+0x3bc>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d80a      	bhi.n	8000b56 <main+0x1b6>
 8000b40:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <main+0x3b8>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	238d      	movs	r3, #141	@ 0x8d
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d903      	bls.n	8000b56 <main+0x1b6>
				supplyOKFlag = 1;
 8000b4e:	4b84      	ldr	r3, [pc, #528]	@ (8000d60 <main+0x3c0>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e002      	b.n	8000b5c <main+0x1bc>
			}
			else {
				supplyOKFlag = 0;
 8000b56:	4b82      	ldr	r3, [pc, #520]	@ (8000d60 <main+0x3c0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
			}
			// check temperature
			if (adc_tempMOSFET > UPPER_TEMP_MOSFET) {
 8000b5c:	4b81      	ldr	r3, [pc, #516]	@ (8000d64 <main+0x3c4>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4a81      	ldr	r2, [pc, #516]	@ (8000d68 <main+0x3c8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d903      	bls.n	8000b70 <main+0x1d0>
				OT_flag = 1;
 8000b68:	4b80      	ldr	r3, [pc, #512]	@ (8000d6c <main+0x3cc>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e002      	b.n	8000b76 <main+0x1d6>
			}
			else {
				OT_flag = 0;
 8000b70:	4b7e      	ldr	r3, [pc, #504]	@ (8000d6c <main+0x3cc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			}
			// check input current
			if (adc_iSenseIn > UPPER_I_IN) {
 8000b76:	4b7e      	ldr	r3, [pc, #504]	@ (8000d70 <main+0x3d0>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4a7d      	ldr	r2, [pc, #500]	@ (8000d74 <main+0x3d4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d903      	bls.n	8000b8a <main+0x1ea>
				OCPinFlag = 1;
 8000b82:	4b7d      	ldr	r3, [pc, #500]	@ (8000d78 <main+0x3d8>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e002      	b.n	8000b90 <main+0x1f0>
			}
			else {
				OCPinFlag = 0;
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d78 <main+0x3d8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
			state = ERROR_state;
		}
		*/

		// ------------ ASM -----------------------
		switch (state) {
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d89b      	bhi.n	8000ad0 <main+0x130>
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	4b78      	ldr	r3, [pc, #480]	@ (8000d7c <main+0x3dc>)
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	469f      	mov	pc, r3
		case INIT:
			// init code
			ignitionFlag = 0;
 8000ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8000d50 <main+0x3b0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
			ignitionCounter = 0;
 8000ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8000d54 <main+0x3b4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // status LED
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	485f      	ldr	r0, [pc, #380]	@ (8000d30 <main+0x390>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	f003 fd79 	bl	80046ae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // UV LED
 8000bbc:	4b61      	ldr	r3, [pc, #388]	@ (8000d44 <main+0x3a4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	@ 0x40
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 fd73 	bl	80046ae <HAL_GPIO_WritePin>

			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bc8:	4b50      	ldr	r3, [pc, #320]	@ (8000d0c <main+0x36c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->ARR = ignFrequency;
 8000bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8000d80 <main+0x3e0>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8000d08 <main+0x368>)
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c


			// exit conditions
			if (errorFlag) {
 8000bda:	4b6a      	ldr	r3, [pc, #424]	@ (8000d84 <main+0x3e4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <main+0x24a>
				state = ERROR_state;
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
			}
			if (enableFlag  && supplyOKFlag ) {
 8000bea:	4b58      	ldr	r3, [pc, #352]	@ (8000d4c <main+0x3ac>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <main+0x256>
 8000bf4:	e17c      	b.n	8000ef0 <main+0x550>
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8000d60 <main+0x3c0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <main+0x262>
 8000c00:	e176      	b.n	8000ef0 <main+0x550>
				snprintf(msg, sizeof(msg), "IGNITE\r\n");
 8000c02:	4a61      	ldr	r2, [pc, #388]	@ (8000d88 <main+0x3e8>)
 8000c04:	4b4c      	ldr	r3, [pc, #304]	@ (8000d38 <main+0x398>)
 8000c06:	213c      	movs	r1, #60	@ 0x3c
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f008 fb87 	bl	800931c <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d38 <main+0x398>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fa77 	bl	8000104 <strlen>
 8000c16:	0003      	movs	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4947      	ldr	r1, [pc, #284]	@ (8000d38 <main+0x398>)
 8000c1c:	4843      	ldr	r0, [pc, #268]	@ (8000d2c <main+0x38c>)
 8000c1e:	230a      	movs	r3, #10
 8000c20:	f006 fa00 	bl	8007024 <HAL_UART_Transmit>
				state = IGNITE;
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	2202      	movs	r2, #2
 8000c28:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c2a:	e161      	b.n	8000ef0 <main+0x550>

		case IGNITE:
			if (failedIgnitionCounter > maxIgnitionAttempts) {
 8000c2c:	4b57      	ldr	r3, [pc, #348]	@ (8000d8c <main+0x3ec>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b57      	ldr	r3, [pc, #348]	@ (8000d90 <main+0x3f0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d903      	bls.n	8000c40 <main+0x2a0>
				state = ERROR_state;
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e055      	b.n	8000cec <main+0x34c>
			}
			else if (!ignitionFlag) {
 8000c40:	4b43      	ldr	r3, [pc, #268]	@ (8000d50 <main+0x3b0>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d151      	bne.n	8000cec <main+0x34c>

				// ignition mode for three seconds
				if (ignitionCounter < maxIgnitionTime) { // try ignition
 8000c48:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <main+0x3b4>)
 8000c4a:	881a      	ldrh	r2, [r3, #0]
 8000c4c:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <main+0x3f4>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d242      	bcs.n	8000cda <main+0x33a>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // disable Status LED
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	4835      	ldr	r0, [pc, #212]	@ (8000d30 <main+0x390>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	f003 fd26 	bl	80046ae <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyMaxIgn); // high energy ignition
 8000c62:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <main+0x3f8>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <main+0x36c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM1->ARR = ignFrequency;
 8000c6e:	4b44      	ldr	r3, [pc, #272]	@ (8000d80 <main+0x3e0>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <main+0x368>)
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // enable UV-LED
 8000c78:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <main+0x3a4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f003 fd15 	bl	80046ae <HAL_GPIO_WritePin>
					//if (adc_iSenseLamp > adc_iSenseLampIgnited && adc_uSenseLamp < adc_uSenseLampIgnited) {
					if (adc_iSenseLamp > adc_iSenseLampIgnited
 8000c84:	4b45      	ldr	r3, [pc, #276]	@ (8000d9c <main+0x3fc>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b45      	ldr	r3, [pc, #276]	@ (8000da0 <main+0x400>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d92c      	bls.n	8000cec <main+0x34c>
							&& ignitionCounter > MIN_IGNITION_TIME) { // minimum ignition time 1000 ms
 8000c92:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <main+0x3b4>)
 8000c94:	881a      	ldrh	r2, [r3, #0]
 8000c96:	23fa      	movs	r3, #250	@ 0xfa
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d926      	bls.n	8000cec <main+0x34c>
					//if ( ignitionCounter > 1000) { // minimum ignition time 1000 ms
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <main+0x3a4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2140      	movs	r1, #64	@ 0x40
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f003 fd02 	bl	80046ae <HAL_GPIO_WritePin>
						ignitionFlag = 1;
 8000caa:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <main+0x3b0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
						snprintf(msg, sizeof(msg), "RUN\r\n");
 8000cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8000da4 <main+0x404>)
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <main+0x398>)
 8000cb4:	213c      	movs	r1, #60	@ 0x3c
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f008 fb30 	bl	800931c <sniprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <main+0x398>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fa20 	bl	8000104 <strlen>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	491b      	ldr	r1, [pc, #108]	@ (8000d38 <main+0x398>)
 8000cca:	4818      	ldr	r0, [pc, #96]	@ (8000d2c <main+0x38c>)
 8000ccc:	230a      	movs	r3, #10
 8000cce:	f006 f9a9 	bl	8007024 <HAL_UART_Transmit>
						state = RUN;
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e008      	b.n	8000cec <main+0x34c>
							state = ERROR_state;
						}
					}*/

				}
				else if (ignitionCounter > (maxIgnitionTime-1)) { // ignition failed
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <main+0x3f4>)
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <main+0x3b4>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d802      	bhi.n	8000cec <main+0x34c>
					state = IGN_FAIL;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	2203      	movs	r2, #3
 8000cea:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!enableFlag) {
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <main+0x3ac>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <main+0x358>
 8000cf6:	e0fd      	b.n	8000ef4 <main+0x554>
				state = INIT;
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000cfe:	e0f9      	b.n	8000ef4 <main+0x554>
 8000d00:	40001000 	.word	0x40001000
 8000d04:	200002cc 	.word	0x200002cc
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	200001e8 	.word	0x200001e8
 8000d10:	200001d4 	.word	0x200001d4
 8000d14:	00000fff 	.word	0x00000fff
 8000d18:	200001a4 	.word	0x200001a4
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	200000c0 	.word	0x200000c0
 8000d24:	200000e4 	.word	0x200000e4
 8000d28:	2000040f 	.word	0x2000040f
 8000d2c:	20000364 	.word	0x20000364
 8000d30:	50000800 	.word	0x50000800
 8000d34:	08009d38 	.word	0x08009d38
 8000d38:	20000410 	.word	0x20000410
 8000d3c:	200000be 	.word	0x200000be
 8000d40:	200000bd 	.word	0x200000bd
 8000d44:	50000400 	.word	0x50000400
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	200000b8 	.word	0x200000b8
 8000d50:	20000452 	.word	0x20000452
 8000d54:	20000450 	.word	0x20000450
 8000d58:	200000d8 	.word	0x200000d8
 8000d5c:	00000c56 	.word	0x00000c56
 8000d60:	200000b9 	.word	0x200000b9
 8000d64:	200000da 	.word	0x200000da
 8000d68:	00000816 	.word	0x00000816
 8000d6c:	200000bb 	.word	0x200000bb
 8000d70:	200000e2 	.word	0x200000e2
 8000d74:	00000a28 	.word	0x00000a28
 8000d78:	200000bc 	.word	0x200000bc
 8000d7c:	08009d6c 	.word	0x08009d6c
 8000d80:	20000006 	.word	0x20000006
 8000d84:	200000ba 	.word	0x200000ba
 8000d88:	08009d40 	.word	0x08009d40
 8000d8c:	20000453 	.word	0x20000453
 8000d90:	2000003e 	.word	0x2000003e
 8000d94:	2000003a 	.word	0x2000003a
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	200000de 	.word	0x200000de
 8000da0:	20000038 	.word	0x20000038
 8000da4:	08009d4c 	.word	0x08009d4c
		case IGN_FAIL:
			ignitionFlag = 0;
 8000da8:	4b54      	ldr	r3, [pc, #336]	@ (8000efc <main+0x55c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
			snprintf(msg, sizeof(msg), "IGNITION FAIL\r\n");
 8000dae:	4a54      	ldr	r2, [pc, #336]	@ (8000f00 <main+0x560>)
 8000db0:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <main+0x564>)
 8000db2:	213c      	movs	r1, #60	@ 0x3c
 8000db4:	0018      	movs	r0, r3
 8000db6:	f008 fab1 	bl	800931c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000dba:	4b52      	ldr	r3, [pc, #328]	@ (8000f04 <main+0x564>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff f9a1 	bl	8000104 <strlen>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	494f      	ldr	r1, [pc, #316]	@ (8000f04 <main+0x564>)
 8000dc8:	484f      	ldr	r0, [pc, #316]	@ (8000f08 <main+0x568>)
 8000dca:	230a      	movs	r3, #10
 8000dcc:	f006 f92a 	bl	8007024 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // disable UV-LED
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <main+0x56c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f003 fc69 	bl	80046ae <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // off
 8000ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8000f10 <main+0x570>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	4a4a      	ldr	r2, [pc, #296]	@ (8000f14 <main+0x574>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f003 fc7b 	bl	80046e8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000df2:	2064      	movs	r0, #100	@ 0x64
 8000df4:	f001 fa4e 	bl	8002294 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	4a45      	ldr	r2, [pc, #276]	@ (8000f14 <main+0x574>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f003 fc71 	bl	80046e8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e06:	2064      	movs	r0, #100	@ 0x64
 8000e08:	f001 fa44 	bl	8002294 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4a40      	ldr	r2, [pc, #256]	@ (8000f14 <main+0x574>)
 8000e12:	0019      	movs	r1, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	f003 fc67 	bl	80046e8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	@ 0x64
 8000e1c:	f001 fa3a 	bl	8002294 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	4a3b      	ldr	r2, [pc, #236]	@ (8000f14 <main+0x574>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f003 fc5d 	bl	80046e8 <HAL_GPIO_TogglePin>
			HAL_Delay(delayFailedIgnition); // wait and restart
 8000e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <main+0x578>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fa2e 	bl	8002294 <HAL_Delay>
			failedIgnitionCounter++;
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <main+0x57c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <main+0x57c>)
 8000e42:	701a      	strb	r2, [r3, #0]
			state = INIT;
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
			break;
 8000e4a:	e056      	b.n	8000efa <main+0x55a>


		case RUN:
			// RUN code
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // enable status LED
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	4830      	ldr	r0, [pc, #192]	@ (8000f14 <main+0x574>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	0019      	movs	r1, r3
 8000e56:	f003 fc2a 	bl	80046ae <HAL_GPIO_WritePin>
			TIM1->ARR=operationFrequency;
 8000e5a:	4b31      	ldr	r3, [pc, #196]	@ (8000f20 <main+0x580>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <main+0x584>)
 8000e62:	62da      	str	r2, [r3, #44]	@ 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, chargeTimeOperation); // chargingTime setpoint
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <main+0x588>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <main+0x570>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_IsenseMOS); // set current limiting value
 8000e70:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <main+0x58c>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	482e      	ldr	r0, [pc, #184]	@ (8000f30 <main+0x590>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f002 fe10 	bl	8003aa0 <HAL_DAC_SetValue>

			// exit conditions

			if (enableFlag == 0 || supplyOKFlag == 0) {
 8000e80:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <main+0x594>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <main+0x4f4>
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <main+0x598>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <main+0x4fa>
				state = INIT;
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			}

			/*if (OT_flag || errorFlag || (adc_uSenseLamp>adc_uSenseLampOpenCircuit)) {
				state = ERROR_state;
			}*/
			if (OT_flag ) {
 8000e9a:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <main+0x59c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d029      	beq.n	8000ef8 <main+0x558>
				state = ERROR_state;
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	701a      	strb	r2, [r3, #0]
			}


			break;
 8000eaa:	e025      	b.n	8000ef8 <main+0x558>
		case ERROR_state:
			// ERROR code
			// set DRV to zero
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000eac:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <main+0x570>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34
			snprintf(msg, sizeof(msg), "ERROR\r\n");
 8000eb4:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <main+0x5a0>)
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <main+0x564>)
 8000eb8:	213c      	movs	r1, #60	@ 0x3c
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f008 fa2e 	bl	800931c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), UART_DELAY);
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <main+0x564>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff f91e 	bl	8000104 <strlen>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	490d      	ldr	r1, [pc, #52]	@ (8000f04 <main+0x564>)
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <main+0x568>)
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	f006 f8a7 	bl	8007024 <HAL_UART_Transmit>

			// communicate error (blink LED, UART)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); //  LED
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <main+0x574>)
 8000edc:	0019      	movs	r1, r3
 8000ede:	0010      	movs	r0, r2
 8000ee0:	f003 fc02 	bl	80046e8 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000ee4:	23fa      	movs	r3, #250	@ 0xfa
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 f9d3 	bl	8002294 <HAL_Delay>
			// no exit conditions, only power cycle
			break;
 8000eee:	e004      	b.n	8000efa <main+0x55a>
			break;
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	e5ed      	b.n	8000ad0 <main+0x130>
			break;
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	e5eb      	b.n	8000ad0 <main+0x130>
			break;
 8000ef8:	46c0      	nop			@ (mov r8, r8)
		if (tim6_slowIrq_request && enableUART) {
 8000efa:	e5e9      	b.n	8000ad0 <main+0x130>
 8000efc:	20000452 	.word	0x20000452
 8000f00:	08009d54 	.word	0x08009d54
 8000f04:	20000410 	.word	0x20000410
 8000f08:	20000364 	.word	0x20000364
 8000f0c:	50000400 	.word	0x50000400
 8000f10:	200001e8 	.word	0x200001e8
 8000f14:	50000800 	.word	0x50000800
 8000f18:	2000003c 	.word	0x2000003c
 8000f1c:	20000453 	.word	0x20000453
 8000f20:	2000000a 	.word	0x2000000a
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000002 	.word	0x20000002
 8000f30:	200001d4 	.word	0x200001d4
 8000f34:	200000b8 	.word	0x200000b8
 8000f38:	200000b9 	.word	0x200000b9
 8000f3c:	200000bb 	.word	0x200000bb
 8000f40:	08009d64 	.word	0x08009d64

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b093      	sub	sp, #76	@ 0x4c
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	2410      	movs	r4, #16
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2338      	movs	r3, #56	@ 0x38
 8000f52:	001a      	movs	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f008 fa17 	bl	8009388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2310      	movs	r3, #16
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f008 fa10 	bl	8009388 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f003 fbd7 	bl	8004720 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2202      	movs	r2, #2
 8000f76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2280      	movs	r2, #128	@ 0x80
 8000f7c:	0052      	lsls	r2, r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f80:	0021      	movs	r1, r4
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2240      	movs	r2, #64	@ 0x40
 8000f8c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2202      	movs	r2, #2
 8000f98:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	22e0      	movs	r2, #224	@ 0xe0
 8000faa:	0312      	lsls	r2, r2, #12
 8000fac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	22e0      	movs	r2, #224	@ 0xe0
 8000fb2:	0512      	lsls	r2, r2, #20
 8000fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	0592      	lsls	r2, r2, #22
 8000fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 fbf9 	bl	80047b8 <HAL_RCC_OscConfig>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fca:	f000 fca3 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe6:	003b      	movs	r3, r7
 8000fe8:	2100      	movs	r1, #0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f003 fefe 	bl	8004dec <HAL_RCC_ClockConfig>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ff4:	f000 fc8e 	bl	8001914 <Error_Handler>
  }
}
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b013      	add	sp, #76	@ 0x4c
 8000ffe:	bd90      	pop	{r4, r7, pc}

08001000 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* TIM6_DAC_LPTIM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2011      	movs	r0, #17
 800100a:	f002 fc41 	bl	8003890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800100e:	2011      	movs	r0, #17
 8001010:	f002 fc53 	bl	80038ba <HAL_NVIC_EnableIRQ>
  /* ADC1_COMP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	200c      	movs	r0, #12
 800101a:	f002 fc39 	bl	8003890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800101e:	200c      	movs	r0, #12
 8001020:	f002 fc4b 	bl	80038ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2009      	movs	r0, #9
 800102a:	f002 fc31 	bl	8003890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800102e:	2009      	movs	r0, #9
 8001030:	f002 fc43 	bl	80038ba <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2010      	movs	r0, #16
 800103a:	f002 fc29 	bl	8003890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800103e:	2010      	movs	r0, #16
 8001040:	f002 fc3b 	bl	80038ba <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	201c      	movs	r0, #28
 800104a:	f002 fc21 	bl	8003890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800104e:	201c      	movs	r0, #28
 8001050:	f002 fc33 	bl	80038ba <HAL_NVIC_EnableIRQ>
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	0018      	movs	r0, r3
 8001066:	230c      	movs	r3, #12
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f008 f98c 	bl	8009388 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001070:	4b55      	ldr	r3, [pc, #340]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 8001072:	4a56      	ldr	r2, [pc, #344]	@ (80011cc <MX_ADC1_Init+0x170>)
 8001074:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001076:	4b54      	ldr	r3, [pc, #336]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 8001078:	22a0      	movs	r2, #160	@ 0xa0
 800107a:	0352      	lsls	r2, r2, #13
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b52      	ldr	r3, [pc, #328]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001084:	4b50      	ldr	r3, [pc, #320]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800108a:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	0392      	lsls	r2, r2, #14
 8001090:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b4d      	ldr	r3, [pc, #308]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 8001094:	2204      	movs	r2, #4
 8001096:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001098:	4b4b      	ldr	r3, [pc, #300]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800109a:	2200      	movs	r2, #0
 800109c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800109e:	4b4a      	ldr	r3, [pc, #296]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a4:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 6;
 80010aa:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010ac:	2206      	movs	r2, #6
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80010b0:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010b2:	22a8      	movs	r2, #168	@ 0xa8
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010b8:	4b43      	ldr	r3, [pc, #268]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	00d2      	lsls	r2, r2, #3
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c0:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010c2:	222c      	movs	r2, #44	@ 0x2c
 80010c4:	2101      	movs	r1, #1
 80010c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c8:	4b3f      	ldr	r3, [pc, #252]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010d0:	2206      	movs	r2, #6
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80010d4:	4b3c      	ldr	r3, [pc, #240]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010d6:	2206      	movs	r2, #6
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80010da:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010dc:	223c      	movs	r2, #60	@ 0x3c
 80010de:	2100      	movs	r1, #0
 80010e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010e2:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e8:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 fa4a 	bl	8002584 <HAL_ADC_Init>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f000 fc0e 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3a      	adds	r2, r7, #4
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f001 fda5 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800111a:	f000 fbfb 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4a2b      	ldr	r2, [pc, #172]	@ (80011d0 <MX_ADC1_Init+0x174>)
 8001122:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2204      	movs	r2, #4
 8001128:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	1d3a      	adds	r2, r7, #4
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f001 fd95 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800113a:	f000 fbeb 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <MX_ADC1_Init+0x178>)
 8001142:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2208      	movs	r2, #8
 8001148:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f001 fd85 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800115a:	f000 fbdb 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4a1d      	ldr	r2, [pc, #116]	@ (80011d8 <MX_ADC1_Init+0x17c>)
 8001162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	220c      	movs	r2, #12
 8001168:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3a      	adds	r2, r7, #4
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f001 fd75 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800117a:	f000 fbcb 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <MX_ADC1_Init+0x180>)
 8001182:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2210      	movs	r2, #16
 8001188:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f001 fd65 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 800119a:	f000 fbbb 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <MX_ADC1_Init+0x184>)
 80011a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2214      	movs	r2, #20
 80011a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	1d3a      	adds	r2, r7, #4
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_ADC1_Init+0x16c>)
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fd55 	bl	8002c60 <HAL_ADC_ConfigChannel>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80011ba:	f000 fbab 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	200000e4 	.word	0x200000e4
 80011cc:	40012400 	.word	0x40012400
 80011d0:	04000002 	.word	0x04000002
 80011d4:	0c000008 	.word	0x0c000008
 80011d8:	20000100 	.word	0x20000100
 80011dc:	24000200 	.word	0x24000200
 80011e0:	28000400 	.word	0x28000400

080011e4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_COMP2_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <MX_COMP2_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_COMP2_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_COMP2_Init+0x58>)
 80011f6:	2240      	movs	r2, #64	@ 0x40
 80011f8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_COMP2_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_COMP2_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <MX_COMP2_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_COMP2_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <MX_COMP2_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_COMP2_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <MX_COMP2_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <MX_COMP2_Init+0x58>)
 8001226:	0018      	movs	r0, r3
 8001228:	f002 f8d2 	bl	80033d0 <HAL_COMP_Init>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_COMP2_Init+0x50>
  {
    Error_Handler();
 8001230:	f000 fb70 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	200001a4 	.word	0x200001a4
 8001240:	40010204 	.word	0x40010204

08001244 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	0018      	movs	r0, r3
 800124e:	2324      	movs	r3, #36	@ 0x24
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f008 f898 	bl	8009388 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_DAC1_Init+0x80>)
 800125a:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <MX_DAC1_Init+0x84>)
 800125c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_DAC1_Init+0x80>)
 8001260:	0018      	movs	r0, r3
 8001262:	f002 fb47 	bl	80038f4 <HAL_DAC_Init>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d001      	beq.n	800126e <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800126a:	f000 fb53 	bl	8001914 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2201      	movs	r2, #1
 8001284:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <MX_DAC1_Init+0x80>)
 8001290:	2200      	movs	r2, #0
 8001292:	0018      	movs	r0, r3
 8001294:	f002 fc34 	bl	8003b00 <HAL_DAC_ConfigChannel>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 800129c:	f000 fb3a 	bl	8001914 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012a6:	1d39      	adds	r1, r7, #4
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_DAC1_Init+0x80>)
 80012aa:	2210      	movs	r2, #16
 80012ac:	0018      	movs	r0, r3
 80012ae:	f002 fc27 	bl	8003b00 <HAL_DAC_ConfigChannel>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <MX_DAC1_Init+0x76>
  {
    Error_Handler();
 80012b6:	f000 fb2d 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b00a      	add	sp, #40	@ 0x28
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	200001d4 	.word	0x200001d4
 80012c8:	40007400 	.word	0x40007400

080012cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09c      	sub	sp, #112	@ 0x70
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClearInputConfigTypeDef sClearInputConfig = {0};
 80012d2:	235c      	movs	r3, #92	@ 0x5c
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	0018      	movs	r0, r3
 80012d8:	2314      	movs	r3, #20
 80012da:	001a      	movs	r2, r3
 80012dc:	2100      	movs	r1, #0
 80012de:	f008 f853 	bl	8009388 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e2:	2350      	movs	r3, #80	@ 0x50
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	0018      	movs	r0, r3
 80012e8:	230c      	movs	r3, #12
 80012ea:	001a      	movs	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f008 f84b 	bl	8009388 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	2334      	movs	r3, #52	@ 0x34
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	0018      	movs	r0, r3
 80012f8:	231c      	movs	r3, #28
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f008 f843 	bl	8009388 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001302:	003b      	movs	r3, r7
 8001304:	0018      	movs	r0, r3
 8001306:	2334      	movs	r3, #52	@ 0x34
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f008 f83c 	bl	8009388 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001310:	4b4e      	ldr	r3, [pc, #312]	@ (800144c <MX_TIM1_Init+0x180>)
 8001312:	4a4f      	ldr	r2, [pc, #316]	@ (8001450 <MX_TIM1_Init+0x184>)
 8001314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001316:	4b4d      	ldr	r3, [pc, #308]	@ (800144c <MX_TIM1_Init+0x180>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b4b      	ldr	r3, [pc, #300]	@ (800144c <MX_TIM1_Init+0x180>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320;
 8001322:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <MX_TIM1_Init+0x180>)
 8001324:	22a0      	movs	r2, #160	@ 0xa0
 8001326:	0052      	lsls	r2, r2, #1
 8001328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b48      	ldr	r3, [pc, #288]	@ (800144c <MX_TIM1_Init+0x180>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001330:	4b46      	ldr	r3, [pc, #280]	@ (800144c <MX_TIM1_Init+0x180>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001336:	4b45      	ldr	r3, [pc, #276]	@ (800144c <MX_TIM1_Init+0x180>)
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133c:	4b43      	ldr	r3, [pc, #268]	@ (800144c <MX_TIM1_Init+0x180>)
 800133e:	0018      	movs	r0, r3
 8001340:	f004 f96a 	bl	8005618 <HAL_TIM_PWM_Init>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001348:	f000 fae4 	bl	8001914 <Error_Handler>
  }
  sClearInputConfig.ClearInputState = ENABLE;
 800134c:	215c      	movs	r1, #92	@ 0x5c
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]
  sClearInputConfig.ClearInputSource = TIM_CLEARINPUTSOURCE_COMP2;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2201      	movs	r2, #1
 8001358:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_ConfigOCrefClear(&htim1, &sClearInputConfig, TIM_CHANNEL_1) != HAL_OK)
 800135a:	1879      	adds	r1, r7, r1
 800135c:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <MX_TIM1_Init+0x180>)
 800135e:	2200      	movs	r2, #0
 8001360:	0018      	movs	r0, r3
 8001362:	f004 fd9f 	bl	8005ea4 <HAL_TIM_ConfigOCrefClear>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800136a:	f000 fad3 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2150      	movs	r1, #80	@ 0x50
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001382:	187a      	adds	r2, r7, r1
 8001384:	4b31      	ldr	r3, [pc, #196]	@ (800144c <MX_TIM1_Init+0x180>)
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f005 fcd3 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001392:	f000 fabf 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2134      	movs	r1, #52	@ 0x34
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2260      	movs	r2, #96	@ 0x60
 800139c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	1879      	adds	r1, r7, r1
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <MX_TIM1_Init+0x180>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	0018      	movs	r0, r3
 80013ca:	f004 fc6b 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80013d2:	f000 fa9f 	bl	8001914 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d6:	003b      	movs	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013dc:	003b      	movs	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e2:	003b      	movs	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013e8:	003b      	movs	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ee:	003b      	movs	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f4:	003b      	movs	r3, r7
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	0192      	lsls	r2, r2, #6
 80013fa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013fc:	003b      	movs	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001402:	003b      	movs	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001408:	003b      	movs	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800140e:	003b      	movs	r3, r7
 8001410:	2280      	movs	r2, #128	@ 0x80
 8001412:	0492      	lsls	r2, r2, #18
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001416:	003b      	movs	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800141c:	003b      	movs	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001422:	003b      	movs	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001428:	003a      	movs	r2, r7
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_TIM1_Init+0x180>)
 800142c:	0011      	movs	r1, r2
 800142e:	0018      	movs	r0, r3
 8001430:	f005 fcee 	bl	8006e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001438:	f000 fa6c 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <MX_TIM1_Init+0x180>)
 800143e:	0018      	movs	r0, r3
 8001440:	f000 fc94 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b01c      	add	sp, #112	@ 0x70
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001e8 	.word	0x200001e8
 8001450:	40012c00 	.word	0x40012c00

08001454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145a:	231c      	movs	r3, #28
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	0018      	movs	r0, r3
 8001460:	230c      	movs	r3, #12
 8001462:	001a      	movs	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f007 ff8f 	bl	8009388 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	003b      	movs	r3, r7
 800146c:	0018      	movs	r0, r3
 800146e:	231c      	movs	r3, #28
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f007 ff88 	bl	8009388 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <MX_TIM2_Init+0xbc>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	05d2      	lsls	r2, r2, #23
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <MX_TIM2_Init+0xbc>)
 8001482:	2210      	movs	r2, #16
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <MX_TIM2_Init+0xbc>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800148c:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <MX_TIM2_Init+0xbc>)
 800148e:	22fa      	movs	r2, #250	@ 0xfa
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM2_Init+0xbc>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_TIM2_Init+0xbc>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_TIM2_Init+0xbc>)
 80014a2:	0018      	movs	r0, r3
 80014a4:	f004 f8b8 	bl	8005618 <HAL_TIM_PWM_Init>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014ac:	f000 fa32 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	211c      	movs	r1, #28
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014be:	187a      	adds	r2, r7, r1
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_TIM2_Init+0xbc>)
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f005 fc35 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014ce:	f000 fa21 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	003b      	movs	r3, r7
 80014d4:	2260      	movs	r2, #96	@ 0x60
 80014d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80014d8:	003b      	movs	r3, r7
 80014da:	22fa      	movs	r2, #250	@ 0xfa
 80014dc:	0052      	lsls	r2, r2, #1
 80014de:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e0:	003b      	movs	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	003b      	movs	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ec:	0039      	movs	r1, r7
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <MX_TIM2_Init+0xbc>)
 80014f0:	2208      	movs	r2, #8
 80014f2:	0018      	movs	r0, r3
 80014f4:	f004 fbd6 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014fc:	f000 fa0a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <MX_TIM2_Init+0xbc>)
 8001502:	0018      	movs	r0, r3
 8001504:	f000 fc32 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b00a      	add	sp, #40	@ 0x28
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000234 	.word	0x20000234

08001514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800151a:	231c      	movs	r3, #28
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	0018      	movs	r0, r3
 8001520:	2314      	movs	r3, #20
 8001522:	001a      	movs	r2, r3
 8001524:	2100      	movs	r1, #0
 8001526:	f007 ff2f 	bl	8009388 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800152a:	230c      	movs	r3, #12
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	0018      	movs	r0, r3
 8001530:	2310      	movs	r3, #16
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f007 ff27 	bl	8009388 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	003b      	movs	r3, r7
 800153c:	0018      	movs	r0, r3
 800153e:	230c      	movs	r3, #12
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f007 ff20 	bl	8009388 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001548:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <MX_TIM3_Init+0x114>)
 800154a:	4a38      	ldr	r2, [pc, #224]	@ (800162c <MX_TIM3_Init+0x118>)
 800154c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800154e:	4b36      	ldr	r3, [pc, #216]	@ (8001628 <MX_TIM3_Init+0x114>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <MX_TIM3_Init+0x114>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <MX_TIM3_Init+0x114>)
 800155c:	4a34      	ldr	r2, [pc, #208]	@ (8001630 <MX_TIM3_Init+0x11c>)
 800155e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <MX_TIM3_Init+0x114>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <MX_TIM3_Init+0x114>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800156c:	4b2e      	ldr	r3, [pc, #184]	@ (8001628 <MX_TIM3_Init+0x114>)
 800156e:	0018      	movs	r0, r3
 8001570:	f004 f994 	bl	800589c <HAL_TIM_IC_Init>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001578:	f000 f9cc 	bl	8001914 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800157c:	211c      	movs	r1, #28
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2204      	movs	r2, #4
 8001582:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2260      	movs	r2, #96	@ 0x60
 8001588:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800159c:	187a      	adds	r2, r7, r1
 800159e:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_TIM3_Init+0x114>)
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f004 fda8 	bl	80060f8 <HAL_TIM_SlaveConfigSynchro>
 80015a8:	1e03      	subs	r3, r0, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015ac:	f000 f9b2 	bl	8001914 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015b0:	210c      	movs	r1, #12
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2202      	movs	r2, #2
 80015bc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	1879      	adds	r1, r7, r1
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_TIM3_Init+0x114>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	0018      	movs	r0, r3
 80015d2:	f004 fac3 	bl	8005b5c <HAL_TIM_IC_ConfigChannel>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80015da:	f000 f99b 	bl	8001914 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015de:	210c      	movs	r1, #12
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2201      	movs	r2, #1
 80015ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015ec:	1879      	adds	r1, r7, r1
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_TIM3_Init+0x114>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	0018      	movs	r0, r3
 80015f4:	f004 fab2 	bl	8005b5c <HAL_TIM_IC_ConfigChannel>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80015fc:	f000 f98a 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	003b      	movs	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	003b      	movs	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160c:	003a      	movs	r2, r7
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_TIM3_Init+0x114>)
 8001610:	0011      	movs	r1, r2
 8001612:	0018      	movs	r0, r3
 8001614:	f005 fb8e 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800161c:	f000 f97a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b00c      	add	sp, #48	@ 0x30
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000280 	.word	0x20000280
 800162c:	40000400 	.word	0x40000400
 8001630:	0000ffff 	.word	0x0000ffff

08001634 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	0018      	movs	r0, r3
 800163e:	230c      	movs	r3, #12
 8001640:	001a      	movs	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	f007 fea0 	bl	8009388 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 800164a:	4a16      	ldr	r2, [pc, #88]	@ (80016a4 <MX_TIM6_Init+0x70>)
 800164c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 8001650:	2210      	movs	r2, #16
 8001652:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 800165c:	22fa      	movs	r2, #250	@ 0xfa
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 800166a:	0018      	movs	r0, r3
 800166c:	f003 ff20 	bl	80054b0 <HAL_TIM_Base_Init>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001674:	f000 f94e 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2220      	movs	r2, #32
 800167c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001684:	1d3a      	adds	r2, r7, #4
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_TIM6_Init+0x6c>)
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f005 fb52 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001694:	f000 f93e 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002cc 	.word	0x200002cc
 80016a4:	40001000 	.word	0x40001000

080016a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <MX_TIM16_Init+0x48>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016c0:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <MX_TIM16_Init+0x4c>)
 80016c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <MX_TIM16_Init+0x44>)
 80016d8:	0018      	movs	r0, r3
 80016da:	f003 fee9 	bl	80054b0 <HAL_TIM_Base_Init>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80016e2:	f000 f917 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000318 	.word	0x20000318
 80016f0:	40014400 	.word	0x40014400
 80016f4:	0000ffff 	.word	0x0000ffff

080016f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <MX_USART2_UART_Init+0x94>)
 80016fe:	4a24      	ldr	r2, [pc, #144]	@ (8001790 <MX_USART2_UART_Init+0x98>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001704:	22e1      	movs	r2, #225	@ 0xe1
 8001706:	0252      	lsls	r2, r2, #9
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <MX_USART2_UART_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_USART2_UART_Init+0x94>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_USART2_UART_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_USART2_UART_Init+0x94>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001742:	0018      	movs	r0, r3
 8001744:	f005 fc18 	bl	8006f78 <HAL_UART_Init>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d001      	beq.n	8001750 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800174c:	f000 f8e2 	bl	8001914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001752:	2100      	movs	r1, #0
 8001754:	0018      	movs	r0, r3
 8001756:	f007 fc65 	bl	8009024 <HAL_UARTEx_SetTxFifoThreshold>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d001      	beq.n	8001762 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800175e:	f000 f8d9 	bl	8001914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001764:	2100      	movs	r1, #0
 8001766:	0018      	movs	r0, r3
 8001768:	f007 fc9c 	bl	80090a4 <HAL_UARTEx_SetRxFifoThreshold>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d001      	beq.n	8001774 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001770:	f000 f8d0 	bl	8001914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <MX_USART2_UART_Init+0x94>)
 8001776:	0018      	movs	r0, r3
 8001778:	f007 fc1a 	bl	8008fb0 <HAL_UARTEx_DisableFifoMode>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d001      	beq.n	8001784 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001780:	f000 f8c8 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	20000364 	.word	0x20000364
 8001790:	40004400 	.word	0x40004400

08001794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179a:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <MX_DMA_Init+0x28>)
 800179c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <MX_DMA_Init+0x28>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <MX_DMA_Init+0x28>)
 80017a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	240c      	movs	r4, #12
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	0018      	movs	r0, r3
 80017cc:	2314      	movs	r3, #20
 80017ce:	001a      	movs	r2, r3
 80017d0:	2100      	movs	r1, #0
 80017d2:	f007 fdd9 	bl	8009388 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001908 <MX_GPIO_Init+0x148>)
 80017d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017da:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <MX_GPIO_Init+0x148>)
 80017dc:	2102      	movs	r1, #2
 80017de:	430a      	orrs	r2, r1
 80017e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e2:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <MX_GPIO_Init+0x148>)
 80017e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <MX_GPIO_Init+0x148>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f2:	4b45      	ldr	r3, [pc, #276]	@ (8001908 <MX_GPIO_Init+0x148>)
 80017f4:	2104      	movs	r1, #4
 80017f6:	430a      	orrs	r2, r1
 80017f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017fa:	4b43      	ldr	r3, [pc, #268]	@ (8001908 <MX_GPIO_Init+0x148>)
 80017fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fe:	2204      	movs	r2, #4
 8001800:	4013      	ands	r3, r2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b40      	ldr	r3, [pc, #256]	@ (8001908 <MX_GPIO_Init+0x148>)
 8001808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <MX_GPIO_Init+0x148>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	635a      	str	r2, [r3, #52]	@ 0x34
 8001812:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <MX_GPIO_Init+0x148>)
 8001814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	483a      	ldr	r0, [pc, #232]	@ (800190c <MX_GPIO_Init+0x14c>)
 8001824:	2200      	movs	r2, #0
 8001826:	0019      	movs	r1, r3
 8001828:	f002 ff41 	bl	80046ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_GPIO_Port, Status_Pin, GPIO_PIN_RESET);
 800182c:	23a0      	movs	r3, #160	@ 0xa0
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	2200      	movs	r2, #0
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	0018      	movs	r0, r3
 8001836:	f002 ff3a 	bl	80046ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UV_LED_GPIO_Port, UV_LED_Pin, GPIO_PIN_RESET);
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <MX_GPIO_Init+0x150>)
 800183c:	2200      	movs	r2, #0
 800183e:	2140      	movs	r1, #64	@ 0x40
 8001840:	0018      	movs	r0, r3
 8001842:	f002 ff34 	bl	80046ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCU_Remote_Pin */
  GPIO_InitStruct.Pin = MCU_Remote_Pin;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2280      	movs	r2, #128	@ 0x80
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001854:	193b      	adds	r3, r7, r4
 8001856:	2201      	movs	r2, #1
 8001858:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_Remote_GPIO_Port, &GPIO_InitStruct);
 800185a:	193b      	adds	r3, r7, r4
 800185c:	4a2c      	ldr	r2, [pc, #176]	@ (8001910 <MX_GPIO_Init+0x150>)
 800185e:	0019      	movs	r1, r3
 8001860:	0010      	movs	r0, r2
 8001862:	f002 fda3 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001866:	0021      	movs	r1, r4
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2280      	movs	r2, #128	@ 0x80
 800186c:	0212      	lsls	r2, r2, #8
 800186e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	000c      	movs	r4, r1
 8001872:	193b      	adds	r3, r7, r4
 8001874:	2201      	movs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001884:	193b      	adds	r3, r7, r4
 8001886:	4a21      	ldr	r2, [pc, #132]	@ (800190c <MX_GPIO_Init+0x14c>)
 8001888:	0019      	movs	r1, r3
 800188a:	0010      	movs	r0, r2
 800188c:	f002 fd8e 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_Pin */
  GPIO_InitStruct.Pin = Status_Pin;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2280      	movs	r2, #128	@ 0x80
 8001894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2201      	movs	r2, #1
 800189a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Status_GPIO_Port, &GPIO_InitStruct);
 80018a8:	193a      	adds	r2, r7, r4
 80018aa:	23a0      	movs	r3, #160	@ 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f002 fd7b 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN_ALIVE_Pin */
  GPIO_InitStruct.Pin = GPIO_IN_ALIVE_Pin;
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	2280      	movs	r2, #128	@ 0x80
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	193b      	adds	r3, r7, r4
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_IN_ALIVE_GPIO_Port, &GPIO_InitStruct);
 80018ca:	193a      	adds	r2, r7, r4
 80018cc:	23a0      	movs	r3, #160	@ 0xa0
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f002 fd6a 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : UV_LED_Pin */
  GPIO_InitStruct.Pin = UV_LED_Pin;
 80018d8:	0021      	movs	r1, r4
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2240      	movs	r2, #64	@ 0x40
 80018de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2201      	movs	r2, #1
 80018e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(UV_LED_GPIO_Port, &GPIO_InitStruct);
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <MX_GPIO_Init+0x150>)
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f002 fd57 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b009      	add	sp, #36	@ 0x24
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	40021000 	.word	0x40021000
 800190c:	50000800 	.word	0x50000800
 8001910:	50000400 	.word	0x50000400

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <Error_Handler+0x24>)
 8001922:	0019      	movs	r1, r3
 8001924:	0010      	movs	r0, r2
 8001926:	f002 fedf 	bl	80046e8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800192a:	23fa      	movs	r3, #250	@ 0xfa
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	0018      	movs	r0, r3
 8001930:	f000 fcb0 	bl	8002294 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	e7f1      	b.n	800191c <Error_Handler+0x8>
 8001938:	50000800 	.word	0x50000800

0800193c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_MspInit+0x44>)
 8001944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_MspInit+0x44>)
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <HAL_MspInit+0x44>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_MspInit+0x44>)
 800195c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800195e:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_MspInit+0x44>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0549      	lsls	r1, r1, #21
 8001964:	430a      	orrs	r2, r1
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_MspInit+0x44>)
 800196a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	055b      	lsls	r3, r3, #21
 8001970:	4013      	ands	r3, r2
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b099      	sub	sp, #100	@ 0x64
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	234c      	movs	r3, #76	@ 0x4c
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	0018      	movs	r0, r3
 8001992:	2314      	movs	r3, #20
 8001994:	001a      	movs	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	f007 fcf6 	bl	8009388 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	2418      	movs	r4, #24
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	0018      	movs	r0, r3
 80019a2:	2334      	movs	r3, #52	@ 0x34
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f007 fcee 	bl	8009388 <memset>
  if(hadc->Instance==ADC1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a44      	ldr	r2, [pc, #272]	@ (8001ac4 <HAL_ADC_MspInit+0x140>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d000      	beq.n	80019b8 <HAL_ADC_MspInit+0x34>
 80019b6:	e080      	b.n	8001aba <HAL_ADC_MspInit+0x136>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	01d2      	lsls	r2, r2, #7
 80019be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	05d2      	lsls	r2, r2, #23
 80019c6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	0018      	movs	r0, r3
 80019cc:	f003 fbb8 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 80019d4:	f7ff ff9e 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 80019da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019dc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 80019de:	2180      	movs	r1, #128	@ 0x80
 80019e0:	0349      	lsls	r1, r1, #13
 80019e2:	430a      	orrs	r2, r1
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 80019e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	035b      	lsls	r3, r3, #13
 80019ee:	4013      	ands	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 80019f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f8:	4b33      	ldr	r3, [pc, #204]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 8001a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 8001a12:	2102      	movs	r1, #2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_ADC_MspInit+0x144>)
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = _24V_Sense_Pin|temp_MOSFET_Pin|Usense_Lamp_Pin;
 8001a24:	244c      	movs	r4, #76	@ 0x4c
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	220b      	movs	r2, #11
 8001a2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2203      	movs	r2, #3
 8001a30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	193a      	adds	r2, r7, r4
 8001a3a:	23a0      	movs	r3, #160	@ 0xa0
 8001a3c:	05db      	lsls	r3, r3, #23
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f002 fcb3 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IsenseLamp_Pin|LampIntensity_Pin|Isense_In_Pin;
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	2203      	movs	r2, #3
 8001a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001acc <HAL_ADC_MspInit+0x148>)
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	0010      	movs	r0, r2
 8001a60:	f002 fca4 	bl	80043ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_ADC_MspInit+0x150>)
 8001a68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a84:	2280      	movs	r2, #128	@ 0x80
 8001a86:	0052      	lsls	r2, r2, #1
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a8c:	2280      	movs	r2, #128	@ 0x80
 8001a8e:	00d2      	lsls	r2, r2, #3
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f002 f965 	bl	8003d70 <HAL_DMA_Init>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001aaa:	f7ff ff33 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001ab2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_ADC_MspInit+0x14c>)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b019      	add	sp, #100	@ 0x64
 8001ac0:	bd90      	pop	{r4, r7, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	40012400 	.word	0x40012400
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	50000400 	.word	0x50000400
 8001ad0:	20000148 	.word	0x20000148
 8001ad4:	40020008 	.word	0x40020008

08001ad8 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	240c      	movs	r4, #12
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	2314      	movs	r3, #20
 8001ae8:	001a      	movs	r2, r3
 8001aea:	2100      	movs	r1, #0
 8001aec:	f007 fc4c 	bl	8009388 <memset>
  if(hcomp->Instance==COMP2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_COMP_MspInit+0x60>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d11a      	bne.n	8001b30 <HAL_COMP_MspInit+0x58>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_COMP_MspInit+0x64>)
 8001afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_COMP_MspInit+0x64>)
 8001b00:	2102      	movs	r1, #2
 8001b02:	430a      	orrs	r2, r1
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_COMP_MspInit+0x64>)
 8001b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = Isense_MOS_Pin;
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	2210      	movs	r2, #16
 8001b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Isense_MOS_GPIO_Port, &GPIO_InitStruct);
 8001b24:	193b      	adds	r3, r7, r4
 8001b26:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <HAL_COMP_MspInit+0x68>)
 8001b28:	0019      	movs	r1, r3
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	f002 fc3e 	bl	80043ac <HAL_GPIO_Init>

    /* USER CODE END COMP2_MspInit 1 */

  }

}
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b009      	add	sp, #36	@ 0x24
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	40010204 	.word	0x40010204
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	50000400 	.word	0x50000400

08001b44 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b08b      	sub	sp, #44	@ 0x2c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	2414      	movs	r4, #20
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	0018      	movs	r0, r3
 8001b52:	2314      	movs	r3, #20
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f007 fc16 	bl	8009388 <memset>
  if(hdac->Instance==DAC1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a18      	ldr	r2, [pc, #96]	@ (8001bc4 <HAL_DAC_MspInit+0x80>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d129      	bne.n	8001bba <HAL_DAC_MspInit+0x76>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_DAC_MspInit+0x84>)
 8001b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_DAC_MspInit+0x84>)
 8001b6c:	2180      	movs	r1, #128	@ 0x80
 8001b6e:	0589      	lsls	r1, r1, #22
 8001b70:	430a      	orrs	r2, r1
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_DAC_MspInit+0x84>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	059b      	lsls	r3, r3, #22
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_DAC_MspInit+0x84>)
 8001b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_DAC_MspInit+0x84>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_DAC_MspInit+0x84>)
 8001b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = Ilevel_DAC_Pin|DAC2_Pin;
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	2230      	movs	r2, #48	@ 0x30
 8001b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	193a      	adds	r2, r7, r4
 8001bae:	23a0      	movs	r3, #160	@ 0xa0
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f002 fbf9 	bl	80043ac <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b00b      	add	sp, #44	@ 0x2c
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	40007400 	.word	0x40007400
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b093      	sub	sp, #76	@ 0x4c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	2414      	movs	r4, #20
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	0018      	movs	r0, r3
 8001bda:	2334      	movs	r3, #52	@ 0x34
 8001bdc:	001a      	movs	r2, r3
 8001bde:	2100      	movs	r1, #0
 8001be0:	f007 fbd2 	bl	8009388 <memset>
  if(htim_pwm->Instance==TIM1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11d      	bne.n	8001c2a <HAL_TIM_PWM_MspInit+0x5e>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	2280      	movs	r2, #128	@ 0x80
 8001bf2:	0392      	lsls	r2, r2, #14
 8001bf4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f003 fa9e 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001c08:	f7ff fe84 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x90>)
 8001c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x90>)
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	0109      	lsls	r1, r1, #4
 8001c16:	430a      	orrs	r2, r1
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x90>)
 8001c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c28:	e011      	b.n	8001c4e <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	05db      	lsls	r3, r3, #23
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d10b      	bne.n	8001c4e <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x90>)
 8001c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x90>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x90>)
 8001c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b013      	add	sp, #76	@ 0x4c
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	40012c00 	.word	0x40012c00
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	2414      	movs	r4, #20
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2314      	movs	r3, #20
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f007 fb88 	bl	8009388 <memset>
  if(htim_ic->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce8 <HAL_TIM_IC_MspInit+0x88>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12d      	bne.n	8001cde <HAL_TIM_IC_MspInit+0x7e>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_TIM_IC_MspInit+0x8c>)
 8001c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_TIM_IC_MspInit+0x8c>)
 8001c88:	2102      	movs	r1, #2
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <HAL_TIM_IC_MspInit+0x8c>)
 8001c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_TIM_IC_MspInit+0x8c>)
 8001c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_TIM_IC_MspInit+0x8c>)
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_TIM_IC_MspInit+0x8c>)
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_INPUT_Pin;
 8001cb2:	0021      	movs	r1, r4
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2201      	movs	r2, #1
 8001cd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	4a06      	ldr	r2, [pc, #24]	@ (8001cf0 <HAL_TIM_IC_MspInit+0x90>)
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	0010      	movs	r0, r2
 8001cda:	f002 fb67 	bl	80043ac <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b00b      	add	sp, #44	@ 0x2c
 8001ce4:	bd90      	pop	{r4, r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	50000400 	.word	0x50000400

08001cf4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a17      	ldr	r2, [pc, #92]	@ (8001d60 <HAL_TIM_Base_MspInit+0x6c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10c      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_TIM_Base_MspInit+0x70>)
 8001d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_TIM_Base_MspInit+0x70>)
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d12:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <HAL_TIM_Base_MspInit+0x70>)
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	2210      	movs	r2, #16
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d1e:	e01a      	b.n	8001d56 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_TIM_Base_MspInit+0x74>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d115      	bne.n	8001d56 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_TIM_Base_MspInit+0x70>)
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_TIM_Base_MspInit+0x70>)
 8001d30:	2180      	movs	r1, #128	@ 0x80
 8001d32:	0289      	lsls	r1, r1, #10
 8001d34:	430a      	orrs	r2, r1
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_TIM_Base_MspInit+0x70>)
 8001d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2015      	movs	r0, #21
 8001d4c:	f001 fda0 	bl	8003890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001d50:	2015      	movs	r0, #21
 8001d52:	f001 fdb2 	bl	80038ba <HAL_NVIC_EnableIRQ>
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	40001000 	.word	0x40001000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40014400 	.word	0x40014400

08001d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b08b      	sub	sp, #44	@ 0x2c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	2414      	movs	r4, #20
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	0018      	movs	r0, r3
 8001d7a:	2314      	movs	r3, #20
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f007 fb02 	bl	8009388 <memset>
  if(htim->Instance==TIM1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a29      	ldr	r2, [pc, #164]	@ (8001e30 <HAL_TIM_MspPostInit+0xc4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d124      	bne.n	8001dd8 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <HAL_TIM_MspPostInit+0xc8>)
 8001d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d92:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <HAL_TIM_MspPostInit+0xc8>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d9a:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <HAL_TIM_MspPostInit+0xc8>)
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DRV_Pin;
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	2280      	movs	r2, #128	@ 0x80
 8001daa:	0052      	lsls	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	0021      	movs	r1, r4
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2202      	movs	r2, #2
 8001db4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	187a      	adds	r2, r7, r1
 8001dca:	23a0      	movs	r3, #160	@ 0xa0
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f002 faeb 	bl	80043ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dd6:	e027      	b.n	8001e28 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	05db      	lsls	r3, r3, #23
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d121      	bne.n	8001e28 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <HAL_TIM_MspPostInit+0xc8>)
 8001de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_TIM_MspPostInit+0xc8>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	430a      	orrs	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_TIM_MspPostInit+0xc8>)
 8001df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df4:	2204      	movs	r2, #4
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_out_ALIVE_Pin;
 8001dfc:	2114      	movs	r1, #20
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2240      	movs	r2, #64	@ 0x40
 8001e02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2202      	movs	r2, #2
 8001e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001e16:	187b      	adds	r3, r7, r1
 8001e18:	2202      	movs	r2, #2
 8001e1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_out_ALIVE_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <HAL_TIM_MspPostInit+0xcc>)
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f002 fac2 	bl	80043ac <HAL_GPIO_Init>
}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b00b      	add	sp, #44	@ 0x2c
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	50000800 	.word	0x50000800

08001e3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b097      	sub	sp, #92	@ 0x5c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	2344      	movs	r3, #68	@ 0x44
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	0018      	movs	r0, r3
 8001e4a:	2314      	movs	r3, #20
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f007 fa9a 	bl	8009388 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	2410      	movs	r4, #16
 8001e56:	193b      	adds	r3, r7, r4
 8001e58:	0018      	movs	r0, r3
 8001e5a:	2334      	movs	r3, #52	@ 0x34
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f007 fa92 	bl	8009388 <memset>
  if(huart->Instance==USART2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <HAL_UART_MspInit+0xb8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d13e      	bne.n	8001eec <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e74:	193b      	adds	r3, r7, r4
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f003 f95f 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e86:	f7ff fd45 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_UART_MspInit+0xbc>)
 8001e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_UART_MspInit+0xbc>)
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	0289      	lsls	r1, r1, #10
 8001e94:	430a      	orrs	r2, r1
 8001e96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e98:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_UART_MspInit+0xbc>)
 8001e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_UART_MspInit+0xbc>)
 8001ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_UART_MspInit+0xbc>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_UART_MspInit+0xbc>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001ebe:	2144      	movs	r1, #68	@ 0x44
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_UART_MspInit+0xc0>)
 8001ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	2202      	movs	r2, #2
 8001eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2201      	movs	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	187a      	adds	r2, r7, r1
 8001ee0:	23a0      	movs	r3, #160	@ 0xa0
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	0011      	movs	r1, r2
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f002 fa60 	bl	80043ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b017      	add	sp, #92	@ 0x5c
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	40004400 	.word	0x40004400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	00008004 	.word	0x00008004

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f04:	46c0      	nop			@ (mov r8, r8)
 8001f06:	e7fd      	b.n	8001f04 <NMI_Handler+0x4>

08001f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	e7fd      	b.n	8001f0c <HardFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f000 f998 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <DMA1_Channel1_IRQHandler+0x98>)
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f002 f8f3 	bl	8004128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	// All ADC channels transferred via DMA
  for (int ch = 0; ch < numberADCchannels; ch++) {
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	e017      	b.n	8001f78 <DMA1_Channel1_IRQHandler+0x44>
      adc_buffer[ch] = (adc_buffer[ch] * 3 + (adc_DMA[ch])) >> 2;
 8001f48:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	0052      	lsls	r2, r2, #1
 8001f4e:	5ad3      	ldrh	r3, [r2, r3]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	001a      	movs	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	189b      	adds	r3, r3, r2
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <DMA1_Channel1_IRQHandler+0xa0>)
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	0049      	lsls	r1, r1, #1
 8001f60:	5a8a      	ldrh	r2, [r1, r2]
 8001f62:	b292      	uxth	r2, r2
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	109b      	asrs	r3, r3, #2
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	0052      	lsls	r2, r2, #1
 8001f70:	52d1      	strh	r1, [r2, r3]
  for (int ch = 0; ch < numberADCchannels; ch++) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3301      	adds	r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <DMA1_Channel1_IRQHandler+0xa4>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	001a      	movs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dbe0      	blt.n	8001f48 <DMA1_Channel1_IRQHandler+0x14>
  }

  // Assign named channels
  adc_24V          = adc_buffer[0]; // 4095 = 36.3 V
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <DMA1_Channel1_IRQHandler+0xa8>)
 8001f8e:	801a      	strh	r2, [r3, #0]
  adc_tempMOSFET   = adc_buffer[1]; // 2482 = 2V = 90°C
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f92:	885b      	ldrh	r3, [r3, #2]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <DMA1_Channel1_IRQHandler+0xac>)
 8001f98:	801a      	strh	r2, [r3, #0]
  adc_uSenseLamp   = adc_buffer[2];
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f9c:	889b      	ldrh	r3, [r3, #4]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <DMA1_Channel1_IRQHandler+0xb0>)
 8001fa2:	801a      	strh	r2, [r3, #0]
  adc_iSenseLamp   = adc_buffer[3];
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fa6:	88db      	ldrh	r3, [r3, #6]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <DMA1_Channel1_IRQHandler+0xb4>)
 8001fac:	801a      	strh	r2, [r3, #0]
  adc_lampIntensity= adc_buffer[4];
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fb0:	891b      	ldrh	r3, [r3, #8]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <DMA1_Channel1_IRQHandler+0xb8>)
 8001fb6:	801a      	strh	r2, [r3, #0]
  adc_iSenseIn     = adc_buffer[5]; // 2707 = 24V, 4095 = 0.825 A
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001fba:	895b      	ldrh	r3, [r3, #10]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <DMA1_Channel1_IRQHandler+0xbc>)
 8001fc0:	801a      	strh	r2, [r3, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	20000148 	.word	0x20000148
 8001fd0:	200000cc 	.word	0x200000cc
 8001fd4:	200000c0 	.word	0x200000c0
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	200000d8 	.word	0x200000d8
 8001fe0:	200000da 	.word	0x200000da
 8001fe4:	200000dc 	.word	0x200000dc
 8001fe8:	200000de 	.word	0x200000de
 8001fec:	200000e0 	.word	0x200000e0
 8001ff0:	200000e2 	.word	0x200000e2

08001ff4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <ADC1_COMP_IRQHandler+0x14>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fcf8 	bl	80029f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	200000e4 	.word	0x200000e4

0800200c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <TIM3_IRQHandler+0x14>)
 8002012:	0018      	movs	r0, r3
 8002014:	f003 fc9a 	bl	800594c <HAL_TIM_IRQHandler>
  //risingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  //fallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);


  /* USER CODE END TIM3_IRQn 1 */
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	20000280 	.word	0x20000280

08002024 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <TIM6_DAC_LPTIM1_IRQHandler+0x54>)
 800202a:	0018      	movs	r0, r3
 800202c:	f003 fc8e 	bl	800594c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <TIM6_DAC_LPTIM1_IRQHandler+0x58>)
 8002032:	0018      	movs	r0, r3
 8002034:	f001 fcd8 	bl	80039e8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  // 1 kHz interrupt
  tim6_irq_request = 1;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <TIM6_DAC_LPTIM1_IRQHandler+0x5c>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]


  // 1 Hz interrupt
  if (k_slowIT <1000) {
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	23fa      	movs	r3, #250	@ 0xfa
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	429a      	cmp	r2, r3
 8002048:	d206      	bcs.n	8002058 <TIM6_DAC_LPTIM1_IRQHandler+0x34>
	  k_slowIT++;
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002054:	801a      	strh	r2, [r3, #0]

  }


  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002056:	e00b      	b.n	8002070 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
  else if (k_slowIT >999) {
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	23fa      	movs	r3, #250	@ 0xfa
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d305      	bcc.n	8002070 <TIM6_DAC_LPTIM1_IRQHandler+0x4c>
	  k_slowIT = 0;
 8002064:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <TIM6_DAC_LPTIM1_IRQHandler+0x60>)
 8002066:	2200      	movs	r2, #0
 8002068:	801a      	strh	r2, [r3, #0]
	  tim6_slowIrq_request = 1;
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <TIM6_DAC_LPTIM1_IRQHandler+0x64>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
}
 8002070:	46c0      	nop			@ (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	200002cc 	.word	0x200002cc
 800207c:	200001d4 	.word	0x200001d4
 8002080:	200000bd 	.word	0x200000bd
 8002084:	20000454 	.word	0x20000454
 8002088:	200000be 	.word	0x200000be

0800208c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <TIM16_IRQHandler+0x14>)
 8002092:	0018      	movs	r0, r3
 8002094:	f003 fc5a 	bl	800594c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	20000318 	.word	0x20000318

080020a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a8:	4b03      	ldr	r3, [pc, #12]	@ (80020b8 <USART2_IRQHandler+0x14>)
 80020aa:	0018      	movs	r0, r3
 80020ac:	f005 f8bc 	bl	8007228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	20000364 	.word	0x20000364

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f007 f954 	bl	8009398 <__errno>
 80020f0:	0003      	movs	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	425b      	negs	r3, r3
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	18d2      	adds	r2, r2, r3
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <_sbrk+0x64>)
 800210c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b006      	add	sp, #24
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20009000 	.word	0x20009000
 800211c:	00000400 	.word	0x00000400
 8002120:	20000458 	.word	0x20000458
 8002124:	200005a8 	.word	0x200005a8

08002128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002134:	480d      	ldr	r0, [pc, #52]	@ (800216c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002136:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002138:	f7ff fff6 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <LoopForever+0x6>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	@ (8002174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <LoopForever+0xe>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	@ (8002180 <LoopForever+0x16>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002162:	f007 f91f 	bl	80093a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002166:	f7fe fc1b 	bl	80009a0 <main>

0800216a <LoopForever>:

LoopForever:
  b LoopForever
 800216a:	e7fe      	b.n	800216a <LoopForever>
  ldr   r0, =_estack
 800216c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002178:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 800217c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002180:	200005a8 	.word	0x200005a8

08002184 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <CEC_IRQHandler>
	...

08002188 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_Init+0x3c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_Init+0x3c>)
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	0049      	lsls	r1, r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a2:	2003      	movs	r0, #3
 80021a4:	f000 f810 	bl	80021c8 <HAL_InitTick>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e001      	b.n	80021b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff fbc2 	bl	800193c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021b8:	1dfb      	adds	r3, r7, #7
 80021ba:	781b      	ldrb	r3, [r3, #0]
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40022000 	.word	0x40022000

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021d0:	230f      	movs	r3, #15
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_InitTick+0x88>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02b      	beq.n	8002238 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80021e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <HAL_InitTick+0x8c>)
 80021e2:	681c      	ldr	r4, [r3, #0]
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_InitTick+0x88>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	0019      	movs	r1, r3
 80021ea:	23fa      	movs	r3, #250	@ 0xfa
 80021ec:	0098      	lsls	r0, r3, #2
 80021ee:	f7fd ff9b 	bl	8000128 <__udivsi3>
 80021f2:	0003      	movs	r3, r0
 80021f4:	0019      	movs	r1, r3
 80021f6:	0020      	movs	r0, r4
 80021f8:	f7fd ff96 	bl	8000128 <__udivsi3>
 80021fc:	0003      	movs	r3, r0
 80021fe:	0018      	movs	r0, r3
 8002200:	f001 fb6b 	bl	80038da <HAL_SYSTICK_Config>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d112      	bne.n	800222e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d80a      	bhi.n	8002224 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	2301      	movs	r3, #1
 8002212:	425b      	negs	r3, r3
 8002214:	2200      	movs	r2, #0
 8002216:	0018      	movs	r0, r3
 8002218:	f001 fb3a 	bl	8003890 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_InitTick+0x90>)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e00d      	b.n	8002240 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002224:	230f      	movs	r3, #15
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e008      	b.n	8002240 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e003      	b.n	8002240 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002238:	230f      	movs	r3, #15
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002240:	230f      	movs	r3, #15
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	781b      	ldrb	r3, [r3, #0]
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b005      	add	sp, #20
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	20000048 	.word	0x20000048
 8002254:	20000040 	.word	0x20000040
 8002258:	20000044 	.word	0x20000044

0800225c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_IncTick+0x1c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_IncTick+0x20>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	18d2      	adds	r2, r2, r3
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_IncTick+0x20>)
 800226e:	601a      	str	r2, [r3, #0]
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	20000048 	.word	0x20000048
 800227c:	2000045c 	.word	0x2000045c

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b02      	ldr	r3, [pc, #8]	@ (8002290 <HAL_GetTick+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	2000045c 	.word	0x2000045c

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fff0 	bl	8002280 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	001a      	movs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	f7ff ffe0 	bl	8002280 <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	20000048 	.word	0x20000048

080022dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80022ec:	401a      	ands	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	fe3fffff 	.word	0xfe3fffff

08002304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	23e0      	movs	r3, #224	@ 0xe0
 8002312:	045b      	lsls	r3, r3, #17
 8002314:	4013      	ands	r3, r2
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}

0800231e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	2104      	movs	r1, #4
 8002332:	400a      	ands	r2, r1
 8002334:	2107      	movs	r1, #7
 8002336:	4091      	lsls	r1, r2
 8002338:	000a      	movs	r2, r1
 800233a:	43d2      	mvns	r2, r2
 800233c:	401a      	ands	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2104      	movs	r1, #4
 8002342:	400b      	ands	r3, r1
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4099      	lsls	r1, r3
 8002348:	000b      	movs	r3, r1
 800234a:	431a      	orrs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}

08002358 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	2104      	movs	r1, #4
 800236a:	400a      	ands	r2, r1
 800236c:	2107      	movs	r1, #7
 800236e:	4091      	lsls	r1, r2
 8002370:	000a      	movs	r2, r1
 8002372:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2104      	movs	r1, #4
 8002378:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800237a:	40da      	lsrs	r2, r3
 800237c:	0013      	movs	r3, r2
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}

08002386 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	23c0      	movs	r3, #192	@ 0xc0
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d101      	bne.n	800239e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	211f      	movs	r1, #31
 80023bc:	400a      	ands	r2, r1
 80023be:	210f      	movs	r1, #15
 80023c0:	4091      	lsls	r1, r2
 80023c2:	000a      	movs	r2, r1
 80023c4:	43d2      	mvns	r2, r2
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	210f      	movs	r1, #15
 80023ce:	4019      	ands	r1, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	201f      	movs	r0, #31
 80023d4:	4003      	ands	r3, r0
 80023d6:	4099      	lsls	r1, r3
 80023d8:	000b      	movs	r3, r1
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	035b      	lsls	r3, r3, #13
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}

0800240a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	0352      	lsls	r2, r2, #13
 800241c:	0b52      	lsrs	r2, r2, #13
 800241e:	43d2      	mvns	r2, r2
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}

0800242e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2203      	movs	r2, #3
 800243c:	4013      	ands	r3, r2
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	0212      	lsls	r2, r2, #8
 800245c:	43d2      	mvns	r2, r2
 800245e:	401a      	ands	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	400b      	ands	r3, r1
 8002468:	4904      	ldr	r1, [pc, #16]	@ (800247c <LL_ADC_SetChannelSamplingTime+0x34>)
 800246a:	400b      	ands	r3, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	07ffff00 	.word	0x07ffff00

08002480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800248e:	4013      	ands	r3, r2
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	0552      	lsls	r2, r2, #21
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	6fffffe8 	.word	0x6fffffe8

080024a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	401a      	ands	r2, r3
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	055b      	lsls	r3, r3, #21
 80024be:	429a      	cmp	r2, r3
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <LL_ADC_Enable+0x20>)
 80024de:	4013      	ands	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	7fffffe8 	.word	0x7fffffe8

080024f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <LL_ADC_Disable+0x20>)
 8002502:	4013      	ands	r3, r2
 8002504:	2202      	movs	r2, #2
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	7fffffe8 	.word	0x7fffffe8

08002518 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2201      	movs	r2, #1
 8002526:	4013      	ands	r3, r2
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <LL_ADC_IsEnabled+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_ADC_IsEnabled+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <LL_ADC_REG_StartConversion+0x20>)
 800254a:	4013      	ands	r3, r2
 800254c:	2204      	movs	r2, #4
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	7fffffe8 	.word	0x7fffffe8

08002560 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	2b04      	cmp	r3, #4
 8002572:	d101      	bne.n	8002578 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258c:	231f      	movs	r3, #31
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e17f      	b.n	80028aa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff f9e5 	bl	8001984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2254      	movs	r2, #84	@ 0x54
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7ff ff6b 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d115      	bne.n	8002602 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff ff50 	bl	8002480 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e0:	4bb4      	ldr	r3, [pc, #720]	@ (80028b4 <HAL_ADC_Init+0x330>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	49b4      	ldr	r1, [pc, #720]	@ (80028b8 <HAL_ADC_Init+0x334>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fd fd9e 	bl	8000128 <__udivsi3>
 80025ec:	0003      	movs	r3, r0
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff ff4e 	bl	80024a8 <LL_ADC_IsInternalRegulatorEnabled>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d10f      	bne.n	8002630 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	2210      	movs	r2, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	2201      	movs	r2, #1
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002628:	231f      	movs	r3, #31
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff ff93 	bl	8002560 <LL_ADC_REG_IsConversionOngoing>
 800263a:	0003      	movs	r3, r0
 800263c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	2210      	movs	r2, #16
 8002644:	4013      	ands	r3, r2
 8002646:	d000      	beq.n	800264a <HAL_ADC_Init+0xc6>
 8002648:	e122      	b.n	8002890 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d000      	beq.n	8002652 <HAL_ADC_Init+0xce>
 8002650:	e11e      	b.n	8002890 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	4a99      	ldr	r2, [pc, #612]	@ (80028bc <HAL_ADC_Init+0x338>)
 8002658:	4013      	ands	r3, r2
 800265a:	2202      	movs	r2, #2
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff ff56 	bl	8002518 <LL_ADC_IsEnabled>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d000      	beq.n	8002672 <HAL_ADC_Init+0xee>
 8002670:	e0ad      	b.n	80027ce <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7e1b      	ldrb	r3, [r3, #24]
 800267a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800267c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7e5b      	ldrb	r3, [r3, #25]
 8002682:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002684:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e9b      	ldrb	r3, [r3, #26]
 800268a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800268c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_ADC_Init+0x118>
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	015b      	lsls	r3, r3, #5
 800269a:	e000      	b.n	800269e <HAL_ADC_Init+0x11a>
 800269c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800269e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026a4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da04      	bge.n	80026b8 <HAL_ADC_Init+0x134>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	e001      	b.n	80026bc <HAL_ADC_Init+0x138>
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80026bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	212c      	movs	r1, #44	@ 0x2c
 80026c2:	5c5b      	ldrb	r3, [r3, r1]
 80026c4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026c6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d115      	bne.n	8002704 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e9b      	ldrb	r3, [r3, #26]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	0252      	lsls	r2, r2, #9
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e00b      	b.n	8002704 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	2220      	movs	r2, #32
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002710:	23e0      	movs	r3, #224	@ 0xe0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800271a:	4313      	orrs	r3, r2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a65      	ldr	r2, [pc, #404]	@ (80028c0 <HAL_ADC_Init+0x33c>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0f9b      	lsrs	r3, r3, #30
 800273e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002744:	4313      	orrs	r3, r2
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	223c      	movs	r2, #60	@ 0x3c
 8002750:	5c9b      	ldrb	r3, [r3, r2]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d111      	bne.n	800277a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	0f9b      	lsrs	r3, r3, #30
 800275c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002762:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002768:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800276e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	2201      	movs	r2, #1
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_ADC_Init+0x340>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	430a      	orrs	r2, r1
 800278e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	23c0      	movs	r3, #192	@ 0xc0
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	429a      	cmp	r2, r3
 800279a:	d018      	beq.n	80027ce <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	05db      	lsls	r3, r3, #23
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d012      	beq.n	80027ce <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d00c      	beq.n	80027ce <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027b4:	4b44      	ldr	r3, [pc, #272]	@ (80028c8 <HAL_ADC_Init+0x344>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a44      	ldr	r2, [pc, #272]	@ (80028cc <HAL_ADC_Init+0x348>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	23f0      	movs	r3, #240	@ 0xf0
 80027c4:	039b      	lsls	r3, r3, #14
 80027c6:	401a      	ands	r2, r3
 80027c8:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_ADC_Init+0x344>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d6:	001a      	movs	r2, r3
 80027d8:	2100      	movs	r1, #0
 80027da:	f7ff fda0 	bl	800231e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e6:	493a      	ldr	r1, [pc, #232]	@ (80028d0 <HAL_ADC_Init+0x34c>)
 80027e8:	001a      	movs	r2, r3
 80027ea:	f7ff fd98 	bl	800231e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2110      	movs	r1, #16
 8002802:	4249      	negs	r1, r1
 8002804:	430a      	orrs	r2, r1
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
 8002808:	e018      	b.n	800283c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	039b      	lsls	r3, r3, #14
 8002812:	429a      	cmp	r2, r3
 8002814:	d112      	bne.n	800283c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	3b01      	subs	r3, #1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	221c      	movs	r2, #28
 8002826:	4013      	ands	r3, r2
 8002828:	2210      	movs	r2, #16
 800282a:	4252      	negs	r2, r2
 800282c:	409a      	lsls	r2, r3
 800282e:	0011      	movs	r1, r2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2100      	movs	r1, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f7ff fd88 	bl	8002358 <LL_ADC_GetSamplingTimeCommonChannels>
 8002848:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800284e:	429a      	cmp	r2, r3
 8002850:	d10b      	bne.n	800286a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285c:	2203      	movs	r2, #3
 800285e:	4393      	bics	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002868:	e01c      	b.n	80028a4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286e:	2212      	movs	r2, #18
 8002870:	4393      	bics	r3, r2
 8002872:	2210      	movs	r2, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2201      	movs	r2, #1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002886:	231f      	movs	r3, #31
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800288e:	e009      	b.n	80028a4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	2210      	movs	r2, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800289c:	231f      	movs	r3, #31
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028a4:	231f      	movs	r3, #31
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b008      	add	sp, #32
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	20000040 	.word	0x20000040
 80028b8:	00030d40 	.word	0x00030d40
 80028bc:	fffffefd 	.word	0xfffffefd
 80028c0:	ffde0201 	.word	0xffde0201
 80028c4:	1ffffc02 	.word	0x1ffffc02
 80028c8:	40012708 	.word	0x40012708
 80028cc:	ffc3ffff 	.word	0xffc3ffff
 80028d0:	07ffff04 	.word	0x07ffff04

080028d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff fe3b 	bl	8002560 <LL_ADC_REG_IsConversionOngoing>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d16c      	bne.n	80029c8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2254      	movs	r2, #84	@ 0x54
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_Start_DMA+0x28>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e06c      	b.n	80029d6 <HAL_ADC_Start_DMA+0x102>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2254      	movs	r2, #84	@ 0x54
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d113      	bne.n	8002938 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0018      	movs	r0, r3
 8002916:	f7ff fdff 	bl	8002518 <LL_ADC_IsEnabled>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d004      	beq.n	8002928 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0018      	movs	r0, r3
 8002924:	f7ff fde6 	bl	80024f4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002938:	2517      	movs	r5, #23
 800293a:	197c      	adds	r4, r7, r5
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 fb66 	bl	8003010 <ADC_Enable>
 8002944:	0003      	movs	r3, r0
 8002946:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002948:	002c      	movs	r4, r5
 800294a:	193b      	adds	r3, r7, r4
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13e      	bne.n	80029d0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	4a22      	ldr	r2, [pc, #136]	@ (80029e0 <HAL_ADC_Start_DMA+0x10c>)
 8002958:	4013      	ands	r3, r2
 800295a:	2280      	movs	r2, #128	@ 0x80
 800295c:	0052      	lsls	r2, r2, #1
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296e:	4a1d      	ldr	r2, [pc, #116]	@ (80029e4 <HAL_ADC_Start_DMA+0x110>)
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002976:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <HAL_ADC_Start_DMA+0x114>)
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800297e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ec <HAL_ADC_Start_DMA+0x118>)
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	221c      	movs	r2, #28
 8002988:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2254      	movs	r2, #84	@ 0x54
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2110      	movs	r1, #16
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3340      	adds	r3, #64	@ 0x40
 80029ac:	0019      	movs	r1, r3
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	193c      	adds	r4, r7, r4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f001 fa66 	bl	8003e84 <HAL_DMA_Start_IT>
 80029b8:	0003      	movs	r3, r0
 80029ba:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff fdbb 	bl	800253c <LL_ADC_REG_StartConversion>
 80029c6:	e003      	b.n	80029d0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029c8:	2317      	movs	r3, #23
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80029d0:	2317      	movs	r3, #23
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b006      	add	sp, #24
 80029dc:	bdb0      	pop	{r4, r5, r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	fffff0fe 	.word	0xfffff0fe
 80029e4:	0800311d 	.word	0x0800311d
 80029e8:	080031e5 	.word	0x080031e5
 80029ec:	08003203 	.word	0x08003203

080029f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	d017      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x54>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	2210      	movs	r2, #16
 8002a22:	4013      	ands	r3, r2
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	2280      	movs	r2, #128	@ 0x80
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fc0e 	bl	8003258 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2202      	movs	r2, #2
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2204      	movs	r2, #4
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x64>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	d107      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2208      	movs	r2, #8
 8002a58:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a5a:	d04d      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2208      	movs	r2, #8
 8002a60:	4013      	ands	r3, r2
 8002a62:	d049      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	2210      	movs	r2, #16
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d106      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff fc80 	bl	8002386 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d02e      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7e9b      	ldrb	r3, [r3, #26]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d12a      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d123      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff fd5b 	bl	8002560 <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d110      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	210c      	movs	r1, #12
 8002aba:	438a      	bics	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_ADC_IRQHandler+0x22c>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ace:	e00b      	b.n	8002ae8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 f898 	bl	8002c20 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	220c      	movs	r2, #12
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	4013      	ands	r3, r2
 8002afe:	d012      	beq.n	8002b26 <HAL_ADC_IRQHandler+0x136>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	2280      	movs	r2, #128	@ 0x80
 8002b0e:	0252      	lsls	r2, r2, #9
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f891 	bl	8002c40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d014      	beq.n	8002b5a <HAL_ADC_IRQHandler+0x16a>
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00f      	beq.n	8002b5a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	2280      	movs	r2, #128	@ 0x80
 8002b40:	0292      	lsls	r2, r2, #10
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fb74 	bl	8003238 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	0052      	lsls	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	2380      	movs	r3, #128	@ 0x80
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	d014      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x19e>
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	2280      	movs	r2, #128	@ 0x80
 8002b74:	02d2      	lsls	r2, r2, #11
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fb62 	bl	8003248 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2280      	movs	r2, #128	@ 0x80
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2210      	movs	r2, #16
 8002b92:	4013      	ands	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_ADC_IRQHandler+0x1fe>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d027      	beq.n	8002bee <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e008      	b.n	8002bbe <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff fc3c 	bl	800242e <LL_ADC_REG_GetDMATransfer>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d110      	bne.n	8002be6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	2280      	movs	r2, #128	@ 0x80
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f835 	bl	8002c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2210      	movs	r2, #16
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	019b      	lsls	r3, r3, #6
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_ADC_IRQHandler+0x224>
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	2380      	movs	r3, #128	@ 0x80
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d008      	beq.n	8002c14 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fb2f 	bl	8003268 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2280      	movs	r2, #128	@ 0x80
 8002c10:	0192      	lsls	r2, r2, #6
 8002c12:	601a      	str	r2, [r3, #0]
  }
}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b006      	add	sp, #24
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	fffffefe 	.word	0xfffffefe

08002c20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c38:	46c0      	nop			@ (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2317      	movs	r3, #23
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2254      	movs	r2, #84	@ 0x54
 8002c7a:	5c9b      	ldrb	r3, [r3, r2]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x24>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e1c0      	b.n	8003006 <HAL_ADC_ConfigChannel+0x3a6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2254      	movs	r2, #84	@ 0x54
 8002c88:	2101      	movs	r1, #1
 8002c8a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff fc65 	bl	8002560 <LL_ADC_REG_IsConversionOngoing>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d000      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x3c>
 8002c9a:	e1a3      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x46>
 8002ca4:	e143      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cb6:	4ac1      	ldr	r2, [pc, #772]	@ (8002fbc <HAL_ADC_ConfigChannel+0x35c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f7ff fb8e 	bl	80023e8 <LL_ADC_REG_SetSequencerChAdd>
 8002ccc:	e0c9      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	211f      	movs	r1, #31
 8002cd8:	400b      	ands	r3, r1
 8002cda:	210f      	movs	r1, #15
 8002cdc:	4099      	lsls	r1, r3
 8002cde:	000b      	movs	r3, r1
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	035b      	lsls	r3, r3, #13
 8002cec:	0b5b      	lsrs	r3, r3, #13
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x9c>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	221f      	movs	r2, #31
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	e098      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	d000      	beq.n	8002d08 <HAL_ADC_ConfigChannel+0xa8>
 8002d06:	e091      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1cc>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d000      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0xb4>
 8002d12:	e089      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x1c8>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d000      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0xc0>
 8002d1e:	e081      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x1c4>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2208      	movs	r2, #8
 8002d26:	4013      	ands	r3, r2
 8002d28:	d000      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0xcc>
 8002d2a:	e079      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x1c0>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
 8002d34:	d000      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0xd8>
 8002d36:	e071      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x1bc>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d000      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0xe4>
 8002d42:	e069      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x1b8>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2240      	movs	r2, #64	@ 0x40
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d000      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0xf0>
 8002d4e:	e061      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1b4>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	4013      	ands	r3, r2
 8002d58:	d000      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0xfc>
 8002d5a:	e059      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1b0>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d151      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1ac>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d149      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x1a8>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d141      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1a4>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d139      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x1a0>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	4013      	ands	r3, r2
 8002d96:	d131      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x19c>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	019b      	lsls	r3, r3, #6
 8002da0:	4013      	ands	r3, r2
 8002da2:	d129      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x198>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	01db      	lsls	r3, r3, #7
 8002dac:	4013      	ands	r3, r2
 8002dae:	d121      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x194>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	d119      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x190>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	025b      	lsls	r3, r3, #9
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x18c>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	029b      	lsls	r3, r3, #10
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x188>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	02db      	lsls	r3, r3, #11
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d001      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x184>
 8002de0:	2312      	movs	r3, #18
 8002de2:	e024      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002de4:	2300      	movs	r3, #0
 8002de6:	e022      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002de8:	2311      	movs	r3, #17
 8002dea:	e020      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002dec:	2310      	movs	r3, #16
 8002dee:	e01e      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002df0:	230f      	movs	r3, #15
 8002df2:	e01c      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002df4:	230e      	movs	r3, #14
 8002df6:	e01a      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002df8:	230d      	movs	r3, #13
 8002dfa:	e018      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	e016      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e00:	230b      	movs	r3, #11
 8002e02:	e014      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e04:	230a      	movs	r3, #10
 8002e06:	e012      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e08:	2309      	movs	r3, #9
 8002e0a:	e010      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	e00e      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e10:	2307      	movs	r3, #7
 8002e12:	e00c      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e14:	2306      	movs	r3, #6
 8002e16:	e00a      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	2305      	movs	r3, #5
 8002e1a:	e008      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	e006      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e20:	2303      	movs	r3, #3
 8002e22:	e004      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e002      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1ce>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	201f      	movs	r0, #31
 8002e34:	4002      	ands	r2, r0
 8002e36:	4093      	lsls	r3, r2
 8002e38:	000a      	movs	r2, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d808      	bhi.n	8002e62 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	f7ff faa3 	bl	80023a8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	001a      	movs	r2, r3
 8002e70:	f7ff faea 	bl	8002448 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db00      	blt.n	8002e7e <HAL_ADC_ConfigChannel+0x21e>
 8002e7c:	e0bc      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e7e:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff fa3f 	bl	8002304 <LL_ADC_GetCommonPathInternalCh>
 8002e86:	0003      	movs	r3, r0
 8002e88:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x364>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d122      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e9c:	d11d      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2280      	movs	r2, #128	@ 0x80
 8002ea2:	0412      	lsls	r2, r2, #16
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4a46      	ldr	r2, [pc, #280]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	0010      	movs	r0, r2
 8002eac:	f7ff fa16 	bl	80022dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb0:	4b45      	ldr	r3, [pc, #276]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x368>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4945      	ldr	r1, [pc, #276]	@ (8002fcc <HAL_ADC_ConfigChannel+0x36c>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fd f936 	bl	8000128 <__udivsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ed8:	e08e      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x370>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10e      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	045b      	lsls	r3, r3, #17
 8002eea:	4013      	ands	r3, r2
 8002eec:	d109      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2280      	movs	r2, #128	@ 0x80
 8002ef2:	0452      	lsls	r2, r2, #17
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	4a32      	ldr	r2, [pc, #200]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002ef8:	0019      	movs	r1, r3
 8002efa:	0010      	movs	r0, r2
 8002efc:	f7ff f9ee 	bl	80022dc <LL_ADC_SetCommonPathInternalCh>
 8002f00:	e07a      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a33      	ldr	r2, [pc, #204]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x374>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d000      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x2ae>
 8002f0c:	e074      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	03db      	lsls	r3, r3, #15
 8002f14:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f16:	d000      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x2ba>
 8002f18:	e06e      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2280      	movs	r2, #128	@ 0x80
 8002f1e:	03d2      	lsls	r2, r2, #15
 8002f20:	4313      	orrs	r3, r2
 8002f22:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002f24:	0019      	movs	r1, r3
 8002f26:	0010      	movs	r0, r2
 8002f28:	f7ff f9d8 	bl	80022dc <LL_ADC_SetCommonPathInternalCh>
 8002f2c:	e064      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d004      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <HAL_ADC_ConfigChannel+0x35c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d107      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	0010      	movs	r0, r2
 8002f50:	f7ff fa5b 	bl	800240a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da4d      	bge.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5c:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff f9d0 	bl	8002304 <LL_ADC_GetCommonPathInternalCh>
 8002f64:	0003      	movs	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x364>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4a18      	ldr	r2, [pc, #96]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x378>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	4a11      	ldr	r2, [pc, #68]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	f7ff f9ad 	bl	80022dc <LL_ADC_SetCommonPathInternalCh>
 8002f82:	e039      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a11      	ldr	r2, [pc, #68]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x370>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4a12      	ldr	r2, [pc, #72]	@ (8002fdc <HAL_ADC_ConfigChannel+0x37c>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f7ff f99f 	bl	80022dc <LL_ADC_SetCommonPathInternalCh>
 8002f9e:	e02b      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x374>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d126      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x380>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	4a03      	ldr	r2, [pc, #12]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x360>)
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f7ff f991 	bl	80022dc <LL_ADC_SetCommonPathInternalCh>
 8002fba:	e01d      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x398>
 8002fbc:	80000004 	.word	0x80000004
 8002fc0:	40012708 	.word	0x40012708
 8002fc4:	b0001000 	.word	0xb0001000
 8002fc8:	20000040 	.word	0x20000040
 8002fcc:	00030d40 	.word	0x00030d40
 8002fd0:	b8004000 	.word	0xb8004000
 8002fd4:	b4002000 	.word	0xb4002000
 8002fd8:	ff7fffff 	.word	0xff7fffff
 8002fdc:	feffffff 	.word	0xfeffffff
 8002fe0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	2220      	movs	r2, #32
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ff0:	2317      	movs	r3, #23
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2254      	movs	r2, #84	@ 0x54
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003000:	2317      	movs	r3, #23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b006      	add	sp, #24
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)

08003010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff fa79 	bl	8002518 <LL_ADC_IsEnabled>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d000      	beq.n	800302c <ADC_Enable+0x1c>
 800302a:	e069      	b.n	8003100 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4a36      	ldr	r2, [pc, #216]	@ (800310c <ADC_Enable+0xfc>)
 8003034:	4013      	ands	r3, r2
 8003036:	d00d      	beq.n	8003054 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	2210      	movs	r2, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	2201      	movs	r2, #1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e056      	b.n	8003102 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0018      	movs	r0, r3
 800305a:	f7ff fa39 	bl	80024d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800305e:	4b2c      	ldr	r3, [pc, #176]	@ (8003110 <ADC_Enable+0x100>)
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff f94f 	bl	8002304 <LL_ADC_GetCommonPathInternalCh>
 8003066:	0002      	movs	r2, r0
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	4013      	ands	r3, r2
 800306e:	d00f      	beq.n	8003090 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003070:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <ADC_Enable+0x104>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4928      	ldr	r1, [pc, #160]	@ (8003118 <ADC_Enable+0x108>)
 8003076:	0018      	movs	r0, r3
 8003078:	f7fd f856 	bl	8000128 <__udivsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003080:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003082:	e002      	b.n	800308a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	3b01      	subs	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f9      	bne.n	8003084 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7e5b      	ldrb	r3, [r3, #25]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d033      	beq.n	8003100 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003098:	f7ff f8f2 	bl	8002280 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a0:	e027      	b.n	80030f2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff fa36 	bl	8002518 <LL_ADC_IsEnabled>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d104      	bne.n	80030ba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff fa0b 	bl	80024d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ba:	f7ff f8e1 	bl	8002280 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d914      	bls.n	80030f2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d00d      	beq.n	80030f2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	2210      	movs	r2, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	2201      	movs	r2, #1
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e007      	b.n	8003102 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d1d0      	bne.n	80030a2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	80000017 	.word	0x80000017
 8003110:	40012708 	.word	0x40012708
 8003114:	20000040 	.word	0x20000040
 8003118:	00030d40 	.word	0x00030d40

0800311c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	2250      	movs	r2, #80	@ 0x50
 8003130:	4013      	ands	r3, r2
 8003132:	d141      	bne.n	80031b8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003138:	2280      	movs	r2, #128	@ 0x80
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff f91d 	bl	8002386 <LL_ADC_REG_IsTriggerSourceSWStart>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d02e      	beq.n	80031ae <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	7e9b      	ldrb	r3, [r3, #26]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12a      	bne.n	80031ae <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2208      	movs	r2, #8
 8003160:	4013      	ands	r3, r2
 8003162:	2b08      	cmp	r3, #8
 8003164:	d123      	bne.n	80031ae <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff f9f8 	bl	8002560 <LL_ADC_REG_IsConversionOngoing>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d110      	bne.n	8003196 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	210c      	movs	r1, #12
 8003180:	438a      	bics	r2, r1
 8003182:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <ADC_DMAConvCplt+0xc4>)
 800318a:	4013      	ands	r3, r2
 800318c:	2201      	movs	r2, #1
 800318e:	431a      	orrs	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	659a      	str	r2, [r3, #88]	@ 0x58
 8003194:	e00b      	b.n	80031ae <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	2220      	movs	r2, #32
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	2201      	movs	r2, #1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff fd35 	bl	8002c20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031b6:	e00f      	b.n	80031d8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d004      	beq.n	80031cc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff fd43 	bl	8002c50 <HAL_ADC_ErrorCallback>
}
 80031ca:	e005      	b.n	80031d8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	0010      	movs	r0, r2
 80031d6:	4798      	blx	r3
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	fffffefe 	.word	0xfffffefe

080031e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fd1b 	bl	8002c30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}

08003202 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	2240      	movs	r2, #64	@ 0x40
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2204      	movs	r2, #4
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	0018      	movs	r0, r3
 800322c:	f7ff fd10 	bl	8002c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b004      	add	sp, #16
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003280:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <LL_EXTI_EnableIT_0_31+0x20>)
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	58d2      	ldr	r2, [r2, r3]
 8003286:	4904      	ldr	r1, [pc, #16]	@ (8003298 <LL_EXTI_EnableIT_0_31+0x20>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	2280      	movs	r2, #128	@ 0x80
 800328e:	508b      	str	r3, [r1, r2]
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021800 	.word	0x40021800

0800329c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80032a4:	4a06      	ldr	r2, [pc, #24]	@ (80032c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	58d3      	ldr	r3, [r2, r3]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	43d2      	mvns	r2, r2
 80032ae:	4904      	ldr	r1, [pc, #16]	@ (80032c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	2280      	movs	r2, #128	@ 0x80
 80032b4:	508b      	str	r3, [r1, r2]
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	40021800 	.word	0x40021800

080032c4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80032cc:	4a05      	ldr	r2, [pc, #20]	@ (80032e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80032ce:	2384      	movs	r3, #132	@ 0x84
 80032d0:	58d2      	ldr	r2, [r2, r3]
 80032d2:	4904      	ldr	r1, [pc, #16]	@ (80032e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	2284      	movs	r2, #132	@ 0x84
 80032da:	508b      	str	r3, [r1, r2]

}
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021800 	.word	0x40021800

080032e8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80032f0:	4a06      	ldr	r2, [pc, #24]	@ (800330c <LL_EXTI_DisableEvent_0_31+0x24>)
 80032f2:	2384      	movs	r3, #132	@ 0x84
 80032f4:	58d3      	ldr	r3, [r2, r3]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	43d2      	mvns	r2, r2
 80032fa:	4904      	ldr	r1, [pc, #16]	@ (800330c <LL_EXTI_DisableEvent_0_31+0x24>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	2284      	movs	r2, #132	@ 0x84
 8003300:	508b      	str	r3, [r1, r2]
}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b002      	add	sp, #8
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	40021800 	.word	0x40021800

08003310 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003318:	4b04      	ldr	r3, [pc, #16]	@ (800332c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

}
 8003324:	46c0      	nop			@ (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021800 	.word	0x40021800

08003330 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	43d9      	mvns	r1, r3
 8003340:	4b03      	ldr	r3, [pc, #12]	@ (8003350 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003342:	400a      	ands	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	40021800 	.word	0x40021800

08003354 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800335c:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021800 	.word	0x40021800

08003374 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	43d9      	mvns	r1, r3
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003386:	400a      	ands	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	40021800 	.word	0x40021800

08003398 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	40021800 	.word	0x40021800

080033b4 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]
}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	40021800 	.word	0x40021800

080033d0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	211f      	movs	r1, #31
 80033de:	187b      	adds	r3, r7, r1
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t *comp_common_odd;
  __IO uint32_t *comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e13d      	b.n	800366e <HAL_COMP_Init+0x29e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0fdb      	lsrs	r3, r3, #31
 80033fa:	07da      	lsls	r2, r3, #31
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	429a      	cmp	r2, r3
 8003402:	d104      	bne.n	800340e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003404:	231f      	movs	r3, #31
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e12f      	b.n	800366e <HAL_COMP_Init+0x29e>
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2229      	movs	r2, #41	@ 0x29
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2228      	movs	r2, #40	@ 0x28
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	0018      	movs	r0, r3
 800342c:	f7fe fb54 	bl	8001ad8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2230      	movs	r2, #48	@ 0x30
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InputMinus
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a85      	ldr	r2, [pc, #532]	@ (800367c <HAL_COMP_Init+0x2ac>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	429a      	cmp	r2, r3
 8003480:	d10d      	bne.n	800349e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003482:	4b7f      	ldr	r3, [pc, #508]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b7e      	ldr	r3, [pc, #504]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003488:	497e      	ldr	r1, [pc, #504]	@ (8003684 <HAL_COMP_Init+0x2b4>)
 800348a:	400a      	ands	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800348e:	4b7c      	ldr	r3, [pc, #496]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	4b7b      	ldr	r3, [pc, #492]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003494:	2180      	movs	r1, #128	@ 0x80
 8003496:	0109      	lsls	r1, r1, #4
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	e01f      	b.n	80034de <HAL_COMP_Init+0x10e>
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	23c0      	movs	r3, #192	@ 0xc0
 80034a4:	015b      	lsls	r3, r3, #5
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d10d      	bne.n	80034c6 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80034aa:	4b75      	ldr	r3, [pc, #468]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b74      	ldr	r3, [pc, #464]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034b0:	2180      	movs	r1, #128	@ 0x80
 80034b2:	0109      	lsls	r1, r1, #4
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80034b8:	4b71      	ldr	r3, [pc, #452]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4b70      	ldr	r3, [pc, #448]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034be:	4971      	ldr	r1, [pc, #452]	@ (8003684 <HAL_COMP_Init+0x2b4>)
 80034c0:	400a      	ands	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	e00b      	b.n	80034de <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80034c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034cc:	496d      	ldr	r1, [pc, #436]	@ (8003684 <HAL_COMP_Init+0x2b4>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80034d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80034d8:	496a      	ldr	r1, [pc, #424]	@ (8003684 <HAL_COMP_Init+0x2b4>)
 80034da:	400a      	ands	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	22a0      	movs	r2, #160	@ 0xa0
 80034e4:	01d2      	lsls	r2, r2, #7
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d017      	beq.n	800351a <HAL_COMP_Init+0x14a>
 80034ea:	22a0      	movs	r2, #160	@ 0xa0
 80034ec:	01d2      	lsls	r2, r2, #7
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d830      	bhi.n	8003554 <HAL_COMP_Init+0x184>
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d01f      	beq.n	8003536 <HAL_COMP_Init+0x166>
 80034f6:	2280      	movs	r2, #128	@ 0x80
 80034f8:	01d2      	lsls	r2, r2, #7
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d12a      	bne.n	8003554 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80034fe:	4b60      	ldr	r3, [pc, #384]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b5f      	ldr	r3, [pc, #380]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003504:	2180      	movs	r1, #128	@ 0x80
 8003506:	01c9      	lsls	r1, r1, #7
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800350c:	4b5c      	ldr	r3, [pc, #368]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4b5b      	ldr	r3, [pc, #364]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003512:	495d      	ldr	r1, [pc, #372]	@ (8003688 <HAL_COMP_Init+0x2b8>)
 8003514:	400a      	ands	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
        break;
 8003518:	e029      	b.n	800356e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800351a:	4b59      	ldr	r3, [pc, #356]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b58      	ldr	r3, [pc, #352]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003520:	4959      	ldr	r1, [pc, #356]	@ (8003688 <HAL_COMP_Init+0x2b8>)
 8003522:	400a      	ands	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003526:	4b56      	ldr	r3, [pc, #344]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4b55      	ldr	r3, [pc, #340]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 800352c:	2180      	movs	r1, #128	@ 0x80
 800352e:	01c9      	lsls	r1, r1, #7
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
        break;
 8003534:	e01b      	b.n	800356e <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003536:	4b52      	ldr	r3, [pc, #328]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b51      	ldr	r3, [pc, #324]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 800353c:	2180      	movs	r1, #128	@ 0x80
 800353e:	01c9      	lsls	r1, r1, #7
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003544:	4b4e      	ldr	r3, [pc, #312]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4b4d      	ldr	r3, [pc, #308]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 800354a:	2180      	movs	r1, #128	@ 0x80
 800354c:	01c9      	lsls	r1, r1, #7
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
        break;
 8003552:	e00c      	b.n	800356e <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003554:	4b4a      	ldr	r3, [pc, #296]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b49      	ldr	r3, [pc, #292]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 800355a:	494b      	ldr	r1, [pc, #300]	@ (8003688 <HAL_COMP_Init+0x2b8>)
 800355c:	400a      	ands	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003560:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 8003566:	4948      	ldr	r1, [pc, #288]	@ (8003688 <HAL_COMP_Init+0x2b8>)
 8003568:	400a      	ands	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
        break;
 800356c:	46c0      	nop			@ (mov r8, r8)
#endif /* COMP3 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2230      	movs	r2, #48	@ 0x30
 8003576:	4013      	ands	r3, r2
 8003578:	d016      	beq.n	80035a8 <HAL_COMP_Init+0x1d8>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d113      	bne.n	80035a8 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003580:	4b42      	ldr	r3, [pc, #264]	@ (800368c <HAL_COMP_Init+0x2bc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4942      	ldr	r1, [pc, #264]	@ (8003690 <HAL_COMP_Init+0x2c0>)
 8003586:	0018      	movs	r0, r3
 8003588:	f7fc fdce 	bl	8000128 <__udivsi3>
 800358c:	0003      	movs	r3, r0
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	0013      	movs	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	189b      	adds	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800359a:	e002      	b.n	80035a2 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3b01      	subs	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f9      	bne.n	800359c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a34      	ldr	r2, [pc, #208]	@ (8003680 <HAL_COMP_Init+0x2b0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d102      	bne.n	80035b8 <HAL_COMP_Init+0x1e8>
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	029b      	lsls	r3, r3, #10
 80035b6:	e001      	b.n	80035bc <HAL_COMP_Init+0x1ec>
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	02db      	lsls	r3, r3, #11
 80035bc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	2203      	movs	r2, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	d040      	beq.n	800364a <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	2210      	movs	r2, #16
 80035ce:	4013      	ands	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7ff fe9b 	bl	8003310 <LL_EXTI_EnableRisingTrig_0_31>
 80035da:	e003      	b.n	80035e4 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff fea6 	bl	8003330 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	2220      	movs	r2, #32
 80035ea:	4013      	ands	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff feaf 	bl	8003354 <LL_EXTI_EnableFallingTrig_0_31>
 80035f6:	e003      	b.n	8003600 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7ff feba 	bl	8003374 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fed6 	bl	80033b4 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	0018      	movs	r0, r3
 800360c:	f7ff fec4 	bl	8003398 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	2202      	movs	r2, #2
 8003616:	4013      	ands	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff fe51 	bl	80032c4 <LL_EXTI_EnableEvent_0_31>
 8003622:	e003      	b.n	800362c <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fe5e 	bl	80032e8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	2201      	movs	r2, #1
 8003632:	4013      	ands	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff fe1d 	bl	8003278 <LL_EXTI_EnableIT_0_31>
 800363e:	e00c      	b.n	800365a <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	0018      	movs	r0, r3
 8003644:	f7ff fe2a 	bl	800329c <LL_EXTI_DisableIT_0_31>
 8003648:	e007      	b.n	800365a <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	0018      	movs	r0, r3
 800364e:	f7ff fe4b 	bl	80032e8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fe21 	bl	800329c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2229      	movs	r2, #41	@ 0x29
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2229      	movs	r2, #41	@ 0x29
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800366e:	231f      	movs	r3, #31
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	781b      	ldrb	r3, [r3, #0]
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b008      	add	sp, #32
 800367a:	bd80      	pop	{r7, pc}
 800367c:	fe00740f 	.word	0xfe00740f
 8003680:	40010200 	.word	0x40010200
 8003684:	fffff7ff 	.word	0xfffff7ff
 8003688:	ffffbfff 	.word	0xffffbfff
 800368c:	20000040 	.word	0x20000040
 8003690:	00030d40 	.word	0x00030d40

08003694 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	210f      	movs	r1, #15
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e035      	b.n	8003722 <HAL_COMP_Start+0x8e>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0fdb      	lsrs	r3, r3, #31
 80036be:	07da      	lsls	r2, r3, #31
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d104      	bne.n	80036d2 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80036c8:	230f      	movs	r3, #15
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e027      	b.n	8003722 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2229      	movs	r2, #41	@ 0x29
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d11d      	bne.n	800371a <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2229      	movs	r2, #41	@ 0x29
 80036f2:	2102      	movs	r1, #2
 80036f4:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_COMP_Start+0x9c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	490e      	ldr	r1, [pc, #56]	@ (8003734 <HAL_COMP_Start+0xa0>)
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fc fd13 	bl	8000128 <__udivsi3>
 8003702:	0003      	movs	r3, r0
 8003704:	3301      	adds	r3, #1
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800370a:	e002      	b.n	8003712 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3b01      	subs	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f9      	bne.n	800370c <HAL_COMP_Start+0x78>
 8003718:	e003      	b.n	8003722 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800371a:	230f      	movs	r3, #15
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003722:	230f      	movs	r3, #15
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	781b      	ldrb	r3, [r3, #0]
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b004      	add	sp, #16
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000040 	.word	0x20000040
 8003734:	00030d40 	.word	0x00030d40

08003738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	0002      	movs	r2, r0
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003744:	1dfb      	adds	r3, r7, #7
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b7f      	cmp	r3, #127	@ 0x7f
 800374a:	d809      	bhi.n	8003760 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	001a      	movs	r2, r3
 8003752:	231f      	movs	r3, #31
 8003754:	401a      	ands	r2, r3
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <__NVIC_EnableIRQ+0x30>)
 8003758:	2101      	movs	r1, #1
 800375a:	4091      	lsls	r1, r2
 800375c:	000a      	movs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003760:	46c0      	nop			@ (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000e100 	.word	0xe000e100

0800376c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	0002      	movs	r2, r0
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003780:	d828      	bhi.n	80037d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003782:	4a2f      	ldr	r2, [pc, #188]	@ (8003840 <__NVIC_SetPriority+0xd4>)
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b25b      	sxtb	r3, r3
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	33c0      	adds	r3, #192	@ 0xc0
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	589b      	ldr	r3, [r3, r2]
 8003792:	1dfa      	adds	r2, r7, #7
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	0011      	movs	r1, r2
 8003798:	2203      	movs	r2, #3
 800379a:	400a      	ands	r2, r1
 800379c:	00d2      	lsls	r2, r2, #3
 800379e:	21ff      	movs	r1, #255	@ 0xff
 80037a0:	4091      	lsls	r1, r2
 80037a2:	000a      	movs	r2, r1
 80037a4:	43d2      	mvns	r2, r2
 80037a6:	401a      	ands	r2, r3
 80037a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	22ff      	movs	r2, #255	@ 0xff
 80037b0:	401a      	ands	r2, r3
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	0018      	movs	r0, r3
 80037b8:	2303      	movs	r3, #3
 80037ba:	4003      	ands	r3, r0
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037c0:	481f      	ldr	r0, [pc, #124]	@ (8003840 <__NVIC_SetPriority+0xd4>)
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	430a      	orrs	r2, r1
 80037cc:	33c0      	adds	r3, #192	@ 0xc0
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037d2:	e031      	b.n	8003838 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <__NVIC_SetPriority+0xd8>)
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	0019      	movs	r1, r3
 80037dc:	230f      	movs	r3, #15
 80037de:	400b      	ands	r3, r1
 80037e0:	3b08      	subs	r3, #8
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3306      	adds	r3, #6
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	3304      	adds	r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1dfa      	adds	r2, r7, #7
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	0011      	movs	r1, r2
 80037f4:	2203      	movs	r2, #3
 80037f6:	400a      	ands	r2, r1
 80037f8:	00d2      	lsls	r2, r2, #3
 80037fa:	21ff      	movs	r1, #255	@ 0xff
 80037fc:	4091      	lsls	r1, r2
 80037fe:	000a      	movs	r2, r1
 8003800:	43d2      	mvns	r2, r2
 8003802:	401a      	ands	r2, r3
 8003804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	401a      	ands	r2, r3
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	0018      	movs	r0, r3
 8003814:	2303      	movs	r3, #3
 8003816:	4003      	ands	r3, r0
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800381c:	4809      	ldr	r0, [pc, #36]	@ (8003844 <__NVIC_SetPriority+0xd8>)
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	001c      	movs	r4, r3
 8003824:	230f      	movs	r3, #15
 8003826:	4023      	ands	r3, r4
 8003828:	3b08      	subs	r3, #8
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	430a      	orrs	r2, r1
 800382e:	3306      	adds	r3, #6
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	18c3      	adds	r3, r0, r3
 8003834:	3304      	adds	r3, #4
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b003      	add	sp, #12
 800383e:	bd90      	pop	{r4, r7, pc}
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	2380      	movs	r3, #128	@ 0x80
 8003856:	045b      	lsls	r3, r3, #17
 8003858:	429a      	cmp	r2, r3
 800385a:	d301      	bcc.n	8003860 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385c:	2301      	movs	r3, #1
 800385e:	e010      	b.n	8003882 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003860:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <SysTick_Config+0x44>)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	3a01      	subs	r2, #1
 8003866:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003868:	2301      	movs	r3, #1
 800386a:	425b      	negs	r3, r3
 800386c:	2103      	movs	r1, #3
 800386e:	0018      	movs	r0, r3
 8003870:	f7ff ff7c 	bl	800376c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x44>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x44>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	210f      	movs	r1, #15
 800389c:	187b      	adds	r3, r7, r1
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff ff5d 	bl	800376c <__NVIC_SetPriority>
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b004      	add	sp, #16
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	0002      	movs	r2, r0
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff ff33 	bl	8003738 <__NVIC_EnableIRQ>
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff ffaf 	bl	8003848 <SysTick_Config>
 80038ea:	0003      	movs	r3, r0
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e015      	b.n	8003932 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe f913 	bl	8001b44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e047      	b.n	80039de <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	795b      	ldrb	r3, [r3, #5]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_DAC_Start+0x20>
 8003956:	2302      	movs	r3, #2
 8003958:	e041      	b.n	80039de <HAL_DAC_Start+0xa4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	4013      	ands	r3, r2
 8003972:	2201      	movs	r2, #1
 8003974:	409a      	lsls	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	223e      	movs	r2, #62	@ 0x3e
 800398c:	4013      	ands	r3, r2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d11e      	bne.n	80039d0 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2101      	movs	r1, #1
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	e015      	b.n	80039d0 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	23f8      	movs	r3, #248	@ 0xf8
 80039ac:	039b      	lsls	r3, r3, #14
 80039ae:	401a      	ands	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2110      	movs	r1, #16
 80039b4:	400b      	ands	r3, r1
 80039b6:	2102      	movs	r1, #2
 80039b8:	4099      	lsls	r1, r3
 80039ba:	000b      	movs	r3, r1
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2102      	movs	r1, #2
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fe:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	4013      	ands	r3, r2
 8003a08:	d01e      	beq.n	8003a48 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	019b      	lsls	r3, r3, #6
 8003a10:	4013      	ands	r3, r2
 8003a12:	d019      	beq.n	8003a48 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2204      	movs	r2, #4
 8003a18:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2280      	movs	r2, #128	@ 0x80
 8003a2c:	0192      	lsls	r2, r2, #6
 8003a2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4917      	ldr	r1, [pc, #92]	@ (8003a98 <HAL_DAC_IRQHandler+0xb0>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 f853 	bl	8003aee <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	059b      	lsls	r3, r3, #22
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d01e      	beq.n	8003a90 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	059b      	lsls	r3, r3, #22
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d019      	beq.n	8003a90 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2202      	movs	r2, #2
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2280      	movs	r2, #128	@ 0x80
 8003a74:	0592      	lsls	r2, r2, #22
 8003a76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4906      	ldr	r1, [pc, #24]	@ (8003a9c <HAL_DAC_IRQHandler+0xb4>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 f968 	bl	8003d60 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a90:	46c0      	nop			@ (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	ffffefff 	.word	0xffffefff
 8003a9c:	efffffff 	.word	0xefffffff

08003aa0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e014      	b.n	8003ae6 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	18d3      	adds	r3, r2, r3
 8003ace:	3308      	adds	r3, #8
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e004      	b.n	8003ade <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	18d3      	adds	r3, r2, r3
 8003ada:	3314      	adds	r3, #20
 8003adc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b006      	add	sp, #24
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	231f      	movs	r3, #31
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_DAC_ConfigChannel+0x20>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e115      	b.n	8003d50 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	795b      	ldrb	r3, [r3, #5]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_DAC_ConfigChannel+0x30>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e10f      	b.n	8003d50 <HAL_DAC_ConfigChannel+0x250>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d000      	beq.n	8003b46 <HAL_DAC_ConfigChannel+0x46>
 8003b44:	e07a      	b.n	8003c3c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b46:	f7fe fb9b 	bl	8002280 <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d13d      	bne.n	8003bd0 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b54:	e018      	b.n	8003b88 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b56:	f7fe fb93 	bl	8002280 <HAL_GetTick>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d911      	bls.n	8003b88 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d00a      	beq.n	8003b88 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2208      	movs	r2, #8
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2203      	movs	r2, #3
 8003b82:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0e3      	b.n	8003d50 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	4013      	ands	r3, r2
 8003b94:	d1df      	bne.n	8003b56 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	6992      	ldr	r2, [r2, #24]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ba0:	e020      	b.n	8003be4 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ba2:	f7fe fb6d 	bl	8002280 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d90f      	bls.n	8003bd0 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0a      	bge.n	8003bd0 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0bf      	b.n	8003d50 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	dbe3      	blt.n	8003ba2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	6992      	ldr	r2, [r2, #24]
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	2110      	movs	r1, #16
 8003bee:	400a      	ands	r2, r1
 8003bf0:	4959      	ldr	r1, [pc, #356]	@ (8003d58 <HAL_DAC_ConfigChannel+0x258>)
 8003bf2:	4091      	lsls	r1, r2
 8003bf4:	000a      	movs	r2, r1
 8003bf6:	43d2      	mvns	r2, r2
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2010      	movs	r0, #16
 8003c04:	4003      	ands	r3, r0
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	2110      	movs	r1, #16
 8003c1a:	400a      	ands	r2, r1
 8003c1c:	21ff      	movs	r1, #255	@ 0xff
 8003c1e:	4091      	lsls	r1, r2
 8003c20:	000a      	movs	r2, r1
 8003c22:	43d2      	mvns	r2, r2
 8003c24:	401a      	ands	r2, r3
 8003c26:	0011      	movs	r1, r2
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2010      	movs	r0, #16
 8003c30:	4003      	ands	r3, r0
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11d      	bne.n	8003c80 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2210      	movs	r2, #16
 8003c50:	4013      	ands	r3, r2
 8003c52:	221f      	movs	r2, #31
 8003c54:	409a      	lsls	r2, r3
 8003c56:	0013      	movs	r3, r2
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2207      	movs	r2, #7
 8003c90:	409a      	lsls	r2, r3
 8003c92:	0013      	movs	r3, r2
 8003c94:	43da      	mvns	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	2180      	movs	r1, #128	@ 0x80
 8003cd6:	01c9      	lsls	r1, r1, #7
 8003cd8:	4099      	lsls	r1, r3
 8003cda:	000b      	movs	r3, r1
 8003cdc:	43d9      	mvns	r1, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	4a19      	ldr	r2, [pc, #100]	@ (8003d5c <HAL_DAC_ConfigChannel+0x25c>)
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	0013      	movs	r3, r2
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	409a      	lsls	r2, r3
 8003d12:	0013      	movs	r3, r2
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2110      	movs	r1, #16
 8003d2c:	400b      	ands	r3, r1
 8003d2e:	21c0      	movs	r1, #192	@ 0xc0
 8003d30:	4099      	lsls	r1, r3
 8003d32:	000b      	movs	r3, r1
 8003d34:	43d9      	mvns	r1, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003d4a:	231f      	movs	r3, #31
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	781b      	ldrb	r3, [r3, #0]
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b008      	add	sp, #32
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	000003ff 	.word	0x000003ff
 8003d5c:	00000ffe 	.word	0x00000ffe

08003d60 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e077      	b.n	8003e72 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	@ (8003e7c <HAL_DMA_Init+0x10c>)
 8003d88:	4694      	mov	ip, r2
 8003d8a:	4463      	add	r3, ip
 8003d8c:	2114      	movs	r1, #20
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7fc f9ca 	bl	8000128 <__udivsi3>
 8003d94:	0003      	movs	r3, r0
 8003d96:	009a      	lsls	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2225      	movs	r2, #37	@ 0x25
 8003da0:	2102      	movs	r1, #2
 8003da2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4934      	ldr	r1, [pc, #208]	@ (8003e80 <HAL_DMA_Init+0x110>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fa8d 	bl	800430c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	01db      	lsls	r3, r3, #7
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d102      	bne.n	8003e04 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0c:	213f      	movs	r1, #63	@ 0x3f
 8003e0e:	400a      	ands	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d011      	beq.n	8003e48 <HAL_DMA_Init+0xd8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d80d      	bhi.n	8003e48 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 fa98 	bl	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	e008      	b.n	8003e5a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2225      	movs	r2, #37	@ 0x25
 8003e64:	2101      	movs	r1, #1
 8003e66:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	@ 0x24
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b002      	add	sp, #8
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	bffdfff8 	.word	0xbffdfff8
 8003e80:	ffff800f 	.word	0xffff800f

08003e84 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2317      	movs	r3, #23
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2224      	movs	r2, #36	@ 0x24
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Start_IT+0x24>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e06f      	b.n	8003f88 <HAL_DMA_Start_IT+0x104>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2224      	movs	r2, #36	@ 0x24
 8003eac:	2101      	movs	r1, #1
 8003eae:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2225      	movs	r2, #37	@ 0x25
 8003eb4:	5c9b      	ldrb	r3, [r3, r2]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d157      	bne.n	8003f6c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2225      	movs	r2, #37	@ 0x25
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f9d3 	bl	800428c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	210e      	movs	r1, #14
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00f      	b.n	8003f20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	210a      	movs	r1, #10
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d008      	beq.n	8003f40 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	2180      	movs	r1, #128	@ 0x80
 8003f3a:	0049      	lsls	r1, r1, #1
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f52:	2180      	movs	r1, #128	@ 0x80
 8003f54:	0049      	lsls	r1, r1, #1
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e00a      	b.n	8003f82 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2224      	movs	r2, #36	@ 0x24
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003f7a:	2317      	movs	r3, #23
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003f82:	2317      	movs	r3, #23
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	781b      	ldrb	r3, [r3, #0]
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b006      	add	sp, #24
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e050      	b.n	8004044 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2225      	movs	r2, #37	@ 0x25
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d008      	beq.n	8003fc0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e041      	b.n	8004044 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	210e      	movs	r1, #14
 8003fcc:	438a      	bics	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	491c      	ldr	r1, [pc, #112]	@ (800404c <HAL_DMA_Abort+0xbc>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2101      	movs	r1, #1
 8003fec:	438a      	bics	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003ff0:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <HAL_DMA_Abort+0xc0>)
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	221c      	movs	r2, #28
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <HAL_DMA_Abort+0xc0>)
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800400e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004022:	490a      	ldr	r1, [pc, #40]	@ (800404c <HAL_DMA_Abort+0xbc>)
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004030:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2225      	movs	r2, #37	@ 0x25
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2224      	movs	r2, #36	@ 0x24
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}
 800404c:	fffffeff 	.word	0xfffffeff
 8004050:	40020000 	.word	0x40020000

08004054 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	210f      	movs	r1, #15
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2225      	movs	r2, #37	@ 0x25
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d006      	beq.n	800407e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2204      	movs	r2, #4
 8004074:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004076:	187b      	adds	r3, r7, r1
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e049      	b.n	8004112 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	210e      	movs	r1, #14
 800408a:	438a      	bics	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	491d      	ldr	r1, [pc, #116]	@ (8004120 <HAL_DMA_Abort_IT+0xcc>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <HAL_DMA_Abort_IT+0xd0>)
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	221c      	movs	r2, #28
 80040b8:	4013      	ands	r3, r2
 80040ba:	2201      	movs	r2, #1
 80040bc:	409a      	lsls	r2, r3
 80040be:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_DMA_Abort_IT+0xd0>)
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e0:	490f      	ldr	r1, [pc, #60]	@ (8004120 <HAL_DMA_Abort_IT+0xcc>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80040ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2225      	movs	r2, #37	@ 0x25
 80040f4:	2101      	movs	r1, #1
 80040f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	@ 0x24
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	0010      	movs	r0, r2
 8004110:	4798      	blx	r3
    }
  }
  return status;
 8004112:	230f      	movs	r3, #15
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b004      	add	sp, #16
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffffeff 	.word	0xfffffeff
 8004124:	40020000 	.word	0x40020000

08004128 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004130:	4b55      	ldr	r3, [pc, #340]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	221c      	movs	r2, #28
 8004144:	4013      	ands	r3, r2
 8004146:	2204      	movs	r2, #4
 8004148:	409a      	lsls	r2, r3
 800414a:	0013      	movs	r3, r2
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4013      	ands	r3, r2
 8004150:	d027      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x7a>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2204      	movs	r2, #4
 8004156:	4013      	ands	r3, r2
 8004158:	d023      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2220      	movs	r2, #32
 8004162:	4013      	ands	r3, r2
 8004164:	d107      	bne.n	8004176 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2104      	movs	r1, #4
 8004172:	438a      	bics	r2, r1
 8004174:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004176:	4b44      	ldr	r3, [pc, #272]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	221c      	movs	r2, #28
 8004180:	4013      	ands	r3, r2
 8004182:	2204      	movs	r2, #4
 8004184:	409a      	lsls	r2, r3
 8004186:	4b40      	ldr	r3, [pc, #256]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	2b00      	cmp	r3, #0
 8004192:	d100      	bne.n	8004196 <HAL_DMA_IRQHandler+0x6e>
 8004194:	e073      	b.n	800427e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	0010      	movs	r0, r2
 800419e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80041a0:	e06d      	b.n	800427e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	221c      	movs	r2, #28
 80041a8:	4013      	ands	r3, r2
 80041aa:	2202      	movs	r2, #2
 80041ac:	409a      	lsls	r2, r3
 80041ae:	0013      	movs	r3, r2
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	d02e      	beq.n	8004214 <HAL_DMA_IRQHandler+0xec>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	d02a      	beq.n	8004214 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2220      	movs	r2, #32
 80041c6:	4013      	ands	r3, r2
 80041c8:	d10b      	bne.n	80041e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	210a      	movs	r1, #10
 80041d6:	438a      	bics	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2225      	movs	r2, #37	@ 0x25
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80041e2:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	221c      	movs	r2, #28
 80041ec:	4013      	ands	r3, r2
 80041ee:	2202      	movs	r2, #2
 80041f0:	409a      	lsls	r2, r3
 80041f2:	4b25      	ldr	r3, [pc, #148]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2224      	movs	r2, #36	@ 0x24
 80041fc:	2100      	movs	r1, #0
 80041fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d03a      	beq.n	800427e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	0010      	movs	r0, r2
 8004210:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004212:	e034      	b.n	800427e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	221c      	movs	r2, #28
 800421a:	4013      	ands	r3, r2
 800421c:	2208      	movs	r2, #8
 800421e:	409a      	lsls	r2, r3
 8004220:	0013      	movs	r3, r2
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4013      	ands	r3, r2
 8004226:	d02b      	beq.n	8004280 <HAL_DMA_IRQHandler+0x158>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2208      	movs	r2, #8
 800422c:	4013      	ands	r3, r2
 800422e:	d027      	beq.n	8004280 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	210e      	movs	r1, #14
 800423c:	438a      	bics	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004248:	221c      	movs	r2, #28
 800424a:	4013      	ands	r3, r2
 800424c:	2201      	movs	r2, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <HAL_DMA_IRQHandler+0x160>)
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2225      	movs	r2, #37	@ 0x25
 8004260:	2101      	movs	r1, #1
 8004262:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2224      	movs	r2, #36	@ 0x24
 8004268:	2100      	movs	r1, #0
 800426a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	0010      	movs	r0, r2
 800427c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46c0      	nop			@ (mov r8, r8)
}
 8004282:	46bd      	mov	sp, r7
 8004284:	b004      	add	sp, #16
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40020000 	.word	0x40020000

0800428c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042b4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042b6:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <DMA_SetConfig+0x7c>)
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	221c      	movs	r2, #28
 80042c0:	4013      	ands	r3, r2
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <DMA_SetConfig+0x7c>)
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d108      	bne.n	80042ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ec:	e007      	b.n	80042fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]
}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b004      	add	sp, #16
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	40020000 	.word	0x40020000

0800430c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	4a10      	ldr	r2, [pc, #64]	@ (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800431c:	4694      	mov	ip, r2
 800431e:	4463      	add	r3, ip
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	001a      	movs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	001a      	movs	r2, r3
 800432e:	23ff      	movs	r3, #255	@ 0xff
 8004330:	4013      	ands	r3, r2
 8004332:	3b08      	subs	r3, #8
 8004334:	2114      	movs	r1, #20
 8004336:	0018      	movs	r0, r3
 8004338:	f7fb fef6 	bl	8000128 <__udivsi3>
 800433c:	0003      	movs	r3, r0
 800433e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a07      	ldr	r2, [pc, #28]	@ (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004344:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	221f      	movs	r2, #31
 800434a:	4013      	ands	r3, r2
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b004      	add	sp, #16
 800435a:	bd80      	pop	{r7, pc}
 800435c:	10008200 	.word	0x10008200
 8004360:	40020880 	.word	0x40020880

08004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	223f      	movs	r2, #63	@ 0x3f
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800437a:	4694      	mov	ip, r2
 800437c:	4463      	add	r3, ip
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	001a      	movs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a07      	ldr	r2, [pc, #28]	@ (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3b01      	subs	r3, #1
 8004390:	2203      	movs	r2, #3
 8004392:	4013      	ands	r3, r2
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800439c:	46c0      	nop			@ (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	1000823f 	.word	0x1000823f
 80043a8:	40020940 	.word	0x40020940

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ba:	e147      	b.n	800464c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4091      	lsls	r1, r2
 80043c6:	000a      	movs	r2, r1
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d100      	bne.n	80043d4 <HAL_GPIO_Init+0x28>
 80043d2:	e138      	b.n	8004646 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2203      	movs	r2, #3
 80043da:	4013      	ands	r3, r2
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d005      	beq.n	80043ec <HAL_GPIO_Init+0x40>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2203      	movs	r2, #3
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d130      	bne.n	800444e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2203      	movs	r2, #3
 80043f8:	409a      	lsls	r2, r3
 80043fa:	0013      	movs	r3, r2
 80043fc:	43da      	mvns	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	409a      	lsls	r2, r3
 800440e:	0013      	movs	r3, r2
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004422:	2201      	movs	r2, #1
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	409a      	lsls	r2, r3
 8004428:	0013      	movs	r3, r2
 800442a:	43da      	mvns	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	2201      	movs	r2, #1
 800443a:	401a      	ands	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	409a      	lsls	r2, r3
 8004440:	0013      	movs	r3, r2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2203      	movs	r2, #3
 8004454:	4013      	ands	r3, r2
 8004456:	2b03      	cmp	r3, #3
 8004458:	d017      	beq.n	800448a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	409a      	lsls	r2, r3
 8004468:	0013      	movs	r3, r2
 800446a:	43da      	mvns	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	409a      	lsls	r2, r3
 800447c:	0013      	movs	r3, r2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d123      	bne.n	80044de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	0092      	lsls	r2, r2, #2
 80044a0:	58d3      	ldr	r3, [r2, r3]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2207      	movs	r2, #7
 80044a8:	4013      	ands	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	409a      	lsls	r2, r3
 80044b0:	0013      	movs	r3, r2
 80044b2:	43da      	mvns	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2107      	movs	r1, #7
 80044c2:	400b      	ands	r3, r1
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	409a      	lsls	r2, r3
 80044c8:	0013      	movs	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	08da      	lsrs	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3208      	adds	r2, #8
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	6939      	ldr	r1, [r7, #16]
 80044dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	409a      	lsls	r2, r3
 80044ec:	0013      	movs	r3, r2
 80044ee:	43da      	mvns	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2203      	movs	r2, #3
 80044fc:	401a      	ands	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	0013      	movs	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	23c0      	movs	r3, #192	@ 0xc0
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	4013      	ands	r3, r2
 800451c:	d100      	bne.n	8004520 <HAL_GPIO_Init+0x174>
 800451e:	e092      	b.n	8004646 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004520:	4a50      	ldr	r2, [pc, #320]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3318      	adds	r3, #24
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	589b      	ldr	r3, [r3, r2]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2203      	movs	r2, #3
 8004532:	4013      	ands	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	220f      	movs	r2, #15
 8004538:	409a      	lsls	r2, r3
 800453a:	0013      	movs	r3, r2
 800453c:	43da      	mvns	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	23a0      	movs	r3, #160	@ 0xa0
 8004548:	05db      	lsls	r3, r3, #23
 800454a:	429a      	cmp	r2, r3
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x1ca>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a45      	ldr	r2, [pc, #276]	@ (8004668 <HAL_GPIO_Init+0x2bc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x1c6>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a44      	ldr	r2, [pc, #272]	@ (800466c <HAL_GPIO_Init+0x2c0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x1c2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a43      	ldr	r2, [pc, #268]	@ (8004670 <HAL_GPIO_Init+0x2c4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x1be>
 8004566:	2303      	movs	r3, #3
 8004568:	e006      	b.n	8004578 <HAL_GPIO_Init+0x1cc>
 800456a:	2305      	movs	r3, #5
 800456c:	e004      	b.n	8004578 <HAL_GPIO_Init+0x1cc>
 800456e:	2302      	movs	r3, #2
 8004570:	e002      	b.n	8004578 <HAL_GPIO_Init+0x1cc>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_GPIO_Init+0x1cc>
 8004576:	2300      	movs	r3, #0
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	2103      	movs	r1, #3
 800457c:	400a      	ands	r2, r1
 800457e:	00d2      	lsls	r2, r2, #3
 8004580:	4093      	lsls	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004588:	4936      	ldr	r1, [pc, #216]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3318      	adds	r3, #24
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004596:	4b33      	ldr	r3, [pc, #204]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43da      	mvns	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	2380      	movs	r3, #128	@ 0x80
 80045ac:	035b      	lsls	r3, r3, #13
 80045ae:	4013      	ands	r3, r2
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045c0:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43da      	mvns	r2, r3
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	2380      	movs	r3, #128	@ 0x80
 80045d6:	039b      	lsls	r3, r3, #14
 80045d8:	4013      	ands	r3, r2
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 80045ec:	2384      	movs	r3, #132	@ 0x84
 80045ee:	58d3      	ldr	r3, [r2, r3]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43da      	mvns	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	4013      	ands	r3, r2
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004610:	4914      	ldr	r1, [pc, #80]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 8004612:	2284      	movs	r2, #132	@ 0x84
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004618:	4a12      	ldr	r2, [pc, #72]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	58d3      	ldr	r3, [r2, r3]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43da      	mvns	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	025b      	lsls	r3, r3, #9
 8004632:	4013      	ands	r3, r2
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800463e:	4909      	ldr	r1, [pc, #36]	@ (8004664 <HAL_GPIO_Init+0x2b8>)
 8004640:	2280      	movs	r2, #128	@ 0x80
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3301      	adds	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	40da      	lsrs	r2, r3
 8004654:	1e13      	subs	r3, r2, #0
 8004656:	d000      	beq.n	800465a <HAL_GPIO_Init+0x2ae>
 8004658:	e6b0      	b.n	80043bc <HAL_GPIO_Init+0x10>
  }
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46c0      	nop			@ (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b006      	add	sp, #24
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021800 	.word	0x40021800
 8004668:	50000400 	.word	0x50000400
 800466c:	50000800 	.word	0x50000800
 8004670:	50000c00 	.word	0x50000c00

08004674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	000a      	movs	r2, r1
 800467e:	1cbb      	adds	r3, r7, #2
 8004680:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	1cba      	adds	r2, r7, #2
 8004688:	8812      	ldrh	r2, [r2, #0]
 800468a:	4013      	ands	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800468e:	230f      	movs	r3, #15
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e003      	b.n	80046a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004698:	230f      	movs	r3, #15
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b004      	add	sp, #16
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	0008      	movs	r0, r1
 80046b8:	0011      	movs	r1, r2
 80046ba:	1cbb      	adds	r3, r7, #2
 80046bc:	1c02      	adds	r2, r0, #0
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	1c7b      	adds	r3, r7, #1
 80046c2:	1c0a      	adds	r2, r1, #0
 80046c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046c6:	1c7b      	adds	r3, r7, #1
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ce:	1cbb      	adds	r3, r7, #2
 80046d0:	881a      	ldrh	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046d6:	e003      	b.n	80046e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046d8:	1cbb      	adds	r3, r7, #2
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	000a      	movs	r2, r1
 80046f2:	1cbb      	adds	r3, r7, #2
 80046f4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046fc:	1cbb      	adds	r3, r7, #2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4013      	ands	r3, r2
 8004704:	041a      	lsls	r2, r3, #16
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	43db      	mvns	r3, r3
 800470a:	1cb9      	adds	r1, r7, #2
 800470c:	8809      	ldrh	r1, [r1, #0]
 800470e:	400b      	ands	r3, r1
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	619a      	str	r2, [r3, #24]
}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b004      	add	sp, #16
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	4b17      	ldr	r3, [pc, #92]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	429a      	cmp	r2, r3
 8004742:	d11f      	bne.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	0013      	movs	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	189b      	adds	r3, r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4912      	ldr	r1, [pc, #72]	@ (800479c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004752:	0018      	movs	r0, r3
 8004754:	f7fb fce8 	bl	8000128 <__udivsi3>
 8004758:	0003      	movs	r3, r0
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800475e:	e008      	b.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3b01      	subs	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e001      	b.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e009      	b.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004772:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	401a      	ands	r2, r3
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	429a      	cmp	r2, r3
 8004782:	d0ed      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	40007000 	.word	0x40007000
 8004794:	fffff9ff 	.word	0xfffff9ff
 8004798:	20000040 	.word	0x20000040
 800479c:	000f4240 	.word	0x000f4240

080047a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	23e0      	movs	r3, #224	@ 0xe0
 80047aa:	01db      	lsls	r3, r3, #7
 80047ac:	4013      	ands	r3, r2
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000

080047b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e2fe      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	4013      	ands	r3, r2
 80047d2:	d100      	bne.n	80047d6 <HAL_RCC_OscConfig+0x1e>
 80047d4:	e07c      	b.n	80048d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d6:	4bc3      	ldr	r3, [pc, #780]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2238      	movs	r2, #56	@ 0x38
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e0:	4bc0      	ldr	r3, [pc, #768]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4013      	ands	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d102      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3e>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d002      	beq.n	80047fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10b      	bne.n	8004814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	029b      	lsls	r3, r3, #10
 8004804:	4013      	ands	r3, r2
 8004806:	d062      	beq.n	80048ce <HAL_RCC_OscConfig+0x116>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d15e      	bne.n	80048ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e2d9      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	2380      	movs	r3, #128	@ 0x80
 800481a:	025b      	lsls	r3, r3, #9
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x78>
 8004820:	4bb0      	ldr	r3, [pc, #704]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4baf      	ldr	r3, [pc, #700]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004826:	2180      	movs	r1, #128	@ 0x80
 8004828:	0249      	lsls	r1, r1, #9
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e020      	b.n	8004872 <HAL_RCC_OscConfig+0xba>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	23a0      	movs	r3, #160	@ 0xa0
 8004836:	02db      	lsls	r3, r3, #11
 8004838:	429a      	cmp	r2, r3
 800483a:	d10e      	bne.n	800485a <HAL_RCC_OscConfig+0xa2>
 800483c:	4ba9      	ldr	r3, [pc, #676]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4ba8      	ldr	r3, [pc, #672]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004842:	2180      	movs	r1, #128	@ 0x80
 8004844:	02c9      	lsls	r1, r1, #11
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4ba5      	ldr	r3, [pc, #660]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004850:	2180      	movs	r1, #128	@ 0x80
 8004852:	0249      	lsls	r1, r1, #9
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e00b      	b.n	8004872 <HAL_RCC_OscConfig+0xba>
 800485a:	4ba2      	ldr	r3, [pc, #648]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4ba1      	ldr	r3, [pc, #644]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004860:	49a1      	ldr	r1, [pc, #644]	@ (8004ae8 <HAL_RCC_OscConfig+0x330>)
 8004862:	400a      	ands	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	4b9f      	ldr	r3, [pc, #636]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b9e      	ldr	r3, [pc, #632]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800486c:	499f      	ldr	r1, [pc, #636]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 800486e:	400a      	ands	r2, r1
 8004870:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d014      	beq.n	80048a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fd fd01 	bl	8002280 <HAL_GetTick>
 800487e:	0003      	movs	r3, r0
 8004880:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd fcfc 	bl	8002280 <HAL_GetTick>
 8004888:	0002      	movs	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	@ 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e298      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004896:	4b93      	ldr	r3, [pc, #588]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	029b      	lsls	r3, r3, #10
 800489e:	4013      	ands	r3, r2
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0xcc>
 80048a2:	e015      	b.n	80048d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd fcec 	bl	8002280 <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ae:	f7fd fce7 	bl	8002280 <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b64      	cmp	r3, #100	@ 0x64
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e283      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c0:	4b88      	ldr	r3, [pc, #544]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	4013      	ands	r3, r2
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0xf6>
 80048cc:	e000      	b.n	80048d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d100      	bne.n	80048dc <HAL_RCC_OscConfig+0x124>
 80048da:	e099      	b.n	8004a10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048dc:	4b81      	ldr	r3, [pc, #516]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2238      	movs	r2, #56	@ 0x38
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2203      	movs	r2, #3
 80048ec:	4013      	ands	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d102      	bne.n	80048fc <HAL_RCC_OscConfig+0x144>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d002      	beq.n	8004902 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d135      	bne.n	800496e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004902:	4b78      	ldr	r3, [pc, #480]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4013      	ands	r3, r2
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x162>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e256      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b72      	ldr	r3, [pc, #456]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4a74      	ldr	r2, [pc, #464]	@ (8004af0 <HAL_RCC_OscConfig+0x338>)
 8004920:	4013      	ands	r3, r2
 8004922:	0019      	movs	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d112      	bne.n	800495c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004936:	4b6b      	ldr	r3, [pc, #428]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6e      	ldr	r2, [pc, #440]	@ (8004af4 <HAL_RCC_OscConfig+0x33c>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	4b67      	ldr	r3, [pc, #412]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800494a:	4b66      	ldr	r3, [pc, #408]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	0adb      	lsrs	r3, r3, #11
 8004950:	2207      	movs	r2, #7
 8004952:	4013      	ands	r3, r2
 8004954:	4a68      	ldr	r2, [pc, #416]	@ (8004af8 <HAL_RCC_OscConfig+0x340>)
 8004956:	40da      	lsrs	r2, r3
 8004958:	4b68      	ldr	r3, [pc, #416]	@ (8004afc <HAL_RCC_OscConfig+0x344>)
 800495a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800495c:	4b68      	ldr	r3, [pc, #416]	@ (8004b00 <HAL_RCC_OscConfig+0x348>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	0018      	movs	r0, r3
 8004962:	f7fd fc31 	bl	80021c8 <HAL_InitTick>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d051      	beq.n	8004a0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e22c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d030      	beq.n	80049d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004976:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a5e      	ldr	r2, [pc, #376]	@ (8004af4 <HAL_RCC_OscConfig+0x33c>)
 800497c:	4013      	ands	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	4b57      	ldr	r3, [pc, #348]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800498a:	4b56      	ldr	r3, [pc, #344]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b55      	ldr	r3, [pc, #340]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004990:	2180      	movs	r1, #128	@ 0x80
 8004992:	0049      	lsls	r1, r1, #1
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fd fc72 	bl	8002280 <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fd fc6d 	bl	8002280 <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e209      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	2380      	movs	r3, #128	@ 0x80
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4013      	ands	r3, r2
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b48      	ldr	r3, [pc, #288]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a4a      	ldr	r2, [pc, #296]	@ (8004af0 <HAL_RCC_OscConfig+0x338>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	021a      	lsls	r2, r3, #8
 80049d0:	4b44      	ldr	r3, [pc, #272]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	e01b      	b.n	8004a10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80049d8:	4b42      	ldr	r3, [pc, #264]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b41      	ldr	r3, [pc, #260]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 80049de:	4949      	ldr	r1, [pc, #292]	@ (8004b04 <HAL_RCC_OscConfig+0x34c>)
 80049e0:	400a      	ands	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd fc4c 	bl	8002280 <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ee:	f7fd fc47 	bl	8002280 <HAL_GetTick>
 80049f2:	0002      	movs	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1e3      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a00:	4b38      	ldr	r3, [pc, #224]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCC_OscConfig+0x236>
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2208      	movs	r2, #8
 8004a16:	4013      	ands	r3, r2
 8004a18:	d047      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2238      	movs	r2, #56	@ 0x38
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b18      	cmp	r3, #24
 8004a24:	d10a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a26:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d03c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2f2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d138      	bne.n	8004aaa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e1c5      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d019      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a44:	4b27      	ldr	r3, [pc, #156]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a48:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fc16 	bl	8002280 <HAL_GetTick>
 8004a54:	0003      	movs	r3, r0
 8004a56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7fd fc11 	bl	8002280 <HAL_GetTick>
 8004a5e:	0002      	movs	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e1ad      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a70:	2202      	movs	r2, #2
 8004a72:	4013      	ands	r3, r2
 8004a74:	d0f1      	beq.n	8004a5a <HAL_RCC_OscConfig+0x2a2>
 8004a76:	e018      	b.n	8004aaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	438a      	bics	r2, r1
 8004a82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fd fbfc 	bl	8002280 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fbf7 	bl	8002280 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e193      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aa0:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d1f1      	bne.n	8004a8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x2fe>
 8004ab4:	e0c6      	b.n	8004c44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab6:	231f      	movs	r3, #31
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2238      	movs	r2, #56	@ 0x38
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d11e      	bne.n	8004b08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_RCC_OscConfig+0x32c>)
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x31e>
 8004ad4:	e0b6      	b.n	8004c44 <HAL_RCC_OscConfig+0x48c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d000      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x328>
 8004ade:	e0b1      	b.n	8004c44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e171      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	fffeffff 	.word	0xfffeffff
 8004aec:	fffbffff 	.word	0xfffbffff
 8004af0:	ffff80ff 	.word	0xffff80ff
 8004af4:	ffffc7ff 	.word	0xffffc7ff
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	20000040 	.word	0x20000040
 8004b00:	20000044 	.word	0x20000044
 8004b04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b08:	4bb1      	ldr	r3, [pc, #708]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	055b      	lsls	r3, r3, #21
 8004b10:	4013      	ands	r3, r2
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_OscConfig+0x360>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x362>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d011      	beq.n	8004b42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4bac      	ldr	r3, [pc, #688]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b22:	4bab      	ldr	r3, [pc, #684]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004b24:	2180      	movs	r1, #128	@ 0x80
 8004b26:	0549      	lsls	r1, r1, #21
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b2c:	4ba8      	ldr	r3, [pc, #672]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	055b      	lsls	r3, r3, #21
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b3a:	231f      	movs	r3, #31
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b42:	4ba4      	ldr	r3, [pc, #656]	@ (8004dd4 <HAL_RCC_OscConfig+0x61c>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d11a      	bne.n	8004b84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4e:	4ba1      	ldr	r3, [pc, #644]	@ (8004dd4 <HAL_RCC_OscConfig+0x61c>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4ba0      	ldr	r3, [pc, #640]	@ (8004dd4 <HAL_RCC_OscConfig+0x61c>)
 8004b54:	2180      	movs	r1, #128	@ 0x80
 8004b56:	0049      	lsls	r1, r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b5c:	f7fd fb90 	bl	8002280 <HAL_GetTick>
 8004b60:	0003      	movs	r3, r0
 8004b62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fd fb8b 	bl	8002280 <HAL_GetTick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e127      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	4b96      	ldr	r3, [pc, #600]	@ (8004dd4 <HAL_RCC_OscConfig+0x61c>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	@ 0x80
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x3e2>
 8004b8c:	4b90      	ldr	r3, [pc, #576]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b90:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004b92:	2101      	movs	r1, #1
 8004b94:	430a      	orrs	r2, r1
 8004b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b98:	e01c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x41c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x404>
 8004ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004ba4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ba6:	4b8a      	ldr	r3, [pc, #552]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004ba8:	2104      	movs	r1, #4
 8004baa:	430a      	orrs	r2, r1
 8004bac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bae:	4b88      	ldr	r3, [pc, #544]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb2:	4b87      	ldr	r3, [pc, #540]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x41c>
 8004bbc:	4b84      	ldr	r3, [pc, #528]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bc0:	4b83      	ldr	r3, [pc, #524]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bc8:	4b81      	ldr	r3, [pc, #516]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bcc:	4b80      	ldr	r3, [pc, #512]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bce:	2104      	movs	r1, #4
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fb50 	bl	8002280 <HAL_GetTick>
 8004be0:	0003      	movs	r3, r0
 8004be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be4:	e009      	b.n	8004bfa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fd fb4b 	bl	8002280 <HAL_GetTick>
 8004bea:	0002      	movs	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	4a79      	ldr	r2, [pc, #484]	@ (8004dd8 <HAL_RCC_OscConfig+0x620>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0e6      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	4b75      	ldr	r3, [pc, #468]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfe:	2202      	movs	r2, #2
 8004c00:	4013      	ands	r3, r2
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x42e>
 8004c04:	e013      	b.n	8004c2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd fb3b 	bl	8002280 <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c0e:	e009      	b.n	8004c24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fd fb36 	bl	8002280 <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004dd8 <HAL_RCC_OscConfig+0x620>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e0d1      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c24:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c28:	2202      	movs	r2, #2
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c2e:	231f      	movs	r3, #31
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c38:	4b65      	ldr	r3, [pc, #404]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c3c:	4b64      	ldr	r3, [pc, #400]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c3e:	4967      	ldr	r1, [pc, #412]	@ (8004ddc <HAL_RCC_OscConfig+0x624>)
 8004c40:	400a      	ands	r2, r1
 8004c42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d100      	bne.n	8004c4e <HAL_RCC_OscConfig+0x496>
 8004c4c:	e0bb      	b.n	8004dc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c4e:	4b60      	ldr	r3, [pc, #384]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2238      	movs	r2, #56	@ 0x38
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d100      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4a4>
 8004c5a:	e07b      	b.n	8004d54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d156      	bne.n	8004d12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b5a      	ldr	r3, [pc, #360]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b59      	ldr	r3, [pc, #356]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c6a:	495d      	ldr	r1, [pc, #372]	@ (8004de0 <HAL_RCC_OscConfig+0x628>)
 8004c6c:	400a      	ands	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fd fb06 	bl	8002280 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fd fb01 	bl	8002280 <HAL_GetTick>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e09d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	4b50      	ldr	r3, [pc, #320]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	049b      	lsls	r3, r3, #18
 8004c94:	4013      	ands	r3, r2
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c98:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4a51      	ldr	r2, [pc, #324]	@ (8004de4 <HAL_RCC_OscConfig+0x62c>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	4b42      	ldr	r3, [pc, #264]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b40      	ldr	r3, [pc, #256]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004cd2:	2180      	movs	r1, #128	@ 0x80
 8004cd4:	0449      	lsls	r1, r1, #17
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004cda:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004ce0:	2180      	movs	r1, #128	@ 0x80
 8004ce2:	0549      	lsls	r1, r1, #21
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd faca 	bl	8002280 <HAL_GetTick>
 8004cec:	0003      	movs	r3, r0
 8004cee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fd fac5 	bl	8002280 <HAL_GetTick>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e061      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d04:	4b32      	ldr	r3, [pc, #200]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	2380      	movs	r3, #128	@ 0x80
 8004d0a:	049b      	lsls	r3, r3, #18
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
 8004d10:	e059      	b.n	8004dc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d12:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d18:	4931      	ldr	r1, [pc, #196]	@ (8004de0 <HAL_RCC_OscConfig+0x628>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1e:	f7fd faaf 	bl	8002280 <HAL_GetTick>
 8004d22:	0003      	movs	r3, r0
 8004d24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fd faaa 	bl	8002280 <HAL_GetTick>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e046      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3a:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	049b      	lsls	r3, r3, #18
 8004d42:	4013      	ands	r3, r2
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	4b21      	ldr	r3, [pc, #132]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d4c:	4926      	ldr	r1, [pc, #152]	@ (8004de8 <HAL_RCC_OscConfig+0x630>)
 8004d4e:	400a      	ands	r2, r1
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	e038      	b.n	8004dc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e033      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004d60:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <HAL_RCC_OscConfig+0x618>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d126      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2270      	movs	r2, #112	@ 0x70
 8004d78:	401a      	ands	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d11f      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	23fe      	movs	r3, #254	@ 0xfe
 8004d86:	01db      	lsls	r3, r3, #7
 8004d88:	401a      	ands	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d116      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	23f8      	movs	r3, #248	@ 0xf8
 8004d98:	039b      	lsls	r3, r3, #14
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d10e      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	23e0      	movs	r3, #224	@ 0xe0
 8004da8:	051b      	lsls	r3, r3, #20
 8004daa:	401a      	ands	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	0f5b      	lsrs	r3, r3, #29
 8004db8:	075a      	lsls	r2, r3, #29
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b008      	add	sp, #32
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	00001388 	.word	0x00001388
 8004ddc:	efffffff 	.word	0xefffffff
 8004de0:	feffffff 	.word	0xfeffffff
 8004de4:	11c1808c 	.word	0x11c1808c
 8004de8:	eefefffc 	.word	0xeefefffc

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0e9      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b76      	ldr	r3, [pc, #472]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2207      	movs	r2, #7
 8004e06:	4013      	ands	r3, r2
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d91e      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b73      	ldr	r3, [pc, #460]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2207      	movs	r2, #7
 8004e14:	4393      	bics	r3, r2
 8004e16:	0019      	movs	r1, r3
 8004e18:	4b70      	ldr	r3, [pc, #448]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e20:	f7fd fa2e 	bl	8002280 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e28:	e009      	b.n	8004e3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2a:	f7fd fa29 	bl	8002280 <HAL_GetTick>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0ca      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e3e:	4b67      	ldr	r3, [pc, #412]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2207      	movs	r2, #7
 8004e44:	4013      	ands	r3, r2
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1ee      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2202      	movs	r2, #2
 8004e52:	4013      	ands	r3, r2
 8004e54:	d015      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d006      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e60:	4b60      	ldr	r3, [pc, #384]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e66:	21e0      	movs	r1, #224	@ 0xe0
 8004e68:	01c9      	lsls	r1, r1, #7
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4a5d      	ldr	r2, [pc, #372]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	0019      	movs	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	4b59      	ldr	r3, [pc, #356]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d057      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e94:	4b53      	ldr	r3, [pc, #332]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	029b      	lsls	r3, r3, #10
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d12b      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e097      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eac:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	049b      	lsls	r3, r3, #18
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d11f      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e08b      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec4:	4b47      	ldr	r3, [pc, #284]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d113      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e07f      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004edc:	4b41      	ldr	r3, [pc, #260]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e074      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eea:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e06d      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2207      	movs	r2, #7
 8004efe:	4393      	bics	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b37      	ldr	r3, [pc, #220]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fd f9b8 	bl	8002280 <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f14:	e009      	b.n	8004f2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f16:	f7fd f9b3 	bl	8002280 <HAL_GetTick>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e054      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2238      	movs	r2, #56	@ 0x38
 8004f30:	401a      	ands	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1ec      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2207      	movs	r2, #7
 8004f42:	4013      	ands	r3, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d21e      	bcs.n	8004f88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	4393      	bics	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	4b21      	ldr	r3, [pc, #132]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f5c:	f7fd f990 	bl	8002280 <HAL_GetTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f64:	e009      	b.n	8004f7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f66:	f7fd f98b 	bl	8002280 <HAL_GetTick>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e02c      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f7a:	4b18      	ldr	r3, [pc, #96]	@ (8004fdc <HAL_RCC_ClockConfig+0x1f0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2207      	movs	r2, #7
 8004f80:	4013      	ands	r3, r2
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1ee      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <HAL_RCC_ClockConfig+0x200>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004fa6:	f000 f829 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004faa:	0001      	movs	r1, r0
 8004fac:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	220f      	movs	r2, #15
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff0 <HAL_RCC_ClockConfig+0x204>)
 8004fb8:	0092      	lsls	r2, r2, #2
 8004fba:	58d3      	ldr	r3, [r2, r3]
 8004fbc:	221f      	movs	r2, #31
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	000a      	movs	r2, r1
 8004fc2:	40da      	lsrs	r2, r3
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <HAL_RCC_ClockConfig+0x208>)
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <HAL_RCC_ClockConfig+0x20c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f7fd f8fb 	bl	80021c8 <HAL_InitTick>
 8004fd2:	0003      	movs	r3, r0
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b004      	add	sp, #16
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	00001388 	.word	0x00001388
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	fffff0ff 	.word	0xfffff0ff
 8004fec:	ffff8fff 	.word	0xffff8fff
 8004ff0:	08009d80 	.word	0x08009d80
 8004ff4:	20000040 	.word	0x20000040
 8004ff8:	20000044 	.word	0x20000044

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005002:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2238      	movs	r2, #56	@ 0x38
 8005008:	4013      	ands	r3, r2
 800500a:	d10f      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800500c:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0adb      	lsrs	r3, r3, #11
 8005012:	2207      	movs	r2, #7
 8005014:	4013      	ands	r3, r2
 8005016:	2201      	movs	r2, #1
 8005018:	409a      	lsls	r2, r3
 800501a:	0013      	movs	r3, r2
 800501c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	4835      	ldr	r0, [pc, #212]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005022:	f7fb f881 	bl	8000128 <__udivsi3>
 8005026:	0003      	movs	r3, r0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	e05d      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800502c:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2238      	movs	r2, #56	@ 0x38
 8005032:	4013      	ands	r3, r2
 8005034:	2b08      	cmp	r3, #8
 8005036:	d102      	bne.n	800503e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005038:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x100>)
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e054      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800503e:	4b2d      	ldr	r3, [pc, #180]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2238      	movs	r2, #56	@ 0x38
 8005044:	4013      	ands	r3, r2
 8005046:	2b10      	cmp	r3, #16
 8005048:	d138      	bne.n	80050bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800504a:	4b2a      	ldr	r3, [pc, #168]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2203      	movs	r2, #3
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005054:	4b27      	ldr	r3, [pc, #156]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	2207      	movs	r2, #7
 800505c:	4013      	ands	r3, r2
 800505e:	3301      	adds	r3, #1
 8005060:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d10d      	bne.n	8005084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4824      	ldr	r0, [pc, #144]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x100>)
 800506c:	f7fb f85c 	bl	8000128 <__udivsi3>
 8005070:	0003      	movs	r3, r0
 8005072:	0019      	movs	r1, r3
 8005074:	4b1f      	ldr	r3, [pc, #124]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	227f      	movs	r2, #127	@ 0x7f
 800507c:	4013      	ands	r3, r2
 800507e:	434b      	muls	r3, r1
 8005080:	617b      	str	r3, [r7, #20]
        break;
 8005082:	e00d      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	481c      	ldr	r0, [pc, #112]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005088:	f7fb f84e 	bl	8000128 <__udivsi3>
 800508c:	0003      	movs	r3, r0
 800508e:	0019      	movs	r1, r3
 8005090:	4b18      	ldr	r3, [pc, #96]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	227f      	movs	r2, #127	@ 0x7f
 8005098:	4013      	ands	r3, r2
 800509a:	434b      	muls	r3, r1
 800509c:	617b      	str	r3, [r7, #20]
        break;
 800509e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050a0:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	0f5b      	lsrs	r3, r3, #29
 80050a6:	2207      	movs	r2, #7
 80050a8:	4013      	ands	r3, r2
 80050aa:	3301      	adds	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	6978      	ldr	r0, [r7, #20]
 80050b2:	f7fb f839 	bl	8000128 <__udivsi3>
 80050b6:	0003      	movs	r3, r0
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	e015      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050bc:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2238      	movs	r2, #56	@ 0x38
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d103      	bne.n	80050d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050d0:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2238      	movs	r2, #56	@ 0x38
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b18      	cmp	r3, #24
 80050da:	d103      	bne.n	80050e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80050dc:	23fa      	movs	r3, #250	@ 0xfa
 80050de:	01db      	lsls	r3, r3, #7
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e001      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050e8:	693b      	ldr	r3, [r7, #16]
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b006      	add	sp, #24
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	40021000 	.word	0x40021000
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	007a1200 	.word	0x007a1200

08005100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005104:	4b02      	ldr	r3, [pc, #8]	@ (8005110 <HAL_RCC_GetHCLKFreq+0x10>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	20000040 	.word	0x20000040

08005114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005114:	b5b0      	push	{r4, r5, r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005118:	f7ff fff2 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 800511c:	0004      	movs	r4, r0
 800511e:	f7ff fb3f 	bl	80047a0 <LL_RCC_GetAPB1Prescaler>
 8005122:	0003      	movs	r3, r0
 8005124:	0b1a      	lsrs	r2, r3, #12
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	58d3      	ldr	r3, [r2, r3]
 800512c:	221f      	movs	r2, #31
 800512e:	4013      	ands	r3, r2
 8005130:	40dc      	lsrs	r4, r3
 8005132:	0023      	movs	r3, r4
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	bdb0      	pop	{r4, r5, r7, pc}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	08009dc0 	.word	0x08009dc0

08005140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005148:	2313      	movs	r3, #19
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005150:	2312      	movs	r3, #18
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	4013      	ands	r3, r2
 8005162:	d100      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005164:	e0a3      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005166:	2011      	movs	r0, #17
 8005168:	183b      	adds	r3, r7, r0
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516e:	4bc3      	ldr	r3, [pc, #780]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	055b      	lsls	r3, r3, #21
 8005176:	4013      	ands	r3, r2
 8005178:	d110      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517a:	4bc0      	ldr	r3, [pc, #768]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800517c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800517e:	4bbf      	ldr	r3, [pc, #764]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005180:	2180      	movs	r1, #128	@ 0x80
 8005182:	0549      	lsls	r1, r1, #21
 8005184:	430a      	orrs	r2, r1
 8005186:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005188:	4bbc      	ldr	r3, [pc, #752]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800518a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800518c:	2380      	movs	r3, #128	@ 0x80
 800518e:	055b      	lsls	r3, r3, #21
 8005190:	4013      	ands	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
 8005194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005196:	183b      	adds	r3, r7, r0
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800519c:	4bb8      	ldr	r3, [pc, #736]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4bb7      	ldr	r3, [pc, #732]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051a2:	2180      	movs	r1, #128	@ 0x80
 80051a4:	0049      	lsls	r1, r1, #1
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051aa:	f7fd f869 	bl	8002280 <HAL_GetTick>
 80051ae:	0003      	movs	r3, r0
 80051b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b2:	e00b      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b4:	f7fd f864 	bl	8002280 <HAL_GetTick>
 80051b8:	0002      	movs	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d904      	bls.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80051c2:	2313      	movs	r3, #19
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	2203      	movs	r2, #3
 80051c8:	701a      	strb	r2, [r3, #0]
        break;
 80051ca:	e005      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051cc:	4bac      	ldr	r3, [pc, #688]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4013      	ands	r3, r2
 80051d6:	d0ed      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80051d8:	2313      	movs	r3, #19
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d154      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051e2:	4ba6      	ldr	r3, [pc, #664]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051e6:	23c0      	movs	r3, #192	@ 0xc0
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4013      	ands	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d019      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d014      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051fe:	4b9f      	ldr	r3, [pc, #636]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005202:	4aa0      	ldr	r2, [pc, #640]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005204:	4013      	ands	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005208:	4b9c      	ldr	r3, [pc, #624]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800520a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800520c:	4b9b      	ldr	r3, [pc, #620]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800520e:	2180      	movs	r1, #128	@ 0x80
 8005210:	0249      	lsls	r1, r1, #9
 8005212:	430a      	orrs	r2, r1
 8005214:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005216:	4b99      	ldr	r3, [pc, #612]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005218:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800521a:	4b98      	ldr	r3, [pc, #608]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800521c:	499a      	ldr	r1, [pc, #616]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800521e:	400a      	ands	r2, r1
 8005220:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005222:	4b96      	ldr	r3, [pc, #600]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2201      	movs	r2, #1
 800522c:	4013      	ands	r3, r2
 800522e:	d016      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd f826 	bl	8002280 <HAL_GetTick>
 8005234:	0003      	movs	r3, r0
 8005236:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005238:	e00c      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fd f821 	bl	8002280 <HAL_GetTick>
 800523e:	0002      	movs	r2, r0
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	4a91      	ldr	r2, [pc, #580]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d904      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800524a:	2313      	movs	r3, #19
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2203      	movs	r2, #3
 8005250:	701a      	strb	r2, [r3, #0]
            break;
 8005252:	e004      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005254:	4b89      	ldr	r3, [pc, #548]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005258:	2202      	movs	r2, #2
 800525a:	4013      	ands	r3, r2
 800525c:	d0ed      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800525e:	2313      	movs	r3, #19
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005268:	4b84      	ldr	r3, [pc, #528]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	4a85      	ldr	r2, [pc, #532]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800526e:	4013      	ands	r3, r2
 8005270:	0019      	movs	r1, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005276:	4b81      	ldr	r3, [pc, #516]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005278:	430a      	orrs	r2, r1
 800527a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800527c:	e00c      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800527e:	2312      	movs	r3, #18
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	2213      	movs	r2, #19
 8005284:	18ba      	adds	r2, r7, r2
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e005      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	2312      	movs	r3, #18
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	2213      	movs	r2, #19
 8005292:	18ba      	adds	r2, r7, r2
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005298:	2311      	movs	r3, #17
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d105      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a2:	4b76      	ldr	r3, [pc, #472]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052a6:	4b75      	ldr	r3, [pc, #468]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052a8:	4979      	ldr	r1, [pc, #484]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80052aa:	400a      	ands	r2, r1
 80052ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4013      	ands	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052b8:	4b70      	ldr	r3, [pc, #448]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052bc:	2203      	movs	r2, #3
 80052be:	4393      	bics	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	4b6d      	ldr	r3, [pc, #436]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c8:	430a      	orrs	r2, r1
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2202      	movs	r2, #2
 80052d2:	4013      	ands	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052d6:	4b69      	ldr	r3, [pc, #420]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	220c      	movs	r2, #12
 80052dc:	4393      	bics	r3, r2
 80052de:	0019      	movs	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	4b65      	ldr	r3, [pc, #404]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052e6:	430a      	orrs	r2, r1
 80052e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2210      	movs	r2, #16
 80052f0:	4013      	ands	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f4:	4b61      	ldr	r3, [pc, #388]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	4a66      	ldr	r2, [pc, #408]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	4b5e      	ldr	r3, [pc, #376]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005304:	430a      	orrs	r2, r1
 8005306:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	2380      	movs	r3, #128	@ 0x80
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4013      	ands	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005314:	4b59      	ldr	r3, [pc, #356]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	4a5f      	ldr	r2, [pc, #380]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800531a:	4013      	ands	r3, r2
 800531c:	0019      	movs	r1, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	4b56      	ldr	r3, [pc, #344]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005324:	430a      	orrs	r2, r1
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4013      	ands	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005334:	4b51      	ldr	r3, [pc, #324]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005338:	4a58      	ldr	r2, [pc, #352]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800533a:	4013      	ands	r3, r2
 800533c:	0019      	movs	r1, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	4b4e      	ldr	r3, [pc, #312]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005344:	430a      	orrs	r2, r1
 8005346:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2220      	movs	r2, #32
 800534e:	4013      	ands	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005352:	4b4a      	ldr	r3, [pc, #296]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	4a52      	ldr	r2, [pc, #328]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005358:	4013      	ands	r3, r2
 800535a:	0019      	movs	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	4b46      	ldr	r3, [pc, #280]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005362:	430a      	orrs	r2, r1
 8005364:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	2380      	movs	r3, #128	@ 0x80
 800536c:	01db      	lsls	r3, r3, #7
 800536e:	4013      	ands	r3, r2
 8005370:	d015      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005372:	4b42      	ldr	r3, [pc, #264]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	0899      	lsrs	r1, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	4b3f      	ldr	r3, [pc, #252]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005380:	430a      	orrs	r2, r1
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	05db      	lsls	r3, r3, #23
 800538c:	429a      	cmp	r2, r3
 800538e:	d106      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005390:	4b3a      	ldr	r3, [pc, #232]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	0249      	lsls	r1, r1, #9
 800539a:	430a      	orrs	r2, r1
 800539c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	2380      	movs	r3, #128	@ 0x80
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	4013      	ands	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053aa:	4b34      	ldr	r3, [pc, #208]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ae:	2240      	movs	r2, #64	@ 0x40
 80053b0:	4393      	bics	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b8:	4b30      	ldr	r3, [pc, #192]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	@ 0x80
 80053c4:	039b      	lsls	r3, r3, #14
 80053c6:	4013      	ands	r3, r2
 80053c8:	d016      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053ca:	4b2c      	ldr	r3, [pc, #176]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	4a35      	ldr	r2, [pc, #212]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053d8:	4b28      	ldr	r3, [pc, #160]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053e2:	2380      	movs	r3, #128	@ 0x80
 80053e4:	03db      	lsls	r3, r3, #15
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d106      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80053ea:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	4b23      	ldr	r3, [pc, #140]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053f0:	2180      	movs	r1, #128	@ 0x80
 80053f2:	0449      	lsls	r1, r1, #17
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	@ 0x80
 80053fe:	03db      	lsls	r3, r3, #15
 8005400:	4013      	ands	r3, r2
 8005402:	d016      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005408:	4a27      	ldr	r2, [pc, #156]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800540a:	4013      	ands	r3, r2
 800540c:	0019      	movs	r1, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005412:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005414:	430a      	orrs	r2, r1
 8005416:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	045b      	lsls	r3, r3, #17
 8005420:	429a      	cmp	r2, r3
 8005422:	d106      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005424:	4b15      	ldr	r3, [pc, #84]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	4b14      	ldr	r3, [pc, #80]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800542a:	2180      	movs	r1, #128	@ 0x80
 800542c:	0449      	lsls	r1, r1, #17
 800542e:	430a      	orrs	r2, r1
 8005430:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	2380      	movs	r3, #128	@ 0x80
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4013      	ands	r3, r2
 800543c:	d016      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800543e:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005442:	4a1a      	ldr	r2, [pc, #104]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005444:	4013      	ands	r3, r2
 8005446:	0019      	movs	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800544e:	430a      	orrs	r2, r1
 8005450:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	2380      	movs	r3, #128	@ 0x80
 8005458:	01db      	lsls	r3, r3, #7
 800545a:	429a      	cmp	r2, r3
 800545c:	d106      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800545e:	4b07      	ldr	r3, [pc, #28]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005464:	2180      	movs	r1, #128	@ 0x80
 8005466:	0249      	lsls	r1, r1, #9
 8005468:	430a      	orrs	r2, r1
 800546a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800546c:	2312      	movs	r3, #18
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	781b      	ldrb	r3, [r3, #0]
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b006      	add	sp, #24
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	40021000 	.word	0x40021000
 8005480:	40007000 	.word	0x40007000
 8005484:	fffffcff 	.word	0xfffffcff
 8005488:	fffeffff 	.word	0xfffeffff
 800548c:	00001388 	.word	0x00001388
 8005490:	efffffff 	.word	0xefffffff
 8005494:	fffff3ff 	.word	0xfffff3ff
 8005498:	fff3ffff 	.word	0xfff3ffff
 800549c:	ffcfffff 	.word	0xffcfffff
 80054a0:	ffffcfff 	.word	0xffffcfff
 80054a4:	ffbfffff 	.word	0xffbfffff
 80054a8:	feffffff 	.word	0xfeffffff
 80054ac:	ffff3fff 	.word	0xffff3fff

080054b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e04a      	b.n	8005558 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	223d      	movs	r2, #61	@ 0x3d
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d107      	bne.n	80054de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223c      	movs	r2, #60	@ 0x3c
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f7fc fc0b 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	223d      	movs	r2, #61	@ 0x3d
 80054e2:	2102      	movs	r1, #2
 80054e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	0019      	movs	r1, r3
 80054f0:	0010      	movs	r0, r2
 80054f2:	f000 fe6f 	bl	80061d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2248      	movs	r2, #72	@ 0x48
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	223e      	movs	r2, #62	@ 0x3e
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	223f      	movs	r2, #63	@ 0x3f
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2240      	movs	r2, #64	@ 0x40
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2241      	movs	r2, #65	@ 0x41
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2242      	movs	r2, #66	@ 0x42
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2243      	movs	r2, #67	@ 0x43
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2244      	movs	r2, #68	@ 0x44
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2245      	movs	r2, #69	@ 0x45
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2246      	movs	r2, #70	@ 0x46
 8005542:	2101      	movs	r1, #1
 8005544:	5499      	strb	r1, [r3, r2]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2247      	movs	r2, #71	@ 0x47
 800554a:	2101      	movs	r1, #1
 800554c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	223d      	movs	r2, #61	@ 0x3d
 8005552:	2101      	movs	r1, #1
 8005554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223d      	movs	r2, #61	@ 0x3d
 800556c:	5c9b      	ldrb	r3, [r3, r2]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d001      	beq.n	8005578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e042      	b.n	80055fe <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	223d      	movs	r2, #61	@ 0x3d
 800557c:	2102      	movs	r1, #2
 800557e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2101      	movs	r1, #1
 800558c:	430a      	orrs	r2, r1
 800558e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <HAL_TIM_Base_Start_IT+0xa8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <HAL_TIM_Base_Start_IT+0x5a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	05db      	lsls	r3, r3, #23
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d009      	beq.n	80055ba <HAL_TIM_Base_Start_IT+0x5a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a18      	ldr	r2, [pc, #96]	@ (800560c <HAL_TIM_Base_Start_IT+0xac>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_TIM_Base_Start_IT+0x5a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <HAL_TIM_Base_Start_IT+0xb0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d116      	bne.n	80055e8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a14      	ldr	r2, [pc, #80]	@ (8005614 <HAL_TIM_Base_Start_IT+0xb4>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b06      	cmp	r3, #6
 80055ca:	d016      	beq.n	80055fa <HAL_TIM_Base_Start_IT+0x9a>
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	2380      	movs	r3, #128	@ 0x80
 80055d0:	025b      	lsls	r3, r3, #9
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d011      	beq.n	80055fa <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	e008      	b.n	80055fa <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e000      	b.n	80055fc <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b004      	add	sp, #16
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40000400 	.word	0x40000400
 8005610:	40014000 	.word	0x40014000
 8005614:	00010007 	.word	0x00010007

08005618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e04a      	b.n	80056c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	223d      	movs	r2, #61	@ 0x3d
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	223c      	movs	r2, #60	@ 0x3c
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f7fc fac3 	bl	8001bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223d      	movs	r2, #61	@ 0x3d
 800564a:	2102      	movs	r1, #2
 800564c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3304      	adds	r3, #4
 8005656:	0019      	movs	r1, r3
 8005658:	0010      	movs	r0, r2
 800565a:	f000 fdbb 	bl	80061d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2248      	movs	r2, #72	@ 0x48
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	223e      	movs	r2, #62	@ 0x3e
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	223f      	movs	r2, #63	@ 0x3f
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2240      	movs	r2, #64	@ 0x40
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2241      	movs	r2, #65	@ 0x41
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2242      	movs	r2, #66	@ 0x42
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2243      	movs	r2, #67	@ 0x43
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2244      	movs	r2, #68	@ 0x44
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2245      	movs	r2, #69	@ 0x45
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2246      	movs	r2, #70	@ 0x46
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2247      	movs	r2, #71	@ 0x47
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	223d      	movs	r2, #61	@ 0x3d
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <HAL_TIM_PWM_Start+0x22>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	223e      	movs	r2, #62	@ 0x3e
 80056dc:	5c9b      	ldrb	r3, [r3, r2]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	4193      	sbcs	r3, r2
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	e037      	b.n	800575a <HAL_TIM_PWM_Start+0x92>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d108      	bne.n	8005702 <HAL_TIM_PWM_Start+0x3a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	223f      	movs	r2, #63	@ 0x3f
 80056f4:	5c9b      	ldrb	r3, [r3, r2]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	1e5a      	subs	r2, r3, #1
 80056fc:	4193      	sbcs	r3, r2
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e02b      	b.n	800575a <HAL_TIM_PWM_Start+0x92>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d108      	bne.n	800571a <HAL_TIM_PWM_Start+0x52>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2240      	movs	r2, #64	@ 0x40
 800570c:	5c9b      	ldrb	r3, [r3, r2]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	1e5a      	subs	r2, r3, #1
 8005714:	4193      	sbcs	r3, r2
 8005716:	b2db      	uxtb	r3, r3
 8005718:	e01f      	b.n	800575a <HAL_TIM_PWM_Start+0x92>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d108      	bne.n	8005732 <HAL_TIM_PWM_Start+0x6a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2241      	movs	r2, #65	@ 0x41
 8005724:	5c9b      	ldrb	r3, [r3, r2]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	1e5a      	subs	r2, r3, #1
 800572c:	4193      	sbcs	r3, r2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	e013      	b.n	800575a <HAL_TIM_PWM_Start+0x92>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b10      	cmp	r3, #16
 8005736:	d108      	bne.n	800574a <HAL_TIM_PWM_Start+0x82>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2242      	movs	r2, #66	@ 0x42
 800573c:	5c9b      	ldrb	r3, [r3, r2]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	1e5a      	subs	r2, r3, #1
 8005744:	4193      	sbcs	r3, r2
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e007      	b.n	800575a <HAL_TIM_PWM_Start+0x92>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2243      	movs	r2, #67	@ 0x43
 800574e:	5c9b      	ldrb	r3, [r3, r2]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	4193      	sbcs	r3, r2
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e08b      	b.n	800587a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Start+0xaa>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	223e      	movs	r2, #62	@ 0x3e
 800576c:	2102      	movs	r1, #2
 800576e:	5499      	strb	r1, [r3, r2]
 8005770:	e023      	b.n	80057ba <HAL_TIM_PWM_Start+0xf2>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b04      	cmp	r3, #4
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start+0xba>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	223f      	movs	r2, #63	@ 0x3f
 800577c:	2102      	movs	r1, #2
 800577e:	5499      	strb	r1, [r3, r2]
 8005780:	e01b      	b.n	80057ba <HAL_TIM_PWM_Start+0xf2>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0xca>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2240      	movs	r2, #64	@ 0x40
 800578c:	2102      	movs	r1, #2
 800578e:	5499      	strb	r1, [r3, r2]
 8005790:	e013      	b.n	80057ba <HAL_TIM_PWM_Start+0xf2>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b0c      	cmp	r3, #12
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xda>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2241      	movs	r2, #65	@ 0x41
 800579c:	2102      	movs	r1, #2
 800579e:	5499      	strb	r1, [r3, r2]
 80057a0:	e00b      	b.n	80057ba <HAL_TIM_PWM_Start+0xf2>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xea>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2242      	movs	r2, #66	@ 0x42
 80057ac:	2102      	movs	r1, #2
 80057ae:	5499      	strb	r1, [r3, r2]
 80057b0:	e003      	b.n	80057ba <HAL_TIM_PWM_Start+0xf2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2243      	movs	r2, #67	@ 0x43
 80057b6:	2102      	movs	r1, #2
 80057b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	0018      	movs	r0, r3
 80057c4:	f001 fa92 	bl	8006cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005884 <HAL_TIM_PWM_Start+0x1bc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00e      	beq.n	80057f0 <HAL_TIM_PWM_Start+0x128>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005888 <HAL_TIM_PWM_Start+0x1c0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_TIM_PWM_Start+0x128>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2a      	ldr	r2, [pc, #168]	@ (800588c <HAL_TIM_PWM_Start+0x1c4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_TIM_PWM_Start+0x128>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a29      	ldr	r2, [pc, #164]	@ (8005890 <HAL_TIM_PWM_Start+0x1c8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_PWM_Start+0x12c>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_TIM_PWM_Start+0x12e>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2180      	movs	r1, #128	@ 0x80
 8005806:	0209      	lsls	r1, r1, #8
 8005808:	430a      	orrs	r2, r1
 800580a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <HAL_TIM_PWM_Start+0x1bc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00f      	beq.n	8005836 <HAL_TIM_PWM_Start+0x16e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	05db      	lsls	r3, r3, #23
 800581e:	429a      	cmp	r2, r3
 8005820:	d009      	beq.n	8005836 <HAL_TIM_PWM_Start+0x16e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1b      	ldr	r2, [pc, #108]	@ (8005894 <HAL_TIM_PWM_Start+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_TIM_PWM_Start+0x16e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a15      	ldr	r2, [pc, #84]	@ (8005888 <HAL_TIM_PWM_Start+0x1c0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d116      	bne.n	8005864 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4a16      	ldr	r2, [pc, #88]	@ (8005898 <HAL_TIM_PWM_Start+0x1d0>)
 800583e:	4013      	ands	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b06      	cmp	r3, #6
 8005846:	d016      	beq.n	8005876 <HAL_TIM_PWM_Start+0x1ae>
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	025b      	lsls	r3, r3, #9
 800584e:	429a      	cmp	r2, r3
 8005850:	d011      	beq.n	8005876 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2101      	movs	r1, #1
 800585e:	430a      	orrs	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	e008      	b.n	8005876 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2101      	movs	r1, #1
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e000      	b.n	8005878 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b004      	add	sp, #16
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40014000 	.word	0x40014000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800
 8005894:	40000400 	.word	0x40000400
 8005898:	00010007 	.word	0x00010007

0800589c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e04a      	b.n	8005944 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	223d      	movs	r2, #61	@ 0x3d
 80058b2:	5c9b      	ldrb	r3, [r3, r2]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	223c      	movs	r2, #60	@ 0x3c
 80058be:	2100      	movs	r1, #0
 80058c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7fc f9cb 	bl	8001c60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	223d      	movs	r2, #61	@ 0x3d
 80058ce:	2102      	movs	r1, #2
 80058d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	0019      	movs	r1, r3
 80058dc:	0010      	movs	r0, r2
 80058de:	f000 fc79 	bl	80061d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2248      	movs	r2, #72	@ 0x48
 80058e6:	2101      	movs	r1, #1
 80058e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	223e      	movs	r2, #62	@ 0x3e
 80058ee:	2101      	movs	r1, #1
 80058f0:	5499      	strb	r1, [r3, r2]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	223f      	movs	r2, #63	@ 0x3f
 80058f6:	2101      	movs	r1, #1
 80058f8:	5499      	strb	r1, [r3, r2]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2240      	movs	r2, #64	@ 0x40
 80058fe:	2101      	movs	r1, #1
 8005900:	5499      	strb	r1, [r3, r2]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2241      	movs	r2, #65	@ 0x41
 8005906:	2101      	movs	r1, #1
 8005908:	5499      	strb	r1, [r3, r2]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2242      	movs	r2, #66	@ 0x42
 800590e:	2101      	movs	r1, #1
 8005910:	5499      	strb	r1, [r3, r2]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2243      	movs	r2, #67	@ 0x43
 8005916:	2101      	movs	r1, #1
 8005918:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2244      	movs	r2, #68	@ 0x44
 800591e:	2101      	movs	r1, #1
 8005920:	5499      	strb	r1, [r3, r2]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2245      	movs	r2, #69	@ 0x45
 8005926:	2101      	movs	r1, #1
 8005928:	5499      	strb	r1, [r3, r2]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2246      	movs	r2, #70	@ 0x46
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2247      	movs	r2, #71	@ 0x47
 8005936:	2101      	movs	r1, #1
 8005938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	223d      	movs	r2, #61	@ 0x3d
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2202      	movs	r2, #2
 8005968:	4013      	ands	r3, r2
 800596a:	d021      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2202      	movs	r2, #2
 8005970:	4013      	ands	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2203      	movs	r2, #3
 800597a:	4252      	negs	r2, r2
 800597c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2203      	movs	r2, #3
 800598c:	4013      	ands	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0018      	movs	r0, r3
 8005994:	f000 fc06 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005998:	e007      	b.n	80059aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f000 fbf9 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 fc05 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2204      	movs	r2, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2204      	movs	r2, #4
 80059bc:	4013      	ands	r3, r2
 80059be:	d01e      	beq.n	80059fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2205      	movs	r2, #5
 80059c6:	4252      	negs	r2, r2
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	23c0      	movs	r3, #192	@ 0xc0
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4013      	ands	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f000 fbdf 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 80059e6:	e007      	b.n	80059f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 fbd2 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 fbde 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2208      	movs	r2, #8
 8005a02:	4013      	ands	r3, r2
 8005a04:	d021      	beq.n	8005a4a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2209      	movs	r2, #9
 8005a14:	4252      	negs	r2, r2
 8005a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	2203      	movs	r2, #3
 8005a26:	4013      	ands	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f000 fbb9 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005a32:	e007      	b.n	8005a44 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	0018      	movs	r0, r3
 8005a38:	f000 fbac 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 fbb8 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d022      	beq.n	8005a98 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2210      	movs	r2, #16
 8005a56:	4013      	ands	r3, r2
 8005a58:	d01e      	beq.n	8005a98 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2211      	movs	r2, #17
 8005a60:	4252      	negs	r2, r2
 8005a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2208      	movs	r2, #8
 8005a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	23c0      	movs	r3, #192	@ 0xc0
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4013      	ands	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 fb92 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e007      	b.n	8005a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f000 fb85 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 fb91 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d00c      	beq.n	8005aba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d008      	beq.n	8005aba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2202      	movs	r2, #2
 8005aae:	4252      	negs	r2, r2
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 fb65 	bl	8006184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2280      	movs	r2, #128	@ 0x80
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d104      	bne.n	8005acc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	2380      	movs	r3, #128	@ 0x80
 8005ac6:	019b      	lsls	r3, r3, #6
 8005ac8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aca:	d00b      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b54 <HAL_TIM_IRQHandler+0x208>)
 8005ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f001 fa3a 	bl	8006f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4013      	ands	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2280      	movs	r2, #128	@ 0x80
 8005af2:	4013      	ands	r3, r2
 8005af4:	d007      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a17      	ldr	r2, [pc, #92]	@ (8005b58 <HAL_TIM_IRQHandler+0x20c>)
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f001 fa31 	bl	8006f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2240      	movs	r2, #64	@ 0x40
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d00c      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2240      	movs	r2, #64	@ 0x40
 8005b12:	4013      	ands	r3, r2
 8005b14:	d008      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2241      	movs	r2, #65	@ 0x41
 8005b1c:	4252      	negs	r2, r2
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 fb4e 	bl	80061c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d00c      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	4013      	ands	r3, r2
 8005b36:	d008      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2221      	movs	r2, #33	@ 0x21
 8005b3e:	4252      	negs	r2, r2
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f001 f9ff 	bl	8006f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	ffffdf7f 	.word	0xffffdf7f
 8005b58:	fffffeff 	.word	0xfffffeff

08005b5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b68:	2317      	movs	r3, #23
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	223c      	movs	r2, #60	@ 0x3c
 8005b74:	5c9b      	ldrb	r3, [r3, r2]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_IC_ConfigChannel+0x22>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e08c      	b.n	8005c98 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	223c      	movs	r2, #60	@ 0x3c
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b9c:	f000 ff02 	bl	80069a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	210c      	movs	r1, #12
 8005bac:	438a      	bics	r2, r1
 8005bae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	619a      	str	r2, [r3, #24]
 8005bc2:	e062      	b.n	8005c8a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d11c      	bne.n	8005c04 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005bda:	f000 ff6d 	bl	8006ab8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	492d      	ldr	r1, [pc, #180]	@ (8005ca0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005bea:	400a      	ands	r2, r1
 8005bec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6999      	ldr	r1, [r3, #24]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	021a      	lsls	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	619a      	str	r2, [r3, #24]
 8005c02:	e042      	b.n	8005c8a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d11b      	bne.n	8005c42 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c1a:	f000 ffc1 	bl	8006ba0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	210c      	movs	r1, #12
 8005c2a:	438a      	bics	r2, r1
 8005c2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69d9      	ldr	r1, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
 8005c40:	e023      	b.n	8005c8a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	d11c      	bne.n	8005c82 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c58:	f000 ffe2 	bl	8006c20 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	490e      	ldr	r1, [pc, #56]	@ (8005ca0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005c68:	400a      	ands	r2, r1
 8005c6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69d9      	ldr	r1, [r3, #28]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	61da      	str	r2, [r3, #28]
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005c82:	2317      	movs	r3, #23
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	223c      	movs	r2, #60	@ 0x3c
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5499      	strb	r1, [r3, r2]

  return status;
 8005c92:	2317      	movs	r3, #23
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	781b      	ldrb	r3, [r3, #0]
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b006      	add	sp, #24
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	fffff3ff 	.word	0xfffff3ff

08005ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2317      	movs	r3, #23
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	223c      	movs	r2, #60	@ 0x3c
 8005cbc:	5c9b      	ldrb	r3, [r3, r2]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0e5      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	223c      	movs	r2, #60	@ 0x3c
 8005cca:	2101      	movs	r1, #1
 8005ccc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b14      	cmp	r3, #20
 8005cd2:	d900      	bls.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005cd4:	e0d1      	b.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	009a      	lsls	r2, r3, #2
 8005cda:	4b70      	ldr	r3, [pc, #448]	@ (8005e9c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005cdc:	18d3      	adds	r3, r2, r3
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	0011      	movs	r1, r2
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 fb00 	bl	80062f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2108      	movs	r1, #8
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
      break;
 8005d22:	e0af      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	0011      	movs	r1, r2
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fb69 	bl	8006404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2180      	movs	r1, #128	@ 0x80
 8005d3e:	0109      	lsls	r1, r1, #4
 8005d40:	430a      	orrs	r2, r1
 8005d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4954      	ldr	r1, [pc, #336]	@ (8005ea0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d50:	400a      	ands	r2, r1
 8005d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6999      	ldr	r1, [r3, #24]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	021a      	lsls	r2, r3, #8
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	619a      	str	r2, [r3, #24]
      break;
 8005d68:	e08c      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	0011      	movs	r1, r2
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 fbca 	bl	800650c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2108      	movs	r1, #8
 8005d84:	430a      	orrs	r2, r1
 8005d86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2104      	movs	r1, #4
 8005d94:	438a      	bics	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69d9      	ldr	r1, [r3, #28]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	61da      	str	r2, [r3, #28]
      break;
 8005daa:	e06b      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 fc31 	bl	800661c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2180      	movs	r1, #128	@ 0x80
 8005dc6:	0109      	lsls	r1, r1, #4
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69da      	ldr	r2, [r3, #28]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4932      	ldr	r1, [pc, #200]	@ (8005ea0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69d9      	ldr	r1, [r3, #28]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	61da      	str	r2, [r3, #28]
      break;
 8005df0:	e048      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fc78 	bl	80066f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2108      	movs	r1, #8
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	438a      	bics	r2, r1
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e32:	e027      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	0011      	movs	r1, r2
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 fcb7 	bl	80067b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2180      	movs	r1, #128	@ 0x80
 8005e4e:	0109      	lsls	r1, r1, #4
 8005e50:	430a      	orrs	r2, r1
 8005e52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4910      	ldr	r1, [pc, #64]	@ (8005ea0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e60:	400a      	ands	r2, r1
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	021a      	lsls	r2, r3, #8
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e78:	e004      	b.n	8005e84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005e7a:	2317      	movs	r3, #23
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
      break;
 8005e82:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	223c      	movs	r2, #60	@ 0x3c
 8005e88:	2100      	movs	r1, #0
 8005e8a:	5499      	strb	r1, [r3, r2]

  return status;
 8005e8c:	2317      	movs	r3, #23
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	781b      	ldrb	r3, [r3, #0]
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b006      	add	sp, #24
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	08009de0 	.word	0x08009de0
 8005ea0:	fffffbff 	.word	0xfffffbff

08005ea4 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2317      	movs	r3, #23
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	223c      	movs	r2, #60	@ 0x3c
 8005ebc:	5c9b      	ldrb	r3, [r3, r2]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_ConfigOCrefClear+0x22>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e10e      	b.n	80060e4 <HAL_TIM_ConfigOCrefClear+0x240>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	223c      	movs	r2, #60	@ 0x3c
 8005eca:	2101      	movs	r1, #1
 8005ecc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	223d      	movs	r2, #61	@ 0x3d
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2280      	movs	r2, #128	@ 0x80
 8005edc:	0592      	lsls	r2, r2, #22
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02f      	beq.n	8005f42 <HAL_TIM_ConfigOCrefClear+0x9e>
 8005ee2:	2280      	movs	r2, #128	@ 0x80
 8005ee4:	0592      	lsls	r2, r2, #22
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d854      	bhi.n	8005f94 <HAL_TIM_ConfigOCrefClear+0xf0>
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d914      	bls.n	8005f18 <HAL_TIM_ConfigOCrefClear+0x74>
 8005eee:	2280      	movs	r2, #128	@ 0x80
 8005ef0:	0552      	lsls	r2, r2, #21
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d14e      	bne.n	8005f94 <HAL_TIM_ConfigOCrefClear+0xf0>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_OCCS | TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	497a      	ldr	r1, [pc, #488]	@ (80060ec <HAL_TIM_ConfigOCrefClear+0x248>)
 8005f02:	400a      	ands	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2101      	movs	r1, #1
 8005f12:	438a      	bics	r2, r1
 8005f14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f16:	e042      	b.n	8005f9e <HAL_TIM_ConfigOCrefClear+0xfa>
#if defined(COMP3)
    case TIM_CLEARINPUTSOURCE_COMP3:
#endif /* COMP3 */
    {
      /* Clear the OCREF clear selection bit */
      CLEAR_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2108      	movs	r1, #8
 8005f24:	438a      	bics	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]

      /* OCREF_CLR_INT is connected to COMPx output */
      MODIFY_REG(htim->Instance->OR1, TIMx_OR1_OCREF_CLR, sClearInputConfig->ClearInputSource);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4393      	bics	r3, r2
 8005f32:	0019      	movs	r1, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f40:	e02d      	b.n	8005f9e <HAL_TIM_ConfigOCrefClear+0xfa>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_TIM_ConfigOCrefClear+0xba>
      {
        htim->State = HAL_TIM_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	223d      	movs	r2, #61	@ 0x3d
 8005f4e:	2101      	movs	r1, #1
 8005f50:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(htim);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	223c      	movs	r2, #60	@ 0x3c
 8005f56:	2100      	movs	r1, #0
 8005f58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0c2      	b.n	80060e4 <HAL_TIM_ConfigOCrefClear+0x240>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f6e:	f000 fe9d 	bl	8006cac <TIM_ETR_SetConfig>

      /* Set the OCREF clear selection bit */
      SET_BIT(htim->Instance->SMCR, TIM_SMCR_OCCS);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2108      	movs	r1, #8
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]

      /* Clear TIMx_OR1_OCREF_CLR (reset value) */
      CLEAR_BIT(htim->Instance->OR1, TIMx_OR1_OCREF_CLR);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	438a      	bics	r2, r1
 8005f90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f92:	e004      	b.n	8005f9e <HAL_TIM_ConfigOCrefClear+0xfa>
    }

    default:
      status = HAL_ERROR;
 8005f94:	2317      	movs	r3, #23
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
      break;
 8005f9c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005f9e:	2317      	movs	r3, #23
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d000      	beq.n	8005faa <HAL_TIM_ConfigOCrefClear+0x106>
 8005fa8:	e091      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
  {
    switch (Channel)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b14      	cmp	r3, #20
 8005fae:	d900      	bls.n	8005fb2 <HAL_TIM_ConfigOCrefClear+0x10e>
 8005fb0:	e08c      	b.n	80060cc <HAL_TIM_ConfigOCrefClear+0x228>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	009a      	lsls	r2, r3, #2
 8005fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80060f0 <HAL_TIM_ConfigOCrefClear+0x24c>)
 8005fb8:	18d3      	adds	r3, r2, r3
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	469f      	mov	pc, r3
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_TIM_ConfigOCrefClear+0x134>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2180      	movs	r1, #128	@ 0x80
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 8005fd6:	e07a      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2180      	movs	r1, #128	@ 0x80
 8005fe4:	438a      	bics	r2, r1
 8005fe6:	619a      	str	r2, [r3, #24]
        break;
 8005fe8:	e071      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_TIM_ConfigOCrefClear+0x162>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2180      	movs	r1, #128	@ 0x80
 8005ffe:	0209      	lsls	r1, r1, #8
 8006000:	430a      	orrs	r2, r1
 8006002:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8006004:	e063      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4938      	ldr	r1, [pc, #224]	@ (80060f4 <HAL_TIM_ConfigOCrefClear+0x250>)
 8006012:	400a      	ands	r2, r1
 8006014:	619a      	str	r2, [r3, #24]
        break;
 8006016:	e05a      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_TIM_ConfigOCrefClear+0x18e>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2180      	movs	r1, #128	@ 0x80
 800602c:	430a      	orrs	r2, r1
 800602e:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8006030:	e04d      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2180      	movs	r1, #128	@ 0x80
 800603e:	438a      	bics	r2, r1
 8006040:	61da      	str	r2, [r3, #28]
        break;
 8006042:	e044      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <HAL_TIM_ConfigOCrefClear+0x1bc>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2180      	movs	r1, #128	@ 0x80
 8006058:	0209      	lsls	r1, r1, #8
 800605a:	430a      	orrs	r2, r1
 800605c:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 800605e:	e036      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4922      	ldr	r1, [pc, #136]	@ (80060f4 <HAL_TIM_ConfigOCrefClear+0x250>)
 800606c:	400a      	ands	r2, r1
 800606e:	61da      	str	r2, [r3, #28]
        break;
 8006070:	e02d      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_5:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <HAL_TIM_ConfigOCrefClear+0x1e8>
        {
          /* Enable the OCREF clear feature for Channel 5 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2180      	movs	r1, #128	@ 0x80
 8006086:	430a      	orrs	r2, r1
 8006088:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 5 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
        }
        break;
 800608a:	e020      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2180      	movs	r1, #128	@ 0x80
 8006098:	438a      	bics	r2, r1
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800609c:	e017      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      case TIM_CHANNEL_6:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <HAL_TIM_ConfigOCrefClear+0x216>
        {
          /* Enable the OCREF clear feature for Channel 6 */
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2180      	movs	r1, #128	@ 0x80
 80060b2:	0209      	lsls	r1, r1, #8
 80060b4:	430a      	orrs	r2, r1
 80060b6:	655a      	str	r2, [r3, #84]	@ 0x54
        else
        {
          /* Disable the OCREF clear feature for Channel 6 */
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
        }
        break;
 80060b8:	e009      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	490b      	ldr	r1, [pc, #44]	@ (80060f4 <HAL_TIM_ConfigOCrefClear+0x250>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80060ca:	e000      	b.n	80060ce <HAL_TIM_ConfigOCrefClear+0x22a>
      }
      default:
        break;
 80060cc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	223d      	movs	r2, #61	@ 0x3d
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	223c      	movs	r2, #60	@ 0x3c
 80060da:	2100      	movs	r1, #0
 80060dc:	5499      	strb	r1, [r3, r2]

  return status;
 80060de:	2317      	movs	r3, #23
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	781b      	ldrb	r3, [r3, #0]
}
 80060e4:	0018      	movs	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b006      	add	sp, #24
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	ffff00f7 	.word	0xffff00f7
 80060f0:	08009e34 	.word	0x08009e34
 80060f4:	ffff7fff 	.word	0xffff7fff

080060f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	223c      	movs	r2, #60	@ 0x3c
 8006106:	5c9b      	ldrb	r3, [r3, r2]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIM_SlaveConfigSynchro+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e032      	b.n	8006176 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	223c      	movs	r2, #60	@ 0x3c
 8006114:	2101      	movs	r1, #1
 8006116:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	223d      	movs	r2, #61	@ 0x3d
 800611c:	2102      	movs	r1, #2
 800611e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0011      	movs	r1, r2
 8006126:	0018      	movs	r0, r3
 8006128:	f000 fba6 	bl	8006878 <TIM_SlaveTimer_SetConfig>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d009      	beq.n	8006144 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	223d      	movs	r2, #61	@ 0x3d
 8006134:	2101      	movs	r1, #1
 8006136:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	223c      	movs	r2, #60	@ 0x3c
 800613c:	2100      	movs	r1, #0
 800613e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e018      	b.n	8006176 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2140      	movs	r1, #64	@ 0x40
 8006150:	438a      	bics	r2, r1
 8006152:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4908      	ldr	r1, [pc, #32]	@ (8006180 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8006160:	400a      	ands	r2, r1
 8006162:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	223d      	movs	r2, #61	@ 0x3d
 8006168:	2101      	movs	r1, #1
 800616a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	223c      	movs	r2, #60	@ 0x3c
 8006170:	2100      	movs	r1, #0
 8006172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	0018      	movs	r0, r3
 8006178:	46bd      	mov	sp, r7
 800617a:	b002      	add	sp, #8
 800617c:	bd80      	pop	{r7, pc}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	ffffbfff 	.word	0xffffbfff

08006184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800618c:	46c0      	nop			@ (mov r8, r8)
 800618e:	46bd      	mov	sp, r7
 8006190:	b002      	add	sp, #8
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619c:	46c0      	nop			@ (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b002      	add	sp, #8
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ac:	46c0      	nop			@ (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b002      	add	sp, #8
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061bc:	46c0      	nop			@ (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061cc:	46c0      	nop			@ (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3b      	ldr	r2, [pc, #236]	@ (80062d4 <TIM_Base_SetConfig+0x100>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d008      	beq.n	80061fe <TIM_Base_SetConfig+0x2a>
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	2380      	movs	r3, #128	@ 0x80
 80061f0:	05db      	lsls	r3, r3, #23
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0x2a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a37      	ldr	r2, [pc, #220]	@ (80062d8 <TIM_Base_SetConfig+0x104>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2270      	movs	r2, #112	@ 0x70
 8006202:	4393      	bics	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a30      	ldr	r2, [pc, #192]	@ (80062d4 <TIM_Base_SetConfig+0x100>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d018      	beq.n	800624a <TIM_Base_SetConfig+0x76>
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	05db      	lsls	r3, r3, #23
 800621e:	429a      	cmp	r2, r3
 8006220:	d013      	beq.n	800624a <TIM_Base_SetConfig+0x76>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2c      	ldr	r2, [pc, #176]	@ (80062d8 <TIM_Base_SetConfig+0x104>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00f      	beq.n	800624a <TIM_Base_SetConfig+0x76>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2b      	ldr	r2, [pc, #172]	@ (80062dc <TIM_Base_SetConfig+0x108>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00b      	beq.n	800624a <TIM_Base_SetConfig+0x76>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2a      	ldr	r2, [pc, #168]	@ (80062e0 <TIM_Base_SetConfig+0x10c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d007      	beq.n	800624a <TIM_Base_SetConfig+0x76>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a29      	ldr	r2, [pc, #164]	@ (80062e4 <TIM_Base_SetConfig+0x110>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d003      	beq.n	800624a <TIM_Base_SetConfig+0x76>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a28      	ldr	r2, [pc, #160]	@ (80062e8 <TIM_Base_SetConfig+0x114>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d108      	bne.n	800625c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a27      	ldr	r2, [pc, #156]	@ (80062ec <TIM_Base_SetConfig+0x118>)
 800624e:	4013      	ands	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2280      	movs	r2, #128	@ 0x80
 8006260:	4393      	bics	r3, r2
 8006262:	001a      	movs	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a13      	ldr	r2, [pc, #76]	@ (80062d4 <TIM_Base_SetConfig+0x100>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_Base_SetConfig+0xce>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a14      	ldr	r2, [pc, #80]	@ (80062e0 <TIM_Base_SetConfig+0x10c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_Base_SetConfig+0xce>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a13      	ldr	r2, [pc, #76]	@ (80062e4 <TIM_Base_SetConfig+0x110>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_Base_SetConfig+0xce>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <TIM_Base_SetConfig+0x114>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d103      	bne.n	80062aa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2201      	movs	r2, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d106      	bne.n	80062ca <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2201      	movs	r2, #1
 80062c2:	4393      	bics	r3, r2
 80062c4:	001a      	movs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	611a      	str	r2, [r3, #16]
  }
}
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b004      	add	sp, #16
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40002000 	.word	0x40002000
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40014400 	.word	0x40014400
 80062e8:	40014800 	.word	0x40014800
 80062ec:	fffffcff 	.word	0xfffffcff

080062f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	2201      	movs	r2, #1
 8006306:	4393      	bics	r3, r2
 8006308:	001a      	movs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a32      	ldr	r2, [pc, #200]	@ (80063e8 <TIM_OC1_SetConfig+0xf8>)
 800631e:	4013      	ands	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2203      	movs	r2, #3
 8006326:	4393      	bics	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2202      	movs	r2, #2
 8006338:	4393      	bics	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <TIM_OC1_SetConfig+0xfc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00b      	beq.n	8006366 <TIM_OC1_SetConfig+0x76>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a27      	ldr	r2, [pc, #156]	@ (80063f0 <TIM_OC1_SetConfig+0x100>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_OC1_SetConfig+0x76>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a26      	ldr	r2, [pc, #152]	@ (80063f4 <TIM_OC1_SetConfig+0x104>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC1_SetConfig+0x76>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a25      	ldr	r2, [pc, #148]	@ (80063f8 <TIM_OC1_SetConfig+0x108>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10c      	bne.n	8006380 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2208      	movs	r2, #8
 800636a:	4393      	bics	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2204      	movs	r2, #4
 800637c:	4393      	bics	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <TIM_OC1_SetConfig+0xfc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_OC1_SetConfig+0xb0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a19      	ldr	r2, [pc, #100]	@ (80063f0 <TIM_OC1_SetConfig+0x100>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_OC1_SetConfig+0xb0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <TIM_OC1_SetConfig+0x104>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_OC1_SetConfig+0xb0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <TIM_OC1_SetConfig+0x108>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d111      	bne.n	80063c4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <TIM_OC1_SetConfig+0x10c>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4a15      	ldr	r2, [pc, #84]	@ (8006400 <TIM_OC1_SetConfig+0x110>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	46bd      	mov	sp, r7
 80063e2:	b006      	add	sp, #24
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	fffeff8f 	.word	0xfffeff8f
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800
 80063fc:	fffffeff 	.word	0xfffffeff
 8006400:	fffffdff 	.word	0xfffffdff

08006404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	2210      	movs	r2, #16
 800641a:	4393      	bics	r3, r2
 800641c:	001a      	movs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a2e      	ldr	r2, [pc, #184]	@ (80064ec <TIM_OC2_SetConfig+0xe8>)
 8006432:	4013      	ands	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4a2d      	ldr	r2, [pc, #180]	@ (80064f0 <TIM_OC2_SetConfig+0xec>)
 800643a:	4013      	ands	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2220      	movs	r2, #32
 800644e:	4393      	bics	r3, r2
 8006450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a24      	ldr	r2, [pc, #144]	@ (80064f4 <TIM_OC2_SetConfig+0xf0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d10d      	bne.n	8006482 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2280      	movs	r2, #128	@ 0x80
 800646a:	4393      	bics	r3, r2
 800646c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2240      	movs	r2, #64	@ 0x40
 800647e:	4393      	bics	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <TIM_OC2_SetConfig+0xf0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00b      	beq.n	80064a2 <TIM_OC2_SetConfig+0x9e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a1a      	ldr	r2, [pc, #104]	@ (80064f8 <TIM_OC2_SetConfig+0xf4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d007      	beq.n	80064a2 <TIM_OC2_SetConfig+0x9e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a19      	ldr	r2, [pc, #100]	@ (80064fc <TIM_OC2_SetConfig+0xf8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_OC2_SetConfig+0x9e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <TIM_OC2_SetConfig+0xfc>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d113      	bne.n	80064ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <TIM_OC2_SetConfig+0x100>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4a16      	ldr	r2, [pc, #88]	@ (8006508 <TIM_OC2_SetConfig+0x104>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	46c0      	nop			@ (mov r8, r8)
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b006      	add	sp, #24
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	feff8fff 	.word	0xfeff8fff
 80064f0:	fffffcff 	.word	0xfffffcff
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40014400 	.word	0x40014400
 8006500:	40014800 	.word	0x40014800
 8006504:	fffffbff 	.word	0xfffffbff
 8006508:	fffff7ff 	.word	0xfffff7ff

0800650c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	4a33      	ldr	r2, [pc, #204]	@ (80065f0 <TIM_OC3_SetConfig+0xe4>)
 8006522:	401a      	ands	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a2f      	ldr	r2, [pc, #188]	@ (80065f4 <TIM_OC3_SetConfig+0xe8>)
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2203      	movs	r2, #3
 8006540:	4393      	bics	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4a29      	ldr	r2, [pc, #164]	@ (80065f8 <TIM_OC3_SetConfig+0xec>)
 8006552:	4013      	ands	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a25      	ldr	r2, [pc, #148]	@ (80065fc <TIM_OC3_SetConfig+0xf0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10d      	bne.n	8006586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4a24      	ldr	r2, [pc, #144]	@ (8006600 <TIM_OC3_SetConfig+0xf4>)
 800656e:	4013      	ands	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4a20      	ldr	r2, [pc, #128]	@ (8006604 <TIM_OC3_SetConfig+0xf8>)
 8006582:	4013      	ands	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1c      	ldr	r2, [pc, #112]	@ (80065fc <TIM_OC3_SetConfig+0xf0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00b      	beq.n	80065a6 <TIM_OC3_SetConfig+0x9a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <TIM_OC3_SetConfig+0xfc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_OC3_SetConfig+0x9a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <TIM_OC3_SetConfig+0x100>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_OC3_SetConfig+0x9a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <TIM_OC3_SetConfig+0x104>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d113      	bne.n	80065ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006614 <TIM_OC3_SetConfig+0x108>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4a19      	ldr	r2, [pc, #100]	@ (8006618 <TIM_OC3_SetConfig+0x10c>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	46c0      	nop			@ (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b006      	add	sp, #24
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	fffffeff 	.word	0xfffffeff
 80065f4:	fffeff8f 	.word	0xfffeff8f
 80065f8:	fffffdff 	.word	0xfffffdff
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	fffff7ff 	.word	0xfffff7ff
 8006604:	fffffbff 	.word	0xfffffbff
 8006608:	40014000 	.word	0x40014000
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800
 8006614:	ffffefff 	.word	0xffffefff
 8006618:	ffffdfff 	.word	0xffffdfff

0800661c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	4a26      	ldr	r2, [pc, #152]	@ (80066cc <TIM_OC4_SetConfig+0xb0>)
 8006632:	401a      	ands	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a22      	ldr	r2, [pc, #136]	@ (80066d0 <TIM_OC4_SetConfig+0xb4>)
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a21      	ldr	r2, [pc, #132]	@ (80066d4 <TIM_OC4_SetConfig+0xb8>)
 8006650:	4013      	ands	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4a1d      	ldr	r2, [pc, #116]	@ (80066d8 <TIM_OC4_SetConfig+0xbc>)
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a19      	ldr	r2, [pc, #100]	@ (80066dc <TIM_OC4_SetConfig+0xc0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00b      	beq.n	8006694 <TIM_OC4_SetConfig+0x78>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <TIM_OC4_SetConfig+0xc4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_OC4_SetConfig+0x78>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <TIM_OC4_SetConfig+0xc8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC4_SetConfig+0x78>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <TIM_OC4_SetConfig+0xcc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d109      	bne.n	80066a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <TIM_OC4_SetConfig+0xd0>)
 8006698:	4013      	ands	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	019b      	lsls	r3, r3, #6
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	46c0      	nop			@ (mov r8, r8)
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b006      	add	sp, #24
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	46c0      	nop			@ (mov r8, r8)
 80066cc:	ffffefff 	.word	0xffffefff
 80066d0:	feff8fff 	.word	0xfeff8fff
 80066d4:	fffffcff 	.word	0xfffffcff
 80066d8:	ffffdfff 	.word	0xffffdfff
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800
 80066ec:	ffffbfff 	.word	0xffffbfff

080066f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4a23      	ldr	r2, [pc, #140]	@ (8006794 <TIM_OC5_SetConfig+0xa4>)
 8006706:	401a      	ands	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a1f      	ldr	r2, [pc, #124]	@ (8006798 <TIM_OC5_SetConfig+0xa8>)
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4a1b      	ldr	r2, [pc, #108]	@ (800679c <TIM_OC5_SetConfig+0xac>)
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a17      	ldr	r2, [pc, #92]	@ (80067a0 <TIM_OC5_SetConfig+0xb0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00b      	beq.n	800675e <TIM_OC5_SetConfig+0x6e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <TIM_OC5_SetConfig+0xb4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d007      	beq.n	800675e <TIM_OC5_SetConfig+0x6e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a15      	ldr	r2, [pc, #84]	@ (80067a8 <TIM_OC5_SetConfig+0xb8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC5_SetConfig+0x6e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a14      	ldr	r2, [pc, #80]	@ (80067ac <TIM_OC5_SetConfig+0xbc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d109      	bne.n	8006772 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4a0c      	ldr	r2, [pc, #48]	@ (8006794 <TIM_OC5_SetConfig+0xa4>)
 8006762:	4013      	ands	r3, r2
 8006764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	46c0      	nop			@ (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b006      	add	sp, #24
 8006792:	bd80      	pop	{r7, pc}
 8006794:	fffeffff 	.word	0xfffeffff
 8006798:	fffeff8f 	.word	0xfffeff8f
 800679c:	fffdffff 	.word	0xfffdffff
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	4a24      	ldr	r2, [pc, #144]	@ (8006858 <TIM_OC6_SetConfig+0xa8>)
 80067c6:	401a      	ands	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a20      	ldr	r2, [pc, #128]	@ (800685c <TIM_OC6_SetConfig+0xac>)
 80067dc:	4013      	ands	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006860 <TIM_OC6_SetConfig+0xb0>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	051b      	lsls	r3, r3, #20
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a18      	ldr	r2, [pc, #96]	@ (8006864 <TIM_OC6_SetConfig+0xb4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_OC6_SetConfig+0x70>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <TIM_OC6_SetConfig+0xb8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_OC6_SetConfig+0x70>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a16      	ldr	r2, [pc, #88]	@ (800686c <TIM_OC6_SetConfig+0xbc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_OC6_SetConfig+0x70>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a15      	ldr	r2, [pc, #84]	@ (8006870 <TIM_OC6_SetConfig+0xc0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d109      	bne.n	8006834 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	4a14      	ldr	r2, [pc, #80]	@ (8006874 <TIM_OC6_SetConfig+0xc4>)
 8006824:	4013      	ands	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	46c0      	nop			@ (mov r8, r8)
 8006850:	46bd      	mov	sp, r7
 8006852:	b006      	add	sp, #24
 8006854:	bd80      	pop	{r7, pc}
 8006856:	46c0      	nop			@ (mov r8, r8)
 8006858:	ffefffff 	.word	0xffefffff
 800685c:	feff8fff 	.word	0xfeff8fff
 8006860:	ffdfffff 	.word	0xffdfffff
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40014000 	.word	0x40014000
 800686c:	40014400 	.word	0x40014400
 8006870:	40014800 	.word	0x40014800
 8006874:	fffbffff 	.word	0xfffbffff

08006878 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2317      	movs	r3, #23
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4a41      	ldr	r2, [pc, #260]	@ (800699c <TIM_SlaveTimer_SetConfig+0x124>)
 8006896:	4013      	ands	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4a3e      	ldr	r2, [pc, #248]	@ (80069a0 <TIM_SlaveTimer_SetConfig+0x128>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b70      	cmp	r3, #112	@ 0x70
 80068c4:	d015      	beq.n	80068f2 <TIM_SlaveTimer_SetConfig+0x7a>
 80068c6:	d900      	bls.n	80068ca <TIM_SlaveTimer_SetConfig+0x52>
 80068c8:	e05b      	b.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
 80068ca:	2b60      	cmp	r3, #96	@ 0x60
 80068cc:	d04f      	beq.n	800696e <TIM_SlaveTimer_SetConfig+0xf6>
 80068ce:	d858      	bhi.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
 80068d0:	2b50      	cmp	r3, #80	@ 0x50
 80068d2:	d042      	beq.n	800695a <TIM_SlaveTimer_SetConfig+0xe2>
 80068d4:	d855      	bhi.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
 80068d6:	2b40      	cmp	r3, #64	@ 0x40
 80068d8:	d016      	beq.n	8006908 <TIM_SlaveTimer_SetConfig+0x90>
 80068da:	d852      	bhi.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
 80068dc:	2b30      	cmp	r3, #48	@ 0x30
 80068de:	d055      	beq.n	800698c <TIM_SlaveTimer_SetConfig+0x114>
 80068e0:	d84f      	bhi.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d052      	beq.n	800698c <TIM_SlaveTimer_SetConfig+0x114>
 80068e6:	d84c      	bhi.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d04f      	beq.n	800698c <TIM_SlaveTimer_SetConfig+0x114>
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d04d      	beq.n	800698c <TIM_SlaveTimer_SetConfig+0x114>
 80068f0:	e047      	b.n	8006982 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006902:	f000 f9d3 	bl	8006cac <TIM_ETR_SetConfig>
      break;
 8006906:	e042      	b.n	800698e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b05      	cmp	r3, #5
 800690e:	d101      	bne.n	8006914 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e03f      	b.n	8006994 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2101      	movs	r1, #1
 8006928:	438a      	bics	r2, r1
 800692a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	22f0      	movs	r2, #240	@ 0xf0
 8006938:	4393      	bics	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	4313      	orrs	r3, r2
 8006946:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	621a      	str	r2, [r3, #32]
      break;
 8006958:	e019      	b.n	800698e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006966:	001a      	movs	r2, r3
 8006968:	f000 f878 	bl	8006a5c <TIM_TI1_ConfigInputStage>
      break;
 800696c:	e00f      	b.n	800698e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800697a:	001a      	movs	r2, r3
 800697c:	f000 f8de 	bl	8006b3c <TIM_TI2_ConfigInputStage>
      break;
 8006980:	e005      	b.n	800698e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006982:	2317      	movs	r3, #23
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
      break;
 800698a:	e000      	b.n	800698e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800698c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800698e:	2317      	movs	r3, #23
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	781b      	ldrb	r3, [r3, #0]
}
 8006994:	0018      	movs	r0, r3
 8006996:	46bd      	mov	sp, r7
 8006998:	b006      	add	sp, #24
 800699a:	bd80      	pop	{r7, pc}
 800699c:	ffcfff8f 	.word	0xffcfff8f
 80069a0:	fffefff8 	.word	0xfffefff8

080069a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	2201      	movs	r2, #1
 80069be:	4393      	bics	r3, r2
 80069c0:	001a      	movs	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a20      	ldr	r2, [pc, #128]	@ (8006a50 <TIM_TI1_SetConfig+0xac>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00c      	beq.n	80069ee <TIM_TI1_SetConfig+0x4a>
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	2380      	movs	r3, #128	@ 0x80
 80069d8:	05db      	lsls	r3, r3, #23
 80069da:	429a      	cmp	r2, r3
 80069dc:	d007      	beq.n	80069ee <TIM_TI1_SetConfig+0x4a>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a54 <TIM_TI1_SetConfig+0xb0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d003      	beq.n	80069ee <TIM_TI1_SetConfig+0x4a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a58 <TIM_TI1_SetConfig+0xb4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d101      	bne.n	80069f2 <TIM_TI1_SetConfig+0x4e>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <TIM_TI1_SetConfig+0x50>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2203      	movs	r2, #3
 80069fc:	4393      	bics	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e003      	b.n	8006a12 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	22f0      	movs	r2, #240	@ 0xf0
 8006a16:	4393      	bics	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	22ff      	movs	r2, #255	@ 0xff
 8006a20:	4013      	ands	r3, r2
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	4393      	bics	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	220a      	movs	r2, #10
 8006a34:	4013      	ands	r3, r2
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	46c0      	nop			@ (mov r8, r8)
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b006      	add	sp, #24
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40014000 	.word	0x40014000

08006a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	2201      	movs	r2, #1
 8006a74:	4393      	bics	r3, r2
 8006a76:	001a      	movs	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	22f0      	movs	r2, #240	@ 0xf0
 8006a86:	4393      	bics	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	220a      	movs	r2, #10
 8006a98:	4393      	bics	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	46c0      	nop			@ (mov r8, r8)
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b006      	add	sp, #24
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	4393      	bics	r3, r2
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <TIM_TI2_SetConfig+0x7c>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4a10      	ldr	r2, [pc, #64]	@ (8006b38 <TIM_TI2_SetConfig+0x80>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	0c1b      	lsrs	r3, r3, #16
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	22a0      	movs	r2, #160	@ 0xa0
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	22a0      	movs	r2, #160	@ 0xa0
 8006b16:	4013      	ands	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	46c0      	nop			@ (mov r8, r8)
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b006      	add	sp, #24
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	fffffcff 	.word	0xfffffcff
 8006b38:	ffff0fff 	.word	0xffff0fff

08006b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	2210      	movs	r2, #16
 8006b54:	4393      	bics	r3, r2
 8006b56:	001a      	movs	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4a0d      	ldr	r2, [pc, #52]	@ (8006b9c <TIM_TI2_ConfigInputStage+0x60>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	031b      	lsls	r3, r3, #12
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	22a0      	movs	r2, #160	@ 0xa0
 8006b78:	4393      	bics	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	46c0      	nop			@ (mov r8, r8)
 8006b94:	46bd      	mov	sp, r7
 8006b96:	b006      	add	sp, #24
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	ffff0fff 	.word	0xffff0fff

08006ba0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	4a17      	ldr	r2, [pc, #92]	@ (8006c18 <TIM_TI3_SetConfig+0x78>)
 8006bba:	401a      	ands	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2203      	movs	r2, #3
 8006bca:	4393      	bics	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	22f0      	movs	r2, #240	@ 0xf0
 8006bda:	4393      	bics	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	22ff      	movs	r2, #255	@ 0xff
 8006be4:	4013      	ands	r3, r2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4a0b      	ldr	r2, [pc, #44]	@ (8006c1c <TIM_TI3_SetConfig+0x7c>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	021a      	lsls	r2, r3, #8
 8006bf8:	23a0      	movs	r3, #160	@ 0xa0
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	46c0      	nop			@ (mov r8, r8)
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b006      	add	sp, #24
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	fffffeff 	.word	0xfffffeff
 8006c1c:	fffff5ff 	.word	0xfffff5ff

08006c20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	4a18      	ldr	r2, [pc, #96]	@ (8006c9c <TIM_TI4_SetConfig+0x7c>)
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <TIM_TI4_SetConfig+0x80>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4a12      	ldr	r2, [pc, #72]	@ (8006ca4 <TIM_TI4_SetConfig+0x84>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	031b      	lsls	r3, r3, #12
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca8 <TIM_TI4_SetConfig+0x88>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	031a      	lsls	r2, r3, #12
 8006c7a:	23a0      	movs	r3, #160	@ 0xa0
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	4013      	ands	r3, r2
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b006      	add	sp, #24
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			@ (mov r8, r8)
 8006c9c:	ffffefff 	.word	0xffffefff
 8006ca0:	fffffcff 	.word	0xfffffcff
 8006ca4:	ffff0fff 	.word	0xffff0fff
 8006ca8:	ffff5fff 	.word	0xffff5fff

08006cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4a09      	ldr	r2, [pc, #36]	@ (8006ce8 <TIM_ETR_SetConfig+0x3c>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	609a      	str	r2, [r3, #8]
}
 8006ce0:	46c0      	nop			@ (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b006      	add	sp, #24
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	ffff00ff 	.word	0xffff00ff

08006cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	221f      	movs	r2, #31
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2201      	movs	r2, #1
 8006d00:	409a      	lsls	r2, r3
 8006d02:	0013      	movs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	43d2      	mvns	r2, r2
 8006d0e:	401a      	ands	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	211f      	movs	r1, #31
 8006d1c:	400b      	ands	r3, r1
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4099      	lsls	r1, r3
 8006d22:	000b      	movs	r3, r1
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b006      	add	sp, #24
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	223c      	movs	r2, #60	@ 0x3c
 8006d42:	5c9b      	ldrb	r3, [r3, r2]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e055      	b.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	223c      	movs	r2, #60	@ 0x3c
 8006d50:	2101      	movs	r1, #1
 8006d52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	223d      	movs	r2, #61	@ 0x3d
 8006d58:	2102      	movs	r1, #2
 8006d5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a23      	ldr	r2, [pc, #140]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a22      	ldr	r2, [pc, #136]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2270      	movs	r2, #112	@ 0x70
 8006d8c:	4393      	bics	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a16      	ldr	r2, [pc, #88]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00f      	beq.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2380      	movs	r3, #128	@ 0x80
 8006db2:	05db      	lsls	r3, r3, #23
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d009      	beq.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a12      	ldr	r2, [pc, #72]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a11      	ldr	r2, [pc, #68]	@ (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d10c      	bne.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2280      	movs	r2, #128	@ 0x80
 8006dd0:	4393      	bics	r3, r2
 8006dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	223d      	movs	r2, #61	@ 0x3d
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	223c      	movs	r2, #60	@ 0x3c
 8006df2:	2100      	movs	r1, #0
 8006df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b004      	add	sp, #16
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	ff0fffff 	.word	0xff0fffff
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40014000 	.word	0x40014000

08006e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	223c      	movs	r2, #60	@ 0x3c
 8006e22:	5c9b      	ldrb	r3, [r3, r2]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e06f      	b.n	8006f0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	223c      	movs	r2, #60	@ 0x3c
 8006e30:	2101      	movs	r1, #1
 8006e32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	22ff      	movs	r2, #255	@ 0xff
 8006e38:	4393      	bics	r3, r2
 8006e3a:	001a      	movs	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a33      	ldr	r2, [pc, #204]	@ (8006f14 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006e48:	401a      	ands	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a30      	ldr	r2, [pc, #192]	@ (8006f18 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006e56:	401a      	ands	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a2e      	ldr	r2, [pc, #184]	@ (8006f1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006e64:	401a      	ands	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a2b      	ldr	r2, [pc, #172]	@ (8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e72:	401a      	ands	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a29      	ldr	r2, [pc, #164]	@ (8006f24 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006e80:	401a      	ands	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	@ (8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006e8e:	401a      	ands	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a24      	ldr	r2, [pc, #144]	@ (8006f2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e9c:	401a      	ands	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	041b      	lsls	r3, r3, #16
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a21      	ldr	r2, [pc, #132]	@ (8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006eac:	401a      	ands	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1e      	ldr	r2, [pc, #120]	@ (8006f34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d11c      	bne.n	8006efa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006ec4:	401a      	ands	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	051b      	lsls	r3, r3, #20
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a17      	ldr	r2, [pc, #92]	@ (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006ef0:	401a      	ands	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	223c      	movs	r2, #60	@ 0x3c
 8006f06:	2100      	movs	r1, #0
 8006f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b004      	add	sp, #16
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	fffffcff 	.word	0xfffffcff
 8006f18:	fffffbff 	.word	0xfffffbff
 8006f1c:	fffff7ff 	.word	0xfffff7ff
 8006f20:	ffffefff 	.word	0xffffefff
 8006f24:	ffffdfff 	.word	0xffffdfff
 8006f28:	ffffbfff 	.word	0xffffbfff
 8006f2c:	fff0ffff 	.word	0xfff0ffff
 8006f30:	efffffff 	.word	0xefffffff
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	ff0fffff 	.word	0xff0fffff
 8006f3c:	feffffff 	.word	0xfeffffff
 8006f40:	fdffffff 	.word	0xfdffffff
 8006f44:	dfffffff 	.word	0xdfffffff

08006f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f50:	46c0      	nop			@ (mov r8, r8)
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b002      	add	sp, #8
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f60:	46c0      	nop			@ (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b002      	add	sp, #8
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f70:	46c0      	nop			@ (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b002      	add	sp, #8
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e046      	b.n	8007018 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2288      	movs	r2, #136	@ 0x88
 8006f8e:	589b      	ldr	r3, [r3, r2]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d107      	bne.n	8006fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2284      	movs	r2, #132	@ 0x84
 8006f98:	2100      	movs	r1, #0
 8006f9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f7fa ff4c 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2288      	movs	r2, #136	@ 0x88
 8006fa8:	2124      	movs	r1, #36	@ 0x24
 8006faa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	438a      	bics	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 ff2e 	bl	8007e28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f000 fc6c 	bl	80078ac <UART_SetConfig>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e01c      	b.n	8007018 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	490d      	ldr	r1, [pc, #52]	@ (8007020 <HAL_UART_Init+0xa8>)
 8006fea:	400a      	ands	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	212a      	movs	r1, #42	@ 0x2a
 8006ffa:	438a      	bics	r2, r1
 8006ffc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2101      	movs	r1, #1
 800700a:	430a      	orrs	r2, r1
 800700c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0018      	movs	r0, r3
 8007012:	f000 ffbd 	bl	8007f90 <UART_CheckIdleState>
 8007016:	0003      	movs	r3, r0
}
 8007018:	0018      	movs	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	b002      	add	sp, #8
 800701e:	bd80      	pop	{r7, pc}
 8007020:	ffffb7ff 	.word	0xffffb7ff

08007024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	@ 0x28
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	1dbb      	adds	r3, r7, #6
 8007032:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2288      	movs	r2, #136	@ 0x88
 8007038:	589b      	ldr	r3, [r3, r2]
 800703a:	2b20      	cmp	r3, #32
 800703c:	d000      	beq.n	8007040 <HAL_UART_Transmit+0x1c>
 800703e:	e090      	b.n	8007162 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_UART_Transmit+0x2a>
 8007046:	1dbb      	adds	r3, r7, #6
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e088      	b.n	8007164 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	2380      	movs	r3, #128	@ 0x80
 8007058:	015b      	lsls	r3, r3, #5
 800705a:	429a      	cmp	r2, r3
 800705c:	d109      	bne.n	8007072 <HAL_UART_Transmit+0x4e>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d105      	bne.n	8007072 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2201      	movs	r2, #1
 800706a:	4013      	ands	r3, r2
 800706c:	d001      	beq.n	8007072 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e078      	b.n	8007164 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2290      	movs	r2, #144	@ 0x90
 8007076:	2100      	movs	r1, #0
 8007078:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2288      	movs	r2, #136	@ 0x88
 800707e:	2121      	movs	r1, #33	@ 0x21
 8007080:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007082:	f7fb f8fd 	bl	8002280 <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	1dba      	adds	r2, r7, #6
 800708e:	2154      	movs	r1, #84	@ 0x54
 8007090:	8812      	ldrh	r2, [r2, #0]
 8007092:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	1dba      	adds	r2, r7, #6
 8007098:	2156      	movs	r1, #86	@ 0x56
 800709a:	8812      	ldrh	r2, [r2, #0]
 800709c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	015b      	lsls	r3, r3, #5
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d108      	bne.n	80070bc <HAL_UART_Transmit+0x98>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	e003      	b.n	80070c4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070c4:	e030      	b.n	8007128 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	0013      	movs	r3, r2
 80070d0:	2200      	movs	r2, #0
 80070d2:	2180      	movs	r1, #128	@ 0x80
 80070d4:	f001 f806 	bl	80080e4 <UART_WaitOnFlagUntilTimeout>
 80070d8:	1e03      	subs	r3, r0, #0
 80070da:	d005      	beq.n	80070e8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2288      	movs	r2, #136	@ 0x88
 80070e0:	2120      	movs	r1, #32
 80070e2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e03d      	b.n	8007164 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	001a      	movs	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	05d2      	lsls	r2, r2, #23
 80070fa:	0dd2      	lsrs	r2, r2, #23
 80070fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	3302      	adds	r3, #2
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e007      	b.n	8007116 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	3301      	adds	r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2256      	movs	r2, #86	@ 0x56
 800711a:	5a9b      	ldrh	r3, [r3, r2]
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b299      	uxth	r1, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2256      	movs	r2, #86	@ 0x56
 8007126:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2256      	movs	r2, #86	@ 0x56
 800712c:	5a9b      	ldrh	r3, [r3, r2]
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1c8      	bne.n	80070c6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	0013      	movs	r3, r2
 800713e:	2200      	movs	r2, #0
 8007140:	2140      	movs	r1, #64	@ 0x40
 8007142:	f000 ffcf 	bl	80080e4 <UART_WaitOnFlagUntilTimeout>
 8007146:	1e03      	subs	r3, r0, #0
 8007148:	d005      	beq.n	8007156 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2288      	movs	r2, #136	@ 0x88
 800714e:	2120      	movs	r1, #32
 8007150:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e006      	b.n	8007164 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2288      	movs	r2, #136	@ 0x88
 800715a:	2120      	movs	r1, #32
 800715c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e000      	b.n	8007164 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007162:	2302      	movs	r3, #2
  }
}
 8007164:	0018      	movs	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	b008      	add	sp, #32
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	1dbb      	adds	r3, r7, #6
 8007178:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	228c      	movs	r2, #140	@ 0x8c
 800717e:	589b      	ldr	r3, [r3, r2]
 8007180:	2b20      	cmp	r3, #32
 8007182:	d14a      	bne.n	800721a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_UART_Receive_IT+0x26>
 800718a:	1dbb      	adds	r3, r7, #6
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e042      	b.n	800721c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	2380      	movs	r3, #128	@ 0x80
 800719c:	015b      	lsls	r3, r3, #5
 800719e:	429a      	cmp	r2, r3
 80071a0:	d109      	bne.n	80071b6 <HAL_UART_Receive_IT+0x4a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2201      	movs	r2, #1
 80071ae:	4013      	ands	r3, r2
 80071b0:	d001      	beq.n	80071b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e032      	b.n	800721c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a18      	ldr	r2, [pc, #96]	@ (8007224 <HAL_UART_Receive_IT+0xb8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d020      	beq.n	8007208 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	2380      	movs	r3, #128	@ 0x80
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	4013      	ands	r3, r2
 80071d2:	d019      	beq.n	8007208 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d4:	f3ef 8310 	mrs	r3, PRIMASK
 80071d8:	613b      	str	r3, [r7, #16]
  return(result);
 80071da:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	2301      	movs	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			@ (mov r8, r8)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2180      	movs	r1, #128	@ 0x80
 80071f6:	04c9      	lsls	r1, r1, #19
 80071f8:	430a      	orrs	r2, r1
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f383 8810 	msr	PRIMASK, r3
}
 8007206:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007208:	1dbb      	adds	r3, r7, #6
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0018      	movs	r0, r3
 8007212:	f000 ffd7 	bl	80081c4 <UART_Start_Receive_IT>
 8007216:	0003      	movs	r3, r0
 8007218:	e000      	b.n	800721c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	0018      	movs	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	b008      	add	sp, #32
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40008000 	.word	0x40008000

08007228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007228:	b5b0      	push	{r4, r5, r7, lr}
 800722a:	b0aa      	sub	sp, #168	@ 0xa8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	22a4      	movs	r2, #164	@ 0xa4
 8007238:	18b9      	adds	r1, r7, r2
 800723a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	20a0      	movs	r0, #160	@ 0xa0
 8007244:	1839      	adds	r1, r7, r0
 8007246:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	249c      	movs	r4, #156	@ 0x9c
 8007250:	1939      	adds	r1, r7, r4
 8007252:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007254:	0011      	movs	r1, r2
 8007256:	18bb      	adds	r3, r7, r2
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4aa2      	ldr	r2, [pc, #648]	@ (80074e4 <HAL_UART_IRQHandler+0x2bc>)
 800725c:	4013      	ands	r3, r2
 800725e:	2298      	movs	r2, #152	@ 0x98
 8007260:	18bd      	adds	r5, r7, r2
 8007262:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007264:	18bb      	adds	r3, r7, r2
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11a      	bne.n	80072a2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800726c:	187b      	adds	r3, r7, r1
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2220      	movs	r2, #32
 8007272:	4013      	ands	r3, r2
 8007274:	d015      	beq.n	80072a2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007276:	183b      	adds	r3, r7, r0
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2220      	movs	r2, #32
 800727c:	4013      	ands	r3, r2
 800727e:	d105      	bne.n	800728c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007280:	193b      	adds	r3, r7, r4
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	2380      	movs	r3, #128	@ 0x80
 8007286:	055b      	lsls	r3, r3, #21
 8007288:	4013      	ands	r3, r2
 800728a:	d00a      	beq.n	80072a2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007290:	2b00      	cmp	r3, #0
 8007292:	d100      	bne.n	8007296 <HAL_UART_IRQHandler+0x6e>
 8007294:	e2dc      	b.n	8007850 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	0010      	movs	r0, r2
 800729e:	4798      	blx	r3
      }
      return;
 80072a0:	e2d6      	b.n	8007850 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072a2:	2398      	movs	r3, #152	@ 0x98
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d100      	bne.n	80072ae <HAL_UART_IRQHandler+0x86>
 80072ac:	e122      	b.n	80074f4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072ae:	239c      	movs	r3, #156	@ 0x9c
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a8c      	ldr	r2, [pc, #560]	@ (80074e8 <HAL_UART_IRQHandler+0x2c0>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	d106      	bne.n	80072c8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072ba:	23a0      	movs	r3, #160	@ 0xa0
 80072bc:	18fb      	adds	r3, r7, r3
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a8a      	ldr	r2, [pc, #552]	@ (80074ec <HAL_UART_IRQHandler+0x2c4>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	d100      	bne.n	80072c8 <HAL_UART_IRQHandler+0xa0>
 80072c6:	e115      	b.n	80074f4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072c8:	23a4      	movs	r3, #164	@ 0xa4
 80072ca:	18fb      	adds	r3, r7, r3
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2201      	movs	r2, #1
 80072d0:	4013      	ands	r3, r2
 80072d2:	d012      	beq.n	80072fa <HAL_UART_IRQHandler+0xd2>
 80072d4:	23a0      	movs	r3, #160	@ 0xa0
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	2380      	movs	r3, #128	@ 0x80
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	4013      	ands	r3, r2
 80072e0:	d00b      	beq.n	80072fa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2201      	movs	r2, #1
 80072e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2290      	movs	r2, #144	@ 0x90
 80072ee:	589b      	ldr	r3, [r3, r2]
 80072f0:	2201      	movs	r2, #1
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2190      	movs	r1, #144	@ 0x90
 80072f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072fa:	23a4      	movs	r3, #164	@ 0xa4
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2202      	movs	r2, #2
 8007302:	4013      	ands	r3, r2
 8007304:	d011      	beq.n	800732a <HAL_UART_IRQHandler+0x102>
 8007306:	239c      	movs	r3, #156	@ 0x9c
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	4013      	ands	r3, r2
 8007310:	d00b      	beq.n	800732a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2202      	movs	r2, #2
 8007318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2290      	movs	r2, #144	@ 0x90
 800731e:	589b      	ldr	r3, [r3, r2]
 8007320:	2204      	movs	r2, #4
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2190      	movs	r1, #144	@ 0x90
 8007328:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800732a:	23a4      	movs	r3, #164	@ 0xa4
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2204      	movs	r2, #4
 8007332:	4013      	ands	r3, r2
 8007334:	d011      	beq.n	800735a <HAL_UART_IRQHandler+0x132>
 8007336:	239c      	movs	r3, #156	@ 0x9c
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	4013      	ands	r3, r2
 8007340:	d00b      	beq.n	800735a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2204      	movs	r2, #4
 8007348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2290      	movs	r2, #144	@ 0x90
 800734e:	589b      	ldr	r3, [r3, r2]
 8007350:	2202      	movs	r2, #2
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2190      	movs	r1, #144	@ 0x90
 8007358:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800735a:	23a4      	movs	r3, #164	@ 0xa4
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2208      	movs	r2, #8
 8007362:	4013      	ands	r3, r2
 8007364:	d017      	beq.n	8007396 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007366:	23a0      	movs	r3, #160	@ 0xa0
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2220      	movs	r2, #32
 800736e:	4013      	ands	r3, r2
 8007370:	d105      	bne.n	800737e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007372:	239c      	movs	r3, #156	@ 0x9c
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a5b      	ldr	r2, [pc, #364]	@ (80074e8 <HAL_UART_IRQHandler+0x2c0>)
 800737a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800737c:	d00b      	beq.n	8007396 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2208      	movs	r2, #8
 8007384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2290      	movs	r2, #144	@ 0x90
 800738a:	589b      	ldr	r3, [r3, r2]
 800738c:	2208      	movs	r2, #8
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2190      	movs	r1, #144	@ 0x90
 8007394:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007396:	23a4      	movs	r3, #164	@ 0xa4
 8007398:	18fb      	adds	r3, r7, r3
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	2380      	movs	r3, #128	@ 0x80
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4013      	ands	r3, r2
 80073a2:	d013      	beq.n	80073cc <HAL_UART_IRQHandler+0x1a4>
 80073a4:	23a0      	movs	r3, #160	@ 0xa0
 80073a6:	18fb      	adds	r3, r7, r3
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	2380      	movs	r3, #128	@ 0x80
 80073ac:	04db      	lsls	r3, r3, #19
 80073ae:	4013      	ands	r3, r2
 80073b0:	d00c      	beq.n	80073cc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2280      	movs	r2, #128	@ 0x80
 80073b8:	0112      	lsls	r2, r2, #4
 80073ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2290      	movs	r2, #144	@ 0x90
 80073c0:	589b      	ldr	r3, [r3, r2]
 80073c2:	2220      	movs	r2, #32
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2190      	movs	r1, #144	@ 0x90
 80073ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2290      	movs	r2, #144	@ 0x90
 80073d0:	589b      	ldr	r3, [r3, r2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d100      	bne.n	80073d8 <HAL_UART_IRQHandler+0x1b0>
 80073d6:	e23d      	b.n	8007854 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073d8:	23a4      	movs	r3, #164	@ 0xa4
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2220      	movs	r2, #32
 80073e0:	4013      	ands	r3, r2
 80073e2:	d015      	beq.n	8007410 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073e4:	23a0      	movs	r3, #160	@ 0xa0
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2220      	movs	r2, #32
 80073ec:	4013      	ands	r3, r2
 80073ee:	d106      	bne.n	80073fe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073f0:	239c      	movs	r3, #156	@ 0x9c
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	2380      	movs	r3, #128	@ 0x80
 80073f8:	055b      	lsls	r3, r3, #21
 80073fa:	4013      	ands	r3, r2
 80073fc:	d008      	beq.n	8007410 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	0010      	movs	r0, r2
 800740e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2290      	movs	r2, #144	@ 0x90
 8007414:	589b      	ldr	r3, [r3, r2]
 8007416:	2194      	movs	r1, #148	@ 0x94
 8007418:	187a      	adds	r2, r7, r1
 800741a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2240      	movs	r2, #64	@ 0x40
 8007424:	4013      	ands	r3, r2
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d004      	beq.n	8007434 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800742a:	187b      	adds	r3, r7, r1
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2228      	movs	r2, #40	@ 0x28
 8007430:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007432:	d04c      	beq.n	80074ce <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	0018      	movs	r0, r3
 8007438:	f000 ffe8 	bl	800840c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2240      	movs	r2, #64	@ 0x40
 8007444:	4013      	ands	r3, r2
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d13c      	bne.n	80074c4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744a:	f3ef 8310 	mrs	r3, PRIMASK
 800744e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8007450:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	2090      	movs	r0, #144	@ 0x90
 8007454:	183a      	adds	r2, r7, r0
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	2301      	movs	r3, #1
 800745a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800745e:	f383 8810 	msr	PRIMASK, r3
}
 8007462:	46c0      	nop			@ (mov r8, r8)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2140      	movs	r1, #64	@ 0x40
 8007470:	438a      	bics	r2, r1
 8007472:	609a      	str	r2, [r3, #8]
 8007474:	183b      	adds	r3, r7, r0
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800747c:	f383 8810 	msr	PRIMASK, r3
}
 8007480:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2280      	movs	r2, #128	@ 0x80
 8007486:	589b      	ldr	r3, [r3, r2]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d016      	beq.n	80074ba <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2280      	movs	r2, #128	@ 0x80
 8007490:	589b      	ldr	r3, [r3, r2]
 8007492:	4a17      	ldr	r2, [pc, #92]	@ (80074f0 <HAL_UART_IRQHandler+0x2c8>)
 8007494:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2280      	movs	r2, #128	@ 0x80
 800749a:	589b      	ldr	r3, [r3, r2]
 800749c:	0018      	movs	r0, r3
 800749e:	f7fc fdd9 	bl	8004054 <HAL_DMA_Abort_IT>
 80074a2:	1e03      	subs	r3, r0, #0
 80074a4:	d01c      	beq.n	80074e0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2280      	movs	r2, #128	@ 0x80
 80074aa:	589b      	ldr	r3, [r3, r2]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	2180      	movs	r1, #128	@ 0x80
 80074b2:	5852      	ldr	r2, [r2, r1]
 80074b4:	0010      	movs	r0, r2
 80074b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b8:	e012      	b.n	80074e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	0018      	movs	r0, r3
 80074be:	f000 f9e1 	bl	8007884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c2:	e00d      	b.n	80074e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	0018      	movs	r0, r3
 80074c8:	f000 f9dc 	bl	8007884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	e008      	b.n	80074e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	0018      	movs	r0, r3
 80074d2:	f000 f9d7 	bl	8007884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2290      	movs	r2, #144	@ 0x90
 80074da:	2100      	movs	r1, #0
 80074dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80074de:	e1b9      	b.n	8007854 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	46c0      	nop			@ (mov r8, r8)
    return;
 80074e2:	e1b7      	b.n	8007854 <HAL_UART_IRQHandler+0x62c>
 80074e4:	0000080f 	.word	0x0000080f
 80074e8:	10000001 	.word	0x10000001
 80074ec:	04000120 	.word	0x04000120
 80074f0:	080084d9 	.word	0x080084d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d000      	beq.n	80074fe <HAL_UART_IRQHandler+0x2d6>
 80074fc:	e13e      	b.n	800777c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074fe:	23a4      	movs	r3, #164	@ 0xa4
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2210      	movs	r2, #16
 8007506:	4013      	ands	r3, r2
 8007508:	d100      	bne.n	800750c <HAL_UART_IRQHandler+0x2e4>
 800750a:	e137      	b.n	800777c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800750c:	23a0      	movs	r3, #160	@ 0xa0
 800750e:	18fb      	adds	r3, r7, r3
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2210      	movs	r2, #16
 8007514:	4013      	ands	r3, r2
 8007516:	d100      	bne.n	800751a <HAL_UART_IRQHandler+0x2f2>
 8007518:	e130      	b.n	800777c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2240      	movs	r2, #64	@ 0x40
 800752a:	4013      	ands	r3, r2
 800752c:	2b40      	cmp	r3, #64	@ 0x40
 800752e:	d000      	beq.n	8007532 <HAL_UART_IRQHandler+0x30a>
 8007530:	e0a4      	b.n	800767c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2280      	movs	r2, #128	@ 0x80
 8007536:	589b      	ldr	r3, [r3, r2]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	217e      	movs	r1, #126	@ 0x7e
 800753e:	187b      	adds	r3, r7, r1
 8007540:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007542:	187b      	adds	r3, r7, r1
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d100      	bne.n	800754c <HAL_UART_IRQHandler+0x324>
 800754a:	e185      	b.n	8007858 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	225c      	movs	r2, #92	@ 0x5c
 8007550:	5a9b      	ldrh	r3, [r3, r2]
 8007552:	187a      	adds	r2, r7, r1
 8007554:	8812      	ldrh	r2, [r2, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d300      	bcc.n	800755c <HAL_UART_IRQHandler+0x334>
 800755a:	e17d      	b.n	8007858 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	187a      	adds	r2, r7, r1
 8007560:	215e      	movs	r1, #94	@ 0x5e
 8007562:	8812      	ldrh	r2, [r2, #0]
 8007564:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2280      	movs	r2, #128	@ 0x80
 800756a:	589b      	ldr	r3, [r3, r2]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2220      	movs	r2, #32
 8007572:	4013      	ands	r3, r2
 8007574:	d170      	bne.n	8007658 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007576:	f3ef 8310 	mrs	r3, PRIMASK
 800757a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800757e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007580:	2301      	movs	r3, #1
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007586:	f383 8810 	msr	PRIMASK, r3
}
 800758a:	46c0      	nop			@ (mov r8, r8)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	49b4      	ldr	r1, [pc, #720]	@ (8007868 <HAL_UART_IRQHandler+0x640>)
 8007598:	400a      	ands	r2, r1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800759e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	f383 8810 	msr	PRIMASK, r3
}
 80075a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80075b2:	2301      	movs	r3, #1
 80075b4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b8:	f383 8810 	msr	PRIMASK, r3
}
 80075bc:	46c0      	nop			@ (mov r8, r8)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2101      	movs	r1, #1
 80075ca:	438a      	bics	r2, r1
 80075cc:	609a      	str	r2, [r3, #8]
 80075ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075d0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075da:	f3ef 8310 	mrs	r3, PRIMASK
 80075de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80075e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80075e4:	2301      	movs	r3, #1
 80075e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ea:	f383 8810 	msr	PRIMASK, r3
}
 80075ee:	46c0      	nop			@ (mov r8, r8)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2140      	movs	r1, #64	@ 0x40
 80075fc:	438a      	bics	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007602:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007606:	f383 8810 	msr	PRIMASK, r3
}
 800760a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	228c      	movs	r2, #140	@ 0x8c
 8007610:	2120      	movs	r1, #32
 8007612:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800761a:	f3ef 8310 	mrs	r3, PRIMASK
 800761e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8007620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007622:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007624:	2301      	movs	r3, #1
 8007626:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800762a:	f383 8810 	msr	PRIMASK, r3
}
 800762e:	46c0      	nop			@ (mov r8, r8)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2110      	movs	r1, #16
 800763c:	438a      	bics	r2, r1
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007642:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007646:	f383 8810 	msr	PRIMASK, r3
}
 800764a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2280      	movs	r2, #128	@ 0x80
 8007650:	589b      	ldr	r3, [r3, r2]
 8007652:	0018      	movs	r0, r3
 8007654:	f7fc fc9c 	bl	8003f90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	225c      	movs	r2, #92	@ 0x5c
 8007662:	5a9a      	ldrh	r2, [r3, r2]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	215e      	movs	r1, #94	@ 0x5e
 8007668:	5a5b      	ldrh	r3, [r3, r1]
 800766a:	b29b      	uxth	r3, r3
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	b29a      	uxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	0011      	movs	r1, r2
 8007674:	0018      	movs	r0, r3
 8007676:	f000 f90d 	bl	8007894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800767a:	e0ed      	b.n	8007858 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	225c      	movs	r2, #92	@ 0x5c
 8007680:	5a99      	ldrh	r1, [r3, r2]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	225e      	movs	r2, #94	@ 0x5e
 8007686:	5a9b      	ldrh	r3, [r3, r2]
 8007688:	b29a      	uxth	r2, r3
 800768a:	208e      	movs	r0, #142	@ 0x8e
 800768c:	183b      	adds	r3, r7, r0
 800768e:	1a8a      	subs	r2, r1, r2
 8007690:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	225e      	movs	r2, #94	@ 0x5e
 8007696:	5a9b      	ldrh	r3, [r3, r2]
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d100      	bne.n	80076a0 <HAL_UART_IRQHandler+0x478>
 800769e:	e0dd      	b.n	800785c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80076a0:	183b      	adds	r3, r7, r0
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d100      	bne.n	80076aa <HAL_UART_IRQHandler+0x482>
 80076a8:	e0d8      	b.n	800785c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076aa:	f3ef 8310 	mrs	r3, PRIMASK
 80076ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80076b0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b2:	2488      	movs	r4, #136	@ 0x88
 80076b4:	193a      	adds	r2, r7, r4
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	2301      	movs	r3, #1
 80076ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f383 8810 	msr	PRIMASK, r3
}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4967      	ldr	r1, [pc, #412]	@ (800786c <HAL_UART_IRQHandler+0x644>)
 80076d0:	400a      	ands	r2, r1
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	193b      	adds	r3, r7, r4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f383 8810 	msr	PRIMASK, r3
}
 80076e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e2:	f3ef 8310 	mrs	r3, PRIMASK
 80076e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80076e8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ea:	2484      	movs	r4, #132	@ 0x84
 80076ec:	193a      	adds	r2, r7, r4
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	2301      	movs	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f383 8810 	msr	PRIMASK, r3
}
 80076fa:	46c0      	nop			@ (mov r8, r8)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	495a      	ldr	r1, [pc, #360]	@ (8007870 <HAL_UART_IRQHandler+0x648>)
 8007708:	400a      	ands	r2, r1
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	193b      	adds	r3, r7, r4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	228c      	movs	r2, #140	@ 0x8c
 800771e:	2120      	movs	r1, #32
 8007720:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800772e:	f3ef 8310 	mrs	r3, PRIMASK
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	2480      	movs	r4, #128	@ 0x80
 8007738:	193a      	adds	r2, r7, r4
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	2301      	movs	r3, #1
 800773e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	f383 8810 	msr	PRIMASK, r3
}
 8007746:	46c0      	nop			@ (mov r8, r8)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2110      	movs	r1, #16
 8007754:	438a      	bics	r2, r1
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	193b      	adds	r3, r7, r4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	f383 8810 	msr	PRIMASK, r3
}
 8007764:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800776c:	183b      	adds	r3, r7, r0
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	0011      	movs	r1, r2
 8007774:	0018      	movs	r0, r3
 8007776:	f000 f88d 	bl	8007894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800777a:	e06f      	b.n	800785c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800777c:	23a4      	movs	r3, #164	@ 0xa4
 800777e:	18fb      	adds	r3, r7, r3
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	2380      	movs	r3, #128	@ 0x80
 8007784:	035b      	lsls	r3, r3, #13
 8007786:	4013      	ands	r3, r2
 8007788:	d010      	beq.n	80077ac <HAL_UART_IRQHandler+0x584>
 800778a:	239c      	movs	r3, #156	@ 0x9c
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	2380      	movs	r3, #128	@ 0x80
 8007792:	03db      	lsls	r3, r3, #15
 8007794:	4013      	ands	r3, r2
 8007796:	d009      	beq.n	80077ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2280      	movs	r2, #128	@ 0x80
 800779e:	0352      	lsls	r2, r2, #13
 80077a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0018      	movs	r0, r3
 80077a6:	f001 fbeb 	bl	8008f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077aa:	e05a      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80077ac:	23a4      	movs	r3, #164	@ 0xa4
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2280      	movs	r2, #128	@ 0x80
 80077b4:	4013      	ands	r3, r2
 80077b6:	d016      	beq.n	80077e6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077b8:	23a0      	movs	r3, #160	@ 0xa0
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2280      	movs	r2, #128	@ 0x80
 80077c0:	4013      	ands	r3, r2
 80077c2:	d106      	bne.n	80077d2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077c4:	239c      	movs	r3, #156	@ 0x9c
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	2380      	movs	r3, #128	@ 0x80
 80077cc:	041b      	lsls	r3, r3, #16
 80077ce:	4013      	ands	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d042      	beq.n	8007860 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	0010      	movs	r0, r2
 80077e2:	4798      	blx	r3
    }
    return;
 80077e4:	e03c      	b.n	8007860 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077e6:	23a4      	movs	r3, #164	@ 0xa4
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2240      	movs	r2, #64	@ 0x40
 80077ee:	4013      	ands	r3, r2
 80077f0:	d00a      	beq.n	8007808 <HAL_UART_IRQHandler+0x5e0>
 80077f2:	23a0      	movs	r3, #160	@ 0xa0
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2240      	movs	r2, #64	@ 0x40
 80077fa:	4013      	ands	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	0018      	movs	r0, r3
 8007802:	f000 fe80 	bl	8008506 <UART_EndTransmit_IT>
    return;
 8007806:	e02c      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007808:	23a4      	movs	r3, #164	@ 0xa4
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	2380      	movs	r3, #128	@ 0x80
 8007810:	041b      	lsls	r3, r3, #16
 8007812:	4013      	ands	r3, r2
 8007814:	d00b      	beq.n	800782e <HAL_UART_IRQHandler+0x606>
 8007816:	23a0      	movs	r3, #160	@ 0xa0
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	2380      	movs	r3, #128	@ 0x80
 800781e:	05db      	lsls	r3, r3, #23
 8007820:	4013      	ands	r3, r2
 8007822:	d004      	beq.n	800782e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0018      	movs	r0, r3
 8007828:	f001 fbba 	bl	8008fa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800782c:	e019      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800782e:	23a4      	movs	r3, #164	@ 0xa4
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	2380      	movs	r3, #128	@ 0x80
 8007836:	045b      	lsls	r3, r3, #17
 8007838:	4013      	ands	r3, r2
 800783a:	d012      	beq.n	8007862 <HAL_UART_IRQHandler+0x63a>
 800783c:	23a0      	movs	r3, #160	@ 0xa0
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	da0d      	bge.n	8007862 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	0018      	movs	r0, r3
 800784a:	f001 fba1 	bl	8008f90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800784e:	e008      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
      return;
 8007850:	46c0      	nop			@ (mov r8, r8)
 8007852:	e006      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
    return;
 8007854:	46c0      	nop			@ (mov r8, r8)
 8007856:	e004      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
      return;
 8007858:	46c0      	nop			@ (mov r8, r8)
 800785a:	e002      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
      return;
 800785c:	46c0      	nop			@ (mov r8, r8)
 800785e:	e000      	b.n	8007862 <HAL_UART_IRQHandler+0x63a>
    return;
 8007860:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007862:	46bd      	mov	sp, r7
 8007864:	b02a      	add	sp, #168	@ 0xa8
 8007866:	bdb0      	pop	{r4, r5, r7, pc}
 8007868:	fffffeff 	.word	0xfffffeff
 800786c:	fffffedf 	.word	0xfffffedf
 8007870:	effffffe 	.word	0xeffffffe

08007874 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800787c:	46c0      	nop			@ (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800788c:	46c0      	nop			@ (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	b002      	add	sp, #8
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	000a      	movs	r2, r1
 800789e:	1cbb      	adds	r3, r7, #2
 80078a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b002      	add	sp, #8
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078ac:	b5b0      	push	{r4, r5, r7, lr}
 80078ae:	b090      	sub	sp, #64	@ 0x40
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078b4:	231a      	movs	r3, #26
 80078b6:	2220      	movs	r2, #32
 80078b8:	189b      	adds	r3, r3, r2
 80078ba:	19db      	adds	r3, r3, r7
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	431a      	orrs	r2, r3
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4aaf      	ldr	r2, [pc, #700]	@ (8007b9c <UART_SetConfig+0x2f0>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	0019      	movs	r1, r3
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ea:	430b      	orrs	r3, r1
 80078ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	4aaa      	ldr	r2, [pc, #680]	@ (8007ba0 <UART_SetConfig+0x2f4>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	0018      	movs	r0, r3
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	68d9      	ldr	r1, [r3, #12]
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	0003      	movs	r3, r0
 8007904:	430b      	orrs	r3, r1
 8007906:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4aa4      	ldr	r2, [pc, #656]	@ (8007ba4 <UART_SetConfig+0x2f8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800791e:	4313      	orrs	r3, r2
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	4a9f      	ldr	r2, [pc, #636]	@ (8007ba8 <UART_SetConfig+0x2fc>)
 800792a:	4013      	ands	r3, r2
 800792c:	0019      	movs	r1, r3
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007934:	430b      	orrs	r3, r1
 8007936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	220f      	movs	r2, #15
 8007940:	4393      	bics	r3, r2
 8007942:	0018      	movs	r0, r3
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	0003      	movs	r3, r0
 800794e:	430b      	orrs	r3, r1
 8007950:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a95      	ldr	r2, [pc, #596]	@ (8007bac <UART_SetConfig+0x300>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d131      	bne.n	80079c0 <UART_SetConfig+0x114>
 800795c:	4b94      	ldr	r3, [pc, #592]	@ (8007bb0 <UART_SetConfig+0x304>)
 800795e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007960:	2203      	movs	r2, #3
 8007962:	4013      	ands	r3, r2
 8007964:	2b03      	cmp	r3, #3
 8007966:	d01d      	beq.n	80079a4 <UART_SetConfig+0xf8>
 8007968:	d823      	bhi.n	80079b2 <UART_SetConfig+0x106>
 800796a:	2b02      	cmp	r3, #2
 800796c:	d00c      	beq.n	8007988 <UART_SetConfig+0xdc>
 800796e:	d820      	bhi.n	80079b2 <UART_SetConfig+0x106>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <UART_SetConfig+0xce>
 8007974:	2b01      	cmp	r3, #1
 8007976:	d00e      	beq.n	8007996 <UART_SetConfig+0xea>
 8007978:	e01b      	b.n	80079b2 <UART_SetConfig+0x106>
 800797a:	231b      	movs	r3, #27
 800797c:	2220      	movs	r2, #32
 800797e:	189b      	adds	r3, r3, r2
 8007980:	19db      	adds	r3, r3, r7
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	e0b4      	b.n	8007af2 <UART_SetConfig+0x246>
 8007988:	231b      	movs	r3, #27
 800798a:	2220      	movs	r2, #32
 800798c:	189b      	adds	r3, r3, r2
 800798e:	19db      	adds	r3, r3, r7
 8007990:	2202      	movs	r2, #2
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	e0ad      	b.n	8007af2 <UART_SetConfig+0x246>
 8007996:	231b      	movs	r3, #27
 8007998:	2220      	movs	r2, #32
 800799a:	189b      	adds	r3, r3, r2
 800799c:	19db      	adds	r3, r3, r7
 800799e:	2204      	movs	r2, #4
 80079a0:	701a      	strb	r2, [r3, #0]
 80079a2:	e0a6      	b.n	8007af2 <UART_SetConfig+0x246>
 80079a4:	231b      	movs	r3, #27
 80079a6:	2220      	movs	r2, #32
 80079a8:	189b      	adds	r3, r3, r2
 80079aa:	19db      	adds	r3, r3, r7
 80079ac:	2208      	movs	r2, #8
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e09f      	b.n	8007af2 <UART_SetConfig+0x246>
 80079b2:	231b      	movs	r3, #27
 80079b4:	2220      	movs	r2, #32
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	19db      	adds	r3, r3, r7
 80079ba:	2210      	movs	r2, #16
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e098      	b.n	8007af2 <UART_SetConfig+0x246>
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a7b      	ldr	r2, [pc, #492]	@ (8007bb4 <UART_SetConfig+0x308>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d131      	bne.n	8007a2e <UART_SetConfig+0x182>
 80079ca:	4b79      	ldr	r3, [pc, #484]	@ (8007bb0 <UART_SetConfig+0x304>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ce:	220c      	movs	r2, #12
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b0c      	cmp	r3, #12
 80079d4:	d01d      	beq.n	8007a12 <UART_SetConfig+0x166>
 80079d6:	d823      	bhi.n	8007a20 <UART_SetConfig+0x174>
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d00c      	beq.n	80079f6 <UART_SetConfig+0x14a>
 80079dc:	d820      	bhi.n	8007a20 <UART_SetConfig+0x174>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <UART_SetConfig+0x13c>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00e      	beq.n	8007a04 <UART_SetConfig+0x158>
 80079e6:	e01b      	b.n	8007a20 <UART_SetConfig+0x174>
 80079e8:	231b      	movs	r3, #27
 80079ea:	2220      	movs	r2, #32
 80079ec:	189b      	adds	r3, r3, r2
 80079ee:	19db      	adds	r3, r3, r7
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e07d      	b.n	8007af2 <UART_SetConfig+0x246>
 80079f6:	231b      	movs	r3, #27
 80079f8:	2220      	movs	r2, #32
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	19db      	adds	r3, r3, r7
 80079fe:	2202      	movs	r2, #2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e076      	b.n	8007af2 <UART_SetConfig+0x246>
 8007a04:	231b      	movs	r3, #27
 8007a06:	2220      	movs	r2, #32
 8007a08:	189b      	adds	r3, r3, r2
 8007a0a:	19db      	adds	r3, r3, r7
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e06f      	b.n	8007af2 <UART_SetConfig+0x246>
 8007a12:	231b      	movs	r3, #27
 8007a14:	2220      	movs	r2, #32
 8007a16:	189b      	adds	r3, r3, r2
 8007a18:	19db      	adds	r3, r3, r7
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e068      	b.n	8007af2 <UART_SetConfig+0x246>
 8007a20:	231b      	movs	r3, #27
 8007a22:	2220      	movs	r2, #32
 8007a24:	189b      	adds	r3, r3, r2
 8007a26:	19db      	adds	r3, r3, r7
 8007a28:	2210      	movs	r2, #16
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	e061      	b.n	8007af2 <UART_SetConfig+0x246>
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a61      	ldr	r2, [pc, #388]	@ (8007bb8 <UART_SetConfig+0x30c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d106      	bne.n	8007a46 <UART_SetConfig+0x19a>
 8007a38:	231b      	movs	r3, #27
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	189b      	adds	r3, r3, r2
 8007a3e:	19db      	adds	r3, r3, r7
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e055      	b.n	8007af2 <UART_SetConfig+0x246>
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8007bbc <UART_SetConfig+0x310>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d106      	bne.n	8007a5e <UART_SetConfig+0x1b2>
 8007a50:	231b      	movs	r3, #27
 8007a52:	2220      	movs	r2, #32
 8007a54:	189b      	adds	r3, r3, r2
 8007a56:	19db      	adds	r3, r3, r7
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e049      	b.n	8007af2 <UART_SetConfig+0x246>
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a50      	ldr	r2, [pc, #320]	@ (8007ba4 <UART_SetConfig+0x2f8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d13e      	bne.n	8007ae6 <UART_SetConfig+0x23a>
 8007a68:	4b51      	ldr	r3, [pc, #324]	@ (8007bb0 <UART_SetConfig+0x304>)
 8007a6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a6c:	23c0      	movs	r3, #192	@ 0xc0
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	4013      	ands	r3, r2
 8007a72:	22c0      	movs	r2, #192	@ 0xc0
 8007a74:	0112      	lsls	r2, r2, #4
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d027      	beq.n	8007aca <UART_SetConfig+0x21e>
 8007a7a:	22c0      	movs	r2, #192	@ 0xc0
 8007a7c:	0112      	lsls	r2, r2, #4
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d82a      	bhi.n	8007ad8 <UART_SetConfig+0x22c>
 8007a82:	2280      	movs	r2, #128	@ 0x80
 8007a84:	0112      	lsls	r2, r2, #4
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d011      	beq.n	8007aae <UART_SetConfig+0x202>
 8007a8a:	2280      	movs	r2, #128	@ 0x80
 8007a8c:	0112      	lsls	r2, r2, #4
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d822      	bhi.n	8007ad8 <UART_SetConfig+0x22c>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <UART_SetConfig+0x1f4>
 8007a96:	2280      	movs	r2, #128	@ 0x80
 8007a98:	00d2      	lsls	r2, r2, #3
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00e      	beq.n	8007abc <UART_SetConfig+0x210>
 8007a9e:	e01b      	b.n	8007ad8 <UART_SetConfig+0x22c>
 8007aa0:	231b      	movs	r3, #27
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	189b      	adds	r3, r3, r2
 8007aa6:	19db      	adds	r3, r3, r7
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e021      	b.n	8007af2 <UART_SetConfig+0x246>
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e01a      	b.n	8007af2 <UART_SetConfig+0x246>
 8007abc:	231b      	movs	r3, #27
 8007abe:	2220      	movs	r2, #32
 8007ac0:	189b      	adds	r3, r3, r2
 8007ac2:	19db      	adds	r3, r3, r7
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e013      	b.n	8007af2 <UART_SetConfig+0x246>
 8007aca:	231b      	movs	r3, #27
 8007acc:	2220      	movs	r2, #32
 8007ace:	189b      	adds	r3, r3, r2
 8007ad0:	19db      	adds	r3, r3, r7
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e00c      	b.n	8007af2 <UART_SetConfig+0x246>
 8007ad8:	231b      	movs	r3, #27
 8007ada:	2220      	movs	r2, #32
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	19db      	adds	r3, r3, r7
 8007ae0:	2210      	movs	r2, #16
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e005      	b.n	8007af2 <UART_SetConfig+0x246>
 8007ae6:	231b      	movs	r3, #27
 8007ae8:	2220      	movs	r2, #32
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	19db      	adds	r3, r3, r7
 8007aee:	2210      	movs	r2, #16
 8007af0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a2b      	ldr	r2, [pc, #172]	@ (8007ba4 <UART_SetConfig+0x2f8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d000      	beq.n	8007afe <UART_SetConfig+0x252>
 8007afc:	e0a9      	b.n	8007c52 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007afe:	231b      	movs	r3, #27
 8007b00:	2220      	movs	r2, #32
 8007b02:	189b      	adds	r3, r3, r2
 8007b04:	19db      	adds	r3, r3, r7
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d015      	beq.n	8007b38 <UART_SetConfig+0x28c>
 8007b0c:	dc18      	bgt.n	8007b40 <UART_SetConfig+0x294>
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d00d      	beq.n	8007b2e <UART_SetConfig+0x282>
 8007b12:	dc15      	bgt.n	8007b40 <UART_SetConfig+0x294>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <UART_SetConfig+0x272>
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d005      	beq.n	8007b28 <UART_SetConfig+0x27c>
 8007b1c:	e010      	b.n	8007b40 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b1e:	f7fd faf9 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8007b22:	0003      	movs	r3, r0
 8007b24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b26:	e014      	b.n	8007b52 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b28:	4b25      	ldr	r3, [pc, #148]	@ (8007bc0 <UART_SetConfig+0x314>)
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b2c:	e011      	b.n	8007b52 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2e:	f7fd fa65 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8007b32:	0003      	movs	r3, r0
 8007b34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b36:	e00c      	b.n	8007b52 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b38:	2380      	movs	r3, #128	@ 0x80
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b3e:	e008      	b.n	8007b52 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007b44:	231a      	movs	r3, #26
 8007b46:	2220      	movs	r2, #32
 8007b48:	189b      	adds	r3, r3, r2
 8007b4a:	19db      	adds	r3, r3, r7
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	701a      	strb	r2, [r3, #0]
        break;
 8007b50:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d100      	bne.n	8007b5a <UART_SetConfig+0x2ae>
 8007b58:	e14b      	b.n	8007df2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b5e:	4b19      	ldr	r3, [pc, #100]	@ (8007bc4 <UART_SetConfig+0x318>)
 8007b60:	0052      	lsls	r2, r2, #1
 8007b62:	5ad3      	ldrh	r3, [r2, r3]
 8007b64:	0019      	movs	r1, r3
 8007b66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007b68:	f7f8 fade 	bl	8000128 <__udivsi3>
 8007b6c:	0003      	movs	r3, r0
 8007b6e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	0013      	movs	r3, r2
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	189b      	adds	r3, r3, r2
 8007b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d305      	bcc.n	8007b8c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d91d      	bls.n	8007bc8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007b8c:	231a      	movs	r3, #26
 8007b8e:	2220      	movs	r2, #32
 8007b90:	189b      	adds	r3, r3, r2
 8007b92:	19db      	adds	r3, r3, r7
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e12b      	b.n	8007df2 <UART_SetConfig+0x546>
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	cfff69f3 	.word	0xcfff69f3
 8007ba0:	ffffcfff 	.word	0xffffcfff
 8007ba4:	40008000 	.word	0x40008000
 8007ba8:	11fff4ff 	.word	0x11fff4ff
 8007bac:	40013800 	.word	0x40013800
 8007bb0:	40021000 	.word	0x40021000
 8007bb4:	40004400 	.word	0x40004400
 8007bb8:	40004800 	.word	0x40004800
 8007bbc:	40004c00 	.word	0x40004c00
 8007bc0:	00f42400 	.word	0x00f42400
 8007bc4:	08009e88 	.word	0x08009e88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bd4:	4b92      	ldr	r3, [pc, #584]	@ (8007e20 <UART_SetConfig+0x574>)
 8007bd6:	0052      	lsls	r2, r2, #1
 8007bd8:	5ad3      	ldrh	r3, [r2, r3]
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	69b8      	ldr	r0, [r7, #24]
 8007be6:	69f9      	ldr	r1, [r7, #28]
 8007be8:	f7f8 fc14 	bl	8000414 <__aeabi_uldivmod>
 8007bec:	0002      	movs	r2, r0
 8007bee:	000b      	movs	r3, r1
 8007bf0:	0e11      	lsrs	r1, r2, #24
 8007bf2:	021d      	lsls	r5, r3, #8
 8007bf4:	430d      	orrs	r5, r1
 8007bf6:	0214      	lsls	r4, r2, #8
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	085b      	lsrs	r3, r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	68f9      	ldr	r1, [r7, #12]
 8007c08:	1900      	adds	r0, r0, r4
 8007c0a:	4169      	adcs	r1, r5
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	603b      	str	r3, [r7, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f7f8 fbfb 	bl	8000414 <__aeabi_uldivmod>
 8007c1e:	0002      	movs	r2, r0
 8007c20:	000b      	movs	r3, r1
 8007c22:	0013      	movs	r3, r2
 8007c24:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c28:	23c0      	movs	r3, #192	@ 0xc0
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d309      	bcc.n	8007c44 <UART_SetConfig+0x398>
 8007c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c32:	2380      	movs	r3, #128	@ 0x80
 8007c34:	035b      	lsls	r3, r3, #13
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d204      	bcs.n	8007c44 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	e0d6      	b.n	8007df2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007c44:	231a      	movs	r3, #26
 8007c46:	2220      	movs	r2, #32
 8007c48:	189b      	adds	r3, r3, r2
 8007c4a:	19db      	adds	r3, r3, r7
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e0cf      	b.n	8007df2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	69da      	ldr	r2, [r3, #28]
 8007c56:	2380      	movs	r3, #128	@ 0x80
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d000      	beq.n	8007c60 <UART_SetConfig+0x3b4>
 8007c5e:	e070      	b.n	8007d42 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007c60:	231b      	movs	r3, #27
 8007c62:	2220      	movs	r2, #32
 8007c64:	189b      	adds	r3, r3, r2
 8007c66:	19db      	adds	r3, r3, r7
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b08      	cmp	r3, #8
 8007c6c:	d015      	beq.n	8007c9a <UART_SetConfig+0x3ee>
 8007c6e:	dc18      	bgt.n	8007ca2 <UART_SetConfig+0x3f6>
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d00d      	beq.n	8007c90 <UART_SetConfig+0x3e4>
 8007c74:	dc15      	bgt.n	8007ca2 <UART_SetConfig+0x3f6>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <UART_SetConfig+0x3d4>
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d005      	beq.n	8007c8a <UART_SetConfig+0x3de>
 8007c7e:	e010      	b.n	8007ca2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c80:	f7fd fa48 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8007c84:	0003      	movs	r3, r0
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c88:	e014      	b.n	8007cb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c8a:	4b66      	ldr	r3, [pc, #408]	@ (8007e24 <UART_SetConfig+0x578>)
 8007c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c8e:	e011      	b.n	8007cb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c90:	f7fd f9b4 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8007c94:	0003      	movs	r3, r0
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c98:	e00c      	b.n	8007cb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ca0:	e008      	b.n	8007cb4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007ca6:	231a      	movs	r3, #26
 8007ca8:	2220      	movs	r2, #32
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	19db      	adds	r3, r3, r7
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
        break;
 8007cb2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d100      	bne.n	8007cbc <UART_SetConfig+0x410>
 8007cba:	e09a      	b.n	8007df2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc0:	4b57      	ldr	r3, [pc, #348]	@ (8007e20 <UART_SetConfig+0x574>)
 8007cc2:	0052      	lsls	r2, r2, #1
 8007cc4:	5ad3      	ldrh	r3, [r2, r3]
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007cca:	f7f8 fa2d 	bl	8000128 <__udivsi3>
 8007cce:	0003      	movs	r3, r0
 8007cd0:	005a      	lsls	r2, r3, #1
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	18d2      	adds	r2, r2, r3
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	0019      	movs	r1, r3
 8007ce0:	0010      	movs	r0, r2
 8007ce2:	f7f8 fa21 	bl	8000128 <__udivsi3>
 8007ce6:	0003      	movs	r3, r0
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	2b0f      	cmp	r3, #15
 8007cee:	d921      	bls.n	8007d34 <UART_SetConfig+0x488>
 8007cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf2:	2380      	movs	r3, #128	@ 0x80
 8007cf4:	025b      	lsls	r3, r3, #9
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d21c      	bcs.n	8007d34 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	200e      	movs	r0, #14
 8007d00:	2420      	movs	r4, #32
 8007d02:	1903      	adds	r3, r0, r4
 8007d04:	19db      	adds	r3, r3, r7
 8007d06:	210f      	movs	r1, #15
 8007d08:	438a      	bics	r2, r1
 8007d0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2207      	movs	r2, #7
 8007d14:	4013      	ands	r3, r2
 8007d16:	b299      	uxth	r1, r3
 8007d18:	1903      	adds	r3, r0, r4
 8007d1a:	19db      	adds	r3, r3, r7
 8007d1c:	1902      	adds	r2, r0, r4
 8007d1e:	19d2      	adds	r2, r2, r7
 8007d20:	8812      	ldrh	r2, [r2, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	1902      	adds	r2, r0, r4
 8007d2c:	19d2      	adds	r2, r2, r7
 8007d2e:	8812      	ldrh	r2, [r2, #0]
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	e05e      	b.n	8007df2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007d34:	231a      	movs	r3, #26
 8007d36:	2220      	movs	r2, #32
 8007d38:	189b      	adds	r3, r3, r2
 8007d3a:	19db      	adds	r3, r3, r7
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	e057      	b.n	8007df2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d42:	231b      	movs	r3, #27
 8007d44:	2220      	movs	r2, #32
 8007d46:	189b      	adds	r3, r3, r2
 8007d48:	19db      	adds	r3, r3, r7
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d015      	beq.n	8007d7c <UART_SetConfig+0x4d0>
 8007d50:	dc18      	bgt.n	8007d84 <UART_SetConfig+0x4d8>
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d00d      	beq.n	8007d72 <UART_SetConfig+0x4c6>
 8007d56:	dc15      	bgt.n	8007d84 <UART_SetConfig+0x4d8>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <UART_SetConfig+0x4b6>
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d005      	beq.n	8007d6c <UART_SetConfig+0x4c0>
 8007d60:	e010      	b.n	8007d84 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d62:	f7fd f9d7 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8007d66:	0003      	movs	r3, r0
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d6a:	e014      	b.n	8007d96 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e24 <UART_SetConfig+0x578>)
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d70:	e011      	b.n	8007d96 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d72:	f7fd f943 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8007d76:	0003      	movs	r3, r0
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d7a:	e00c      	b.n	8007d96 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d7c:	2380      	movs	r3, #128	@ 0x80
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d82:	e008      	b.n	8007d96 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007d88:	231a      	movs	r3, #26
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	189b      	adds	r3, r3, r2
 8007d8e:	19db      	adds	r3, r3, r7
 8007d90:	2201      	movs	r2, #1
 8007d92:	701a      	strb	r2, [r3, #0]
        break;
 8007d94:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d02a      	beq.n	8007df2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007da0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <UART_SetConfig+0x574>)
 8007da2:	0052      	lsls	r2, r2, #1
 8007da4:	5ad3      	ldrh	r3, [r2, r3]
 8007da6:	0019      	movs	r1, r3
 8007da8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007daa:	f7f8 f9bd 	bl	8000128 <__udivsi3>
 8007dae:	0003      	movs	r3, r0
 8007db0:	001a      	movs	r2, r3
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	18d2      	adds	r2, r2, r3
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	0019      	movs	r1, r3
 8007dc0:	0010      	movs	r0, r2
 8007dc2:	f7f8 f9b1 	bl	8000128 <__udivsi3>
 8007dc6:	0003      	movs	r3, r0
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d90a      	bls.n	8007de6 <UART_SetConfig+0x53a>
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd2:	2380      	movs	r3, #128	@ 0x80
 8007dd4:	025b      	lsls	r3, r3, #9
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d205      	bcs.n	8007de6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60da      	str	r2, [r3, #12]
 8007de4:	e005      	b.n	8007df2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007de6:	231a      	movs	r3, #26
 8007de8:	2220      	movs	r2, #32
 8007dea:	189b      	adds	r3, r3, r2
 8007dec:	19db      	adds	r3, r3, r7
 8007dee:	2201      	movs	r2, #1
 8007df0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	226a      	movs	r2, #106	@ 0x6a
 8007df6:	2101      	movs	r1, #1
 8007df8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	2268      	movs	r2, #104	@ 0x68
 8007dfe:	2101      	movs	r1, #1
 8007e00:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	2200      	movs	r2, #0
 8007e06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e0e:	231a      	movs	r3, #26
 8007e10:	2220      	movs	r2, #32
 8007e12:	189b      	adds	r3, r3, r2
 8007e14:	19db      	adds	r3, r3, r7
 8007e16:	781b      	ldrb	r3, [r3, #0]
}
 8007e18:	0018      	movs	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b010      	add	sp, #64	@ 0x40
 8007e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e20:	08009e88 	.word	0x08009e88
 8007e24:	00f42400 	.word	0x00f42400

08007e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e34:	2208      	movs	r2, #8
 8007e36:	4013      	ands	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	4a4a      	ldr	r2, [pc, #296]	@ (8007f6c <UART_AdvFeatureConfig+0x144>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	0019      	movs	r1, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	2201      	movs	r2, #1
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d00b      	beq.n	8007e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4a43      	ldr	r2, [pc, #268]	@ (8007f70 <UART_AdvFeatureConfig+0x148>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	0019      	movs	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	2202      	movs	r2, #2
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4a3b      	ldr	r2, [pc, #236]	@ (8007f74 <UART_AdvFeatureConfig+0x14c>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	0019      	movs	r1, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	d00b      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4a34      	ldr	r2, [pc, #208]	@ (8007f78 <UART_AdvFeatureConfig+0x150>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	0019      	movs	r1, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	2210      	movs	r2, #16
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	d00b      	beq.n	8007eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f7c <UART_AdvFeatureConfig+0x154>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	0019      	movs	r1, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	2220      	movs	r2, #32
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	d00b      	beq.n	8007efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	4a25      	ldr	r2, [pc, #148]	@ (8007f80 <UART_AdvFeatureConfig+0x158>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	0019      	movs	r1, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f00:	2240      	movs	r2, #64	@ 0x40
 8007f02:	4013      	ands	r3, r2
 8007f04:	d01d      	beq.n	8007f42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f84 <UART_AdvFeatureConfig+0x15c>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	0019      	movs	r1, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f22:	2380      	movs	r3, #128	@ 0x80
 8007f24:	035b      	lsls	r3, r3, #13
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d10b      	bne.n	8007f42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	4a15      	ldr	r2, [pc, #84]	@ (8007f88 <UART_AdvFeatureConfig+0x160>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	0019      	movs	r1, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f46:	2280      	movs	r2, #128	@ 0x80
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d00b      	beq.n	8007f64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	4a0e      	ldr	r2, [pc, #56]	@ (8007f8c <UART_AdvFeatureConfig+0x164>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	0019      	movs	r1, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	605a      	str	r2, [r3, #4]
  }
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	ffff7fff 	.word	0xffff7fff
 8007f70:	fffdffff 	.word	0xfffdffff
 8007f74:	fffeffff 	.word	0xfffeffff
 8007f78:	fffbffff 	.word	0xfffbffff
 8007f7c:	ffffefff 	.word	0xffffefff
 8007f80:	ffffdfff 	.word	0xffffdfff
 8007f84:	ffefffff 	.word	0xffefffff
 8007f88:	ff9fffff 	.word	0xff9fffff
 8007f8c:	fff7ffff 	.word	0xfff7ffff

08007f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b092      	sub	sp, #72	@ 0x48
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2290      	movs	r2, #144	@ 0x90
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fa0:	f7fa f96e 	bl	8002280 <HAL_GetTick>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2208      	movs	r2, #8
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b08      	cmp	r3, #8
 8007fb4:	d12d      	bne.n	8008012 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb8:	2280      	movs	r2, #128	@ 0x80
 8007fba:	0391      	lsls	r1, r2, #14
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4a47      	ldr	r2, [pc, #284]	@ (80080dc <UART_CheckIdleState+0x14c>)
 8007fc0:	9200      	str	r2, [sp, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f88e 	bl	80080e4 <UART_WaitOnFlagUntilTimeout>
 8007fc8:	1e03      	subs	r3, r0, #0
 8007fca:	d022      	beq.n	8008012 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	f383 8810 	msr	PRIMASK, r3
}
 8007fe0:	46c0      	nop			@ (mov r8, r8)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2180      	movs	r1, #128	@ 0x80
 8007fee:	438a      	bics	r2, r1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	f383 8810 	msr	PRIMASK, r3
}
 8007ffc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2288      	movs	r2, #136	@ 0x88
 8008002:	2120      	movs	r1, #32
 8008004:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2284      	movs	r2, #132	@ 0x84
 800800a:	2100      	movs	r1, #0
 800800c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e060      	b.n	80080d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2204      	movs	r2, #4
 800801a:	4013      	ands	r3, r2
 800801c:	2b04      	cmp	r3, #4
 800801e:	d146      	bne.n	80080ae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008022:	2280      	movs	r2, #128	@ 0x80
 8008024:	03d1      	lsls	r1, r2, #15
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4a2c      	ldr	r2, [pc, #176]	@ (80080dc <UART_CheckIdleState+0x14c>)
 800802a:	9200      	str	r2, [sp, #0]
 800802c:	2200      	movs	r2, #0
 800802e:	f000 f859 	bl	80080e4 <UART_WaitOnFlagUntilTimeout>
 8008032:	1e03      	subs	r3, r0, #0
 8008034:	d03b      	beq.n	80080ae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008036:	f3ef 8310 	mrs	r3, PRIMASK
 800803a:	60fb      	str	r3, [r7, #12]
  return(result);
 800803c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008040:	2301      	movs	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f383 8810 	msr	PRIMASK, r3
}
 800804a:	46c0      	nop			@ (mov r8, r8)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4922      	ldr	r1, [pc, #136]	@ (80080e0 <UART_CheckIdleState+0x150>)
 8008058:	400a      	ands	r2, r1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f383 8810 	msr	PRIMASK, r3
}
 8008066:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008068:	f3ef 8310 	mrs	r3, PRIMASK
 800806c:	61bb      	str	r3, [r7, #24]
  return(result);
 800806e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008070:	633b      	str	r3, [r7, #48]	@ 0x30
 8008072:	2301      	movs	r3, #1
 8008074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	46c0      	nop			@ (mov r8, r8)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2101      	movs	r1, #1
 800808a:	438a      	bics	r2, r1
 800808c:	609a      	str	r2, [r3, #8]
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	f383 8810 	msr	PRIMASK, r3
}
 8008098:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	228c      	movs	r2, #140	@ 0x8c
 800809e:	2120      	movs	r1, #32
 80080a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2284      	movs	r2, #132	@ 0x84
 80080a6:	2100      	movs	r1, #0
 80080a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e012      	b.n	80080d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2288      	movs	r2, #136	@ 0x88
 80080b2:	2120      	movs	r1, #32
 80080b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	228c      	movs	r2, #140	@ 0x8c
 80080ba:	2120      	movs	r1, #32
 80080bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2284      	movs	r2, #132	@ 0x84
 80080ce:	2100      	movs	r1, #0
 80080d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b010      	add	sp, #64	@ 0x40
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	01ffffff 	.word	0x01ffffff
 80080e0:	fffffedf 	.word	0xfffffedf

080080e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	1dfb      	adds	r3, r7, #7
 80080f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f4:	e051      	b.n	800819a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	3301      	adds	r3, #1
 80080fa:	d04e      	beq.n	800819a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080fc:	f7fa f8c0 	bl	8002280 <HAL_GetTick>
 8008100:	0002      	movs	r2, r0
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	429a      	cmp	r2, r3
 800810a:	d302      	bcc.n	8008112 <UART_WaitOnFlagUntilTimeout+0x2e>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e051      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2204      	movs	r2, #4
 800811e:	4013      	ands	r3, r2
 8008120:	d03b      	beq.n	800819a <UART_WaitOnFlagUntilTimeout+0xb6>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b80      	cmp	r3, #128	@ 0x80
 8008126:	d038      	beq.n	800819a <UART_WaitOnFlagUntilTimeout+0xb6>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b40      	cmp	r3, #64	@ 0x40
 800812c:	d035      	beq.n	800819a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	2208      	movs	r2, #8
 8008136:	4013      	ands	r3, r2
 8008138:	2b08      	cmp	r3, #8
 800813a:	d111      	bne.n	8008160 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2208      	movs	r2, #8
 8008142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	0018      	movs	r0, r3
 8008148:	f000 f960 	bl	800840c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2290      	movs	r2, #144	@ 0x90
 8008150:	2108      	movs	r1, #8
 8008152:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2284      	movs	r2, #132	@ 0x84
 8008158:	2100      	movs	r1, #0
 800815a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e02c      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	401a      	ands	r2, r3
 800816c:	2380      	movs	r3, #128	@ 0x80
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	429a      	cmp	r2, r3
 8008172:	d112      	bne.n	800819a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2280      	movs	r2, #128	@ 0x80
 800817a:	0112      	lsls	r2, r2, #4
 800817c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	0018      	movs	r0, r3
 8008182:	f000 f943 	bl	800840c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2290      	movs	r2, #144	@ 0x90
 800818a:	2120      	movs	r1, #32
 800818c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2284      	movs	r2, #132	@ 0x84
 8008192:	2100      	movs	r1, #0
 8008194:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e00f      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	4013      	ands	r3, r2
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	425a      	negs	r2, r3
 80081aa:	4153      	adcs	r3, r2
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	001a      	movs	r2, r3
 80081b0:	1dfb      	adds	r3, r7, #7
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d09e      	beq.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	0018      	movs	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	b004      	add	sp, #16
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b098      	sub	sp, #96	@ 0x60
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	1dbb      	adds	r3, r7, #6
 80081d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1dba      	adds	r2, r7, #6
 80081dc:	215c      	movs	r1, #92	@ 0x5c
 80081de:	8812      	ldrh	r2, [r2, #0]
 80081e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	1dba      	adds	r2, r7, #6
 80081e6:	215e      	movs	r1, #94	@ 0x5e
 80081e8:	8812      	ldrh	r2, [r2, #0]
 80081ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	2380      	movs	r3, #128	@ 0x80
 80081f8:	015b      	lsls	r3, r3, #5
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d10d      	bne.n	800821a <UART_Start_Receive_IT+0x56>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <UART_Start_Receive_IT+0x4c>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2260      	movs	r2, #96	@ 0x60
 800820a:	497b      	ldr	r1, [pc, #492]	@ (80083f8 <UART_Start_Receive_IT+0x234>)
 800820c:	5299      	strh	r1, [r3, r2]
 800820e:	e02e      	b.n	800826e <UART_Start_Receive_IT+0xaa>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2260      	movs	r2, #96	@ 0x60
 8008214:	21ff      	movs	r1, #255	@ 0xff
 8008216:	5299      	strh	r1, [r3, r2]
 8008218:	e029      	b.n	800826e <UART_Start_Receive_IT+0xaa>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10d      	bne.n	800823e <UART_Start_Receive_IT+0x7a>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <UART_Start_Receive_IT+0x70>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2260      	movs	r2, #96	@ 0x60
 800822e:	21ff      	movs	r1, #255	@ 0xff
 8008230:	5299      	strh	r1, [r3, r2]
 8008232:	e01c      	b.n	800826e <UART_Start_Receive_IT+0xaa>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2260      	movs	r2, #96	@ 0x60
 8008238:	217f      	movs	r1, #127	@ 0x7f
 800823a:	5299      	strh	r1, [r3, r2]
 800823c:	e017      	b.n	800826e <UART_Start_Receive_IT+0xaa>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	2380      	movs	r3, #128	@ 0x80
 8008244:	055b      	lsls	r3, r3, #21
 8008246:	429a      	cmp	r2, r3
 8008248:	d10d      	bne.n	8008266 <UART_Start_Receive_IT+0xa2>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d104      	bne.n	800825c <UART_Start_Receive_IT+0x98>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2260      	movs	r2, #96	@ 0x60
 8008256:	217f      	movs	r1, #127	@ 0x7f
 8008258:	5299      	strh	r1, [r3, r2]
 800825a:	e008      	b.n	800826e <UART_Start_Receive_IT+0xaa>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2260      	movs	r2, #96	@ 0x60
 8008260:	213f      	movs	r1, #63	@ 0x3f
 8008262:	5299      	strh	r1, [r3, r2]
 8008264:	e003      	b.n	800826e <UART_Start_Receive_IT+0xaa>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2260      	movs	r2, #96	@ 0x60
 800826a:	2100      	movs	r1, #0
 800826c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2290      	movs	r2, #144	@ 0x90
 8008272:	2100      	movs	r1, #0
 8008274:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	228c      	movs	r2, #140	@ 0x8c
 800827a:	2122      	movs	r1, #34	@ 0x22
 800827c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800827e:	f3ef 8310 	mrs	r3, PRIMASK
 8008282:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8008284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008288:	2301      	movs	r3, #1
 800828a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800828e:	f383 8810 	msr	PRIMASK, r3
}
 8008292:	46c0      	nop			@ (mov r8, r8)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2101      	movs	r1, #1
 80082a0:	430a      	orrs	r2, r1
 80082a2:	609a      	str	r2, [r3, #8]
 80082a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082aa:	f383 8810 	msr	PRIMASK, r3
}
 80082ae:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80082b4:	2380      	movs	r3, #128	@ 0x80
 80082b6:	059b      	lsls	r3, r3, #22
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d150      	bne.n	800835e <UART_Start_Receive_IT+0x19a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2268      	movs	r2, #104	@ 0x68
 80082c0:	5a9b      	ldrh	r3, [r3, r2]
 80082c2:	1dba      	adds	r2, r7, #6
 80082c4:	8812      	ldrh	r2, [r2, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d349      	bcc.n	800835e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	2380      	movs	r3, #128	@ 0x80
 80082d0:	015b      	lsls	r3, r3, #5
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d107      	bne.n	80082e6 <UART_Start_Receive_IT+0x122>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a46      	ldr	r2, [pc, #280]	@ (80083fc <UART_Start_Receive_IT+0x238>)
 80082e2:	675a      	str	r2, [r3, #116]	@ 0x74
 80082e4:	e002      	b.n	80082ec <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a45      	ldr	r2, [pc, #276]	@ (8008400 <UART_Start_Receive_IT+0x23c>)
 80082ea:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d019      	beq.n	8008328 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f4:	f3ef 8310 	mrs	r3, PRIMASK
 80082f8:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80082fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082fe:	2301      	movs	r3, #1
 8008300:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			@ (mov r8, r8)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2180      	movs	r1, #128	@ 0x80
 8008316:	0049      	lsls	r1, r1, #1
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008322:	f383 8810 	msr	PRIMASK, r3
}
 8008326:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008328:	f3ef 8310 	mrs	r3, PRIMASK
 800832c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008330:	657b      	str	r3, [r7, #84]	@ 0x54
 8008332:	2301      	movs	r3, #1
 8008334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	f383 8810 	msr	PRIMASK, r3
}
 800833c:	46c0      	nop			@ (mov r8, r8)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2180      	movs	r1, #128	@ 0x80
 800834a:	0549      	lsls	r1, r1, #21
 800834c:	430a      	orrs	r2, r1
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008352:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f383 8810 	msr	PRIMASK, r3
}
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	e047      	b.n	80083ee <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	2380      	movs	r3, #128	@ 0x80
 8008364:	015b      	lsls	r3, r3, #5
 8008366:	429a      	cmp	r2, r3
 8008368:	d107      	bne.n	800837a <UART_Start_Receive_IT+0x1b6>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d103      	bne.n	800837a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a23      	ldr	r2, [pc, #140]	@ (8008404 <UART_Start_Receive_IT+0x240>)
 8008376:	675a      	str	r2, [r3, #116]	@ 0x74
 8008378:	e002      	b.n	8008380 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a22      	ldr	r2, [pc, #136]	@ (8008408 <UART_Start_Receive_IT+0x244>)
 800837e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d019      	beq.n	80083bc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008388:	f3ef 8310 	mrs	r3, PRIMASK
 800838c:	61fb      	str	r3, [r7, #28]
  return(result);
 800838e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008392:	2301      	movs	r3, #1
 8008394:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f383 8810 	msr	PRIMASK, r3
}
 800839c:	46c0      	nop			@ (mov r8, r8)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2190      	movs	r1, #144	@ 0x90
 80083aa:	0049      	lsls	r1, r1, #1
 80083ac:	430a      	orrs	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	f383 8810 	msr	PRIMASK, r3
}
 80083ba:	e018      	b.n	80083ee <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083bc:	f3ef 8310 	mrs	r3, PRIMASK
 80083c0:	613b      	str	r3, [r7, #16]
  return(result);
 80083c2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f383 8810 	msr	PRIMASK, r3
}
 80083d0:	46c0      	nop			@ (mov r8, r8)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2120      	movs	r1, #32
 80083de:	430a      	orrs	r2, r1
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f383 8810 	msr	PRIMASK, r3
}
 80083ec:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	0018      	movs	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b018      	add	sp, #96	@ 0x60
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	000001ff 	.word	0x000001ff
 80083fc:	08008c29 	.word	0x08008c29
 8008400:	080088e9 	.word	0x080088e9
 8008404:	08008725 	.word	0x08008725
 8008408:	08008561 	.word	0x08008561

0800840c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08e      	sub	sp, #56	@ 0x38
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008414:	f3ef 8310 	mrs	r3, PRIMASK
 8008418:	617b      	str	r3, [r7, #20]
  return(result);
 800841a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
 800841e:	2301      	movs	r3, #1
 8008420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	46c0      	nop			@ (mov r8, r8)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4926      	ldr	r1, [pc, #152]	@ (80084d0 <UART_EndRxTransfer+0xc4>)
 8008436:	400a      	ands	r2, r1
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	f383 8810 	msr	PRIMASK, r3
}
 8008444:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008446:	f3ef 8310 	mrs	r3, PRIMASK
 800844a:	623b      	str	r3, [r7, #32]
  return(result);
 800844c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800844e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008450:	2301      	movs	r3, #1
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	f383 8810 	msr	PRIMASK, r3
}
 800845a:	46c0      	nop			@ (mov r8, r8)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	491b      	ldr	r1, [pc, #108]	@ (80084d4 <UART_EndRxTransfer+0xc8>)
 8008468:	400a      	ands	r2, r1
 800846a:	609a      	str	r2, [r3, #8]
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008472:	f383 8810 	msr	PRIMASK, r3
}
 8008476:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d118      	bne.n	80084b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	60bb      	str	r3, [r7, #8]
  return(result);
 8008486:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800848a:	2301      	movs	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f383 8810 	msr	PRIMASK, r3
}
 8008494:	46c0      	nop			@ (mov r8, r8)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2110      	movs	r1, #16
 80084a2:	438a      	bics	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f383 8810 	msr	PRIMASK, r3
}
 80084b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	228c      	movs	r2, #140	@ 0x8c
 80084b6:	2120      	movs	r1, #32
 80084b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084c6:	46c0      	nop			@ (mov r8, r8)
 80084c8:	46bd      	mov	sp, r7
 80084ca:	b00e      	add	sp, #56	@ 0x38
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	46c0      	nop			@ (mov r8, r8)
 80084d0:	fffffedf 	.word	0xfffffedf
 80084d4:	effffffe 	.word	0xeffffffe

080084d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	225e      	movs	r2, #94	@ 0x5e
 80084ea:	2100      	movs	r1, #0
 80084ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2256      	movs	r2, #86	@ 0x56
 80084f2:	2100      	movs	r1, #0
 80084f4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7ff f9c3 	bl	8007884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b004      	add	sp, #16
 8008504:	bd80      	pop	{r7, pc}

08008506 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800850e:	f3ef 8310 	mrs	r3, PRIMASK
 8008512:	60bb      	str	r3, [r7, #8]
  return(result);
 8008514:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	2301      	movs	r3, #1
 800851a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f383 8810 	msr	PRIMASK, r3
}
 8008522:	46c0      	nop			@ (mov r8, r8)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2140      	movs	r1, #64	@ 0x40
 8008530:	438a      	bics	r2, r1
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f383 8810 	msr	PRIMASK, r3
}
 800853e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2288      	movs	r2, #136	@ 0x88
 8008544:	2120      	movs	r1, #32
 8008546:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	0018      	movs	r0, r3
 8008552:	f7ff f98f 	bl	8007874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008556:	46c0      	nop			@ (mov r8, r8)
 8008558:	46bd      	mov	sp, r7
 800855a:	b006      	add	sp, #24
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b094      	sub	sp, #80	@ 0x50
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008568:	204e      	movs	r0, #78	@ 0x4e
 800856a:	183b      	adds	r3, r7, r0
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	2160      	movs	r1, #96	@ 0x60
 8008570:	5a52      	ldrh	r2, [r2, r1]
 8008572:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	228c      	movs	r2, #140	@ 0x8c
 8008578:	589b      	ldr	r3, [r3, r2]
 800857a:	2b22      	cmp	r3, #34	@ 0x22
 800857c:	d000      	beq.n	8008580 <UART_RxISR_8BIT+0x20>
 800857e:	e0bf      	b.n	8008700 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008586:	214c      	movs	r1, #76	@ 0x4c
 8008588:	187b      	adds	r3, r7, r1
 800858a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800858c:	187b      	adds	r3, r7, r1
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	183b      	adds	r3, r7, r0
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b2d9      	uxtb	r1, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800859c:	400a      	ands	r2, r1
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	225e      	movs	r2, #94	@ 0x5e
 80085b0:	5a9b      	ldrh	r3, [r3, r2]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b299      	uxth	r1, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	225e      	movs	r2, #94	@ 0x5e
 80085bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	225e      	movs	r2, #94	@ 0x5e
 80085c2:	5a9b      	ldrh	r3, [r3, r2]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d000      	beq.n	80085cc <UART_RxISR_8BIT+0x6c>
 80085ca:	e0a1      	b.n	8008710 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085cc:	f3ef 8310 	mrs	r3, PRIMASK
 80085d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085d6:	2301      	movs	r3, #1
 80085d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	f383 8810 	msr	PRIMASK, r3
}
 80085e0:	46c0      	nop			@ (mov r8, r8)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	494a      	ldr	r1, [pc, #296]	@ (8008718 <UART_RxISR_8BIT+0x1b8>)
 80085ee:	400a      	ands	r2, r1
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	f383 8810 	msr	PRIMASK, r3
}
 80085fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008602:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008606:	647b      	str	r3, [r7, #68]	@ 0x44
 8008608:	2301      	movs	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860e:	f383 8810 	msr	PRIMASK, r3
}
 8008612:	46c0      	nop			@ (mov r8, r8)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2101      	movs	r1, #1
 8008620:	438a      	bics	r2, r1
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008626:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862a:	f383 8810 	msr	PRIMASK, r3
}
 800862e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	228c      	movs	r2, #140	@ 0x8c
 8008634:	2120      	movs	r1, #32
 8008636:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a34      	ldr	r2, [pc, #208]	@ (800871c <UART_RxISR_8BIT+0x1bc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d01f      	beq.n	800868e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	2380      	movs	r3, #128	@ 0x80
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	4013      	ands	r3, r2
 800865a:	d018      	beq.n	800868e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865c:	f3ef 8310 	mrs	r3, PRIMASK
 8008660:	61bb      	str	r3, [r7, #24]
  return(result);
 8008662:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008664:	643b      	str	r3, [r7, #64]	@ 0x40
 8008666:	2301      	movs	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f383 8810 	msr	PRIMASK, r3
}
 8008670:	46c0      	nop			@ (mov r8, r8)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4928      	ldr	r1, [pc, #160]	@ (8008720 <UART_RxISR_8BIT+0x1c0>)
 800867e:	400a      	ands	r2, r1
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	f383 8810 	msr	PRIMASK, r3
}
 800868c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008692:	2b01      	cmp	r3, #1
 8008694:	d12f      	bne.n	80086f6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800869c:	f3ef 8310 	mrs	r3, PRIMASK
 80086a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086a2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a6:	2301      	movs	r3, #1
 80086a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f383 8810 	msr	PRIMASK, r3
}
 80086b0:	46c0      	nop			@ (mov r8, r8)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2110      	movs	r1, #16
 80086be:	438a      	bics	r2, r1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f383 8810 	msr	PRIMASK, r3
}
 80086cc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	2210      	movs	r2, #16
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d103      	bne.n	80086e4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2210      	movs	r2, #16
 80086e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	225c      	movs	r2, #92	@ 0x5c
 80086e8:	5a9a      	ldrh	r2, [r3, r2]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	0011      	movs	r1, r2
 80086ee:	0018      	movs	r0, r3
 80086f0:	f7ff f8d0 	bl	8007894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086f4:	e00c      	b.n	8008710 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	0018      	movs	r0, r3
 80086fa:	f7f7 ffa1 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 80086fe:	e007      	b.n	8008710 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2108      	movs	r1, #8
 800870c:	430a      	orrs	r2, r1
 800870e:	619a      	str	r2, [r3, #24]
}
 8008710:	46c0      	nop			@ (mov r8, r8)
 8008712:	46bd      	mov	sp, r7
 8008714:	b014      	add	sp, #80	@ 0x50
 8008716:	bd80      	pop	{r7, pc}
 8008718:	fffffedf 	.word	0xfffffedf
 800871c:	40008000 	.word	0x40008000
 8008720:	fbffffff 	.word	0xfbffffff

08008724 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b094      	sub	sp, #80	@ 0x50
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800872c:	204e      	movs	r0, #78	@ 0x4e
 800872e:	183b      	adds	r3, r7, r0
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	2160      	movs	r1, #96	@ 0x60
 8008734:	5a52      	ldrh	r2, [r2, r1]
 8008736:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	228c      	movs	r2, #140	@ 0x8c
 800873c:	589b      	ldr	r3, [r3, r2]
 800873e:	2b22      	cmp	r3, #34	@ 0x22
 8008740:	d000      	beq.n	8008744 <UART_RxISR_16BIT+0x20>
 8008742:	e0bf      	b.n	80088c4 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800874a:	214c      	movs	r1, #76	@ 0x4c
 800874c:	187b      	adds	r3, r7, r1
 800874e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008754:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008756:	187b      	adds	r3, r7, r1
 8008758:	183a      	adds	r2, r7, r0
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	8812      	ldrh	r2, [r2, #0]
 800875e:	4013      	ands	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008764:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876a:	1c9a      	adds	r2, r3, #2
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	225e      	movs	r2, #94	@ 0x5e
 8008774:	5a9b      	ldrh	r3, [r3, r2]
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b299      	uxth	r1, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	225e      	movs	r2, #94	@ 0x5e
 8008780:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	225e      	movs	r2, #94	@ 0x5e
 8008786:	5a9b      	ldrh	r3, [r3, r2]
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d000      	beq.n	8008790 <UART_RxISR_16BIT+0x6c>
 800878e:	e0a1      	b.n	80088d4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008790:	f3ef 8310 	mrs	r3, PRIMASK
 8008794:	623b      	str	r3, [r7, #32]
  return(result);
 8008796:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008798:	647b      	str	r3, [r7, #68]	@ 0x44
 800879a:	2301      	movs	r3, #1
 800879c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	f383 8810 	msr	PRIMASK, r3
}
 80087a4:	46c0      	nop			@ (mov r8, r8)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	494a      	ldr	r1, [pc, #296]	@ (80088dc <UART_RxISR_16BIT+0x1b8>)
 80087b2:	400a      	ands	r2, r1
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	f383 8810 	msr	PRIMASK, r3
}
 80087c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c2:	f3ef 8310 	mrs	r3, PRIMASK
 80087c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80087c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80087cc:	2301      	movs	r3, #1
 80087ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d2:	f383 8810 	msr	PRIMASK, r3
}
 80087d6:	46c0      	nop			@ (mov r8, r8)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2101      	movs	r1, #1
 80087e4:	438a      	bics	r2, r1
 80087e6:	609a      	str	r2, [r3, #8]
 80087e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	f383 8810 	msr	PRIMASK, r3
}
 80087f2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	228c      	movs	r2, #140	@ 0x8c
 80087f8:	2120      	movs	r1, #32
 80087fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a34      	ldr	r2, [pc, #208]	@ (80088e0 <UART_RxISR_16BIT+0x1bc>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01f      	beq.n	8008852 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	2380      	movs	r3, #128	@ 0x80
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	4013      	ands	r3, r2
 800881e:	d018      	beq.n	8008852 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008820:	f3ef 8310 	mrs	r3, PRIMASK
 8008824:	617b      	str	r3, [r7, #20]
  return(result);
 8008826:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800882a:	2301      	movs	r3, #1
 800882c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f383 8810 	msr	PRIMASK, r3
}
 8008834:	46c0      	nop			@ (mov r8, r8)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4928      	ldr	r1, [pc, #160]	@ (80088e4 <UART_RxISR_16BIT+0x1c0>)
 8008842:	400a      	ands	r2, r1
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008848:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f383 8810 	msr	PRIMASK, r3
}
 8008850:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008856:	2b01      	cmp	r3, #1
 8008858:	d12f      	bne.n	80088ba <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008860:	f3ef 8310 	mrs	r3, PRIMASK
 8008864:	60bb      	str	r3, [r7, #8]
  return(result);
 8008866:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800886a:	2301      	movs	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f383 8810 	msr	PRIMASK, r3
}
 8008874:	46c0      	nop			@ (mov r8, r8)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2110      	movs	r1, #16
 8008882:	438a      	bics	r2, r1
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f383 8810 	msr	PRIMASK, r3
}
 8008890:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	2210      	movs	r2, #16
 800889a:	4013      	ands	r3, r2
 800889c:	2b10      	cmp	r3, #16
 800889e:	d103      	bne.n	80088a8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2210      	movs	r2, #16
 80088a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	225c      	movs	r2, #92	@ 0x5c
 80088ac:	5a9a      	ldrh	r2, [r3, r2]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	0011      	movs	r1, r2
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7fe ffee 	bl	8007894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088b8:	e00c      	b.n	80088d4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	0018      	movs	r0, r3
 80088be:	f7f7 febf 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 80088c2:	e007      	b.n	80088d4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2108      	movs	r1, #8
 80088d0:	430a      	orrs	r2, r1
 80088d2:	619a      	str	r2, [r3, #24]
}
 80088d4:	46c0      	nop			@ (mov r8, r8)
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b014      	add	sp, #80	@ 0x50
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	fffffedf 	.word	0xfffffedf
 80088e0:	40008000 	.word	0x40008000
 80088e4:	fbffffff 	.word	0xfbffffff

080088e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b0a0      	sub	sp, #128	@ 0x80
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80088f0:	237a      	movs	r3, #122	@ 0x7a
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	2160      	movs	r1, #96	@ 0x60
 80088f8:	5a52      	ldrh	r2, [r2, r1]
 80088fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	228c      	movs	r2, #140	@ 0x8c
 8008918:	589b      	ldr	r3, [r3, r2]
 800891a:	2b22      	cmp	r3, #34	@ 0x22
 800891c:	d000      	beq.n	8008920 <UART_RxISR_8BIT_FIFOEN+0x38>
 800891e:	e16a      	b.n	8008bf6 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008920:	236e      	movs	r3, #110	@ 0x6e
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	2168      	movs	r1, #104	@ 0x68
 8008928:	5a52      	ldrh	r2, [r2, r1]
 800892a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800892c:	e111      	b.n	8008b52 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008934:	216c      	movs	r1, #108	@ 0x6c
 8008936:	187b      	adds	r3, r7, r1
 8008938:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800893a:	187b      	adds	r3, r7, r1
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	237a      	movs	r3, #122	@ 0x7a
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b2d9      	uxtb	r1, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800894c:	400a      	ands	r2, r1
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	225e      	movs	r2, #94	@ 0x5e
 8008960:	5a9b      	ldrh	r3, [r3, r2]
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b299      	uxth	r1, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	225e      	movs	r2, #94	@ 0x5e
 800896c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008978:	2207      	movs	r2, #7
 800897a:	4013      	ands	r3, r2
 800897c:	d049      	beq.n	8008a12 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800897e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008980:	2201      	movs	r2, #1
 8008982:	4013      	ands	r3, r2
 8008984:	d010      	beq.n	80089a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008986:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008988:	2380      	movs	r3, #128	@ 0x80
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	4013      	ands	r3, r2
 800898e:	d00b      	beq.n	80089a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2201      	movs	r2, #1
 8008996:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2290      	movs	r2, #144	@ 0x90
 800899c:	589b      	ldr	r3, [r3, r2]
 800899e:	2201      	movs	r2, #1
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2190      	movs	r1, #144	@ 0x90
 80089a6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089aa:	2202      	movs	r2, #2
 80089ac:	4013      	ands	r3, r2
 80089ae:	d00f      	beq.n	80089d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80089b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089b2:	2201      	movs	r2, #1
 80089b4:	4013      	ands	r3, r2
 80089b6:	d00b      	beq.n	80089d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2202      	movs	r2, #2
 80089be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2290      	movs	r2, #144	@ 0x90
 80089c4:	589b      	ldr	r3, [r3, r2]
 80089c6:	2204      	movs	r2, #4
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2190      	movs	r1, #144	@ 0x90
 80089ce:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089d2:	2204      	movs	r2, #4
 80089d4:	4013      	ands	r3, r2
 80089d6:	d00f      	beq.n	80089f8 <UART_RxISR_8BIT_FIFOEN+0x110>
 80089d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089da:	2201      	movs	r2, #1
 80089dc:	4013      	ands	r3, r2
 80089de:	d00b      	beq.n	80089f8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2204      	movs	r2, #4
 80089e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2290      	movs	r2, #144	@ 0x90
 80089ec:	589b      	ldr	r3, [r3, r2]
 80089ee:	2202      	movs	r2, #2
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2190      	movs	r1, #144	@ 0x90
 80089f6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2290      	movs	r2, #144	@ 0x90
 80089fc:	589b      	ldr	r3, [r3, r2]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d007      	beq.n	8008a12 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fe ff3d 	bl	8007884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2290      	movs	r2, #144	@ 0x90
 8008a0e:	2100      	movs	r1, #0
 8008a10:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	225e      	movs	r2, #94	@ 0x5e
 8008a16:	5a9b      	ldrh	r3, [r3, r2]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d000      	beq.n	8008a20 <UART_RxISR_8BIT_FIFOEN+0x138>
 8008a1e:	e098      	b.n	8008b52 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a20:	f3ef 8310 	mrs	r3, PRIMASK
 8008a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a30:	f383 8810 	msr	PRIMASK, r3
}
 8008a34:	46c0      	nop			@ (mov r8, r8)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4973      	ldr	r1, [pc, #460]	@ (8008c10 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8008a42:	400a      	ands	r2, r1
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a48:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a4c:	f383 8810 	msr	PRIMASK, r3
}
 8008a50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a52:	f3ef 8310 	mrs	r3, PRIMASK
 8008a56:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8008a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a62:	f383 8810 	msr	PRIMASK, r3
}
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4968      	ldr	r1, [pc, #416]	@ (8008c14 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8008a74:	400a      	ands	r2, r1
 8008a76:	609a      	str	r2, [r3, #8]
 8008a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a7e:	f383 8810 	msr	PRIMASK, r3
}
 8008a82:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	228c      	movs	r2, #140	@ 0x8c
 8008a88:	2120      	movs	r1, #32
 8008a8a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8008c18 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d01f      	beq.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	2380      	movs	r3, #128	@ 0x80
 8008aaa:	041b      	lsls	r3, r3, #16
 8008aac:	4013      	ands	r3, r2
 8008aae:	d018      	beq.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aba:	2301      	movs	r3, #1
 8008abc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	f383 8810 	msr	PRIMASK, r3
}
 8008ac4:	46c0      	nop			@ (mov r8, r8)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4952      	ldr	r1, [pc, #328]	@ (8008c1c <UART_RxISR_8BIT_FIFOEN+0x334>)
 8008ad2:	400a      	ands	r2, r1
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	f383 8810 	msr	PRIMASK, r3
}
 8008ae0:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d12f      	bne.n	8008b4a <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af0:	f3ef 8310 	mrs	r3, PRIMASK
 8008af4:	623b      	str	r3, [r7, #32]
  return(result);
 8008af6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008afa:	2301      	movs	r3, #1
 8008afc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b00:	f383 8810 	msr	PRIMASK, r3
}
 8008b04:	46c0      	nop			@ (mov r8, r8)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2110      	movs	r1, #16
 8008b12:	438a      	bics	r2, r1
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	f383 8810 	msr	PRIMASK, r3
}
 8008b20:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	2210      	movs	r2, #16
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d103      	bne.n	8008b38 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2210      	movs	r2, #16
 8008b36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	225c      	movs	r2, #92	@ 0x5c
 8008b3c:	5a9a      	ldrh	r2, [r3, r2]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	0011      	movs	r1, r2
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7fe fea6 	bl	8007894 <HAL_UARTEx_RxEventCallback>
 8008b48:	e003      	b.n	8008b52 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f7f7 fd77 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b52:	236e      	movs	r3, #110	@ 0x6e
 8008b54:	18fb      	adds	r3, r7, r3
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008b5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b5e:	2220      	movs	r2, #32
 8008b60:	4013      	ands	r3, r2
 8008b62:	d000      	beq.n	8008b66 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008b64:	e6e3      	b.n	800892e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b66:	205a      	movs	r0, #90	@ 0x5a
 8008b68:	183b      	adds	r3, r7, r0
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	215e      	movs	r1, #94	@ 0x5e
 8008b6e:	5a52      	ldrh	r2, [r2, r1]
 8008b70:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b72:	0001      	movs	r1, r0
 8008b74:	187b      	adds	r3, r7, r1
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d044      	beq.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2268      	movs	r2, #104	@ 0x68
 8008b80:	5a9b      	ldrh	r3, [r3, r2]
 8008b82:	187a      	adds	r2, r7, r1
 8008b84:	8812      	ldrh	r2, [r2, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d23d      	bcs.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b90:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b94:	2301      	movs	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f383 8810 	msr	PRIMASK, r3
}
 8008b9e:	46c0      	nop			@ (mov r8, r8)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	491d      	ldr	r1, [pc, #116]	@ (8008c20 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8008bac:	400a      	ands	r2, r1
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f383 8810 	msr	PRIMASK, r3
}
 8008bba:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a19      	ldr	r2, [pc, #100]	@ (8008c24 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8008bc0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc6:	617b      	str	r3, [r7, #20]
  return(result);
 8008bc8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bcc:	2301      	movs	r3, #1
 8008bce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	f383 8810 	msr	PRIMASK, r3
}
 8008bd6:	46c0      	nop			@ (mov r8, r8)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2120      	movs	r1, #32
 8008be4:	430a      	orrs	r2, r1
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f383 8810 	msr	PRIMASK, r3
}
 8008bf2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bf4:	e007      	b.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	699a      	ldr	r2, [r3, #24]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2108      	movs	r1, #8
 8008c02:	430a      	orrs	r2, r1
 8008c04:	619a      	str	r2, [r3, #24]
}
 8008c06:	46c0      	nop			@ (mov r8, r8)
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b020      	add	sp, #128	@ 0x80
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	fffffeff 	.word	0xfffffeff
 8008c14:	effffffe 	.word	0xeffffffe
 8008c18:	40008000 	.word	0x40008000
 8008c1c:	fbffffff 	.word	0xfbffffff
 8008c20:	efffffff 	.word	0xefffffff
 8008c24:	08008561 	.word	0x08008561

08008c28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b0a2      	sub	sp, #136	@ 0x88
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c30:	2382      	movs	r3, #130	@ 0x82
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	2160      	movs	r1, #96	@ 0x60
 8008c38:	5a52      	ldrh	r2, [r2, r1]
 8008c3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	2284      	movs	r2, #132	@ 0x84
 8008c44:	18ba      	adds	r2, r7, r2
 8008c46:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	228c      	movs	r2, #140	@ 0x8c
 8008c5c:	589b      	ldr	r3, [r3, r2]
 8008c5e:	2b22      	cmp	r3, #34	@ 0x22
 8008c60:	d000      	beq.n	8008c64 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8008c62:	e174      	b.n	8008f4e <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c64:	2376      	movs	r3, #118	@ 0x76
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	2168      	movs	r1, #104	@ 0x68
 8008c6c:	5a52      	ldrh	r2, [r2, r1]
 8008c6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c70:	e119      	b.n	8008ea6 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c78:	2174      	movs	r1, #116	@ 0x74
 8008c7a:	187b      	adds	r3, r7, r1
 8008c7c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c82:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8008c84:	187b      	adds	r3, r7, r1
 8008c86:	2282      	movs	r2, #130	@ 0x82
 8008c88:	18ba      	adds	r2, r7, r2
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	8812      	ldrh	r2, [r2, #0]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c9a:	1c9a      	adds	r2, r3, #2
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	225e      	movs	r2, #94	@ 0x5e
 8008ca4:	5a9b      	ldrh	r3, [r3, r2]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b299      	uxth	r1, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	225e      	movs	r2, #94	@ 0x5e
 8008cb0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	2184      	movs	r1, #132	@ 0x84
 8008cba:	187a      	adds	r2, r7, r1
 8008cbc:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2207      	movs	r2, #7
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	d04e      	beq.n	8008d66 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cc8:	187b      	adds	r3, r7, r1
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d010      	beq.n	8008cf4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8008cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2290      	movs	r2, #144	@ 0x90
 8008ce8:	589b      	ldr	r3, [r3, r2]
 8008cea:	2201      	movs	r2, #1
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2190      	movs	r1, #144	@ 0x90
 8008cf2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cf4:	2384      	movs	r3, #132	@ 0x84
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	d00f      	beq.n	8008d20 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8008d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d02:	2201      	movs	r2, #1
 8008d04:	4013      	ands	r3, r2
 8008d06:	d00b      	beq.n	8008d20 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2290      	movs	r2, #144	@ 0x90
 8008d14:	589b      	ldr	r3, [r3, r2]
 8008d16:	2204      	movs	r2, #4
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2190      	movs	r1, #144	@ 0x90
 8008d1e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d20:	2384      	movs	r3, #132	@ 0x84
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2204      	movs	r2, #4
 8008d28:	4013      	ands	r3, r2
 8008d2a:	d00f      	beq.n	8008d4c <UART_RxISR_16BIT_FIFOEN+0x124>
 8008d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4013      	ands	r3, r2
 8008d32:	d00b      	beq.n	8008d4c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2204      	movs	r2, #4
 8008d3a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2290      	movs	r2, #144	@ 0x90
 8008d40:	589b      	ldr	r3, [r3, r2]
 8008d42:	2202      	movs	r2, #2
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2190      	movs	r1, #144	@ 0x90
 8008d4a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2290      	movs	r2, #144	@ 0x90
 8008d50:	589b      	ldr	r3, [r3, r2]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d007      	beq.n	8008d66 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f7fe fd93 	bl	8007884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2290      	movs	r2, #144	@ 0x90
 8008d62:	2100      	movs	r1, #0
 8008d64:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	225e      	movs	r2, #94	@ 0x5e
 8008d6a:	5a9b      	ldrh	r3, [r3, r2]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d000      	beq.n	8008d74 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8008d72:	e098      	b.n	8008ea6 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d74:	f3ef 8310 	mrs	r3, PRIMASK
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d7e:	2301      	movs	r3, #1
 8008d80:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d84:	f383 8810 	msr	PRIMASK, r3
}
 8008d88:	46c0      	nop			@ (mov r8, r8)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4974      	ldr	r1, [pc, #464]	@ (8008f68 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8008d96:	400a      	ands	r2, r1
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008da0:	f383 8810 	msr	PRIMASK, r3
}
 8008da4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da6:	f3ef 8310 	mrs	r3, PRIMASK
 8008daa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008db0:	2301      	movs	r3, #1
 8008db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db6:	f383 8810 	msr	PRIMASK, r3
}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4969      	ldr	r1, [pc, #420]	@ (8008f6c <UART_RxISR_16BIT_FIFOEN+0x344>)
 8008dc8:	400a      	ands	r2, r1
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dd2:	f383 8810 	msr	PRIMASK, r3
}
 8008dd6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	228c      	movs	r2, #140	@ 0x8c
 8008ddc:	2120      	movs	r1, #32
 8008dde:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a5f      	ldr	r2, [pc, #380]	@ (8008f70 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d01f      	beq.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	2380      	movs	r3, #128	@ 0x80
 8008dfe:	041b      	lsls	r3, r3, #16
 8008e00:	4013      	ands	r3, r2
 8008e02:	d018      	beq.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e04:	f3ef 8310 	mrs	r3, PRIMASK
 8008e08:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e0e:	2301      	movs	r3, #1
 8008e10:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e14:	f383 8810 	msr	PRIMASK, r3
}
 8008e18:	46c0      	nop			@ (mov r8, r8)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4953      	ldr	r1, [pc, #332]	@ (8008f74 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8008e26:	400a      	ands	r2, r1
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	f383 8810 	msr	PRIMASK, r3
}
 8008e34:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d12f      	bne.n	8008e9e <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e44:	f3ef 8310 	mrs	r3, PRIMASK
 8008e48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e4e:	2301      	movs	r3, #1
 8008e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	f383 8810 	msr	PRIMASK, r3
}
 8008e58:	46c0      	nop			@ (mov r8, r8)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2110      	movs	r1, #16
 8008e66:	438a      	bics	r2, r1
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	f383 8810 	msr	PRIMASK, r3
}
 8008e74:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	2210      	movs	r2, #16
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	d103      	bne.n	8008e8c <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2210      	movs	r2, #16
 8008e8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	225c      	movs	r2, #92	@ 0x5c
 8008e90:	5a9a      	ldrh	r2, [r3, r2]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	0011      	movs	r1, r2
 8008e96:	0018      	movs	r0, r3
 8008e98:	f7fe fcfc 	bl	8007894 <HAL_UARTEx_RxEventCallback>
 8008e9c:	e003      	b.n	8008ea6 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7f7 fbcd 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ea6:	2376      	movs	r3, #118	@ 0x76
 8008ea8:	18fb      	adds	r3, r7, r3
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <UART_RxISR_16BIT_FIFOEN+0x296>
 8008eb0:	2384      	movs	r3, #132	@ 0x84
 8008eb2:	18fb      	adds	r3, r7, r3
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	4013      	ands	r3, r2
 8008eba:	d000      	beq.n	8008ebe <UART_RxISR_16BIT_FIFOEN+0x296>
 8008ebc:	e6d9      	b.n	8008c72 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ebe:	205e      	movs	r0, #94	@ 0x5e
 8008ec0:	183b      	adds	r3, r7, r0
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	215e      	movs	r1, #94	@ 0x5e
 8008ec6:	5a52      	ldrh	r2, [r2, r1]
 8008ec8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eca:	0001      	movs	r1, r0
 8008ecc:	187b      	adds	r3, r7, r1
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d044      	beq.n	8008f5e <UART_RxISR_16BIT_FIFOEN+0x336>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2268      	movs	r2, #104	@ 0x68
 8008ed8:	5a9b      	ldrh	r3, [r3, r2]
 8008eda:	187a      	adds	r2, r7, r1
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d23d      	bcs.n	8008f5e <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008eea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008eec:	2301      	movs	r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f383 8810 	msr	PRIMASK, r3
}
 8008ef6:	46c0      	nop			@ (mov r8, r8)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	491d      	ldr	r1, [pc, #116]	@ (8008f78 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8008f04:	400a      	ands	r2, r1
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f383 8810 	msr	PRIMASK, r3
}
 8008f12:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a19      	ldr	r2, [pc, #100]	@ (8008f7c <UART_RxISR_16BIT_FIFOEN+0x354>)
 8008f18:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f20:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f24:	2301      	movs	r3, #1
 8008f26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f383 8810 	msr	PRIMASK, r3
}
 8008f2e:	46c0      	nop			@ (mov r8, r8)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2120      	movs	r1, #32
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	f383 8810 	msr	PRIMASK, r3
}
 8008f4a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f4c:	e007      	b.n	8008f5e <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2108      	movs	r1, #8
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	619a      	str	r2, [r3, #24]
}
 8008f5e:	46c0      	nop			@ (mov r8, r8)
 8008f60:	46bd      	mov	sp, r7
 8008f62:	b022      	add	sp, #136	@ 0x88
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	46c0      	nop			@ (mov r8, r8)
 8008f68:	fffffeff 	.word	0xfffffeff
 8008f6c:	effffffe 	.word	0xeffffffe
 8008f70:	40008000 	.word	0x40008000
 8008f74:	fbffffff 	.word	0xfbffffff
 8008f78:	efffffff 	.word	0xefffffff
 8008f7c:	08008725 	.word	0x08008725

08008f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f88:	46c0      	nop			@ (mov r8, r8)
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b002      	add	sp, #8
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f98:	46c0      	nop			@ (mov r8, r8)
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b002      	add	sp, #8
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fa8:	46c0      	nop			@ (mov r8, r8)
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b002      	add	sp, #8
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2284      	movs	r2, #132	@ 0x84
 8008fbc:	5c9b      	ldrb	r3, [r3, r2]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d101      	bne.n	8008fc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	e027      	b.n	8009016 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2284      	movs	r2, #132	@ 0x84
 8008fca:	2101      	movs	r1, #1
 8008fcc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2288      	movs	r2, #136	@ 0x88
 8008fd2:	2124      	movs	r1, #36	@ 0x24
 8008fd4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2101      	movs	r1, #1
 8008fea:	438a      	bics	r2, r1
 8008fec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8009020 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2288      	movs	r2, #136	@ 0x88
 8009008:	2120      	movs	r1, #32
 800900a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2284      	movs	r2, #132	@ 0x84
 8009010:	2100      	movs	r1, #0
 8009012:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	0018      	movs	r0, r3
 8009018:	46bd      	mov	sp, r7
 800901a:	b004      	add	sp, #16
 800901c:	bd80      	pop	{r7, pc}
 800901e:	46c0      	nop			@ (mov r8, r8)
 8009020:	dfffffff 	.word	0xdfffffff

08009024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2284      	movs	r2, #132	@ 0x84
 8009032:	5c9b      	ldrb	r3, [r3, r2]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009038:	2302      	movs	r3, #2
 800903a:	e02e      	b.n	800909a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2284      	movs	r2, #132	@ 0x84
 8009040:	2101      	movs	r1, #1
 8009042:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2288      	movs	r2, #136	@ 0x88
 8009048:	2124      	movs	r1, #36	@ 0x24
 800904a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2101      	movs	r1, #1
 8009060:	438a      	bics	r2, r1
 8009062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	08d9      	lsrs	r1, r3, #3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	0018      	movs	r0, r3
 800907c:	f000 f854 	bl	8009128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2288      	movs	r2, #136	@ 0x88
 800908c:	2120      	movs	r1, #32
 800908e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2284      	movs	r2, #132	@ 0x84
 8009094:	2100      	movs	r1, #0
 8009096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	0018      	movs	r0, r3
 800909c:	46bd      	mov	sp, r7
 800909e:	b004      	add	sp, #16
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2284      	movs	r2, #132	@ 0x84
 80090b2:	5c9b      	ldrb	r3, [r3, r2]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e02f      	b.n	800911c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2284      	movs	r2, #132	@ 0x84
 80090c0:	2101      	movs	r1, #1
 80090c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2288      	movs	r2, #136	@ 0x88
 80090c8:	2124      	movs	r1, #36	@ 0x24
 80090ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2101      	movs	r1, #1
 80090e0:	438a      	bics	r2, r1
 80090e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009124 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	0019      	movs	r1, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	0018      	movs	r0, r3
 80090fe:	f000 f813 	bl	8009128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2288      	movs	r2, #136	@ 0x88
 800910e:	2120      	movs	r1, #32
 8009110:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2284      	movs	r2, #132	@ 0x84
 8009116:	2100      	movs	r1, #0
 8009118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	0018      	movs	r0, r3
 800911e:	46bd      	mov	sp, r7
 8009120:	b004      	add	sp, #16
 8009122:	bd80      	pop	{r7, pc}
 8009124:	f1ffffff 	.word	0xf1ffffff

08009128 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009134:	2b00      	cmp	r3, #0
 8009136:	d108      	bne.n	800914a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	226a      	movs	r2, #106	@ 0x6a
 800913c:	2101      	movs	r1, #1
 800913e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2268      	movs	r2, #104	@ 0x68
 8009144:	2101      	movs	r1, #1
 8009146:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009148:	e043      	b.n	80091d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800914a:	260f      	movs	r6, #15
 800914c:	19bb      	adds	r3, r7, r6
 800914e:	2208      	movs	r2, #8
 8009150:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009152:	200e      	movs	r0, #14
 8009154:	183b      	adds	r3, r7, r0
 8009156:	2208      	movs	r2, #8
 8009158:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	0e5b      	lsrs	r3, r3, #25
 8009162:	b2da      	uxtb	r2, r3
 8009164:	240d      	movs	r4, #13
 8009166:	193b      	adds	r3, r7, r4
 8009168:	2107      	movs	r1, #7
 800916a:	400a      	ands	r2, r1
 800916c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	0f5b      	lsrs	r3, r3, #29
 8009176:	b2da      	uxtb	r2, r3
 8009178:	250c      	movs	r5, #12
 800917a:	197b      	adds	r3, r7, r5
 800917c:	2107      	movs	r1, #7
 800917e:	400a      	ands	r2, r1
 8009180:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009182:	183b      	adds	r3, r7, r0
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	197a      	adds	r2, r7, r5
 8009188:	7812      	ldrb	r2, [r2, #0]
 800918a:	4914      	ldr	r1, [pc, #80]	@ (80091dc <UARTEx_SetNbDataToProcess+0xb4>)
 800918c:	5c8a      	ldrb	r2, [r1, r2]
 800918e:	435a      	muls	r2, r3
 8009190:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009192:	197b      	adds	r3, r7, r5
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	4a12      	ldr	r2, [pc, #72]	@ (80091e0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009198:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800919a:	0019      	movs	r1, r3
 800919c:	f7f7 f84e 	bl	800023c <__divsi3>
 80091a0:	0003      	movs	r3, r0
 80091a2:	b299      	uxth	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	226a      	movs	r2, #106	@ 0x6a
 80091a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091aa:	19bb      	adds	r3, r7, r6
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	193a      	adds	r2, r7, r4
 80091b0:	7812      	ldrb	r2, [r2, #0]
 80091b2:	490a      	ldr	r1, [pc, #40]	@ (80091dc <UARTEx_SetNbDataToProcess+0xb4>)
 80091b4:	5c8a      	ldrb	r2, [r1, r2]
 80091b6:	435a      	muls	r2, r3
 80091b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80091ba:	193b      	adds	r3, r7, r4
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	4a08      	ldr	r2, [pc, #32]	@ (80091e0 <UARTEx_SetNbDataToProcess+0xb8>)
 80091c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091c2:	0019      	movs	r1, r3
 80091c4:	f7f7 f83a 	bl	800023c <__divsi3>
 80091c8:	0003      	movs	r3, r0
 80091ca:	b299      	uxth	r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2268      	movs	r2, #104	@ 0x68
 80091d0:	5299      	strh	r1, [r3, r2]
}
 80091d2:	46c0      	nop			@ (mov r8, r8)
 80091d4:	46bd      	mov	sp, r7
 80091d6:	b005      	add	sp, #20
 80091d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	08009ea0 	.word	0x08009ea0
 80091e0:	08009ea8 	.word	0x08009ea8

080091e4 <atoi>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	220a      	movs	r2, #10
 80091e8:	2100      	movs	r1, #0
 80091ea:	f000 f88b 	bl	8009304 <strtol>
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <_strtol_l.isra.0>:
 80091f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f2:	b085      	sub	sp, #20
 80091f4:	0017      	movs	r7, r2
 80091f6:	001e      	movs	r6, r3
 80091f8:	9003      	str	r0, [sp, #12]
 80091fa:	9101      	str	r1, [sp, #4]
 80091fc:	2b24      	cmp	r3, #36	@ 0x24
 80091fe:	d823      	bhi.n	8009248 <_strtol_l.isra.0+0x58>
 8009200:	000c      	movs	r4, r1
 8009202:	2b01      	cmp	r3, #1
 8009204:	d020      	beq.n	8009248 <_strtol_l.isra.0+0x58>
 8009206:	4b3d      	ldr	r3, [pc, #244]	@ (80092fc <_strtol_l.isra.0+0x10c>)
 8009208:	2208      	movs	r2, #8
 800920a:	469c      	mov	ip, r3
 800920c:	0023      	movs	r3, r4
 800920e:	4661      	mov	r1, ip
 8009210:	781d      	ldrb	r5, [r3, #0]
 8009212:	3401      	adds	r4, #1
 8009214:	5d48      	ldrb	r0, [r1, r5]
 8009216:	0001      	movs	r1, r0
 8009218:	4011      	ands	r1, r2
 800921a:	4210      	tst	r0, r2
 800921c:	d1f6      	bne.n	800920c <_strtol_l.isra.0+0x1c>
 800921e:	2d2d      	cmp	r5, #45	@ 0x2d
 8009220:	d119      	bne.n	8009256 <_strtol_l.isra.0+0x66>
 8009222:	7825      	ldrb	r5, [r4, #0]
 8009224:	1c9c      	adds	r4, r3, #2
 8009226:	2301      	movs	r3, #1
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	2210      	movs	r2, #16
 800922c:	0033      	movs	r3, r6
 800922e:	4393      	bics	r3, r2
 8009230:	d11d      	bne.n	800926e <_strtol_l.isra.0+0x7e>
 8009232:	2d30      	cmp	r5, #48	@ 0x30
 8009234:	d115      	bne.n	8009262 <_strtol_l.isra.0+0x72>
 8009236:	2120      	movs	r1, #32
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	438b      	bics	r3, r1
 800923c:	2b58      	cmp	r3, #88	@ 0x58
 800923e:	d110      	bne.n	8009262 <_strtol_l.isra.0+0x72>
 8009240:	7865      	ldrb	r5, [r4, #1]
 8009242:	3402      	adds	r4, #2
 8009244:	2610      	movs	r6, #16
 8009246:	e012      	b.n	800926e <_strtol_l.isra.0+0x7e>
 8009248:	f000 f8a6 	bl	8009398 <__errno>
 800924c:	2316      	movs	r3, #22
 800924e:	6003      	str	r3, [r0, #0]
 8009250:	2000      	movs	r0, #0
 8009252:	b005      	add	sp, #20
 8009254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009256:	9100      	str	r1, [sp, #0]
 8009258:	2d2b      	cmp	r5, #43	@ 0x2b
 800925a:	d1e6      	bne.n	800922a <_strtol_l.isra.0+0x3a>
 800925c:	7825      	ldrb	r5, [r4, #0]
 800925e:	1c9c      	adds	r4, r3, #2
 8009260:	e7e3      	b.n	800922a <_strtol_l.isra.0+0x3a>
 8009262:	2e00      	cmp	r6, #0
 8009264:	d1ee      	bne.n	8009244 <_strtol_l.isra.0+0x54>
 8009266:	360a      	adds	r6, #10
 8009268:	2d30      	cmp	r5, #48	@ 0x30
 800926a:	d100      	bne.n	800926e <_strtol_l.isra.0+0x7e>
 800926c:	3e02      	subs	r6, #2
 800926e:	4a24      	ldr	r2, [pc, #144]	@ (8009300 <_strtol_l.isra.0+0x110>)
 8009270:	9b00      	ldr	r3, [sp, #0]
 8009272:	4694      	mov	ip, r2
 8009274:	4463      	add	r3, ip
 8009276:	0031      	movs	r1, r6
 8009278:	0018      	movs	r0, r3
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	f7f6 ffda 	bl	8000234 <__aeabi_uidivmod>
 8009280:	2200      	movs	r2, #0
 8009282:	4684      	mov	ip, r0
 8009284:	0010      	movs	r0, r2
 8009286:	002b      	movs	r3, r5
 8009288:	3b30      	subs	r3, #48	@ 0x30
 800928a:	2b09      	cmp	r3, #9
 800928c:	d811      	bhi.n	80092b2 <_strtol_l.isra.0+0xc2>
 800928e:	001d      	movs	r5, r3
 8009290:	42ae      	cmp	r6, r5
 8009292:	dd1d      	ble.n	80092d0 <_strtol_l.isra.0+0xe0>
 8009294:	1c53      	adds	r3, r2, #1
 8009296:	d009      	beq.n	80092ac <_strtol_l.isra.0+0xbc>
 8009298:	2201      	movs	r2, #1
 800929a:	4252      	negs	r2, r2
 800929c:	4584      	cmp	ip, r0
 800929e:	d305      	bcc.n	80092ac <_strtol_l.isra.0+0xbc>
 80092a0:	d101      	bne.n	80092a6 <_strtol_l.isra.0+0xb6>
 80092a2:	42a9      	cmp	r1, r5
 80092a4:	db11      	blt.n	80092ca <_strtol_l.isra.0+0xda>
 80092a6:	2201      	movs	r2, #1
 80092a8:	4370      	muls	r0, r6
 80092aa:	1828      	adds	r0, r5, r0
 80092ac:	7825      	ldrb	r5, [r4, #0]
 80092ae:	3401      	adds	r4, #1
 80092b0:	e7e9      	b.n	8009286 <_strtol_l.isra.0+0x96>
 80092b2:	002b      	movs	r3, r5
 80092b4:	3b41      	subs	r3, #65	@ 0x41
 80092b6:	2b19      	cmp	r3, #25
 80092b8:	d801      	bhi.n	80092be <_strtol_l.isra.0+0xce>
 80092ba:	3d37      	subs	r5, #55	@ 0x37
 80092bc:	e7e8      	b.n	8009290 <_strtol_l.isra.0+0xa0>
 80092be:	002b      	movs	r3, r5
 80092c0:	3b61      	subs	r3, #97	@ 0x61
 80092c2:	2b19      	cmp	r3, #25
 80092c4:	d804      	bhi.n	80092d0 <_strtol_l.isra.0+0xe0>
 80092c6:	3d57      	subs	r5, #87	@ 0x57
 80092c8:	e7e2      	b.n	8009290 <_strtol_l.isra.0+0xa0>
 80092ca:	2201      	movs	r2, #1
 80092cc:	4252      	negs	r2, r2
 80092ce:	e7ed      	b.n	80092ac <_strtol_l.isra.0+0xbc>
 80092d0:	1c53      	adds	r3, r2, #1
 80092d2:	d108      	bne.n	80092e6 <_strtol_l.isra.0+0xf6>
 80092d4:	2322      	movs	r3, #34	@ 0x22
 80092d6:	9a03      	ldr	r2, [sp, #12]
 80092d8:	9802      	ldr	r0, [sp, #8]
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	2f00      	cmp	r7, #0
 80092de:	d0b8      	beq.n	8009252 <_strtol_l.isra.0+0x62>
 80092e0:	1e63      	subs	r3, r4, #1
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	e007      	b.n	80092f6 <_strtol_l.isra.0+0x106>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d000      	beq.n	80092ee <_strtol_l.isra.0+0xfe>
 80092ec:	4240      	negs	r0, r0
 80092ee:	2f00      	cmp	r7, #0
 80092f0:	d0af      	beq.n	8009252 <_strtol_l.isra.0+0x62>
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1f4      	bne.n	80092e0 <_strtol_l.isra.0+0xf0>
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	603b      	str	r3, [r7, #0]
 80092fa:	e7aa      	b.n	8009252 <_strtol_l.isra.0+0x62>
 80092fc:	08009eb1 	.word	0x08009eb1
 8009300:	7fffffff 	.word	0x7fffffff

08009304 <strtol>:
 8009304:	b510      	push	{r4, lr}
 8009306:	4c04      	ldr	r4, [pc, #16]	@ (8009318 <strtol+0x14>)
 8009308:	0013      	movs	r3, r2
 800930a:	000a      	movs	r2, r1
 800930c:	0001      	movs	r1, r0
 800930e:	6820      	ldr	r0, [r4, #0]
 8009310:	f7ff ff6e 	bl	80091f0 <_strtol_l.isra.0>
 8009314:	bd10      	pop	{r4, pc}
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	2000004c 	.word	0x2000004c

0800931c <sniprintf>:
 800931c:	b40c      	push	{r2, r3}
 800931e:	b530      	push	{r4, r5, lr}
 8009320:	4b18      	ldr	r3, [pc, #96]	@ (8009384 <sniprintf+0x68>)
 8009322:	000c      	movs	r4, r1
 8009324:	681d      	ldr	r5, [r3, #0]
 8009326:	b09d      	sub	sp, #116	@ 0x74
 8009328:	2900      	cmp	r1, #0
 800932a:	da08      	bge.n	800933e <sniprintf+0x22>
 800932c:	238b      	movs	r3, #139	@ 0x8b
 800932e:	2001      	movs	r0, #1
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	4240      	negs	r0, r0
 8009334:	b01d      	add	sp, #116	@ 0x74
 8009336:	bc30      	pop	{r4, r5}
 8009338:	bc08      	pop	{r3}
 800933a:	b002      	add	sp, #8
 800933c:	4718      	bx	r3
 800933e:	2382      	movs	r3, #130	@ 0x82
 8009340:	466a      	mov	r2, sp
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	8293      	strh	r3, [r2, #20]
 8009346:	2300      	movs	r3, #0
 8009348:	9002      	str	r0, [sp, #8]
 800934a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800934c:	9006      	str	r0, [sp, #24]
 800934e:	4299      	cmp	r1, r3
 8009350:	d000      	beq.n	8009354 <sniprintf+0x38>
 8009352:	1e4b      	subs	r3, r1, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	2301      	movs	r3, #1
 800935a:	466a      	mov	r2, sp
 800935c:	425b      	negs	r3, r3
 800935e:	82d3      	strh	r3, [r2, #22]
 8009360:	0028      	movs	r0, r5
 8009362:	ab21      	add	r3, sp, #132	@ 0x84
 8009364:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009366:	a902      	add	r1, sp, #8
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	f000 f9a5 	bl	80096b8 <_svfiprintf_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	da01      	bge.n	8009376 <sniprintf+0x5a>
 8009372:	238b      	movs	r3, #139	@ 0x8b
 8009374:	602b      	str	r3, [r5, #0]
 8009376:	2c00      	cmp	r4, #0
 8009378:	d0dc      	beq.n	8009334 <sniprintf+0x18>
 800937a:	2200      	movs	r2, #0
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	e7d8      	b.n	8009334 <sniprintf+0x18>
 8009382:	46c0      	nop			@ (mov r8, r8)
 8009384:	2000004c 	.word	0x2000004c

08009388 <memset>:
 8009388:	0003      	movs	r3, r0
 800938a:	1882      	adds	r2, r0, r2
 800938c:	4293      	cmp	r3, r2
 800938e:	d100      	bne.n	8009392 <memset+0xa>
 8009390:	4770      	bx	lr
 8009392:	7019      	strb	r1, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	e7f9      	b.n	800938c <memset+0x4>

08009398 <__errno>:
 8009398:	4b01      	ldr	r3, [pc, #4]	@ (80093a0 <__errno+0x8>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	4770      	bx	lr
 800939e:	46c0      	nop			@ (mov r8, r8)
 80093a0:	2000004c 	.word	0x2000004c

080093a4 <__libc_init_array>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	2600      	movs	r6, #0
 80093a8:	4c0c      	ldr	r4, [pc, #48]	@ (80093dc <__libc_init_array+0x38>)
 80093aa:	4d0d      	ldr	r5, [pc, #52]	@ (80093e0 <__libc_init_array+0x3c>)
 80093ac:	1b64      	subs	r4, r4, r5
 80093ae:	10a4      	asrs	r4, r4, #2
 80093b0:	42a6      	cmp	r6, r4
 80093b2:	d109      	bne.n	80093c8 <__libc_init_array+0x24>
 80093b4:	2600      	movs	r6, #0
 80093b6:	f000 fc69 	bl	8009c8c <_init>
 80093ba:	4c0a      	ldr	r4, [pc, #40]	@ (80093e4 <__libc_init_array+0x40>)
 80093bc:	4d0a      	ldr	r5, [pc, #40]	@ (80093e8 <__libc_init_array+0x44>)
 80093be:	1b64      	subs	r4, r4, r5
 80093c0:	10a4      	asrs	r4, r4, #2
 80093c2:	42a6      	cmp	r6, r4
 80093c4:	d105      	bne.n	80093d2 <__libc_init_array+0x2e>
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	00b3      	lsls	r3, r6, #2
 80093ca:	58eb      	ldr	r3, [r5, r3]
 80093cc:	4798      	blx	r3
 80093ce:	3601      	adds	r6, #1
 80093d0:	e7ee      	b.n	80093b0 <__libc_init_array+0xc>
 80093d2:	00b3      	lsls	r3, r6, #2
 80093d4:	58eb      	ldr	r3, [r5, r3]
 80093d6:	4798      	blx	r3
 80093d8:	3601      	adds	r6, #1
 80093da:	e7f2      	b.n	80093c2 <__libc_init_array+0x1e>
 80093dc:	08009fec 	.word	0x08009fec
 80093e0:	08009fec 	.word	0x08009fec
 80093e4:	08009ff0 	.word	0x08009ff0
 80093e8:	08009fec 	.word	0x08009fec

080093ec <__retarget_lock_acquire_recursive>:
 80093ec:	4770      	bx	lr

080093ee <__retarget_lock_release_recursive>:
 80093ee:	4770      	bx	lr

080093f0 <strcpy>:
 80093f0:	0003      	movs	r3, r0
 80093f2:	780a      	ldrb	r2, [r1, #0]
 80093f4:	3101      	adds	r1, #1
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	d1f9      	bne.n	80093f2 <strcpy+0x2>
 80093fe:	4770      	bx	lr

08009400 <_free_r>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	0005      	movs	r5, r0
 8009404:	1e0c      	subs	r4, r1, #0
 8009406:	d010      	beq.n	800942a <_free_r+0x2a>
 8009408:	3c04      	subs	r4, #4
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	da00      	bge.n	8009412 <_free_r+0x12>
 8009410:	18e4      	adds	r4, r4, r3
 8009412:	0028      	movs	r0, r5
 8009414:	f000 f8e0 	bl	80095d8 <__malloc_lock>
 8009418:	4a1d      	ldr	r2, [pc, #116]	@ (8009490 <_free_r+0x90>)
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <_free_r+0x2c>
 8009420:	6063      	str	r3, [r4, #4]
 8009422:	6014      	str	r4, [r2, #0]
 8009424:	0028      	movs	r0, r5
 8009426:	f000 f8df 	bl	80095e8 <__malloc_unlock>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	42a3      	cmp	r3, r4
 800942e:	d908      	bls.n	8009442 <_free_r+0x42>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	1821      	adds	r1, r4, r0
 8009434:	428b      	cmp	r3, r1
 8009436:	d1f3      	bne.n	8009420 <_free_r+0x20>
 8009438:	6819      	ldr	r1, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	1809      	adds	r1, r1, r0
 800943e:	6021      	str	r1, [r4, #0]
 8009440:	e7ee      	b.n	8009420 <_free_r+0x20>
 8009442:	001a      	movs	r2, r3
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <_free_r+0x4e>
 800944a:	42a3      	cmp	r3, r4
 800944c:	d9f9      	bls.n	8009442 <_free_r+0x42>
 800944e:	6811      	ldr	r1, [r2, #0]
 8009450:	1850      	adds	r0, r2, r1
 8009452:	42a0      	cmp	r0, r4
 8009454:	d10b      	bne.n	800946e <_free_r+0x6e>
 8009456:	6820      	ldr	r0, [r4, #0]
 8009458:	1809      	adds	r1, r1, r0
 800945a:	1850      	adds	r0, r2, r1
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	4283      	cmp	r3, r0
 8009460:	d1e0      	bne.n	8009424 <_free_r+0x24>
 8009462:	6818      	ldr	r0, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	1841      	adds	r1, r0, r1
 8009468:	6011      	str	r1, [r2, #0]
 800946a:	6053      	str	r3, [r2, #4]
 800946c:	e7da      	b.n	8009424 <_free_r+0x24>
 800946e:	42a0      	cmp	r0, r4
 8009470:	d902      	bls.n	8009478 <_free_r+0x78>
 8009472:	230c      	movs	r3, #12
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	e7d5      	b.n	8009424 <_free_r+0x24>
 8009478:	6820      	ldr	r0, [r4, #0]
 800947a:	1821      	adds	r1, r4, r0
 800947c:	428b      	cmp	r3, r1
 800947e:	d103      	bne.n	8009488 <_free_r+0x88>
 8009480:	6819      	ldr	r1, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	1809      	adds	r1, r1, r0
 8009486:	6021      	str	r1, [r4, #0]
 8009488:	6063      	str	r3, [r4, #4]
 800948a:	6054      	str	r4, [r2, #4]
 800948c:	e7ca      	b.n	8009424 <_free_r+0x24>
 800948e:	46c0      	nop			@ (mov r8, r8)
 8009490:	200005a4 	.word	0x200005a4

08009494 <sbrk_aligned>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4e0f      	ldr	r6, [pc, #60]	@ (80094d4 <sbrk_aligned+0x40>)
 8009498:	000d      	movs	r5, r1
 800949a:	6831      	ldr	r1, [r6, #0]
 800949c:	0004      	movs	r4, r0
 800949e:	2900      	cmp	r1, #0
 80094a0:	d102      	bne.n	80094a8 <sbrk_aligned+0x14>
 80094a2:	f000 fb95 	bl	8009bd0 <_sbrk_r>
 80094a6:	6030      	str	r0, [r6, #0]
 80094a8:	0029      	movs	r1, r5
 80094aa:	0020      	movs	r0, r4
 80094ac:	f000 fb90 	bl	8009bd0 <_sbrk_r>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d103      	bne.n	80094bc <sbrk_aligned+0x28>
 80094b4:	2501      	movs	r5, #1
 80094b6:	426d      	negs	r5, r5
 80094b8:	0028      	movs	r0, r5
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	2303      	movs	r3, #3
 80094be:	1cc5      	adds	r5, r0, #3
 80094c0:	439d      	bics	r5, r3
 80094c2:	42a8      	cmp	r0, r5
 80094c4:	d0f8      	beq.n	80094b8 <sbrk_aligned+0x24>
 80094c6:	1a29      	subs	r1, r5, r0
 80094c8:	0020      	movs	r0, r4
 80094ca:	f000 fb81 	bl	8009bd0 <_sbrk_r>
 80094ce:	3001      	adds	r0, #1
 80094d0:	d1f2      	bne.n	80094b8 <sbrk_aligned+0x24>
 80094d2:	e7ef      	b.n	80094b4 <sbrk_aligned+0x20>
 80094d4:	200005a0 	.word	0x200005a0

080094d8 <_malloc_r>:
 80094d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094da:	2203      	movs	r2, #3
 80094dc:	1ccb      	adds	r3, r1, #3
 80094de:	4393      	bics	r3, r2
 80094e0:	3308      	adds	r3, #8
 80094e2:	0005      	movs	r5, r0
 80094e4:	001f      	movs	r7, r3
 80094e6:	2b0c      	cmp	r3, #12
 80094e8:	d234      	bcs.n	8009554 <_malloc_r+0x7c>
 80094ea:	270c      	movs	r7, #12
 80094ec:	42b9      	cmp	r1, r7
 80094ee:	d833      	bhi.n	8009558 <_malloc_r+0x80>
 80094f0:	0028      	movs	r0, r5
 80094f2:	f000 f871 	bl	80095d8 <__malloc_lock>
 80094f6:	4e37      	ldr	r6, [pc, #220]	@ (80095d4 <_malloc_r+0xfc>)
 80094f8:	6833      	ldr	r3, [r6, #0]
 80094fa:	001c      	movs	r4, r3
 80094fc:	2c00      	cmp	r4, #0
 80094fe:	d12f      	bne.n	8009560 <_malloc_r+0x88>
 8009500:	0039      	movs	r1, r7
 8009502:	0028      	movs	r0, r5
 8009504:	f7ff ffc6 	bl	8009494 <sbrk_aligned>
 8009508:	0004      	movs	r4, r0
 800950a:	1c43      	adds	r3, r0, #1
 800950c:	d15f      	bne.n	80095ce <_malloc_r+0xf6>
 800950e:	6834      	ldr	r4, [r6, #0]
 8009510:	9400      	str	r4, [sp, #0]
 8009512:	9b00      	ldr	r3, [sp, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d14a      	bne.n	80095ae <_malloc_r+0xd6>
 8009518:	2c00      	cmp	r4, #0
 800951a:	d052      	beq.n	80095c2 <_malloc_r+0xea>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	0028      	movs	r0, r5
 8009520:	18e3      	adds	r3, r4, r3
 8009522:	9900      	ldr	r1, [sp, #0]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	f000 fb53 	bl	8009bd0 <_sbrk_r>
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	4283      	cmp	r3, r0
 800952e:	d148      	bne.n	80095c2 <_malloc_r+0xea>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	0028      	movs	r0, r5
 8009534:	1aff      	subs	r7, r7, r3
 8009536:	0039      	movs	r1, r7
 8009538:	f7ff ffac 	bl	8009494 <sbrk_aligned>
 800953c:	3001      	adds	r0, #1
 800953e:	d040      	beq.n	80095c2 <_malloc_r+0xea>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	19db      	adds	r3, r3, r7
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	6833      	ldr	r3, [r6, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	2a00      	cmp	r2, #0
 800954c:	d133      	bne.n	80095b6 <_malloc_r+0xde>
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	6033      	str	r3, [r6, #0]
 8009552:	e019      	b.n	8009588 <_malloc_r+0xb0>
 8009554:	2b00      	cmp	r3, #0
 8009556:	dac9      	bge.n	80094ec <_malloc_r+0x14>
 8009558:	230c      	movs	r3, #12
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	2000      	movs	r0, #0
 800955e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009560:	6821      	ldr	r1, [r4, #0]
 8009562:	1bc9      	subs	r1, r1, r7
 8009564:	d420      	bmi.n	80095a8 <_malloc_r+0xd0>
 8009566:	290b      	cmp	r1, #11
 8009568:	d90a      	bls.n	8009580 <_malloc_r+0xa8>
 800956a:	19e2      	adds	r2, r4, r7
 800956c:	6027      	str	r7, [r4, #0]
 800956e:	42a3      	cmp	r3, r4
 8009570:	d104      	bne.n	800957c <_malloc_r+0xa4>
 8009572:	6032      	str	r2, [r6, #0]
 8009574:	6863      	ldr	r3, [r4, #4]
 8009576:	6011      	str	r1, [r2, #0]
 8009578:	6053      	str	r3, [r2, #4]
 800957a:	e005      	b.n	8009588 <_malloc_r+0xb0>
 800957c:	605a      	str	r2, [r3, #4]
 800957e:	e7f9      	b.n	8009574 <_malloc_r+0x9c>
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	42a3      	cmp	r3, r4
 8009584:	d10e      	bne.n	80095a4 <_malloc_r+0xcc>
 8009586:	6032      	str	r2, [r6, #0]
 8009588:	0028      	movs	r0, r5
 800958a:	f000 f82d 	bl	80095e8 <__malloc_unlock>
 800958e:	0020      	movs	r0, r4
 8009590:	2207      	movs	r2, #7
 8009592:	300b      	adds	r0, #11
 8009594:	1d23      	adds	r3, r4, #4
 8009596:	4390      	bics	r0, r2
 8009598:	1ac2      	subs	r2, r0, r3
 800959a:	4298      	cmp	r0, r3
 800959c:	d0df      	beq.n	800955e <_malloc_r+0x86>
 800959e:	1a1b      	subs	r3, r3, r0
 80095a0:	50a3      	str	r3, [r4, r2]
 80095a2:	e7dc      	b.n	800955e <_malloc_r+0x86>
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	e7ef      	b.n	8009588 <_malloc_r+0xb0>
 80095a8:	0023      	movs	r3, r4
 80095aa:	6864      	ldr	r4, [r4, #4]
 80095ac:	e7a6      	b.n	80094fc <_malloc_r+0x24>
 80095ae:	9c00      	ldr	r4, [sp, #0]
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	e7ad      	b.n	8009512 <_malloc_r+0x3a>
 80095b6:	001a      	movs	r2, r3
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	42a3      	cmp	r3, r4
 80095bc:	d1fb      	bne.n	80095b6 <_malloc_r+0xde>
 80095be:	2300      	movs	r3, #0
 80095c0:	e7da      	b.n	8009578 <_malloc_r+0xa0>
 80095c2:	230c      	movs	r3, #12
 80095c4:	0028      	movs	r0, r5
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f000 f80e 	bl	80095e8 <__malloc_unlock>
 80095cc:	e7c6      	b.n	800955c <_malloc_r+0x84>
 80095ce:	6007      	str	r7, [r0, #0]
 80095d0:	e7da      	b.n	8009588 <_malloc_r+0xb0>
 80095d2:	46c0      	nop			@ (mov r8, r8)
 80095d4:	200005a4 	.word	0x200005a4

080095d8 <__malloc_lock>:
 80095d8:	b510      	push	{r4, lr}
 80095da:	4802      	ldr	r0, [pc, #8]	@ (80095e4 <__malloc_lock+0xc>)
 80095dc:	f7ff ff06 	bl	80093ec <__retarget_lock_acquire_recursive>
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	46c0      	nop			@ (mov r8, r8)
 80095e4:	2000059c 	.word	0x2000059c

080095e8 <__malloc_unlock>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4802      	ldr	r0, [pc, #8]	@ (80095f4 <__malloc_unlock+0xc>)
 80095ec:	f7ff feff 	bl	80093ee <__retarget_lock_release_recursive>
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	46c0      	nop			@ (mov r8, r8)
 80095f4:	2000059c 	.word	0x2000059c

080095f8 <__ssputs_r>:
 80095f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095fa:	688e      	ldr	r6, [r1, #8]
 80095fc:	b085      	sub	sp, #20
 80095fe:	001f      	movs	r7, r3
 8009600:	000c      	movs	r4, r1
 8009602:	680b      	ldr	r3, [r1, #0]
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	9203      	str	r2, [sp, #12]
 8009608:	42be      	cmp	r6, r7
 800960a:	d830      	bhi.n	800966e <__ssputs_r+0x76>
 800960c:	210c      	movs	r1, #12
 800960e:	5e62      	ldrsh	r2, [r4, r1]
 8009610:	2190      	movs	r1, #144	@ 0x90
 8009612:	00c9      	lsls	r1, r1, #3
 8009614:	420a      	tst	r2, r1
 8009616:	d028      	beq.n	800966a <__ssputs_r+0x72>
 8009618:	2003      	movs	r0, #3
 800961a:	6921      	ldr	r1, [r4, #16]
 800961c:	1a5b      	subs	r3, r3, r1
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	6963      	ldr	r3, [r4, #20]
 8009622:	4343      	muls	r3, r0
 8009624:	9801      	ldr	r0, [sp, #4]
 8009626:	0fdd      	lsrs	r5, r3, #31
 8009628:	18ed      	adds	r5, r5, r3
 800962a:	1c7b      	adds	r3, r7, #1
 800962c:	181b      	adds	r3, r3, r0
 800962e:	106d      	asrs	r5, r5, #1
 8009630:	42ab      	cmp	r3, r5
 8009632:	d900      	bls.n	8009636 <__ssputs_r+0x3e>
 8009634:	001d      	movs	r5, r3
 8009636:	0552      	lsls	r2, r2, #21
 8009638:	d528      	bpl.n	800968c <__ssputs_r+0x94>
 800963a:	0029      	movs	r1, r5
 800963c:	9802      	ldr	r0, [sp, #8]
 800963e:	f7ff ff4b 	bl	80094d8 <_malloc_r>
 8009642:	1e06      	subs	r6, r0, #0
 8009644:	d02c      	beq.n	80096a0 <__ssputs_r+0xa8>
 8009646:	9a01      	ldr	r2, [sp, #4]
 8009648:	6921      	ldr	r1, [r4, #16]
 800964a:	f000 fade 	bl	8009c0a <memcpy>
 800964e:	89a2      	ldrh	r2, [r4, #12]
 8009650:	4b18      	ldr	r3, [pc, #96]	@ (80096b4 <__ssputs_r+0xbc>)
 8009652:	401a      	ands	r2, r3
 8009654:	2380      	movs	r3, #128	@ 0x80
 8009656:	4313      	orrs	r3, r2
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	6126      	str	r6, [r4, #16]
 800965e:	18f6      	adds	r6, r6, r3
 8009660:	6026      	str	r6, [r4, #0]
 8009662:	003e      	movs	r6, r7
 8009664:	6165      	str	r5, [r4, #20]
 8009666:	1aed      	subs	r5, r5, r3
 8009668:	60a5      	str	r5, [r4, #8]
 800966a:	42be      	cmp	r6, r7
 800966c:	d900      	bls.n	8009670 <__ssputs_r+0x78>
 800966e:	003e      	movs	r6, r7
 8009670:	0032      	movs	r2, r6
 8009672:	9903      	ldr	r1, [sp, #12]
 8009674:	6820      	ldr	r0, [r4, #0]
 8009676:	f000 fa99 	bl	8009bac <memmove>
 800967a:	2000      	movs	r0, #0
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	1b9b      	subs	r3, r3, r6
 8009680:	60a3      	str	r3, [r4, #8]
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	199b      	adds	r3, r3, r6
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	b005      	add	sp, #20
 800968a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968c:	002a      	movs	r2, r5
 800968e:	9802      	ldr	r0, [sp, #8]
 8009690:	f000 fac4 	bl	8009c1c <_realloc_r>
 8009694:	1e06      	subs	r6, r0, #0
 8009696:	d1e0      	bne.n	800965a <__ssputs_r+0x62>
 8009698:	6921      	ldr	r1, [r4, #16]
 800969a:	9802      	ldr	r0, [sp, #8]
 800969c:	f7ff feb0 	bl	8009400 <_free_r>
 80096a0:	230c      	movs	r3, #12
 80096a2:	2001      	movs	r0, #1
 80096a4:	9a02      	ldr	r2, [sp, #8]
 80096a6:	4240      	negs	r0, r0
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	89a2      	ldrh	r2, [r4, #12]
 80096ac:	3334      	adds	r3, #52	@ 0x34
 80096ae:	4313      	orrs	r3, r2
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	e7e9      	b.n	8009688 <__ssputs_r+0x90>
 80096b4:	fffffb7f 	.word	0xfffffb7f

080096b8 <_svfiprintf_r>:
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	b0a1      	sub	sp, #132	@ 0x84
 80096bc:	9003      	str	r0, [sp, #12]
 80096be:	001d      	movs	r5, r3
 80096c0:	898b      	ldrh	r3, [r1, #12]
 80096c2:	000f      	movs	r7, r1
 80096c4:	0016      	movs	r6, r2
 80096c6:	061b      	lsls	r3, r3, #24
 80096c8:	d511      	bpl.n	80096ee <_svfiprintf_r+0x36>
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10e      	bne.n	80096ee <_svfiprintf_r+0x36>
 80096d0:	2140      	movs	r1, #64	@ 0x40
 80096d2:	f7ff ff01 	bl	80094d8 <_malloc_r>
 80096d6:	6038      	str	r0, [r7, #0]
 80096d8:	6138      	str	r0, [r7, #16]
 80096da:	2800      	cmp	r0, #0
 80096dc:	d105      	bne.n	80096ea <_svfiprintf_r+0x32>
 80096de:	230c      	movs	r3, #12
 80096e0:	9a03      	ldr	r2, [sp, #12]
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	2001      	movs	r0, #1
 80096e6:	4240      	negs	r0, r0
 80096e8:	e0cf      	b.n	800988a <_svfiprintf_r+0x1d2>
 80096ea:	2340      	movs	r3, #64	@ 0x40
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	2300      	movs	r3, #0
 80096f0:	ac08      	add	r4, sp, #32
 80096f2:	6163      	str	r3, [r4, #20]
 80096f4:	3320      	adds	r3, #32
 80096f6:	7663      	strb	r3, [r4, #25]
 80096f8:	3310      	adds	r3, #16
 80096fa:	76a3      	strb	r3, [r4, #26]
 80096fc:	9507      	str	r5, [sp, #28]
 80096fe:	0035      	movs	r5, r6
 8009700:	782b      	ldrb	r3, [r5, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <_svfiprintf_r+0x52>
 8009706:	2b25      	cmp	r3, #37	@ 0x25
 8009708:	d148      	bne.n	800979c <_svfiprintf_r+0xe4>
 800970a:	1bab      	subs	r3, r5, r6
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	42b5      	cmp	r5, r6
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x72>
 8009712:	0032      	movs	r2, r6
 8009714:	0039      	movs	r1, r7
 8009716:	9803      	ldr	r0, [sp, #12]
 8009718:	f7ff ff6e 	bl	80095f8 <__ssputs_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d100      	bne.n	8009722 <_svfiprintf_r+0x6a>
 8009720:	e0ae      	b.n	8009880 <_svfiprintf_r+0x1c8>
 8009722:	6963      	ldr	r3, [r4, #20]
 8009724:	9a05      	ldr	r2, [sp, #20]
 8009726:	189b      	adds	r3, r3, r2
 8009728:	6163      	str	r3, [r4, #20]
 800972a:	782b      	ldrb	r3, [r5, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d100      	bne.n	8009732 <_svfiprintf_r+0x7a>
 8009730:	e0a6      	b.n	8009880 <_svfiprintf_r+0x1c8>
 8009732:	2201      	movs	r2, #1
 8009734:	2300      	movs	r3, #0
 8009736:	4252      	negs	r2, r2
 8009738:	6062      	str	r2, [r4, #4]
 800973a:	a904      	add	r1, sp, #16
 800973c:	3254      	adds	r2, #84	@ 0x54
 800973e:	1852      	adds	r2, r2, r1
 8009740:	1c6e      	adds	r6, r5, #1
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	60e3      	str	r3, [r4, #12]
 8009746:	60a3      	str	r3, [r4, #8]
 8009748:	7013      	strb	r3, [r2, #0]
 800974a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800974c:	4b54      	ldr	r3, [pc, #336]	@ (80098a0 <_svfiprintf_r+0x1e8>)
 800974e:	2205      	movs	r2, #5
 8009750:	0018      	movs	r0, r3
 8009752:	7831      	ldrb	r1, [r6, #0]
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f000 fa4d 	bl	8009bf4 <memchr>
 800975a:	1c75      	adds	r5, r6, #1
 800975c:	2800      	cmp	r0, #0
 800975e:	d11f      	bne.n	80097a0 <_svfiprintf_r+0xe8>
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	06d3      	lsls	r3, r2, #27
 8009764:	d504      	bpl.n	8009770 <_svfiprintf_r+0xb8>
 8009766:	2353      	movs	r3, #83	@ 0x53
 8009768:	a904      	add	r1, sp, #16
 800976a:	185b      	adds	r3, r3, r1
 800976c:	2120      	movs	r1, #32
 800976e:	7019      	strb	r1, [r3, #0]
 8009770:	0713      	lsls	r3, r2, #28
 8009772:	d504      	bpl.n	800977e <_svfiprintf_r+0xc6>
 8009774:	2353      	movs	r3, #83	@ 0x53
 8009776:	a904      	add	r1, sp, #16
 8009778:	185b      	adds	r3, r3, r1
 800977a:	212b      	movs	r1, #43	@ 0x2b
 800977c:	7019      	strb	r1, [r3, #0]
 800977e:	7833      	ldrb	r3, [r6, #0]
 8009780:	2b2a      	cmp	r3, #42	@ 0x2a
 8009782:	d016      	beq.n	80097b2 <_svfiprintf_r+0xfa>
 8009784:	0035      	movs	r5, r6
 8009786:	2100      	movs	r1, #0
 8009788:	200a      	movs	r0, #10
 800978a:	68e3      	ldr	r3, [r4, #12]
 800978c:	782a      	ldrb	r2, [r5, #0]
 800978e:	1c6e      	adds	r6, r5, #1
 8009790:	3a30      	subs	r2, #48	@ 0x30
 8009792:	2a09      	cmp	r2, #9
 8009794:	d950      	bls.n	8009838 <_svfiprintf_r+0x180>
 8009796:	2900      	cmp	r1, #0
 8009798:	d111      	bne.n	80097be <_svfiprintf_r+0x106>
 800979a:	e017      	b.n	80097cc <_svfiprintf_r+0x114>
 800979c:	3501      	adds	r5, #1
 800979e:	e7af      	b.n	8009700 <_svfiprintf_r+0x48>
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	1ac0      	subs	r0, r0, r3
 80097a6:	2301      	movs	r3, #1
 80097a8:	4083      	lsls	r3, r0
 80097aa:	4313      	orrs	r3, r2
 80097ac:	002e      	movs	r6, r5
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	e7cc      	b.n	800974c <_svfiprintf_r+0x94>
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	1d19      	adds	r1, r3, #4
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	9107      	str	r1, [sp, #28]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	db01      	blt.n	80097c2 <_svfiprintf_r+0x10a>
 80097be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097c0:	e004      	b.n	80097cc <_svfiprintf_r+0x114>
 80097c2:	425b      	negs	r3, r3
 80097c4:	60e3      	str	r3, [r4, #12]
 80097c6:	2302      	movs	r3, #2
 80097c8:	4313      	orrs	r3, r2
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	782b      	ldrb	r3, [r5, #0]
 80097ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80097d0:	d10c      	bne.n	80097ec <_svfiprintf_r+0x134>
 80097d2:	786b      	ldrb	r3, [r5, #1]
 80097d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d6:	d134      	bne.n	8009842 <_svfiprintf_r+0x18a>
 80097d8:	9b07      	ldr	r3, [sp, #28]
 80097da:	3502      	adds	r5, #2
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	9207      	str	r2, [sp, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da01      	bge.n	80097ea <_svfiprintf_r+0x132>
 80097e6:	2301      	movs	r3, #1
 80097e8:	425b      	negs	r3, r3
 80097ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ec:	4e2d      	ldr	r6, [pc, #180]	@ (80098a4 <_svfiprintf_r+0x1ec>)
 80097ee:	2203      	movs	r2, #3
 80097f0:	0030      	movs	r0, r6
 80097f2:	7829      	ldrb	r1, [r5, #0]
 80097f4:	f000 f9fe 	bl	8009bf4 <memchr>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d006      	beq.n	800980a <_svfiprintf_r+0x152>
 80097fc:	2340      	movs	r3, #64	@ 0x40
 80097fe:	1b80      	subs	r0, r0, r6
 8009800:	4083      	lsls	r3, r0
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	3501      	adds	r5, #1
 8009806:	4313      	orrs	r3, r2
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	7829      	ldrb	r1, [r5, #0]
 800980c:	2206      	movs	r2, #6
 800980e:	4826      	ldr	r0, [pc, #152]	@ (80098a8 <_svfiprintf_r+0x1f0>)
 8009810:	1c6e      	adds	r6, r5, #1
 8009812:	7621      	strb	r1, [r4, #24]
 8009814:	f000 f9ee 	bl	8009bf4 <memchr>
 8009818:	2800      	cmp	r0, #0
 800981a:	d038      	beq.n	800988e <_svfiprintf_r+0x1d6>
 800981c:	4b23      	ldr	r3, [pc, #140]	@ (80098ac <_svfiprintf_r+0x1f4>)
 800981e:	2b00      	cmp	r3, #0
 8009820:	d122      	bne.n	8009868 <_svfiprintf_r+0x1b0>
 8009822:	2207      	movs	r2, #7
 8009824:	9b07      	ldr	r3, [sp, #28]
 8009826:	3307      	adds	r3, #7
 8009828:	4393      	bics	r3, r2
 800982a:	3308      	adds	r3, #8
 800982c:	9307      	str	r3, [sp, #28]
 800982e:	6963      	ldr	r3, [r4, #20]
 8009830:	9a04      	ldr	r2, [sp, #16]
 8009832:	189b      	adds	r3, r3, r2
 8009834:	6163      	str	r3, [r4, #20]
 8009836:	e762      	b.n	80096fe <_svfiprintf_r+0x46>
 8009838:	4343      	muls	r3, r0
 800983a:	0035      	movs	r5, r6
 800983c:	2101      	movs	r1, #1
 800983e:	189b      	adds	r3, r3, r2
 8009840:	e7a4      	b.n	800978c <_svfiprintf_r+0xd4>
 8009842:	2300      	movs	r3, #0
 8009844:	200a      	movs	r0, #10
 8009846:	0019      	movs	r1, r3
 8009848:	3501      	adds	r5, #1
 800984a:	6063      	str	r3, [r4, #4]
 800984c:	782a      	ldrb	r2, [r5, #0]
 800984e:	1c6e      	adds	r6, r5, #1
 8009850:	3a30      	subs	r2, #48	@ 0x30
 8009852:	2a09      	cmp	r2, #9
 8009854:	d903      	bls.n	800985e <_svfiprintf_r+0x1a6>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0c8      	beq.n	80097ec <_svfiprintf_r+0x134>
 800985a:	9109      	str	r1, [sp, #36]	@ 0x24
 800985c:	e7c6      	b.n	80097ec <_svfiprintf_r+0x134>
 800985e:	4341      	muls	r1, r0
 8009860:	0035      	movs	r5, r6
 8009862:	2301      	movs	r3, #1
 8009864:	1889      	adds	r1, r1, r2
 8009866:	e7f1      	b.n	800984c <_svfiprintf_r+0x194>
 8009868:	aa07      	add	r2, sp, #28
 800986a:	9200      	str	r2, [sp, #0]
 800986c:	0021      	movs	r1, r4
 800986e:	003a      	movs	r2, r7
 8009870:	4b0f      	ldr	r3, [pc, #60]	@ (80098b0 <_svfiprintf_r+0x1f8>)
 8009872:	9803      	ldr	r0, [sp, #12]
 8009874:	e000      	b.n	8009878 <_svfiprintf_r+0x1c0>
 8009876:	bf00      	nop
 8009878:	9004      	str	r0, [sp, #16]
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	d1d6      	bne.n	800982e <_svfiprintf_r+0x176>
 8009880:	89bb      	ldrh	r3, [r7, #12]
 8009882:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009884:	065b      	lsls	r3, r3, #25
 8009886:	d500      	bpl.n	800988a <_svfiprintf_r+0x1d2>
 8009888:	e72c      	b.n	80096e4 <_svfiprintf_r+0x2c>
 800988a:	b021      	add	sp, #132	@ 0x84
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988e:	aa07      	add	r2, sp, #28
 8009890:	9200      	str	r2, [sp, #0]
 8009892:	0021      	movs	r1, r4
 8009894:	003a      	movs	r2, r7
 8009896:	4b06      	ldr	r3, [pc, #24]	@ (80098b0 <_svfiprintf_r+0x1f8>)
 8009898:	9803      	ldr	r0, [sp, #12]
 800989a:	f000 f87b 	bl	8009994 <_printf_i>
 800989e:	e7eb      	b.n	8009878 <_svfiprintf_r+0x1c0>
 80098a0:	08009fb1 	.word	0x08009fb1
 80098a4:	08009fb7 	.word	0x08009fb7
 80098a8:	08009fbb 	.word	0x08009fbb
 80098ac:	00000000 	.word	0x00000000
 80098b0:	080095f9 	.word	0x080095f9

080098b4 <_printf_common>:
 80098b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b6:	0016      	movs	r6, r2
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	688a      	ldr	r2, [r1, #8]
 80098bc:	690b      	ldr	r3, [r1, #16]
 80098be:	000c      	movs	r4, r1
 80098c0:	9000      	str	r0, [sp, #0]
 80098c2:	4293      	cmp	r3, r2
 80098c4:	da00      	bge.n	80098c8 <_printf_common+0x14>
 80098c6:	0013      	movs	r3, r2
 80098c8:	0022      	movs	r2, r4
 80098ca:	6033      	str	r3, [r6, #0]
 80098cc:	3243      	adds	r2, #67	@ 0x43
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	d001      	beq.n	80098d8 <_printf_common+0x24>
 80098d4:	3301      	adds	r3, #1
 80098d6:	6033      	str	r3, [r6, #0]
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	069b      	lsls	r3, r3, #26
 80098dc:	d502      	bpl.n	80098e4 <_printf_common+0x30>
 80098de:	6833      	ldr	r3, [r6, #0]
 80098e0:	3302      	adds	r3, #2
 80098e2:	6033      	str	r3, [r6, #0]
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	2306      	movs	r3, #6
 80098e8:	0015      	movs	r5, r2
 80098ea:	401d      	ands	r5, r3
 80098ec:	421a      	tst	r2, r3
 80098ee:	d027      	beq.n	8009940 <_printf_common+0x8c>
 80098f0:	0023      	movs	r3, r4
 80098f2:	3343      	adds	r3, #67	@ 0x43
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	4193      	sbcs	r3, r2
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	0692      	lsls	r2, r2, #26
 80098fe:	d430      	bmi.n	8009962 <_printf_common+0xae>
 8009900:	0022      	movs	r2, r4
 8009902:	9901      	ldr	r1, [sp, #4]
 8009904:	9800      	ldr	r0, [sp, #0]
 8009906:	9d08      	ldr	r5, [sp, #32]
 8009908:	3243      	adds	r2, #67	@ 0x43
 800990a:	47a8      	blx	r5
 800990c:	3001      	adds	r0, #1
 800990e:	d025      	beq.n	800995c <_printf_common+0xa8>
 8009910:	2206      	movs	r2, #6
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	2500      	movs	r5, #0
 8009916:	4013      	ands	r3, r2
 8009918:	2b04      	cmp	r3, #4
 800991a:	d105      	bne.n	8009928 <_printf_common+0x74>
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	68e5      	ldr	r5, [r4, #12]
 8009920:	1aed      	subs	r5, r5, r3
 8009922:	43eb      	mvns	r3, r5
 8009924:	17db      	asrs	r3, r3, #31
 8009926:	401d      	ands	r5, r3
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	6922      	ldr	r2, [r4, #16]
 800992c:	4293      	cmp	r3, r2
 800992e:	dd01      	ble.n	8009934 <_printf_common+0x80>
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	18ed      	adds	r5, r5, r3
 8009934:	2600      	movs	r6, #0
 8009936:	42b5      	cmp	r5, r6
 8009938:	d120      	bne.n	800997c <_printf_common+0xc8>
 800993a:	2000      	movs	r0, #0
 800993c:	e010      	b.n	8009960 <_printf_common+0xac>
 800993e:	3501      	adds	r5, #1
 8009940:	68e3      	ldr	r3, [r4, #12]
 8009942:	6832      	ldr	r2, [r6, #0]
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	42ab      	cmp	r3, r5
 8009948:	ddd2      	ble.n	80098f0 <_printf_common+0x3c>
 800994a:	0022      	movs	r2, r4
 800994c:	2301      	movs	r3, #1
 800994e:	9901      	ldr	r1, [sp, #4]
 8009950:	9800      	ldr	r0, [sp, #0]
 8009952:	9f08      	ldr	r7, [sp, #32]
 8009954:	3219      	adds	r2, #25
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	d1f0      	bne.n	800993e <_printf_common+0x8a>
 800995c:	2001      	movs	r0, #1
 800995e:	4240      	negs	r0, r0
 8009960:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009962:	2030      	movs	r0, #48	@ 0x30
 8009964:	18e1      	adds	r1, r4, r3
 8009966:	3143      	adds	r1, #67	@ 0x43
 8009968:	7008      	strb	r0, [r1, #0]
 800996a:	0021      	movs	r1, r4
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	3145      	adds	r1, #69	@ 0x45
 8009970:	7809      	ldrb	r1, [r1, #0]
 8009972:	18a2      	adds	r2, r4, r2
 8009974:	3243      	adds	r2, #67	@ 0x43
 8009976:	3302      	adds	r3, #2
 8009978:	7011      	strb	r1, [r2, #0]
 800997a:	e7c1      	b.n	8009900 <_printf_common+0x4c>
 800997c:	0022      	movs	r2, r4
 800997e:	2301      	movs	r3, #1
 8009980:	9901      	ldr	r1, [sp, #4]
 8009982:	9800      	ldr	r0, [sp, #0]
 8009984:	9f08      	ldr	r7, [sp, #32]
 8009986:	321a      	adds	r2, #26
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	d0e6      	beq.n	800995c <_printf_common+0xa8>
 800998e:	3601      	adds	r6, #1
 8009990:	e7d1      	b.n	8009936 <_printf_common+0x82>
	...

08009994 <_printf_i>:
 8009994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009996:	b08b      	sub	sp, #44	@ 0x2c
 8009998:	9206      	str	r2, [sp, #24]
 800999a:	000a      	movs	r2, r1
 800999c:	3243      	adds	r2, #67	@ 0x43
 800999e:	9307      	str	r3, [sp, #28]
 80099a0:	9005      	str	r0, [sp, #20]
 80099a2:	9203      	str	r2, [sp, #12]
 80099a4:	7e0a      	ldrb	r2, [r1, #24]
 80099a6:	000c      	movs	r4, r1
 80099a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099aa:	2a78      	cmp	r2, #120	@ 0x78
 80099ac:	d809      	bhi.n	80099c2 <_printf_i+0x2e>
 80099ae:	2a62      	cmp	r2, #98	@ 0x62
 80099b0:	d80b      	bhi.n	80099ca <_printf_i+0x36>
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d100      	bne.n	80099b8 <_printf_i+0x24>
 80099b6:	e0ba      	b.n	8009b2e <_printf_i+0x19a>
 80099b8:	497a      	ldr	r1, [pc, #488]	@ (8009ba4 <_printf_i+0x210>)
 80099ba:	9104      	str	r1, [sp, #16]
 80099bc:	2a58      	cmp	r2, #88	@ 0x58
 80099be:	d100      	bne.n	80099c2 <_printf_i+0x2e>
 80099c0:	e08e      	b.n	8009ae0 <_printf_i+0x14c>
 80099c2:	0025      	movs	r5, r4
 80099c4:	3542      	adds	r5, #66	@ 0x42
 80099c6:	702a      	strb	r2, [r5, #0]
 80099c8:	e022      	b.n	8009a10 <_printf_i+0x7c>
 80099ca:	0010      	movs	r0, r2
 80099cc:	3863      	subs	r0, #99	@ 0x63
 80099ce:	2815      	cmp	r0, #21
 80099d0:	d8f7      	bhi.n	80099c2 <_printf_i+0x2e>
 80099d2:	f7f6 fb9f 	bl	8000114 <__gnu_thumb1_case_shi>
 80099d6:	0016      	.short	0x0016
 80099d8:	fff6001f 	.word	0xfff6001f
 80099dc:	fff6fff6 	.word	0xfff6fff6
 80099e0:	001ffff6 	.word	0x001ffff6
 80099e4:	fff6fff6 	.word	0xfff6fff6
 80099e8:	fff6fff6 	.word	0xfff6fff6
 80099ec:	0036009f 	.word	0x0036009f
 80099f0:	fff6007e 	.word	0xfff6007e
 80099f4:	00b0fff6 	.word	0x00b0fff6
 80099f8:	0036fff6 	.word	0x0036fff6
 80099fc:	fff6fff6 	.word	0xfff6fff6
 8009a00:	0082      	.short	0x0082
 8009a02:	0025      	movs	r5, r4
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	3542      	adds	r5, #66	@ 0x42
 8009a08:	1d11      	adds	r1, r2, #4
 8009a0a:	6019      	str	r1, [r3, #0]
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	702b      	strb	r3, [r5, #0]
 8009a10:	2301      	movs	r3, #1
 8009a12:	e09e      	b.n	8009b52 <_printf_i+0x1be>
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	6809      	ldr	r1, [r1, #0]
 8009a18:	1d02      	adds	r2, r0, #4
 8009a1a:	060d      	lsls	r5, r1, #24
 8009a1c:	d50b      	bpl.n	8009a36 <_printf_i+0xa2>
 8009a1e:	6806      	ldr	r6, [r0, #0]
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	da03      	bge.n	8009a2e <_printf_i+0x9a>
 8009a26:	232d      	movs	r3, #45	@ 0x2d
 8009a28:	9a03      	ldr	r2, [sp, #12]
 8009a2a:	4276      	negs	r6, r6
 8009a2c:	7013      	strb	r3, [r2, #0]
 8009a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ba4 <_printf_i+0x210>)
 8009a30:	270a      	movs	r7, #10
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	e018      	b.n	8009a68 <_printf_i+0xd4>
 8009a36:	6806      	ldr	r6, [r0, #0]
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	0649      	lsls	r1, r1, #25
 8009a3c:	d5f1      	bpl.n	8009a22 <_printf_i+0x8e>
 8009a3e:	b236      	sxth	r6, r6
 8009a40:	e7ef      	b.n	8009a22 <_printf_i+0x8e>
 8009a42:	6808      	ldr	r0, [r1, #0]
 8009a44:	6819      	ldr	r1, [r3, #0]
 8009a46:	c940      	ldmia	r1!, {r6}
 8009a48:	0605      	lsls	r5, r0, #24
 8009a4a:	d402      	bmi.n	8009a52 <_printf_i+0xbe>
 8009a4c:	0640      	lsls	r0, r0, #25
 8009a4e:	d500      	bpl.n	8009a52 <_printf_i+0xbe>
 8009a50:	b2b6      	uxth	r6, r6
 8009a52:	6019      	str	r1, [r3, #0]
 8009a54:	4b53      	ldr	r3, [pc, #332]	@ (8009ba4 <_printf_i+0x210>)
 8009a56:	270a      	movs	r7, #10
 8009a58:	9304      	str	r3, [sp, #16]
 8009a5a:	2a6f      	cmp	r2, #111	@ 0x6f
 8009a5c:	d100      	bne.n	8009a60 <_printf_i+0xcc>
 8009a5e:	3f02      	subs	r7, #2
 8009a60:	0023      	movs	r3, r4
 8009a62:	2200      	movs	r2, #0
 8009a64:	3343      	adds	r3, #67	@ 0x43
 8009a66:	701a      	strb	r2, [r3, #0]
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	60a3      	str	r3, [r4, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	db06      	blt.n	8009a7e <_printf_i+0xea>
 8009a70:	2104      	movs	r1, #4
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	9d03      	ldr	r5, [sp, #12]
 8009a76:	438a      	bics	r2, r1
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	4333      	orrs	r3, r6
 8009a7c:	d00c      	beq.n	8009a98 <_printf_i+0x104>
 8009a7e:	9d03      	ldr	r5, [sp, #12]
 8009a80:	0030      	movs	r0, r6
 8009a82:	0039      	movs	r1, r7
 8009a84:	f7f6 fbd6 	bl	8000234 <__aeabi_uidivmod>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	3d01      	subs	r5, #1
 8009a8c:	5c5b      	ldrb	r3, [r3, r1]
 8009a8e:	702b      	strb	r3, [r5, #0]
 8009a90:	0033      	movs	r3, r6
 8009a92:	0006      	movs	r6, r0
 8009a94:	429f      	cmp	r7, r3
 8009a96:	d9f3      	bls.n	8009a80 <_printf_i+0xec>
 8009a98:	2f08      	cmp	r7, #8
 8009a9a:	d109      	bne.n	8009ab0 <_printf_i+0x11c>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	07db      	lsls	r3, r3, #31
 8009aa0:	d506      	bpl.n	8009ab0 <_printf_i+0x11c>
 8009aa2:	6862      	ldr	r2, [r4, #4]
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	dc02      	bgt.n	8009ab0 <_printf_i+0x11c>
 8009aaa:	2330      	movs	r3, #48	@ 0x30
 8009aac:	3d01      	subs	r5, #1
 8009aae:	702b      	strb	r3, [r5, #0]
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	1b5b      	subs	r3, r3, r5
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	9b07      	ldr	r3, [sp, #28]
 8009ab8:	0021      	movs	r1, r4
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	9805      	ldr	r0, [sp, #20]
 8009abe:	9b06      	ldr	r3, [sp, #24]
 8009ac0:	aa09      	add	r2, sp, #36	@ 0x24
 8009ac2:	f7ff fef7 	bl	80098b4 <_printf_common>
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d148      	bne.n	8009b5c <_printf_i+0x1c8>
 8009aca:	2001      	movs	r0, #1
 8009acc:	4240      	negs	r0, r0
 8009ace:	b00b      	add	sp, #44	@ 0x2c
 8009ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	6809      	ldr	r1, [r1, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	6022      	str	r2, [r4, #0]
 8009ada:	2278      	movs	r2, #120	@ 0x78
 8009adc:	4932      	ldr	r1, [pc, #200]	@ (8009ba8 <_printf_i+0x214>)
 8009ade:	9104      	str	r1, [sp, #16]
 8009ae0:	0021      	movs	r1, r4
 8009ae2:	3145      	adds	r1, #69	@ 0x45
 8009ae4:	700a      	strb	r2, [r1, #0]
 8009ae6:	6819      	ldr	r1, [r3, #0]
 8009ae8:	6822      	ldr	r2, [r4, #0]
 8009aea:	c940      	ldmia	r1!, {r6}
 8009aec:	0610      	lsls	r0, r2, #24
 8009aee:	d402      	bmi.n	8009af6 <_printf_i+0x162>
 8009af0:	0650      	lsls	r0, r2, #25
 8009af2:	d500      	bpl.n	8009af6 <_printf_i+0x162>
 8009af4:	b2b6      	uxth	r6, r6
 8009af6:	6019      	str	r1, [r3, #0]
 8009af8:	07d3      	lsls	r3, r2, #31
 8009afa:	d502      	bpl.n	8009b02 <_printf_i+0x16e>
 8009afc:	2320      	movs	r3, #32
 8009afe:	4313      	orrs	r3, r2
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	d001      	beq.n	8009b0a <_printf_i+0x176>
 8009b06:	2710      	movs	r7, #16
 8009b08:	e7aa      	b.n	8009a60 <_printf_i+0xcc>
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	4393      	bics	r3, r2
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	e7f8      	b.n	8009b06 <_printf_i+0x172>
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	680d      	ldr	r5, [r1, #0]
 8009b18:	1d10      	adds	r0, r2, #4
 8009b1a:	6949      	ldr	r1, [r1, #20]
 8009b1c:	6018      	str	r0, [r3, #0]
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	062e      	lsls	r6, r5, #24
 8009b22:	d501      	bpl.n	8009b28 <_printf_i+0x194>
 8009b24:	6019      	str	r1, [r3, #0]
 8009b26:	e002      	b.n	8009b2e <_printf_i+0x19a>
 8009b28:	066d      	lsls	r5, r5, #25
 8009b2a:	d5fb      	bpl.n	8009b24 <_printf_i+0x190>
 8009b2c:	8019      	strh	r1, [r3, #0]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9d03      	ldr	r5, [sp, #12]
 8009b32:	6123      	str	r3, [r4, #16]
 8009b34:	e7bf      	b.n	8009ab6 <_printf_i+0x122>
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	1d11      	adds	r1, r2, #4
 8009b3a:	6019      	str	r1, [r3, #0]
 8009b3c:	6815      	ldr	r5, [r2, #0]
 8009b3e:	2100      	movs	r1, #0
 8009b40:	0028      	movs	r0, r5
 8009b42:	6862      	ldr	r2, [r4, #4]
 8009b44:	f000 f856 	bl	8009bf4 <memchr>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d001      	beq.n	8009b50 <_printf_i+0x1bc>
 8009b4c:	1b40      	subs	r0, r0, r5
 8009b4e:	6060      	str	r0, [r4, #4]
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	2300      	movs	r3, #0
 8009b56:	9a03      	ldr	r2, [sp, #12]
 8009b58:	7013      	strb	r3, [r2, #0]
 8009b5a:	e7ac      	b.n	8009ab6 <_printf_i+0x122>
 8009b5c:	002a      	movs	r2, r5
 8009b5e:	6923      	ldr	r3, [r4, #16]
 8009b60:	9906      	ldr	r1, [sp, #24]
 8009b62:	9805      	ldr	r0, [sp, #20]
 8009b64:	9d07      	ldr	r5, [sp, #28]
 8009b66:	47a8      	blx	r5
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d0ae      	beq.n	8009aca <_printf_i+0x136>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	079b      	lsls	r3, r3, #30
 8009b70:	d415      	bmi.n	8009b9e <_printf_i+0x20a>
 8009b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b74:	68e0      	ldr	r0, [r4, #12]
 8009b76:	4298      	cmp	r0, r3
 8009b78:	daa9      	bge.n	8009ace <_printf_i+0x13a>
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	e7a7      	b.n	8009ace <_printf_i+0x13a>
 8009b7e:	0022      	movs	r2, r4
 8009b80:	2301      	movs	r3, #1
 8009b82:	9906      	ldr	r1, [sp, #24]
 8009b84:	9805      	ldr	r0, [sp, #20]
 8009b86:	9e07      	ldr	r6, [sp, #28]
 8009b88:	3219      	adds	r2, #25
 8009b8a:	47b0      	blx	r6
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d09c      	beq.n	8009aca <_printf_i+0x136>
 8009b90:	3501      	adds	r5, #1
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dcf0      	bgt.n	8009b7e <_printf_i+0x1ea>
 8009b9c:	e7e9      	b.n	8009b72 <_printf_i+0x1de>
 8009b9e:	2500      	movs	r5, #0
 8009ba0:	e7f7      	b.n	8009b92 <_printf_i+0x1fe>
 8009ba2:	46c0      	nop			@ (mov r8, r8)
 8009ba4:	08009fc2 	.word	0x08009fc2
 8009ba8:	08009fd3 	.word	0x08009fd3

08009bac <memmove>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	4288      	cmp	r0, r1
 8009bb0:	d902      	bls.n	8009bb8 <memmove+0xc>
 8009bb2:	188b      	adds	r3, r1, r2
 8009bb4:	4298      	cmp	r0, r3
 8009bb6:	d308      	bcc.n	8009bca <memmove+0x1e>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d007      	beq.n	8009bce <memmove+0x22>
 8009bbe:	5ccc      	ldrb	r4, [r1, r3]
 8009bc0:	54c4      	strb	r4, [r0, r3]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	e7f9      	b.n	8009bba <memmove+0xe>
 8009bc6:	5c8b      	ldrb	r3, [r1, r2]
 8009bc8:	5483      	strb	r3, [r0, r2]
 8009bca:	3a01      	subs	r2, #1
 8009bcc:	d2fb      	bcs.n	8009bc6 <memmove+0x1a>
 8009bce:	bd10      	pop	{r4, pc}

08009bd0 <_sbrk_r>:
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	4d06      	ldr	r5, [pc, #24]	@ (8009bf0 <_sbrk_r+0x20>)
 8009bd6:	0004      	movs	r4, r0
 8009bd8:	0008      	movs	r0, r1
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	f7f8 fa6e 	bl	80020bc <_sbrk>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d103      	bne.n	8009bec <_sbrk_r+0x1c>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d000      	beq.n	8009bec <_sbrk_r+0x1c>
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	bd70      	pop	{r4, r5, r6, pc}
 8009bee:	46c0      	nop			@ (mov r8, r8)
 8009bf0:	20000598 	.word	0x20000598

08009bf4 <memchr>:
 8009bf4:	b2c9      	uxtb	r1, r1
 8009bf6:	1882      	adds	r2, r0, r2
 8009bf8:	4290      	cmp	r0, r2
 8009bfa:	d101      	bne.n	8009c00 <memchr+0xc>
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	4770      	bx	lr
 8009c00:	7803      	ldrb	r3, [r0, #0]
 8009c02:	428b      	cmp	r3, r1
 8009c04:	d0fb      	beq.n	8009bfe <memchr+0xa>
 8009c06:	3001      	adds	r0, #1
 8009c08:	e7f6      	b.n	8009bf8 <memchr+0x4>

08009c0a <memcpy>:
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d100      	bne.n	8009c14 <memcpy+0xa>
 8009c12:	bd10      	pop	{r4, pc}
 8009c14:	5ccc      	ldrb	r4, [r1, r3]
 8009c16:	54c4      	strb	r4, [r0, r3]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	e7f8      	b.n	8009c0e <memcpy+0x4>

08009c1c <_realloc_r>:
 8009c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c1e:	0006      	movs	r6, r0
 8009c20:	000c      	movs	r4, r1
 8009c22:	0015      	movs	r5, r2
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d105      	bne.n	8009c34 <_realloc_r+0x18>
 8009c28:	0011      	movs	r1, r2
 8009c2a:	f7ff fc55 	bl	80094d8 <_malloc_r>
 8009c2e:	0004      	movs	r4, r0
 8009c30:	0020      	movs	r0, r4
 8009c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	d103      	bne.n	8009c40 <_realloc_r+0x24>
 8009c38:	f7ff fbe2 	bl	8009400 <_free_r>
 8009c3c:	002c      	movs	r4, r5
 8009c3e:	e7f7      	b.n	8009c30 <_realloc_r+0x14>
 8009c40:	f000 f81c 	bl	8009c7c <_malloc_usable_size_r>
 8009c44:	0007      	movs	r7, r0
 8009c46:	4285      	cmp	r5, r0
 8009c48:	d802      	bhi.n	8009c50 <_realloc_r+0x34>
 8009c4a:	0843      	lsrs	r3, r0, #1
 8009c4c:	42ab      	cmp	r3, r5
 8009c4e:	d3ef      	bcc.n	8009c30 <_realloc_r+0x14>
 8009c50:	0029      	movs	r1, r5
 8009c52:	0030      	movs	r0, r6
 8009c54:	f7ff fc40 	bl	80094d8 <_malloc_r>
 8009c58:	9001      	str	r0, [sp, #4]
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d101      	bne.n	8009c62 <_realloc_r+0x46>
 8009c5e:	9c01      	ldr	r4, [sp, #4]
 8009c60:	e7e6      	b.n	8009c30 <_realloc_r+0x14>
 8009c62:	002a      	movs	r2, r5
 8009c64:	42bd      	cmp	r5, r7
 8009c66:	d900      	bls.n	8009c6a <_realloc_r+0x4e>
 8009c68:	003a      	movs	r2, r7
 8009c6a:	0021      	movs	r1, r4
 8009c6c:	9801      	ldr	r0, [sp, #4]
 8009c6e:	f7ff ffcc 	bl	8009c0a <memcpy>
 8009c72:	0021      	movs	r1, r4
 8009c74:	0030      	movs	r0, r6
 8009c76:	f7ff fbc3 	bl	8009400 <_free_r>
 8009c7a:	e7f0      	b.n	8009c5e <_realloc_r+0x42>

08009c7c <_malloc_usable_size_r>:
 8009c7c:	1f0b      	subs	r3, r1, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	1f18      	subs	r0, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	da01      	bge.n	8009c8a <_malloc_usable_size_r+0xe>
 8009c86:	580b      	ldr	r3, [r1, r0]
 8009c88:	18c0      	adds	r0, r0, r3
 8009c8a:	4770      	bx	lr

08009c8c <_init>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	46c0      	nop			@ (mov r8, r8)
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr

08009c98 <_fini>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	46c0      	nop			@ (mov r8, r8)
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr
